{"path":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","commits":[{"id":"5da0b42730b6b99b31389ef94cb97384e83b9ede","date":1337107665,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // enable the Lucene 3.x PreflexRW codec explicitly, to work around bugs in IBM J9 / Harmony ServiceLoader:\n    try {\n      final java.lang.reflect.Field spiLoaderField = Codec.class.getDeclaredField(\"loader\");\n      spiLoaderField.setAccessible(true);\n      final Object spiLoader = spiLoaderField.get(null);\n      final java.lang.reflect.Field modifiableServicesField = NamedSPILoader.class.getDeclaredField(\"modifiableServices\");\n      modifiableServicesField.setAccessible(true);\n      @SuppressWarnings({\"unchecked\",\"rawtypes\"}) final Map<String,Codec> serviceMap =\n        (Map) modifiableServicesField.get(spiLoader);\n      if (!(Codec.forName(\"Lucene3x\") instanceof PreFlexRWCodec)) {\n        if (Constants.JAVA_VENDOR.startsWith(\"IBM\")) {\n          // definitely a buggy version\n          System.err.println(\"ERROR: Your VM's java.util.ServiceLoader implementation is buggy\"+\n            \" and does not respect classpath order, please report this to the vendor.\");\n        } else {\n          // could just be a classpath issue\n          System.err.println(\"ERROR: fix your classpath to have tests-framework.jar before lucene-core.jar!\"+\n              \" If you have already done this, then your VM's java.util.ServiceLoader implementation is buggy\"+\n              \" and does not respect classpath order, please report this to the vendor.\");\n        }\n        serviceMap.put(\"Lucene3x\", new PreFlexRWCodec());\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Cannot access internals of Codec and NamedSPILoader classes\", e);\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n      System.err.println(\"NOTE: Suppressing codecs \" + Arrays.toString(a.value()) \n          + \" for \" + targetClass.getSimpleName() + \".\");\n    }\n    \n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random.nextInt(10);\n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2 && !shouldAvoidCodec(\"Lucene3x\"))) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"Appending\"))) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());    \n  }\n\n","sourceOld":"  @BeforeClass\n  static void beforeClassLuceneTestCaseJ4() {\n    testClassesRun.add(getTestClass().getSimpleName());\n\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // enable the Lucene 3.x PreflexRW codec explicitly, to work around bugs in IBM J9 / Harmony ServiceLoader:\n    try {\n      final java.lang.reflect.Field spiLoaderField = Codec.class.getDeclaredField(\"loader\");\n      spiLoaderField.setAccessible(true);\n      final Object spiLoader = spiLoaderField.get(null);\n      final java.lang.reflect.Field modifiableServicesField = NamedSPILoader.class.getDeclaredField(\"modifiableServices\");\n      modifiableServicesField.setAccessible(true);\n      @SuppressWarnings({\"unchecked\",\"rawtypes\"}) final Map<String,Codec> serviceMap =\n        (Map) modifiableServicesField.get(spiLoader);\n      if (!(Codec.forName(\"Lucene3x\") instanceof PreFlexRWCodec)) {\n        if (Constants.JAVA_VENDOR.startsWith(\"IBM\")) {\n          // definitely a buggy version\n          System.err.println(\"ERROR: Your VM's java.util.ServiceLoader implementation is buggy\"+\n            \" and does not respect classpath order, please report this to the vendor.\");\n        } else {\n          // could just be a classpath issue\n          System.err.println(\"ERROR: fix your classpath to have tests-framework.jar before lucene-core.jar!\"+\n              \" If you have already done this, then your VM's java.util.ServiceLoader implementation is buggy\"+\n              \" and does not respect classpath order, please report this to the vendor.\");\n        }\n        serviceMap.put(\"Lucene3x\", new PreFlexRWCodec());\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Cannot access internals of Codec and NamedSPILoader classes\", e);\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final boolean v = random().nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else {\n      if (v) {\n        InfoStream.setDefault(new NullInfoStream());\n      }\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs = new HashSet<String>(Arrays.asList(a.value()));\n      System.err.println(\"NOTE: Suppressing codecs \" + Arrays.toString(a.value()) \n          + \" for \" + targetClass.getSimpleName() + \".\");\n    } else {\n      avoidCodecs = null;\n    }\n    \n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random().nextInt(10);\n    \n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2 && !shouldAvoidCodec(\"Lucene3x\"))) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"Appending\"))) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random(), avoidCodecs);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n\n    // Initialize locale/ timezone.\n    TEST_LOCALE = System.getProperty(\"tests.locale\", \"random\");\n    TEST_TIMEZONE = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether TEST_LOCALE was specified or not).\n    Locale randomLocale = randomLocale(random());\n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n    testsFailed = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2dee33619431ada2a7a07f5fe2dbd94bac6a460","date":1337274029,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // enable the Lucene 3.x PreflexRW codec explicitly, to work around bugs in IBM J9 / Harmony ServiceLoader:\n    try {\n      final java.lang.reflect.Field spiLoaderField = Codec.class.getDeclaredField(\"loader\");\n      spiLoaderField.setAccessible(true);\n      final Object spiLoader = spiLoaderField.get(null);\n      final java.lang.reflect.Field modifiableServicesField = NamedSPILoader.class.getDeclaredField(\"modifiableServices\");\n      modifiableServicesField.setAccessible(true);\n      @SuppressWarnings({\"unchecked\",\"rawtypes\"}) final Map<String,Codec> serviceMap =\n        (Map) modifiableServicesField.get(spiLoader);\n      if (!(Codec.forName(\"Lucene3x\") instanceof PreFlexRWCodec)) {\n        if (Constants.JAVA_VENDOR.startsWith(\"IBM\")) {\n          // definitely a buggy version\n          System.err.println(\"ERROR: Your VM's java.util.ServiceLoader implementation is buggy\"+\n            \" and does not respect classpath order, please report this to the vendor.\");\n        } else {\n          // could just be a classpath issue\n          System.err.println(\"ERROR: fix your classpath to have tests-framework.jar before lucene-core.jar!\"+\n              \" If you have already done this, then your VM's java.util.ServiceLoader implementation is buggy\"+\n              \" and does not respect classpath order, please report this to the vendor.\");\n        }\n        serviceMap.put(\"Lucene3x\", new PreFlexRWCodec());\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Cannot access internals of Codec and NamedSPILoader classes\", e);\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...:\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n      System.err.println(\"NOTE: Suppressing codecs \" + Arrays.toString(a.value()) \n          + \" for \" + targetClass.getSimpleName() + \".\");\n    }\n    \n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random.nextInt(10);\n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2 && !shouldAvoidCodec(\"Lucene3x\"))) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"Appending\"))) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());    \n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // enable the Lucene 3.x PreflexRW codec explicitly, to work around bugs in IBM J9 / Harmony ServiceLoader:\n    try {\n      final java.lang.reflect.Field spiLoaderField = Codec.class.getDeclaredField(\"loader\");\n      spiLoaderField.setAccessible(true);\n      final Object spiLoader = spiLoaderField.get(null);\n      final java.lang.reflect.Field modifiableServicesField = NamedSPILoader.class.getDeclaredField(\"modifiableServices\");\n      modifiableServicesField.setAccessible(true);\n      @SuppressWarnings({\"unchecked\",\"rawtypes\"}) final Map<String,Codec> serviceMap =\n        (Map) modifiableServicesField.get(spiLoader);\n      if (!(Codec.forName(\"Lucene3x\") instanceof PreFlexRWCodec)) {\n        if (Constants.JAVA_VENDOR.startsWith(\"IBM\")) {\n          // definitely a buggy version\n          System.err.println(\"ERROR: Your VM's java.util.ServiceLoader implementation is buggy\"+\n            \" and does not respect classpath order, please report this to the vendor.\");\n        } else {\n          // could just be a classpath issue\n          System.err.println(\"ERROR: fix your classpath to have tests-framework.jar before lucene-core.jar!\"+\n              \" If you have already done this, then your VM's java.util.ServiceLoader implementation is buggy\"+\n              \" and does not respect classpath order, please report this to the vendor.\");\n        }\n        serviceMap.put(\"Lucene3x\", new PreFlexRWCodec());\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Cannot access internals of Codec and NamedSPILoader classes\", e);\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n      System.err.println(\"NOTE: Suppressing codecs \" + Arrays.toString(a.value()) \n          + \" for \" + targetClass.getSimpleName() + \".\");\n    }\n    \n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random.nextInt(10);\n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2 && !shouldAvoidCodec(\"Lucene3x\"))) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"Appending\"))) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());    \n  }\n\n","bugFix":null,"bugIntro":["197be891529ba2dea8287e2251906be9533dc8ea"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // enable the Lucene 3.x PreflexRW codec explicitly, to work around bugs in IBM J9 / Harmony ServiceLoader:\n    try {\n      final java.lang.reflect.Field spiLoaderField = Codec.class.getDeclaredField(\"loader\");\n      spiLoaderField.setAccessible(true);\n      final Object spiLoader = spiLoaderField.get(null);\n      final java.lang.reflect.Field modifiableServicesField = NamedSPILoader.class.getDeclaredField(\"modifiableServices\");\n      modifiableServicesField.setAccessible(true);\n      @SuppressWarnings({\"unchecked\",\"rawtypes\"}) final Map<String,Codec> serviceMap =\n        (Map) modifiableServicesField.get(spiLoader);\n      if (!(Codec.forName(\"Lucene3x\") instanceof PreFlexRWCodec)) {\n        if (Constants.JAVA_VENDOR.startsWith(\"IBM\")) {\n          // definitely a buggy version\n          System.err.println(\"ERROR: Your VM's java.util.ServiceLoader implementation is buggy\"+\n            \" and does not respect classpath order, please report this to the vendor.\");\n        } else {\n          // could just be a classpath issue\n          System.err.println(\"ERROR: fix your classpath to have tests-framework.jar before lucene-core.jar!\"+\n              \" If you have already done this, then your VM's java.util.ServiceLoader implementation is buggy\"+\n              \" and does not respect classpath order, please report this to the vendor.\");\n        }\n        serviceMap.put(\"Lucene3x\", new PreFlexRWCodec());\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Cannot access internals of Codec and NamedSPILoader classes\", e);\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...:\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n      System.err.println(\"NOTE: Suppressing codecs \" + Arrays.toString(a.value()) \n          + \" for \" + targetClass.getSimpleName() + \".\");\n    }\n    \n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random.nextInt(10);\n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2 && !shouldAvoidCodec(\"Lucene3x\"))) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"Appending\"))) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());    \n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // enable the Lucene 3.x PreflexRW codec explicitly, to work around bugs in IBM J9 / Harmony ServiceLoader:\n    try {\n      final java.lang.reflect.Field spiLoaderField = Codec.class.getDeclaredField(\"loader\");\n      spiLoaderField.setAccessible(true);\n      final Object spiLoader = spiLoaderField.get(null);\n      final java.lang.reflect.Field modifiableServicesField = NamedSPILoader.class.getDeclaredField(\"modifiableServices\");\n      modifiableServicesField.setAccessible(true);\n      @SuppressWarnings({\"unchecked\",\"rawtypes\"}) final Map<String,Codec> serviceMap =\n        (Map) modifiableServicesField.get(spiLoader);\n      if (!(Codec.forName(\"Lucene3x\") instanceof PreFlexRWCodec)) {\n        if (Constants.JAVA_VENDOR.startsWith(\"IBM\")) {\n          // definitely a buggy version\n          System.err.println(\"ERROR: Your VM's java.util.ServiceLoader implementation is buggy\"+\n            \" and does not respect classpath order, please report this to the vendor.\");\n        } else {\n          // could just be a classpath issue\n          System.err.println(\"ERROR: fix your classpath to have tests-framework.jar before lucene-core.jar!\"+\n              \" If you have already done this, then your VM's java.util.ServiceLoader implementation is buggy\"+\n              \" and does not respect classpath order, please report this to the vendor.\");\n        }\n        serviceMap.put(\"Lucene3x\", new PreFlexRWCodec());\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Cannot access internals of Codec and NamedSPILoader classes\", e);\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n      System.err.println(\"NOTE: Suppressing codecs \" + Arrays.toString(a.value()) \n          + \" for \" + targetClass.getSimpleName() + \".\");\n    }\n    \n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random.nextInt(10);\n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2 && !shouldAvoidCodec(\"Lucene3x\"))) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"Appending\"))) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"57ae3024996ccdb3c36c42cb890e1efb37df4ce8","date":1338343651,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // enable the Lucene 3.x PreflexRW codec explicitly, to work around bugs in IBM J9 / Harmony ServiceLoader:\n    try {\n      final java.lang.reflect.Field spiLoaderField = Codec.class.getDeclaredField(\"loader\");\n      spiLoaderField.setAccessible(true);\n      final Object spiLoader = spiLoaderField.get(null);\n      final java.lang.reflect.Field modifiableServicesField = NamedSPILoader.class.getDeclaredField(\"modifiableServices\");\n      modifiableServicesField.setAccessible(true);\n      @SuppressWarnings({\"unchecked\",\"rawtypes\"}) final Map<String,Codec> serviceMap =\n        (Map) modifiableServicesField.get(spiLoader);\n      /* note: re-enable this if we make a Lucene4x impersonator \n      if (!(Codec.forName(\"Lucene3x\") instanceof PreFlexRWCodec)) {\n        if (Constants.JAVA_VENDOR.startsWith(\"IBM\")) {\n          // definitely a buggy version\n          System.err.println(\"ERROR: Your VM's java.util.ServiceLoader implementation is buggy\"+\n            \" and does not respect classpath order, please report this to the vendor.\");\n        } else {\n          // could just be a classpath issue\n          System.err.println(\"ERROR: fix your classpath to have tests-framework.jar before lucene-core.jar!\"+\n              \" If you have already done this, then your VM's java.util.ServiceLoader implementation is buggy\"+\n              \" and does not respect classpath order, please report this to the vendor.\");\n        }\n        serviceMap.put(\"Lucene3x\", new PreFlexRWCodec());\n      } */\n    } catch (Exception e) {\n      throw new RuntimeException(\"Cannot access internals of Codec and NamedSPILoader classes\", e);\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...:\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n      System.err.println(\"NOTE: Suppressing codecs \" + Arrays.toString(a.value()) \n          + \" for \" + targetClass.getSimpleName() + \".\");\n    }\n    \n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random.nextInt(10);\n    /* note: re-enable this if we make a 4.x impersonator\n     * if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2 && !shouldAvoidCodec(\"Lucene3x\"))) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else */if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"Appending\"))) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());    \n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // enable the Lucene 3.x PreflexRW codec explicitly, to work around bugs in IBM J9 / Harmony ServiceLoader:\n    try {\n      final java.lang.reflect.Field spiLoaderField = Codec.class.getDeclaredField(\"loader\");\n      spiLoaderField.setAccessible(true);\n      final Object spiLoader = spiLoaderField.get(null);\n      final java.lang.reflect.Field modifiableServicesField = NamedSPILoader.class.getDeclaredField(\"modifiableServices\");\n      modifiableServicesField.setAccessible(true);\n      @SuppressWarnings({\"unchecked\",\"rawtypes\"}) final Map<String,Codec> serviceMap =\n        (Map) modifiableServicesField.get(spiLoader);\n      if (!(Codec.forName(\"Lucene3x\") instanceof PreFlexRWCodec)) {\n        if (Constants.JAVA_VENDOR.startsWith(\"IBM\")) {\n          // definitely a buggy version\n          System.err.println(\"ERROR: Your VM's java.util.ServiceLoader implementation is buggy\"+\n            \" and does not respect classpath order, please report this to the vendor.\");\n        } else {\n          // could just be a classpath issue\n          System.err.println(\"ERROR: fix your classpath to have tests-framework.jar before lucene-core.jar!\"+\n              \" If you have already done this, then your VM's java.util.ServiceLoader implementation is buggy\"+\n              \" and does not respect classpath order, please report this to the vendor.\");\n        }\n        serviceMap.put(\"Lucene3x\", new PreFlexRWCodec());\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Cannot access internals of Codec and NamedSPILoader classes\", e);\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...:\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n      System.err.println(\"NOTE: Suppressing codecs \" + Arrays.toString(a.value()) \n          + \" for \" + targetClass.getSimpleName() + \".\");\n    }\n    \n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random.nextInt(10);\n    if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2 && !shouldAvoidCodec(\"Lucene3x\"))) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"Appending\"))) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6a88536886c93d729596349585802a38c63436ce","date":1338402624,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // enable the Lucene 3.x PreflexRW codec explicitly, to work around bugs in IBM J9 / Harmony ServiceLoader:\n    try {\n      final java.lang.reflect.Field spiLoaderField = Codec.class.getDeclaredField(\"loader\");\n      spiLoaderField.setAccessible(true);\n      final Object spiLoader = spiLoaderField.get(null);\n      final java.lang.reflect.Field modifiableServicesField = NamedSPILoader.class.getDeclaredField(\"modifiableServices\");\n      modifiableServicesField.setAccessible(true);\n      @SuppressWarnings({\"unchecked\",\"rawtypes\"}) final Map<String,Codec> serviceMap =\n        (Map) modifiableServicesField.get(spiLoader);\n      /* note: re-enable this if we make a Lucene4x impersonator \n      if (!(Codec.forName(\"Lucene3x\") instanceof PreFlexRWCodec)) {\n        if (Constants.JAVA_VENDOR.startsWith(\"IBM\")) {\n          // definitely a buggy version\n          System.err.println(\"ERROR: Your VM's java.util.ServiceLoader implementation is buggy\"+\n            \" and does not respect classpath order, please report this to the vendor.\");\n        } else {\n          // could just be a classpath issue\n          System.err.println(\"ERROR: fix your classpath to have tests-framework.jar before lucene-core.jar!\"+\n              \" If you have already done this, then your VM's java.util.ServiceLoader implementation is buggy\"+\n              \" and does not respect classpath order, please report this to the vendor.\");\n        }\n        serviceMap.put(\"Lucene3x\", new PreFlexRWCodec());\n      } */\n    } catch (Exception e) {\n      throw new RuntimeException(\"Cannot access internals of Codec and NamedSPILoader classes\", e);\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...:\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n      System.err.println(\"NOTE: Suppressing codecs \" + Arrays.toString(a.value()) \n          + \" for \" + targetClass.getSimpleName() + \".\");\n    }\n    \n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    /* note: re-enable this if we make a 4.x impersonator\n     * if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2 && !shouldAvoidCodec(\"Lucene3x\"))) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else */if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"Appending\"))) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());    \n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // enable the Lucene 3.x PreflexRW codec explicitly, to work around bugs in IBM J9 / Harmony ServiceLoader:\n    try {\n      final java.lang.reflect.Field spiLoaderField = Codec.class.getDeclaredField(\"loader\");\n      spiLoaderField.setAccessible(true);\n      final Object spiLoader = spiLoaderField.get(null);\n      final java.lang.reflect.Field modifiableServicesField = NamedSPILoader.class.getDeclaredField(\"modifiableServices\");\n      modifiableServicesField.setAccessible(true);\n      @SuppressWarnings({\"unchecked\",\"rawtypes\"}) final Map<String,Codec> serviceMap =\n        (Map) modifiableServicesField.get(spiLoader);\n      /* note: re-enable this if we make a Lucene4x impersonator \n      if (!(Codec.forName(\"Lucene3x\") instanceof PreFlexRWCodec)) {\n        if (Constants.JAVA_VENDOR.startsWith(\"IBM\")) {\n          // definitely a buggy version\n          System.err.println(\"ERROR: Your VM's java.util.ServiceLoader implementation is buggy\"+\n            \" and does not respect classpath order, please report this to the vendor.\");\n        } else {\n          // could just be a classpath issue\n          System.err.println(\"ERROR: fix your classpath to have tests-framework.jar before lucene-core.jar!\"+\n              \" If you have already done this, then your VM's java.util.ServiceLoader implementation is buggy\"+\n              \" and does not respect classpath order, please report this to the vendor.\");\n        }\n        serviceMap.put(\"Lucene3x\", new PreFlexRWCodec());\n      } */\n    } catch (Exception e) {\n      throw new RuntimeException(\"Cannot access internals of Codec and NamedSPILoader classes\", e);\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...:\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n      System.err.println(\"NOTE: Suppressing codecs \" + Arrays.toString(a.value()) \n          + \" for \" + targetClass.getSimpleName() + \".\");\n    }\n    \n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    int randomVal = random.nextInt(10);\n    /* note: re-enable this if we make a 4.x impersonator\n     * if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2 && !shouldAvoidCodec(\"Lucene3x\"))) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else */if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"Appending\"))) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a4febe69e4c727130aaf1a32c4020ed158101b55","date":1338642700,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // enable the Lucene 3.x PreflexRW codec explicitly, to work around bugs in IBM J9 / Harmony ServiceLoader:\n    try {\n      final java.lang.reflect.Field spiLoaderField = Codec.class.getDeclaredField(\"loader\");\n      spiLoaderField.setAccessible(true);\n      final Object spiLoader = spiLoaderField.get(null);\n      final java.lang.reflect.Field modifiableServicesField = NamedSPILoader.class.getDeclaredField(\"modifiableServices\");\n      modifiableServicesField.setAccessible(true);\n      /* note: re-enable this if we make a Lucene4x impersonator \n      @SuppressWarnings({\"unchecked\",\"rawtypes\"}) final Map<String,Codec> serviceMap =\n        (Map) modifiableServicesField.get(spiLoader);\n      if (!(Codec.forName(\"Lucene3x\") instanceof PreFlexRWCodec)) {\n        if (Constants.JAVA_VENDOR.startsWith(\"IBM\")) {\n          // definitely a buggy version\n          System.err.println(\"ERROR: Your VM's java.util.ServiceLoader implementation is buggy\"+\n            \" and does not respect classpath order, please report this to the vendor.\");\n        } else {\n          // could just be a classpath issue\n          System.err.println(\"ERROR: fix your classpath to have tests-framework.jar before lucene-core.jar!\"+\n              \" If you have already done this, then your VM's java.util.ServiceLoader implementation is buggy\"+\n              \" and does not respect classpath order, please report this to the vendor.\");\n        }\n        serviceMap.put(\"Lucene3x\", new PreFlexRWCodec());\n      } */\n    } catch (Exception e) {\n      throw new RuntimeException(\"Cannot access internals of Codec and NamedSPILoader classes\", e);\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...:\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n      System.err.println(\"NOTE: Suppressing codecs \" + Arrays.toString(a.value()) \n          + \" for \" + targetClass.getSimpleName() + \".\");\n    }\n    \n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    /* note: re-enable this if we make a 4.x impersonator\n      if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal < 2 &&\n                                          !shouldAvoidCodec(\"Lucene3x\"))) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else */if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"Appending\"))) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());    \n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // enable the Lucene 3.x PreflexRW codec explicitly, to work around bugs in IBM J9 / Harmony ServiceLoader:\n    try {\n      final java.lang.reflect.Field spiLoaderField = Codec.class.getDeclaredField(\"loader\");\n      spiLoaderField.setAccessible(true);\n      final Object spiLoader = spiLoaderField.get(null);\n      final java.lang.reflect.Field modifiableServicesField = NamedSPILoader.class.getDeclaredField(\"modifiableServices\");\n      modifiableServicesField.setAccessible(true);\n      @SuppressWarnings({\"unchecked\",\"rawtypes\"}) final Map<String,Codec> serviceMap =\n        (Map) modifiableServicesField.get(spiLoader);\n      /* note: re-enable this if we make a Lucene4x impersonator \n      if (!(Codec.forName(\"Lucene3x\") instanceof PreFlexRWCodec)) {\n        if (Constants.JAVA_VENDOR.startsWith(\"IBM\")) {\n          // definitely a buggy version\n          System.err.println(\"ERROR: Your VM's java.util.ServiceLoader implementation is buggy\"+\n            \" and does not respect classpath order, please report this to the vendor.\");\n        } else {\n          // could just be a classpath issue\n          System.err.println(\"ERROR: fix your classpath to have tests-framework.jar before lucene-core.jar!\"+\n              \" If you have already done this, then your VM's java.util.ServiceLoader implementation is buggy\"+\n              \" and does not respect classpath order, please report this to the vendor.\");\n        }\n        serviceMap.put(\"Lucene3x\", new PreFlexRWCodec());\n      } */\n    } catch (Exception e) {\n      throw new RuntimeException(\"Cannot access internals of Codec and NamedSPILoader classes\", e);\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...:\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n      System.err.println(\"NOTE: Suppressing codecs \" + Arrays.toString(a.value()) \n          + \" for \" + targetClass.getSimpleName() + \".\");\n    }\n    \n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    /* note: re-enable this if we make a 4.x impersonator\n     * if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal < 2 && !shouldAvoidCodec(\"Lucene3x\"))) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else */if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"Appending\"))) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());    \n  }\n\n","bugFix":null,"bugIntro":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a9007cca7bfa084e33b5d7bfe532dd7e1f5dd87","date":1339003001,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // enable the Lucene 3.x PreflexRW codec explicitly, to work around bugs in IBM J9 / Harmony ServiceLoader:\n    try {\n      final java.lang.reflect.Field spiLoaderField = Codec.class.getDeclaredField(\"loader\");\n      spiLoaderField.setAccessible(true);\n      final Object spiLoader = spiLoaderField.get(null);\n      final java.lang.reflect.Field modifiableServicesField = NamedSPILoader.class.getDeclaredField(\"modifiableServices\");\n      modifiableServicesField.setAccessible(true);\n      /* note: re-enable this if we make a Lucene4x impersonator \n      @SuppressWarnings({\"unchecked\",\"rawtypes\"}) final Map<String,Codec> serviceMap =\n        (Map) modifiableServicesField.get(spiLoader);\n      if (!(Codec.forName(\"Lucene3x\") instanceof PreFlexRWCodec)) {\n        if (Constants.JAVA_VENDOR.startsWith(\"IBM\")) {\n          // definitely a buggy version\n          System.err.println(\"ERROR: Your VM's java.util.ServiceLoader implementation is buggy\"+\n            \" and does not respect classpath order, please report this to the vendor.\");\n        } else {\n          // could just be a classpath issue\n          System.err.println(\"ERROR: fix your classpath to have tests-framework.jar before lucene-core.jar!\"+\n              \" If you have already done this, then your VM's java.util.ServiceLoader implementation is buggy\"+\n              \" and does not respect classpath order, please report this to the vendor.\");\n        }\n        serviceMap.put(\"Lucene3x\", new PreFlexRWCodec());\n      } */\n    } catch (Exception e) {\n      throw new RuntimeException(\"Cannot access internals of Codec and NamedSPILoader classes\", e);\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...:\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n      System.err.println(\"NOTE: Suppressing codecs \" + Arrays.toString(a.value()) \n          + \" for \" + targetClass.getSimpleName() + \".\");\n    }\n    \n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n\n    /* note: re-enable this if we make a 4.x impersonator\n      if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal < 2 &&\n                                          !shouldAvoidCodec(\"Lucene3x\"))) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else */ if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"Appending\"))) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());    \n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // enable the Lucene 3.x PreflexRW codec explicitly, to work around bugs in IBM J9 / Harmony ServiceLoader:\n    try {\n      final java.lang.reflect.Field spiLoaderField = Codec.class.getDeclaredField(\"loader\");\n      spiLoaderField.setAccessible(true);\n      final Object spiLoader = spiLoaderField.get(null);\n      final java.lang.reflect.Field modifiableServicesField = NamedSPILoader.class.getDeclaredField(\"modifiableServices\");\n      modifiableServicesField.setAccessible(true);\n      /* note: re-enable this if we make a Lucene4x impersonator \n      @SuppressWarnings({\"unchecked\",\"rawtypes\"}) final Map<String,Codec> serviceMap =\n        (Map) modifiableServicesField.get(spiLoader);\n      if (!(Codec.forName(\"Lucene3x\") instanceof PreFlexRWCodec)) {\n        if (Constants.JAVA_VENDOR.startsWith(\"IBM\")) {\n          // definitely a buggy version\n          System.err.println(\"ERROR: Your VM's java.util.ServiceLoader implementation is buggy\"+\n            \" and does not respect classpath order, please report this to the vendor.\");\n        } else {\n          // could just be a classpath issue\n          System.err.println(\"ERROR: fix your classpath to have tests-framework.jar before lucene-core.jar!\"+\n              \" If you have already done this, then your VM's java.util.ServiceLoader implementation is buggy\"+\n              \" and does not respect classpath order, please report this to the vendor.\");\n        }\n        serviceMap.put(\"Lucene3x\", new PreFlexRWCodec());\n      } */\n    } catch (Exception e) {\n      throw new RuntimeException(\"Cannot access internals of Codec and NamedSPILoader classes\", e);\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...:\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n      System.err.println(\"NOTE: Suppressing codecs \" + Arrays.toString(a.value()) \n          + \" for \" + targetClass.getSimpleName() + \".\");\n    }\n    \n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    /* note: re-enable this if we make a 4.x impersonator\n      if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal < 2 &&\n                                          !shouldAvoidCodec(\"Lucene3x\"))) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else */if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"Appending\"))) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"197be891529ba2dea8287e2251906be9533dc8ea","date":1339266828,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // enable the Lucene 3.x PreflexRW codec explicitly, to work around bugs in IBM J9 / Harmony ServiceLoader:\n    try {\n      final java.lang.reflect.Field spiLoaderField = Codec.class.getDeclaredField(\"loader\");\n      spiLoaderField.setAccessible(true);\n      final Object spiLoader = spiLoaderField.get(null);\n      final java.lang.reflect.Field modifiableServicesField = NamedSPILoader.class.getDeclaredField(\"modifiableServices\");\n      modifiableServicesField.setAccessible(true);\n      /* note: re-enable this if we make a Lucene4x impersonator \n      @SuppressWarnings({\"unchecked\",\"rawtypes\"}) final Map<String,Codec> serviceMap =\n        (Map) modifiableServicesField.get(spiLoader);\n      if (!(Codec.forName(\"Lucene3x\") instanceof PreFlexRWCodec)) {\n        if (Constants.JAVA_VENDOR.startsWith(\"IBM\")) {\n          // definitely a buggy version\n          System.err.println(\"ERROR: Your VM's java.util.ServiceLoader implementation is buggy\"+\n            \" and does not respect classpath order, please report this to the vendor.\");\n        } else {\n          // could just be a classpath issue\n          System.err.println(\"ERROR: fix your classpath to have tests-framework.jar before lucene-core.jar!\"+\n              \" If you have already done this, then your VM's java.util.ServiceLoader implementation is buggy\"+\n              \" and does not respect classpath order, please report this to the vendor.\");\n        }\n        serviceMap.put(\"Lucene3x\", new PreFlexRWCodec());\n      } */\n    } catch (Exception e) {\n      throw new RuntimeException(\"Cannot access internals of Codec and NamedSPILoader classes\", e);\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n\n    /* note: re-enable this if we make a 4.x impersonator\n      if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal < 2 &&\n                                          !shouldAvoidCodec(\"Lucene3x\"))) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else */ if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"Appending\"))) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // enable the Lucene 3.x PreflexRW codec explicitly, to work around bugs in IBM J9 / Harmony ServiceLoader:\n    try {\n      final java.lang.reflect.Field spiLoaderField = Codec.class.getDeclaredField(\"loader\");\n      spiLoaderField.setAccessible(true);\n      final Object spiLoader = spiLoaderField.get(null);\n      final java.lang.reflect.Field modifiableServicesField = NamedSPILoader.class.getDeclaredField(\"modifiableServices\");\n      modifiableServicesField.setAccessible(true);\n      /* note: re-enable this if we make a Lucene4x impersonator \n      @SuppressWarnings({\"unchecked\",\"rawtypes\"}) final Map<String,Codec> serviceMap =\n        (Map) modifiableServicesField.get(spiLoader);\n      if (!(Codec.forName(\"Lucene3x\") instanceof PreFlexRWCodec)) {\n        if (Constants.JAVA_VENDOR.startsWith(\"IBM\")) {\n          // definitely a buggy version\n          System.err.println(\"ERROR: Your VM's java.util.ServiceLoader implementation is buggy\"+\n            \" and does not respect classpath order, please report this to the vendor.\");\n        } else {\n          // could just be a classpath issue\n          System.err.println(\"ERROR: fix your classpath to have tests-framework.jar before lucene-core.jar!\"+\n              \" If you have already done this, then your VM's java.util.ServiceLoader implementation is buggy\"+\n              \" and does not respect classpath order, please report this to the vendor.\");\n        }\n        serviceMap.put(\"Lucene3x\", new PreFlexRWCodec());\n      } */\n    } catch (Exception e) {\n      throw new RuntimeException(\"Cannot access internals of Codec and NamedSPILoader classes\", e);\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...:\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n      System.err.println(\"NOTE: Suppressing codecs \" + Arrays.toString(a.value()) \n          + \" for \" + targetClass.getSimpleName() + \".\");\n    }\n    \n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n\n    /* note: re-enable this if we make a 4.x impersonator\n      if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal < 2 &&\n                                          !shouldAvoidCodec(\"Lucene3x\"))) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else */ if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"Appending\"))) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());    \n  }\n\n","bugFix":["7b91922b55d15444d554721b352861d028eb8278","75b4d037d2c8fd7d68c07be61d25c0260cf8091e","d2dee33619431ada2a7a07f5fe2dbd94bac6a460","5da0b42730b6b99b31389ef94cb97384e83b9ede"],"bugIntro":["48ac7cad6e13e58e631e431ea26e8d4c8756f63a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e1b1e202e0a963a0094d637c018a8595f9bd245f","date":1342033808,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // enable the Lucene 3.x PreflexRW codec explicitly, to work around bugs in IBM J9 / Harmony ServiceLoader:\n    try {\n      final java.lang.reflect.Field spiLoaderField = Codec.class.getDeclaredField(\"loader\");\n      spiLoaderField.setAccessible(true);\n      final Object spiLoader = spiLoaderField.get(null);\n      final java.lang.reflect.Field modifiableServicesField = NamedSPILoader.class.getDeclaredField(\"modifiableServices\");\n      modifiableServicesField.setAccessible(true);\n      /* note: re-enable this if we make a Lucene4x impersonator \n      @SuppressWarnings({\"unchecked\",\"rawtypes\"}) final Map<String,Codec> serviceMap =\n        (Map) modifiableServicesField.get(spiLoader);\n      if (!(Codec.forName(\"Lucene3x\") instanceof PreFlexRWCodec)) {\n        if (Constants.JAVA_VENDOR.startsWith(\"IBM\")) {\n          // definitely a buggy version\n          System.err.println(\"ERROR: Your VM's java.util.ServiceLoader implementation is buggy\"+\n            \" and does not respect classpath order, please report this to the vendor.\");\n        } else {\n          // could just be a classpath issue\n          System.err.println(\"ERROR: fix your classpath to have tests-framework.jar before lucene-core.jar!\"+\n              \" If you have already done this, then your VM's java.util.ServiceLoader implementation is buggy\"+\n              \" and does not respect classpath order, please report this to the vendor.\");\n        }\n        serviceMap.put(\"Lucene3x\", new PreFlexRWCodec());\n      } */\n    } catch (Exception e) {\n      throw new RuntimeException(\"Cannot access internals of Codec and NamedSPILoader classes\", e);\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n\n    /* note: re-enable this if we make a 4.x impersonator\n      if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal < 2 &&\n                                          !shouldAvoidCodec(\"Lucene3x\"))) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else */ if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      final PostingsFormat format;\n      if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(random);\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      codec = new Lucene40Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"Appending\"))) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // enable the Lucene 3.x PreflexRW codec explicitly, to work around bugs in IBM J9 / Harmony ServiceLoader:\n    try {\n      final java.lang.reflect.Field spiLoaderField = Codec.class.getDeclaredField(\"loader\");\n      spiLoaderField.setAccessible(true);\n      final Object spiLoader = spiLoaderField.get(null);\n      final java.lang.reflect.Field modifiableServicesField = NamedSPILoader.class.getDeclaredField(\"modifiableServices\");\n      modifiableServicesField.setAccessible(true);\n      /* note: re-enable this if we make a Lucene4x impersonator \n      @SuppressWarnings({\"unchecked\",\"rawtypes\"}) final Map<String,Codec> serviceMap =\n        (Map) modifiableServicesField.get(spiLoader);\n      if (!(Codec.forName(\"Lucene3x\") instanceof PreFlexRWCodec)) {\n        if (Constants.JAVA_VENDOR.startsWith(\"IBM\")) {\n          // definitely a buggy version\n          System.err.println(\"ERROR: Your VM's java.util.ServiceLoader implementation is buggy\"+\n            \" and does not respect classpath order, please report this to the vendor.\");\n        } else {\n          // could just be a classpath issue\n          System.err.println(\"ERROR: fix your classpath to have tests-framework.jar before lucene-core.jar!\"+\n              \" If you have already done this, then your VM's java.util.ServiceLoader implementation is buggy\"+\n              \" and does not respect classpath order, please report this to the vendor.\");\n        }\n        serviceMap.put(\"Lucene3x\", new PreFlexRWCodec());\n      } */\n    } catch (Exception e) {\n      throw new RuntimeException(\"Cannot access internals of Codec and NamedSPILoader classes\", e);\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n\n    /* note: re-enable this if we make a 4.x impersonator\n      if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal < 2 &&\n                                          !shouldAvoidCodec(\"Lucene3x\"))) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else */ if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"Appending\"))) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3128e6d07d9fef0d1aa24f58b07133c9293131b2","date":1342190719,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // enable the Lucene 3.x PreflexRW codec explicitly, to work around bugs in IBM J9 / Harmony ServiceLoader:\n    try {\n      final java.lang.reflect.Field spiLoaderField = Codec.class.getDeclaredField(\"loader\");\n      spiLoaderField.setAccessible(true);\n      final Object spiLoader = spiLoaderField.get(null);\n      final java.lang.reflect.Field modifiableServicesField = NamedSPILoader.class.getDeclaredField(\"modifiableServices\");\n      modifiableServicesField.setAccessible(true);\n      /* note: re-enable this if we make a Lucene4x impersonator \n      @SuppressWarnings({\"unchecked\",\"rawtypes\"}) final Map<String,Codec> serviceMap =\n        (Map) modifiableServicesField.get(spiLoader);\n      if (!(Codec.forName(\"Lucene3x\") instanceof PreFlexRWCodec)) {\n        if (Constants.JAVA_VENDOR.startsWith(\"IBM\")) {\n          // definitely a buggy version\n          System.err.println(\"ERROR: Your VM's java.util.ServiceLoader implementation is buggy\"+\n            \" and does not respect classpath order, please report this to the vendor.\");\n        } else {\n          // could just be a classpath issue\n          System.err.println(\"ERROR: fix your classpath to have tests-framework.jar before lucene-core.jar!\"+\n              \" If you have already done this, then your VM's java.util.ServiceLoader implementation is buggy\"+\n              \" and does not respect classpath order, please report this to the vendor.\");\n        }\n        serviceMap.put(\"Lucene3x\", new PreFlexRWCodec());\n      } */\n    } catch (Exception e) {\n      throw new RuntimeException(\"Cannot access internals of Codec and NamedSPILoader classes\", e);\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n\n    /* note: re-enable this if we make a 4.x impersonator\n      if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal < 2 &&\n                                          !shouldAvoidCodec(\"Lucene3x\"))) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else */ if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      final PostingsFormat format;\n      if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(random);\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      codec = new Lucene40Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"Appending\"))) {\n      codec = new AppendingCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // enable the Lucene 3.x PreflexRW codec explicitly, to work around bugs in IBM J9 / Harmony ServiceLoader:\n    try {\n      final java.lang.reflect.Field spiLoaderField = Codec.class.getDeclaredField(\"loader\");\n      spiLoaderField.setAccessible(true);\n      final Object spiLoader = spiLoaderField.get(null);\n      final java.lang.reflect.Field modifiableServicesField = NamedSPILoader.class.getDeclaredField(\"modifiableServices\");\n      modifiableServicesField.setAccessible(true);\n      /* note: re-enable this if we make a Lucene4x impersonator \n      @SuppressWarnings({\"unchecked\",\"rawtypes\"}) final Map<String,Codec> serviceMap =\n        (Map) modifiableServicesField.get(spiLoader);\n      if (!(Codec.forName(\"Lucene3x\") instanceof PreFlexRWCodec)) {\n        if (Constants.JAVA_VENDOR.startsWith(\"IBM\")) {\n          // definitely a buggy version\n          System.err.println(\"ERROR: Your VM's java.util.ServiceLoader implementation is buggy\"+\n            \" and does not respect classpath order, please report this to the vendor.\");\n        } else {\n          // could just be a classpath issue\n          System.err.println(\"ERROR: fix your classpath to have tests-framework.jar before lucene-core.jar!\"+\n              \" If you have already done this, then your VM's java.util.ServiceLoader implementation is buggy\"+\n              \" and does not respect classpath order, please report this to the vendor.\");\n        }\n        serviceMap.put(\"Lucene3x\", new PreFlexRWCodec());\n      } */\n    } catch (Exception e) {\n      throw new RuntimeException(\"Cannot access internals of Codec and NamedSPILoader classes\", e);\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n\n    /* note: re-enable this if we make a 4.x impersonator\n      if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal < 2 &&\n                                          !shouldAvoidCodec(\"Lucene3x\"))) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else */ if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      final PostingsFormat format;\n      if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(random);\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      codec = new Lucene40Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"Appending\"))) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // enable the Lucene 3.x PreflexRW codec explicitly, to work around bugs in IBM J9 / Harmony ServiceLoader:\n    try {\n      final java.lang.reflect.Field spiLoaderField = Codec.class.getDeclaredField(\"loader\");\n      spiLoaderField.setAccessible(true);\n      final Object spiLoader = spiLoaderField.get(null);\n      final java.lang.reflect.Field modifiableServicesField = NamedSPILoader.class.getDeclaredField(\"modifiableServices\");\n      modifiableServicesField.setAccessible(true);\n      /* note: re-enable this if we make a Lucene4x impersonator \n      @SuppressWarnings({\"unchecked\",\"rawtypes\"}) final Map<String,Codec> serviceMap =\n        (Map) modifiableServicesField.get(spiLoader);\n      if (!(Codec.forName(\"Lucene3x\") instanceof PreFlexRWCodec)) {\n        if (Constants.JAVA_VENDOR.startsWith(\"IBM\")) {\n          // definitely a buggy version\n          System.err.println(\"ERROR: Your VM's java.util.ServiceLoader implementation is buggy\"+\n            \" and does not respect classpath order, please report this to the vendor.\");\n        } else {\n          // could just be a classpath issue\n          System.err.println(\"ERROR: fix your classpath to have tests-framework.jar before lucene-core.jar!\"+\n              \" If you have already done this, then your VM's java.util.ServiceLoader implementation is buggy\"+\n              \" and does not respect classpath order, please report this to the vendor.\");\n        }\n        serviceMap.put(\"Lucene3x\", new PreFlexRWCodec());\n      } */\n    } catch (Exception e) {\n      throw new RuntimeException(\"Cannot access internals of Codec and NamedSPILoader classes\", e);\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n\n    /* note: re-enable this if we make a 4.x impersonator\n      if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal < 2 &&\n                                          !shouldAvoidCodec(\"Lucene3x\"))) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else */ if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      final PostingsFormat format;\n      if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(random);\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      codec = new Lucene40Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"Appending\"))) {\n      codec = new AppendingCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // enable the Lucene 3.x PreflexRW codec explicitly, to work around bugs in IBM J9 / Harmony ServiceLoader:\n    try {\n      final java.lang.reflect.Field spiLoaderField = Codec.class.getDeclaredField(\"loader\");\n      spiLoaderField.setAccessible(true);\n      final Object spiLoader = spiLoaderField.get(null);\n      final java.lang.reflect.Field modifiableServicesField = NamedSPILoader.class.getDeclaredField(\"modifiableServices\");\n      modifiableServicesField.setAccessible(true);\n      /* note: re-enable this if we make a Lucene4x impersonator \n      @SuppressWarnings({\"unchecked\",\"rawtypes\"}) final Map<String,Codec> serviceMap =\n        (Map) modifiableServicesField.get(spiLoader);\n      if (!(Codec.forName(\"Lucene3x\") instanceof PreFlexRWCodec)) {\n        if (Constants.JAVA_VENDOR.startsWith(\"IBM\")) {\n          // definitely a buggy version\n          System.err.println(\"ERROR: Your VM's java.util.ServiceLoader implementation is buggy\"+\n            \" and does not respect classpath order, please report this to the vendor.\");\n        } else {\n          // could just be a classpath issue\n          System.err.println(\"ERROR: fix your classpath to have tests-framework.jar before lucene-core.jar!\"+\n              \" If you have already done this, then your VM's java.util.ServiceLoader implementation is buggy\"+\n              \" and does not respect classpath order, please report this to the vendor.\");\n        }\n        serviceMap.put(\"Lucene3x\", new PreFlexRWCodec());\n      } */\n    } catch (Exception e) {\n      throw new RuntimeException(\"Cannot access internals of Codec and NamedSPILoader classes\", e);\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n\n    /* note: re-enable this if we make a 4.x impersonator\n      if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal < 2 &&\n                                          !shouldAvoidCodec(\"Lucene3x\"))) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else */ if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"Appending\"))) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5974da97d735dd78f13f46406caf64c9448e4f4","date":1343143368,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n\n    /* note: re-enable this if we make a 4.x impersonator\n      if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal < 2 &&\n                                          !shouldAvoidCodec(\"Lucene3x\"))) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else */ if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      final PostingsFormat format;\n      if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(random);\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      codec = new Lucene40Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"Appending\"))) {\n      codec = new AppendingCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // enable the Lucene 3.x PreflexRW codec explicitly, to work around bugs in IBM J9 / Harmony ServiceLoader:\n    try {\n      final java.lang.reflect.Field spiLoaderField = Codec.class.getDeclaredField(\"loader\");\n      spiLoaderField.setAccessible(true);\n      final Object spiLoader = spiLoaderField.get(null);\n      final java.lang.reflect.Field modifiableServicesField = NamedSPILoader.class.getDeclaredField(\"modifiableServices\");\n      modifiableServicesField.setAccessible(true);\n      /* note: re-enable this if we make a Lucene4x impersonator \n      @SuppressWarnings({\"unchecked\",\"rawtypes\"}) final Map<String,Codec> serviceMap =\n        (Map) modifiableServicesField.get(spiLoader);\n      if (!(Codec.forName(\"Lucene3x\") instanceof PreFlexRWCodec)) {\n        if (Constants.JAVA_VENDOR.startsWith(\"IBM\")) {\n          // definitely a buggy version\n          System.err.println(\"ERROR: Your VM's java.util.ServiceLoader implementation is buggy\"+\n            \" and does not respect classpath order, please report this to the vendor.\");\n        } else {\n          // could just be a classpath issue\n          System.err.println(\"ERROR: fix your classpath to have tests-framework.jar before lucene-core.jar!\"+\n              \" If you have already done this, then your VM's java.util.ServiceLoader implementation is buggy\"+\n              \" and does not respect classpath order, please report this to the vendor.\");\n        }\n        serviceMap.put(\"Lucene3x\", new PreFlexRWCodec());\n      } */\n    } catch (Exception e) {\n      throw new RuntimeException(\"Cannot access internals of Codec and NamedSPILoader classes\", e);\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n\n    /* note: re-enable this if we make a 4.x impersonator\n      if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal < 2 &&\n                                          !shouldAvoidCodec(\"Lucene3x\"))) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else */ if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      final PostingsFormat format;\n      if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(random);\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      codec = new Lucene40Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"Appending\"))) {\n      codec = new AppendingCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n\n    /* note: re-enable this if we make a 4.x impersonator\n      if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal < 2 &&\n                                          !shouldAvoidCodec(\"Lucene3x\"))) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else */ if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      final PostingsFormat format;\n      if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(random);\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      codec = new Lucene40Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"Appending\"))) {\n      codec = new AppendingCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // enable the Lucene 3.x PreflexRW codec explicitly, to work around bugs in IBM J9 / Harmony ServiceLoader:\n    try {\n      final java.lang.reflect.Field spiLoaderField = Codec.class.getDeclaredField(\"loader\");\n      spiLoaderField.setAccessible(true);\n      final Object spiLoader = spiLoaderField.get(null);\n      final java.lang.reflect.Field modifiableServicesField = NamedSPILoader.class.getDeclaredField(\"modifiableServices\");\n      modifiableServicesField.setAccessible(true);\n      /* note: re-enable this if we make a Lucene4x impersonator \n      @SuppressWarnings({\"unchecked\",\"rawtypes\"}) final Map<String,Codec> serviceMap =\n        (Map) modifiableServicesField.get(spiLoader);\n      if (!(Codec.forName(\"Lucene3x\") instanceof PreFlexRWCodec)) {\n        if (Constants.JAVA_VENDOR.startsWith(\"IBM\")) {\n          // definitely a buggy version\n          System.err.println(\"ERROR: Your VM's java.util.ServiceLoader implementation is buggy\"+\n            \" and does not respect classpath order, please report this to the vendor.\");\n        } else {\n          // could just be a classpath issue\n          System.err.println(\"ERROR: fix your classpath to have tests-framework.jar before lucene-core.jar!\"+\n              \" If you have already done this, then your VM's java.util.ServiceLoader implementation is buggy\"+\n              \" and does not respect classpath order, please report this to the vendor.\");\n        }\n        serviceMap.put(\"Lucene3x\", new PreFlexRWCodec());\n      } */\n    } catch (Exception e) {\n      throw new RuntimeException(\"Cannot access internals of Codec and NamedSPILoader classes\", e);\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n\n    /* note: re-enable this if we make a 4.x impersonator\n      if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal < 2 &&\n                                          !shouldAvoidCodec(\"Lucene3x\"))) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else */ if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      final PostingsFormat format;\n      if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(random);\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      codec = new Lucene40Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"Appending\"))) {\n      codec = new AppendingCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n\n    /* note: re-enable this if we make a 4.x impersonator\n      if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal < 2 &&\n                                          !shouldAvoidCodec(\"Lucene3x\"))) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else */ if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      final PostingsFormat format;\n      if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(random);\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      codec = new Lucene40Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"Appending\"))) {\n      codec = new AppendingCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // enable the Lucene 3.x PreflexRW codec explicitly, to work around bugs in IBM J9 / Harmony ServiceLoader:\n    try {\n      final java.lang.reflect.Field spiLoaderField = Codec.class.getDeclaredField(\"loader\");\n      spiLoaderField.setAccessible(true);\n      final Object spiLoader = spiLoaderField.get(null);\n      final java.lang.reflect.Field modifiableServicesField = NamedSPILoader.class.getDeclaredField(\"modifiableServices\");\n      modifiableServicesField.setAccessible(true);\n      /* note: re-enable this if we make a Lucene4x impersonator \n      @SuppressWarnings({\"unchecked\",\"rawtypes\"}) final Map<String,Codec> serviceMap =\n        (Map) modifiableServicesField.get(spiLoader);\n      if (!(Codec.forName(\"Lucene3x\") instanceof PreFlexRWCodec)) {\n        if (Constants.JAVA_VENDOR.startsWith(\"IBM\")) {\n          // definitely a buggy version\n          System.err.println(\"ERROR: Your VM's java.util.ServiceLoader implementation is buggy\"+\n            \" and does not respect classpath order, please report this to the vendor.\");\n        } else {\n          // could just be a classpath issue\n          System.err.println(\"ERROR: fix your classpath to have tests-framework.jar before lucene-core.jar!\"+\n              \" If you have already done this, then your VM's java.util.ServiceLoader implementation is buggy\"+\n              \" and does not respect classpath order, please report this to the vendor.\");\n        }\n        serviceMap.put(\"Lucene3x\", new PreFlexRWCodec());\n      } */\n    } catch (Exception e) {\n      throw new RuntimeException(\"Cannot access internals of Codec and NamedSPILoader classes\", e);\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n\n    /* note: re-enable this if we make a 4.x impersonator\n      if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal < 2 &&\n                                          !shouldAvoidCodec(\"Lucene3x\"))) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else */ if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"Appending\"))) {\n      codec = new AppendingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n\n    /* note: re-enable this if we make a 4.x impersonator\n      if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal < 2 &&\n                                          !shouldAvoidCodec(\"Lucene3x\"))) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else */ if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      final PostingsFormat format;\n      if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(random);\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      codec = new Lucene40Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"Appending\"))) {\n      codec = new AppendingCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // enable the Lucene 3.x PreflexRW codec explicitly, to work around bugs in IBM J9 / Harmony ServiceLoader:\n    try {\n      final java.lang.reflect.Field spiLoaderField = Codec.class.getDeclaredField(\"loader\");\n      spiLoaderField.setAccessible(true);\n      final Object spiLoader = spiLoaderField.get(null);\n      final java.lang.reflect.Field modifiableServicesField = NamedSPILoader.class.getDeclaredField(\"modifiableServices\");\n      modifiableServicesField.setAccessible(true);\n      /* note: re-enable this if we make a Lucene4x impersonator \n      @SuppressWarnings({\"unchecked\",\"rawtypes\"}) final Map<String,Codec> serviceMap =\n        (Map) modifiableServicesField.get(spiLoader);\n      if (!(Codec.forName(\"Lucene3x\") instanceof PreFlexRWCodec)) {\n        if (Constants.JAVA_VENDOR.startsWith(\"IBM\")) {\n          // definitely a buggy version\n          System.err.println(\"ERROR: Your VM's java.util.ServiceLoader implementation is buggy\"+\n            \" and does not respect classpath order, please report this to the vendor.\");\n        } else {\n          // could just be a classpath issue\n          System.err.println(\"ERROR: fix your classpath to have tests-framework.jar before lucene-core.jar!\"+\n              \" If you have already done this, then your VM's java.util.ServiceLoader implementation is buggy\"+\n              \" and does not respect classpath order, please report this to the vendor.\");\n        }\n        serviceMap.put(\"Lucene3x\", new PreFlexRWCodec());\n      } */\n    } catch (Exception e) {\n      throw new RuntimeException(\"Cannot access internals of Codec and NamedSPILoader classes\", e);\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n\n    /* note: re-enable this if we make a 4.x impersonator\n      if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal < 2 &&\n                                          !shouldAvoidCodec(\"Lucene3x\"))) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else */ if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      final PostingsFormat format;\n      if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(random);\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      codec = new Lucene40Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"Appending\"))) {\n      codec = new AppendingCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa","date":1349450075,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n\n    /* note: re-enable this if we make a 4.x impersonator\n      if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal < 2 &&\n                                          !shouldAvoidCodec(\"Lucene3x\"))) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else */ if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      final PostingsFormat format;\n      if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(random);\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      codec = new Lucene40Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"Appending\"))) {\n      codec = new AppendingCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n\n    /* note: re-enable this if we make a 4.x impersonator\n      if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal < 2 &&\n                                          !shouldAvoidCodec(\"Lucene3x\"))) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else */ if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      final PostingsFormat format;\n      if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(random);\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      codec = new Lucene40Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"Appending\"))) {\n      codec = new AppendingCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5bfcba4bd0c8918a6db1993d4e7818f08cc2a827","date":1349788355,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n\n    /* note: re-enable this if we make a 4.x impersonator\n      if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal < 2 &&\n                                          !shouldAvoidCodec(\"Lucene3x\"))) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else */ if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      final PostingsFormat format;\n      if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(random);\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      codec = new Lucene40Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n\n    /* note: re-enable this if we make a 4.x impersonator\n      if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal < 2 &&\n                                          !shouldAvoidCodec(\"Lucene3x\"))) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else */ if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      final PostingsFormat format;\n      if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(random);\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      codec = new Lucene40Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Appending\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"Appending\"))) {\n      codec = new AppendingCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cf8086c7e11dc41303ef1b8050bd355ddfaee76d","date":1350007219,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n\n\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal < 2 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      // nocommit: assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      final PostingsFormat format;\n      if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(random);\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      codec = new Lucene41Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n\n    /* note: re-enable this if we make a 4.x impersonator\n      if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal < 2 &&\n                                          !shouldAvoidCodec(\"Lucene3x\"))) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else */ if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      final PostingsFormat format;\n      if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(random);\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      codec = new Lucene40Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6616b1fd222bb5a60f7f7856ace312252bc97890","date":1350142044,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal < 2 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      final PostingsFormat format;\n      if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(random);\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      codec = new Lucene41Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n\n\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal < 2 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      // nocommit: assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      final PostingsFormat format;\n      if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(random);\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      codec = new Lucene41Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal < 2 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      final PostingsFormat format;\n      if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(random);\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      codec = new Lucene41Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n\n    /* note: re-enable this if we make a 4.x impersonator\n      if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal < 2 &&\n                                          !shouldAvoidCodec(\"Lucene3x\"))) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else */ if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      final PostingsFormat format;\n      if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(random);\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      codec = new Lucene40Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal < 2 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      final PostingsFormat format;\n      if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(random);\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      codec = new Lucene41Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n\n    /* note: re-enable this if we make a 4.x impersonator\n      if (\"Lucene3x\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal < 2 &&\n                                          !shouldAvoidCodec(\"Lucene3x\"))) { // preflex-only setup\n      codec = Codec.forName(\"Lucene3x\");\n      assert (codec instanceof PreFlexRWCodec) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else */ if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      final PostingsFormat format;\n      if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(random);\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      codec = new Lucene40Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b11b627458456051494efb72f2f51f228b6dc43e","date":1355437502,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal < 2 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      final PostingsFormat format;\n      if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(random);\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      codec = new Lucene41Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n    if (Constants.JAVA_VENDOR.startsWith(\"IBM\")) {\n      throw new AssumptionViolatedException(\"refusing to execute on broken jvm\");\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal < 2 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      final PostingsFormat format;\n      if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(random);\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      codec = new Lucene41Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad827f037f20d71699d37d668dbe089aa9fea26b","date":1355439180,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal < 2 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      final PostingsFormat format;\n      if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(random);\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      codec = new Lucene41Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal < 2 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      final PostingsFormat format;\n      if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(random);\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      codec = new Lucene41Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n    if (Constants.JAVA_VENDOR.startsWith(\"IBM\")) {\n      throw new AssumptionViolatedException(\"refusing to execute on broken jvm\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3010bce6c8ba451133626df1648f9277ff7e4a3a","date":1355439480,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal < 2 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      final PostingsFormat format;\n      if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(random);\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      codec = new Lucene41Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n    if (Constants.JAVA_VENDOR.startsWith(\"IBM\")) {\n      throw new AssumptionViolatedException(\"refusing to execute on broken jvm\");\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal < 2 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      final PostingsFormat format;\n      if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(random);\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      codec = new Lucene41Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c65c39fc1c35d9f5198ded6af2e74eec979393e0","date":1355439862,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal < 2 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      final PostingsFormat format;\n      if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(random);\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      codec = new Lucene41Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal < 2 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      final PostingsFormat format;\n      if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(random);\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      codec = new Lucene41Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n    if (Constants.JAVA_VENDOR.startsWith(\"IBM\")) {\n      throw new AssumptionViolatedException(\"refusing to execute on broken jvm\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b6b025bf5295df98292b320adc55f5e8f7b83723","date":1355488265,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal < 2 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      final PostingsFormat format;\n      if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(random);\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      codec = new Lucene41Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n    if (Constants.JAVA_VENDOR.startsWith(\"IBM\")) {\n      throw new AssumptionViolatedException(\"refusing to execute on broken jvm\");\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal < 2 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      final PostingsFormat format;\n      if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(random);\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      codec = new Lucene41Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0369b58ea079de067b4ea67a3ad55187b08e6df9","date":1355489152,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal < 2 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      final PostingsFormat format;\n      if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(random);\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      codec = new Lucene41Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal < 2 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      final PostingsFormat format;\n      if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(random);\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      codec = new Lucene41Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n    if (Constants.JAVA_VENDOR.startsWith(\"IBM\")) {\n      throw new AssumptionViolatedException(\"refusing to execute on broken jvm\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e","date":1358793943,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    // nocommit: add 41 impersonation\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal < 2 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      final PostingsFormat format;\n      if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(random);\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      codec = new Lucene42Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal < 2 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      final PostingsFormat format;\n      if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(random);\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      codec = new Lucene41Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"11c25da4d58c25442c5d7c3a645dac3fa43e26b4","date":1358795906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      final PostingsFormat format;\n      if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(random);\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      codec = new Lucene42Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    // nocommit: add 41 impersonation\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal < 2 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      final PostingsFormat format;\n      if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(random);\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      codec = new Lucene42Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fb3007251811930f502864bfe6ef5f0dd91371b","date":1358815075,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV\n      \n      final PostingsFormat format;\n      if (\"MockRandom\".equals(TEST_POSTINGSFORMAT) || \"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(random);\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        // pick one from SPI\n        String formats[] = DocValuesFormat.availableDocValuesFormats().toArray(new String[0]);\n        dvFormat = DocValuesFormat.forName(formats[random.nextInt(formats.length)]);\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene42Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      final PostingsFormat format;\n      if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(random);\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      codec = new Lucene42Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"423d89a2b3cc419b647c07c2b3fdbc54311d07f9","date":1358836612,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        // pick one from SPI\n        String formats[] = DocValuesFormat.availableDocValuesFormats().toArray(new String[0]);\n        dvFormat = DocValuesFormat.forName(formats[random.nextInt(formats.length)]);\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene42Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV\n      \n      final PostingsFormat format;\n      if (\"MockRandom\".equals(TEST_POSTINGSFORMAT) || \"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(random);\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        // pick one from SPI\n        String formats[] = DocValuesFormat.availableDocValuesFormats().toArray(new String[0]);\n        dvFormat = DocValuesFormat.forName(formats[random.nextInt(formats.length)]);\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene42Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e4c8573e7baf60b3f39be994bd2f2c36385d03b","date":1358869567,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        // pick one from SPI\n        String formats[] = DocValuesFormat.availableDocValuesFormats().toArray(new String[0]);\n        dvFormat = DocValuesFormat.forName(formats[random.nextInt(formats.length)]);\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene42Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        // pick one from SPI\n        String formats[] = DocValuesFormat.availableDocValuesFormats().toArray(new String[0]);\n        dvFormat = DocValuesFormat.forName(formats[random.nextInt(formats.length)]);\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene42Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9f2be786bbf3746ffcd9720e0b473f4b121c4228","date":1359663177,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        // pick one from SPI\n        String formats[] = DocValuesFormat.availableDocValuesFormats().toArray(new String[0]);\n        dvFormat = DocValuesFormat.forName(formats[random.nextInt(formats.length)]);\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene42Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\"))) {\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        // pick one from SPI\n        String formats[] = DocValuesFormat.availableDocValuesFormats().toArray(new String[0]);\n        dvFormat = DocValuesFormat.forName(formats[random.nextInt(formats.length)]);\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene42Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":["0d430a0241eb1976d82ce1edc13d2381882cffc3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d33aeb9ed95127e3cb6b2abce6c4b0441e6c3633","date":1359743129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      final PostingsFormat format;\n      if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(random);\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      codec = new Lucene42Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal < 2 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      final PostingsFormat format;\n      if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(random);\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      codec = new Lucene41Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        // pick one from SPI\n        String formats[] = DocValuesFormat.availableDocValuesFormats().toArray(new String[0]);\n        dvFormat = DocValuesFormat.forName(formats[random.nextInt(formats.length)]);\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene42Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\"))) {\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (!\"random\".equals(TEST_POSTINGSFORMAT)) {\n      final PostingsFormat format;\n      if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(random);\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      codec = new Lucene42Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","bugFix":["7b91922b55d15444d554721b352861d028eb8278","e1b1e202e0a963a0094d637c018a8595f9bd245f","cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0d430a0241eb1976d82ce1edc13d2381882cffc3","date":1362066787,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        // pick one from SPI\n        String formats[] = DocValuesFormat.availableDocValuesFormats().toArray(new String[0]);\n        dvFormat = DocValuesFormat.forName(formats[random.nextInt(formats.length)]);\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene42Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        // pick one from SPI\n        String formats[] = DocValuesFormat.availableDocValuesFormats().toArray(new String[0]);\n        dvFormat = DocValuesFormat.forName(formats[random.nextInt(formats.length)]);\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene42Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\"))) {\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","bugFix":["9f2be786bbf3746ffcd9720e0b473f4b121c4228"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"31f253a4f41457e79e36c9b6c54166ae9883b9f7","date":1362143536,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    // TODO: Fix below code to use c.isAnnotationPresent(). It was changed\n    // to the null check to work around a bug in JDK 8 b78 (see LUCENE-4808).\n    if (targetClass.getAnnotation(SuppressCodecs.class) != null) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        // pick one from SPI\n        String formats[] = DocValuesFormat.availableDocValuesFormats().toArray(new String[0]);\n        dvFormat = DocValuesFormat.forName(formats[random.nextInt(formats.length)]);\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene42Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        // pick one from SPI\n        String formats[] = DocValuesFormat.availableDocValuesFormats().toArray(new String[0]);\n        dvFormat = DocValuesFormat.forName(formats[random.nextInt(formats.length)]);\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene42Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":["879f774d3d719fff4f9f8bd6b0a98dc2025f8ce5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"879f774d3d719fff4f9f8bd6b0a98dc2025f8ce5","date":1363992115,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        // pick one from SPI\n        String formats[] = DocValuesFormat.availableDocValuesFormats().toArray(new String[0]);\n        dvFormat = DocValuesFormat.forName(formats[random.nextInt(formats.length)]);\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene42Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    // TODO: Fix below code to use c.isAnnotationPresent(). It was changed\n    // to the null check to work around a bug in JDK 8 b78 (see LUCENE-4808).\n    if (targetClass.getAnnotation(SuppressCodecs.class) != null) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        // pick one from SPI\n        String formats[] = DocValuesFormat.availableDocValuesFormats().toArray(new String[0]);\n        dvFormat = DocValuesFormat.forName(formats[random.nextInt(formats.length)]);\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene42Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","bugFix":["31f253a4f41457e79e36c9b6c54166ae9883b9f7"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"86658da8ce1e761bc0f5a05cf8795d1f78c388e2","date":1365796110,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        // pick one from SPI\n        String formats[] = DocValuesFormat.availableDocValuesFormats().toArray(new String[0]);\n        dvFormat = DocValuesFormat.forName(formats[random.nextInt(formats.length)]);\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene42Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        // pick one from SPI\n        String formats[] = DocValuesFormat.availableDocValuesFormats().toArray(new String[0]);\n        dvFormat = DocValuesFormat.forName(formats[random.nextInt(formats.length)]);\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene42Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d44c142f2e458fd09d473333a8eecb1516ddb05","date":1367347752,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        // pick one from SPI\n        String formats[] = DocValuesFormat.availableDocValuesFormats().toArray(new String[0]);\n        dvFormat = DocValuesFormat.forName(formats[random.nextInt(formats.length)]);\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene42Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new PrintStreamInfoStream(System.out) {\n          @Override\n          public void message(String component, String message) {\n            final String name;\n            if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n              // The name of the main thread is way too\n              // long when looking at IW verbose output...\n              name = \"main\";\n            } else {\n              name = Thread.currentThread().getName();\n            }\n            stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n          }\n        });\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        // pick one from SPI\n        String formats[] = DocValuesFormat.availableDocValuesFormats().toArray(new String[0]);\n        dvFormat = DocValuesFormat.forName(formats[random.nextInt(formats.length)]);\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene42Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4fc6f9e99b6e416d945cd2a35463b9f452a3df1","date":1373989694,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        // pick one from SPI\n        List<String> formats = new ArrayList<String>(DocValuesFormat.availableDocValuesFormats());\n        formats.remove(\"Facet42\");\n        dvFormat = DocValuesFormat.forName(formats.get(random.nextInt(formats.size())));\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene42Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        // pick one from SPI\n        String formats[] = DocValuesFormat.availableDocValuesFormats().toArray(new String[0]);\n        dvFormat = DocValuesFormat.forName(formats[random.nextInt(formats.length)]);\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene42Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        // pick one from SPI\n        List<String> formats = new ArrayList<String>(DocValuesFormat.availableDocValuesFormats());\n        formats.remove(\"Facet42\");\n        dvFormat = DocValuesFormat.forName(formats.get(random.nextInt(formats.size())));\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene42Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        // pick one from SPI\n        String formats[] = DocValuesFormat.availableDocValuesFormats().toArray(new String[0]);\n        dvFormat = DocValuesFormat.forName(formats[random.nextInt(formats.length)]);\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene42Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"11a746437bc5c0a0b3df0337ed249c387c812871","date":1376687959,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    // nocommit: 4.2 impersonator\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        // pick one from SPI\n        List<String> formats = new ArrayList<String>(DocValuesFormat.availableDocValuesFormats());\n        formats.remove(\"Facet42\");\n        dvFormat = DocValuesFormat.forName(formats.get(random.nextInt(formats.size())));\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene45Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        // pick one from SPI\n        List<String> formats = new ArrayList<String>(DocValuesFormat.availableDocValuesFormats());\n        formats.remove(\"Facet42\");\n        dvFormat = DocValuesFormat.forName(formats.get(random.nextInt(formats.size())));\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene42Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"09a42395865f791464f0bd5f6118a4abbfa3eb8a","date":1376920143,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene42\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 2 &&\n                                                  !shouldAvoidCodec(\"Lucene42\"))) { \n      codec = Codec.forName(\"Lucene42\");\n      assert codec instanceof Lucene42RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        // pick one from SPI\n        List<String> formats = new ArrayList<String>(DocValuesFormat.availableDocValuesFormats());\n        formats.remove(\"Facet42\");\n        dvFormat = DocValuesFormat.forName(formats.get(random.nextInt(formats.size())));\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene45Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    // nocommit: 4.2 impersonator\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        // pick one from SPI\n        List<String> formats = new ArrayList<String>(DocValuesFormat.availableDocValuesFormats());\n        formats.remove(\"Facet42\");\n        dvFormat = DocValuesFormat.forName(formats.get(random.nextInt(formats.size())));\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene45Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene42\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 2 &&\n                                                  !shouldAvoidCodec(\"Lucene42\"))) { \n      codec = Codec.forName(\"Lucene42\");\n      assert codec instanceof Lucene42RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        // pick one from SPI\n        List<String> formats = new ArrayList<String>(DocValuesFormat.availableDocValuesFormats());\n        formats.remove(\"Facet42\");\n        dvFormat = DocValuesFormat.forName(formats.get(random.nextInt(formats.size())));\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene45Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        // pick one from SPI\n        List<String> formats = new ArrayList<String>(DocValuesFormat.availableDocValuesFormats());\n        formats.remove(\"Facet42\");\n        dvFormat = DocValuesFormat.forName(formats.get(random.nextInt(formats.size())));\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene42Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a6a338194ed0a2e9eef3247ffe4a535203aac09","date":1377222156,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else if (\"TempRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        // pick one from SPI\n        List<String> formats = new ArrayList<String>(DocValuesFormat.availableDocValuesFormats());\n        formats.remove(\"Facet42\");\n        dvFormat = DocValuesFormat.forName(formats.get(random.nextInt(formats.size())));\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene42Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        // pick one from SPI\n        List<String> formats = new ArrayList<String>(DocValuesFormat.availableDocValuesFormats());\n        formats.remove(\"Facet42\");\n        dvFormat = DocValuesFormat.forName(formats.get(random.nextInt(formats.size())));\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene42Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","date":1377268487,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        // pick one from SPI\n        List<String> formats = new ArrayList<String>(DocValuesFormat.availableDocValuesFormats());\n        formats.remove(\"Facet42\");\n        dvFormat = DocValuesFormat.forName(formats.get(random.nextInt(formats.size())));\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene42Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else if (\"TempRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        // pick one from SPI\n        List<String> formats = new ArrayList<String>(DocValuesFormat.availableDocValuesFormats());\n        formats.remove(\"Facet42\");\n        dvFormat = DocValuesFormat.forName(formats.get(random.nextInt(formats.size())));\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene42Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene42\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 2 &&\n                                                  !shouldAvoidCodec(\"Lucene42\"))) { \n      codec = Codec.forName(\"Lucene42\");\n      assert codec instanceof Lucene42RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        // pick one from SPI\n        List<String> formats = new ArrayList<String>(DocValuesFormat.availableDocValuesFormats());\n        formats.remove(\"Facet42\");\n        dvFormat = DocValuesFormat.forName(formats.get(random.nextInt(formats.size())));\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene45Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        // pick one from SPI\n        List<String> formats = new ArrayList<String>(DocValuesFormat.availableDocValuesFormats());\n        formats.remove(\"Facet42\");\n        dvFormat = DocValuesFormat.forName(formats.get(random.nextInt(formats.size())));\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene42Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"820c994610cafbde5892c00924bdf69fffaaf38f","date":1378227060,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene42\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 2 &&\n                                                  !shouldAvoidCodec(\"Lucene42\"))) { \n      codec = Codec.forName(\"Lucene42\");\n      assert codec instanceof Lucene42RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = DocValuesFormat.forName(\"Lucene45\");\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene45Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene42\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 2 &&\n                                                  !shouldAvoidCodec(\"Lucene42\"))) { \n      codec = Codec.forName(\"Lucene42\");\n      assert codec instanceof Lucene42RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        // pick one from SPI\n        List<String> formats = new ArrayList<String>(DocValuesFormat.availableDocValuesFormats());\n        formats.remove(\"Facet42\");\n        dvFormat = DocValuesFormat.forName(formats.get(random.nextInt(formats.size())));\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene45Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene42\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 2 &&\n                                                  !shouldAvoidCodec(\"Lucene42\"))) { \n      codec = Codec.forName(\"Lucene42\");\n      assert codec instanceof Lucene42RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = DocValuesFormat.forName(\"Lucene45\");\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene45Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene42\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 2 &&\n                                                  !shouldAvoidCodec(\"Lucene42\"))) { \n      codec = Codec.forName(\"Lucene42\");\n      assert codec instanceof Lucene42RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = DocValuesFormat.forName(\"Lucene45\");\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene45Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8435160e9702b19398118ddf76b61c846612b6a4","date":1380349140,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene42\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 2 &&\n                                                  !shouldAvoidCodec(\"Lucene42\"))) { \n      codec = Codec.forName(\"Lucene42\");\n      assert codec instanceof Lucene42RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = DocValuesFormat.forName(\"Lucene45\");\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene46Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene42\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 2 &&\n                                                  !shouldAvoidCodec(\"Lucene42\"))) { \n      codec = Codec.forName(\"Lucene42\");\n      assert codec instanceof Lucene42RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = DocValuesFormat.forName(\"Lucene45\");\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene45Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8dfdb55d9addc8dcac44a3b11ae6ca74747103ce","date":1380466267,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene42\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 2 &&\n                                                  !shouldAvoidCodec(\"Lucene42\"))) { \n      codec = Codec.forName(\"Lucene42\");\n      assert codec instanceof Lucene42RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene45\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 5 &&\n                                                  !shouldAvoidCodec(\"Lucene45\"))) { \n      codec = Codec.forName(\"Lucene45\");\n      assert codec instanceof Lucene45RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = DocValuesFormat.forName(\"Lucene45\");\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene46Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene42\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 2 &&\n                                                  !shouldAvoidCodec(\"Lucene42\"))) { \n      codec = Codec.forName(\"Lucene42\");\n      assert codec instanceof Lucene42RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = DocValuesFormat.forName(\"Lucene45\");\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene46Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"624d2da1aed2d2415a83f3c573de0341c4001d90","date":1390407250,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    // set back to default\n    LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = false;\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene42\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 2 &&\n                                                  !shouldAvoidCodec(\"Lucene42\"))) { \n      codec = Codec.forName(\"Lucene42\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene42RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene45\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 5 &&\n                                                  !shouldAvoidCodec(\"Lucene45\"))) { \n      codec = Codec.forName(\"Lucene45\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene45RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = DocValuesFormat.forName(\"Lucene45\");\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene46Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene42\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 2 &&\n                                                  !shouldAvoidCodec(\"Lucene42\"))) { \n      codec = Codec.forName(\"Lucene42\");\n      assert codec instanceof Lucene42RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene45\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 5 &&\n                                                  !shouldAvoidCodec(\"Lucene45\"))) { \n      codec = Codec.forName(\"Lucene45\");\n      assert codec instanceof Lucene45RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = DocValuesFormat.forName(\"Lucene45\");\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene46Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    // set back to default\n    LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = false;\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene42\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 2 &&\n                                                  !shouldAvoidCodec(\"Lucene42\"))) { \n      codec = Codec.forName(\"Lucene42\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene42RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene45\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 5 &&\n                                                  !shouldAvoidCodec(\"Lucene45\"))) { \n      codec = Codec.forName(\"Lucene45\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene45RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = DocValuesFormat.forName(\"Lucene45\");\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene46Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<String>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    // set back to default\n    LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = false;\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene42\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 2 &&\n                                                  !shouldAvoidCodec(\"Lucene42\"))) { \n      codec = Codec.forName(\"Lucene42\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene42RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene45\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 5 &&\n                                                  !shouldAvoidCodec(\"Lucene45\"))) { \n      codec = Codec.forName(\"Lucene45\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene45RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = DocValuesFormat.forName(\"Lucene45\");\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene46Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5b7d69c53c444cbbdbc1cd27e9f51f83b3ed14cb","date":1400265925,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    // set back to default\n    LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = false;\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene42\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 2 &&\n                                                  !shouldAvoidCodec(\"Lucene42\"))) { \n      codec = Codec.forName(\"Lucene42\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene42RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene45\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 5 &&\n                                                  !shouldAvoidCodec(\"Lucene45\"))) { \n      codec = Codec.forName(\"Lucene45\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene45RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = DocValuesFormat.forName(\"Lucene45\");\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene46Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    // set back to default\n    LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = false;\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene42\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 2 &&\n                                                  !shouldAvoidCodec(\"Lucene42\"))) { \n      codec = Codec.forName(\"Lucene42\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene42RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene45\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 5 &&\n                                                  !shouldAvoidCodec(\"Lucene45\"))) { \n      codec = Codec.forName(\"Lucene45\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene45RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = DocValuesFormat.forName(\"Lucene45\");\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene46Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    // set back to default\n    LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = false;\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene42\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 2 &&\n                                                  !shouldAvoidCodec(\"Lucene42\"))) { \n      codec = Codec.forName(\"Lucene42\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene42RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene45\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 5 &&\n                                                  !shouldAvoidCodec(\"Lucene45\"))) { \n      codec = Codec.forName(\"Lucene45\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene45RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = DocValuesFormat.forName(\"Lucene45\");\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene46Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    // set back to default\n    LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = false;\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene42\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 2 &&\n                                                  !shouldAvoidCodec(\"Lucene42\"))) { \n      codec = Codec.forName(\"Lucene42\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene42RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene45\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 5 &&\n                                                  !shouldAvoidCodec(\"Lucene45\"))) { \n      codec = Codec.forName(\"Lucene45\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene45RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = DocValuesFormat.forName(\"Lucene45\");\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene46Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8106bc60c7452250f84c65cdb43ab6b1d8eb1534","date":1401906364,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    // set back to default\n    LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = false;\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene42\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 2 &&\n                                                  !shouldAvoidCodec(\"Lucene42\"))) { \n      codec = Codec.forName(\"Lucene42\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene42RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene45\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 3 &&\n                                                  !shouldAvoidCodec(\"Lucene45\"))) { \n      codec = Codec.forName(\"Lucene45\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene45RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene46\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 4 &&\n                                                  !shouldAvoidCodec(\"Lucene46\"))) { \n      codec = Codec.forName(\"Lucene46\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene46RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        // TODO: huh?\n        dvFormat = DocValuesFormat.forName(\"Lucene49\");\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene49Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    // set back to default\n    LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = false;\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene42\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 2 &&\n                                                  !shouldAvoidCodec(\"Lucene42\"))) { \n      codec = Codec.forName(\"Lucene42\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene42RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene45\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 5 &&\n                                                  !shouldAvoidCodec(\"Lucene45\"))) { \n      codec = Codec.forName(\"Lucene45\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene45RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = DocValuesFormat.forName(\"Lucene45\");\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene46Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","bugFix":["8dfdb55d9addc8dcac44a3b11ae6ca74747103ce","8435160e9702b19398118ddf76b61c846612b6a4","820c994610cafbde5892c00924bdf69fffaaf38f"],"bugIntro":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793","date":1408030244,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    // set back to default\n    LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = false;\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene42\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 2 &&\n                                                  !shouldAvoidCodec(\"Lucene42\"))) { \n      codec = Codec.forName(\"Lucene42\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene42RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene45\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 3 &&\n                                                  !shouldAvoidCodec(\"Lucene45\"))) { \n      codec = Codec.forName(\"Lucene45\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene45RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene46\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 4 &&\n                                                  !shouldAvoidCodec(\"Lucene46\"))) { \n      codec = Codec.forName(\"Lucene46\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene46RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene49\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 5 &&\n                                                  !shouldAvoidCodec(\"Lucene49\"))) { \n      codec = Codec.forName(\"Lucene49\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene49RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        // TODO: huh?\n        dvFormat = DocValuesFormat.forName(\"Lucene410\");\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene410Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    // set back to default\n    LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = false;\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(10);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene42\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 2 &&\n                                                  !shouldAvoidCodec(\"Lucene42\"))) { \n      codec = Codec.forName(\"Lucene42\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene42RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene45\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 3 &&\n                                                  !shouldAvoidCodec(\"Lucene45\"))) { \n      codec = Codec.forName(\"Lucene45\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene45RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene46\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 4 &&\n                                                  !shouldAvoidCodec(\"Lucene46\"))) { \n      codec = Codec.forName(\"Lucene46\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene46RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        // TODO: huh?\n        dvFormat = DocValuesFormat.forName(\"Lucene49\");\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene49Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","bugFix":null,"bugIntro":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    // set back to default\n    LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = false;\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        // TODO: huh?\n        dvFormat = DocValuesFormat.forName(\"Lucene410\");\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene410Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    // set back to default\n    LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = false;\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene42\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 2 &&\n                                                  !shouldAvoidCodec(\"Lucene42\"))) { \n      codec = Codec.forName(\"Lucene42\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene42RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene45\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 3 &&\n                                                  !shouldAvoidCodec(\"Lucene45\"))) { \n      codec = Codec.forName(\"Lucene45\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene45RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene46\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 4 &&\n                                                  !shouldAvoidCodec(\"Lucene46\"))) { \n      codec = Codec.forName(\"Lucene46\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene46RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene49\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 5 &&\n                                                  !shouldAvoidCodec(\"Lucene49\"))) { \n      codec = Codec.forName(\"Lucene49\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene49RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        // TODO: huh?\n        dvFormat = DocValuesFormat.forName(\"Lucene410\");\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene410Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2daae254c28b627693692fbf8f14d2f36c3591c1","date":1409582110,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        // TODO: huh?\n        dvFormat = DocValuesFormat.forName(\"Lucene410\");\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene410Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    // set back to default\n    LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = false;\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        // TODO: huh?\n        dvFormat = DocValuesFormat.forName(\"Lucene410\");\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene410Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        // TODO: huh?\n        dvFormat = DocValuesFormat.forName(\"Lucene410\");\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene410Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    // set back to default\n    LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = false;\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"Lucene40\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                          \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                          \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                          randomVal == 0 &&\n                                          !shouldAvoidCodec(\"Lucene40\"))) {\n      codec = Codec.forName(\"Lucene40\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene40RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n      assert (PostingsFormat.forName(\"Lucene40\") instanceof Lucene40RWPostingsFormat) : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene41\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                 randomVal == 1 &&\n                                                 !shouldAvoidCodec(\"Lucene41\"))) { \n      codec = Codec.forName(\"Lucene41\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene41RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene42\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 2 &&\n                                                  !shouldAvoidCodec(\"Lucene42\"))) { \n      codec = Codec.forName(\"Lucene42\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene42RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene45\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 3 &&\n                                                  !shouldAvoidCodec(\"Lucene45\"))) { \n      codec = Codec.forName(\"Lucene45\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene45RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene46\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 4 &&\n                                                  !shouldAvoidCodec(\"Lucene46\"))) { \n      codec = Codec.forName(\"Lucene46\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene46RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if (\"Lucene49\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) &&\n                                                 \"random\".equals(TEST_POSTINGSFORMAT) &&\n                                                 \"random\".equals(TEST_DOCVALUESFORMAT) &&\n                                                  randomVal == 5 &&\n                                                  !shouldAvoidCodec(\"Lucene49\"))) { \n      codec = Codec.forName(\"Lucene49\");\n      LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n      assert codec instanceof Lucene49RWCodec : \"fix your classpath to have tests-framework.jar before lucene-core.jar\";\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        // TODO: huh?\n        dvFormat = DocValuesFormat.forName(\"Lucene410\");\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene410Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","bugFix":["8fb3007251811930f502864bfe6ef5f0dd91371b","4e4c8573e7baf60b3f39be994bd2f2c36385d03b","8dfdb55d9addc8dcac44a3b11ae6ca74747103ce","624d2da1aed2d2415a83f3c573de0341c4001d90","a4febe69e4c727130aaf1a32c4020ed158101b55","8106bc60c7452250f84c65cdb43ab6b1d8eb1534","0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793","11c25da4d58c25442c5d7c3a645dac3fa43e26b4","09a42395865f791464f0bd5f6118a4abbfa3eb8a","6616b1fd222bb5a60f7f7856ace312252bc97890","cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ffd1e39d19251f41c3337fd7df0b6ddcf61c2f89","date":1410986344,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        // TODO: huh?\n        dvFormat = DocValuesFormat.forName(\"Lucene410\");\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene410Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        // TODO: huh?\n        dvFormat = DocValuesFormat.forName(\"Lucene410\");\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene410Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e49088db00ea6cb232fbde9c8c646c721d4d049f","date":1411433559,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = PostingsFormat.forName(\"Lucene41\");\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        // TODO: huh?\n        dvFormat = DocValuesFormat.forName(\"Lucene410\");\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new Lucene410Codec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ca02638278b6e8ae6b18f9db9e55ddbb3092cd13","date":1417836602,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene50\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene50\"))) {\n      codec = new Lucene50Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene50\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene50\"))) {\n      codec = new Lucene50Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene50\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene50\"))) {\n      codec = new Lucene50Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b40aa4949bd6a56c07fe71318a4006a73a56a308","date":1425241541,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene50\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene50\"))) {\n      codec = new Lucene50Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene50\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene50\"))) {\n      codec = new Lucene50Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"48ac7cad6e13e58e631e431ea26e8d4c8756f63a","date":1425329714,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene50\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene50\"))) {\n      codec = new Lucene50Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene50\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene50\"))) {\n      codec = new Lucene50Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","bugFix":["44549822b9113925bd45e53c1e0028ab2e1d1d7f","197be891529ba2dea8287e2251906be9533dc8ea"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene50\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene50\"))) {\n      codec = new Lucene50Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    restoreProperties.put(\"solr.directoryFactory\", System.getProperty(\"solr.directoryFactory\"));\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // Restore more Solr properties. \n    restoreProperties.put(\"solr.solr.home\", System.getProperty(\"solr.solr.home\"));\n    restoreProperties.put(\"solr.data.dir\", System.getProperty(\"solr.data.dir\"));\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene50\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene50\"))) {\n      codec = new Lucene50Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    // TimeZone.getDefault will set user.timezone to the default timezone of the user's locale.\n    // So store the original property value and restore it at end.\n    restoreProperties.put(\"user.timezone\", System.getProperty(\"user.timezone\"));\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5dcfd27b9fe602b19e032acdb429aab9fd78c6ef","date":1429503225,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene50\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene50\"))) {\n      codec = new Lucene50Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene50\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene50\"))) {\n      codec = new Lucene50Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","bugFix":null,"bugIntro":["f8414c6a288704914389b19a9b51705f9733bd6e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9","date":1434069165,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene53\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene53\"))) {\n      codec = new Lucene53Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene50\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene50\"))) {\n      codec = new Lucene50Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"81d0720146de53dd3a4a023d2a3d1089d86d748d","date":1442268215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene53\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene53\"))) {\n      codec = new Lucene53Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new ClassicSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene53\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene53\"))) {\n      codec = new Lucene53Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new DefaultSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a870f9917149dc600c4ad4417d615c1795de5864","date":1445975387,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene54\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene54\"))) {\n      codec = new Lucene54Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new ClassicSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene53\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene53\"))) {\n      codec = new Lucene53Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new ClassicSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1eee4175312c41f89aa23427f9e4edfc00deeaac","date":1446373190,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene60\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene60\"))) {\n      codec = new Lucene60Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new ClassicSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene54\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene54\"))) {\n      codec = new Lucene54Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new ClassicSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1a72cdac51dd6e3756b9d267dd995bf7b0718d90","date":1452897717,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene60\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene60\"))) {\n      codec = new Lucene60Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForLanguageTag(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new ClassicSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene60\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene60\"))) {\n      codec = new Lucene60Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForName(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new ClassicSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a836deab3a09546740b8ee2f1f776e83062f39e7","date":1453109062,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene60\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene60\"))) {\n      codec = new Lucene60Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForLanguageTag(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new ClassicSimilarity() : new RandomSimilarity(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene60\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene60\"))) {\n      codec = new Lucene60Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForLanguageTag(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new ClassicSimilarity() : new RandomSimilarityProvider(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8","date":1462567286,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene62\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene62\"))) {\n      codec = new Lucene62Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForLanguageTag(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new ClassicSimilarity() : new RandomSimilarity(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene60\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene60\"))) {\n      codec = new Lucene60Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForLanguageTag(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new ClassicSimilarity() : new RandomSimilarity(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene62\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene62\"))) {\n      codec = new Lucene62Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForLanguageTag(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new ClassicSimilarity() : new RandomSimilarity(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene60\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene60\"))) {\n      codec = new Lucene60Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForLanguageTag(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new ClassicSimilarity() : new RandomSimilarity(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene62\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene62\"))) {\n      codec = new Lucene62Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForLanguageTag(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new ClassicSimilarity() : new RandomSimilarity(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene60\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene60\"))) {\n      codec = new Lucene60Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForLanguageTag(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new ClassicSimilarity() : new RandomSimilarity(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene62\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene62\"))) {\n      codec = new Lucene62Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForLanguageTag(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new ClassicSimilarity() : new RandomSimilarity(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene60\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene60\"))) {\n      codec = new Lucene60Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForLanguageTag(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new ClassicSimilarity() : new RandomSimilarity(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"084884d4602f4d1c7411eab29e897e349ce62675","date":1475571034,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene70\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene70\"))) {\n      codec = new Lucene70Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForLanguageTag(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new ClassicSimilarity() : new RandomSimilarity(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene62\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene62\"))) {\n      codec = new Lucene62Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForLanguageTag(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new ClassicSimilarity() : new RandomSimilarity(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1967bed916cc89da82a1c2085f27976da6d08cbd","date":1475588750,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene70\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene70\"))) {\n      codec = new Lucene70Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForLanguageTag(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new ClassicSimilarity() : new RandomSimilarity(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene62\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene62\"))) {\n      codec = new Lucene62Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForLanguageTag(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new ClassicSimilarity() : new RandomSimilarity(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene70\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene70\"))) {\n      codec = new Lucene70Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForLanguageTag(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new ClassicSimilarity() : new RandomSimilarity(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene60\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene60\"))) {\n      codec = new Lucene60Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForLanguageTag(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new ClassicSimilarity() : new RandomSimilarity(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8414c6a288704914389b19a9b51705f9733bd6e","date":1477041552,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene70\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene70\"))) {\n      codec = new Lucene70Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForLanguageTag(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new ClassicSimilarity() : new RandomSimilarity(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n\n    initialized = true;\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene70\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene70\"))) {\n      codec = new Lucene70Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForLanguageTag(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new ClassicSimilarity() : new RandomSimilarity(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","bugFix":["5dcfd27b9fe602b19e032acdb429aab9fd78c6ef"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene70\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene70\"))) {\n      codec = new Lucene70Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForLanguageTag(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new ClassicSimilarity() : new RandomSimilarity(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n\n    initialized = true;\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene70\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene70\"))) {\n      codec = new Lucene70Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForLanguageTag(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new ClassicSimilarity() : new RandomSimilarity(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2247f9b905bc1344a659f142ce3ea23f96c9e827","date":1478786509,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene70\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene70\"))) {\n      codec = new Lucene70Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForLanguageTag(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = new RandomSimilarity(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n\n    initialized = true;\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene70\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene70\"))) {\n      codec = new Lucene70Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForLanguageTag(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new ClassicSimilarity() : new RandomSimilarity(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n\n    initialized = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene70\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene70\"))) {\n      codec = new Lucene70Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForLanguageTag(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = new RandomSimilarity(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n\n    initialized = true;\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene70\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene70\"))) {\n      codec = new Lucene70Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForLanguageTag(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = random().nextBoolean() ? new ClassicSimilarity() : new RandomSimilarity(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n\n    initialized = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36da5ede9e3eeda991aaf13a31735c5405c30b4e","date":1509403106,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene70\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene70\"))) {\n      codec = new Lucene70Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForLanguageTag(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = new AssertingSimilarity(new RandomSimilarity(random()));\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n\n    initialized = true;\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene70\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene70\"))) {\n      codec = new Lucene70Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForLanguageTag(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = new RandomSimilarity(random());\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n\n    initialized = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6930fc653c2b86e857fce0af7ec99993593d0d89","date":1535014305,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene80\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene80\"))) {\n      codec = new Lucene80Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForLanguageTag(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = new AssertingSimilarity(new RandomSimilarity(random()));\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n\n    initialized = true;\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene70\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene70\"))) {\n      codec = new Lucene70Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForLanguageTag(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = new AssertingSimilarity(new RandomSimilarity(random()));\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n\n    initialized = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"938935e3efe6aaecb925448d7f992783247366de","date":1554389977,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene80\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene80\"))) {\n      codec = new Lucene80Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()),\n          RandomPicks.randomFrom(random, Lucene50PostingsFormat.FSTLoadMode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForLanguageTag(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = new AssertingSimilarity(new RandomSimilarity(random()));\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n\n    initialized = true;\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene80\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene80\"))) {\n      codec = new Lucene80Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForLanguageTag(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = new AssertingSimilarity(new RandomSimilarity(random()));\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n\n    initialized = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"763da4a9605e47013078edc323b9d4b608f0f9e0","date":1555353576,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene80\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene80\"))) {\n      codec = new Lucene80Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values())\n      );\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForLanguageTag(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = new AssertingSimilarity(new RandomSimilarity(random()));\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n\n    initialized = true;\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene80\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene80\"))) {\n      codec = new Lucene80Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values()),\n          RandomPicks.randomFrom(random, Lucene50PostingsFormat.FSTLoadMode.values()));\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForLanguageTag(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = new AssertingSimilarity(new RandomSimilarity(random()));\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n\n    initialized = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene84\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene84\"))) {\n      codec = new Lucene84Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values())\n      );\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForLanguageTag(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = new AssertingSimilarity(new RandomSimilarity(random()));\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n\n    initialized = true;\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene80\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene80\"))) {\n      codec = new Lucene80Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values())\n      );\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForLanguageTag(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = new AssertingSimilarity(new RandomSimilarity(random()));\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n\n    initialized = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"773bf150032d3ef6c95997a154fb914b82875cb8","date":1590150786,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene84\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene84\"))) {\n      codec = new Lucene86Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values())\n      );\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForLanguageTag(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = new AssertingSimilarity(new RandomSimilarity(random()));\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n\n    initialized = true;\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene84\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene84\"))) {\n      codec = new Lucene84Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values())\n      );\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForLanguageTag(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = new AssertingSimilarity(new RandomSimilarity(random()));\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n\n    initialized = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db8230c9dbe474fc18e1e71cf04c1ada8046ec9","date":1598432674,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv#before().mjava","sourceNew":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene87\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene87\"))) {\n      codec = new Lucene87Codec(RandomPicks.randomFrom(random, Lucene87StoredFieldsFormat.Mode.values())\n      );\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForLanguageTag(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = new AssertingSimilarity(new RandomSimilarity(random()));\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n\n    initialized = true;\n  }\n\n","sourceOld":"  @Override\n  protected void before() throws Exception {\n    // enable this by default, for IDE consistency with ant tests (as it's the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n\n    // if verbose: print some debugging stuff about which codecs are loaded.\n    if (VERBOSE) {\n      System.out.println(\"Loaded codecs: \" + Codec.availableCodecs());\n      System.out.println(\"Loaded postingsFormats: \" + PostingsFormat.availablePostingsFormats());\n    }\n\n    savedInfoStream = InfoStream.getDefault();\n    final Random random = RandomizedContext.current().getRandom();\n    final boolean v = random.nextBoolean();\n    if (INFOSTREAM) {\n      InfoStream.setDefault(new ThreadNameFixingPrintStreamInfoStream(System.out));\n    } else if (v) {\n      InfoStream.setDefault(new NullInfoStream());\n    }\n\n    Class<?> targetClass = RandomizedContext.current().getTargetClass();\n    avoidCodecs = new HashSet<>();\n    if (targetClass.isAnnotationPresent(SuppressCodecs.class)) {\n      SuppressCodecs a = targetClass.getAnnotation(SuppressCodecs.class);\n      avoidCodecs.addAll(Arrays.asList(a.value()));\n    }\n    \n    savedCodec = Codec.getDefault();\n    int randomVal = random.nextInt(11);\n    if (\"default\".equals(TEST_CODEC)) {\n      codec = savedCodec; // just use the default, don't randomize\n    } else if ((\"random\".equals(TEST_POSTINGSFORMAT) == false) || (\"random\".equals(TEST_DOCVALUESFORMAT) == false)) {\n      // the user wired postings or DV: this is messy\n      // refactor into RandomCodec....\n      \n      final PostingsFormat format;\n      if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n        format = new AssertingPostingsFormat();\n      } else if (\"MockRandom\".equals(TEST_POSTINGSFORMAT)) {\n        format = new MockRandomPostingsFormat(new Random(random.nextLong()));\n      } else {\n        format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n      }\n      \n      final DocValuesFormat dvFormat;\n      if (\"random\".equals(TEST_DOCVALUESFORMAT)) {\n        dvFormat = new AssertingDocValuesFormat();\n      } else {\n        dvFormat = DocValuesFormat.forName(TEST_DOCVALUESFORMAT);\n      }\n      \n      codec = new AssertingCodec() {       \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          return dvFormat;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString() + \", \" + dvFormat.toString();\n        }\n      };\n    } else if (\"SimpleText\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 9 && LuceneTestCase.rarely(random) && !shouldAvoidCodec(\"SimpleText\"))) {\n      codec = new SimpleTextCodec();\n    } else if (\"CheapBastard\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 8 && !shouldAvoidCodec(\"CheapBastard\") && !shouldAvoidCodec(\"Lucene41\"))) {\n      // we also avoid this codec if Lucene41 is avoided, since thats the postings format it uses.\n      codec = new CheapBastardCodec();\n    } else if (\"Asserting\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 7 && !shouldAvoidCodec(\"Asserting\"))) {\n      codec = new AssertingCodec();\n    } else if (\"Compressing\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 6 && !shouldAvoidCodec(\"Compressing\"))) {\n      codec = CompressingCodec.randomInstance(random);\n    } else if (\"Lucene84\".equals(TEST_CODEC) || (\"random\".equals(TEST_CODEC) && randomVal == 5 && !shouldAvoidCodec(\"Lucene84\"))) {\n      codec = new Lucene86Codec(RandomPicks.randomFrom(random, Lucene50StoredFieldsFormat.Mode.values())\n      );\n    } else if (!\"random\".equals(TEST_CODEC)) {\n      codec = Codec.forName(TEST_CODEC);\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, avoidCodecs);\n    } else {\n      assert false;\n    }\n    Codec.setDefault(codec);\n\n    // Initialize locale/ timezone.\n    String testLocale = System.getProperty(\"tests.locale\", \"random\");\n    String testTimeZone = System.getProperty(\"tests.timezone\", \"random\");\n\n    // Always pick a random one for consistency (whether tests.locale was specified or not).\n    savedLocale = Locale.getDefault();\n    Locale randomLocale = randomLocale(random);\n    locale = testLocale.equals(\"random\") ? randomLocale : localeForLanguageTag(testLocale);\n    Locale.setDefault(locale);\n\n    savedTimeZone = TimeZone.getDefault();\n    TimeZone randomTimeZone = randomTimeZone(random());\n    timeZone = testTimeZone.equals(\"random\") ? randomTimeZone : TimeZone.getTimeZone(testTimeZone);\n    TimeZone.setDefault(timeZone);\n    similarity = new AssertingSimilarity(new RandomSimilarity(random()));\n\n    // Check codec restrictions once at class level.\n    try {\n      checkCodecRestrictions(codec);\n    } catch (AssumptionViolatedException e) {\n      System.err.println(\"NOTE: \" + e.getMessage() + \" Suppressed codecs: \" + \n          Arrays.toString(avoidCodecs.toArray()));\n      throw e;\n    }\n\n    // We have \"stickiness\" so that sometimes all we do is vary the RAM buffer size, other times just the doc count to flush by, else both.\n    // This way the assertMemory in DocumentsWriterFlushControl sometimes runs (when we always flush by RAM).\n    LiveIWCFlushMode flushMode;\n    switch (random().nextInt(3)) {\n    case 0:\n      flushMode = LiveIWCFlushMode.BY_RAM;\n      break;\n    case 1:\n      flushMode = LiveIWCFlushMode.BY_DOCS;\n      break;\n    case 2:\n      flushMode = LiveIWCFlushMode.EITHER;\n      break;\n    default:\n      throw new AssertionError();\n    }\n\n    LuceneTestCase.setLiveIWCFlushMode(flushMode);\n\n    initialized = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e49088db00ea6cb232fbde9c8c646c721d4d049f":["ffd1e39d19251f41c3337fd7df0b6ddcf61c2f89"],"0369b58ea079de067b4ea67a3ad55187b08e6df9":["b6b025bf5295df98292b320adc55f5e8f7b83723"],"9f2be786bbf3746ffcd9720e0b473f4b121c4228":["4e4c8573e7baf60b3f39be994bd2f2c36385d03b"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["4d44c142f2e458fd09d473333a8eecb1516ddb05","c4fc6f9e99b6e416d945cd2a35463b9f452a3df1"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["d470c8182e92b264680e34081b75e70a9f2b3c89","084884d4602f4d1c7411eab29e897e349ce62675"],"7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"4d44c142f2e458fd09d473333a8eecb1516ddb05":["86658da8ce1e761bc0f5a05cf8795d1f78c388e2"],"5a6a338194ed0a2e9eef3247ffe4a535203aac09":["37a0f60745e53927c4c876cfe5b5a58170f0646c"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","2247f9b905bc1344a659f142ce3ea23f96c9e827"],"36da5ede9e3eeda991aaf13a31735c5405c30b4e":["2247f9b905bc1344a659f142ce3ea23f96c9e827"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"],"1a72cdac51dd6e3756b9d267dd995bf7b0718d90":["1eee4175312c41f89aa23427f9e4edfc00deeaac"],"ffd1e39d19251f41c3337fd7df0b6ddcf61c2f89":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"aba371508186796cc6151d8223a5b4e16d02e26e":["197be891529ba2dea8287e2251906be9533dc8ea","5a1a22b1ad88b436661458df567f3fdb446392a4"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["5bfcba4bd0c8918a6db1993d4e7818f08cc2a827"],"197be891529ba2dea8287e2251906be9533dc8ea":["0a9007cca7bfa084e33b5d7bfe532dd7e1f5dd87"],"773bf150032d3ef6c95997a154fb914b82875cb8":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"],"820c994610cafbde5892c00924bdf69fffaaf38f":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"3010bce6c8ba451133626df1648f9277ff7e4a3a":["ad827f037f20d71699d37d668dbe089aa9fea26b"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["820c994610cafbde5892c00924bdf69fffaaf38f","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8":["a836deab3a09546740b8ee2f1f776e83062f39e7"],"879f774d3d719fff4f9f8bd6b0a98dc2025f8ce5":["31f253a4f41457e79e36c9b6c54166ae9883b9f7"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["763da4a9605e47013078edc323b9d4b608f0f9e0"],"b40aa4949bd6a56c07fe71318a4006a73a56a308":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"e1b1e202e0a963a0094d637c018a8595f9bd245f":["197be891529ba2dea8287e2251906be9533dc8ea"],"31f253a4f41457e79e36c9b6c54166ae9883b9f7":["0d430a0241eb1976d82ce1edc13d2381882cffc3"],"a870f9917149dc600c4ad4417d615c1795de5864":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"5b7d69c53c444cbbdbc1cd27e9f51f83b3ed14cb":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3128e6d07d9fef0d1aa24f58b07133c9293131b2":["e1b1e202e0a963a0094d637c018a8595f9bd245f"],"2daae254c28b627693692fbf8f14d2f36c3591c1":["4cc45c615dbb82bf79d5f9550286098367874fbf"],"084884d4602f4d1c7411eab29e897e349ce62675":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d2dee33619431ada2a7a07f5fe2dbd94bac6a460":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["5a6a338194ed0a2e9eef3247ffe4a535203aac09"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["5bfcba4bd0c8918a6db1993d4e7818f08cc2a827","6616b1fd222bb5a60f7f7856ace312252bc97890"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["d33aeb9ed95127e3cb6b2abce6c4b0441e6c3633","9f2be786bbf3746ffcd9720e0b473f4b121c4228"],"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"8dfdb55d9addc8dcac44a3b11ae6ca74747103ce":["8435160e9702b19398118ddf76b61c846612b6a4"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["197be891529ba2dea8287e2251906be9533dc8ea","3128e6d07d9fef0d1aa24f58b07133c9293131b2"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","f8414c6a288704914389b19a9b51705f9733bd6e"],"b11b627458456051494efb72f2f51f228b6dc43e":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"ca02638278b6e8ae6b18f9db9e55ddbb3092cd13":["e49088db00ea6cb232fbde9c8c646c721d4d049f"],"c4fc6f9e99b6e416d945cd2a35463b9f452a3df1":["4d44c142f2e458fd09d473333a8eecb1516ddb05"],"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["5dcfd27b9fe602b19e032acdb429aab9fd78c6ef"],"0a9007cca7bfa084e33b5d7bfe532dd7e1f5dd87":["a4febe69e4c727130aaf1a32c4020ed158101b55"],"a836deab3a09546740b8ee2f1f776e83062f39e7":["1a72cdac51dd6e3756b9d267dd995bf7b0718d90"],"763da4a9605e47013078edc323b9d4b608f0f9e0":["938935e3efe6aaecb925448d7f992783247366de"],"6930fc653c2b86e857fce0af7ec99993593d0d89":["36da5ede9e3eeda991aaf13a31735c5405c30b4e"],"0db8230c9dbe474fc18e1e71cf04c1ada8046ec9":["773bf150032d3ef6c95997a154fb914b82875cb8"],"0ad30c6a479e764150a3316e57263319775f1df2":["a836deab3a09546740b8ee2f1f776e83062f39e7","3d33e731a93d4b57e662ff094f64f94a745422d4"],"b6b025bf5295df98292b320adc55f5e8f7b83723":["c65c39fc1c35d9f5198ded6af2e74eec979393e0"],"56572ec06f1407c066d6b7399413178b33176cd8":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","5b7d69c53c444cbbdbc1cd27e9f51f83b3ed14cb"],"09a42395865f791464f0bd5f6118a4abbfa3eb8a":["11a746437bc5c0a0b3df0337ed249c387c812871"],"a4febe69e4c727130aaf1a32c4020ed158101b55":["6a88536886c93d729596349585802a38c63436ce"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a836deab3a09546740b8ee2f1f776e83062f39e7","0ad30c6a479e764150a3316e57263319775f1df2"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","48ac7cad6e13e58e631e431ea26e8d4c8756f63a"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["ca02638278b6e8ae6b18f9db9e55ddbb3092cd13"],"11a746437bc5c0a0b3df0337ed249c387c812871":["c4fc6f9e99b6e416d945cd2a35463b9f452a3df1"],"48ac7cad6e13e58e631e431ea26e8d4c8756f63a":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","b40aa4949bd6a56c07fe71318a4006a73a56a308"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0d430a0241eb1976d82ce1edc13d2381882cffc3":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1eee4175312c41f89aa23427f9e4edfc00deeaac":["a870f9917149dc600c4ad4417d615c1795de5864"],"ad827f037f20d71699d37d668dbe089aa9fea26b":["b11b627458456051494efb72f2f51f228b6dc43e"],"4e4c8573e7baf60b3f39be994bd2f2c36385d03b":["423d89a2b3cc419b647c07c2b3fdbc54311d07f9"],"5dcfd27b9fe602b19e032acdb429aab9fd78c6ef":["48ac7cad6e13e58e631e431ea26e8d4c8756f63a"],"624d2da1aed2d2415a83f3c573de0341c4001d90":["8dfdb55d9addc8dcac44a3b11ae6ca74747103ce"],"86658da8ce1e761bc0f5a05cf8795d1f78c388e2":["879f774d3d719fff4f9f8bd6b0a98dc2025f8ce5"],"f8414c6a288704914389b19a9b51705f9733bd6e":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["624d2da1aed2d2415a83f3c573de0341c4001d90"],"6616b1fd222bb5a60f7f7856ace312252bc97890":["cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"8fb3007251811930f502864bfe6ef5f0dd91371b":["11c25da4d58c25442c5d7c3a645dac3fa43e26b4"],"11c25da4d58c25442c5d7c3a645dac3fa43e26b4":["3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e"],"c65c39fc1c35d9f5198ded6af2e74eec979393e0":["3010bce6c8ba451133626df1648f9277ff7e4a3a"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"938935e3efe6aaecb925448d7f992783247366de":["6930fc653c2b86e857fce0af7ec99993593d0d89"],"8435160e9702b19398118ddf76b61c846612b6a4":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["5bfcba4bd0c8918a6db1993d4e7818f08cc2a827","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"e5974da97d735dd78f13f46406caf64c9448e4f4":["3128e6d07d9fef0d1aa24f58b07133c9293131b2"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["c4fc6f9e99b6e416d945cd2a35463b9f452a3df1","09a42395865f791464f0bd5f6118a4abbfa3eb8a"],"6a88536886c93d729596349585802a38c63436ce":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"d33aeb9ed95127e3cb6b2abce6c4b0441e6c3633":["0369b58ea079de067b4ea67a3ad55187b08e6df9"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["3128e6d07d9fef0d1aa24f58b07133c9293131b2","e5974da97d735dd78f13f46406caf64c9448e4f4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a836deab3a09546740b8ee2f1f776e83062f39e7","1967bed916cc89da82a1c2085f27976da6d08cbd"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793","2daae254c28b627693692fbf8f14d2f36c3591c1"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["5da0b42730b6b99b31389ef94cb97384e83b9ede","d2dee33619431ada2a7a07f5fe2dbd94bac6a460"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["fe33227f6805edab2036cbb80645cc4e2d1fa424","5a1a22b1ad88b436661458df567f3fdb446392a4"],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["5b7d69c53c444cbbdbc1cd27e9f51f83b3ed14cb"],"2247f9b905bc1344a659f142ce3ea23f96c9e827":["f8414c6a288704914389b19a9b51705f9733bd6e"],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["8fb3007251811930f502864bfe6ef5f0dd91371b"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["a836deab3a09546740b8ee2f1f776e83062f39e7","fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8"],"5bfcba4bd0c8918a6db1993d4e7818f08cc2a827":["7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0db8230c9dbe474fc18e1e71cf04c1ada8046ec9"]},"commit2Childs":{"e49088db00ea6cb232fbde9c8c646c721d4d049f":["ca02638278b6e8ae6b18f9db9e55ddbb3092cd13"],"0369b58ea079de067b4ea67a3ad55187b08e6df9":["d33aeb9ed95127e3cb6b2abce6c4b0441e6c3633"],"9f2be786bbf3746ffcd9720e0b473f4b121c4228":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["5a6a338194ed0a2e9eef3247ffe4a535203aac09"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["f8414c6a288704914389b19a9b51705f9733bd6e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa":["5bfcba4bd0c8918a6db1993d4e7818f08cc2a827"],"4d44c142f2e458fd09d473333a8eecb1516ddb05":["37a0f60745e53927c4c876cfe5b5a58170f0646c","c4fc6f9e99b6e416d945cd2a35463b9f452a3df1"],"5a6a338194ed0a2e9eef3247ffe4a535203aac09":["1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"36da5ede9e3eeda991aaf13a31735c5405c30b4e":["6930fc653c2b86e857fce0af7ec99993593d0d89"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["a870f9917149dc600c4ad4417d615c1795de5864"],"1a72cdac51dd6e3756b9d267dd995bf7b0718d90":["a836deab3a09546740b8ee2f1f776e83062f39e7"],"ffd1e39d19251f41c3337fd7df0b6ddcf61c2f89":["e49088db00ea6cb232fbde9c8c646c721d4d049f"],"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["6a88536886c93d729596349585802a38c63436ce"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["6616b1fd222bb5a60f7f7856ace312252bc97890"],"197be891529ba2dea8287e2251906be9533dc8ea":["aba371508186796cc6151d8223a5b4e16d02e26e","e1b1e202e0a963a0094d637c018a8595f9bd245f","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"773bf150032d3ef6c95997a154fb914b82875cb8":["0db8230c9dbe474fc18e1e71cf04c1ada8046ec9"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["2daae254c28b627693692fbf8f14d2f36c3591c1"],"820c994610cafbde5892c00924bdf69fffaaf38f":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"3010bce6c8ba451133626df1648f9277ff7e4a3a":["c65c39fc1c35d9f5198ded6af2e74eec979393e0"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["8435160e9702b19398118ddf76b61c846612b6a4"],"fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"879f774d3d719fff4f9f8bd6b0a98dc2025f8ce5":["86658da8ce1e761bc0f5a05cf8795d1f78c388e2"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["773bf150032d3ef6c95997a154fb914b82875cb8"],"b40aa4949bd6a56c07fe71318a4006a73a56a308":["48ac7cad6e13e58e631e431ea26e8d4c8756f63a"],"e1b1e202e0a963a0094d637c018a8595f9bd245f":["3128e6d07d9fef0d1aa24f58b07133c9293131b2"],"31f253a4f41457e79e36c9b6c54166ae9883b9f7":["879f774d3d719fff4f9f8bd6b0a98dc2025f8ce5"],"a870f9917149dc600c4ad4417d615c1795de5864":["1eee4175312c41f89aa23427f9e4edfc00deeaac"],"5b7d69c53c444cbbdbc1cd27e9f51f83b3ed14cb":["56572ec06f1407c066d6b7399413178b33176cd8","8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"084884d4602f4d1c7411eab29e897e349ce62675":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"3128e6d07d9fef0d1aa24f58b07133c9293131b2":["fe33227f6805edab2036cbb80645cc4e2d1fa424","e5974da97d735dd78f13f46406caf64c9448e4f4","5a1a22b1ad88b436661458df567f3fdb446392a4"],"2daae254c28b627693692fbf8f14d2f36c3591c1":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"d2dee33619431ada2a7a07f5fe2dbd94bac6a460":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e","b11b627458456051494efb72f2f51f228b6dc43e","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["0d430a0241eb1976d82ce1edc13d2381882cffc3"],"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e":["11c25da4d58c25442c5d7c3a645dac3fa43e26b4"],"8dfdb55d9addc8dcac44a3b11ae6ca74747103ce":["624d2da1aed2d2415a83f3c573de0341c4001d90"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["199dfa410f1fdbfd3294106b04096cce5ed34b21"],"b11b627458456051494efb72f2f51f228b6dc43e":["ad827f037f20d71699d37d668dbe089aa9fea26b"],"c4fc6f9e99b6e416d945cd2a35463b9f452a3df1":["37a0f60745e53927c4c876cfe5b5a58170f0646c","11a746437bc5c0a0b3df0337ed249c387c812871","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"ca02638278b6e8ae6b18f9db9e55ddbb3092cd13":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"0a9007cca7bfa084e33b5d7bfe532dd7e1f5dd87":["197be891529ba2dea8287e2251906be9533dc8ea"],"a836deab3a09546740b8ee2f1f776e83062f39e7":["fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8","0ad30c6a479e764150a3316e57263319775f1df2","d470c8182e92b264680e34081b75e70a9f2b3c89","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3d33e731a93d4b57e662ff094f64f94a745422d4"],"763da4a9605e47013078edc323b9d4b608f0f9e0":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"6930fc653c2b86e857fce0af7ec99993593d0d89":["938935e3efe6aaecb925448d7f992783247366de"],"0db8230c9dbe474fc18e1e71cf04c1ada8046ec9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"b6b025bf5295df98292b320adc55f5e8f7b83723":["0369b58ea079de067b4ea67a3ad55187b08e6df9"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"09a42395865f791464f0bd5f6118a4abbfa3eb8a":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["1967bed916cc89da82a1c2085f27976da6d08cbd","084884d4602f4d1c7411eab29e897e349ce62675"],"a4febe69e4c727130aaf1a32c4020ed158101b55":["0a9007cca7bfa084e33b5d7bfe532dd7e1f5dd87"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["b40aa4949bd6a56c07fe71318a4006a73a56a308","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","48ac7cad6e13e58e631e431ea26e8d4c8756f63a"],"11a746437bc5c0a0b3df0337ed249c387c812871":["09a42395865f791464f0bd5f6118a4abbfa3eb8a"],"48ac7cad6e13e58e631e431ea26e8d4c8756f63a":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","5dcfd27b9fe602b19e032acdb429aab9fd78c6ef"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["d2dee33619431ada2a7a07f5fe2dbd94bac6a460","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"0d430a0241eb1976d82ce1edc13d2381882cffc3":["31f253a4f41457e79e36c9b6c54166ae9883b9f7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"1eee4175312c41f89aa23427f9e4edfc00deeaac":["1a72cdac51dd6e3756b9d267dd995bf7b0718d90"],"ad827f037f20d71699d37d668dbe089aa9fea26b":["3010bce6c8ba451133626df1648f9277ff7e4a3a"],"4e4c8573e7baf60b3f39be994bd2f2c36385d03b":["9f2be786bbf3746ffcd9720e0b473f4b121c4228"],"5dcfd27b9fe602b19e032acdb429aab9fd78c6ef":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"],"624d2da1aed2d2415a83f3c573de0341c4001d90":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"86658da8ce1e761bc0f5a05cf8795d1f78c388e2":["4d44c142f2e458fd09d473333a8eecb1516ddb05"],"f8414c6a288704914389b19a9b51705f9733bd6e":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","2247f9b905bc1344a659f142ce3ea23f96c9e827"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5b7d69c53c444cbbdbc1cd27e9f51f83b3ed14cb","56572ec06f1407c066d6b7399413178b33176cd8"],"6616b1fd222bb5a60f7f7856ace312252bc97890":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"8fb3007251811930f502864bfe6ef5f0dd91371b":["423d89a2b3cc419b647c07c2b3fdbc54311d07f9"],"11c25da4d58c25442c5d7c3a645dac3fa43e26b4":["8fb3007251811930f502864bfe6ef5f0dd91371b"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"c65c39fc1c35d9f5198ded6af2e74eec979393e0":["b6b025bf5295df98292b320adc55f5e8f7b83723"],"8435160e9702b19398118ddf76b61c846612b6a4":["8dfdb55d9addc8dcac44a3b11ae6ca74747103ce"],"938935e3efe6aaecb925448d7f992783247366de":["763da4a9605e47013078edc323b9d4b608f0f9e0"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"e5974da97d735dd78f13f46406caf64c9448e4f4":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["820c994610cafbde5892c00924bdf69fffaaf38f","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"6a88536886c93d729596349585802a38c63436ce":["a4febe69e4c727130aaf1a32c4020ed158101b55"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"d33aeb9ed95127e3cb6b2abce6c4b0441e6c3633":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["ffd1e39d19251f41c3337fd7df0b6ddcf61c2f89"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"],"2247f9b905bc1344a659f142ce3ea23f96c9e827":["199dfa410f1fdbfd3294106b04096cce5ed34b21","36da5ede9e3eeda991aaf13a31735c5405c30b4e"],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["4e4c8573e7baf60b3f39be994bd2f2c36385d03b"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"5bfcba4bd0c8918a6db1993d4e7818f08cc2a827":["cf8086c7e11dc41303ef1b8050bd355ddfaee76d","c7492bcb52be51e55d596134b95b2e53cc4ffb91","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["199dfa410f1fdbfd3294106b04096cce5ed34b21","aba371508186796cc6151d8223a5b4e16d02e26e","56572ec06f1407c066d6b7399413178b33176cd8","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","db4fdbf3d262768eabc027cd8321edca0cd11fa8","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}