{"path":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#execInparallel(List[#-extends-PerReplicaCallable],Consumer[ExecutorService]).mjava","commits":[{"id":"fb50877dc038c021eba3a70999fd1f6ed85001c1","date":1563596432,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#execInparallel(List[#-extends-PerReplicaCallable],Consumer[ExecutorService]).mjava","pathOld":"/dev/null","sourceNew":"  public  static void execInparallel( List<? extends PerReplicaCallable> concurrentTasks, Consumer<ExecutorService> fun) {\n    int poolSize = Math.min(concurrentTasks.size(), 10);\n    ExecutorService parallelExecutor =\n        ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new DefaultSolrThreadFactory(\"solrHandlerExecutor\"));\n    try {\n\n     fun.accept(parallelExecutor);\n\n    }  finally {\n      ExecutorUtil.shutdownAndAwaitTermination(parallelExecutor);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39dabfd19b49b248d63cedbb01ea144ee5ad071c","date":1566241238,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#execInparallel(List[#-extends-PerReplicaCallable],Consumer[ExecutorService]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#execInparallel(List[#-extends-PerReplicaCallable],Consumer[ExecutorService]).mjava","sourceNew":"  public static void execInparallel(List<? extends PerReplicaCallable> concurrentTasks, Consumer<ExecutorService> fun) {\n    int poolSize = Math.min(concurrentTasks.size(), 10);\n    ExecutorService parallelExecutor =\n        ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new DefaultSolrThreadFactory(\"solrHandlerExecutor\"));\n    try {\n\n      fun.accept(parallelExecutor);\n\n    } finally {\n      ExecutorUtil.shutdownAndAwaitTermination(parallelExecutor);\n    }\n  }\n\n","sourceOld":"  public  static void execInparallel( List<? extends PerReplicaCallable> concurrentTasks, Consumer<ExecutorService> fun) {\n    int poolSize = Math.min(concurrentTasks.size(), 10);\n    ExecutorService parallelExecutor =\n        ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new DefaultSolrThreadFactory(\"solrHandlerExecutor\"));\n    try {\n\n     fun.accept(parallelExecutor);\n\n    }  finally {\n      ExecutorUtil.shutdownAndAwaitTermination(parallelExecutor);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#execInparallel(List[#-extends-PerReplicaCallable],Consumer[ExecutorService]).mjava","sourceNew":null,"sourceOld":"  public static void execInparallel(List<? extends PerReplicaCallable> concurrentTasks, Consumer<ExecutorService> fun) {\n    int poolSize = Math.min(concurrentTasks.size(), 10);\n    ExecutorService parallelExecutor =\n        ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new DefaultSolrThreadFactory(\"solrHandlerExecutor\"));\n    try {\n\n      fun.accept(parallelExecutor);\n\n    } finally {\n      ExecutorUtil.shutdownAndAwaitTermination(parallelExecutor);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":4,"author":"jimczi","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#execInparallel(List[#-extends-PerReplicaCallable],Consumer[ExecutorService]).mjava","sourceNew":null,"sourceOld":"  public static void execInparallel(List<? extends PerReplicaCallable> concurrentTasks, Consumer<ExecutorService> fun) {\n    int poolSize = Math.min(concurrentTasks.size(), 10);\n    ExecutorService parallelExecutor =\n        ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new DefaultSolrThreadFactory(\"solrHandlerExecutor\"));\n    try {\n\n      fun.accept(parallelExecutor);\n\n    } finally {\n      ExecutorUtil.shutdownAndAwaitTermination(parallelExecutor);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"39dabfd19b49b248d63cedbb01ea144ee5ad071c":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c44cc06c26e456fe9c215072b79fce30babe3975":["39dabfd19b49b248d63cedbb01ea144ee5ad071c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c44cc06c26e456fe9c215072b79fce30babe3975"],"b0b597c65628ca9e73913a07e81691f8229bae35":["39dabfd19b49b248d63cedbb01ea144ee5ad071c","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"39dabfd19b49b248d63cedbb01ea144ee5ad071c":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["39dabfd19b49b248d63cedbb01ea144ee5ad071c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"c44cc06c26e456fe9c215072b79fce30babe3975":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}