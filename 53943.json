{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#setPrefixGridScanLevel(int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#setPrefixGridScanLevel(int).mjava","pathOld":"modules/spatial/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#setPrefixGridScanLevel(int).mjava","sourceNew":"  public void setPrefixGridScanLevel(int prefixGridScanLevel) {\n    this.prefixGridScanLevel = prefixGridScanLevel;\n  }\n\n","sourceOld":"  public void setPrefixGridScanLevel(int prefixGridScanLevel) {\n    this.prefixGridScanLevel = prefixGridScanLevel;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0415a016b37e58a017fed0a91234f733ab359971","date":1341458183,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#setPrefixGridScanLevel(int).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#setPrefixGridScanLevel(int).mjava","sourceNew":"  public void setPrefixGridScanLevel(int prefixGridScanLevel) {\n    //TODO if negative then subtract from maxlevels\n    this.prefixGridScanLevel = prefixGridScanLevel;\n  }\n\n","sourceOld":"  public void setPrefixGridScanLevel(int prefixGridScanLevel) {\n    this.prefixGridScanLevel = prefixGridScanLevel;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#setPrefixGridScanLevel(int).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#setPrefixGridScanLevel(int).mjava","sourceNew":"  public void setPrefixGridScanLevel(int prefixGridScanLevel) {\n    //TODO if negative then subtract from maxlevels\n    this.prefixGridScanLevel = prefixGridScanLevel;\n  }\n\n","sourceOld":"  public void setPrefixGridScanLevel(int prefixGridScanLevel) {\n    this.prefixGridScanLevel = prefixGridScanLevel;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11a538ad124424bb29a1a6b3d94f142b8264b802","date":1348462001,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#setPrefixGridScanLevel(int).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#setPrefixGridScanLevel(int).mjava","sourceNew":"  /**\n   * Sets the grid level [1-maxLevels] at which indexed terms are scanned brute-force\n   * instead of by grid decomposition.  By default this is maxLevels - 4.  The\n   * final level, maxLevels, is always scanned.\n   *\n   * @param prefixGridScanLevel 1 to maxLevels\n   */\n  public void setPrefixGridScanLevel(int prefixGridScanLevel) {\n    //TODO if negative then subtract from maxlevels\n    this.prefixGridScanLevel = prefixGridScanLevel;\n  }\n\n","sourceOld":"  public void setPrefixGridScanLevel(int prefixGridScanLevel) {\n    //TODO if negative then subtract from maxlevels\n    this.prefixGridScanLevel = prefixGridScanLevel;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#setPrefixGridScanLevel(int).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#setPrefixGridScanLevel(int).mjava","sourceNew":"  /**\n   * Sets the grid level [1-maxLevels] at which indexed terms are scanned brute-force\n   * instead of by grid decomposition.  By default this is maxLevels - 4.  The\n   * final level, maxLevels, is always scanned.\n   *\n   * @param prefixGridScanLevel 1 to maxLevels\n   */\n  public void setPrefixGridScanLevel(int prefixGridScanLevel) {\n    //TODO if negative then subtract from maxlevels\n    this.prefixGridScanLevel = prefixGridScanLevel;\n  }\n\n","sourceOld":"  /**\n   * Sets the grid level [1-maxLevels] at which indexed terms are scanned brute-force\n   * instead of by grid decomposition.  By default this is maxLevels - 4.  The\n   * final level, maxLevels, is always scanned.\n   *\n   * @param prefixGridScanLevel 1 to maxLevels\n   */\n  public void setPrefixGridScanLevel(int prefixGridScanLevel) {\n    //TODO if negative then subtract from maxlevels\n    this.prefixGridScanLevel = prefixGridScanLevel;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#setPrefixGridScanLevel(int).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#setPrefixGridScanLevel(int).mjava","sourceNew":"  /**\n   * Sets the grid level [1-maxLevels] at which indexed terms are scanned brute-force\n   * instead of by grid decomposition.  By default this is maxLevels - 4.  The\n   * final level, maxLevels, is always scanned.\n   *\n   * @param prefixGridScanLevel 1 to maxLevels\n   */\n  public void setPrefixGridScanLevel(int prefixGridScanLevel) {\n    //TODO if negative then subtract from maxlevels\n    this.prefixGridScanLevel = prefixGridScanLevel;\n  }\n\n","sourceOld":"  /**\n   * Sets the grid level [1-maxLevels] at which indexed terms are scanned brute-force\n   * instead of by grid decomposition.  By default this is maxLevels - 4.  The\n   * final level, maxLevels, is always scanned.\n   *\n   * @param prefixGridScanLevel 1 to maxLevels\n   */\n  public void setPrefixGridScanLevel(int prefixGridScanLevel) {\n    //TODO if negative then subtract from maxlevels\n    this.prefixGridScanLevel = prefixGridScanLevel;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0415a016b37e58a017fed0a91234f733ab359971":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"af2638813028b254a88b418ebeafb541afb49653":["11a538ad124424bb29a1a6b3d94f142b8264b802","112d77ac8d3e10a362516ad834c9a11d35c94234"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"11a538ad124424bb29a1a6b3d94f142b8264b802":["0415a016b37e58a017fed0a91234f733ab359971"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","0415a016b37e58a017fed0a91234f733ab359971"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["11a538ad124424bb29a1a6b3d94f142b8264b802"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"0415a016b37e58a017fed0a91234f733ab359971":["11a538ad124424bb29a1a6b3d94f142b8264b802","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["0415a016b37e58a017fed0a91234f733ab359971","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"11a538ad124424bb29a1a6b3d94f142b8264b802":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}