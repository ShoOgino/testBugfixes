{"path":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","commits":[{"id":"4a5469a71486c4c1e313c7fcb08188d7111195c2","date":1333407337,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","pathOld":"/dev/null","sourceNew":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n    SolrConfig sc = new SolrConfig(\"solrconfig-basic.xml\");\n    SolrIndexConfig sic = sc.indexConfig;\n    assertTrue(\"default ramBufferSizeMB should be 32\", sic.ramBufferSizeMB == 32);\n    assertTrue(\"default useCompoundFile should be false\", sic.useCompoundFile == false);\n    assertTrue(\"default LockType should be native\", sic.lockType.equals(SolrIndexConfig.LOCK_TYPE_NATIVE));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21591922fb4db3e2a6ffb2cb342b3d61c053a973","date":1340761680,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","sourceNew":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(\"solr/collection1\"), \"solrconfig-basic.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n    assertTrue(\"default ramBufferSizeMB should be 32\", sic.ramBufferSizeMB == 32);\n    assertTrue(\"default useCompoundFile should be false\", sic.useCompoundFile == false);\n    assertTrue(\"default LockType should be native\", sic.lockType.equals(SolrIndexConfig.LOCK_TYPE_NATIVE));\n  }\n\n","sourceOld":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n    SolrConfig sc = new SolrConfig(\"solrconfig-basic.xml\");\n    SolrIndexConfig sic = sc.indexConfig;\n    assertTrue(\"default ramBufferSizeMB should be 32\", sic.ramBufferSizeMB == 32);\n    assertTrue(\"default useCompoundFile should be false\", sic.useCompoundFile == false);\n    assertTrue(\"default LockType should be native\", sic.lockType.equals(SolrIndexConfig.LOCK_TYPE_NATIVE));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","sourceNew":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(\"solr/collection1\"), \"solrconfig-basic.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n    assertTrue(\"default ramBufferSizeMB should be 32\", sic.ramBufferSizeMB == 32);\n    assertTrue(\"default useCompoundFile should be false\", sic.useCompoundFile == false);\n    assertTrue(\"default LockType should be native\", sic.lockType.equals(SolrIndexConfig.LOCK_TYPE_NATIVE));\n  }\n\n","sourceOld":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n    SolrConfig sc = new SolrConfig(\"solrconfig-basic.xml\");\n    SolrIndexConfig sic = sc.indexConfig;\n    assertTrue(\"default ramBufferSizeMB should be 32\", sic.ramBufferSizeMB == 32);\n    assertTrue(\"default useCompoundFile should be false\", sic.useCompoundFile == false);\n    assertTrue(\"default LockType should be native\", sic.lockType.equals(SolrIndexConfig.LOCK_TYPE_NATIVE));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6972962f6d16afcfbe2ce9b2dffe52f0612dbc48","date":1353103421,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","sourceNew":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(\"solr/collection1\"), \"solrconfig-basic.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n    assertTrue(\"default ramBufferSizeMB should be 100\", sic.ramBufferSizeMB == 100);\n    assertTrue(\"default useCompoundFile should be false\", sic.useCompoundFile == false);\n    assertTrue(\"default LockType should be native\", sic.lockType.equals(SolrIndexConfig.LOCK_TYPE_NATIVE));\n  }\n\n","sourceOld":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(\"solr/collection1\"), \"solrconfig-basic.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n    assertTrue(\"default ramBufferSizeMB should be 32\", sic.ramBufferSizeMB == 32);\n    assertTrue(\"default useCompoundFile should be false\", sic.useCompoundFile == false);\n    assertTrue(\"default LockType should be native\", sic.lockType.equals(SolrIndexConfig.LOCK_TYPE_NATIVE));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","sourceNew":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(\"solr/collection1\"), \"solrconfig-basic.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n    assertTrue(\"default ramBufferSizeMB should be 100\", sic.ramBufferSizeMB == 100);\n    assertTrue(\"default useCompoundFile should be false\", sic.useCompoundFile == false);\n    assertTrue(\"default LockType should be native\", sic.lockType.equals(SolrIndexConfig.LOCK_TYPE_NATIVE));\n  }\n\n","sourceOld":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(\"solr/collection1\"), \"solrconfig-basic.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n    assertTrue(\"default ramBufferSizeMB should be 32\", sic.ramBufferSizeMB == 32);\n    assertTrue(\"default useCompoundFile should be false\", sic.useCompoundFile == false);\n    assertTrue(\"default LockType should be native\", sic.lockType.equals(SolrIndexConfig.LOCK_TYPE_NATIVE));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f33ef255480d446ae7aa03506be85d0356a9850f","date":1371880818,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","sourceNew":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(\"solr/collection1\"), \"solrconfig-defaults.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n    assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    assertEquals(\"default LockType\", SolrIndexConfig.LOCK_TYPE_NATIVE, sic.lockType);\n    assertEquals(\"default useCompoundFile\", false, sic.useCompoundFile);\n\n  }\n\n","sourceOld":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(\"solr/collection1\"), \"solrconfig-basic.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n    assertTrue(\"default ramBufferSizeMB should be 100\", sic.ramBufferSizeMB == 100);\n    assertTrue(\"default useCompoundFile should be false\", sic.useCompoundFile == false);\n    assertTrue(\"default LockType should be native\", sic.lockType.equals(SolrIndexConfig.LOCK_TYPE_NATIVE));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","sourceNew":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(\"solr/collection1\"), \"solrconfig-defaults.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n    assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    assertEquals(\"default LockType\", SolrIndexConfig.LOCK_TYPE_NATIVE, sic.lockType);\n    assertEquals(\"default useCompoundFile\", false, sic.useCompoundFile);\n\n  }\n\n","sourceOld":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(\"solr/collection1\"), \"solrconfig-basic.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n    assertTrue(\"default ramBufferSizeMB should be 100\", sic.ramBufferSizeMB == 100);\n    assertTrue(\"default useCompoundFile should be false\", sic.useCompoundFile == false);\n    assertTrue(\"default LockType should be native\", sic.lockType.equals(SolrIndexConfig.LOCK_TYPE_NATIVE));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"926f89db68f9df123a00d986d92b2e6f15f9cf91","date":1376358057,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","sourceNew":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(\"solr/collection1\"), \"solrconfig-defaults.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n    assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    assertEquals(\"default LockType\", SolrIndexConfig.LOCK_TYPE_NATIVE, sic.lockType);\n    assertEquals(\"default useCompoundFile\", false, sic.useCompoundFile);\n\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(\"schema.xml\", solrConfig);\n    IndexWriterConfig iwc = sic.toIndexWriterConfig(indexSchema);\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TMP\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n  }\n\n","sourceOld":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(\"solr/collection1\"), \"solrconfig-defaults.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n    assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    assertEquals(\"default LockType\", SolrIndexConfig.LOCK_TYPE_NATIVE, sic.lockType);\n    assertEquals(\"default useCompoundFile\", false, sic.useCompoundFile);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","sourceNew":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(\"solr/collection1\"), \"solrconfig-defaults.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n    assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    assertEquals(\"default LockType\", SolrIndexConfig.LOCK_TYPE_NATIVE, sic.lockType);\n    assertEquals(\"default useCompoundFile\", false, sic.useCompoundFile);\n\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(\"schema.xml\", solrConfig);\n    IndexWriterConfig iwc = sic.toIndexWriterConfig(indexSchema);\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TMP\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n  }\n\n","sourceOld":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(\"solr/collection1\"), \"solrconfig-defaults.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n    assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    assertEquals(\"default LockType\", SolrIndexConfig.LOCK_TYPE_NATIVE, sic.lockType);\n    assertEquals(\"default useCompoundFile\", false, sic.useCompoundFile);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fc9f4a33c8fefeb1260aea04273a36b0d32378e","date":1421852764,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","sourceNew":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(\"solr/collection1\"), \"solrconfig-defaults.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n    assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    assertEquals(\"default LockType\", SolrIndexConfig.LOCK_TYPE_NATIVE, sic.lockType);\n    assertEquals(\"default useCompoundFile\", false, sic.getUseCompoundFile());\n\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(\"schema.xml\", solrConfig);\n    IndexWriterConfig iwc = sic.toIndexWriterConfig(indexSchema);\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TMP\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n  }\n\n","sourceOld":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(\"solr/collection1\"), \"solrconfig-defaults.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n    assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    assertEquals(\"default LockType\", SolrIndexConfig.LOCK_TYPE_NATIVE, sic.lockType);\n    assertEquals(\"default useCompoundFile\", false, sic.useCompoundFile);\n\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(\"schema.xml\", solrConfig);\n    IndexWriterConfig iwc = sic.toIndexWriterConfig(indexSchema);\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TMP\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0","date":1422781929,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","sourceNew":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(\"solr/collection1\"), \"solrconfig-defaults.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n    assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    assertEquals(\"default LockType\", SolrIndexConfig.LOCK_TYPE_NATIVE, sic.lockType);\n    assertEquals(\"default useCompoundFile\", false, sic.getUseCompoundFile());\n\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(\"schema.xml\", solrConfig);\n    IndexWriterConfig iwc = sic.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TMP\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n  }\n\n","sourceOld":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(\"solr/collection1\"), \"solrconfig-defaults.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n    assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    assertEquals(\"default LockType\", SolrIndexConfig.LOCK_TYPE_NATIVE, sic.lockType);\n    assertEquals(\"default useCompoundFile\", false, sic.getUseCompoundFile());\n\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(\"schema.xml\", solrConfig);\n    IndexWriterConfig iwc = sic.toIndexWriterConfig(indexSchema);\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TMP\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9faddcba6da825f6b0551dc2287e6ff4fdd60f82","date":1436268548,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","sourceNew":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    int numDefaultsTested = 0;\n    int numNullDefaults = 0;\n\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(\"solr/collection1\"), \"solrconfig-defaults.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n\n    ++numDefaultsTested; assertEquals(\"default useCompoundFile\", false, sic.getUseCompoundFile());\n\n    ++numDefaultsTested; assertEquals(\"default maxBufferedDocs\", -1, sic.maxBufferedDocs);\n    ++numDefaultsTested; assertEquals(\"default maxMergeDocs\", -1, sic.maxMergeDocs);\n    ++numDefaultsTested; assertEquals(\"default maxIndexingThreads\", IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, sic.maxIndexingThreads);\n    ++numDefaultsTested; assertEquals(\"default mergeFactor\", -1, sic.mergeFactor);\n\n    ++numDefaultsTested; assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    ++numDefaultsTested; assertEquals(\"default writeLockTimeout\", -1, sic.writeLockTimeout);\n    ++numDefaultsTested; assertEquals(\"default LockType\", SolrIndexConfig.LOCK_TYPE_NATIVE, sic.lockType);\n\n    ++numDefaultsTested; assertEquals(\"default infoStream\", InfoStream.NO_OUTPUT, sic.infoStream);\n\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergePolicyInfo\", sic.mergePolicyInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergeSchedulerInfo\", sic.mergeSchedulerInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergedSegmentWarmerInfo\", sic.mergedSegmentWarmerInfo);\n\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(\"schema.xml\", solrConfig);\n    IndexWriterConfig iwc = sic.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TMP\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n\n    assertNull(\"non-null mergedSegmentWarmer\", iwc.getMergedSegmentWarmer());\n\n    final int numDefaultsMapped = sic.toMap().size();\n    assertEquals(\"numDefaultsTested vs. numDefaultsMapped+numNullDefaults =\"+sic.toMap().keySet(), numDefaultsTested, numDefaultsMapped+numNullDefaults);\n  }\n\n","sourceOld":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(\"solr/collection1\"), \"solrconfig-defaults.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n    assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    assertEquals(\"default LockType\", SolrIndexConfig.LOCK_TYPE_NATIVE, sic.lockType);\n    assertEquals(\"default useCompoundFile\", false, sic.getUseCompoundFile());\n\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(\"schema.xml\", solrConfig);\n    IndexWriterConfig iwc = sic.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TMP\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c02b804ab16489b95429791a2d8fb0e0728354d4","date":1436551798,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","sourceNew":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    int numDefaultsTested = 0;\n    int numNullDefaults = 0;\n\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(\"solr/collection1\"), \"solrconfig-defaults.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n\n    ++numDefaultsTested; assertEquals(\"default useCompoundFile\", false, sic.getUseCompoundFile());\n\n    ++numDefaultsTested; assertEquals(\"default maxBufferedDocs\", -1, sic.maxBufferedDocs);\n    ++numDefaultsTested; assertEquals(\"default maxMergeDocs\", -1, sic.maxMergeDocs);\n    ++numDefaultsTested; assertEquals(\"default mergeFactor\", -1, sic.mergeFactor);\n\n    ++numDefaultsTested; assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    ++numDefaultsTested; assertEquals(\"default writeLockTimeout\", -1, sic.writeLockTimeout);\n    ++numDefaultsTested; assertEquals(\"default LockType\", SolrIndexConfig.LOCK_TYPE_NATIVE, sic.lockType);\n\n    ++numDefaultsTested; assertEquals(\"default infoStream\", InfoStream.NO_OUTPUT, sic.infoStream);\n\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergePolicyInfo\", sic.mergePolicyInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergeSchedulerInfo\", sic.mergeSchedulerInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergedSegmentWarmerInfo\", sic.mergedSegmentWarmerInfo);\n\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(\"schema.xml\", solrConfig);\n    IndexWriterConfig iwc = sic.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TMP\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n\n    assertNull(\"non-null mergedSegmentWarmer\", iwc.getMergedSegmentWarmer());\n\n    final int numDefaultsMapped = sic.toMap().size();\n    assertEquals(\"numDefaultsTested vs. numDefaultsMapped+numNullDefaults =\"+sic.toMap().keySet(), numDefaultsTested, numDefaultsMapped+numNullDefaults);\n  }\n\n","sourceOld":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    int numDefaultsTested = 0;\n    int numNullDefaults = 0;\n\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(\"solr/collection1\"), \"solrconfig-defaults.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n\n    ++numDefaultsTested; assertEquals(\"default useCompoundFile\", false, sic.getUseCompoundFile());\n\n    ++numDefaultsTested; assertEquals(\"default maxBufferedDocs\", -1, sic.maxBufferedDocs);\n    ++numDefaultsTested; assertEquals(\"default maxMergeDocs\", -1, sic.maxMergeDocs);\n    ++numDefaultsTested; assertEquals(\"default maxIndexingThreads\", IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, sic.maxIndexingThreads);\n    ++numDefaultsTested; assertEquals(\"default mergeFactor\", -1, sic.mergeFactor);\n\n    ++numDefaultsTested; assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    ++numDefaultsTested; assertEquals(\"default writeLockTimeout\", -1, sic.writeLockTimeout);\n    ++numDefaultsTested; assertEquals(\"default LockType\", SolrIndexConfig.LOCK_TYPE_NATIVE, sic.lockType);\n\n    ++numDefaultsTested; assertEquals(\"default infoStream\", InfoStream.NO_OUTPUT, sic.infoStream);\n\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergePolicyInfo\", sic.mergePolicyInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergeSchedulerInfo\", sic.mergeSchedulerInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergedSegmentWarmerInfo\", sic.mergedSegmentWarmerInfo);\n\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(\"schema.xml\", solrConfig);\n    IndexWriterConfig iwc = sic.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TMP\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n\n    assertNull(\"non-null mergedSegmentWarmer\", iwc.getMergedSegmentWarmer());\n\n    final int numDefaultsMapped = sic.toMap().size();\n    assertEquals(\"numDefaultsTested vs. numDefaultsMapped+numNullDefaults =\"+sic.toMap().keySet(), numDefaultsTested, numDefaultsMapped+numNullDefaults);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a626ec4d1c92e59fe390724d6220081047b03ce7","date":1448021525,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","sourceNew":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    int numDefaultsTested = 0;\n    int numNullDefaults = 0;\n\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(TEST_PATH().resolve(\"collection1\")), \"solrconfig-defaults.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n\n    ++numDefaultsTested; assertEquals(\"default useCompoundFile\", false, sic.getUseCompoundFile());\n\n    ++numDefaultsTested; assertEquals(\"default maxBufferedDocs\", -1, sic.maxBufferedDocs);\n    ++numDefaultsTested; assertEquals(\"default maxMergeDocs\", -1, sic.maxMergeDocs);\n    ++numDefaultsTested; assertEquals(\"default mergeFactor\", -1, sic.mergeFactor);\n\n    ++numDefaultsTested; assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    ++numDefaultsTested; assertEquals(\"default writeLockTimeout\", -1, sic.writeLockTimeout);\n    ++numDefaultsTested; assertEquals(\"default LockType\", SolrIndexConfig.LOCK_TYPE_NATIVE, sic.lockType);\n\n    ++numDefaultsTested; assertEquals(\"default infoStream\", InfoStream.NO_OUTPUT, sic.infoStream);\n\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergePolicyInfo\", sic.mergePolicyInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergeSchedulerInfo\", sic.mergeSchedulerInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergedSegmentWarmerInfo\", sic.mergedSegmentWarmerInfo);\n\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(\"schema.xml\", solrConfig);\n    IndexWriterConfig iwc = sic.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TMP\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n\n    assertNull(\"non-null mergedSegmentWarmer\", iwc.getMergedSegmentWarmer());\n\n    final int numDefaultsMapped = sic.toMap().size();\n    assertEquals(\"numDefaultsTested vs. numDefaultsMapped+numNullDefaults =\"+sic.toMap().keySet(), numDefaultsTested, numDefaultsMapped+numNullDefaults);\n  }\n\n","sourceOld":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    int numDefaultsTested = 0;\n    int numNullDefaults = 0;\n\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(\"solr/collection1\"), \"solrconfig-defaults.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n\n    ++numDefaultsTested; assertEquals(\"default useCompoundFile\", false, sic.getUseCompoundFile());\n\n    ++numDefaultsTested; assertEquals(\"default maxBufferedDocs\", -1, sic.maxBufferedDocs);\n    ++numDefaultsTested; assertEquals(\"default maxMergeDocs\", -1, sic.maxMergeDocs);\n    ++numDefaultsTested; assertEquals(\"default mergeFactor\", -1, sic.mergeFactor);\n\n    ++numDefaultsTested; assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    ++numDefaultsTested; assertEquals(\"default writeLockTimeout\", -1, sic.writeLockTimeout);\n    ++numDefaultsTested; assertEquals(\"default LockType\", SolrIndexConfig.LOCK_TYPE_NATIVE, sic.lockType);\n\n    ++numDefaultsTested; assertEquals(\"default infoStream\", InfoStream.NO_OUTPUT, sic.infoStream);\n\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergePolicyInfo\", sic.mergePolicyInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergeSchedulerInfo\", sic.mergeSchedulerInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergedSegmentWarmerInfo\", sic.mergedSegmentWarmerInfo);\n\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(\"schema.xml\", solrConfig);\n    IndexWriterConfig iwc = sic.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TMP\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n\n    assertNull(\"non-null mergedSegmentWarmer\", iwc.getMergedSegmentWarmer());\n\n    final int numDefaultsMapped = sic.toMap().size();\n    assertEquals(\"numDefaultsTested vs. numDefaultsMapped+numNullDefaults =\"+sic.toMap().keySet(), numDefaultsTested, numDefaultsMapped+numNullDefaults);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9de9cb439f6b08d8865ea8c3fc81091598312851","date":1451904531,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","sourceNew":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    int numDefaultsTested = 0;\n    int numNullDefaults = 0;\n\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(TEST_PATH().resolve(\"collection1\")), \"solrconfig-defaults.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n\n    ++numDefaultsTested; assertEquals(\"default useCompoundFile\", false, sic.getUseCompoundFile());\n\n    ++numDefaultsTested; assertEquals(\"default maxBufferedDocs\", -1, sic.maxBufferedDocs);\n    ++numDefaultsTested; assertEquals(\"default maxMergeDocs\", -1, sic.maxMergeDocs);\n    ++numDefaultsTested; assertEquals(\"default mergeFactor\", -1, sic.mergeFactor);\n\n    ++numDefaultsTested; assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    ++numDefaultsTested; assertEquals(\"default writeLockTimeout\", -1, sic.writeLockTimeout);\n    ++numDefaultsTested; assertEquals(\"default LockType\", SolrIndexConfig.LOCK_TYPE_NATIVE, sic.lockType);\n\n    ++numDefaultsTested; assertEquals(\"default infoStream\", InfoStream.NO_OUTPUT, sic.infoStream);\n\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergePolicyInfo\", sic.mergePolicyInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergeSchedulerInfo\", sic.mergeSchedulerInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergedSegmentWarmerInfo\", sic.mergedSegmentWarmerInfo);\n\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(\"schema.xml\", solrConfig);\n    IndexWriterConfig iwc = sic.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TieredMergePolicy\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n\n    assertNull(\"non-null mergedSegmentWarmer\", iwc.getMergedSegmentWarmer());\n\n    final int numDefaultsMapped = sic.toMap().size();\n    assertEquals(\"numDefaultsTested vs. numDefaultsMapped+numNullDefaults =\"+sic.toMap().keySet(), numDefaultsTested, numDefaultsMapped+numNullDefaults);\n  }\n\n","sourceOld":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    int numDefaultsTested = 0;\n    int numNullDefaults = 0;\n\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(TEST_PATH().resolve(\"collection1\")), \"solrconfig-defaults.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n\n    ++numDefaultsTested; assertEquals(\"default useCompoundFile\", false, sic.getUseCompoundFile());\n\n    ++numDefaultsTested; assertEquals(\"default maxBufferedDocs\", -1, sic.maxBufferedDocs);\n    ++numDefaultsTested; assertEquals(\"default maxMergeDocs\", -1, sic.maxMergeDocs);\n    ++numDefaultsTested; assertEquals(\"default mergeFactor\", -1, sic.mergeFactor);\n\n    ++numDefaultsTested; assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    ++numDefaultsTested; assertEquals(\"default writeLockTimeout\", -1, sic.writeLockTimeout);\n    ++numDefaultsTested; assertEquals(\"default LockType\", SolrIndexConfig.LOCK_TYPE_NATIVE, sic.lockType);\n\n    ++numDefaultsTested; assertEquals(\"default infoStream\", InfoStream.NO_OUTPUT, sic.infoStream);\n\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergePolicyInfo\", sic.mergePolicyInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergeSchedulerInfo\", sic.mergeSchedulerInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergedSegmentWarmerInfo\", sic.mergedSegmentWarmerInfo);\n\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(\"schema.xml\", solrConfig);\n    IndexWriterConfig iwc = sic.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TMP\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n\n    assertNull(\"non-null mergedSegmentWarmer\", iwc.getMergedSegmentWarmer());\n\n    final int numDefaultsMapped = sic.toMap().size();\n    assertEquals(\"numDefaultsTested vs. numDefaultsMapped+numNullDefaults =\"+sic.toMap().keySet(), numDefaultsTested, numDefaultsMapped+numNullDefaults);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b3091e174423680e7d6cce5f858d48cd5410bcf","date":1452177279,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","sourceNew":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    int numDefaultsTested = 0;\n    int numNullDefaults = 0;\n\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(TEST_PATH().resolve(\"collection1\")), \"solrconfig-defaults.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n\n    ++numDefaultsTested; assertEquals(\"default useCompoundFile\", false, sic.getUseCompoundFile());\n\n    ++numDefaultsTested; assertEquals(\"default maxBufferedDocs\", -1, sic.maxBufferedDocs);\n    ++numDefaultsTested; assertEquals(\"default maxMergeDocs\", -1, sic.maxMergeDocs);\n    ++numDefaultsTested; assertEquals(\"default mergeFactor\", -1, sic.mergeFactor);\n\n    ++numDefaultsTested; assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    ++numDefaultsTested; assertEquals(\"default writeLockTimeout\", -1, sic.writeLockTimeout);\n    ++numDefaultsTested; assertEquals(\"default LockType\", DirectoryFactory.LOCK_TYPE_NATIVE, sic.lockType);\n\n    ++numDefaultsTested; assertEquals(\"default infoStream\", InfoStream.NO_OUTPUT, sic.infoStream);\n\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergePolicyInfo\", sic.mergePolicyInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergeSchedulerInfo\", sic.mergeSchedulerInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergedSegmentWarmerInfo\", sic.mergedSegmentWarmerInfo);\n\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(\"schema.xml\", solrConfig);\n    IndexWriterConfig iwc = sic.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TieredMergePolicy\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n\n    assertNull(\"non-null mergedSegmentWarmer\", iwc.getMergedSegmentWarmer());\n\n    final int numDefaultsMapped = sic.toMap().size();\n    assertEquals(\"numDefaultsTested vs. numDefaultsMapped+numNullDefaults =\"+sic.toMap().keySet(), numDefaultsTested, numDefaultsMapped+numNullDefaults);\n  }\n\n","sourceOld":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    int numDefaultsTested = 0;\n    int numNullDefaults = 0;\n\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(TEST_PATH().resolve(\"collection1\")), \"solrconfig-defaults.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n\n    ++numDefaultsTested; assertEquals(\"default useCompoundFile\", false, sic.getUseCompoundFile());\n\n    ++numDefaultsTested; assertEquals(\"default maxBufferedDocs\", -1, sic.maxBufferedDocs);\n    ++numDefaultsTested; assertEquals(\"default maxMergeDocs\", -1, sic.maxMergeDocs);\n    ++numDefaultsTested; assertEquals(\"default mergeFactor\", -1, sic.mergeFactor);\n\n    ++numDefaultsTested; assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    ++numDefaultsTested; assertEquals(\"default writeLockTimeout\", -1, sic.writeLockTimeout);\n    ++numDefaultsTested; assertEquals(\"default LockType\", SolrIndexConfig.LOCK_TYPE_NATIVE, sic.lockType);\n\n    ++numDefaultsTested; assertEquals(\"default infoStream\", InfoStream.NO_OUTPUT, sic.infoStream);\n\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergePolicyInfo\", sic.mergePolicyInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergeSchedulerInfo\", sic.mergeSchedulerInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergedSegmentWarmerInfo\", sic.mergedSegmentWarmerInfo);\n\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(\"schema.xml\", solrConfig);\n    IndexWriterConfig iwc = sic.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TieredMergePolicy\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n\n    assertNull(\"non-null mergedSegmentWarmer\", iwc.getMergedSegmentWarmer());\n\n    final int numDefaultsMapped = sic.toMap().size();\n    assertEquals(\"numDefaultsTested vs. numDefaultsMapped+numNullDefaults =\"+sic.toMap().keySet(), numDefaultsTested, numDefaultsMapped+numNullDefaults);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f7730fa9149de890ea12da1fa93be9f5e3a1edf","date":1455303885,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","sourceNew":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    int numDefaultsTested = 0;\n    int numNullDefaults = 0;\n\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(TEST_PATH().resolve(\"collection1\")), \"solrconfig-defaults.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n\n    ++numDefaultsTested; assertEquals(\"default useCompoundFile\", false, sic.getUseCompoundFile());\n\n    ++numDefaultsTested; assertEquals(\"default maxBufferedDocs\", -1, sic.maxBufferedDocs);\n    ++numDefaultsTested; assertEquals(\"default maxMergeDocs\", -1, sic.maxMergeDocs);\n    ++numDefaultsTested; assertEquals(\"default mergeFactor\", -1, sic.mergeFactor);\n\n    ++numDefaultsTested; assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    ++numDefaultsTested; assertEquals(\"default writeLockTimeout\", -1, sic.writeLockTimeout);\n    ++numDefaultsTested; assertEquals(\"default LockType\", DirectoryFactory.LOCK_TYPE_NATIVE, sic.lockType);\n\n    ++numDefaultsTested; assertEquals(\"default infoStream\", InfoStream.NO_OUTPUT, sic.infoStream);\n\n    // mergePolicyInfo and mergePolicyFactoryInfo are mutually exclusive\n    // so ++ count them only once for both instead of individually\n    ++numDefaultsTested; ++numNullDefaults;\n    assertNull(\"default mergePolicyInfo\", sic.mergePolicyInfo);\n    assertNull(\"default mergePolicyFactoryInfo\", sic.mergePolicyFactoryInfo);\n\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergeSchedulerInfo\", sic.mergeSchedulerInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergedSegmentWarmerInfo\", sic.mergedSegmentWarmerInfo);\n\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(\"schema.xml\", solrConfig);\n    IndexWriterConfig iwc = sic.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TieredMergePolicy\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n\n    assertNull(\"non-null mergedSegmentWarmer\", iwc.getMergedSegmentWarmer());\n\n    final int numDefaultsMapped = sic.toMap().size();\n    assertEquals(\"numDefaultsTested vs. numDefaultsMapped+numNullDefaults =\"+sic.toMap().keySet(), numDefaultsTested, numDefaultsMapped+numNullDefaults);\n  }\n\n","sourceOld":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    int numDefaultsTested = 0;\n    int numNullDefaults = 0;\n\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(TEST_PATH().resolve(\"collection1\")), \"solrconfig-defaults.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n\n    ++numDefaultsTested; assertEquals(\"default useCompoundFile\", false, sic.getUseCompoundFile());\n\n    ++numDefaultsTested; assertEquals(\"default maxBufferedDocs\", -1, sic.maxBufferedDocs);\n    ++numDefaultsTested; assertEquals(\"default maxMergeDocs\", -1, sic.maxMergeDocs);\n    ++numDefaultsTested; assertEquals(\"default mergeFactor\", -1, sic.mergeFactor);\n\n    ++numDefaultsTested; assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    ++numDefaultsTested; assertEquals(\"default writeLockTimeout\", -1, sic.writeLockTimeout);\n    ++numDefaultsTested; assertEquals(\"default LockType\", DirectoryFactory.LOCK_TYPE_NATIVE, sic.lockType);\n\n    ++numDefaultsTested; assertEquals(\"default infoStream\", InfoStream.NO_OUTPUT, sic.infoStream);\n\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergePolicyInfo\", sic.mergePolicyInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergeSchedulerInfo\", sic.mergeSchedulerInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergedSegmentWarmerInfo\", sic.mergedSegmentWarmerInfo);\n\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(\"schema.xml\", solrConfig);\n    IndexWriterConfig iwc = sic.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TieredMergePolicy\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n\n    assertNull(\"non-null mergedSegmentWarmer\", iwc.getMergedSegmentWarmer());\n\n    final int numDefaultsMapped = sic.toMap().size();\n    assertEquals(\"numDefaultsTested vs. numDefaultsMapped+numNullDefaults =\"+sic.toMap().keySet(), numDefaultsTested, numDefaultsMapped+numNullDefaults);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f1f31880696765d6aec499d3b01fa501129af45","date":1474287317,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","sourceNew":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    int numDefaultsTested = 0;\n    int numNullDefaults = 0;\n\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(TEST_PATH().resolve(\"collection1\")), \"solrconfig-defaults.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n\n    ++numDefaultsTested; assertEquals(\"default useCompoundFile\", false, sic.getUseCompoundFile());\n\n    ++numDefaultsTested; assertEquals(\"default maxBufferedDocs\", -1, sic.maxBufferedDocs);\n    ++numDefaultsTested; assertEquals(\"default maxMergeDocs\", -1, sic.maxMergeDocs);\n    ++numDefaultsTested; assertEquals(\"default mergeFactor\", -1, sic.mergeFactor);\n\n    ++numDefaultsTested; assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    ++numDefaultsTested; assertEquals(\"default writeLockTimeout\", -1, sic.writeLockTimeout);\n    ++numDefaultsTested; assertEquals(\"default LockType\", DirectoryFactory.LOCK_TYPE_NATIVE, sic.lockType);\n\n    ++numDefaultsTested; assertEquals(\"default infoStream\", InfoStream.NO_OUTPUT, sic.infoStream);\n\n    // mergePolicyInfo and mergePolicyFactoryInfo are mutually exclusive\n    // so ++ count them only once for both instead of individually\n    ++numDefaultsTested; ++numNullDefaults;\n    assertNull(\"default mergePolicyInfo\", sic.mergePolicyInfo);\n    assertNull(\"default mergePolicyFactoryInfo\", sic.mergePolicyFactoryInfo);\n\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergeSchedulerInfo\", sic.mergeSchedulerInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergedSegmentWarmerInfo\", sic.mergedSegmentWarmerInfo);\n\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(\"schema.xml\", solrConfig);\n    IndexWriterConfig iwc = sic.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TieredMergePolicy\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n\n    assertNull(\"non-null mergedSegmentWarmer\", iwc.getMergedSegmentWarmer());\n\n    final int numDefaultsMapped = sic.toMap(new LinkedHashMap<>()).size();\n    assertEquals(\"numDefaultsTested vs. numDefaultsMapped+numNullDefaults =\"+sic.toMap(new LinkedHashMap<>()).keySet(), numDefaultsTested, numDefaultsMapped+numNullDefaults);\n  }\n\n","sourceOld":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    int numDefaultsTested = 0;\n    int numNullDefaults = 0;\n\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(TEST_PATH().resolve(\"collection1\")), \"solrconfig-defaults.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n\n    ++numDefaultsTested; assertEquals(\"default useCompoundFile\", false, sic.getUseCompoundFile());\n\n    ++numDefaultsTested; assertEquals(\"default maxBufferedDocs\", -1, sic.maxBufferedDocs);\n    ++numDefaultsTested; assertEquals(\"default maxMergeDocs\", -1, sic.maxMergeDocs);\n    ++numDefaultsTested; assertEquals(\"default mergeFactor\", -1, sic.mergeFactor);\n\n    ++numDefaultsTested; assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    ++numDefaultsTested; assertEquals(\"default writeLockTimeout\", -1, sic.writeLockTimeout);\n    ++numDefaultsTested; assertEquals(\"default LockType\", DirectoryFactory.LOCK_TYPE_NATIVE, sic.lockType);\n\n    ++numDefaultsTested; assertEquals(\"default infoStream\", InfoStream.NO_OUTPUT, sic.infoStream);\n\n    // mergePolicyInfo and mergePolicyFactoryInfo are mutually exclusive\n    // so ++ count them only once for both instead of individually\n    ++numDefaultsTested; ++numNullDefaults;\n    assertNull(\"default mergePolicyInfo\", sic.mergePolicyInfo);\n    assertNull(\"default mergePolicyFactoryInfo\", sic.mergePolicyFactoryInfo);\n\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergeSchedulerInfo\", sic.mergeSchedulerInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergedSegmentWarmerInfo\", sic.mergedSegmentWarmerInfo);\n\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(\"schema.xml\", solrConfig);\n    IndexWriterConfig iwc = sic.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TieredMergePolicy\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n\n    assertNull(\"non-null mergedSegmentWarmer\", iwc.getMergedSegmentWarmer());\n\n    final int numDefaultsMapped = sic.toMap().size();\n    assertEquals(\"numDefaultsTested vs. numDefaultsMapped+numNullDefaults =\"+sic.toMap().keySet(), numDefaultsTested, numDefaultsMapped+numNullDefaults);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","sourceNew":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    int numDefaultsTested = 0;\n    int numNullDefaults = 0;\n\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(TEST_PATH().resolve(\"collection1\")), \"solrconfig-defaults.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n\n    ++numDefaultsTested; assertEquals(\"default useCompoundFile\", false, sic.getUseCompoundFile());\n\n    ++numDefaultsTested; assertEquals(\"default maxBufferedDocs\", -1, sic.maxBufferedDocs);\n    ++numDefaultsTested; assertEquals(\"default maxMergeDocs\", -1, sic.maxMergeDocs);\n    ++numDefaultsTested; assertEquals(\"default mergeFactor\", -1, sic.mergeFactor);\n\n    ++numDefaultsTested; assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    ++numDefaultsTested; assertEquals(\"default writeLockTimeout\", -1, sic.writeLockTimeout);\n    ++numDefaultsTested; assertEquals(\"default LockType\", DirectoryFactory.LOCK_TYPE_NATIVE, sic.lockType);\n\n    ++numDefaultsTested; assertEquals(\"default infoStream\", InfoStream.NO_OUTPUT, sic.infoStream);\n\n    // mergePolicyInfo and mergePolicyFactoryInfo are mutually exclusive\n    // so ++ count them only once for both instead of individually\n    ++numDefaultsTested; ++numNullDefaults;\n    assertNull(\"default mergePolicyInfo\", sic.mergePolicyInfo);\n    assertNull(\"default mergePolicyFactoryInfo\", sic.mergePolicyFactoryInfo);\n\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergeSchedulerInfo\", sic.mergeSchedulerInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergedSegmentWarmerInfo\", sic.mergedSegmentWarmerInfo);\n\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(\"schema.xml\", solrConfig);\n    IndexWriterConfig iwc = sic.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TieredMergePolicy\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n\n    assertNull(\"non-null mergedSegmentWarmer\", iwc.getMergedSegmentWarmer());\n\n    final int numDefaultsMapped = sic.toMap(new LinkedHashMap<>()).size();\n    assertEquals(\"numDefaultsTested vs. numDefaultsMapped+numNullDefaults =\"+sic.toMap(new LinkedHashMap<>()).keySet(), numDefaultsTested, numDefaultsMapped+numNullDefaults);\n  }\n\n","sourceOld":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    int numDefaultsTested = 0;\n    int numNullDefaults = 0;\n\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(TEST_PATH().resolve(\"collection1\")), \"solrconfig-defaults.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n\n    ++numDefaultsTested; assertEquals(\"default useCompoundFile\", false, sic.getUseCompoundFile());\n\n    ++numDefaultsTested; assertEquals(\"default maxBufferedDocs\", -1, sic.maxBufferedDocs);\n    ++numDefaultsTested; assertEquals(\"default maxMergeDocs\", -1, sic.maxMergeDocs);\n    ++numDefaultsTested; assertEquals(\"default mergeFactor\", -1, sic.mergeFactor);\n\n    ++numDefaultsTested; assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    ++numDefaultsTested; assertEquals(\"default writeLockTimeout\", -1, sic.writeLockTimeout);\n    ++numDefaultsTested; assertEquals(\"default LockType\", DirectoryFactory.LOCK_TYPE_NATIVE, sic.lockType);\n\n    ++numDefaultsTested; assertEquals(\"default infoStream\", InfoStream.NO_OUTPUT, sic.infoStream);\n\n    // mergePolicyInfo and mergePolicyFactoryInfo are mutually exclusive\n    // so ++ count them only once for both instead of individually\n    ++numDefaultsTested; ++numNullDefaults;\n    assertNull(\"default mergePolicyInfo\", sic.mergePolicyInfo);\n    assertNull(\"default mergePolicyFactoryInfo\", sic.mergePolicyFactoryInfo);\n\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergeSchedulerInfo\", sic.mergeSchedulerInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergedSegmentWarmerInfo\", sic.mergedSegmentWarmerInfo);\n\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(\"schema.xml\", solrConfig);\n    IndexWriterConfig iwc = sic.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TieredMergePolicy\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n\n    assertNull(\"non-null mergedSegmentWarmer\", iwc.getMergedSegmentWarmer());\n\n    final int numDefaultsMapped = sic.toMap().size();\n    assertEquals(\"numDefaultsTested vs. numDefaultsMapped+numNullDefaults =\"+sic.toMap().keySet(), numDefaultsTested, numDefaultsMapped+numNullDefaults);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","sourceNew":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    int numDefaultsTested = 0;\n    int numNullDefaults = 0;\n\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(TEST_PATH().resolve(\"collection1\")), \"solrconfig-defaults.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n\n    ++numDefaultsTested; assertEquals(\"default useCompoundFile\", false, sic.getUseCompoundFile());\n\n    ++numDefaultsTested; assertEquals(\"default maxBufferedDocs\", -1, sic.maxBufferedDocs);\n    ++numDefaultsTested; assertEquals(\"default maxMergeDocs\", -1, sic.maxMergeDocs);\n    ++numDefaultsTested; assertEquals(\"default mergeFactor\", -1, sic.mergeFactor);\n\n    ++numDefaultsTested; assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    ++numDefaultsTested; assertEquals(\"default writeLockTimeout\", -1, sic.writeLockTimeout);\n    ++numDefaultsTested; assertEquals(\"default LockType\", DirectoryFactory.LOCK_TYPE_NATIVE, sic.lockType);\n\n    ++numDefaultsTested; assertEquals(\"default infoStream\", InfoStream.NO_OUTPUT, sic.infoStream);\n\n    // mergePolicyInfo and mergePolicyFactoryInfo are mutually exclusive\n    // so ++ count them only once for both instead of individually\n    ++numDefaultsTested; ++numNullDefaults;\n    assertNull(\"default mergePolicyInfo\", sic.mergePolicyInfo);\n    assertNull(\"default mergePolicyFactoryInfo\", sic.mergePolicyFactoryInfo);\n\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergeSchedulerInfo\", sic.mergeSchedulerInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergedSegmentWarmerInfo\", sic.mergedSegmentWarmerInfo);\n\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(\"schema.xml\", solrConfig);\n    IndexWriterConfig iwc = sic.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TieredMergePolicy\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n\n    assertNull(\"non-null mergedSegmentWarmer\", iwc.getMergedSegmentWarmer());\n\n    final int numDefaultsMapped = sic.toMap(new LinkedHashMap<>()).size();\n    assertEquals(\"numDefaultsTested vs. numDefaultsMapped+numNullDefaults =\"+sic.toMap(new LinkedHashMap<>()).keySet(), numDefaultsTested, numDefaultsMapped+numNullDefaults);\n  }\n\n","sourceOld":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    int numDefaultsTested = 0;\n    int numNullDefaults = 0;\n\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(TEST_PATH().resolve(\"collection1\")), \"solrconfig-defaults.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n\n    ++numDefaultsTested; assertEquals(\"default useCompoundFile\", false, sic.getUseCompoundFile());\n\n    ++numDefaultsTested; assertEquals(\"default maxBufferedDocs\", -1, sic.maxBufferedDocs);\n    ++numDefaultsTested; assertEquals(\"default maxMergeDocs\", -1, sic.maxMergeDocs);\n    ++numDefaultsTested; assertEquals(\"default mergeFactor\", -1, sic.mergeFactor);\n\n    ++numDefaultsTested; assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    ++numDefaultsTested; assertEquals(\"default writeLockTimeout\", -1, sic.writeLockTimeout);\n    ++numDefaultsTested; assertEquals(\"default LockType\", DirectoryFactory.LOCK_TYPE_NATIVE, sic.lockType);\n\n    ++numDefaultsTested; assertEquals(\"default infoStream\", InfoStream.NO_OUTPUT, sic.infoStream);\n\n    // mergePolicyInfo and mergePolicyFactoryInfo are mutually exclusive\n    // so ++ count them only once for both instead of individually\n    ++numDefaultsTested; ++numNullDefaults;\n    assertNull(\"default mergePolicyInfo\", sic.mergePolicyInfo);\n    assertNull(\"default mergePolicyFactoryInfo\", sic.mergePolicyFactoryInfo);\n\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergeSchedulerInfo\", sic.mergeSchedulerInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergedSegmentWarmerInfo\", sic.mergedSegmentWarmerInfo);\n\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(\"schema.xml\", solrConfig);\n    IndexWriterConfig iwc = sic.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TieredMergePolicy\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n\n    assertNull(\"non-null mergedSegmentWarmer\", iwc.getMergedSegmentWarmer());\n\n    final int numDefaultsMapped = sic.toMap().size();\n    assertEquals(\"numDefaultsTested vs. numDefaultsMapped+numNullDefaults =\"+sic.toMap().keySet(), numDefaultsTested, numDefaultsMapped+numNullDefaults);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f7df713a0f1e310d18dd8da91c89a07a13f86f8","date":1483441921,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","sourceNew":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    int numDefaultsTested = 0;\n    int numNullDefaults = 0;\n\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(TEST_PATH().resolve(\"collection1\")), \"solrconfig-defaults.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n\n    ++numDefaultsTested; assertEquals(\"default useCompoundFile\", false, sic.getUseCompoundFile());\n\n    ++numDefaultsTested; assertEquals(\"default maxBufferedDocs\", -1, sic.maxBufferedDocs);\n    ++numDefaultsTested; assertEquals(\"default maxMergeDocs\", -1, sic.maxMergeDocs);\n    ++numDefaultsTested; assertEquals(\"default mergeFactor\", -1, sic.mergeFactor);\n\n    ++numDefaultsTested; assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    ++numDefaultsTested; assertEquals(\"default writeLockTimeout\", -1, sic.writeLockTimeout);\n    ++numDefaultsTested; assertEquals(\"default LockType\", DirectoryFactory.LOCK_TYPE_NATIVE, sic.lockType);\n\n    ++numDefaultsTested; assertEquals(\"default infoStream\", InfoStream.NO_OUTPUT, sic.infoStream);\n\n    ++numDefaultsTested; assertNotNull(\"default metrics\", sic.metricsInfo);\n\n    // mergePolicyInfo and mergePolicyFactoryInfo are mutually exclusive\n    // so ++ count them only once for both instead of individually\n    ++numDefaultsTested; ++numNullDefaults;\n    assertNull(\"default mergePolicyInfo\", sic.mergePolicyInfo);\n    assertNull(\"default mergePolicyFactoryInfo\", sic.mergePolicyFactoryInfo);\n\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergeSchedulerInfo\", sic.mergeSchedulerInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergedSegmentWarmerInfo\", sic.mergedSegmentWarmerInfo);\n\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(\"schema.xml\", solrConfig);\n    IndexWriterConfig iwc = sic.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TieredMergePolicy\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n\n    assertNull(\"non-null mergedSegmentWarmer\", iwc.getMergedSegmentWarmer());\n\n    final int numDefaultsMapped = sic.toMap(new LinkedHashMap<>()).size();\n    assertEquals(\"numDefaultsTested vs. numDefaultsMapped+numNullDefaults =\"+sic.toMap(new LinkedHashMap<>()).keySet(), numDefaultsTested, numDefaultsMapped+numNullDefaults);\n  }\n\n","sourceOld":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    int numDefaultsTested = 0;\n    int numNullDefaults = 0;\n\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(TEST_PATH().resolve(\"collection1\")), \"solrconfig-defaults.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n\n    ++numDefaultsTested; assertEquals(\"default useCompoundFile\", false, sic.getUseCompoundFile());\n\n    ++numDefaultsTested; assertEquals(\"default maxBufferedDocs\", -1, sic.maxBufferedDocs);\n    ++numDefaultsTested; assertEquals(\"default maxMergeDocs\", -1, sic.maxMergeDocs);\n    ++numDefaultsTested; assertEquals(\"default mergeFactor\", -1, sic.mergeFactor);\n\n    ++numDefaultsTested; assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    ++numDefaultsTested; assertEquals(\"default writeLockTimeout\", -1, sic.writeLockTimeout);\n    ++numDefaultsTested; assertEquals(\"default LockType\", DirectoryFactory.LOCK_TYPE_NATIVE, sic.lockType);\n\n    ++numDefaultsTested; assertEquals(\"default infoStream\", InfoStream.NO_OUTPUT, sic.infoStream);\n\n    // mergePolicyInfo and mergePolicyFactoryInfo are mutually exclusive\n    // so ++ count them only once for both instead of individually\n    ++numDefaultsTested; ++numNullDefaults;\n    assertNull(\"default mergePolicyInfo\", sic.mergePolicyInfo);\n    assertNull(\"default mergePolicyFactoryInfo\", sic.mergePolicyFactoryInfo);\n\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergeSchedulerInfo\", sic.mergeSchedulerInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergedSegmentWarmerInfo\", sic.mergedSegmentWarmerInfo);\n\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(\"schema.xml\", solrConfig);\n    IndexWriterConfig iwc = sic.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TieredMergePolicy\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n\n    assertNull(\"non-null mergedSegmentWarmer\", iwc.getMergedSegmentWarmer());\n\n    final int numDefaultsMapped = sic.toMap(new LinkedHashMap<>()).size();\n    assertEquals(\"numDefaultsTested vs. numDefaultsMapped+numNullDefaults =\"+sic.toMap(new LinkedHashMap<>()).keySet(), numDefaultsTested, numDefaultsMapped+numNullDefaults);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","sourceNew":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    int numDefaultsTested = 0;\n    int numNullDefaults = 0;\n\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(TEST_PATH().resolve(\"collection1\")), \"solrconfig-defaults.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n\n    ++numDefaultsTested; assertEquals(\"default useCompoundFile\", false, sic.getUseCompoundFile());\n\n    ++numDefaultsTested; assertEquals(\"default maxBufferedDocs\", -1, sic.maxBufferedDocs);\n    ++numDefaultsTested; assertEquals(\"default maxMergeDocs\", -1, sic.maxMergeDocs);\n    ++numDefaultsTested; assertEquals(\"default mergeFactor\", -1, sic.mergeFactor);\n\n    ++numDefaultsTested; assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    ++numDefaultsTested; assertEquals(\"default writeLockTimeout\", -1, sic.writeLockTimeout);\n    ++numDefaultsTested; assertEquals(\"default LockType\", DirectoryFactory.LOCK_TYPE_NATIVE, sic.lockType);\n\n    ++numDefaultsTested; assertEquals(\"default infoStream\", InfoStream.NO_OUTPUT, sic.infoStream);\n\n    ++numDefaultsTested; assertNotNull(\"default metrics\", sic.metricsInfo);\n\n    // mergePolicyInfo and mergePolicyFactoryInfo are mutually exclusive\n    // so ++ count them only once for both instead of individually\n    ++numDefaultsTested; ++numNullDefaults;\n    assertNull(\"default mergePolicyInfo\", sic.mergePolicyInfo);\n    assertNull(\"default mergePolicyFactoryInfo\", sic.mergePolicyFactoryInfo);\n\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergeSchedulerInfo\", sic.mergeSchedulerInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergedSegmentWarmerInfo\", sic.mergedSegmentWarmerInfo);\n\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(\"schema.xml\", solrConfig);\n    IndexWriterConfig iwc = sic.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TieredMergePolicy\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n\n    assertNull(\"non-null mergedSegmentWarmer\", iwc.getMergedSegmentWarmer());\n\n    final int numDefaultsMapped = sic.toMap(new LinkedHashMap<>()).size();\n    assertEquals(\"numDefaultsTested vs. numDefaultsMapped+numNullDefaults =\"+sic.toMap(new LinkedHashMap<>()).keySet(), numDefaultsTested, numDefaultsMapped+numNullDefaults);\n  }\n\n","sourceOld":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    int numDefaultsTested = 0;\n    int numNullDefaults = 0;\n\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(TEST_PATH().resolve(\"collection1\")), \"solrconfig-defaults.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n\n    ++numDefaultsTested; assertEquals(\"default useCompoundFile\", false, sic.getUseCompoundFile());\n\n    ++numDefaultsTested; assertEquals(\"default maxBufferedDocs\", -1, sic.maxBufferedDocs);\n    ++numDefaultsTested; assertEquals(\"default maxMergeDocs\", -1, sic.maxMergeDocs);\n    ++numDefaultsTested; assertEquals(\"default mergeFactor\", -1, sic.mergeFactor);\n\n    ++numDefaultsTested; assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    ++numDefaultsTested; assertEquals(\"default writeLockTimeout\", -1, sic.writeLockTimeout);\n    ++numDefaultsTested; assertEquals(\"default LockType\", DirectoryFactory.LOCK_TYPE_NATIVE, sic.lockType);\n\n    ++numDefaultsTested; assertEquals(\"default infoStream\", InfoStream.NO_OUTPUT, sic.infoStream);\n\n    // mergePolicyInfo and mergePolicyFactoryInfo are mutually exclusive\n    // so ++ count them only once for both instead of individually\n    ++numDefaultsTested; ++numNullDefaults;\n    assertNull(\"default mergePolicyInfo\", sic.mergePolicyInfo);\n    assertNull(\"default mergePolicyFactoryInfo\", sic.mergePolicyFactoryInfo);\n\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergeSchedulerInfo\", sic.mergeSchedulerInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergedSegmentWarmerInfo\", sic.mergedSegmentWarmerInfo);\n\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(\"schema.xml\", solrConfig);\n    IndexWriterConfig iwc = sic.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TieredMergePolicy\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n\n    assertNull(\"non-null mergedSegmentWarmer\", iwc.getMergedSegmentWarmer());\n\n    final int numDefaultsMapped = sic.toMap(new LinkedHashMap<>()).size();\n    assertEquals(\"numDefaultsTested vs. numDefaultsMapped+numNullDefaults =\"+sic.toMap(new LinkedHashMap<>()).keySet(), numDefaultsTested, numDefaultsMapped+numNullDefaults);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70d848516a5d0b23d183a2ceb4f4fb8634205956","date":1496408348,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","sourceNew":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    int numDefaultsTested = 0;\n    int numNullDefaults = 0;\n\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(TEST_PATH().resolve(\"collection1\")), \"solrconfig-defaults.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n\n    ++numDefaultsTested; assertEquals(\"default useCompoundFile\", false, sic.useCompoundFile);\n\n    ++numDefaultsTested; assertEquals(\"default maxBufferedDocs\", -1, sic.maxBufferedDocs);\n\n    ++numDefaultsTested; assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    ++numDefaultsTested; assertEquals(\"default writeLockTimeout\", -1, sic.writeLockTimeout);\n    ++numDefaultsTested; assertEquals(\"default LockType\", DirectoryFactory.LOCK_TYPE_NATIVE, sic.lockType);\n\n    ++numDefaultsTested; assertEquals(\"default infoStream\", InfoStream.NO_OUTPUT, sic.infoStream);\n\n    ++numDefaultsTested; assertNotNull(\"default metrics\", sic.metricsInfo);\n\n    ++numDefaultsTested; ++numNullDefaults;\n    assertNull(\"default mergePolicyFactoryInfo\", sic.mergePolicyFactoryInfo);\n\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergeSchedulerInfo\", sic.mergeSchedulerInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergedSegmentWarmerInfo\", sic.mergedSegmentWarmerInfo);\n\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(\"schema.xml\", solrConfig);\n    IndexWriterConfig iwc = sic.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TieredMergePolicy\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n\n    assertNull(\"non-null mergedSegmentWarmer\", iwc.getMergedSegmentWarmer());\n\n    final int numDefaultsMapped = sic.toMap(new LinkedHashMap<>()).size();\n    assertEquals(\"numDefaultsTested vs. numDefaultsMapped+numNullDefaults =\"+sic.toMap(new LinkedHashMap<>()).keySet(), numDefaultsTested, numDefaultsMapped+numNullDefaults);\n  }\n\n","sourceOld":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    int numDefaultsTested = 0;\n    int numNullDefaults = 0;\n\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(TEST_PATH().resolve(\"collection1\")), \"solrconfig-defaults.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n\n    ++numDefaultsTested; assertEquals(\"default useCompoundFile\", false, sic.getUseCompoundFile());\n\n    ++numDefaultsTested; assertEquals(\"default maxBufferedDocs\", -1, sic.maxBufferedDocs);\n    ++numDefaultsTested; assertEquals(\"default maxMergeDocs\", -1, sic.maxMergeDocs);\n    ++numDefaultsTested; assertEquals(\"default mergeFactor\", -1, sic.mergeFactor);\n\n    ++numDefaultsTested; assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    ++numDefaultsTested; assertEquals(\"default writeLockTimeout\", -1, sic.writeLockTimeout);\n    ++numDefaultsTested; assertEquals(\"default LockType\", DirectoryFactory.LOCK_TYPE_NATIVE, sic.lockType);\n\n    ++numDefaultsTested; assertEquals(\"default infoStream\", InfoStream.NO_OUTPUT, sic.infoStream);\n\n    ++numDefaultsTested; assertNotNull(\"default metrics\", sic.metricsInfo);\n\n    // mergePolicyInfo and mergePolicyFactoryInfo are mutually exclusive\n    // so ++ count them only once for both instead of individually\n    ++numDefaultsTested; ++numNullDefaults;\n    assertNull(\"default mergePolicyInfo\", sic.mergePolicyInfo);\n    assertNull(\"default mergePolicyFactoryInfo\", sic.mergePolicyFactoryInfo);\n\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergeSchedulerInfo\", sic.mergeSchedulerInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergedSegmentWarmerInfo\", sic.mergedSegmentWarmerInfo);\n\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(\"schema.xml\", solrConfig);\n    IndexWriterConfig iwc = sic.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TieredMergePolicy\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n\n    assertNull(\"non-null mergedSegmentWarmer\", iwc.getMergedSegmentWarmer());\n\n    final int numDefaultsMapped = sic.toMap(new LinkedHashMap<>()).size();\n    assertEquals(\"numDefaultsTested vs. numDefaultsMapped+numNullDefaults =\"+sic.toMap(new LinkedHashMap<>()).keySet(), numDefaultsTested, numDefaultsMapped+numNullDefaults);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","sourceNew":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    int numDefaultsTested = 0;\n    int numNullDefaults = 0;\n\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(TEST_PATH().resolve(\"collection1\")), \"solrconfig-defaults.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n\n    ++numDefaultsTested; assertEquals(\"default useCompoundFile\", false, sic.useCompoundFile);\n\n    ++numDefaultsTested; assertEquals(\"default maxBufferedDocs\", -1, sic.maxBufferedDocs);\n\n    ++numDefaultsTested; assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    ++numDefaultsTested; assertEquals(\"default writeLockTimeout\", -1, sic.writeLockTimeout);\n    ++numDefaultsTested; assertEquals(\"default LockType\", DirectoryFactory.LOCK_TYPE_NATIVE, sic.lockType);\n\n    ++numDefaultsTested; assertEquals(\"default infoStream\", InfoStream.NO_OUTPUT, sic.infoStream);\n\n    ++numDefaultsTested; assertNotNull(\"default metrics\", sic.metricsInfo);\n\n    ++numDefaultsTested; ++numNullDefaults;\n    assertNull(\"default mergePolicyFactoryInfo\", sic.mergePolicyFactoryInfo);\n\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergeSchedulerInfo\", sic.mergeSchedulerInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergedSegmentWarmerInfo\", sic.mergedSegmentWarmerInfo);\n\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(\"schema.xml\", solrConfig);\n    IndexWriterConfig iwc = sic.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TieredMergePolicy\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n\n    assertNull(\"non-null mergedSegmentWarmer\", iwc.getMergedSegmentWarmer());\n\n    final int numDefaultsMapped = sic.toMap(new LinkedHashMap<>()).size();\n    assertEquals(\"numDefaultsTested vs. numDefaultsMapped+numNullDefaults =\"+sic.toMap(new LinkedHashMap<>()).keySet(), numDefaultsTested, numDefaultsMapped+numNullDefaults);\n  }\n\n","sourceOld":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    int numDefaultsTested = 0;\n    int numNullDefaults = 0;\n\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(TEST_PATH().resolve(\"collection1\")), \"solrconfig-defaults.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n\n    ++numDefaultsTested; assertEquals(\"default useCompoundFile\", false, sic.getUseCompoundFile());\n\n    ++numDefaultsTested; assertEquals(\"default maxBufferedDocs\", -1, sic.maxBufferedDocs);\n    ++numDefaultsTested; assertEquals(\"default maxMergeDocs\", -1, sic.maxMergeDocs);\n    ++numDefaultsTested; assertEquals(\"default mergeFactor\", -1, sic.mergeFactor);\n\n    ++numDefaultsTested; assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    ++numDefaultsTested; assertEquals(\"default writeLockTimeout\", -1, sic.writeLockTimeout);\n    ++numDefaultsTested; assertEquals(\"default LockType\", DirectoryFactory.LOCK_TYPE_NATIVE, sic.lockType);\n\n    ++numDefaultsTested; assertEquals(\"default infoStream\", InfoStream.NO_OUTPUT, sic.infoStream);\n\n    ++numDefaultsTested; assertNotNull(\"default metrics\", sic.metricsInfo);\n\n    // mergePolicyInfo and mergePolicyFactoryInfo are mutually exclusive\n    // so ++ count them only once for both instead of individually\n    ++numDefaultsTested; ++numNullDefaults;\n    assertNull(\"default mergePolicyInfo\", sic.mergePolicyInfo);\n    assertNull(\"default mergePolicyFactoryInfo\", sic.mergePolicyFactoryInfo);\n\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergeSchedulerInfo\", sic.mergeSchedulerInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergedSegmentWarmerInfo\", sic.mergedSegmentWarmerInfo);\n\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(\"schema.xml\", solrConfig);\n    IndexWriterConfig iwc = sic.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TieredMergePolicy\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n\n    assertNull(\"non-null mergedSegmentWarmer\", iwc.getMergedSegmentWarmer());\n\n    final int numDefaultsMapped = sic.toMap(new LinkedHashMap<>()).size();\n    assertEquals(\"numDefaultsTested vs. numDefaultsMapped+numNullDefaults =\"+sic.toMap(new LinkedHashMap<>()).keySet(), numDefaultsTested, numDefaultsMapped+numNullDefaults);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","sourceNew":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    int numDefaultsTested = 0;\n    int numNullDefaults = 0;\n\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(TEST_PATH().resolve(\"collection1\")), \"solrconfig-defaults.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n\n    ++numDefaultsTested; assertEquals(\"default useCompoundFile\", false, sic.useCompoundFile);\n\n    ++numDefaultsTested; assertEquals(\"default maxBufferedDocs\", -1, sic.maxBufferedDocs);\n\n    ++numDefaultsTested; assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    ++numDefaultsTested; assertEquals(\"default writeLockTimeout\", -1, sic.writeLockTimeout);\n    ++numDefaultsTested; assertEquals(\"default LockType\", DirectoryFactory.LOCK_TYPE_NATIVE, sic.lockType);\n\n    ++numDefaultsTested; assertEquals(\"default infoStream\", InfoStream.NO_OUTPUT, sic.infoStream);\n\n    ++numDefaultsTested; assertNotNull(\"default metrics\", sic.metricsInfo);\n\n    ++numDefaultsTested; ++numNullDefaults;\n    assertNull(\"default mergePolicyFactoryInfo\", sic.mergePolicyFactoryInfo);\n\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergeSchedulerInfo\", sic.mergeSchedulerInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergedSegmentWarmerInfo\", sic.mergedSegmentWarmerInfo);\n\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(\"schema.xml\", solrConfig);\n    IndexWriterConfig iwc = sic.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TieredMergePolicy\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n\n    assertNull(\"non-null mergedSegmentWarmer\", iwc.getMergedSegmentWarmer());\n\n    final int numDefaultsMapped = sic.toMap(new LinkedHashMap<>()).size();\n    assertEquals(\"numDefaultsTested vs. numDefaultsMapped+numNullDefaults =\"+sic.toMap(new LinkedHashMap<>()).keySet(), numDefaultsTested, numDefaultsMapped+numNullDefaults);\n  }\n\n","sourceOld":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    int numDefaultsTested = 0;\n    int numNullDefaults = 0;\n\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(TEST_PATH().resolve(\"collection1\")), \"solrconfig-defaults.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n\n    ++numDefaultsTested; assertEquals(\"default useCompoundFile\", false, sic.getUseCompoundFile());\n\n    ++numDefaultsTested; assertEquals(\"default maxBufferedDocs\", -1, sic.maxBufferedDocs);\n    ++numDefaultsTested; assertEquals(\"default maxMergeDocs\", -1, sic.maxMergeDocs);\n    ++numDefaultsTested; assertEquals(\"default mergeFactor\", -1, sic.mergeFactor);\n\n    ++numDefaultsTested; assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    ++numDefaultsTested; assertEquals(\"default writeLockTimeout\", -1, sic.writeLockTimeout);\n    ++numDefaultsTested; assertEquals(\"default LockType\", DirectoryFactory.LOCK_TYPE_NATIVE, sic.lockType);\n\n    ++numDefaultsTested; assertEquals(\"default infoStream\", InfoStream.NO_OUTPUT, sic.infoStream);\n\n    ++numDefaultsTested; assertNotNull(\"default metrics\", sic.metricsInfo);\n\n    // mergePolicyInfo and mergePolicyFactoryInfo are mutually exclusive\n    // so ++ count them only once for both instead of individually\n    ++numDefaultsTested; ++numNullDefaults;\n    assertNull(\"default mergePolicyInfo\", sic.mergePolicyInfo);\n    assertNull(\"default mergePolicyFactoryInfo\", sic.mergePolicyFactoryInfo);\n\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergeSchedulerInfo\", sic.mergeSchedulerInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergedSegmentWarmerInfo\", sic.mergedSegmentWarmerInfo);\n\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(\"schema.xml\", solrConfig);\n    IndexWriterConfig iwc = sic.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TieredMergePolicy\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n\n    assertNull(\"non-null mergedSegmentWarmer\", iwc.getMergedSegmentWarmer());\n\n    final int numDefaultsMapped = sic.toMap(new LinkedHashMap<>()).size();\n    assertEquals(\"numDefaultsTested vs. numDefaultsMapped+numNullDefaults =\"+sic.toMap(new LinkedHashMap<>()).keySet(), numDefaultsTested, numDefaultsMapped+numNullDefaults);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"151c786e439f34edb91b77d019109463ab0a6548","date":1562001139,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","sourceNew":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    int numDefaultsTested = 0;\n    int numNullDefaults = 0;\n\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(TEST_PATH().resolve(\"collection1\")), \"solrconfig-defaults.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n\n    ++numDefaultsTested; assertEquals(\"default useCompoundFile\", false, sic.useCompoundFile);\n\n    ++numDefaultsTested; assertEquals(\"default maxBufferedDocs\", -1, sic.maxBufferedDocs);\n\n    ++numDefaultsTested; assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    ++numDefaultsTested; assertEquals(\"default ramPerThreadHardLimitMB\", -1, sic.ramPerThreadHardLimitMB);\n    ++numDefaultsTested; assertEquals(\"default writeLockTimeout\", -1, sic.writeLockTimeout);\n    ++numDefaultsTested; assertEquals(\"default LockType\", DirectoryFactory.LOCK_TYPE_NATIVE, sic.lockType);\n\n    ++numDefaultsTested; assertEquals(\"default infoStream\", InfoStream.NO_OUTPUT, sic.infoStream);\n\n    ++numDefaultsTested; assertNotNull(\"default metrics\", sic.metricsInfo);\n\n    ++numDefaultsTested; ++numNullDefaults;\n    assertNull(\"default mergePolicyFactoryInfo\", sic.mergePolicyFactoryInfo);\n\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergeSchedulerInfo\", sic.mergeSchedulerInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergedSegmentWarmerInfo\", sic.mergedSegmentWarmerInfo);\n\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(\"schema.xml\", solrConfig);\n    IndexWriterConfig iwc = sic.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TieredMergePolicy\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n\n    assertNull(\"non-null mergedSegmentWarmer\", iwc.getMergedSegmentWarmer());\n\n    final int numDefaultsMapped = sic.toMap(new LinkedHashMap<>()).size();\n    assertEquals(\"numDefaultsTested vs. numDefaultsMapped+numNullDefaults =\"+sic.toMap(new LinkedHashMap<>()).keySet(), numDefaultsTested, numDefaultsMapped+numNullDefaults);\n  }\n\n","sourceOld":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    int numDefaultsTested = 0;\n    int numNullDefaults = 0;\n\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(TEST_PATH().resolve(\"collection1\")), \"solrconfig-defaults.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n\n    ++numDefaultsTested; assertEquals(\"default useCompoundFile\", false, sic.useCompoundFile);\n\n    ++numDefaultsTested; assertEquals(\"default maxBufferedDocs\", -1, sic.maxBufferedDocs);\n\n    ++numDefaultsTested; assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    ++numDefaultsTested; assertEquals(\"default writeLockTimeout\", -1, sic.writeLockTimeout);\n    ++numDefaultsTested; assertEquals(\"default LockType\", DirectoryFactory.LOCK_TYPE_NATIVE, sic.lockType);\n\n    ++numDefaultsTested; assertEquals(\"default infoStream\", InfoStream.NO_OUTPUT, sic.infoStream);\n\n    ++numDefaultsTested; assertNotNull(\"default metrics\", sic.metricsInfo);\n\n    ++numDefaultsTested; ++numNullDefaults;\n    assertNull(\"default mergePolicyFactoryInfo\", sic.mergePolicyFactoryInfo);\n\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergeSchedulerInfo\", sic.mergeSchedulerInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergedSegmentWarmerInfo\", sic.mergedSegmentWarmerInfo);\n\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(\"schema.xml\", solrConfig);\n    IndexWriterConfig iwc = sic.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TieredMergePolicy\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n\n    assertNull(\"non-null mergedSegmentWarmer\", iwc.getMergedSegmentWarmer());\n\n    final int numDefaultsMapped = sic.toMap(new LinkedHashMap<>()).size();\n    assertEquals(\"numDefaultsTested vs. numDefaultsMapped+numNullDefaults =\"+sic.toMap(new LinkedHashMap<>()).keySet(), numDefaultsTested, numDefaultsMapped+numNullDefaults);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad8024a22d8bd3a09b7f618f41cdfe117ae6fe96","date":1576143009,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","sourceNew":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    int numDefaultsTested = 0;\n    int numNullDefaults = 0;\n\n    SolrConfig sc = new SolrConfig(TEST_PATH().resolve(\"collection1\"), \"solrconfig-defaults.xml\", null, true);\n    SolrIndexConfig sic = sc.indexConfig;\n\n    ++numDefaultsTested; assertEquals(\"default useCompoundFile\", false, sic.useCompoundFile);\n\n    ++numDefaultsTested; assertEquals(\"default maxBufferedDocs\", -1, sic.maxBufferedDocs);\n\n    ++numDefaultsTested; assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    ++numDefaultsTested; assertEquals(\"default ramPerThreadHardLimitMB\", -1, sic.ramPerThreadHardLimitMB);\n    ++numDefaultsTested; assertEquals(\"default writeLockTimeout\", -1, sic.writeLockTimeout);\n    ++numDefaultsTested; assertEquals(\"default LockType\", DirectoryFactory.LOCK_TYPE_NATIVE, sic.lockType);\n\n    ++numDefaultsTested; assertEquals(\"default infoStream\", InfoStream.NO_OUTPUT, sic.infoStream);\n\n    ++numDefaultsTested; assertNotNull(\"default metrics\", sic.metricsInfo);\n\n    ++numDefaultsTested; ++numNullDefaults;\n    assertNull(\"default mergePolicyFactoryInfo\", sic.mergePolicyFactoryInfo);\n\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergeSchedulerInfo\", sic.mergeSchedulerInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergedSegmentWarmerInfo\", sic.mergedSegmentWarmerInfo);\n\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(\"schema.xml\", solrConfig);\n    IndexWriterConfig iwc = sic.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TieredMergePolicy\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n\n    assertNull(\"non-null mergedSegmentWarmer\", iwc.getMergedSegmentWarmer());\n\n    final int numDefaultsMapped = sic.toMap(new LinkedHashMap<>()).size();\n    assertEquals(\"numDefaultsTested vs. numDefaultsMapped+numNullDefaults =\"+sic.toMap(new LinkedHashMap<>()).keySet(), numDefaultsTested, numDefaultsMapped+numNullDefaults);\n  }\n\n","sourceOld":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    int numDefaultsTested = 0;\n    int numNullDefaults = 0;\n\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(TEST_PATH().resolve(\"collection1\")), \"solrconfig-defaults.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n\n    ++numDefaultsTested; assertEquals(\"default useCompoundFile\", false, sic.useCompoundFile);\n\n    ++numDefaultsTested; assertEquals(\"default maxBufferedDocs\", -1, sic.maxBufferedDocs);\n\n    ++numDefaultsTested; assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    ++numDefaultsTested; assertEquals(\"default ramPerThreadHardLimitMB\", -1, sic.ramPerThreadHardLimitMB);\n    ++numDefaultsTested; assertEquals(\"default writeLockTimeout\", -1, sic.writeLockTimeout);\n    ++numDefaultsTested; assertEquals(\"default LockType\", DirectoryFactory.LOCK_TYPE_NATIVE, sic.lockType);\n\n    ++numDefaultsTested; assertEquals(\"default infoStream\", InfoStream.NO_OUTPUT, sic.infoStream);\n\n    ++numDefaultsTested; assertNotNull(\"default metrics\", sic.metricsInfo);\n\n    ++numDefaultsTested; ++numNullDefaults;\n    assertNull(\"default mergePolicyFactoryInfo\", sic.mergePolicyFactoryInfo);\n\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergeSchedulerInfo\", sic.mergeSchedulerInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergedSegmentWarmerInfo\", sic.mergedSegmentWarmerInfo);\n\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(\"schema.xml\", solrConfig);\n    IndexWriterConfig iwc = sic.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TieredMergePolicy\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n\n    assertNull(\"non-null mergedSegmentWarmer\", iwc.getMergedSegmentWarmer());\n\n    final int numDefaultsMapped = sic.toMap(new LinkedHashMap<>()).size();\n    assertEquals(\"numDefaultsTested vs. numDefaultsMapped+numNullDefaults =\"+sic.toMap(new LinkedHashMap<>()).keySet(), numDefaultsTested, numDefaultsMapped+numNullDefaults);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df724d84dab24a0cc54bec95a8680867adc7f171","date":1576156608,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","sourceNew":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    int numDefaultsTested = 0;\n    int numNullDefaults = 0;\n\n    SolrConfig sc = new SolrConfig(TEST_PATH().resolve(\"collection1\"), \"solrconfig-defaults.xml\", null, true);\n    SolrIndexConfig sic = sc.indexConfig;\n\n    ++numDefaultsTested; assertEquals(\"default useCompoundFile\", false, sic.useCompoundFile);\n\n    ++numDefaultsTested; assertEquals(\"default maxBufferedDocs\", -1, sic.maxBufferedDocs);\n\n    ++numDefaultsTested; assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    ++numDefaultsTested; assertEquals(\"default ramPerThreadHardLimitMB\", -1, sic.ramPerThreadHardLimitMB);\n    ++numDefaultsTested; assertEquals(\"default writeLockTimeout\", -1, sic.writeLockTimeout);\n    ++numDefaultsTested; assertEquals(\"default LockType\", DirectoryFactory.LOCK_TYPE_NATIVE, sic.lockType);\n\n    ++numDefaultsTested; assertEquals(\"default infoStream\", InfoStream.NO_OUTPUT, sic.infoStream);\n\n    ++numDefaultsTested; assertNotNull(\"default metrics\", sic.metricsInfo);\n\n    ++numDefaultsTested; ++numNullDefaults;\n    assertNull(\"default mergePolicyFactoryInfo\", sic.mergePolicyFactoryInfo);\n\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergeSchedulerInfo\", sic.mergeSchedulerInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergedSegmentWarmerInfo\", sic.mergedSegmentWarmerInfo);\n\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(\"schema.xml\", solrConfig);\n    IndexWriterConfig iwc = sic.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TieredMergePolicy\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n\n    assertNull(\"non-null mergedSegmentWarmer\", iwc.getMergedSegmentWarmer());\n\n    final int numDefaultsMapped = sic.toMap(new LinkedHashMap<>()).size();\n    assertEquals(\"numDefaultsTested vs. numDefaultsMapped+numNullDefaults =\"+sic.toMap(new LinkedHashMap<>()).keySet(), numDefaultsTested, numDefaultsMapped+numNullDefaults);\n  }\n\n","sourceOld":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    int numDefaultsTested = 0;\n    int numNullDefaults = 0;\n\n    SolrConfig sc = new SolrConfig(new SolrResourceLoader(TEST_PATH().resolve(\"collection1\")), \"solrconfig-defaults.xml\", null);\n    SolrIndexConfig sic = sc.indexConfig;\n\n    ++numDefaultsTested; assertEquals(\"default useCompoundFile\", false, sic.useCompoundFile);\n\n    ++numDefaultsTested; assertEquals(\"default maxBufferedDocs\", -1, sic.maxBufferedDocs);\n\n    ++numDefaultsTested; assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    ++numDefaultsTested; assertEquals(\"default ramPerThreadHardLimitMB\", -1, sic.ramPerThreadHardLimitMB);\n    ++numDefaultsTested; assertEquals(\"default writeLockTimeout\", -1, sic.writeLockTimeout);\n    ++numDefaultsTested; assertEquals(\"default LockType\", DirectoryFactory.LOCK_TYPE_NATIVE, sic.lockType);\n\n    ++numDefaultsTested; assertEquals(\"default infoStream\", InfoStream.NO_OUTPUT, sic.infoStream);\n\n    ++numDefaultsTested; assertNotNull(\"default metrics\", sic.metricsInfo);\n\n    ++numDefaultsTested; ++numNullDefaults;\n    assertNull(\"default mergePolicyFactoryInfo\", sic.mergePolicyFactoryInfo);\n\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergeSchedulerInfo\", sic.mergeSchedulerInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergedSegmentWarmerInfo\", sic.mergedSegmentWarmerInfo);\n\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(\"schema.xml\", solrConfig);\n    IndexWriterConfig iwc = sic.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TieredMergePolicy\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n\n    assertNull(\"non-null mergedSegmentWarmer\", iwc.getMergedSegmentWarmer());\n\n    final int numDefaultsMapped = sic.toMap(new LinkedHashMap<>()).size();\n    assertEquals(\"numDefaultsTested vs. numDefaultsMapped+numNullDefaults =\"+sic.toMap(new LinkedHashMap<>()).keySet(), numDefaultsTested, numDefaultsMapped+numNullDefaults);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","date":1583932828,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","sourceNew":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    int numDefaultsTested = 0;\n    int numNullDefaults = 0;\n\n    SolrConfig sc = new SolrConfig(TEST_PATH().resolve(\"collection1\"), \"solrconfig-defaults.xml\");\n    SolrIndexConfig sic = sc.indexConfig;\n\n    ++numDefaultsTested; assertEquals(\"default useCompoundFile\", false, sic.useCompoundFile);\n\n    ++numDefaultsTested; assertEquals(\"default maxBufferedDocs\", -1, sic.maxBufferedDocs);\n\n    ++numDefaultsTested; assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    ++numDefaultsTested; assertEquals(\"default ramPerThreadHardLimitMB\", -1, sic.ramPerThreadHardLimitMB);\n    ++numDefaultsTested; assertEquals(\"default writeLockTimeout\", -1, sic.writeLockTimeout);\n    ++numDefaultsTested; assertEquals(\"default LockType\", DirectoryFactory.LOCK_TYPE_NATIVE, sic.lockType);\n\n    ++numDefaultsTested; assertEquals(\"default infoStream\", InfoStream.NO_OUTPUT, sic.infoStream);\n\n    ++numDefaultsTested; assertNotNull(\"default metrics\", sic.metricsInfo);\n\n    ++numDefaultsTested; ++numNullDefaults;\n    assertNull(\"default mergePolicyFactoryInfo\", sic.mergePolicyFactoryInfo);\n\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergeSchedulerInfo\", sic.mergeSchedulerInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergedSegmentWarmerInfo\", sic.mergedSegmentWarmerInfo);\n\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(\"schema.xml\", solrConfig);\n    IndexWriterConfig iwc = sic.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TieredMergePolicy\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n\n    assertNull(\"non-null mergedSegmentWarmer\", iwc.getMergedSegmentWarmer());\n\n    final int numDefaultsMapped = sic.toMap(new LinkedHashMap<>()).size();\n    assertEquals(\"numDefaultsTested vs. numDefaultsMapped+numNullDefaults =\"+sic.toMap(new LinkedHashMap<>()).keySet(), numDefaultsTested, numDefaultsMapped+numNullDefaults);\n  }\n\n","sourceOld":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    int numDefaultsTested = 0;\n    int numNullDefaults = 0;\n\n    SolrConfig sc = new SolrConfig(TEST_PATH().resolve(\"collection1\"), \"solrconfig-defaults.xml\", null, true);\n    SolrIndexConfig sic = sc.indexConfig;\n\n    ++numDefaultsTested; assertEquals(\"default useCompoundFile\", false, sic.useCompoundFile);\n\n    ++numDefaultsTested; assertEquals(\"default maxBufferedDocs\", -1, sic.maxBufferedDocs);\n\n    ++numDefaultsTested; assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    ++numDefaultsTested; assertEquals(\"default ramPerThreadHardLimitMB\", -1, sic.ramPerThreadHardLimitMB);\n    ++numDefaultsTested; assertEquals(\"default writeLockTimeout\", -1, sic.writeLockTimeout);\n    ++numDefaultsTested; assertEquals(\"default LockType\", DirectoryFactory.LOCK_TYPE_NATIVE, sic.lockType);\n\n    ++numDefaultsTested; assertEquals(\"default infoStream\", InfoStream.NO_OUTPUT, sic.infoStream);\n\n    ++numDefaultsTested; assertNotNull(\"default metrics\", sic.metricsInfo);\n\n    ++numDefaultsTested; ++numNullDefaults;\n    assertNull(\"default mergePolicyFactoryInfo\", sic.mergePolicyFactoryInfo);\n\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergeSchedulerInfo\", sic.mergeSchedulerInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergedSegmentWarmerInfo\", sic.mergedSegmentWarmerInfo);\n\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(\"schema.xml\", solrConfig);\n    IndexWriterConfig iwc = sic.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TieredMergePolicy\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n\n    assertNull(\"non-null mergedSegmentWarmer\", iwc.getMergedSegmentWarmer());\n\n    final int numDefaultsMapped = sic.toMap(new LinkedHashMap<>()).size();\n    assertEquals(\"numDefaultsTested vs. numDefaultsMapped+numNullDefaults =\"+sic.toMap(new LinkedHashMap<>()).keySet(), numDefaultsTested, numDefaultsMapped+numNullDefaults);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7312d16201333086e0df34f3b750f01bac319f5","date":1596840544,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","sourceNew":"  // If defaults change, add test methods to cover each version\n  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-14582\")\n  public void testDefaults() throws Exception {\n\n    int numDefaultsTested = 0;\n    int numNullDefaults = 0;\n\n    SolrConfig sc = new SolrConfig(TEST_PATH().resolve(\"collection1\"), \"solrconfig-defaults.xml\");\n    SolrIndexConfig sic = sc.indexConfig;\n\n    ++numDefaultsTested; assertEquals(\"default useCompoundFile\", false, sic.useCompoundFile);\n\n    ++numDefaultsTested; assertEquals(\"default maxBufferedDocs\", -1, sic.maxBufferedDocs);\n\n    ++numDefaultsTested; assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    ++numDefaultsTested; assertEquals(\"default ramPerThreadHardLimitMB\", -1, sic.ramPerThreadHardLimitMB);\n    ++numDefaultsTested; assertEquals(\"default writeLockTimeout\", -1, sic.writeLockTimeout);\n    ++numDefaultsTested; assertEquals(\"default LockType\", DirectoryFactory.LOCK_TYPE_NATIVE, sic.lockType);\n\n    ++numDefaultsTested; assertEquals(\"default infoStream\", InfoStream.NO_OUTPUT, sic.infoStream);\n\n    ++numDefaultsTested; assertNotNull(\"default metrics\", sic.metricsInfo);\n\n    ++numDefaultsTested; ++numNullDefaults;\n    assertNull(\"default mergePolicyFactoryInfo\", sic.mergePolicyFactoryInfo);\n\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergeSchedulerInfo\", sic.mergeSchedulerInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergedSegmentWarmerInfo\", sic.mergedSegmentWarmerInfo);\n\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(\"schema.xml\", solrConfig);\n    IndexWriterConfig iwc = sic.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TieredMergePolicy\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n\n    assertNull(\"non-null mergedSegmentWarmer\", iwc.getMergedSegmentWarmer());\n\n    final int numDefaultsMapped = sic.toMap(new LinkedHashMap<>()).size();\n    assertEquals(\"numDefaultsTested vs. numDefaultsMapped+numNullDefaults =\"+sic.toMap(new LinkedHashMap<>()).keySet(), numDefaultsTested, numDefaultsMapped+numNullDefaults);\n  }\n\n","sourceOld":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    int numDefaultsTested = 0;\n    int numNullDefaults = 0;\n\n    SolrConfig sc = new SolrConfig(TEST_PATH().resolve(\"collection1\"), \"solrconfig-defaults.xml\");\n    SolrIndexConfig sic = sc.indexConfig;\n\n    ++numDefaultsTested; assertEquals(\"default useCompoundFile\", false, sic.useCompoundFile);\n\n    ++numDefaultsTested; assertEquals(\"default maxBufferedDocs\", -1, sic.maxBufferedDocs);\n\n    ++numDefaultsTested; assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    ++numDefaultsTested; assertEquals(\"default ramPerThreadHardLimitMB\", -1, sic.ramPerThreadHardLimitMB);\n    ++numDefaultsTested; assertEquals(\"default writeLockTimeout\", -1, sic.writeLockTimeout);\n    ++numDefaultsTested; assertEquals(\"default LockType\", DirectoryFactory.LOCK_TYPE_NATIVE, sic.lockType);\n\n    ++numDefaultsTested; assertEquals(\"default infoStream\", InfoStream.NO_OUTPUT, sic.infoStream);\n\n    ++numDefaultsTested; assertNotNull(\"default metrics\", sic.metricsInfo);\n\n    ++numDefaultsTested; ++numNullDefaults;\n    assertNull(\"default mergePolicyFactoryInfo\", sic.mergePolicyFactoryInfo);\n\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergeSchedulerInfo\", sic.mergeSchedulerInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergedSegmentWarmerInfo\", sic.mergedSegmentWarmerInfo);\n\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(\"schema.xml\", solrConfig);\n    IndexWriterConfig iwc = sic.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TieredMergePolicy\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n\n    assertNull(\"non-null mergedSegmentWarmer\", iwc.getMergedSegmentWarmer());\n\n    final int numDefaultsMapped = sic.toMap(new LinkedHashMap<>()).size();\n    assertEquals(\"numDefaultsTested vs. numDefaultsMapped+numNullDefaults =\"+sic.toMap(new LinkedHashMap<>()).keySet(), numDefaultsTested, numDefaultsMapped+numNullDefaults);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b67e82ec2165e3751ee78dee0876fc5ce616890","date":1596841271,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestConfig#testDefaults().mjava","sourceNew":"  // If defaults change, add test methods to cover each version\n  @Test\n  public void testDefaults() throws Exception {\n\n    int numDefaultsTested = 0;\n    int numNullDefaults = 0;\n\n    SolrConfig sc = new SolrConfig(TEST_PATH().resolve(\"collection1\"), \"solrconfig-defaults.xml\");\n    SolrIndexConfig sic = sc.indexConfig;\n\n    ++numDefaultsTested; assertEquals(\"default useCompoundFile\", false, sic.useCompoundFile);\n\n    ++numDefaultsTested; assertEquals(\"default maxBufferedDocs\", -1, sic.maxBufferedDocs);\n\n    ++numDefaultsTested; assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    ++numDefaultsTested; assertEquals(\"default ramPerThreadHardLimitMB\", -1, sic.ramPerThreadHardLimitMB);\n    ++numDefaultsTested; assertEquals(\"default writeLockTimeout\", -1, sic.writeLockTimeout);\n    ++numDefaultsTested; assertEquals(\"default LockType\", DirectoryFactory.LOCK_TYPE_NATIVE, sic.lockType);\n\n    ++numDefaultsTested; assertEquals(\"default infoStream\", InfoStream.NO_OUTPUT, sic.infoStream);\n\n    ++numDefaultsTested; assertNotNull(\"default metrics\", sic.metricsInfo);\n\n    ++numDefaultsTested; assertEquals(\"default maxCommitMergeWaitTime\", -1, sic.maxCommitMergeWaitMillis);\n\n    ++numDefaultsTested; ++numNullDefaults;\n    assertNull(\"default mergePolicyFactoryInfo\", sic.mergePolicyFactoryInfo);\n\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergeSchedulerInfo\", sic.mergeSchedulerInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergedSegmentWarmerInfo\", sic.mergedSegmentWarmerInfo);\n\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(\"schema.xml\", solrConfig);\n    IndexWriterConfig iwc = sic.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TieredMergePolicy\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n\n    assertNull(\"non-null mergedSegmentWarmer\", iwc.getMergedSegmentWarmer());\n\n    final int numDefaultsMapped = sic.toMap(new LinkedHashMap<>()).size();\n    assertEquals(\"numDefaultsTested vs. numDefaultsMapped+numNullDefaults =\"+sic.toMap(new LinkedHashMap<>()).keySet(), numDefaultsTested, numDefaultsMapped+numNullDefaults);\n  }\n\n","sourceOld":"  // If defaults change, add test methods to cover each version\n  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-14582\")\n  public void testDefaults() throws Exception {\n\n    int numDefaultsTested = 0;\n    int numNullDefaults = 0;\n\n    SolrConfig sc = new SolrConfig(TEST_PATH().resolve(\"collection1\"), \"solrconfig-defaults.xml\");\n    SolrIndexConfig sic = sc.indexConfig;\n\n    ++numDefaultsTested; assertEquals(\"default useCompoundFile\", false, sic.useCompoundFile);\n\n    ++numDefaultsTested; assertEquals(\"default maxBufferedDocs\", -1, sic.maxBufferedDocs);\n\n    ++numDefaultsTested; assertEquals(\"default ramBufferSizeMB\", 100.0D, sic.ramBufferSizeMB, 0.0D);\n    ++numDefaultsTested; assertEquals(\"default ramPerThreadHardLimitMB\", -1, sic.ramPerThreadHardLimitMB);\n    ++numDefaultsTested; assertEquals(\"default writeLockTimeout\", -1, sic.writeLockTimeout);\n    ++numDefaultsTested; assertEquals(\"default LockType\", DirectoryFactory.LOCK_TYPE_NATIVE, sic.lockType);\n\n    ++numDefaultsTested; assertEquals(\"default infoStream\", InfoStream.NO_OUTPUT, sic.infoStream);\n\n    ++numDefaultsTested; assertNotNull(\"default metrics\", sic.metricsInfo);\n\n    ++numDefaultsTested; ++numNullDefaults;\n    assertNull(\"default mergePolicyFactoryInfo\", sic.mergePolicyFactoryInfo);\n\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergeSchedulerInfo\", sic.mergeSchedulerInfo);\n    ++numDefaultsTested; ++numNullDefaults; assertNull(\"default mergedSegmentWarmerInfo\", sic.mergedSegmentWarmerInfo);\n\n    IndexSchema indexSchema = IndexSchemaFactory.buildIndexSchema(\"schema.xml\", solrConfig);\n    IndexWriterConfig iwc = sic.toIndexWriterConfig(h.getCore());\n\n    assertNotNull(\"null mp\", iwc.getMergePolicy());\n    assertTrue(\"mp is not TieredMergePolicy\", iwc.getMergePolicy() instanceof TieredMergePolicy);\n\n    assertNotNull(\"null ms\", iwc.getMergeScheduler());\n    assertTrue(\"ms is not CMS\", iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler);\n\n    assertNull(\"non-null mergedSegmentWarmer\", iwc.getMergedSegmentWarmer());\n\n    final int numDefaultsMapped = sic.toMap(new LinkedHashMap<>()).size();\n    assertEquals(\"numDefaultsTested vs. numDefaultsMapped+numNullDefaults =\"+sic.toMap(new LinkedHashMap<>()).keySet(), numDefaultsTested, numDefaultsMapped+numNullDefaults);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"151c786e439f34edb91b77d019109463ab0a6548":["28288370235ed02234a64753cdbf0c6ec096304a"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["6972962f6d16afcfbe2ce9b2dffe52f0612dbc48","f33ef255480d446ae7aa03506be85d0356a9850f"],"ad8024a22d8bd3a09b7f618f41cdfe117ae6fe96":["151c786e439f34edb91b77d019109463ab0a6548"],"2b3091e174423680e7d6cce5f858d48cd5410bcf":["9de9cb439f6b08d8865ea8c3fc81091598312851"],"70d848516a5d0b23d183a2ceb4f4fb8634205956":["2f7df713a0f1e310d18dd8da91c89a07a13f86f8"],"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0":["2fc9f4a33c8fefeb1260aea04273a36b0d32378e"],"df724d84dab24a0cc54bec95a8680867adc7f171":["151c786e439f34edb91b77d019109463ab0a6548","ad8024a22d8bd3a09b7f618f41cdfe117ae6fe96"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["2f7df713a0f1e310d18dd8da91c89a07a13f86f8","70d848516a5d0b23d183a2ceb4f4fb8634205956"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["ad8024a22d8bd3a09b7f618f41cdfe117ae6fe96"],"2fc9f4a33c8fefeb1260aea04273a36b0d32378e":["926f89db68f9df123a00d986d92b2e6f15f9cf91"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["c02b804ab16489b95429791a2d8fb0e0728354d4"],"f33ef255480d446ae7aa03506be85d0356a9850f":["6972962f6d16afcfbe2ce9b2dffe52f0612dbc48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["8f7730fa9149de890ea12da1fa93be9f5e3a1edf","1f1f31880696765d6aec499d3b01fa501129af45"],"7b67e82ec2165e3751ee78dee0876fc5ce616890":["b7312d16201333086e0df34f3b750f01bac319f5"],"8f7730fa9149de890ea12da1fa93be9f5e3a1edf":["2b3091e174423680e7d6cce5f858d48cd5410bcf"],"21591922fb4db3e2a6ffb2cb342b3d61c053a973":["4a5469a71486c4c1e313c7fcb08188d7111195c2"],"b7312d16201333086e0df34f3b750f01bac319f5":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"9faddcba6da825f6b0551dc2287e6ff4fdd60f82":["5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["37a0f60745e53927c4c876cfe5b5a58170f0646c","926f89db68f9df123a00d986d92b2e6f15f9cf91"],"1f1f31880696765d6aec499d3b01fa501129af45":["8f7730fa9149de890ea12da1fa93be9f5e3a1edf"],"407687e67faf6e1f02a211ca078d8e3eed631027":["21591922fb4db3e2a6ffb2cb342b3d61c053a973","6972962f6d16afcfbe2ce9b2dffe52f0612dbc48"],"9de9cb439f6b08d8865ea8c3fc81091598312851":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"28288370235ed02234a64753cdbf0c6ec096304a":["2f7df713a0f1e310d18dd8da91c89a07a13f86f8","70d848516a5d0b23d183a2ceb4f4fb8634205956"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["8f7730fa9149de890ea12da1fa93be9f5e3a1edf","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"c02b804ab16489b95429791a2d8fb0e0728354d4":["9faddcba6da825f6b0551dc2287e6ff4fdd60f82"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","2f7df713a0f1e310d18dd8da91c89a07a13f86f8"],"926f89db68f9df123a00d986d92b2e6f15f9cf91":["f33ef255480d446ae7aa03506be85d0356a9850f"],"4a5469a71486c4c1e313c7fcb08188d7111195c2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4a5469a71486c4c1e313c7fcb08188d7111195c2","21591922fb4db3e2a6ffb2cb342b3d61c053a973"],"2f7df713a0f1e310d18dd8da91c89a07a13f86f8":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b67e82ec2165e3751ee78dee0876fc5ce616890"],"6972962f6d16afcfbe2ce9b2dffe52f0612dbc48":["21591922fb4db3e2a6ffb2cb342b3d61c053a973"]},"commit2Childs":{"151c786e439f34edb91b77d019109463ab0a6548":["ad8024a22d8bd3a09b7f618f41cdfe117ae6fe96","df724d84dab24a0cc54bec95a8680867adc7f171"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"ad8024a22d8bd3a09b7f618f41cdfe117ae6fe96":["df724d84dab24a0cc54bec95a8680867adc7f171","ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"2b3091e174423680e7d6cce5f858d48cd5410bcf":["8f7730fa9149de890ea12da1fa93be9f5e3a1edf"],"70d848516a5d0b23d183a2ceb4f4fb8634205956":["e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0":["9faddcba6da825f6b0551dc2287e6ff4fdd60f82"],"df724d84dab24a0cc54bec95a8680867adc7f171":[],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"2fc9f4a33c8fefeb1260aea04273a36b0d32378e":["5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["b7312d16201333086e0df34f3b750f01bac319f5"],"f33ef255480d446ae7aa03506be85d0356a9850f":["37a0f60745e53927c4c876cfe5b5a58170f0646c","926f89db68f9df123a00d986d92b2e6f15f9cf91"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["9de9cb439f6b08d8865ea8c3fc81091598312851"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4a5469a71486c4c1e313c7fcb08188d7111195c2"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","2f7df713a0f1e310d18dd8da91c89a07a13f86f8"],"7b67e82ec2165e3751ee78dee0876fc5ce616890":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8f7730fa9149de890ea12da1fa93be9f5e3a1edf":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","1f1f31880696765d6aec499d3b01fa501129af45","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"21591922fb4db3e2a6ffb2cb342b3d61c053a973":["407687e67faf6e1f02a211ca078d8e3eed631027","fe33227f6805edab2036cbb80645cc4e2d1fa424","6972962f6d16afcfbe2ce9b2dffe52f0612dbc48"],"b7312d16201333086e0df34f3b750f01bac319f5":["7b67e82ec2165e3751ee78dee0876fc5ce616890"],"9faddcba6da825f6b0551dc2287e6ff4fdd60f82":["c02b804ab16489b95429791a2d8fb0e0728354d4"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"1f1f31880696765d6aec499d3b01fa501129af45":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"9de9cb439f6b08d8865ea8c3fc81091598312851":["2b3091e174423680e7d6cce5f858d48cd5410bcf"],"28288370235ed02234a64753cdbf0c6ec096304a":["151c786e439f34edb91b77d019109463ab0a6548"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"c02b804ab16489b95429791a2d8fb0e0728354d4":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"926f89db68f9df123a00d986d92b2e6f15f9cf91":["2fc9f4a33c8fefeb1260aea04273a36b0d32378e","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"4a5469a71486c4c1e313c7fcb08188d7111195c2":["21591922fb4db3e2a6ffb2cb342b3d61c053a973","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"2f7df713a0f1e310d18dd8da91c89a07a13f86f8":["70d848516a5d0b23d183a2ceb4f4fb8634205956","e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"6972962f6d16afcfbe2ce9b2dffe52f0612dbc48":["37a0f60745e53927c4c876cfe5b5a58170f0646c","f33ef255480d446ae7aa03506be85d0356a9850f","407687e67faf6e1f02a211ca078d8e3eed631027"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["df724d84dab24a0cc54bec95a8680867adc7f171","e9017cf144952056066919f1ebc7897ff9bd71b1","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","407687e67faf6e1f02a211ca078d8e3eed631027","f03e4bed5023ec3ef93a771b8888cae991cf448d","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}