{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#getVariableBinary(FieldInfo,BinaryEntry).mjava","commits":[{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#getVariableBinary(FieldInfo,BinaryEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#getVariableBinary(FieldInfo,BinaryEntry).mjava","sourceNew":"  private BinaryDocValues getVariableBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final IndexInput data = this.data.clone();\n    \n    final MonotonicBlockPackedReader addresses = getAddressInstance(data, field, bytes);\n\n    return new LongBinaryDocValues() {\n      final BytesRef term = new BytesRef(Math.max(0, bytes.maxLength));\n      \n      @Override\n      public BytesRef get(long id) {\n        long startAddress = bytes.offset + addresses.get(id);\n        long endAddress = bytes.offset + addresses.get(id+1);\n        int length = (int) (endAddress - startAddress);\n        try {\n          data.seek(startAddress);\n          data.readBytes(term.bytes, 0, length);\n          term.length = length;\n          return term;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private BinaryDocValues getVariableBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final IndexInput data = this.data.clone();\n    \n    final MonotonicBlockPackedReader addresses = getAddressInstance(data, field, bytes);\n\n    return new LongBinaryDocValues() {\n      final BytesRef term = new BytesRef(Math.max(0, bytes.maxLength));\n      \n      @Override\n      public BytesRef get(long id) {\n        long startAddress = bytes.offset + addresses.get(id);\n        long endAddress = bytes.offset + addresses.get(id+1);\n        int length = (int) (endAddress - startAddress);\n        try {\n          data.seek(startAddress);\n          data.readBytes(term.bytes, 0, length);\n          term.length = length;\n          return term;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#getVariableBinary(FieldInfo,BinaryEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#getVariableBinary(FieldInfo,BinaryEntry).mjava","sourceNew":"  private BinaryDocValues getVariableBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final IndexInput data = this.data.clone();\n    \n    final MonotonicBlockPackedReader addresses = getAddressInstance(data, field, bytes);\n\n    return new LongBinaryDocValues() {\n      final BytesRef term = new BytesRef(Math.max(0, bytes.maxLength));\n      \n      @Override\n      public BytesRef get(long id) {\n        long startAddress = bytes.offset + addresses.get(id);\n        long endAddress = bytes.offset + addresses.get(id+1);\n        int length = (int) (endAddress - startAddress);\n        try {\n          data.seek(startAddress);\n          data.readBytes(term.bytes, 0, length);\n          term.length = length;\n          return term;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private BinaryDocValues getVariableBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final IndexInput data = this.data.clone();\n    \n    final MonotonicBlockPackedReader addresses = getAddressInstance(data, field, bytes);\n\n    return new LongBinaryDocValues() {\n      final BytesRef term = new BytesRef(Math.max(0, bytes.maxLength));\n      \n      @Override\n      public BytesRef get(long id) {\n        long startAddress = bytes.offset + addresses.get(id);\n        long endAddress = bytes.offset + addresses.get(id+1);\n        int length = (int) (endAddress - startAddress);\n        try {\n          data.seek(startAddress);\n          data.readBytes(term.bytes, 0, length);\n          term.length = length;\n          return term;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#getVariableBinary(FieldInfo,BinaryEntry).mjava","sourceNew":null,"sourceOld":"  private BinaryDocValues getVariableBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final IndexInput data = this.data.clone();\n    \n    final MonotonicBlockPackedReader addresses = getAddressInstance(data, field, bytes);\n\n    return new LongBinaryDocValues() {\n      final BytesRef term = new BytesRef(Math.max(0, bytes.maxLength));\n      \n      @Override\n      public BytesRef get(long id) {\n        long startAddress = bytes.offset + addresses.get(id);\n        long endAddress = bytes.offset + addresses.get(id+1);\n        int length = (int) (endAddress - startAddress);\n        try {\n          data.seek(startAddress);\n          data.readBytes(term.bytes, 0, length);\n          term.length = length;\n          return term;\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}