{"path":"src/java/org/apache/lucene/util/OpenBitSetIterator#advance(int).mjava","commits":[{"id":"30a558487f2298c2c19ceca9103c1b6865d64708","date":1244393921,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/OpenBitSetIterator#advance(int).mjava","pathOld":"src/java/org/apache/lucene/util/OpenBitSetIterator#next(int).mjava","sourceNew":"  public int advance(int target) {\n    indexArray = 0;\n    i = target >> 6;\n    if (i >= words) {\n      word = 0; // setup so next() will also return -1\n      return curDocId = NO_MORE_DOCS;\n    }\n    wordShift = target & 0x3f;\n    word = arr[i] >>> wordShift;\n    if (word != 0) {\n      wordShift--; // compensate for 1 based arrIndex\n    } else {\n      while (word == 0) {\n        if (++i >= words) {\n          return curDocId = NO_MORE_DOCS;\n        }\n        word = arr[i];\n      }\n      wordShift = -1;\n    }\n\n    shift();\n\n    int bitIndex = (indexArray & 0x0f) + wordShift;\n    indexArray >>>= 4;\n    // should i<<6 be cached as a separate variable?\n    // it would only save one cycle in the best circumstances.\n    return curDocId = (i<<6) + bitIndex;\n  }\n\n","sourceOld":"  /** Behaves like {@link #skipTo(int)} and returns the docId the iterator\n   *  skipped to; returns -1 if no valid document could be skipped to. */\n  public int next(int fromIndex) {\n    indexArray=0;\n    i = fromIndex >> 6;\n    if (i>=words) {\n      word =0; // setup so next() will also return -1\n      return curDocId = -1;\n    }\n    wordShift = fromIndex & 0x3f;\n    word = arr[i] >>> wordShift;\n    if (word !=0) {\n      wordShift--; // compensate for 1 based arrIndex\n    } else {\n      while (word ==0) {\n        if (++i >= words) {\n          return curDocId = -1;\n        }\n        word = arr[i];\n      }\n      wordShift =-1;\n    }\n\n    shift();\n\n    int bitIndex = (indexArray & 0x0f) + wordShift;\n    indexArray >>>= 4;\n    // should i<<6 be cached as a separate variable?\n    // it would only save one cycle in the best circumstances.\n    return curDocId = (i<<6) + bitIndex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/OpenBitSetIterator#advance(int).mjava","pathOld":"src/java/org/apache/lucene/util/OpenBitSetIterator#advance(int).mjava","sourceNew":"  @Override\n  public int advance(int target) {\n    indexArray = 0;\n    i = target >> 6;\n    if (i >= words) {\n      word = 0; // setup so next() will also return -1\n      return curDocId = NO_MORE_DOCS;\n    }\n    wordShift = target & 0x3f;\n    word = arr[i] >>> wordShift;\n    if (word != 0) {\n      wordShift--; // compensate for 1 based arrIndex\n    } else {\n      while (word == 0) {\n        if (++i >= words) {\n          return curDocId = NO_MORE_DOCS;\n        }\n        word = arr[i];\n      }\n      wordShift = -1;\n    }\n\n    shift();\n\n    int bitIndex = (indexArray & 0x0f) + wordShift;\n    indexArray >>>= 4;\n    // should i<<6 be cached as a separate variable?\n    // it would only save one cycle in the best circumstances.\n    return curDocId = (i<<6) + bitIndex;\n  }\n\n","sourceOld":"  public int advance(int target) {\n    indexArray = 0;\n    i = target >> 6;\n    if (i >= words) {\n      word = 0; // setup so next() will also return -1\n      return curDocId = NO_MORE_DOCS;\n    }\n    wordShift = target & 0x3f;\n    word = arr[i] >>> wordShift;\n    if (word != 0) {\n      wordShift--; // compensate for 1 based arrIndex\n    } else {\n      while (word == 0) {\n        if (++i >= words) {\n          return curDocId = NO_MORE_DOCS;\n        }\n        word = arr[i];\n      }\n      wordShift = -1;\n    }\n\n    shift();\n\n    int bitIndex = (indexArray & 0x0f) + wordShift;\n    indexArray >>>= 4;\n    // should i<<6 be cached as a separate variable?\n    // it would only save one cycle in the best circumstances.\n    return curDocId = (i<<6) + bitIndex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/OpenBitSetIterator#advance(int).mjava","pathOld":"src/java/org/apache/lucene/util/OpenBitSetIterator#advance(int).mjava","sourceNew":"  @Override\n  public int advance(int target) {\n    indexArray = 0;\n    i = target >> 6;\n    if (i >= words) {\n      word = 0; // setup so next() will also return -1\n      return curDocId = NO_MORE_DOCS;\n    }\n    wordShift = target & 0x3f;\n    word = arr[i] >>> wordShift;\n    if (word != 0) {\n      wordShift--; // compensate for 1 based arrIndex\n    } else {\n      while (word == 0) {\n        if (++i >= words) {\n          return curDocId = NO_MORE_DOCS;\n        }\n        word = arr[i];\n      }\n      wordShift = -1;\n    }\n\n    shift();\n\n    int bitIndex = (indexArray & 0x0f) + wordShift;\n    indexArray >>>= 4;\n    // should i<<6 be cached as a separate variable?\n    // it would only save one cycle in the best circumstances.\n    return curDocId = (i<<6) + bitIndex;\n  }\n\n","sourceOld":"  @Override\n  public int advance(int target) {\n    indexArray = 0;\n    i = target >> 6;\n    if (i >= words) {\n      word = 0; // setup so next() will also return -1\n      return curDocId = NO_MORE_DOCS;\n    }\n    wordShift = target & 0x3f;\n    word = arr[i] >>> wordShift;\n    if (word != 0) {\n      wordShift--; // compensate for 1 based arrIndex\n    } else {\n      while (word == 0) {\n        if (++i >= words) {\n          return curDocId = NO_MORE_DOCS;\n        }\n        word = arr[i];\n      }\n      wordShift = -1;\n    }\n\n    shift();\n\n    int bitIndex = (indexArray & 0x0f) + wordShift;\n    indexArray >>>= 4;\n    // should i<<6 be cached as a separate variable?\n    // it would only save one cycle in the best circumstances.\n    return curDocId = (i<<6) + bitIndex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"30a558487f2298c2c19ceca9103c1b6865d64708":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8a9e385641d717e641408d8fbbc62be8fc766357":["30a558487f2298c2c19ceca9103c1b6865d64708"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"]},"commit2Childs":{"30a558487f2298c2c19ceca9103c1b6865d64708":["8a9e385641d717e641408d8fbbc62be8fc766357"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30a558487f2298c2c19ceca9103c1b6865d64708"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}