{"path":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testTablesStream().mjava","commits":[{"id":"aa9b48fdb08e049dc94a4077226b510eb68f2b24","date":1458766161,"type":0,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testTablesStream().mjava","pathOld":"/dev/null","sourceNew":"  private void testTablesStream() throws Exception {\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    Map<String, Object> params = new HashMap<>();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"numWorkers\", 2);\n    params.put(\"stmt\", \"select TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS from _TABLES_\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, params);\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assertEquals(2, tuples.size());\n\n    List<String> collections = new ArrayList<>();\n    collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollections());\n    Collections.sort(collections);\n    for (Tuple tuple : tuples) {\n      assertEquals(zkServer.getZkAddress(), tuple.getString(\"TABLE_CAT\"));\n      assertNull(tuple.get(\"TABLE_SCHEM\"));\n      assertTrue(collections.contains(tuple.getString(\"TABLE_NAME\")));\n      assertEquals(\"TABLE\", tuple.getString(\"TABLE_TYPE\"));\n      assertNull(tuple.get(\"REMARKS\"));\n    }\n\n    tuples = getTuples(solrStream);\n    assertEquals(2, tuples.size());\n\n    collections = new ArrayList<>();\n    collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollections());\n    Collections.sort(collections);\n    for (Tuple tuple : tuples) {\n      assertEquals(zkServer.getZkAddress(), tuple.getString(\"TABLE_CAT\"));\n      assertNull(tuple.get(\"TABLE_SCHEM\"));\n      assertTrue(collections.contains(tuple.getString(\"TABLE_NAME\")));\n      assertEquals(\"TABLE\", tuple.getString(\"TABLE_TYPE\"));\n      assertNull(tuple.get(\"REMARKS\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d984627825732e682759c22df7a3b171a80f3812","date":1461857653,"type":4,"author":"Kevin Risden","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testTablesStream().mjava","sourceNew":null,"sourceOld":"  private void testTablesStream() throws Exception {\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    Map<String, Object> params = new HashMap<>();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"numWorkers\", 2);\n    params.put(\"stmt\", \"select TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS from _TABLES_\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, params);\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assertEquals(2, tuples.size());\n\n    List<String> collections = new ArrayList<>();\n    collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollections());\n    Collections.sort(collections);\n    for (Tuple tuple : tuples) {\n      assertEquals(zkServer.getZkAddress(), tuple.getString(\"TABLE_CAT\"));\n      assertNull(tuple.get(\"TABLE_SCHEM\"));\n      assertTrue(collections.contains(tuple.getString(\"TABLE_NAME\")));\n      assertEquals(\"TABLE\", tuple.getString(\"TABLE_TYPE\"));\n      assertNull(tuple.get(\"REMARKS\"));\n    }\n\n    tuples = getTuples(solrStream);\n    assertEquals(2, tuples.size());\n\n    collections = new ArrayList<>();\n    collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollections());\n    Collections.sort(collections);\n    for (Tuple tuple : tuples) {\n      assertEquals(zkServer.getZkAddress(), tuple.getString(\"TABLE_CAT\"));\n      assertNull(tuple.get(\"TABLE_SCHEM\"));\n      assertTrue(collections.contains(tuple.getString(\"TABLE_NAME\")));\n      assertEquals(\"TABLE\", tuple.getString(\"TABLE_TYPE\"));\n      assertNull(tuple.get(\"REMARKS\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9974f61802aea1d15849a1053f88f5e89fc32b4","date":1462405923,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testTablesStream().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testTablesStream().mjava","sourceNew":"  private void testTablesStream() throws Exception {\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    Map<String, Object> params = new HashMap<>();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"numWorkers\", 2);\n    params.put(\"stmt\", \"select TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS from _TABLES_\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, params);\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assertEquals(2, tuples.size());\n\n    List<String> collections = new ArrayList<>();\n    collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollectionsMap().keySet());\n    Collections.sort(collections);\n    for (Tuple tuple : tuples) {\n      assertEquals(zkServer.getZkAddress(), tuple.getString(\"TABLE_CAT\"));\n      assertNull(tuple.get(\"TABLE_SCHEM\"));\n      assertTrue(collections.contains(tuple.getString(\"TABLE_NAME\")));\n      assertEquals(\"TABLE\", tuple.getString(\"TABLE_TYPE\"));\n      assertNull(tuple.get(\"REMARKS\"));\n    }\n\n    tuples = getTuples(solrStream);\n    assertEquals(2, tuples.size());\n\n    collections = new ArrayList<>();\n    collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollectionsMap().keySet());\n    Collections.sort(collections);\n    for (Tuple tuple : tuples) {\n      assertEquals(zkServer.getZkAddress(), tuple.getString(\"TABLE_CAT\"));\n      assertNull(tuple.get(\"TABLE_SCHEM\"));\n      assertTrue(collections.contains(tuple.getString(\"TABLE_NAME\")));\n      assertEquals(\"TABLE\", tuple.getString(\"TABLE_TYPE\"));\n      assertNull(tuple.get(\"REMARKS\"));\n    }\n  }\n\n","sourceOld":"  private void testTablesStream() throws Exception {\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    Map<String, Object> params = new HashMap<>();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"numWorkers\", 2);\n    params.put(\"stmt\", \"select TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS from _TABLES_\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, params);\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assertEquals(2, tuples.size());\n\n    List<String> collections = new ArrayList<>();\n    collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollections());\n    Collections.sort(collections);\n    for (Tuple tuple : tuples) {\n      assertEquals(zkServer.getZkAddress(), tuple.getString(\"TABLE_CAT\"));\n      assertNull(tuple.get(\"TABLE_SCHEM\"));\n      assertTrue(collections.contains(tuple.getString(\"TABLE_NAME\")));\n      assertEquals(\"TABLE\", tuple.getString(\"TABLE_TYPE\"));\n      assertNull(tuple.get(\"REMARKS\"));\n    }\n\n    tuples = getTuples(solrStream);\n    assertEquals(2, tuples.size());\n\n    collections = new ArrayList<>();\n    collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollections());\n    Collections.sort(collections);\n    for (Tuple tuple : tuples) {\n      assertEquals(zkServer.getZkAddress(), tuple.getString(\"TABLE_CAT\"));\n      assertNull(tuple.get(\"TABLE_SCHEM\"));\n      assertTrue(collections.contains(tuple.getString(\"TABLE_NAME\")));\n      assertEquals(\"TABLE\", tuple.getString(\"TABLE_TYPE\"));\n      assertNull(tuple.get(\"REMARKS\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testTablesStream().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testTablesStream().mjava","sourceNew":"  private void testTablesStream() throws Exception {\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    Map<String, Object> params = new HashMap<>();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"numWorkers\", 2);\n    params.put(\"stmt\", \"select TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS from _TABLES_\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, params);\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assertEquals(2, tuples.size());\n\n    List<String> collections = new ArrayList<>();\n    collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollectionsMap().keySet());\n    Collections.sort(collections);\n    for (Tuple tuple : tuples) {\n      assertEquals(zkServer.getZkAddress(), tuple.getString(\"TABLE_CAT\"));\n      assertNull(tuple.get(\"TABLE_SCHEM\"));\n      assertTrue(collections.contains(tuple.getString(\"TABLE_NAME\")));\n      assertEquals(\"TABLE\", tuple.getString(\"TABLE_TYPE\"));\n      assertNull(tuple.get(\"REMARKS\"));\n    }\n\n    tuples = getTuples(solrStream);\n    assertEquals(2, tuples.size());\n\n    collections = new ArrayList<>();\n    collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollectionsMap().keySet());\n    Collections.sort(collections);\n    for (Tuple tuple : tuples) {\n      assertEquals(zkServer.getZkAddress(), tuple.getString(\"TABLE_CAT\"));\n      assertNull(tuple.get(\"TABLE_SCHEM\"));\n      assertTrue(collections.contains(tuple.getString(\"TABLE_NAME\")));\n      assertEquals(\"TABLE\", tuple.getString(\"TABLE_TYPE\"));\n      assertNull(tuple.get(\"REMARKS\"));\n    }\n  }\n\n","sourceOld":"  private void testTablesStream() throws Exception {\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    Map<String, Object> params = new HashMap<>();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"numWorkers\", 2);\n    params.put(\"stmt\", \"select TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS from _TABLES_\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, params);\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assertEquals(2, tuples.size());\n\n    List<String> collections = new ArrayList<>();\n    collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollections());\n    Collections.sort(collections);\n    for (Tuple tuple : tuples) {\n      assertEquals(zkServer.getZkAddress(), tuple.getString(\"TABLE_CAT\"));\n      assertNull(tuple.get(\"TABLE_SCHEM\"));\n      assertTrue(collections.contains(tuple.getString(\"TABLE_NAME\")));\n      assertEquals(\"TABLE\", tuple.getString(\"TABLE_TYPE\"));\n      assertNull(tuple.get(\"REMARKS\"));\n    }\n\n    tuples = getTuples(solrStream);\n    assertEquals(2, tuples.size());\n\n    collections = new ArrayList<>();\n    collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollections());\n    Collections.sort(collections);\n    for (Tuple tuple : tuples) {\n      assertEquals(zkServer.getZkAddress(), tuple.getString(\"TABLE_CAT\"));\n      assertNull(tuple.get(\"TABLE_SCHEM\"));\n      assertTrue(collections.contains(tuple.getString(\"TABLE_NAME\")));\n      assertEquals(\"TABLE\", tuple.getString(\"TABLE_TYPE\"));\n      assertNull(tuple.get(\"REMARKS\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testTablesStream().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testTablesStream().mjava","sourceNew":"  private void testTablesStream() throws Exception {\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    Map<String, Object> params = new HashMap<>();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"numWorkers\", 2);\n    params.put(\"stmt\", \"select TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS from _TABLES_\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, params);\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assertEquals(2, tuples.size());\n\n    List<String> collections = new ArrayList<>();\n    collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollectionsMap().keySet());\n    Collections.sort(collections);\n    for (Tuple tuple : tuples) {\n      assertEquals(zkServer.getZkAddress(), tuple.getString(\"TABLE_CAT\"));\n      assertNull(tuple.get(\"TABLE_SCHEM\"));\n      assertTrue(collections.contains(tuple.getString(\"TABLE_NAME\")));\n      assertEquals(\"TABLE\", tuple.getString(\"TABLE_TYPE\"));\n      assertNull(tuple.get(\"REMARKS\"));\n    }\n\n    tuples = getTuples(solrStream);\n    assertEquals(2, tuples.size());\n\n    collections = new ArrayList<>();\n    collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollectionsMap().keySet());\n    Collections.sort(collections);\n    for (Tuple tuple : tuples) {\n      assertEquals(zkServer.getZkAddress(), tuple.getString(\"TABLE_CAT\"));\n      assertNull(tuple.get(\"TABLE_SCHEM\"));\n      assertTrue(collections.contains(tuple.getString(\"TABLE_NAME\")));\n      assertEquals(\"TABLE\", tuple.getString(\"TABLE_TYPE\"));\n      assertNull(tuple.get(\"REMARKS\"));\n    }\n  }\n\n","sourceOld":"  private void testTablesStream() throws Exception {\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    Map<String, Object> params = new HashMap<>();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"numWorkers\", 2);\n    params.put(\"stmt\", \"select TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS from _TABLES_\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, params);\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assertEquals(2, tuples.size());\n\n    List<String> collections = new ArrayList<>();\n    collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollections());\n    Collections.sort(collections);\n    for (Tuple tuple : tuples) {\n      assertEquals(zkServer.getZkAddress(), tuple.getString(\"TABLE_CAT\"));\n      assertNull(tuple.get(\"TABLE_SCHEM\"));\n      assertTrue(collections.contains(tuple.getString(\"TABLE_NAME\")));\n      assertEquals(\"TABLE\", tuple.getString(\"TABLE_TYPE\"));\n      assertNull(tuple.get(\"REMARKS\"));\n    }\n\n    tuples = getTuples(solrStream);\n    assertEquals(2, tuples.size());\n\n    collections = new ArrayList<>();\n    collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollections());\n    Collections.sort(collections);\n    for (Tuple tuple : tuples) {\n      assertEquals(zkServer.getZkAddress(), tuple.getString(\"TABLE_CAT\"));\n      assertNull(tuple.get(\"TABLE_SCHEM\"));\n      assertTrue(collections.contains(tuple.getString(\"TABLE_NAME\")));\n      assertEquals(\"TABLE\", tuple.getString(\"TABLE_TYPE\"));\n      assertNull(tuple.get(\"REMARKS\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"826d15444ddf61716dc768c229cd54b2c2ccce1c","date":1462822652,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testTablesStream().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testTablesStream().mjava","sourceNew":"  private void testTablesStream() throws Exception {\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\",\n      \"stmt\", \"select TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS from _TABLES_\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, sParams);\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assertEquals(2, tuples.size());\n\n    List<String> collections = new ArrayList<>();\n    collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollectionsMap().keySet());\n    Collections.sort(collections);\n    for (Tuple tuple : tuples) {\n      assertEquals(zkServer.getZkAddress(), tuple.getString(\"TABLE_CAT\"));\n      assertNull(tuple.get(\"TABLE_SCHEM\"));\n      assertTrue(collections.contains(tuple.getString(\"TABLE_NAME\")));\n      assertEquals(\"TABLE\", tuple.getString(\"TABLE_TYPE\"));\n      assertNull(tuple.get(\"REMARKS\"));\n    }\n\n    tuples = getTuples(solrStream);\n    assertEquals(2, tuples.size());\n\n    collections = new ArrayList<>();\n    collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollectionsMap().keySet());\n    Collections.sort(collections);\n    for (Tuple tuple : tuples) {\n      assertEquals(zkServer.getZkAddress(), tuple.getString(\"TABLE_CAT\"));\n      assertNull(tuple.get(\"TABLE_SCHEM\"));\n      assertTrue(collections.contains(tuple.getString(\"TABLE_NAME\")));\n      assertEquals(\"TABLE\", tuple.getString(\"TABLE_TYPE\"));\n      assertNull(tuple.get(\"REMARKS\"));\n    }\n  }\n\n","sourceOld":"  private void testTablesStream() throws Exception {\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    Map<String, Object> params = new HashMap<>();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"numWorkers\", 2);\n    params.put(\"stmt\", \"select TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS from _TABLES_\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, params);\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assertEquals(2, tuples.size());\n\n    List<String> collections = new ArrayList<>();\n    collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollectionsMap().keySet());\n    Collections.sort(collections);\n    for (Tuple tuple : tuples) {\n      assertEquals(zkServer.getZkAddress(), tuple.getString(\"TABLE_CAT\"));\n      assertNull(tuple.get(\"TABLE_SCHEM\"));\n      assertTrue(collections.contains(tuple.getString(\"TABLE_NAME\")));\n      assertEquals(\"TABLE\", tuple.getString(\"TABLE_TYPE\"));\n      assertNull(tuple.get(\"REMARKS\"));\n    }\n\n    tuples = getTuples(solrStream);\n    assertEquals(2, tuples.size());\n\n    collections = new ArrayList<>();\n    collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollectionsMap().keySet());\n    Collections.sort(collections);\n    for (Tuple tuple : tuples) {\n      assertEquals(zkServer.getZkAddress(), tuple.getString(\"TABLE_CAT\"));\n      assertNull(tuple.get(\"TABLE_SCHEM\"));\n      assertTrue(collections.contains(tuple.getString(\"TABLE_NAME\")));\n      assertEquals(\"TABLE\", tuple.getString(\"TABLE_TYPE\"));\n      assertNull(tuple.get(\"REMARKS\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testTablesStream().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testTablesStream().mjava","sourceNew":"  private void testTablesStream() throws Exception {\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\",\n      \"stmt\", \"select TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS from _TABLES_\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, sParams);\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assertEquals(2, tuples.size());\n\n    List<String> collections = new ArrayList<>();\n    collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollectionsMap().keySet());\n    Collections.sort(collections);\n    for (Tuple tuple : tuples) {\n      assertEquals(zkServer.getZkAddress(), tuple.getString(\"TABLE_CAT\"));\n      assertNull(tuple.get(\"TABLE_SCHEM\"));\n      assertTrue(collections.contains(tuple.getString(\"TABLE_NAME\")));\n      assertEquals(\"TABLE\", tuple.getString(\"TABLE_TYPE\"));\n      assertNull(tuple.get(\"REMARKS\"));\n    }\n\n    tuples = getTuples(solrStream);\n    assertEquals(2, tuples.size());\n\n    collections = new ArrayList<>();\n    collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollectionsMap().keySet());\n    Collections.sort(collections);\n    for (Tuple tuple : tuples) {\n      assertEquals(zkServer.getZkAddress(), tuple.getString(\"TABLE_CAT\"));\n      assertNull(tuple.get(\"TABLE_SCHEM\"));\n      assertTrue(collections.contains(tuple.getString(\"TABLE_NAME\")));\n      assertEquals(\"TABLE\", tuple.getString(\"TABLE_TYPE\"));\n      assertNull(tuple.get(\"REMARKS\"));\n    }\n  }\n\n","sourceOld":"  private void testTablesStream() throws Exception {\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    Map<String, Object> params = new HashMap<>();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"numWorkers\", 2);\n    params.put(\"stmt\", \"select TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS from _TABLES_\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, params);\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assertEquals(2, tuples.size());\n\n    List<String> collections = new ArrayList<>();\n    collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollectionsMap().keySet());\n    Collections.sort(collections);\n    for (Tuple tuple : tuples) {\n      assertEquals(zkServer.getZkAddress(), tuple.getString(\"TABLE_CAT\"));\n      assertNull(tuple.get(\"TABLE_SCHEM\"));\n      assertTrue(collections.contains(tuple.getString(\"TABLE_NAME\")));\n      assertEquals(\"TABLE\", tuple.getString(\"TABLE_TYPE\"));\n      assertNull(tuple.get(\"REMARKS\"));\n    }\n\n    tuples = getTuples(solrStream);\n    assertEquals(2, tuples.size());\n\n    collections = new ArrayList<>();\n    collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollectionsMap().keySet());\n    Collections.sort(collections);\n    for (Tuple tuple : tuples) {\n      assertEquals(zkServer.getZkAddress(), tuple.getString(\"TABLE_CAT\"));\n      assertNull(tuple.get(\"TABLE_SCHEM\"));\n      assertTrue(collections.contains(tuple.getString(\"TABLE_NAME\")));\n      assertEquals(\"TABLE\", tuple.getString(\"TABLE_TYPE\"));\n      assertNull(tuple.get(\"REMARKS\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testTablesStream().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testTablesStream().mjava","sourceNew":"  private void testTablesStream() throws Exception {\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\",\n      \"stmt\", \"select TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS from _TABLES_\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, sParams);\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assertEquals(2, tuples.size());\n\n    List<String> collections = new ArrayList<>();\n    collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollectionsMap().keySet());\n    Collections.sort(collections);\n    for (Tuple tuple : tuples) {\n      assertEquals(zkServer.getZkAddress(), tuple.getString(\"TABLE_CAT\"));\n      assertNull(tuple.get(\"TABLE_SCHEM\"));\n      assertTrue(collections.contains(tuple.getString(\"TABLE_NAME\")));\n      assertEquals(\"TABLE\", tuple.getString(\"TABLE_TYPE\"));\n      assertNull(tuple.get(\"REMARKS\"));\n    }\n\n    tuples = getTuples(solrStream);\n    assertEquals(2, tuples.size());\n\n    collections = new ArrayList<>();\n    collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollectionsMap().keySet());\n    Collections.sort(collections);\n    for (Tuple tuple : tuples) {\n      assertEquals(zkServer.getZkAddress(), tuple.getString(\"TABLE_CAT\"));\n      assertNull(tuple.get(\"TABLE_SCHEM\"));\n      assertTrue(collections.contains(tuple.getString(\"TABLE_NAME\")));\n      assertEquals(\"TABLE\", tuple.getString(\"TABLE_TYPE\"));\n      assertNull(tuple.get(\"REMARKS\"));\n    }\n  }\n\n","sourceOld":"  private void testTablesStream() throws Exception {\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    Map<String, Object> params = new HashMap<>();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"numWorkers\", 2);\n    params.put(\"stmt\", \"select TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS from _TABLES_\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, params);\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assertEquals(2, tuples.size());\n\n    List<String> collections = new ArrayList<>();\n    collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollectionsMap().keySet());\n    Collections.sort(collections);\n    for (Tuple tuple : tuples) {\n      assertEquals(zkServer.getZkAddress(), tuple.getString(\"TABLE_CAT\"));\n      assertNull(tuple.get(\"TABLE_SCHEM\"));\n      assertTrue(collections.contains(tuple.getString(\"TABLE_NAME\")));\n      assertEquals(\"TABLE\", tuple.getString(\"TABLE_TYPE\"));\n      assertNull(tuple.get(\"REMARKS\"));\n    }\n\n    tuples = getTuples(solrStream);\n    assertEquals(2, tuples.size());\n\n    collections = new ArrayList<>();\n    collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollectionsMap().keySet());\n    Collections.sort(collections);\n    for (Tuple tuple : tuples) {\n      assertEquals(zkServer.getZkAddress(), tuple.getString(\"TABLE_CAT\"));\n      assertNull(tuple.get(\"TABLE_SCHEM\"));\n      assertTrue(collections.contains(tuple.getString(\"TABLE_NAME\")));\n      assertEquals(\"TABLE\", tuple.getString(\"TABLE_TYPE\"));\n      assertNull(tuple.get(\"REMARKS\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"116fdd6b9e04e18a6547a5650bc0afd3fda020aa","date":1487184909,"type":4,"author":"Joel Bernstein","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testTablesStream().mjava","sourceNew":null,"sourceOld":"  private void testTablesStream() throws Exception {\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"numWorkers\", \"2\",\n      \"stmt\", \"select TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS from _TABLES_\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, sParams);\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assertEquals(2, tuples.size());\n\n    List<String> collections = new ArrayList<>();\n    collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollectionsMap().keySet());\n    Collections.sort(collections);\n    for (Tuple tuple : tuples) {\n      assertEquals(zkServer.getZkAddress(), tuple.getString(\"TABLE_CAT\"));\n      assertNull(tuple.get(\"TABLE_SCHEM\"));\n      assertTrue(collections.contains(tuple.getString(\"TABLE_NAME\")));\n      assertEquals(\"TABLE\", tuple.getString(\"TABLE_TYPE\"));\n      assertNull(tuple.get(\"REMARKS\"));\n    }\n\n    tuples = getTuples(solrStream);\n    assertEquals(2, tuples.size());\n\n    collections = new ArrayList<>();\n    collections.addAll(cloudClient.getZkStateReader().getClusterState().getCollectionsMap().keySet());\n    Collections.sort(collections);\n    for (Tuple tuple : tuples) {\n      assertEquals(zkServer.getZkAddress(), tuple.getString(\"TABLE_CAT\"));\n      assertNull(tuple.get(\"TABLE_SCHEM\"));\n      assertTrue(collections.contains(tuple.getString(\"TABLE_NAME\")));\n      assertEquals(\"TABLE\", tuple.getString(\"TABLE_TYPE\"));\n      assertNull(tuple.get(\"REMARKS\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["d470c8182e92b264680e34081b75e70a9f2b3c89","d984627825732e682759c22df7a3b171a80f3812"],"d984627825732e682759c22df7a3b171a80f3812":["aa9b48fdb08e049dc94a4077226b510eb68f2b24"],"73450c0955930295d34703e7ddbfc6973b7a121a":["aa9b48fdb08e049dc94a4077226b510eb68f2b24","e9974f61802aea1d15849a1053f88f5e89fc32b4"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["aa9b48fdb08e049dc94a4077226b510eb68f2b24","73450c0955930295d34703e7ddbfc6973b7a121a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"aa9b48fdb08e049dc94a4077226b510eb68f2b24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e66a459d38c1c4a2f97128433dab546f683a9fed":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"e9974f61802aea1d15849a1053f88f5e89fc32b4":["aa9b48fdb08e049dc94a4077226b510eb68f2b24"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["73450c0955930295d34703e7ddbfc6973b7a121a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["73450c0955930295d34703e7ddbfc6973b7a121a","826d15444ddf61716dc768c229cd54b2c2ccce1c"]},"commit2Childs":{"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d984627825732e682759c22df7a3b171a80f3812":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"73450c0955930295d34703e7ddbfc6973b7a121a":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","826d15444ddf61716dc768c229cd54b2c2ccce1c","d470c8182e92b264680e34081b75e70a9f2b3c89"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["e66a459d38c1c4a2f97128433dab546f683a9fed"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aa9b48fdb08e049dc94a4077226b510eb68f2b24"],"aa9b48fdb08e049dc94a4077226b510eb68f2b24":["d984627825732e682759c22df7a3b171a80f3812","73450c0955930295d34703e7ddbfc6973b7a121a","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","e9974f61802aea1d15849a1053f88f5e89fc32b4"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"e9974f61802aea1d15849a1053f88f5e89fc32b4":["73450c0955930295d34703e7ddbfc6973b7a121a"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["e66a459d38c1c4a2f97128433dab546f683a9fed","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e66a459d38c1c4a2f97128433dab546f683a9fed","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}