{"path":"solr/core/src/test/org/apache/solr/cloud/TestRandomFlRTGCloud.SubQueryValidator#assertRTGResults(Collection[FlValidator],SolrInputDocument,SolrDocument).mjava","commits":[{"id":"fbfb6ddad2ec9fa9128265741535450c3cbc4344","date":1470329280,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRandomFlRTGCloud.SubQueryValidator#assertRTGResults(Collection[FlValidator],SolrInputDocument,SolrDocument).mjava","pathOld":"/dev/null","sourceNew":"    public Collection<String> assertRTGResults(final Collection<FlValidator> validators,\n                                               final SolrInputDocument expected,\n                                               final SolrDocument actual) {\n      final Object origVal = expected.getFieldValue(SUBQ_FIELD);\n      final Object actualVal = actual.getFieldValue(SUBQ_KEY);\n      assertTrue(\"Expected a doclist: \" + actualVal,\n                 actualVal instanceof SolrDocumentList);\n      SolrDocumentList subList = (SolrDocumentList) actualVal;\n      assertTrue(\"sub query should have producted at least one result (this doc)\",\n                 1 <= subList.getNumFound());\n      for (SolrDocument subDoc : subList) {\n        assertEquals(\"orig doc value doesn't match subquery doc value\",\n                     origVal, subDoc.getFirstValue(SUBQ_FIELD));\n      }\n    \n      return Collections.<String>singleton(SUBQ_KEY);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3237bc9583fd899fcf68bae4cc834095f5c911bf","date":1470710919,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRandomFlRTGCloud.SubQueryValidator#assertRTGResults(Collection[FlValidator],SolrInputDocument,SolrDocument).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRandomFlRTGCloud.SubQueryValidator#assertRTGResults(Collection[FlValidator],SolrInputDocument,SolrDocument).mjava","sourceNew":"    public Collection<String> assertRTGResults(final Collection<FlValidator> validators,\n                                               final SolrInputDocument expected,\n                                               final SolrDocument actual) {\n      final int compVal = assertParseInt(\"expected id\", expected.getFieldValue(\"id\"));\n      \n      final Object actualVal = actual.getFieldValue(SUBQ_KEY);\n      assertTrue(\"Expected a doclist: \" + actualVal,\n                 actualVal instanceof SolrDocumentList);\n      assertTrue(\"should be at most 2 docs in doc list: \" + actualVal,\n                 ((SolrDocumentList) actualVal).getNumFound() <= 2);\n      \n      for (SolrDocument subDoc : (SolrDocumentList) actualVal) {\n        final int subDocIdVal = assertParseInt(\"subquery id\", subDoc.getFirstValue(\"id\"));\n        assertTrue(\"subDocId=\"+subDocIdVal+\" not in valid range for id=\"+compVal+\" (expected \"\n                   + (compVal-1) + \" or \" + (compVal-2) + \")\",\n                   ((subDocIdVal < compVal) && ((compVal-2) <= subDocIdVal)));\n        \n      }\n    \n      return Collections.<String>singleton(SUBQ_KEY);\n    }\n\n","sourceOld":"    public Collection<String> assertRTGResults(final Collection<FlValidator> validators,\n                                               final SolrInputDocument expected,\n                                               final SolrDocument actual) {\n      final Object origVal = expected.getFieldValue(SUBQ_FIELD);\n      final Object actualVal = actual.getFieldValue(SUBQ_KEY);\n      assertTrue(\"Expected a doclist: \" + actualVal,\n                 actualVal instanceof SolrDocumentList);\n      SolrDocumentList subList = (SolrDocumentList) actualVal;\n      assertTrue(\"sub query should have producted at least one result (this doc)\",\n                 1 <= subList.getNumFound());\n      for (SolrDocument subDoc : subList) {\n        assertEquals(\"orig doc value doesn't match subquery doc value\",\n                     origVal, subDoc.getFirstValue(SUBQ_FIELD));\n      }\n    \n      return Collections.<String>singleton(SUBQ_KEY);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bca25eefa1f2205e2b0ef713701dc3a0fecd702","date":1470810578,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRandomFlRTGCloud.SubQueryValidator#assertRTGResults(Collection[FlValidator],SolrInputDocument,SolrDocument).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRandomFlRTGCloud.SubQueryValidator#assertRTGResults(Collection[FlValidator],SolrInputDocument,SolrDocument).mjava","sourceNew":"    public Collection<String> assertRTGResults(final Collection<FlValidator> validators,\n                                               final SolrInputDocument expected,\n                                               final SolrDocument actual) {\n      final int compVal = assertParseInt(\"expected id\", expected.getFieldValue(\"id\"));\n      \n      final Object actualVal = actual.getFieldValue(SUBQ_KEY);\n      assertTrue(\"Expected a doclist: \" + actualVal,\n                 actualVal instanceof SolrDocumentList);\n      assertTrue(\"should be at most 2 docs in doc list: \" + actualVal,\n                 ((SolrDocumentList) actualVal).getNumFound() <= 2);\n      \n      for (SolrDocument subDoc : (SolrDocumentList) actualVal) {\n        final int subDocIdVal = assertParseInt(\"subquery id\", subDoc.getFirstValue(\"id\"));\n        assertTrue(\"subDocId=\"+subDocIdVal+\" not in valid range for id=\"+compVal+\" (expected \"\n                   + (compVal-1) + \" or \" + (compVal-2) + \")\",\n                   ((subDocIdVal < compVal) && ((compVal-2) <= subDocIdVal)));\n        \n      }\n    \n      return Collections.<String>singleton(SUBQ_KEY);\n    }\n\n","sourceOld":"    public Collection<String> assertRTGResults(final Collection<FlValidator> validators,\n                                               final SolrInputDocument expected,\n                                               final SolrDocument actual) {\n      final Object origVal = expected.getFieldValue(SUBQ_FIELD);\n      final Object actualVal = actual.getFieldValue(SUBQ_KEY);\n      assertTrue(\"Expected a doclist: \" + actualVal,\n                 actualVal instanceof SolrDocumentList);\n      SolrDocumentList subList = (SolrDocumentList) actualVal;\n      assertTrue(\"sub query should have producted at least one result (this doc)\",\n                 1 <= subList.getNumFound());\n      for (SolrDocument subDoc : subList) {\n        assertEquals(\"orig doc value doesn't match subquery doc value\",\n                     origVal, subDoc.getFirstValue(SUBQ_FIELD));\n      }\n    \n      return Collections.<String>singleton(SUBQ_KEY);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRandomFlRTGCloud.SubQueryValidator#assertRTGResults(Collection[FlValidator],SolrInputDocument,SolrDocument).mjava","pathOld":"/dev/null","sourceNew":"    public Collection<String> assertRTGResults(final Collection<FlValidator> validators,\n                                               final SolrInputDocument expected,\n                                               final SolrDocument actual) {\n      final int compVal = assertParseInt(\"expected id\", expected.getFieldValue(\"id\"));\n      \n      final Object actualVal = actual.getFieldValue(SUBQ_KEY);\n      assertTrue(\"Expected a doclist: \" + actualVal,\n                 actualVal instanceof SolrDocumentList);\n      assertTrue(\"should be at most 2 docs in doc list: \" + actualVal,\n                 ((SolrDocumentList) actualVal).getNumFound() <= 2);\n      \n      for (SolrDocument subDoc : (SolrDocumentList) actualVal) {\n        final int subDocIdVal = assertParseInt(\"subquery id\", subDoc.getFirstValue(\"id\"));\n        assertTrue(\"subDocId=\"+subDocIdVal+\" not in valid range for id=\"+compVal+\" (expected \"\n                   + (compVal-1) + \" or \" + (compVal-2) + \")\",\n                   ((subDocIdVal < compVal) && ((compVal-2) <= subDocIdVal)));\n        \n      }\n    \n      return Collections.<String>singleton(SUBQ_KEY);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRandomFlRTGCloud.SubQueryValidator#assertRTGResults(Collection[FlValidator],SolrInputDocument,SolrDocument).mjava","pathOld":"/dev/null","sourceNew":"    public Collection<String> assertRTGResults(final Collection<FlValidator> validators,\n                                               final SolrInputDocument expected,\n                                               final SolrDocument actual) {\n      final int compVal = assertParseInt(\"expected id\", expected.getFieldValue(\"id\"));\n      \n      final Object actualVal = actual.getFieldValue(SUBQ_KEY);\n      assertTrue(\"Expected a doclist: \" + actualVal,\n                 actualVal instanceof SolrDocumentList);\n      assertTrue(\"should be at most 2 docs in doc list: \" + actualVal,\n                 ((SolrDocumentList) actualVal).getNumFound() <= 2);\n      \n      for (SolrDocument subDoc : (SolrDocumentList) actualVal) {\n        final int subDocIdVal = assertParseInt(\"subquery id\", subDoc.getFirstValue(\"id\"));\n        assertTrue(\"subDocId=\"+subDocIdVal+\" not in valid range for id=\"+compVal+\" (expected \"\n                   + (compVal-1) + \" or \" + (compVal-2) + \")\",\n                   ((subDocIdVal < compVal) && ((compVal-2) <= subDocIdVal)));\n        \n      }\n    \n      return Collections.<String>singleton(SUBQ_KEY);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["fbfb6ddad2ec9fa9128265741535450c3cbc4344","3237bc9583fd899fcf68bae4cc834095f5c911bf"],"fbfb6ddad2ec9fa9128265741535450c3cbc4344":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"3237bc9583fd899fcf68bae4cc834095f5c911bf":["fbfb6ddad2ec9fa9128265741535450c3cbc4344"]},"commit2Childs":{"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fbfb6ddad2ec9fa9128265741535450c3cbc4344":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702","3237bc9583fd899fcf68bae4cc834095f5c911bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fbfb6ddad2ec9fa9128265741535450c3cbc4344","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"3237bc9583fd899fcf68bae4cc834095f5c911bf":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}