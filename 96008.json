{"path":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesRewriteMethod#testRegexps().mjava","commits":[{"id":"2713584a660051cd646423be682771e3bbd99985","date":1425046322,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesRewriteMethod#testRegexps().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocTermOrdsRewriteMethod#testRegexps().mjava","sourceNew":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      if (VERBOSE) {\n        System.out.println(\"TEST: regexp=\" + reg);\n      }\n      assertSame(reg);\n    }\n  }\n\n","sourceOld":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      if (VERBOSE) {\n        System.out.println(\"TEST: regexp=\" + reg);\n      }\n      assertSame(reg);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":1,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesRewriteMethod#testRegexps().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocTermOrdsRewriteMethod#testRegexps().mjava","sourceNew":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      if (VERBOSE) {\n        System.out.println(\"TEST: regexp=\" + reg);\n      }\n      assertSame(reg);\n    }\n  }\n\n","sourceOld":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      if (VERBOSE) {\n        System.out.println(\"TEST: regexp=\" + reg);\n      }\n      assertSame(reg);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2713584a660051cd646423be682771e3bbd99985"],"2713584a660051cd646423be682771e3bbd99985":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2713584a660051cd646423be682771e3bbd99985"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"2713584a660051cd646423be682771e3bbd99985":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2713584a660051cd646423be682771e3bbd99985"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}