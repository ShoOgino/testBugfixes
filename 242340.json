{"path":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/util/BinaryDictionaryWriter#writeDictionary(Path).mjava","commits":[{"id":"e3010cab237afb0b81c042f263115756e3cc6d67","date":1564503244,"type":1,"author":"Namgyu Kim","isMerge":false,"pathNew":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/util/BinaryDictionaryWriter#writeDictionary(Path).mjava","pathOld":"lucene/analysis/nori/src/tools/java/org/apache/lucene/analysis/ko/util/BinaryDictionaryWriter#writeDictionary(String).mjava","sourceNew":"  private void writeDictionary(Path path) throws IOException {\n    Files.createDirectories(path.getParent());\n    try (OutputStream os = Files.newOutputStream(path);\n         OutputStream bos = new BufferedOutputStream(os)) {\n      final DataOutput out = new OutputStreamDataOutput(bos);\n      CodecUtil.writeHeader(out, BinaryDictionary.DICT_HEADER, BinaryDictionary.VERSION);\n      out.writeVInt(buffer.position());\n      final WritableByteChannel channel = Channels.newChannel(bos);\n      // Write Buffer\n      buffer.flip();  // set position to 0, set limit to current position\n      channel.write(buffer);\n      assert buffer.remaining() == 0L;\n    }\n  }\n\n","sourceOld":"  protected void writeDictionary(String filename) throws IOException {\n    new File(filename).getParentFile().mkdirs();\n    final FileOutputStream os = new FileOutputStream(filename);\n    try {\n      final DataOutput out = new OutputStreamDataOutput(os);\n      CodecUtil.writeHeader(out, BinaryDictionary.DICT_HEADER, BinaryDictionary.VERSION);\n      out.writeVInt(buffer.position());\n      final WritableByteChannel channel = Channels.newChannel(os);\n      // Write Buffer\n      buffer.flip();  // set position to 0, set limit to current position\n      channel.write(buffer);\n      assert buffer.remaining() == 0L;\n    } finally {\n      os.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":1,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/util/BinaryDictionaryWriter#writeDictionary(Path).mjava","pathOld":"lucene/analysis/nori/src/tools/java/org/apache/lucene/analysis/ko/util/BinaryDictionaryWriter#writeDictionary(String).mjava","sourceNew":"  private void writeDictionary(Path path) throws IOException {\n    Files.createDirectories(path.getParent());\n    try (OutputStream os = Files.newOutputStream(path);\n         OutputStream bos = new BufferedOutputStream(os)) {\n      final DataOutput out = new OutputStreamDataOutput(bos);\n      CodecUtil.writeHeader(out, BinaryDictionary.DICT_HEADER, BinaryDictionary.VERSION);\n      out.writeVInt(buffer.position());\n      final WritableByteChannel channel = Channels.newChannel(bos);\n      // Write Buffer\n      buffer.flip();  // set position to 0, set limit to current position\n      channel.write(buffer);\n      assert buffer.remaining() == 0L;\n    }\n  }\n\n","sourceOld":"  protected void writeDictionary(String filename) throws IOException {\n    new File(filename).getParentFile().mkdirs();\n    final FileOutputStream os = new FileOutputStream(filename);\n    try {\n      final DataOutput out = new OutputStreamDataOutput(os);\n      CodecUtil.writeHeader(out, BinaryDictionary.DICT_HEADER, BinaryDictionary.VERSION);\n      out.writeVInt(buffer.position());\n      final WritableByteChannel channel = Channels.newChannel(os);\n      // Write Buffer\n      buffer.flip();  // set position to 0, set limit to current position\n      channel.write(buffer);\n      assert buffer.remaining() == 0L;\n    } finally {\n      os.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3010cab237afb0b81c042f263115756e3cc6d67":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8061ddd97f3352007d927dae445884a6f3d857b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e3010cab237afb0b81c042f263115756e3cc6d67"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e3010cab237afb0b81c042f263115756e3cc6d67"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e3010cab237afb0b81c042f263115756e3cc6d67","f8061ddd97f3352007d927dae445884a6f3d857b"],"e3010cab237afb0b81c042f263115756e3cc6d67":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}