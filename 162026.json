{"path":"lucene/src/java/org/apache/lucene/util/FixedBitSet#clear(int,int).mjava","commits":[{"id":"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f","date":1310403131,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/FixedBitSet#clear(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Clears a range of bits.\n   *\n   * @param startIndex lower index\n   * @param endIndex one-past the last bit to clear\n   */\n  public void clear(int startIndex, int endIndex) {\n    assert startIndex >= 0 && startIndex < numBits;\n    assert endIndex >= 0 && endIndex <= numBits;\n    if (endIndex <= startIndex) {\n      return;\n    }\n\n    int startWord = startIndex >> 6;\n    int endWord = (endIndex-1) >> 6;\n\n    long startmask = -1L << startIndex;\n    long endmask = -1L >>> -endIndex;  // 64-(endIndex&0x3f) is the same as -endIndex due to wrap\n\n    // invert masks since we are clearing\n    startmask = ~startmask;\n    endmask = ~endmask;\n\n    if (startWord == endWord) {\n      bits[startWord] &= (startmask | endmask);\n      return;\n    }\n\n    bits[startWord] &= startmask;\n    Arrays.fill(bits, startWord+1, endWord, 0L);\n    bits[endWord] &= endmask;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#clear(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/FixedBitSet#clear(int,int).mjava","sourceNew":"  /** Clears a range of bits.\n   *\n   * @param startIndex lower index\n   * @param endIndex one-past the last bit to clear\n   */\n  public void clear(int startIndex, int endIndex) {\n    assert startIndex >= 0 && startIndex < numBits;\n    assert endIndex >= 0 && endIndex <= numBits;\n    if (endIndex <= startIndex) {\n      return;\n    }\n\n    int startWord = startIndex >> 6;\n    int endWord = (endIndex-1) >> 6;\n\n    long startmask = -1L << startIndex;\n    long endmask = -1L >>> -endIndex;  // 64-(endIndex&0x3f) is the same as -endIndex due to wrap\n\n    // invert masks since we are clearing\n    startmask = ~startmask;\n    endmask = ~endmask;\n\n    if (startWord == endWord) {\n      bits[startWord] &= (startmask | endmask);\n      return;\n    }\n\n    bits[startWord] &= startmask;\n    Arrays.fill(bits, startWord+1, endWord, 0L);\n    bits[endWord] &= endmask;\n  }\n\n","sourceOld":"  /** Clears a range of bits.\n   *\n   * @param startIndex lower index\n   * @param endIndex one-past the last bit to clear\n   */\n  public void clear(int startIndex, int endIndex) {\n    assert startIndex >= 0 && startIndex < numBits;\n    assert endIndex >= 0 && endIndex <= numBits;\n    if (endIndex <= startIndex) {\n      return;\n    }\n\n    int startWord = startIndex >> 6;\n    int endWord = (endIndex-1) >> 6;\n\n    long startmask = -1L << startIndex;\n    long endmask = -1L >>> -endIndex;  // 64-(endIndex&0x3f) is the same as -endIndex due to wrap\n\n    // invert masks since we are clearing\n    startmask = ~startmask;\n    endmask = ~endmask;\n\n    if (startWord == endWord) {\n      bits[startWord] &= (startmask | endmask);\n      return;\n    }\n\n    bits[startWord] &= startmask;\n    Arrays.fill(bits, startWord+1, endWord, 0L);\n    bits[endWord] &= endmask;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f"],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}