{"path":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedReturn(String,String,String[]).mjava","commits":[{"id":"46dc9ac8b3e748407baaef82453138ff3974480c","date":1484789241,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedReturn(String,String,String[]).mjava","pathOld":"/dev/null","sourceNew":"  private void testPointFieldMultiValuedReturn(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    assertU(commit());\n    String[] expected = new String[11];\n    String[] expected2 = new String[11];\n    expected[0] = \"//*[@numFound='10']\"; \n    expected2[0] = \"//*[@numFound='10']\"; \n    for (int i = 1; i <= 10; i++) {\n      expected[i] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[i-1] + \"']\";\n      expected2[i] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[i + 9] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + fieldName), expected);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + fieldName), expected2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["02cc739d6621fdfc3991bde01ae8ef5cbdb46925"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedReturn(String,String,String[]).mjava","pathOld":"/dev/null","sourceNew":"  private void testPointFieldMultiValuedReturn(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    assertU(commit());\n    String[] expected = new String[11];\n    String[] expected2 = new String[11];\n    expected[0] = \"//*[@numFound='10']\"; \n    expected2[0] = \"//*[@numFound='10']\"; \n    for (int i = 1; i <= 10; i++) {\n      expected[i] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[i-1] + \"']\";\n      expected2[i] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[i + 9] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + fieldName), expected);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + fieldName), expected2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"744b111b17d15d490a648eb021bfa240e7f11556","date":1487008069,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedReturn(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedReturn(String,String,String[]).mjava","sourceNew":"  private void testPointFieldMultiValuedReturn(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    // Check using RTG before commit\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    // Check using RTG after commit\n    assertU(commit());\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    String[] expected = new String[11];\n    String[] expected2 = new String[11];\n    expected[0] = \"//*[@numFound='10']\"; \n    expected2[0] = \"//*[@numFound='10']\"; \n    for (int i = 1; i <= 10; i++) {\n      expected[i] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[i-1] + \"']\";\n      expected2[i] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[i + 9] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + fieldName), expected);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + fieldName), expected2);\n  }\n\n","sourceOld":"  private void testPointFieldMultiValuedReturn(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    assertU(commit());\n    String[] expected = new String[11];\n    String[] expected2 = new String[11];\n    expected[0] = \"//*[@numFound='10']\"; \n    expected2[0] = \"//*[@numFound='10']\"; \n    for (int i = 1; i <= 10; i++) {\n      expected[i] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[i-1] + \"']\";\n      expected2[i] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[i + 9] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + fieldName), expected);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + fieldName), expected2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"022a4de90e0479b604264ca9c2e134c996454ab3","date":1487118265,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedReturn(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedReturn(String,String,String[]).mjava","sourceNew":"  private void testPointFieldMultiValuedReturn(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    // Check using RTG before commit\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    // Check using RTG after commit\n    assertU(commit());\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    String[] expected = new String[11];\n    String[] expected2 = new String[11];\n    expected[0] = \"//*[@numFound='10']\"; \n    expected2[0] = \"//*[@numFound='10']\"; \n    for (int i = 1; i <= 10; i++) {\n      expected[i] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[i-1] + \"']\";\n      expected2[i] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[i + 9] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + fieldName), expected);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + fieldName), expected2);\n  }\n\n","sourceOld":"  private void testPointFieldMultiValuedReturn(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    assertU(commit());\n    String[] expected = new String[11];\n    String[] expected2 = new String[11];\n    expected[0] = \"//*[@numFound='10']\"; \n    expected2[0] = \"//*[@numFound='10']\"; \n    for (int i = 1; i <= 10; i++) {\n      expected[i] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[i-1] + \"']\";\n      expected2[i] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[i + 9] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + fieldName), expected);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + fieldName), expected2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96","date":1487122334,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedReturn(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedReturn(String,String,String[]).mjava","sourceNew":"  private void testPointFieldMultiValuedReturn(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    assertU(commit());\n    String[] expected = new String[11];\n    String[] expected2 = new String[11];\n    expected[0] = \"//*[@numFound='10']\"; \n    expected2[0] = \"//*[@numFound='10']\"; \n    for (int i = 1; i <= 10; i++) {\n      expected[i] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[i-1] + \"']\";\n      expected2[i] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[i + 9] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + fieldName), expected);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + fieldName), expected2);\n  }\n\n","sourceOld":"  private void testPointFieldMultiValuedReturn(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    // Check using RTG before commit\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    // Check using RTG after commit\n    assertU(commit());\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    String[] expected = new String[11];\n    String[] expected2 = new String[11];\n    expected[0] = \"//*[@numFound='10']\"; \n    expected2[0] = \"//*[@numFound='10']\"; \n    for (int i = 1; i <= 10; i++) {\n      expected[i] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[i-1] + \"']\";\n      expected2[i] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[i + 9] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + fieldName), expected);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + fieldName), expected2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"897b06b1364bd1f658a8be7591e43f0851458e7f","date":1487123008,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedReturn(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedReturn(String,String,String[]).mjava","sourceNew":"  private void testPointFieldMultiValuedReturn(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    // Check using RTG before commit\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    // Check using RTG after commit\n    assertU(commit());\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    String[] expected = new String[11];\n    String[] expected2 = new String[11];\n    expected[0] = \"//*[@numFound='10']\"; \n    expected2[0] = \"//*[@numFound='10']\"; \n    for (int i = 1; i <= 10; i++) {\n      expected[i] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[i-1] + \"']\";\n      expected2[i] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[i + 9] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + fieldName), expected);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + fieldName), expected2);\n  }\n\n","sourceOld":"  private void testPointFieldMultiValuedReturn(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    assertU(commit());\n    String[] expected = new String[11];\n    String[] expected2 = new String[11];\n    expected[0] = \"//*[@numFound='10']\"; \n    expected2[0] = \"//*[@numFound='10']\"; \n    for (int i = 1; i <= 10; i++) {\n      expected[i] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[i-1] + \"']\";\n      expected2[i] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[i + 9] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + fieldName), expected);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + fieldName), expected2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"330274305237bd6f93e7ee021669f797394127b1","date":1489510162,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedReturn(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedReturn(String,String,String[]).mjava","sourceNew":"  private void testPointFieldMultiValuedReturn(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    // Check using RTG before commit\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    // Check using RTG after commit\n    assertU(commit());\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    String[] expected = new String[21];\n    expected[0] = \"//*[@numFound='10']\"; \n    for (int i = 1; i <= 10; i++) {\n      // checks for each doc's two values aren't next to eachother in array, but that doesn't matter for correctness\n      expected[i] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[i-1] + \"']\";\n      expected[i+10] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[i + 9] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + fieldName, \"sort\",\"id asc\"), expected);\n  }\n\n","sourceOld":"  private void testPointFieldMultiValuedReturn(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    // Check using RTG before commit\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    // Check using RTG after commit\n    assertU(commit());\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    String[] expected = new String[11];\n    String[] expected2 = new String[11];\n    expected[0] = \"//*[@numFound='10']\"; \n    expected2[0] = \"//*[@numFound='10']\"; \n    for (int i = 1; i <= 10; i++) {\n      expected[i] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[i-1] + \"']\";\n      expected2[i] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[i + 9] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + fieldName), expected);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + fieldName), expected2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"02cc739d6621fdfc3991bde01ae8ef5cbdb46925","date":1489651910,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedReturn(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedReturn(String,String,String[]).mjava","sourceNew":"  private void testPointFieldMultiValuedReturn(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    // Check using RTG before commit\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    // Check using RTG after commit\n    assertU(commit());\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    String[] expected = new String[21];\n    expected[0] = \"//*[@numFound='10']\"; \n    for (int i = 1; i <= 10; i++) {\n      // checks for each doc's two values aren't next to eachother in array, but that doesn't matter for correctness\n      expected[i] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[i-1] + \"']\";\n      expected[i+10] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[i + 9] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + fieldName, \"sort\",\"id asc\"), expected);\n  }\n\n","sourceOld":"  private void testPointFieldMultiValuedReturn(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    // Check using RTG before commit\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    // Check using RTG after commit\n    assertU(commit());\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    String[] expected = new String[11];\n    String[] expected2 = new String[11];\n    expected[0] = \"//*[@numFound='10']\"; \n    expected2[0] = \"//*[@numFound='10']\"; \n    for (int i = 1; i <= 10; i++) {\n      expected[i] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[i-1] + \"']\";\n      expected2[i] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[i + 9] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + fieldName), expected);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + fieldName), expected2);\n  }\n\n","bugFix":["46dc9ac8b3e748407baaef82453138ff3974480c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedReturn(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedReturn(String,String,String[]).mjava","sourceNew":"  private void testPointFieldMultiValuedReturn(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    // Check using RTG before commit\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    // Check using RTG after commit\n    assertU(commit());\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    String[] expected = new String[21];\n    expected[0] = \"//*[@numFound='10']\"; \n    for (int i = 1; i <= 10; i++) {\n      // checks for each doc's two values aren't next to eachother in array, but that doesn't matter for correctness\n      expected[i] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[i-1] + \"']\";\n      expected[i+10] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[i + 9] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + fieldName, \"sort\",\"id asc\"), expected);\n  }\n\n","sourceOld":"  private void testPointFieldMultiValuedReturn(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    // Check using RTG before commit\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    // Check using RTG after commit\n    assertU(commit());\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    String[] expected = new String[11];\n    String[] expected2 = new String[11];\n    expected[0] = \"//*[@numFound='10']\"; \n    expected2[0] = \"//*[@numFound='10']\"; \n    for (int i = 1; i <= 10; i++) {\n      expected[i] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[i-1] + \"']\";\n      expected2[i] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[i + 9] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + fieldName), expected);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + fieldName), expected2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac5a6354a5800dd1ade225010d614eeb8acf9152","date":1499731103,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedReturn(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedReturn(String,String,String[]).mjava","sourceNew":"  private void testPointFieldMultiValuedReturn(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    // Check using RTG before commit\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    // Check using RTG after commit\n    assertU(commit());\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    String[] expected = new String[21];\n    expected[0] = \"//*[@numFound='10']\"; \n    for (int i = 1; i <= 10; i++) {\n      // checks for each doc's two values aren't next to eachother in array, but that doesn't matter for correctness\n      expected[i] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i-1] + \"']\";\n      expected[i+10] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i + 9] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + fieldName, \"sort\",\"id asc\"), expected);\n  }\n\n","sourceOld":"  private void testPointFieldMultiValuedReturn(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    // Check using RTG before commit\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    // Check using RTG after commit\n    assertU(commit());\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    String[] expected = new String[21];\n    expected[0] = \"//*[@numFound='10']\"; \n    for (int i = 1; i <= 10; i++) {\n      // checks for each doc's two values aren't next to eachother in array, but that doesn't matter for correctness\n      expected[i] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[i-1] + \"']\";\n      expected[i+10] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[i + 9] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + fieldName, \"sort\",\"id asc\"), expected);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f9a989a32a073c55e3aef6f807a3474184bbcf49","date":1499930209,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedReturn(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedReturn(String,String,String[]).mjava","sourceNew":"  private void testPointFieldMultiValuedReturn(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    // Check using RTG before commit\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    // Check using RTG after commit\n    assertU(commit());\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    String[] expected = new String[21];\n    expected[0] = \"//*[@numFound='10']\"; \n    for (int i = 1; i <= 10; i++) {\n      // checks for each doc's two values aren't next to eachother in array, but that doesn't matter for correctness\n      expected[i] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i-1] + \"']\";\n      expected[i+10] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i + 9] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + fieldName, \"sort\",\"id asc\"), expected);\n  }\n\n","sourceOld":"  private void testPointFieldMultiValuedReturn(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    // Check using RTG before commit\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    // Check using RTG after commit\n    assertU(commit());\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    String[] expected = new String[21];\n    expected[0] = \"//*[@numFound='10']\"; \n    for (int i = 1; i <= 10; i++) {\n      // checks for each doc's two values aren't next to eachother in array, but that doesn't matter for correctness\n      expected[i] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[i-1] + \"']\";\n      expected[i+10] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[i + 9] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + fieldName, \"sort\",\"id asc\"), expected);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb569fd721c41eafc2a2d788499a7df490c7f1a5","date":1499930871,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedReturn(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedReturn(String,String,String[]).mjava","sourceNew":"  private void testPointFieldMultiValuedReturn(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    // Check using RTG before commit\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    // Check using RTG after commit\n    assertU(commit());\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    String[] expected = new String[21];\n    expected[0] = \"//*[@numFound='10']\"; \n    for (int i = 1; i <= 10; i++) {\n      // checks for each doc's two values aren't next to eachother in array, but that doesn't matter for correctness\n      expected[i] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i-1] + \"']\";\n      expected[i+10] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i + 9] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + fieldName, \"sort\",\"id asc\"), expected);\n  }\n\n","sourceOld":"  private void testPointFieldMultiValuedReturn(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    // Check using RTG before commit\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    // Check using RTG after commit\n    assertU(commit());\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    String[] expected = new String[21];\n    expected[0] = \"//*[@numFound='10']\"; \n    for (int i = 1; i <= 10; i++) {\n      // checks for each doc's two values aren't next to eachother in array, but that doesn't matter for correctness\n      expected[i] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[1][.='\" + numbers[i-1] + \"']\";\n      expected[i+10] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[2][.='\" + numbers[i + 9] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + fieldName, \"sort\",\"id asc\"), expected);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e844d4f9ba6804f10747d7e51e83a9a8868c94","date":1500054875,"type":5,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestPointFieldMultiValuedReturn(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedReturn(String,String,String[]).mjava","sourceNew":"  private void doTestPointFieldMultiValuedReturn(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    // Check using RTG before commit\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    // Check using RTG after commit\n    assertU(commit());\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    String[] expected = new String[21];\n    expected[0] = \"//*[@numFound='10']\"; \n    for (int i = 1; i <= 10; i++) {\n      // checks for each doc's two values aren't next to eachother in array, but that doesn't matter for correctness\n      expected[i] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i-1] + \"']\";\n      expected[i+10] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i + 9] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + fieldName, \"sort\",\"id asc\"), expected);\n  }\n\n","sourceOld":"  private void testPointFieldMultiValuedReturn(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    // Check using RTG before commit\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    // Check using RTG after commit\n    assertU(commit());\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    String[] expected = new String[21];\n    expected[0] = \"//*[@numFound='10']\"; \n    for (int i = 1; i <= 10; i++) {\n      // checks for each doc's two values aren't next to eachother in array, but that doesn't matter for correctness\n      expected[i] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i-1] + \"']\";\n      expected[i+10] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i + 9] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + fieldName, \"sort\",\"id asc\"), expected);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aaf90fc29510e72665ac7934f34c3d1c25efad64","date":1500354819,"type":5,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestPointFieldMultiValuedReturn(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedReturn(String,String,String[]).mjava","sourceNew":"  private void doTestPointFieldMultiValuedReturn(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    // Check using RTG before commit\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    // Check using RTG after commit\n    assertU(commit());\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    String[] expected = new String[21];\n    expected[0] = \"//*[@numFound='10']\"; \n    for (int i = 1; i <= 10; i++) {\n      // checks for each doc's two values aren't next to eachother in array, but that doesn't matter for correctness\n      expected[i] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i-1] + \"']\";\n      expected[i+10] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i + 9] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + fieldName, \"sort\",\"id asc\"), expected);\n  }\n\n","sourceOld":"  private void testPointFieldMultiValuedReturn(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    // Check using RTG before commit\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    // Check using RTG after commit\n    assertU(commit());\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    String[] expected = new String[21];\n    expected[0] = \"//*[@numFound='10']\"; \n    for (int i = 1; i <= 10; i++) {\n      // checks for each doc's two values aren't next to eachother in array, but that doesn't matter for correctness\n      expected[i] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i-1] + \"']\";\n      expected[i+10] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i + 9] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + fieldName, \"sort\",\"id asc\"), expected);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"897b06b1364bd1f658a8be7591e43f0851458e7f":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"46dc9ac8b3e748407baaef82453138ff3974480c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":["ab68488225b6a6c357dda72ed11dedca9914a192","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"17e844d4f9ba6804f10747d7e51e83a9a8868c94":["ac5a6354a5800dd1ade225010d614eeb8acf9152"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["ab68488225b6a6c357dda72ed11dedca9914a192","ac5a6354a5800dd1ade225010d614eeb8acf9152"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","46dc9ac8b3e748407baaef82453138ff3974480c"],"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["022a4de90e0479b604264ca9c2e134c996454ab3"],"022a4de90e0479b604264ca9c2e134c996454ab3":["46dc9ac8b3e748407baaef82453138ff3974480c","744b111b17d15d490a648eb021bfa240e7f11556"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":["fb569fd721c41eafc2a2d788499a7df490c7f1a5","17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"744b111b17d15d490a648eb021bfa240e7f11556":["46dc9ac8b3e748407baaef82453138ff3974480c"],"ac5a6354a5800dd1ade225010d614eeb8acf9152":["330274305237bd6f93e7ee021669f797394127b1"],"ab68488225b6a6c357dda72ed11dedca9914a192":["897b06b1364bd1f658a8be7591e43f0851458e7f","02cc739d6621fdfc3991bde01ae8ef5cbdb46925"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"330274305237bd6f93e7ee021669f797394127b1":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"02cc739d6621fdfc3991bde01ae8ef5cbdb46925":["897b06b1364bd1f658a8be7591e43f0851458e7f"]},"commit2Childs":{"897b06b1364bd1f658a8be7591e43f0851458e7f":["ab68488225b6a6c357dda72ed11dedca9914a192","330274305237bd6f93e7ee021669f797394127b1","02cc739d6621fdfc3991bde01ae8ef5cbdb46925"],"46dc9ac8b3e748407baaef82453138ff3974480c":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","022a4de90e0479b604264ca9c2e134c996454ab3","744b111b17d15d490a648eb021bfa240e7f11556"],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":["aaf90fc29510e72665ac7934f34c3d1c25efad64"],"17e844d4f9ba6804f10747d7e51e83a9a8868c94":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["fb569fd721c41eafc2a2d788499a7df490c7f1a5"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"022a4de90e0479b604264ca9c2e134c996454ab3":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["46dc9ac8b3e748407baaef82453138ff3974480c","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"744b111b17d15d490a648eb021bfa240e7f11556":["022a4de90e0479b604264ca9c2e134c996454ab3"],"ab68488225b6a6c357dda72ed11dedca9914a192":["fb569fd721c41eafc2a2d788499a7df490c7f1a5","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"ac5a6354a5800dd1ade225010d614eeb8acf9152":["17e844d4f9ba6804f10747d7e51e83a9a8868c94","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"330274305237bd6f93e7ee021669f797394127b1":["ac5a6354a5800dd1ade225010d614eeb8acf9152"],"02cc739d6621fdfc3991bde01ae8ef5cbdb46925":["ab68488225b6a6c357dda72ed11dedca9914a192"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}