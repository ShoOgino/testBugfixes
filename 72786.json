{"path":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader#readIndexHeader(IndexInput).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader#readIndexHeader(IndexInput).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsReader#readIndexHeader(IndexInput).mjava","sourceNew":"  protected void readIndexHeader(IndexInput input) throws IOException {\n    CodecUtil.checkHeader(input, BlockTreeTermsWriter.TERMS_INDEX_CODEC_NAME,\n                          BlockTreeTermsWriter.TERMS_INDEX_VERSION_START,\n                          BlockTreeTermsWriter.TERMS_INDEX_VERSION_CURRENT);\n    indexDirOffset = input.readLong();    \n  }\n\n","sourceOld":"  protected void readIndexHeader(IndexInput input) throws IOException {\n    CodecUtil.checkHeader(input, BlockTreeTermsWriter.TERMS_INDEX_CODEC_NAME,\n                          BlockTreeTermsWriter.TERMS_INDEX_VERSION_START,\n                          BlockTreeTermsWriter.TERMS_INDEX_VERSION_CURRENT);\n    indexDirOffset = input.readLong();    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"519435fc0d6082a1b8081f9492b714f716877437","date":1348258553,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader#readIndexHeader(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader#readIndexHeader(IndexInput).mjava","sourceNew":"  /** Reads index file header. */\n  protected void readIndexHeader(IndexInput input) throws IOException {\n    CodecUtil.checkHeader(input, BlockTreeTermsWriter.TERMS_INDEX_CODEC_NAME,\n                          BlockTreeTermsWriter.TERMS_INDEX_VERSION_START,\n                          BlockTreeTermsWriter.TERMS_INDEX_VERSION_CURRENT);\n    indexDirOffset = input.readLong();    \n  }\n\n","sourceOld":"  protected void readIndexHeader(IndexInput input) throws IOException {\n    CodecUtil.checkHeader(input, BlockTreeTermsWriter.TERMS_INDEX_CODEC_NAME,\n                          BlockTreeTermsWriter.TERMS_INDEX_VERSION_START,\n                          BlockTreeTermsWriter.TERMS_INDEX_VERSION_CURRENT);\n    indexDirOffset = input.readLong();    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bfcba4bd0c8918a6db1993d4e7818f08cc2a827","date":1349788355,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader#readIndexHeader(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader#readIndexHeader(IndexInput).mjava","sourceNew":"  /** Reads index file header. */\n  private int readIndexHeader(IndexInput input) throws IOException {\n    int version = CodecUtil.checkHeader(input, BlockTreeTermsWriter.TERMS_INDEX_CODEC_NAME,\n                          BlockTreeTermsWriter.TERMS_INDEX_VERSION_START,\n                          BlockTreeTermsWriter.TERMS_INDEX_VERSION_CURRENT);\n    if (version < BlockTreeTermsWriter.TERMS_INDEX_VERSION_APPEND_ONLY) {\n      indexDirOffset = input.readLong(); \n    }\n    return version;\n  }\n\n","sourceOld":"  /** Reads index file header. */\n  protected void readIndexHeader(IndexInput input) throws IOException {\n    CodecUtil.checkHeader(input, BlockTreeTermsWriter.TERMS_INDEX_CODEC_NAME,\n                          BlockTreeTermsWriter.TERMS_INDEX_VERSION_START,\n                          BlockTreeTermsWriter.TERMS_INDEX_VERSION_CURRENT);\n    indexDirOffset = input.readLong();    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader#readIndexHeader(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader#readIndexHeader(IndexInput).mjava","sourceNew":"  /** Reads index file header. */\n  private int readIndexHeader(IndexInput input) throws IOException {\n    int version = CodecUtil.checkHeader(input, BlockTreeTermsWriter.TERMS_INDEX_CODEC_NAME,\n                          BlockTreeTermsWriter.VERSION_START,\n                          BlockTreeTermsWriter.VERSION_CURRENT);\n    if (version < BlockTreeTermsWriter.VERSION_APPEND_ONLY) {\n      indexDirOffset = input.readLong(); \n    }\n    return version;\n  }\n\n","sourceOld":"  /** Reads index file header. */\n  private int readIndexHeader(IndexInput input) throws IOException {\n    int version = CodecUtil.checkHeader(input, BlockTreeTermsWriter.TERMS_INDEX_CODEC_NAME,\n                          BlockTreeTermsWriter.TERMS_INDEX_VERSION_START,\n                          BlockTreeTermsWriter.TERMS_INDEX_VERSION_CURRENT);\n    if (version < BlockTreeTermsWriter.TERMS_INDEX_VERSION_APPEND_ONLY) {\n      indexDirOffset = input.readLong(); \n    }\n    return version;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader#readIndexHeader(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader#readIndexHeader(IndexInput).mjava","sourceNew":"  /** Reads index file header. */\n  private int readIndexHeader(IndexInput input) throws IOException {\n    int version = CodecUtil.checkHeader(input, BlockTreeTermsWriter.TERMS_INDEX_CODEC_NAME,\n                          BlockTreeTermsWriter.VERSION_START,\n                          BlockTreeTermsWriter.VERSION_CURRENT);\n    if (version < BlockTreeTermsWriter.VERSION_APPEND_ONLY) {\n      indexDirOffset = input.readLong(); \n    }\n    return version;\n  }\n\n","sourceOld":"  /** Reads index file header. */\n  private int readIndexHeader(IndexInput input) throws IOException {\n    int version = CodecUtil.checkHeader(input, BlockTreeTermsWriter.TERMS_INDEX_CODEC_NAME,\n                          BlockTreeTermsWriter.TERMS_INDEX_VERSION_START,\n                          BlockTreeTermsWriter.TERMS_INDEX_VERSION_CURRENT);\n    if (version < BlockTreeTermsWriter.TERMS_INDEX_VERSION_APPEND_ONLY) {\n      indexDirOffset = input.readLong(); \n    }\n    return version;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ad80176d91a6f70fe93880e43dfd697dc4e63ed","date":1400176913,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsReader#readIndexHeader(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader#readIndexHeader(IndexInput).mjava","sourceNew":"  /** Reads index file header. */\n  private int readIndexHeader(IndexInput input) throws IOException {\n    int version = CodecUtil.checkHeader(input, BlockTreeTermsWriter.TERMS_INDEX_CODEC_NAME,\n                          BlockTreeTermsWriter.VERSION_START,\n                          BlockTreeTermsWriter.VERSION_CURRENT);\n    if (version < BlockTreeTermsWriter.VERSION_APPEND_ONLY) {\n      indexDirOffset = input.readLong(); \n    }\n    return version;\n  }\n\n","sourceOld":"  /** Reads index file header. */\n  private int readIndexHeader(IndexInput input) throws IOException {\n    int version = CodecUtil.checkHeader(input, BlockTreeTermsWriter.TERMS_INDEX_CODEC_NAME,\n                          BlockTreeTermsWriter.VERSION_START,\n                          BlockTreeTermsWriter.VERSION_CURRENT);\n    if (version < BlockTreeTermsWriter.VERSION_APPEND_ONLY) {\n      indexDirOffset = input.readLong(); \n    }\n    return version;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsReader#readIndexHeader(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader#readIndexHeader(IndexInput).mjava","sourceNew":"  /** Reads index file header. */\n  private int readIndexHeader(IndexInput input) throws IOException {\n    int version = CodecUtil.checkHeader(input, BlockTreeTermsWriter.TERMS_INDEX_CODEC_NAME,\n                          BlockTreeTermsWriter.VERSION_START,\n                          BlockTreeTermsWriter.VERSION_CURRENT);\n    if (version < BlockTreeTermsWriter.VERSION_APPEND_ONLY) {\n      indexDirOffset = input.readLong(); \n    }\n    return version;\n  }\n\n","sourceOld":"  /** Reads index file header. */\n  private int readIndexHeader(IndexInput input) throws IOException {\n    int version = CodecUtil.checkHeader(input, BlockTreeTermsWriter.TERMS_INDEX_CODEC_NAME,\n                          BlockTreeTermsWriter.VERSION_START,\n                          BlockTreeTermsWriter.VERSION_CURRENT);\n    if (version < BlockTreeTermsWriter.VERSION_APPEND_ONLY) {\n      indexDirOffset = input.readLong(); \n    }\n    return version;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["5bfcba4bd0c8918a6db1993d4e7818f08cc2a827","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["5bfcba4bd0c8918a6db1993d4e7818f08cc2a827"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["1f3b037cd083286b2af89f96e768f85dcd8072d6","5ad80176d91a6f70fe93880e43dfd697dc4e63ed"],"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"519435fc0d6082a1b8081f9492b714f716877437":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bfcba4bd0c8918a6db1993d4e7818f08cc2a827":["519435fc0d6082a1b8081f9492b714f716877437"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d637064d608752565d4f9f41b2497dfdfdde50e"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["5eb2511ababf862ea11e10761c70ee560cd84510","4d637064d608752565d4f9f41b2497dfdfdde50e","5ad80176d91a6f70fe93880e43dfd697dc4e63ed"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"519435fc0d6082a1b8081f9492b714f716877437":["5bfcba4bd0c8918a6db1993d4e7818f08cc2a827"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["519435fc0d6082a1b8081f9492b714f716877437"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5bfcba4bd0c8918a6db1993d4e7818f08cc2a827":["5eb2511ababf862ea11e10761c70ee560cd84510","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}