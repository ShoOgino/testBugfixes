{"path":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#segString(Directory).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#segString(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MergePolicy.OneMerge#segString(Directory).mjava","sourceNew":"    public String segString(Directory dir) {\n      StringBuilder b = new StringBuilder();\n      final int numSegments = segments.size();\n      for(int i=0;i<numSegments;i++) {\n        if (i > 0) b.append(' ');\n        b.append(segments.get(i).toString(dir, 0));\n      }\n      if (info != null)\n        b.append(\" into \").append(info.name);\n      if (maxNumSegments != -1)\n        b.append(\" [maxNumSegments=\" + maxNumSegments + \"]\");\n      if (aborted) {\n        b.append(\" [ABORTED]\");\n      }\n      return b.toString();\n    }\n\n","sourceOld":"    public String segString(Directory dir) {\n      StringBuilder b = new StringBuilder();\n      final int numSegments = segments.size();\n      for(int i=0;i<numSegments;i++) {\n        if (i > 0) b.append(' ');\n        b.append(segments.get(i).toString(dir, 0));\n      }\n      if (info != null)\n        b.append(\" into \").append(info.name);\n      if (maxNumSegments != -1)\n        b.append(\" [maxNumSegments=\" + maxNumSegments + \"]\");\n      if (aborted) {\n        b.append(\" [ABORTED]\");\n      }\n      return b.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#segString(Directory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#segString(Directory).mjava","sourceNew":"    public String segString(Directory dir) {\n      StringBuilder b = new StringBuilder();\n      final int numSegments = segments.size();\n      for(int i=0;i<numSegments;i++) {\n        if (i > 0) b.append(' ');\n        b.append(segments.get(i).toString(dir, 0));\n      }\n      if (info != null) {\n        b.append(\" into \").append(info.info.name);\n      }\n      if (maxNumSegments != -1)\n        b.append(\" [maxNumSegments=\" + maxNumSegments + \"]\");\n      if (aborted) {\n        b.append(\" [ABORTED]\");\n      }\n      return b.toString();\n    }\n\n","sourceOld":"    public String segString(Directory dir) {\n      StringBuilder b = new StringBuilder();\n      final int numSegments = segments.size();\n      for(int i=0;i<numSegments;i++) {\n        if (i > 0) b.append(' ');\n        b.append(segments.get(i).toString(dir, 0));\n      }\n      if (info != null)\n        b.append(\" into \").append(info.name);\n      if (maxNumSegments != -1)\n        b.append(\" [maxNumSegments=\" + maxNumSegments + \"]\");\n      if (aborted) {\n        b.append(\" [ABORTED]\");\n      }\n      return b.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#segString(Directory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#segString(Directory).mjava","sourceNew":"    public String segString(Directory dir) {\n      StringBuilder b = new StringBuilder();\n      final int numSegments = segments.size();\n      for(int i=0;i<numSegments;i++) {\n        if (i > 0) b.append(' ');\n        b.append(segments.get(i).toString(dir, 0));\n      }\n      if (info != null) {\n        b.append(\" into \").append(info.info.name);\n      }\n      if (maxNumSegments != -1)\n        b.append(\" [maxNumSegments=\" + maxNumSegments + \"]\");\n      if (aborted) {\n        b.append(\" [ABORTED]\");\n      }\n      return b.toString();\n    }\n\n","sourceOld":"    public String segString(Directory dir) {\n      StringBuilder b = new StringBuilder();\n      final int numSegments = segments.size();\n      for(int i=0;i<numSegments;i++) {\n        if (i > 0) b.append(' ');\n        b.append(segments.get(i).toString(dir, 0));\n      }\n      if (info != null)\n        b.append(\" into \").append(info.name);\n      if (maxNumSegments != -1)\n        b.append(\" [maxNumSegments=\" + maxNumSegments + \"]\");\n      if (aborted) {\n        b.append(\" [ABORTED]\");\n      }\n      return b.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c14aed69f37b57db63b1fccc0740b17060a08f2b","date":1348227091,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#segString(Directory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#segString(Directory).mjava","sourceNew":"    /** Returns a readable description of the current merge\n     *  state. */\n    public String segString(Directory dir) {\n      StringBuilder b = new StringBuilder();\n      final int numSegments = segments.size();\n      for(int i=0;i<numSegments;i++) {\n        if (i > 0) b.append(' ');\n        b.append(segments.get(i).toString(dir, 0));\n      }\n      if (info != null) {\n        b.append(\" into \").append(info.info.name);\n      }\n      if (maxNumSegments != -1)\n        b.append(\" [maxNumSegments=\" + maxNumSegments + \"]\");\n      if (aborted) {\n        b.append(\" [ABORTED]\");\n      }\n      return b.toString();\n    }\n\n","sourceOld":"    public String segString(Directory dir) {\n      StringBuilder b = new StringBuilder();\n      final int numSegments = segments.size();\n      for(int i=0;i<numSegments;i++) {\n        if (i > 0) b.append(' ');\n        b.append(segments.get(i).toString(dir, 0));\n      }\n      if (info != null) {\n        b.append(\" into \").append(info.info.name);\n      }\n      if (maxNumSegments != -1)\n        b.append(\" [maxNumSegments=\" + maxNumSegments + \"]\");\n      if (aborted) {\n        b.append(\" [ABORTED]\");\n      }\n      return b.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39cc7fae4e4c6be7c74434527ee9852592db649f","date":1412761164,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#segString(Directory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#segString(Directory).mjava","sourceNew":"    /** Returns a readable description of the current merge\n     *  state. */\n    public String segString(Directory dir) {\n      StringBuilder b = new StringBuilder();\n      final int numSegments = segments.size();\n      for(int i=0;i<numSegments;i++) {\n        if (i > 0) {\n          b.append(' ');\n        }\n        b.append(segments.get(i).toString(dir, 0));\n      }\n      if (info != null) {\n        b.append(\" into \").append(info.info.name);\n      }\n      if (maxNumSegments != -1) {\n        b.append(\" [maxNumSegments=\" + maxNumSegments + \"]\");\n      }\n      if (aborted) {\n        b.append(\" [ABORTED]\");\n      }\n      return b.toString();\n    }\n\n","sourceOld":"    /** Returns a readable description of the current merge\n     *  state. */\n    public String segString(Directory dir) {\n      StringBuilder b = new StringBuilder();\n      final int numSegments = segments.size();\n      for(int i=0;i<numSegments;i++) {\n        if (i > 0) b.append(' ');\n        b.append(segments.get(i).toString(dir, 0));\n      }\n      if (info != null) {\n        b.append(\" into \").append(info.info.name);\n      }\n      if (maxNumSegments != -1)\n        b.append(\" [maxNumSegments=\" + maxNumSegments + \"]\");\n      if (aborted) {\n        b.append(\" [ABORTED]\");\n      }\n      return b.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#segString(Directory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#segString(Directory).mjava","sourceNew":"    /** Returns a readable description of the current merge\n     *  state. */\n    public String segString(Directory dir) {\n      StringBuilder b = new StringBuilder();\n      final int numSegments = segments.size();\n      for(int i=0;i<numSegments;i++) {\n        if (i > 0) {\n          b.append(' ');\n        }\n        b.append(segments.get(i).toString(dir, 0));\n      }\n      if (info != null) {\n        b.append(\" into \").append(info.info.name);\n      }\n      if (maxNumSegments != -1) {\n        b.append(\" [maxNumSegments=\" + maxNumSegments + \"]\");\n      }\n      if (aborted) {\n        b.append(\" [ABORTED]\");\n      }\n      return b.toString();\n    }\n\n","sourceOld":"    /** Returns a readable description of the current merge\n     *  state. */\n    public String segString(Directory dir) {\n      StringBuilder b = new StringBuilder();\n      final int numSegments = segments.size();\n      for(int i=0;i<numSegments;i++) {\n        if (i > 0) b.append(' ');\n        b.append(segments.get(i).toString(dir, 0));\n      }\n      if (info != null) {\n        b.append(\" into \").append(info.info.name);\n      }\n      if (maxNumSegments != -1)\n        b.append(\" [maxNumSegments=\" + maxNumSegments + \"]\");\n      if (aborted) {\n        b.append(\" [ABORTED]\");\n      }\n      return b.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5faf65b6692f15cca0f87bf8666c87899afc619f","date":1420468108,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#segString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#segString(Directory).mjava","sourceNew":"    /** Returns a readable description of the current merge\n     *  state. */\n    public String segString() {\n      StringBuilder b = new StringBuilder();\n      final int numSegments = segments.size();\n      for(int i=0;i<numSegments;i++) {\n        if (i > 0) {\n          b.append(' ');\n        }\n        b.append(segments.get(i).toString());\n      }\n      if (info != null) {\n        b.append(\" into \").append(info.info.name);\n      }\n      if (maxNumSegments != -1) {\n        b.append(\" [maxNumSegments=\" + maxNumSegments + \"]\");\n      }\n      if (rateLimiter.getAbort()) {\n        b.append(\" [ABORTED]\");\n      }\n      return b.toString();\n    }\n\n","sourceOld":"    /** Returns a readable description of the current merge\n     *  state. */\n    public String segString(Directory dir) {\n      StringBuilder b = new StringBuilder();\n      final int numSegments = segments.size();\n      for(int i=0;i<numSegments;i++) {\n        if (i > 0) {\n          b.append(' ');\n        }\n        b.append(segments.get(i).toString(dir, 0));\n      }\n      if (info != null) {\n        b.append(\" into \").append(info.info.name);\n      }\n      if (maxNumSegments != -1) {\n        b.append(\" [maxNumSegments=\" + maxNumSegments + \"]\");\n      }\n      if (aborted) {\n        b.append(\" [ABORTED]\");\n      }\n      return b.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"39cc7fae4e4c6be7c74434527ee9852592db649f":["c14aed69f37b57db63b1fccc0740b17060a08f2b"],"55980207f1977bd1463465de1659b821347e2fa8":["c14aed69f37b57db63b1fccc0740b17060a08f2b","39cc7fae4e4c6be7c74434527ee9852592db649f"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","9d153abcf92dc5329d98571a8c3035df9bd80648"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d153abcf92dc5329d98571a8c3035df9bd80648":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["39cc7fae4e4c6be7c74434527ee9852592db649f"],"c14aed69f37b57db63b1fccc0740b17060a08f2b":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5faf65b6692f15cca0f87bf8666c87899afc619f"]},"commit2Childs":{"39cc7fae4e4c6be7c74434527ee9852592db649f":["55980207f1977bd1463465de1659b821347e2fa8","5faf65b6692f15cca0f87bf8666c87899afc619f"],"55980207f1977bd1463465de1659b821347e2fa8":[],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["c14aed69f37b57db63b1fccc0740b17060a08f2b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","9d153abcf92dc5329d98571a8c3035df9bd80648"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c14aed69f37b57db63b1fccc0740b17060a08f2b":["39cc7fae4e4c6be7c74434527ee9852592db649f","55980207f1977bd1463465de1659b821347e2fa8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}