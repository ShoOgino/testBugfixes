{"path":"src/java/org/apache/solr/spelling/SolrSpellChecker#getSuggestions(Collection[Token],IndexReader,int,boolean,boolean).mjava","commits":[{"id":"84b6c001c19319635b53dd80ee9fc1ba9a5b4574","date":1213883214,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/spelling/SolrSpellChecker#getSuggestions(Collection[Token],IndexReader,int,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get suggestions for the given query.  Tokenizes the query using a field appropriate Analyzer.  The {@link SpellingResult#getSuggestions()} suggestions must be ordered by \n   * best suggestion first\n   *\n   * @param tokens          The Tokens to be spell checked.\n   * @param reader          The (optional) IndexReader.  If there is not IndexReader, than extendedResults are not possible\n   * @param count The maximum number of suggestions to return\n   * @param onlyMorePopular  TODO\n   * @param extendedResults  TODO\n   * @return\n   * @throws IOException\n   */\n  public abstract SpellingResult getSuggestions(Collection<Token> tokens, IndexReader reader, int count,\n                                                boolean onlyMorePopular, boolean extendedResults)\n          throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"750ae94a53c48546afa6bcf9b172428e09933da0","date":1216334670,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/spelling/SolrSpellChecker#getSuggestions(Collection[Token],IndexReader,int,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/spelling/SolrSpellChecker#getSuggestions(Collection[Token],IndexReader,int,boolean,boolean).mjava","sourceNew":"  /**\n   * Get suggestions for the given query.  Tokenizes the query using a field appropriate Analyzer.  The {@link SpellingResult#getSuggestions()} suggestions must be ordered by \n   * best suggestion first\n   *\n   * @param tokens          The Tokens to be spell checked.\n   * @param reader          The (optional) IndexReader.  If there is not IndexReader, than extendedResults are not possible\n   * @param count The maximum number of suggestions to return\n   * @param onlyMorePopular  TODO\n   * @param extendedResults  TODO\n   * @throws IOException\n   */\n  public abstract SpellingResult getSuggestions(Collection<Token> tokens, IndexReader reader, int count,\n                                                boolean onlyMorePopular, boolean extendedResults)\n          throws IOException;\n\n","sourceOld":"  /**\n   * Get suggestions for the given query.  Tokenizes the query using a field appropriate Analyzer.  The {@link SpellingResult#getSuggestions()} suggestions must be ordered by \n   * best suggestion first\n   *\n   * @param tokens          The Tokens to be spell checked.\n   * @param reader          The (optional) IndexReader.  If there is not IndexReader, than extendedResults are not possible\n   * @param count The maximum number of suggestions to return\n   * @param onlyMorePopular  TODO\n   * @param extendedResults  TODO\n   * @return\n   * @throws IOException\n   */\n  public abstract SpellingResult getSuggestions(Collection<Token> tokens, IndexReader reader, int count,\n                                                boolean onlyMorePopular, boolean extendedResults)\n          throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00fc15ea1c4eed67f5d090c697cc57ede49f70a8","date":1218745675,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/solr/spelling/SolrSpellChecker#getSuggestions(Collection[Token],IndexReader,int,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/spelling/SolrSpellChecker#getSuggestions(Collection[Token],IndexReader,int,boolean,boolean).mjava","sourceNew":"  /**\n   * Get suggestions for the given query.  Tokenizes the query using a field appropriate Analyzer.\n   * The {@link SpellingResult#getSuggestions()} suggestions must be ordered by best suggestion first.\n   *\n   * @param tokens          The Tokens to be spell checked.\n   * @param reader          The (optional) IndexReader.  If there is not IndexReader, than extendedResults are not possible\n   * @param count The maximum number of suggestions to return\n   * @param onlyMorePopular  TODO\n   * @param extendedResults  TODO\n   * @throws IOException\n   */\n  public abstract SpellingResult getSuggestions(Collection<Token> tokens, IndexReader reader, int count,\n                                                boolean onlyMorePopular, boolean extendedResults)\n          throws IOException;\n\n","sourceOld":"  /**\n   * Get suggestions for the given query.  Tokenizes the query using a field appropriate Analyzer.  The {@link SpellingResult#getSuggestions()} suggestions must be ordered by \n   * best suggestion first\n   *\n   * @param tokens          The Tokens to be spell checked.\n   * @param reader          The (optional) IndexReader.  If there is not IndexReader, than extendedResults are not possible\n   * @param count The maximum number of suggestions to return\n   * @param onlyMorePopular  TODO\n   * @param extendedResults  TODO\n   * @throws IOException\n   */\n  public abstract SpellingResult getSuggestions(Collection<Token> tokens, IndexReader reader, int count,\n                                                boolean onlyMorePopular, boolean extendedResults)\n          throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/spelling/SolrSpellChecker#getSuggestions(Collection[Token],IndexReader,int,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/spelling/SolrSpellChecker#getSuggestions(Collection[Token],IndexReader,int,boolean,boolean).mjava","sourceNew":"  /**\n   * Get suggestions for the given query.  Tokenizes the query using a field appropriate Analyzer.\n   * The {@link SpellingResult#getSuggestions()} suggestions must be ordered by best suggestion first.\n   *\n   * @param tokens          The Tokens to be spell checked.\n   * @param reader          The (optional) IndexReader.  If there is not IndexReader, than extendedResults are not possible\n   * @param count The maximum number of suggestions to return\n   * @param onlyMorePopular  TODO\n   * @param extendedResults  TODO\n   * @throws IOException\n   */\n  public abstract SpellingResult getSuggestions(Collection<Token> tokens, IndexReader reader, int count,\n                                                boolean onlyMorePopular, boolean extendedResults)\n          throws IOException;\n\n","sourceOld":"  /**\n   * Get suggestions for the given query.  Tokenizes the query using a field appropriate Analyzer.\n   * The {@link SpellingResult#getSuggestions()} suggestions must be ordered by best suggestion first.\n   *\n   * @param tokens          The Tokens to be spell checked.\n   * @param reader          The (optional) IndexReader.  If there is not IndexReader, than extendedResults are not possible\n   * @param count The maximum number of suggestions to return\n   * @param onlyMorePopular  TODO\n   * @param extendedResults  TODO\n   * @throws IOException\n   */\n  public abstract SpellingResult getSuggestions(Collection<Token> tokens, IndexReader reader, int count,\n                                                boolean onlyMorePopular, boolean extendedResults)\n          throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"750ae94a53c48546afa6bcf9b172428e09933da0":["84b6c001c19319635b53dd80ee9fc1ba9a5b4574"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"84b6c001c19319635b53dd80ee9fc1ba9a5b4574":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["00fc15ea1c4eed67f5d090c697cc57ede49f70a8"],"00fc15ea1c4eed67f5d090c697cc57ede49f70a8":["750ae94a53c48546afa6bcf9b172428e09933da0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"750ae94a53c48546afa6bcf9b172428e09933da0":["00fc15ea1c4eed67f5d090c697cc57ede49f70a8"],"84b6c001c19319635b53dd80ee9fc1ba9a5b4574":["750ae94a53c48546afa6bcf9b172428e09933da0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["84b6c001c19319635b53dd80ee9fc1ba9a5b4574"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"00fc15ea1c4eed67f5d090c697cc57ede49f70a8":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}