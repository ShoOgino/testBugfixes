{"path":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestPointFieldMultiValuedReturn(String,String,String[]).mjava","commits":[{"id":"17e844d4f9ba6804f10747d7e51e83a9a8868c94","date":1500054875,"type":1,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestPointFieldMultiValuedReturn(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedReturn(String,String,String[]).mjava","sourceNew":"  private void doTestPointFieldMultiValuedReturn(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    // Check using RTG before commit\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    // Check using RTG after commit\n    assertU(commit());\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    String[] expected = new String[21];\n    expected[0] = \"//*[@numFound='10']\"; \n    for (int i = 1; i <= 10; i++) {\n      // checks for each doc's two values aren't next to eachother in array, but that doesn't matter for correctness\n      expected[i] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i-1] + \"']\";\n      expected[i+10] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i + 9] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + fieldName, \"sort\",\"id asc\"), expected);\n  }\n\n","sourceOld":"  private void testPointFieldMultiValuedReturn(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    // Check using RTG before commit\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    // Check using RTG after commit\n    assertU(commit());\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    String[] expected = new String[21];\n    expected[0] = \"//*[@numFound='10']\"; \n    for (int i = 1; i <= 10; i++) {\n      // checks for each doc's two values aren't next to eachother in array, but that doesn't matter for correctness\n      expected[i] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i-1] + \"']\";\n      expected[i+10] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i + 9] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + fieldName, \"sort\",\"id asc\"), expected);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaf90fc29510e72665ac7934f34c3d1c25efad64","date":1500354819,"type":1,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestPointFieldMultiValuedReturn(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedReturn(String,String,String[]).mjava","sourceNew":"  private void doTestPointFieldMultiValuedReturn(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    // Check using RTG before commit\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    // Check using RTG after commit\n    assertU(commit());\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    String[] expected = new String[21];\n    expected[0] = \"//*[@numFound='10']\"; \n    for (int i = 1; i <= 10; i++) {\n      // checks for each doc's two values aren't next to eachother in array, but that doesn't matter for correctness\n      expected[i] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i-1] + \"']\";\n      expected[i+10] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i + 9] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + fieldName, \"sort\",\"id asc\"), expected);\n  }\n\n","sourceOld":"  private void testPointFieldMultiValuedReturn(String fieldName, String type, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(fieldName).getType() instanceof PointField);\n    for (int i=9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, numbers[i], fieldName, numbers[i+10]));\n    }\n    // Check using RTG before commit\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    // Check using RTG after commit\n    assertU(commit());\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < 10; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i] + \"']\",\n            \"//doc/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i+10] + \"']\",\n            \"count(//doc/arr[@name='\" + fieldName + \"']/\" + type + \")=2\");\n      }\n    }\n    String[] expected = new String[21];\n    expected[0] = \"//*[@numFound='10']\"; \n    for (int i = 1; i <= 10; i++) {\n      // checks for each doc's two values aren't next to eachother in array, but that doesn't matter for correctness\n      expected[i] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i-1] + \"']\";\n      expected[i+10] = \"//result/doc[\" + i + \"]/arr[@name='\" + fieldName + \"']/\" + type + \"[.='\" + numbers[i + 9] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + fieldName, \"sort\",\"id asc\"), expected);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aaf90fc29510e72665ac7934f34c3d1c25efad64":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e844d4f9ba6804f10747d7e51e83a9a8868c94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e844d4f9ba6804f10747d7e51e83a9a8868c94"]},"commit2Childs":{"aaf90fc29510e72665ac7934f34c3d1c25efad64":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aaf90fc29510e72665ac7934f34c3d1c25efad64","17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"17e844d4f9ba6804f10747d7e51e83a9a8868c94":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}