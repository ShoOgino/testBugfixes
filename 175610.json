{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#buildLookup(Class[#-extends-Lookup],Input[]).mjava","commits":[{"id":"41aee74b5f91a096e3fd950f4a336bc763f0e7a7","date":1381772070,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#buildLookup(Class[#-extends-Lookup],Input[]).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#buildLookup(Class[#-extends-Lookup],TermFreqPayload[]).mjava","sourceNew":"  /**\n   * Create {@link Lookup} instance and populate it. \n   */\n  private Lookup buildLookup(Class<? extends Lookup> cls, Input[] input) throws Exception {\n    Lookup lookup = null;\n    try {\n      lookup = cls.newInstance();\n    } catch (InstantiationException e) {\n      Analyzer a = new MockAnalyzer(random, MockTokenizer.KEYWORD, false);\n      if (cls == AnalyzingInfixSuggester.class) {\n        lookup = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, _TestUtil.getTempDir(\"LookupBenchmarkTest\"), a);\n      } else {\n        Constructor<? extends Lookup> ctor = cls.getConstructor(Analyzer.class);\n        lookup = ctor.newInstance(a);\n      }\n    }\n    lookup.build(new InputArrayIterator(input));\n    return lookup;\n  }\n\n","sourceOld":"  /**\n   * Create {@link Lookup} instance and populate it. \n   */\n  private Lookup buildLookup(Class<? extends Lookup> cls, TermFreqPayload[] input) throws Exception {\n    Lookup lookup = null;\n    try {\n      lookup = cls.newInstance();\n    } catch (InstantiationException e) {\n      Analyzer a = new MockAnalyzer(random, MockTokenizer.KEYWORD, false);\n      if (cls == AnalyzingInfixSuggester.class) {\n        lookup = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, _TestUtil.getTempDir(\"LookupBenchmarkTest\"), a);\n      } else {\n        Constructor<? extends Lookup> ctor = cls.getConstructor(Analyzer.class);\n        lookup = ctor.newInstance(a);\n      }\n    }\n    lookup.build(new TermFreqPayloadArrayIterator(input));\n    return lookup;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#buildLookup(Class[#-extends-Lookup],Input[]).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#buildLookup(Class[#-extends-Lookup],Input[]).mjava","sourceNew":"  /**\n   * Create {@link Lookup} instance and populate it. \n   */\n  private Lookup buildLookup(Class<? extends Lookup> cls, Input[] input) throws Exception {\n    Lookup lookup = null;\n    try {\n      lookup = cls.newInstance();\n    } catch (InstantiationException e) {\n      Analyzer a = new MockAnalyzer(random, MockTokenizer.KEYWORD, false);\n      if (cls == AnalyzingInfixSuggester.class) {\n        lookup = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, TestUtil.getTempDir(\"LookupBenchmarkTest\"), a);\n      } else {\n        Constructor<? extends Lookup> ctor = cls.getConstructor(Analyzer.class);\n        lookup = ctor.newInstance(a);\n      }\n    }\n    lookup.build(new InputArrayIterator(input));\n    return lookup;\n  }\n\n","sourceOld":"  /**\n   * Create {@link Lookup} instance and populate it. \n   */\n  private Lookup buildLookup(Class<? extends Lookup> cls, Input[] input) throws Exception {\n    Lookup lookup = null;\n    try {\n      lookup = cls.newInstance();\n    } catch (InstantiationException e) {\n      Analyzer a = new MockAnalyzer(random, MockTokenizer.KEYWORD, false);\n      if (cls == AnalyzingInfixSuggester.class) {\n        lookup = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, _TestUtil.getTempDir(\"LookupBenchmarkTest\"), a);\n      } else {\n        Constructor<? extends Lookup> ctor = cls.getConstructor(Analyzer.class);\n        lookup = ctor.newInstance(a);\n      }\n    }\n    lookup.build(new InputArrayIterator(input));\n    return lookup;\n  }\n\n","bugFix":null,"bugIntro":["4637747f71df783fc2014ef1f1e0418466e3bed6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f1e7da8a91a92330e8f04b171b83e655a4a25c31","date":1394125906,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#buildLookup(Class[#-extends-Lookup],Input[]).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#buildLookup(Class[#-extends-Lookup],Input[]).mjava","sourceNew":"  /**\n   * Create {@link Lookup} instance and populate it. \n   */\n  private Lookup buildLookup(Class<? extends Lookup> cls, Input[] input) throws Exception {\n    Lookup lookup = null;\n    try {\n      lookup = cls.newInstance();\n    } catch (InstantiationException e) {\n      Analyzer a = new MockAnalyzer(random, MockTokenizer.KEYWORD, false);\n      if (cls == AnalyzingInfixSuggester.class) {\n        lookup = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, FSDirectory.open(TestUtil.getTempDir(\"LookupBenchmarkTest\")), a);\n      } else {\n        Constructor<? extends Lookup> ctor = cls.getConstructor(Analyzer.class);\n        lookup = ctor.newInstance(a);\n      }\n    }\n    lookup.build(new InputArrayIterator(input));\n    return lookup;\n  }\n\n","sourceOld":"  /**\n   * Create {@link Lookup} instance and populate it. \n   */\n  private Lookup buildLookup(Class<? extends Lookup> cls, Input[] input) throws Exception {\n    Lookup lookup = null;\n    try {\n      lookup = cls.newInstance();\n    } catch (InstantiationException e) {\n      Analyzer a = new MockAnalyzer(random, MockTokenizer.KEYWORD, false);\n      if (cls == AnalyzingInfixSuggester.class) {\n        lookup = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, TestUtil.getTempDir(\"LookupBenchmarkTest\"), a);\n      } else {\n        Constructor<? extends Lookup> ctor = cls.getConstructor(Analyzer.class);\n        lookup = ctor.newInstance(a);\n      }\n    }\n    lookup.build(new InputArrayIterator(input));\n    return lookup;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4637747f71df783fc2014ef1f1e0418466e3bed6","date":1394196311,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#buildLookup(Class[#-extends-Lookup],Input[]).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#buildLookup(Class[#-extends-Lookup],Input[]).mjava","sourceNew":"  /**\n   * Create {@link Lookup} instance and populate it. \n   */\n  private Lookup buildLookup(Class<? extends Lookup> cls, Input[] input) throws Exception {\n    Lookup lookup = null;\n    try {\n      lookup = cls.newInstance();\n    } catch (InstantiationException e) {\n      Analyzer a = new MockAnalyzer(random, MockTokenizer.KEYWORD, false);\n      if (cls == AnalyzingInfixSuggester.class) {\n        lookup = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, FSDirectory.open(TestUtil.getTempDir(\"LookupBenchmarkTest\")), a);\n      } else {\n        Constructor<? extends Lookup> ctor = cls.getConstructor(Analyzer.class);\n        lookup = ctor.newInstance(a);\n      }\n    }\n    lookup.build(new InputArrayIterator(input));\n    return lookup;\n  }\n\n","sourceOld":"  /**\n   * Create {@link Lookup} instance and populate it. \n   */\n  private Lookup buildLookup(Class<? extends Lookup> cls, Input[] input) throws Exception {\n    Lookup lookup = null;\n    try {\n      lookup = cls.newInstance();\n    } catch (InstantiationException e) {\n      Analyzer a = new MockAnalyzer(random, MockTokenizer.KEYWORD, false);\n      if (cls == AnalyzingInfixSuggester.class) {\n        lookup = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, TestUtil.getTempDir(\"LookupBenchmarkTest\"), a);\n      } else {\n        Constructor<? extends Lookup> ctor = cls.getConstructor(Analyzer.class);\n        lookup = ctor.newInstance(a);\n      }\n    }\n    lookup.build(new InputArrayIterator(input));\n    return lookup;\n  }\n\n","bugFix":["6613659748fe4411a7dcf85266e55db1f95f7315"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#buildLookup(Class[#-extends-Lookup],Input[]).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#buildLookup(Class[#-extends-Lookup],Input[]).mjava","sourceNew":"  /**\n   * Create {@link Lookup} instance and populate it. \n   */\n  private Lookup buildLookup(Class<? extends Lookup> cls, Input[] input) throws Exception {\n    Lookup lookup = null;\n    try {\n      lookup = cls.newInstance();\n    } catch (InstantiationException e) {\n      Analyzer a = new MockAnalyzer(random, MockTokenizer.KEYWORD, false);\n      if (cls == AnalyzingInfixSuggester.class) {\n        lookup = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, FSDirectory.open(TestUtil.getTempDir(\"LookupBenchmarkTest\")), a);\n      } else {\n        Constructor<? extends Lookup> ctor = cls.getConstructor(Analyzer.class);\n        lookup = ctor.newInstance(a);\n      }\n    }\n    lookup.build(new InputArrayIterator(input));\n    return lookup;\n  }\n\n","sourceOld":"  /**\n   * Create {@link Lookup} instance and populate it. \n   */\n  private Lookup buildLookup(Class<? extends Lookup> cls, Input[] input) throws Exception {\n    Lookup lookup = null;\n    try {\n      lookup = cls.newInstance();\n    } catch (InstantiationException e) {\n      Analyzer a = new MockAnalyzer(random, MockTokenizer.KEYWORD, false);\n      if (cls == AnalyzingInfixSuggester.class) {\n        lookup = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, TestUtil.getTempDir(\"LookupBenchmarkTest\"), a);\n      } else {\n        Constructor<? extends Lookup> ctor = cls.getConstructor(Analyzer.class);\n        lookup = ctor.newInstance(a);\n      }\n    }\n    lookup.build(new InputArrayIterator(input));\n    return lookup;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#buildLookup(Class[#-extends-Lookup],Input[]).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#buildLookup(Class[#-extends-Lookup],Input[]).mjava","sourceNew":"  /**\n   * Create {@link Lookup} instance and populate it. \n   */\n  private Lookup buildLookup(Class<? extends Lookup> cls, Input[] input) throws Exception {\n    Lookup lookup = null;\n    try {\n      lookup = cls.newInstance();\n    } catch (InstantiationException e) {\n      Analyzer a = new MockAnalyzer(random, MockTokenizer.KEYWORD, false);\n      if (cls == AnalyzingInfixSuggester.class) {\n        lookup = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, FSDirectory.open(TestUtil.createTempDir(\"LookupBenchmarkTest\")), a);\n      } else {\n        Constructor<? extends Lookup> ctor = cls.getConstructor(Analyzer.class);\n        lookup = ctor.newInstance(a);\n      }\n    }\n    lookup.build(new InputArrayIterator(input));\n    return lookup;\n  }\n\n","sourceOld":"  /**\n   * Create {@link Lookup} instance and populate it. \n   */\n  private Lookup buildLookup(Class<? extends Lookup> cls, Input[] input) throws Exception {\n    Lookup lookup = null;\n    try {\n      lookup = cls.newInstance();\n    } catch (InstantiationException e) {\n      Analyzer a = new MockAnalyzer(random, MockTokenizer.KEYWORD, false);\n      if (cls == AnalyzingInfixSuggester.class) {\n        lookup = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, FSDirectory.open(TestUtil.getTempDir(\"LookupBenchmarkTest\")), a);\n      } else {\n        Constructor<? extends Lookup> ctor = cls.getConstructor(Analyzer.class);\n        lookup = ctor.newInstance(a);\n      }\n    }\n    lookup.build(new InputArrayIterator(input));\n    return lookup;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#buildLookup(Class[#-extends-Lookup],Input[]).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#buildLookup(Class[#-extends-Lookup],Input[]).mjava","sourceNew":"  /**\n   * Create {@link Lookup} instance and populate it. \n   */\n  private Lookup buildLookup(Class<? extends Lookup> cls, Input[] input) throws Exception {\n    Lookup lookup = null;\n    try {\n      lookup = cls.newInstance();\n    } catch (InstantiationException e) {\n      Analyzer a = new MockAnalyzer(random, MockTokenizer.KEYWORD, false);\n      if (cls == AnalyzingInfixSuggester.class) {\n        lookup = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, FSDirectory.open(createTempDir(\"LookupBenchmarkTest\")), a);\n      } else {\n        Constructor<? extends Lookup> ctor = cls.getConstructor(Analyzer.class);\n        lookup = ctor.newInstance(a);\n      }\n    }\n    lookup.build(new InputArrayIterator(input));\n    return lookup;\n  }\n\n","sourceOld":"  /**\n   * Create {@link Lookup} instance and populate it. \n   */\n  private Lookup buildLookup(Class<? extends Lookup> cls, Input[] input) throws Exception {\n    Lookup lookup = null;\n    try {\n      lookup = cls.newInstance();\n    } catch (InstantiationException e) {\n      Analyzer a = new MockAnalyzer(random, MockTokenizer.KEYWORD, false);\n      if (cls == AnalyzingInfixSuggester.class) {\n        lookup = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, FSDirectory.open(TestUtil.createTempDir(\"LookupBenchmarkTest\")), a);\n      } else {\n        Constructor<? extends Lookup> ctor = cls.getConstructor(Analyzer.class);\n        lookup = ctor.newInstance(a);\n      }\n    }\n    lookup.build(new InputArrayIterator(input));\n    return lookup;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#buildLookup(Class[#-extends-Lookup],Input[]).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#buildLookup(Class[#-extends-Lookup],Input[]).mjava","sourceNew":"  /**\n   * Create {@link Lookup} instance and populate it. \n   */\n  private Lookup buildLookup(Class<? extends Lookup> cls, Input[] input) throws Exception {\n    Lookup lookup = null;\n    try {\n      lookup = cls.newInstance();\n    } catch (InstantiationException e) {\n      Analyzer a = new MockAnalyzer(random, MockTokenizer.KEYWORD, false);\n      if (cls == AnalyzingInfixSuggester.class) {\n        lookup = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, FSDirectory.open(createTempDir(\"LookupBenchmarkTest\")), a);\n      } else {\n        Constructor<? extends Lookup> ctor = cls.getConstructor(Analyzer.class);\n        lookup = ctor.newInstance(a);\n      }\n    }\n    lookup.build(new InputArrayIterator(input));\n    return lookup;\n  }\n\n","sourceOld":"  /**\n   * Create {@link Lookup} instance and populate it. \n   */\n  private Lookup buildLookup(Class<? extends Lookup> cls, Input[] input) throws Exception {\n    Lookup lookup = null;\n    try {\n      lookup = cls.newInstance();\n    } catch (InstantiationException e) {\n      Analyzer a = new MockAnalyzer(random, MockTokenizer.KEYWORD, false);\n      if (cls == AnalyzingInfixSuggester.class) {\n        lookup = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, FSDirectory.open(TestUtil.getTempDir(\"LookupBenchmarkTest\")), a);\n      } else {\n        Constructor<? extends Lookup> ctor = cls.getConstructor(Analyzer.class);\n        lookup = ctor.newInstance(a);\n      }\n    }\n    lookup.build(new InputArrayIterator(input));\n    return lookup;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19e497fe4da591a79332da97681b8017d9c61165","date":1409030374,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#buildLookup(Class[#-extends-Lookup],Input[]).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#buildLookup(Class[#-extends-Lookup],Input[]).mjava","sourceNew":"  /**\n   * Create {@link Lookup} instance and populate it. \n   */\n  private Lookup buildLookup(Class<? extends Lookup> cls, Input[] input) throws Exception {\n    Lookup lookup = null;\n    try {\n      lookup = cls.newInstance();\n    } catch (InstantiationException e) {\n      Analyzer a = new MockAnalyzer(random, MockTokenizer.KEYWORD, false);\n      if (cls == AnalyzingInfixSuggester.class) {\n        lookup = new AnalyzingInfixSuggester(FSDirectory.open(createTempDir(\"LookupBenchmarkTest\")), a);\n      } else {\n        Constructor<? extends Lookup> ctor = cls.getConstructor(Analyzer.class);\n        lookup = ctor.newInstance(a);\n      }\n    }\n    lookup.build(new InputArrayIterator(input));\n    return lookup;\n  }\n\n","sourceOld":"  /**\n   * Create {@link Lookup} instance and populate it. \n   */\n  private Lookup buildLookup(Class<? extends Lookup> cls, Input[] input) throws Exception {\n    Lookup lookup = null;\n    try {\n      lookup = cls.newInstance();\n    } catch (InstantiationException e) {\n      Analyzer a = new MockAnalyzer(random, MockTokenizer.KEYWORD, false);\n      if (cls == AnalyzingInfixSuggester.class) {\n        lookup = new AnalyzingInfixSuggester(TEST_VERSION_CURRENT, FSDirectory.open(createTempDir(\"LookupBenchmarkTest\")), a);\n      } else {\n        Constructor<? extends Lookup> ctor = cls.getConstructor(Analyzer.class);\n        lookup = ctor.newInstance(a);\n      }\n    }\n    lookup.build(new InputArrayIterator(input));\n    return lookup;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ecf5fabef203b754287a16e743bd4f0eaec39de","date":1422444218,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#buildLookup(Class[#-extends-Lookup],Input[]).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#buildLookup(Class[#-extends-Lookup],Input[]).mjava","sourceNew":"  /**\n   * Create {@link Lookup} instance and populate it. \n   */\n  private Lookup buildLookup(Class<? extends Lookup> cls, Input[] input) throws Exception {\n    Lookup lookup = null;\n    try {\n      lookup = cls.newInstance();\n    } catch (InstantiationException e) {\n      Analyzer a = new MockAnalyzer(random, MockTokenizer.KEYWORD, false);\n      if (cls == AnalyzingInfixSuggester.class || cls == BlendedInfixSuggester.class) {\n        Constructor<? extends Lookup> ctor = cls.getConstructor(Directory.class, Analyzer.class);\n        lookup = ctor.newInstance(FSDirectory.open(createTempDir(\"LookupBenchmarkTest\")), a);\n      } else {\n        Constructor<? extends Lookup> ctor = cls.getConstructor(Analyzer.class);\n        lookup = ctor.newInstance(a);\n      }\n    }\n    lookup.build(new InputArrayIterator(input));\n    return lookup;\n  }\n\n","sourceOld":"  /**\n   * Create {@link Lookup} instance and populate it. \n   */\n  private Lookup buildLookup(Class<? extends Lookup> cls, Input[] input) throws Exception {\n    Lookup lookup = null;\n    try {\n      lookup = cls.newInstance();\n    } catch (InstantiationException e) {\n      Analyzer a = new MockAnalyzer(random, MockTokenizer.KEYWORD, false);\n      if (cls == AnalyzingInfixSuggester.class) {\n        lookup = new AnalyzingInfixSuggester(FSDirectory.open(createTempDir(\"LookupBenchmarkTest\")), a);\n      } else {\n        Constructor<? extends Lookup> ctor = cls.getConstructor(Analyzer.class);\n        lookup = ctor.newInstance(a);\n      }\n    }\n    lookup.build(new InputArrayIterator(input));\n    return lookup;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#buildLookup(Class[#-extends-Lookup],Input[]).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#buildLookup(Class[#-extends-Lookup],Input[]).mjava","sourceNew":"  /**\n   * Create {@link Lookup} instance and populate it. \n   */\n  private Lookup buildLookup(Class<? extends Lookup> cls, Input[] input) throws Exception {\n    Lookup lookup = null;\n    try {\n      lookup = cls.getConstructor().newInstance();\n    } catch (InstantiationException e) {\n      Analyzer a = new MockAnalyzer(random, MockTokenizer.KEYWORD, false);\n      if (cls == AnalyzingInfixSuggester.class || cls == BlendedInfixSuggester.class) {\n        Constructor<? extends Lookup> ctor = cls.getConstructor(Directory.class, Analyzer.class);\n        lookup = ctor.newInstance(FSDirectory.open(createTempDir(\"LookupBenchmarkTest\")), a);\n      } else {\n        Constructor<? extends Lookup> ctor = cls.getConstructor(Analyzer.class);\n        lookup = ctor.newInstance(a);\n      }\n    }\n    lookup.build(new InputArrayIterator(input));\n    return lookup;\n  }\n\n","sourceOld":"  /**\n   * Create {@link Lookup} instance and populate it. \n   */\n  private Lookup buildLookup(Class<? extends Lookup> cls, Input[] input) throws Exception {\n    Lookup lookup = null;\n    try {\n      lookup = cls.newInstance();\n    } catch (InstantiationException e) {\n      Analyzer a = new MockAnalyzer(random, MockTokenizer.KEYWORD, false);\n      if (cls == AnalyzingInfixSuggester.class || cls == BlendedInfixSuggester.class) {\n        Constructor<? extends Lookup> ctor = cls.getConstructor(Directory.class, Analyzer.class);\n        lookup = ctor.newInstance(FSDirectory.open(createTempDir(\"LookupBenchmarkTest\")), a);\n      } else {\n        Constructor<? extends Lookup> ctor = cls.getConstructor(Analyzer.class);\n        lookup = ctor.newInstance(a);\n      }\n    }\n    lookup.build(new InputArrayIterator(input));\n    return lookup;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae67e1f82a53594208ca929f382ee861dad3d7a8","date":1557134375,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#buildLookup(Class[#-extends-Lookup],Input[]).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#buildLookup(Class[#-extends-Lookup],Input[]).mjava","sourceNew":"  /**\n   * Create {@link Lookup} instance and populate it. \n   */\n  private Lookup buildLookup(Class<? extends Lookup> cls, Input[] input) throws Exception {\n    Lookup lookup = null;\n    if (cls == TSTLookup.class || cls == FSTCompletionLookup.class || cls == WFSTCompletionLookup.class)  {\n        Constructor<? extends Lookup> ctor = cls.getConstructor(Directory.class, String.class);\n        lookup = ctor.newInstance(FSDirectory.open(createTempDir(\"LookupBenchmarkTest\")), \"test\");\n    } else {\n      try {\n        lookup = cls.getConstructor().newInstance();\n      } catch (InstantiationException | NoSuchMethodException e) {\n        Analyzer a = new MockAnalyzer(random, MockTokenizer.KEYWORD, false);\n        if (cls == AnalyzingInfixSuggester.class || cls == BlendedInfixSuggester.class) {\n          Constructor<? extends Lookup> ctor = cls.getConstructor(Directory.class, Analyzer.class);\n          lookup = ctor.newInstance(FSDirectory.open(createTempDir(\"LookupBenchmarkTest\")), a);\n        } else if (cls == AnalyzingSuggester.class) {\n          lookup = new AnalyzingSuggester(FSDirectory.open(createTempDir(\"LookupBenchmarkTest\")), \"test\", a);\n        } else if (cls == FuzzySuggester.class) {\n          lookup = new FuzzySuggester(FSDirectory.open(createTempDir(\"LookupBenchmarkTest\")), \"test\", a);\n        } else {\n          Constructor<? extends Lookup> ctor = cls.getConstructor(Analyzer.class);\n          lookup = ctor.newInstance(a);\n        }\n      }\n    }\n    lookup.build(new InputArrayIterator(input));\n    return lookup;\n  }\n\n","sourceOld":"  /**\n   * Create {@link Lookup} instance and populate it. \n   */\n  private Lookup buildLookup(Class<? extends Lookup> cls, Input[] input) throws Exception {\n    Lookup lookup = null;\n    try {\n      lookup = cls.getConstructor().newInstance();\n    } catch (InstantiationException e) {\n      Analyzer a = new MockAnalyzer(random, MockTokenizer.KEYWORD, false);\n      if (cls == AnalyzingInfixSuggester.class || cls == BlendedInfixSuggester.class) {\n        Constructor<? extends Lookup> ctor = cls.getConstructor(Directory.class, Analyzer.class);\n        lookup = ctor.newInstance(FSDirectory.open(createTempDir(\"LookupBenchmarkTest\")), a);\n      } else {\n        Constructor<? extends Lookup> ctor = cls.getConstructor(Analyzer.class);\n        lookup = ctor.newInstance(a);\n      }\n    }\n    lookup.build(new InputArrayIterator(input));\n    return lookup;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":["6613659748fe4411a7dcf85266e55db1f95f7315","4637747f71df783fc2014ef1f1e0418466e3bed6"],"0ecf5fabef203b754287a16e743bd4f0eaec39de":["19e497fe4da591a79332da97681b8017d9c61165"],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["4637747f71df783fc2014ef1f1e0418466e3bed6","a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"6613659748fe4411a7dcf85266e55db1f95f7315":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"ae67e1f82a53594208ca929f382ee861dad3d7a8":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"d0d579490a72f2e6297eaa648940611234c57cf1":["4637747f71df783fc2014ef1f1e0418466e3bed6"],"f1e7da8a91a92330e8f04b171b83e655a4a25c31":["6613659748fe4411a7dcf85266e55db1f95f7315"],"19e497fe4da591a79332da97681b8017d9c61165":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["0ecf5fabef203b754287a16e743bd4f0eaec39de"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["d0d579490a72f2e6297eaa648940611234c57cf1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4637747f71df783fc2014ef1f1e0418466e3bed6":["6613659748fe4411a7dcf85266e55db1f95f7315","f1e7da8a91a92330e8f04b171b83e655a4a25c31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ae67e1f82a53594208ca929f382ee861dad3d7a8"]},"commit2Childs":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"0ecf5fabef203b754287a16e743bd4f0eaec39de":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["6613659748fe4411a7dcf85266e55db1f95f7315"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["19e497fe4da591a79332da97681b8017d9c61165"],"6613659748fe4411a7dcf85266e55db1f95f7315":["96ea64d994d340044e0d57aeb6a5871539d10ca5","f1e7da8a91a92330e8f04b171b83e655a4a25c31","4637747f71df783fc2014ef1f1e0418466e3bed6"],"ae67e1f82a53594208ca929f382ee861dad3d7a8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0d579490a72f2e6297eaa648940611234c57cf1":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"f1e7da8a91a92330e8f04b171b83e655a4a25c31":["4637747f71df783fc2014ef1f1e0418466e3bed6"],"19e497fe4da591a79332da97681b8017d9c61165":["0ecf5fabef203b754287a16e743bd4f0eaec39de"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["ae67e1f82a53594208ca929f382ee861dad3d7a8"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"4637747f71df783fc2014ef1f1e0418466e3bed6":["96ea64d994d340044e0d57aeb6a5871539d10ca5","2a0f5bb79c600763ffe7b8141df59a3169d31e48","d0d579490a72f2e6297eaa648940611234c57cf1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}