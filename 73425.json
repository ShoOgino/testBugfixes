{"path":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testSplitIntoClauses().mjava","commits":[{"id":"633a910b9a4319a12a6e93749ff3a3fd7eef28ab","date":1597428773,"type":0,"author":"Yuriy Koval","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testSplitIntoClauses().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Repeating some of test cases as direct calls to splitIntoClauses\n     */\n    @Test\n    public void testSplitIntoClauses() throws Exception {\n        String query = \"(\\\"foo\\nfoo\\\")\";\n        SolrQueryRequest request = req(\"q\", query,\n                \"qf\", \"cat_s\",\n                \"defType\", \"edismax\");\n        ExtendedDismaxQParser parser = new ExtendedDismaxQParser(query, null, request.getParams(), request);\n        List<ExtendedDismaxQParser.Clause> clauses = parser.splitIntoClauses(query, false);\n        Assert.assertEquals(3, clauses.size());\n        assertClause(clauses.get(0), \"\\\\(\", false, true);\n        assertClause(clauses.get(1), \"foo\\nfoo\", true, false);\n        assertClause(clauses.get(2), \"\\\\)\", false, true);\n\n        query = \"cat_s:[\\\"foo\\nfoo\\\" TO \\\"foo\\nfoo\\\"]\";\n        request = req(\"q\", query,\n                \"qf\", \"cat_s\",\n                \"defType\", \"edismax\");\n        parser = new ExtendedDismaxQParser(query, null, request.getParams(), request);\n        clauses = parser.splitIntoClauses(query, false);\n        Assert.assertEquals(5, clauses.size());\n        assertClause(clauses.get(0), \"\\\\[\", false, true, \"cat_s\");\n        assertClause(clauses.get(1), \"foo\\nfoo\", true, false);\n        assertClause(clauses.get(2), \"TO\", true, false);\n        assertClause(clauses.get(3), \"foo\\nfoo\", true, false);\n        assertClause(clauses.get(4), \"\\\\]\", false, true);\n\n        query = \"cat_s:[ \\\"foo\\nfoo\\\" TO \\\"foo\\nfoo\\\"]\";\n        request = req(\"q\", query,\n                \"qf\", \"cat_s\",\n                \"defType\", \"edismax\");\n        parser = new ExtendedDismaxQParser(query, null, request.getParams(), request);\n        clauses = parser.splitIntoClauses(query, false);\n        Assert.assertEquals(5, clauses.size());\n        assertClause(clauses.get(0), \"\\\\[\", true, true, \"cat_s\");\n        assertClause(clauses.get(1), \"foo\\nfoo\", true, false);\n        assertClause(clauses.get(2), \"TO\", true, false);\n        assertClause(clauses.get(3), \"foo\\nfoo\", true, false);\n        assertClause(clauses.get(4), \"\\\\]\", false, true);\n\n        String allReservedCharacters = \"!():^[]{}~*?\\\"+-\\\\|&/\";\n        // the backslash needs to be manually escaped (the query parser sees the raw backslash as an escape the subsequent\n        // character)\n        query = allReservedCharacters.replace(\"\\\\\", \"\\\\\\\\\");\n\n        request = req(\"q\", query,\n                \"qf\", \"name\",\n                \"mm\", \"100%\",\n                \"defType\", \"edismax\");\n\n        parser = new ExtendedDismaxQParser(query, null, request.getParams(), request);\n        clauses = parser.splitIntoClauses(query, false);\n        Assert.assertEquals(1, clauses.size());\n        assertClause(clauses.get(0), \"\\\\!\\\\(\\\\)\\\\:\\\\^\\\\[\\\\]\\\\{\\\\}\\\\~\\\\*\\\\?\\\\\\\"\\\\+\\\\-\\\\\\\\\\\\|\\\\&\\\\/\", false, true);\n\n        query = \"foo/\";\n        request = req(\"q\", query,\n                \"qf\", \"name\",\n                \"mm\", \"100%\",\n                \"defType\", \"edismax\");\n\n        parser = new ExtendedDismaxQParser(query, null, request.getParams(), request);\n        clauses = parser.splitIntoClauses(query, false);\n        Assert.assertEquals(1, clauses.size());\n        assertClause(clauses.get(0), \"foo\\\\/\", false, true);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"633a910b9a4319a12a6e93749ff3a3fd7eef28ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["633a910b9a4319a12a6e93749ff3a3fd7eef28ab"]},"commit2Childs":{"633a910b9a4319a12a6e93749ff3a3fd7eef28ab":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["633a910b9a4319a12a6e93749ff3a3fd7eef28ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}