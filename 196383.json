{"path":"solr/core/src/java/org/apache/solr/update/DeleteByQueryWrapper#createWeight(IndexSearcher,boolean).mjava","commits":[{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DeleteByQueryWrapper#createWeight(IndexSearcher,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DeleteByQueryWrapper#createWeight(IndexSearcher).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final LeafReader wrapped = wrap((LeafReader) searcher.getIndexReader());\n    final IndexSearcher privateContext = new IndexSearcher(wrapped);\n    final Weight inner = in.createWeight(privateContext, needsScores);\n    return new Weight(DeleteByQueryWrapper.this) {\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException { throw new UnsupportedOperationException(); }\n\n      @Override\n      public float getValueForNormalization() throws IOException { return inner.getValueForNormalization(); }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) { inner.normalize(norm, topLevelBoost); }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        return inner.scorer(privateContext.getIndexReader().leaves().get(0), acceptDocs);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final LeafReader wrapped = wrap((LeafReader) searcher.getIndexReader());\n    final IndexSearcher privateContext = new IndexSearcher(wrapped);\n    final Weight inner = in.createWeight(privateContext);\n    return new Weight() {\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException { throw new UnsupportedOperationException(); }\n\n      @Override\n      public Query getQuery() { return DeleteByQueryWrapper.this; }\n\n      @Override\n      public float getValueForNormalization() throws IOException { return inner.getValueForNormalization(); }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) { inner.normalize(norm, topLevelBoost); }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs, boolean needsScores) throws IOException {\n        return inner.scorer(privateContext.getIndexReader().leaves().get(0), acceptDocs, needsScores);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"954e59be3da8dc1b046646ad7af4b466852009d3","date":1423482367,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DeleteByQueryWrapper#createWeight(IndexSearcher,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DeleteByQueryWrapper#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, int postingsFlags) throws IOException {\n    final LeafReader wrapped = wrap((LeafReader) searcher.getIndexReader());\n    final IndexSearcher privateContext = new IndexSearcher(wrapped);\n    final Weight inner = in.createWeight(privateContext, postingsFlags);\n    return new Weight(DeleteByQueryWrapper.this) {\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException { throw new UnsupportedOperationException(); }\n\n      @Override\n      public float getValueForNormalization() throws IOException { return inner.getValueForNormalization(); }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) { inner.normalize(norm, topLevelBoost); }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        return inner.scorer(privateContext.getIndexReader().leaves().get(0), acceptDocs);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final LeafReader wrapped = wrap((LeafReader) searcher.getIndexReader());\n    final IndexSearcher privateContext = new IndexSearcher(wrapped);\n    final Weight inner = in.createWeight(privateContext, needsScores);\n    return new Weight(DeleteByQueryWrapper.this) {\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException { throw new UnsupportedOperationException(); }\n\n      @Override\n      public float getValueForNormalization() throws IOException { return inner.getValueForNormalization(); }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) { inner.normalize(norm, topLevelBoost); }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        return inner.scorer(privateContext.getIndexReader().leaves().get(0), acceptDocs);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a47d642ab24da1a811adce4bda9cc52c520ca13","date":1423483323,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DeleteByQueryWrapper#createWeight(IndexSearcher,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DeleteByQueryWrapper#createWeight(IndexSearcher,int).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final LeafReader wrapped = wrap((LeafReader) searcher.getIndexReader());\n    final IndexSearcher privateContext = new IndexSearcher(wrapped);\n    final Weight inner = in.createWeight(privateContext, needsScores);\n    return new Weight(DeleteByQueryWrapper.this) {\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException { throw new UnsupportedOperationException(); }\n\n      @Override\n      public float getValueForNormalization() throws IOException { return inner.getValueForNormalization(); }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) { inner.normalize(norm, topLevelBoost); }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        return inner.scorer(privateContext.getIndexReader().leaves().get(0), acceptDocs);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, int postingsFlags) throws IOException {\n    final LeafReader wrapped = wrap((LeafReader) searcher.getIndexReader());\n    final IndexSearcher privateContext = new IndexSearcher(wrapped);\n    final Weight inner = in.createWeight(privateContext, postingsFlags);\n    return new Weight(DeleteByQueryWrapper.this) {\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException { throw new UnsupportedOperationException(); }\n\n      @Override\n      public float getValueForNormalization() throws IOException { return inner.getValueForNormalization(); }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) { inner.normalize(norm, topLevelBoost); }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        return inner.scorer(privateContext.getIndexReader().leaves().get(0), acceptDocs);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05c52ac194342b760b830342ee8423fcf00e54d0","date":1429197275,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DeleteByQueryWrapper#createWeight(IndexSearcher,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DeleteByQueryWrapper#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final LeafReader wrapped = wrap((LeafReader) searcher.getIndexReader());\n    final IndexSearcher privateContext = new IndexSearcher(wrapped);\n    final Weight inner = in.createWeight(privateContext, needsScores);\n    return new Weight(DeleteByQueryWrapper.this) {\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException { throw new UnsupportedOperationException(); }\n\n      @Override\n      public float getValueForNormalization() throws IOException { return inner.getValueForNormalization(); }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) { inner.normalize(norm, topLevelBoost); }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        return inner.scorer(privateContext.getIndexReader().leaves().get(0), acceptDocs);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final LeafReader wrapped = wrap((LeafReader) searcher.getIndexReader());\n    final IndexSearcher privateContext = new IndexSearcher(wrapped);\n    final Weight inner = in.createWeight(privateContext, needsScores);\n    return new Weight(DeleteByQueryWrapper.this) {\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException { throw new UnsupportedOperationException(); }\n\n      @Override\n      public float getValueForNormalization() throws IOException { return inner.getValueForNormalization(); }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) { inner.normalize(norm, topLevelBoost); }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        return inner.scorer(privateContext.getIndexReader().leaves().get(0), acceptDocs);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DeleteByQueryWrapper#createWeight(IndexSearcher,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DeleteByQueryWrapper#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final LeafReader wrapped = wrap((LeafReader) searcher.getIndexReader());\n    final IndexSearcher privateContext = new IndexSearcher(wrapped);\n    final Weight inner = in.createWeight(privateContext, needsScores);\n    return new Weight(DeleteByQueryWrapper.this) {\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException { throw new UnsupportedOperationException(); }\n\n      @Override\n      public float getValueForNormalization() throws IOException { return inner.getValueForNormalization(); }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) { inner.normalize(norm, topLevelBoost); }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        return inner.scorer(privateContext.getIndexReader().leaves().get(0));\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final LeafReader wrapped = wrap((LeafReader) searcher.getIndexReader());\n    final IndexSearcher privateContext = new IndexSearcher(wrapped);\n    final Weight inner = in.createWeight(privateContext, needsScores);\n    return new Weight(DeleteByQueryWrapper.this) {\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException { throw new UnsupportedOperationException(); }\n\n      @Override\n      public float getValueForNormalization() throws IOException { return inner.getValueForNormalization(); }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) { inner.normalize(norm, topLevelBoost); }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        return inner.scorer(privateContext.getIndexReader().leaves().get(0), acceptDocs);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DeleteByQueryWrapper#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DeleteByQueryWrapper#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final LeafReader wrapped = wrap((LeafReader) searcher.getIndexReader());\n    final IndexSearcher privateContext = new IndexSearcher(wrapped);\n    final Weight inner = in.createWeight(privateContext, needsScores, boost);\n    return new Weight(DeleteByQueryWrapper.this) {\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException { throw new UnsupportedOperationException(); }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        return inner.scorer(privateContext.getIndexReader().leaves().get(0));\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final LeafReader wrapped = wrap((LeafReader) searcher.getIndexReader());\n    final IndexSearcher privateContext = new IndexSearcher(wrapped);\n    final Weight inner = in.createWeight(privateContext, needsScores);\n    return new Weight(DeleteByQueryWrapper.this) {\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException { throw new UnsupportedOperationException(); }\n\n      @Override\n      public float getValueForNormalization() throws IOException { return inner.getValueForNormalization(); }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) { inner.normalize(norm, topLevelBoost); }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        return inner.scorer(privateContext.getIndexReader().leaves().get(0));\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/DeleteByQueryWrapper#createWeight(IndexSearcher,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final LeafReader wrapped = wrap((LeafReader) searcher.getIndexReader());\n    final IndexSearcher privateContext = new IndexSearcher(wrapped);\n    final Weight inner = in.createWeight(privateContext, needsScores);\n    return new Weight(DeleteByQueryWrapper.this) {\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException { throw new UnsupportedOperationException(); }\n\n      @Override\n      public float getValueForNormalization() throws IOException { return inner.getValueForNormalization(); }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) { inner.normalize(norm, topLevelBoost); }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        return inner.scorer(privateContext.getIndexReader().leaves().get(0));\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6a47d642ab24da1a811adce4bda9cc52c520ca13":["954e59be3da8dc1b046646ad7af4b466852009d3"],"fb17639909a369c1e64866842e5c213440acc17e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["05c52ac194342b760b830342ee8423fcf00e54d0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"05c52ac194342b760b830342ee8423fcf00e54d0":["6a47d642ab24da1a811adce4bda9cc52c520ca13"],"954e59be3da8dc1b046646ad7af4b466852009d3":["fb17639909a369c1e64866842e5c213440acc17e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0f4464508ee83288c8c4585b533f9faaa93aa314","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"]},"commit2Childs":{"6a47d642ab24da1a811adce4bda9cc52c520ca13":["05c52ac194342b760b830342ee8423fcf00e54d0"],"fb17639909a369c1e64866842e5c213440acc17e":["954e59be3da8dc1b046646ad7af4b466852009d3"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb17639909a369c1e64866842e5c213440acc17e"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"954e59be3da8dc1b046646ad7af4b466852009d3":["6a47d642ab24da1a811adce4bda9cc52c520ca13"],"05c52ac194342b760b830342ee8423fcf00e54d0":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}