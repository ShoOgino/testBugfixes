{"path":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricManager,String,String).mjava","commits":[{"id":"f34d83c894e07c24f5f957820777b5da2cc29e5a","date":1489491395,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    newSearcherCounter = manager.counter(registry, \"new\", Category.SEARCHER.toString());\n    newSearcherTimer = manager.timer(registry, \"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = manager.timer(registry, \"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = manager.counter(registry, \"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = manager.counter(registry, \"errors\", Category.SEARCHER.toString(), \"new\");\n\n    manager.registerGauge(registry, () -> name == null ? \"(null)\" : name, true, \"coreName\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> startTime, true, \"startTime\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> getOpenCount(), true, \"refCount\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> resourceLoader.getInstancePath(), true, \"instanceDir\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> getIndexDir(), true, \"indexDir\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> getIndexSize(), true, \"sizeInBytes\", Category.INDEX.toString());\n    manager.registerGauge(registry, () -> NumberUtils.readableSize(getIndexSize()), true, \"size\", Category.INDEX.toString());\n    manager.registerGauge(registry, () -> coreDescriptor.getCoreContainer().getCoreNames(this), true, \"aliases\", Category.CORE.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d402ed03d3abe439fa7859facfae3c2fe0aba77e","date":1489517911,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    newSearcherCounter = manager.counter(registry, \"new\", Category.SEARCHER.toString());\n    newSearcherTimer = manager.timer(registry, \"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = manager.timer(registry, \"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = manager.counter(registry, \"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = manager.counter(registry, \"errors\", Category.SEARCHER.toString(), \"new\");\n\n    manager.registerGauge(registry, () -> name == null ? \"(null)\" : name, true, \"coreName\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> startTime, true, \"startTime\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> getOpenCount(), true, \"refCount\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> resourceLoader.getInstancePath(), true, \"instanceDir\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> getIndexDir(), true, \"indexDir\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> getIndexSize(), true, \"sizeInBytes\", Category.INDEX.toString());\n    manager.registerGauge(registry, () -> NumberUtils.readableSize(getIndexSize()), true, \"size\", Category.INDEX.toString());\n    manager.registerGauge(registry, () -> coreDescriptor.getCoreContainer().getCoreNames(this), true, \"aliases\", Category.CORE.toString());\n    // initialize disk total / free metrics\n    Path dataDirPath = Paths.get(dataDir);\n    File dataDirFile = dataDirPath.toFile();\n    manager.registerGauge(registry, () -> dataDirFile.getTotalSpace(), true, \"totalSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(registry, () -> dataDirFile.getUsableSpace(), true, \"usableSpace\", Category.CORE.toString(), \"fs\");\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    newSearcherCounter = manager.counter(registry, \"new\", Category.SEARCHER.toString());\n    newSearcherTimer = manager.timer(registry, \"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = manager.timer(registry, \"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = manager.counter(registry, \"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = manager.counter(registry, \"errors\", Category.SEARCHER.toString(), \"new\");\n\n    manager.registerGauge(registry, () -> name == null ? \"(null)\" : name, true, \"coreName\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> startTime, true, \"startTime\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> getOpenCount(), true, \"refCount\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> resourceLoader.getInstancePath(), true, \"instanceDir\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> getIndexDir(), true, \"indexDir\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> getIndexSize(), true, \"sizeInBytes\", Category.INDEX.toString());\n    manager.registerGauge(registry, () -> NumberUtils.readableSize(getIndexSize()), true, \"size\", Category.INDEX.toString());\n    manager.registerGauge(registry, () -> coreDescriptor.getCoreContainer().getCoreNames(this), true, \"aliases\", Category.CORE.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b","date":1489651910,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    newSearcherCounter = manager.counter(registry, \"new\", Category.SEARCHER.toString());\n    newSearcherTimer = manager.timer(registry, \"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = manager.timer(registry, \"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = manager.counter(registry, \"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = manager.counter(registry, \"errors\", Category.SEARCHER.toString(), \"new\");\n\n    manager.registerGauge(registry, () -> name == null ? \"(null)\" : name, true, \"coreName\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> startTime, true, \"startTime\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> getOpenCount(), true, \"refCount\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> resourceLoader.getInstancePath(), true, \"instanceDir\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> getIndexDir(), true, \"indexDir\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> getIndexSize(), true, \"sizeInBytes\", Category.INDEX.toString());\n    manager.registerGauge(registry, () -> NumberUtils.readableSize(getIndexSize()), true, \"size\", Category.INDEX.toString());\n    manager.registerGauge(registry, () -> coreDescriptor.getCoreContainer().getCoreNames(this), true, \"aliases\", Category.CORE.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0736a2d3712288b09f053f4ca52facf04669b06d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6db2a2569883aff84117ae03caf199738df62519","date":1489651910,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    newSearcherCounter = manager.counter(registry, \"new\", Category.SEARCHER.toString());\n    newSearcherTimer = manager.timer(registry, \"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = manager.timer(registry, \"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = manager.counter(registry, \"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = manager.counter(registry, \"errors\", Category.SEARCHER.toString(), \"new\");\n\n    manager.registerGauge(registry, () -> name == null ? \"(null)\" : name, true, \"coreName\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> startTime, true, \"startTime\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> getOpenCount(), true, \"refCount\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> resourceLoader.getInstancePath(), true, \"instanceDir\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> getIndexDir(), true, \"indexDir\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> getIndexSize(), true, \"sizeInBytes\", Category.INDEX.toString());\n    manager.registerGauge(registry, () -> NumberUtils.readableSize(getIndexSize()), true, \"size\", Category.INDEX.toString());\n    manager.registerGauge(registry, () -> coreDescriptor.getCoreContainer().getCoreNames(this), true, \"aliases\", Category.CORE.toString());\n    // initialize disk total / free metrics\n    Path dataDirPath = Paths.get(dataDir);\n    File dataDirFile = dataDirPath.toFile();\n    manager.registerGauge(registry, () -> dataDirFile.getTotalSpace(), true, \"totalSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(registry, () -> dataDirFile.getUsableSpace(), true, \"usableSpace\", Category.CORE.toString(), \"fs\");\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    newSearcherCounter = manager.counter(registry, \"new\", Category.SEARCHER.toString());\n    newSearcherTimer = manager.timer(registry, \"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = manager.timer(registry, \"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = manager.counter(registry, \"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = manager.counter(registry, \"errors\", Category.SEARCHER.toString(), \"new\");\n\n    manager.registerGauge(registry, () -> name == null ? \"(null)\" : name, true, \"coreName\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> startTime, true, \"startTime\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> getOpenCount(), true, \"refCount\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> resourceLoader.getInstancePath(), true, \"instanceDir\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> getIndexDir(), true, \"indexDir\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> getIndexSize(), true, \"sizeInBytes\", Category.INDEX.toString());\n    manager.registerGauge(registry, () -> NumberUtils.readableSize(getIndexSize()), true, \"size\", Category.INDEX.toString());\n    manager.registerGauge(registry, () -> coreDescriptor.getCoreContainer().getCoreNames(this), true, \"aliases\", Category.CORE.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    newSearcherCounter = manager.counter(registry, \"new\", Category.SEARCHER.toString());\n    newSearcherTimer = manager.timer(registry, \"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = manager.timer(registry, \"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = manager.counter(registry, \"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = manager.counter(registry, \"errors\", Category.SEARCHER.toString(), \"new\");\n\n    manager.registerGauge(registry, () -> name == null ? \"(null)\" : name, true, \"coreName\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> startTime, true, \"startTime\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> getOpenCount(), true, \"refCount\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> resourceLoader.getInstancePath(), true, \"instanceDir\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> getIndexDir(), true, \"indexDir\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> getIndexSize(), true, \"sizeInBytes\", Category.INDEX.toString());\n    manager.registerGauge(registry, () -> NumberUtils.readableSize(getIndexSize()), true, \"size\", Category.INDEX.toString());\n    manager.registerGauge(registry, () -> coreDescriptor.getCoreContainer().getCoreNames(this), true, \"aliases\", Category.CORE.toString());\n    // initialize disk total / free metrics\n    Path dataDirPath = Paths.get(dataDir);\n    File dataDirFile = dataDirPath.toFile();\n    manager.registerGauge(registry, () -> dataDirFile.getTotalSpace(), true, \"totalSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(registry, () -> dataDirFile.getUsableSpace(), true, \"usableSpace\", Category.CORE.toString(), \"fs\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d70adda62e57869d6b5efc336ea37e0b0e4cf79a","date":1490033035,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    newSearcherCounter = manager.counter(registry, \"new\", Category.SEARCHER.toString());\n    newSearcherTimer = manager.timer(registry, \"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = manager.timer(registry, \"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = manager.counter(registry, \"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = manager.counter(registry, \"errors\", Category.SEARCHER.toString(), \"new\");\n\n    manager.registerGauge(registry, () -> name == null ? \"(null)\" : name, true, \"coreName\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> startTime, true, \"startTime\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> getOpenCount(), true, \"refCount\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> resourceLoader.getInstancePath().toString(), true, \"instanceDir\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> getIndexDir(), true, \"indexDir\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> getIndexSize(), true, \"sizeInBytes\", Category.INDEX.toString());\n    manager.registerGauge(registry, () -> NumberUtils.readableSize(getIndexSize()), true, \"size\", Category.INDEX.toString());\n    manager.registerGauge(registry, () -> coreDescriptor.getCoreContainer().getCoreNames(this), true, \"aliases\", Category.CORE.toString());\n    // initialize disk total / free metrics\n    Path dataDirPath = Paths.get(dataDir);\n    File dataDirFile = dataDirPath.toFile();\n    manager.registerGauge(registry, () -> dataDirFile.getTotalSpace(), true, \"totalSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(registry, () -> dataDirFile.getUsableSpace(), true, \"usableSpace\", Category.CORE.toString(), \"fs\");\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    newSearcherCounter = manager.counter(registry, \"new\", Category.SEARCHER.toString());\n    newSearcherTimer = manager.timer(registry, \"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = manager.timer(registry, \"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = manager.counter(registry, \"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = manager.counter(registry, \"errors\", Category.SEARCHER.toString(), \"new\");\n\n    manager.registerGauge(registry, () -> name == null ? \"(null)\" : name, true, \"coreName\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> startTime, true, \"startTime\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> getOpenCount(), true, \"refCount\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> resourceLoader.getInstancePath(), true, \"instanceDir\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> getIndexDir(), true, \"indexDir\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> getIndexSize(), true, \"sizeInBytes\", Category.INDEX.toString());\n    manager.registerGauge(registry, () -> NumberUtils.readableSize(getIndexSize()), true, \"size\", Category.INDEX.toString());\n    manager.registerGauge(registry, () -> coreDescriptor.getCoreContainer().getCoreNames(this), true, \"aliases\", Category.CORE.toString());\n    // initialize disk total / free metrics\n    Path dataDirPath = Paths.get(dataDir);\n    File dataDirFile = dataDirPath.toFile();\n    manager.registerGauge(registry, () -> dataDirFile.getTotalSpace(), true, \"totalSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(registry, () -> dataDirFile.getUsableSpace(), true, \"usableSpace\", Category.CORE.toString(), \"fs\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0736a2d3712288b09f053f4ca52facf04669b06d","date":1490280012,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    newSearcherCounter = manager.counter(registry, \"new\", Category.SEARCHER.toString());\n    newSearcherTimer = manager.timer(registry, \"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = manager.timer(registry, \"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = manager.counter(registry, \"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = manager.counter(registry, \"errors\", Category.SEARCHER.toString(), \"new\");\n\n    manager.registerGauge(registry, () -> name == null ? \"(null)\" : name, true, \"coreName\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> startTime, true, \"startTime\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> getOpenCount(), true, \"refCount\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> resourceLoader.getInstancePath().toString(), true, \"instanceDir\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> getIndexDir(), true, \"indexDir\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> getIndexSize(), true, \"sizeInBytes\", Category.INDEX.toString());\n    manager.registerGauge(registry, () -> NumberUtils.readableSize(getIndexSize()), true, \"size\", Category.INDEX.toString());\n    manager.registerGauge(registry, () -> coreDescriptor.getCoreContainer().getCoreNames(this), true, \"aliases\", Category.CORE.toString());\n    // initialize disk total / free metrics\n    Path dataDirPath = Paths.get(dataDir);\n    File dataDirFile = dataDirPath.toFile();\n    manager.registerGauge(registry, () -> dataDirFile.getTotalSpace(), true, \"totalSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(registry, () -> dataDirFile.getUsableSpace(), true, \"usableSpace\", Category.CORE.toString(), \"fs\");\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    newSearcherCounter = manager.counter(registry, \"new\", Category.SEARCHER.toString());\n    newSearcherTimer = manager.timer(registry, \"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = manager.timer(registry, \"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = manager.counter(registry, \"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = manager.counter(registry, \"errors\", Category.SEARCHER.toString(), \"new\");\n\n    manager.registerGauge(registry, () -> name == null ? \"(null)\" : name, true, \"coreName\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> startTime, true, \"startTime\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> getOpenCount(), true, \"refCount\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> resourceLoader.getInstancePath(), true, \"instanceDir\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> getIndexDir(), true, \"indexDir\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> getIndexSize(), true, \"sizeInBytes\", Category.INDEX.toString());\n    manager.registerGauge(registry, () -> NumberUtils.readableSize(getIndexSize()), true, \"size\", Category.INDEX.toString());\n    manager.registerGauge(registry, () -> coreDescriptor.getCoreContainer().getCoreNames(this), true, \"aliases\", Category.CORE.toString());\n    // initialize disk total / free metrics\n    Path dataDirPath = Paths.get(dataDir);\n    File dataDirFile = dataDirPath.toFile();\n    manager.registerGauge(registry, () -> dataDirFile.getTotalSpace(), true, \"totalSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(registry, () -> dataDirFile.getUsableSpace(), true, \"usableSpace\", Category.CORE.toString(), \"fs\");\n  }\n\n","bugFix":["0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    newSearcherCounter = manager.counter(this, registry, \"new\", Category.SEARCHER.toString());\n    newSearcherTimer = manager.timer(this, registry, \"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = manager.timer(this, registry, \"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = manager.counter(this, registry, \"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = manager.counter(this, registry, \"errors\", Category.SEARCHER.toString(), \"new\");\n\n    manager.registerGauge(this, registry, () -> name == null ? \"(null)\" : name, true, \"coreName\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> startTime, true, \"startTime\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getOpenCount(), true, \"refCount\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> resourceLoader.getInstancePath().toString(), true, \"instanceDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getIndexDir(), true, \"indexDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getIndexSize(), true, \"sizeInBytes\", Category.INDEX.toString());\n    manager.registerGauge(this, registry, () -> NumberUtils.readableSize(getIndexSize()), true, \"size\", Category.INDEX.toString());\n    if (coreDescriptor != null && coreDescriptor.getCoreContainer() != null) {\n      manager.registerGauge(this, registry, () -> coreDescriptor.getCoreContainer().getCoreNames(this), true, \"aliases\", Category.CORE.toString());\n      final CloudDescriptor cd = coreDescriptor.getCloudDescriptor();\n      if (cd != null) {\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getCollectionName() != null) {\n            return cd.getCollectionName();\n          } else {\n            return \"_notset_\";\n          }\n        }, true, \"collection\", Category.CORE.toString());\n\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getShardId() != null) {\n            return cd.getShardId();\n          } else {\n            return \"_auto_\";\n          }\n        }, true, \"shard\", Category.CORE.toString());\n      }\n    }\n\n    // initialize disk total / free metrics\n    Path dataDirPath = Paths.get(dataDir);\n    File dataDirFile = dataDirPath.toFile();\n    manager.registerGauge(this, registry, () -> dataDirFile.getTotalSpace(), true, \"totalSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirFile.getUsableSpace(), true, \"usableSpace\", Category.CORE.toString(), \"fs\");\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    newSearcherCounter = manager.counter(registry, \"new\", Category.SEARCHER.toString());\n    newSearcherTimer = manager.timer(registry, \"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = manager.timer(registry, \"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = manager.counter(registry, \"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = manager.counter(registry, \"errors\", Category.SEARCHER.toString(), \"new\");\n\n    manager.registerGauge(registry, () -> name == null ? \"(null)\" : name, true, \"coreName\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> startTime, true, \"startTime\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> getOpenCount(), true, \"refCount\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> resourceLoader.getInstancePath().toString(), true, \"instanceDir\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> getIndexDir(), true, \"indexDir\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> getIndexSize(), true, \"sizeInBytes\", Category.INDEX.toString());\n    manager.registerGauge(registry, () -> NumberUtils.readableSize(getIndexSize()), true, \"size\", Category.INDEX.toString());\n    manager.registerGauge(registry, () -> coreDescriptor.getCoreContainer().getCoreNames(this), true, \"aliases\", Category.CORE.toString());\n    // initialize disk total / free metrics\n    Path dataDirPath = Paths.get(dataDir);\n    File dataDirFile = dataDirPath.toFile();\n    manager.registerGauge(registry, () -> dataDirFile.getTotalSpace(), true, \"totalSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(registry, () -> dataDirFile.getUsableSpace(), true, \"usableSpace\", Category.CORE.toString(), \"fs\");\n  }\n\n","bugFix":null,"bugIntro":["d79cc3ed7651d0765a5d13a6a4f9f8a085116c13"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    newSearcherCounter = manager.counter(this, registry, \"new\", Category.SEARCHER.toString());\n    newSearcherTimer = manager.timer(this, registry, \"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = manager.timer(this, registry, \"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = manager.counter(this, registry, \"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = manager.counter(this, registry, \"errors\", Category.SEARCHER.toString(), \"new\");\n\n    manager.registerGauge(this, registry, () -> name == null ? \"(null)\" : name, true, \"coreName\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> startTime, true, \"startTime\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getOpenCount(), true, \"refCount\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> resourceLoader.getInstancePath().toString(), true, \"instanceDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getIndexDir(), true, \"indexDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getIndexSize(), true, \"sizeInBytes\", Category.INDEX.toString());\n    manager.registerGauge(this, registry, () -> NumberUtils.readableSize(getIndexSize()), true, \"size\", Category.INDEX.toString());\n    if (coreContainer != null) {\n      manager.registerGauge(this, registry, () -> coreContainer.getCoreNames(this), true, \"aliases\", Category.CORE.toString());\n      final CloudDescriptor cd = getCoreDescriptor().getCloudDescriptor();\n      if (cd != null) {\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getCollectionName() != null) {\n            return cd.getCollectionName();\n          } else {\n            return \"_notset_\";\n          }\n        }, true, \"collection\", Category.CORE.toString());\n\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getShardId() != null) {\n            return cd.getShardId();\n          } else {\n            return \"_auto_\";\n          }\n        }, true, \"shard\", Category.CORE.toString());\n      }\n    }\n    // initialize disk total / free metrics\n    Path dataDirPath = Paths.get(dataDir);\n    File dataDirFile = dataDirPath.toFile();\n    manager.registerGauge(this, registry, () -> dataDirFile.getTotalSpace(), true, \"totalSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirFile.getUsableSpace(), true, \"usableSpace\", Category.CORE.toString(), \"fs\");\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    newSearcherCounter = manager.counter(this, registry, \"new\", Category.SEARCHER.toString());\n    newSearcherTimer = manager.timer(this, registry, \"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = manager.timer(this, registry, \"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = manager.counter(this, registry, \"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = manager.counter(this, registry, \"errors\", Category.SEARCHER.toString(), \"new\");\n\n    manager.registerGauge(this, registry, () -> name == null ? \"(null)\" : name, true, \"coreName\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> startTime, true, \"startTime\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getOpenCount(), true, \"refCount\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> resourceLoader.getInstancePath().toString(), true, \"instanceDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getIndexDir(), true, \"indexDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getIndexSize(), true, \"sizeInBytes\", Category.INDEX.toString());\n    manager.registerGauge(this, registry, () -> NumberUtils.readableSize(getIndexSize()), true, \"size\", Category.INDEX.toString());\n    if (coreDescriptor != null && coreDescriptor.getCoreContainer() != null) {\n      manager.registerGauge(this, registry, () -> coreDescriptor.getCoreContainer().getCoreNames(this), true, \"aliases\", Category.CORE.toString());\n      final CloudDescriptor cd = coreDescriptor.getCloudDescriptor();\n      if (cd != null) {\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getCollectionName() != null) {\n            return cd.getCollectionName();\n          } else {\n            return \"_notset_\";\n          }\n        }, true, \"collection\", Category.CORE.toString());\n\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getShardId() != null) {\n            return cd.getShardId();\n          } else {\n            return \"_auto_\";\n          }\n        }, true, \"shard\", Category.CORE.toString());\n      }\n    }\n\n    // initialize disk total / free metrics\n    Path dataDirPath = Paths.get(dataDir);\n    File dataDirFile = dataDirPath.toFile();\n    manager.registerGauge(this, registry, () -> dataDirFile.getTotalSpace(), true, \"totalSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirFile.getUsableSpace(), true, \"usableSpace\", Category.CORE.toString(), \"fs\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    newSearcherCounter = manager.counter(this, registry, \"new\", Category.SEARCHER.toString());\n    newSearcherTimer = manager.timer(this, registry, \"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = manager.timer(this, registry, \"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = manager.counter(this, registry, \"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = manager.counter(this, registry, \"errors\", Category.SEARCHER.toString(), \"new\");\n\n    manager.registerGauge(this, registry, () -> name == null ? \"(null)\" : name, true, \"coreName\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> startTime, true, \"startTime\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getOpenCount(), true, \"refCount\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> resourceLoader.getInstancePath().toString(), true, \"instanceDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getIndexDir(), true, \"indexDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getIndexSize(), true, \"sizeInBytes\", Category.INDEX.toString());\n    manager.registerGauge(this, registry, () -> NumberUtils.readableSize(getIndexSize()), true, \"size\", Category.INDEX.toString());\n    if (coreContainer != null) {\n      manager.registerGauge(this, registry, () -> coreContainer.getCoreNames(this), true, \"aliases\", Category.CORE.toString());\n      final CloudDescriptor cd = getCoreDescriptor().getCloudDescriptor();\n      if (cd != null) {\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getCollectionName() != null) {\n            return cd.getCollectionName();\n          } else {\n            return \"_notset_\";\n          }\n        }, true, \"collection\", Category.CORE.toString());\n\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getShardId() != null) {\n            return cd.getShardId();\n          } else {\n            return \"_auto_\";\n          }\n        }, true, \"shard\", Category.CORE.toString());\n      }\n    }\n    // initialize disk total / free metrics\n    Path dataDirPath = Paths.get(dataDir);\n    File dataDirFile = dataDirPath.toFile();\n    manager.registerGauge(this, registry, () -> dataDirFile.getTotalSpace(), true, \"totalSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirFile.getUsableSpace(), true, \"usableSpace\", Category.CORE.toString(), \"fs\");\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    newSearcherCounter = manager.counter(registry, \"new\", Category.SEARCHER.toString());\n    newSearcherTimer = manager.timer(registry, \"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = manager.timer(registry, \"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = manager.counter(registry, \"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = manager.counter(registry, \"errors\", Category.SEARCHER.toString(), \"new\");\n\n    manager.registerGauge(registry, () -> name == null ? \"(null)\" : name, true, \"coreName\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> startTime, true, \"startTime\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> getOpenCount(), true, \"refCount\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> resourceLoader.getInstancePath().toString(), true, \"instanceDir\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> getIndexDir(), true, \"indexDir\", Category.CORE.toString());\n    manager.registerGauge(registry, () -> getIndexSize(), true, \"sizeInBytes\", Category.INDEX.toString());\n    manager.registerGauge(registry, () -> NumberUtils.readableSize(getIndexSize()), true, \"size\", Category.INDEX.toString());\n    manager.registerGauge(registry, () -> coreDescriptor.getCoreContainer().getCoreNames(this), true, \"aliases\", Category.CORE.toString());\n    // initialize disk total / free metrics\n    Path dataDirPath = Paths.get(dataDir);\n    File dataDirFile = dataDirPath.toFile();\n    manager.registerGauge(registry, () -> dataDirFile.getTotalSpace(), true, \"totalSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(registry, () -> dataDirFile.getUsableSpace(), true, \"usableSpace\", Category.CORE.toString(), \"fs\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7871f9c286dce2a9370bcf517a3e7d12e3bd9602","date":1498708934,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    newSearcherCounter = manager.counter(this, registry, \"new\", Category.SEARCHER.toString());\n    newSearcherTimer = manager.timer(this, registry, \"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = manager.timer(this, registry, \"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = manager.counter(this, registry, \"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = manager.counter(this, registry, \"errors\", Category.SEARCHER.toString(), \"new\");\n\n    manager.registerGauge(this, registry, () -> name == null ? \"(null)\" : name, true, \"coreName\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> startTime, true, \"startTime\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getOpenCount(), true, \"refCount\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> resourceLoader.getInstancePath().toString(), true, \"instanceDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getIndexDir(), true, \"indexDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getIndexSize(), true, \"sizeInBytes\", Category.INDEX.toString());\n    manager.registerGauge(this, registry, () -> NumberUtils.readableSize(getIndexSize()), true, \"size\", Category.INDEX.toString());\n    if (coreContainer != null) {\n      manager.registerGauge(this, registry, () -> coreContainer.getNamesForCore(this), true, \"aliases\", Category.CORE.toString());\n      final CloudDescriptor cd = getCoreDescriptor().getCloudDescriptor();\n      if (cd != null) {\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getCollectionName() != null) {\n            return cd.getCollectionName();\n          } else {\n            return \"_notset_\";\n          }\n        }, true, \"collection\", Category.CORE.toString());\n\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getShardId() != null) {\n            return cd.getShardId();\n          } else {\n            return \"_auto_\";\n          }\n        }, true, \"shard\", Category.CORE.toString());\n      }\n    }\n    // initialize disk total / free metrics\n    Path dataDirPath = Paths.get(dataDir);\n    File dataDirFile = dataDirPath.toFile();\n    manager.registerGauge(this, registry, () -> dataDirFile.getTotalSpace(), true, \"totalSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirFile.getUsableSpace(), true, \"usableSpace\", Category.CORE.toString(), \"fs\");\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    newSearcherCounter = manager.counter(this, registry, \"new\", Category.SEARCHER.toString());\n    newSearcherTimer = manager.timer(this, registry, \"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = manager.timer(this, registry, \"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = manager.counter(this, registry, \"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = manager.counter(this, registry, \"errors\", Category.SEARCHER.toString(), \"new\");\n\n    manager.registerGauge(this, registry, () -> name == null ? \"(null)\" : name, true, \"coreName\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> startTime, true, \"startTime\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getOpenCount(), true, \"refCount\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> resourceLoader.getInstancePath().toString(), true, \"instanceDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getIndexDir(), true, \"indexDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getIndexSize(), true, \"sizeInBytes\", Category.INDEX.toString());\n    manager.registerGauge(this, registry, () -> NumberUtils.readableSize(getIndexSize()), true, \"size\", Category.INDEX.toString());\n    if (coreContainer != null) {\n      manager.registerGauge(this, registry, () -> coreContainer.getCoreNames(this), true, \"aliases\", Category.CORE.toString());\n      final CloudDescriptor cd = getCoreDescriptor().getCloudDescriptor();\n      if (cd != null) {\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getCollectionName() != null) {\n            return cd.getCollectionName();\n          } else {\n            return \"_notset_\";\n          }\n        }, true, \"collection\", Category.CORE.toString());\n\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getShardId() != null) {\n            return cd.getShardId();\n          } else {\n            return \"_auto_\";\n          }\n        }, true, \"shard\", Category.CORE.toString());\n      }\n    }\n    // initialize disk total / free metrics\n    Path dataDirPath = Paths.get(dataDir);\n    File dataDirFile = dataDirPath.toFile();\n    manager.registerGauge(this, registry, () -> dataDirFile.getTotalSpace(), true, \"totalSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirFile.getUsableSpace(), true, \"usableSpace\", Category.CORE.toString(), \"fs\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    newSearcherCounter = manager.counter(this, registry, \"new\", Category.SEARCHER.toString());\n    newSearcherTimer = manager.timer(this, registry, \"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = manager.timer(this, registry, \"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = manager.counter(this, registry, \"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = manager.counter(this, registry, \"errors\", Category.SEARCHER.toString(), \"new\");\n\n    manager.registerGauge(this, registry, () -> name == null ? \"(null)\" : name, true, \"coreName\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> startTime, true, \"startTime\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getOpenCount(), true, \"refCount\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> resourceLoader.getInstancePath().toString(), true, \"instanceDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getIndexDir(), true, \"indexDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getIndexSize(), true, \"sizeInBytes\", Category.INDEX.toString());\n    manager.registerGauge(this, registry, () -> NumberUtils.readableSize(getIndexSize()), true, \"size\", Category.INDEX.toString());\n    if (coreContainer != null) {\n      manager.registerGauge(this, registry, () -> coreContainer.getNamesForCore(this), true, \"aliases\", Category.CORE.toString());\n      final CloudDescriptor cd = getCoreDescriptor().getCloudDescriptor();\n      if (cd != null) {\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getCollectionName() != null) {\n            return cd.getCollectionName();\n          } else {\n            return \"_notset_\";\n          }\n        }, true, \"collection\", Category.CORE.toString());\n\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getShardId() != null) {\n            return cd.getShardId();\n          } else {\n            return \"_auto_\";\n          }\n        }, true, \"shard\", Category.CORE.toString());\n      }\n    }\n    // initialize disk total / free metrics\n    Path dataDirPath = Paths.get(dataDir);\n    File dataDirFile = dataDirPath.toFile();\n    manager.registerGauge(this, registry, () -> dataDirFile.getTotalSpace(), true, \"totalSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirFile.getUsableSpace(), true, \"usableSpace\", Category.CORE.toString(), \"fs\");\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    newSearcherCounter = manager.counter(this, registry, \"new\", Category.SEARCHER.toString());\n    newSearcherTimer = manager.timer(this, registry, \"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = manager.timer(this, registry, \"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = manager.counter(this, registry, \"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = manager.counter(this, registry, \"errors\", Category.SEARCHER.toString(), \"new\");\n\n    manager.registerGauge(this, registry, () -> name == null ? \"(null)\" : name, true, \"coreName\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> startTime, true, \"startTime\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getOpenCount(), true, \"refCount\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> resourceLoader.getInstancePath().toString(), true, \"instanceDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getIndexDir(), true, \"indexDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getIndexSize(), true, \"sizeInBytes\", Category.INDEX.toString());\n    manager.registerGauge(this, registry, () -> NumberUtils.readableSize(getIndexSize()), true, \"size\", Category.INDEX.toString());\n    if (coreContainer != null) {\n      manager.registerGauge(this, registry, () -> coreContainer.getCoreNames(this), true, \"aliases\", Category.CORE.toString());\n      final CloudDescriptor cd = getCoreDescriptor().getCloudDescriptor();\n      if (cd != null) {\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getCollectionName() != null) {\n            return cd.getCollectionName();\n          } else {\n            return \"_notset_\";\n          }\n        }, true, \"collection\", Category.CORE.toString());\n\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getShardId() != null) {\n            return cd.getShardId();\n          } else {\n            return \"_auto_\";\n          }\n        }, true, \"shard\", Category.CORE.toString());\n      }\n    }\n    // initialize disk total / free metrics\n    Path dataDirPath = Paths.get(dataDir);\n    File dataDirFile = dataDirPath.toFile();\n    manager.registerGauge(this, registry, () -> dataDirFile.getTotalSpace(), true, \"totalSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirFile.getUsableSpace(), true, \"usableSpace\", Category.CORE.toString(), \"fs\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    newSearcherCounter = manager.counter(this, registry, \"new\", Category.SEARCHER.toString());\n    newSearcherTimer = manager.timer(this, registry, \"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = manager.timer(this, registry, \"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = manager.counter(this, registry, \"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = manager.counter(this, registry, \"errors\", Category.SEARCHER.toString(), \"new\");\n\n    manager.registerGauge(this, registry, () -> name == null ? \"(null)\" : name, true, \"coreName\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> startTime, true, \"startTime\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getOpenCount(), true, \"refCount\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> resourceLoader.getInstancePath().toString(), true, \"instanceDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getIndexDir(), true, \"indexDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getIndexSize(), true, \"sizeInBytes\", Category.INDEX.toString());\n    manager.registerGauge(this, registry, () -> NumberUtils.readableSize(getIndexSize()), true, \"size\", Category.INDEX.toString());\n    if (coreContainer != null) {\n      manager.registerGauge(this, registry, () -> coreContainer.getNamesForCore(this), true, \"aliases\", Category.CORE.toString());\n      final CloudDescriptor cd = getCoreDescriptor().getCloudDescriptor();\n      if (cd != null) {\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getCollectionName() != null) {\n            return cd.getCollectionName();\n          } else {\n            return \"_notset_\";\n          }\n        }, true, \"collection\", Category.CORE.toString());\n\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getShardId() != null) {\n            return cd.getShardId();\n          } else {\n            return \"_auto_\";\n          }\n        }, true, \"shard\", Category.CORE.toString());\n      }\n    }\n    // initialize disk total / free metrics\n    Path dataDirPath = Paths.get(dataDir);\n    File dataDirFile = dataDirPath.toFile();\n    manager.registerGauge(this, registry, () -> dataDirFile.getTotalSpace(), true, \"totalSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirFile.getUsableSpace(), true, \"usableSpace\", Category.CORE.toString(), \"fs\");\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    newSearcherCounter = manager.counter(this, registry, \"new\", Category.SEARCHER.toString());\n    newSearcherTimer = manager.timer(this, registry, \"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = manager.timer(this, registry, \"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = manager.counter(this, registry, \"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = manager.counter(this, registry, \"errors\", Category.SEARCHER.toString(), \"new\");\n\n    manager.registerGauge(this, registry, () -> name == null ? \"(null)\" : name, true, \"coreName\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> startTime, true, \"startTime\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getOpenCount(), true, \"refCount\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> resourceLoader.getInstancePath().toString(), true, \"instanceDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getIndexDir(), true, \"indexDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getIndexSize(), true, \"sizeInBytes\", Category.INDEX.toString());\n    manager.registerGauge(this, registry, () -> NumberUtils.readableSize(getIndexSize()), true, \"size\", Category.INDEX.toString());\n    if (coreContainer != null) {\n      manager.registerGauge(this, registry, () -> coreContainer.getCoreNames(this), true, \"aliases\", Category.CORE.toString());\n      final CloudDescriptor cd = getCoreDescriptor().getCloudDescriptor();\n      if (cd != null) {\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getCollectionName() != null) {\n            return cd.getCollectionName();\n          } else {\n            return \"_notset_\";\n          }\n        }, true, \"collection\", Category.CORE.toString());\n\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getShardId() != null) {\n            return cd.getShardId();\n          } else {\n            return \"_auto_\";\n          }\n        }, true, \"shard\", Category.CORE.toString());\n      }\n    }\n    // initialize disk total / free metrics\n    Path dataDirPath = Paths.get(dataDir);\n    File dataDirFile = dataDirPath.toFile();\n    manager.registerGauge(this, registry, () -> dataDirFile.getTotalSpace(), true, \"totalSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirFile.getUsableSpace(), true, \"usableSpace\", Category.CORE.toString(), \"fs\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6a9fde5df1c4cdd5292c6a5292c39c630896af8c","date":1502287655,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    newSearcherCounter = manager.counter(this, registry, \"new\", Category.SEARCHER.toString());\n    newSearcherTimer = manager.timer(this, registry, \"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = manager.timer(this, registry, \"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = manager.counter(this, registry, \"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = manager.counter(this, registry, \"errors\", Category.SEARCHER.toString(), \"new\");\n\n    manager.registerGauge(this, registry, () -> name == null ? \"(null)\" : name, true, \"coreName\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> startTime, true, \"startTime\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getOpenCount(), true, \"refCount\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> resourceLoader.getInstancePath().toString(), true, \"instanceDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getIndexDir(), true, \"indexDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getIndexSize(), true, \"sizeInBytes\", Category.INDEX.toString());\n    manager.registerGauge(this, registry, () -> NumberUtils.readableSize(getIndexSize()), true, \"size\", Category.INDEX.toString());\n    if (coreContainer != null) {\n      manager.registerGauge(this, registry, () -> coreContainer.getNamesForCore(this), true, \"aliases\", Category.CORE.toString());\n      final CloudDescriptor cd = getCoreDescriptor().getCloudDescriptor();\n      if (cd != null) {\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getCollectionName() != null) {\n            return cd.getCollectionName();\n          } else {\n            return \"_notset_\";\n          }\n        }, true, \"collection\", Category.CORE.toString());\n\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getShardId() != null) {\n            return cd.getShardId();\n          } else {\n            return \"_auto_\";\n          }\n        }, true, \"shard\", Category.CORE.toString());\n      }\n    }\n    // initialize disk total / free metrics\n    Path dataDirPath = Paths.get(dataDir);\n    File dataDirFile = dataDirPath.toFile();\n    manager.registerGauge(this, registry, () -> dataDirFile.getTotalSpace(), true, \"totalSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirFile.getUsableSpace(), true, \"usableSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirPath.toAbsolutePath().toString(), true, \"fs\", \"dataDir\");\n    manager.registerGauge(this, registry, () -> {\n      try {\n        return org.apache.lucene.util.IOUtils.spins(dataDirPath.toAbsolutePath());\n      } catch (IOException e) {\n        // default to spinning\n        return true;\n      }\n    }, true, \"spins\", Category.CORE.toString(), \"fs\", \"dataDir\");\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    newSearcherCounter = manager.counter(this, registry, \"new\", Category.SEARCHER.toString());\n    newSearcherTimer = manager.timer(this, registry, \"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = manager.timer(this, registry, \"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = manager.counter(this, registry, \"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = manager.counter(this, registry, \"errors\", Category.SEARCHER.toString(), \"new\");\n\n    manager.registerGauge(this, registry, () -> name == null ? \"(null)\" : name, true, \"coreName\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> startTime, true, \"startTime\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getOpenCount(), true, \"refCount\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> resourceLoader.getInstancePath().toString(), true, \"instanceDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getIndexDir(), true, \"indexDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getIndexSize(), true, \"sizeInBytes\", Category.INDEX.toString());\n    manager.registerGauge(this, registry, () -> NumberUtils.readableSize(getIndexSize()), true, \"size\", Category.INDEX.toString());\n    if (coreContainer != null) {\n      manager.registerGauge(this, registry, () -> coreContainer.getNamesForCore(this), true, \"aliases\", Category.CORE.toString());\n      final CloudDescriptor cd = getCoreDescriptor().getCloudDescriptor();\n      if (cd != null) {\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getCollectionName() != null) {\n            return cd.getCollectionName();\n          } else {\n            return \"_notset_\";\n          }\n        }, true, \"collection\", Category.CORE.toString());\n\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getShardId() != null) {\n            return cd.getShardId();\n          } else {\n            return \"_auto_\";\n          }\n        }, true, \"shard\", Category.CORE.toString());\n      }\n    }\n    // initialize disk total / free metrics\n    Path dataDirPath = Paths.get(dataDir);\n    File dataDirFile = dataDirPath.toFile();\n    manager.registerGauge(this, registry, () -> dataDirFile.getTotalSpace(), true, \"totalSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirFile.getUsableSpace(), true, \"usableSpace\", Category.CORE.toString(), \"fs\");\n  }\n\n","bugFix":null,"bugIntro":["f5bbcf309247eced63db2b2eb0d35bb3e8c9384d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f5bbcf309247eced63db2b2eb0d35bb3e8c9384d","date":1502291750,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    newSearcherCounter = manager.counter(this, registry, \"new\", Category.SEARCHER.toString());\n    newSearcherTimer = manager.timer(this, registry, \"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = manager.timer(this, registry, \"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = manager.counter(this, registry, \"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = manager.counter(this, registry, \"errors\", Category.SEARCHER.toString(), \"new\");\n\n    manager.registerGauge(this, registry, () -> name == null ? \"(null)\" : name, true, \"coreName\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> startTime, true, \"startTime\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getOpenCount(), true, \"refCount\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> resourceLoader.getInstancePath().toString(), true, \"instanceDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getIndexDir(), true, \"indexDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getIndexSize(), true, \"sizeInBytes\", Category.INDEX.toString());\n    manager.registerGauge(this, registry, () -> NumberUtils.readableSize(getIndexSize()), true, \"size\", Category.INDEX.toString());\n    if (coreContainer != null) {\n      manager.registerGauge(this, registry, () -> coreContainer.getNamesForCore(this), true, \"aliases\", Category.CORE.toString());\n      final CloudDescriptor cd = getCoreDescriptor().getCloudDescriptor();\n      if (cd != null) {\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getCollectionName() != null) {\n            return cd.getCollectionName();\n          } else {\n            return \"_notset_\";\n          }\n        }, true, \"collection\", Category.CORE.toString());\n\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getShardId() != null) {\n            return cd.getShardId();\n          } else {\n            return \"_auto_\";\n          }\n        }, true, \"shard\", Category.CORE.toString());\n      }\n    }\n    // initialize disk total / free metrics\n    Path dataDirPath = Paths.get(dataDir);\n    File dataDirFile = dataDirPath.toFile();\n    manager.registerGauge(this, registry, () -> dataDirFile.getTotalSpace(), true, \"totalSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirFile.getUsableSpace(), true, \"usableSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirPath.toAbsolutePath().toString(), true, \"path\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> {\n      try {\n        return org.apache.lucene.util.IOUtils.spins(dataDirPath.toAbsolutePath());\n      } catch (IOException e) {\n        // default to spinning\n        return true;\n      }\n    }, true, \"spins\", Category.CORE.toString(), \"fs\");\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    newSearcherCounter = manager.counter(this, registry, \"new\", Category.SEARCHER.toString());\n    newSearcherTimer = manager.timer(this, registry, \"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = manager.timer(this, registry, \"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = manager.counter(this, registry, \"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = manager.counter(this, registry, \"errors\", Category.SEARCHER.toString(), \"new\");\n\n    manager.registerGauge(this, registry, () -> name == null ? \"(null)\" : name, true, \"coreName\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> startTime, true, \"startTime\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getOpenCount(), true, \"refCount\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> resourceLoader.getInstancePath().toString(), true, \"instanceDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getIndexDir(), true, \"indexDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getIndexSize(), true, \"sizeInBytes\", Category.INDEX.toString());\n    manager.registerGauge(this, registry, () -> NumberUtils.readableSize(getIndexSize()), true, \"size\", Category.INDEX.toString());\n    if (coreContainer != null) {\n      manager.registerGauge(this, registry, () -> coreContainer.getNamesForCore(this), true, \"aliases\", Category.CORE.toString());\n      final CloudDescriptor cd = getCoreDescriptor().getCloudDescriptor();\n      if (cd != null) {\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getCollectionName() != null) {\n            return cd.getCollectionName();\n          } else {\n            return \"_notset_\";\n          }\n        }, true, \"collection\", Category.CORE.toString());\n\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getShardId() != null) {\n            return cd.getShardId();\n          } else {\n            return \"_auto_\";\n          }\n        }, true, \"shard\", Category.CORE.toString());\n      }\n    }\n    // initialize disk total / free metrics\n    Path dataDirPath = Paths.get(dataDir);\n    File dataDirFile = dataDirPath.toFile();\n    manager.registerGauge(this, registry, () -> dataDirFile.getTotalSpace(), true, \"totalSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirFile.getUsableSpace(), true, \"usableSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirPath.toAbsolutePath().toString(), true, \"fs\", \"dataDir\");\n    manager.registerGauge(this, registry, () -> {\n      try {\n        return org.apache.lucene.util.IOUtils.spins(dataDirPath.toAbsolutePath());\n      } catch (IOException e) {\n        // default to spinning\n        return true;\n      }\n    }, true, \"spins\", Category.CORE.toString(), \"fs\", \"dataDir\");\n  }\n\n","bugFix":["6a9fde5df1c4cdd5292c6a5292c39c630896af8c"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    newSearcherCounter = manager.counter(this, registry, \"new\", Category.SEARCHER.toString());\n    newSearcherTimer = manager.timer(this, registry, \"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = manager.timer(this, registry, \"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = manager.counter(this, registry, \"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = manager.counter(this, registry, \"errors\", Category.SEARCHER.toString(), \"new\");\n\n    manager.registerGauge(this, registry, () -> name == null ? \"(null)\" : name, true, \"coreName\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> startTime, true, \"startTime\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getOpenCount(), true, \"refCount\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> resourceLoader.getInstancePath().toString(), true, \"instanceDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getIndexDir(), true, \"indexDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getIndexSize(), true, \"sizeInBytes\", Category.INDEX.toString());\n    manager.registerGauge(this, registry, () -> NumberUtils.readableSize(getIndexSize()), true, \"size\", Category.INDEX.toString());\n    if (coreContainer != null) {\n      manager.registerGauge(this, registry, () -> coreContainer.getNamesForCore(this), true, \"aliases\", Category.CORE.toString());\n      final CloudDescriptor cd = getCoreDescriptor().getCloudDescriptor();\n      if (cd != null) {\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getCollectionName() != null) {\n            return cd.getCollectionName();\n          } else {\n            return \"_notset_\";\n          }\n        }, true, \"collection\", Category.CORE.toString());\n\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getShardId() != null) {\n            return cd.getShardId();\n          } else {\n            return \"_auto_\";\n          }\n        }, true, \"shard\", Category.CORE.toString());\n      }\n    }\n    // initialize disk total / free metrics\n    Path dataDirPath = Paths.get(dataDir);\n    File dataDirFile = dataDirPath.toFile();\n    manager.registerGauge(this, registry, () -> dataDirFile.getTotalSpace(), true, \"totalSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirFile.getUsableSpace(), true, \"usableSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirPath.toAbsolutePath().toString(), true, \"path\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> {\n      try {\n        return org.apache.lucene.util.IOUtils.spins(dataDirPath.toAbsolutePath());\n      } catch (IOException e) {\n        // default to spinning\n        return true;\n      }\n    }, true, \"spins\", Category.CORE.toString(), \"fs\");\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    newSearcherCounter = manager.counter(this, registry, \"new\", Category.SEARCHER.toString());\n    newSearcherTimer = manager.timer(this, registry, \"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = manager.timer(this, registry, \"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = manager.counter(this, registry, \"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = manager.counter(this, registry, \"errors\", Category.SEARCHER.toString(), \"new\");\n\n    manager.registerGauge(this, registry, () -> name == null ? \"(null)\" : name, true, \"coreName\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> startTime, true, \"startTime\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getOpenCount(), true, \"refCount\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> resourceLoader.getInstancePath().toString(), true, \"instanceDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getIndexDir(), true, \"indexDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getIndexSize(), true, \"sizeInBytes\", Category.INDEX.toString());\n    manager.registerGauge(this, registry, () -> NumberUtils.readableSize(getIndexSize()), true, \"size\", Category.INDEX.toString());\n    if (coreContainer != null) {\n      manager.registerGauge(this, registry, () -> coreContainer.getNamesForCore(this), true, \"aliases\", Category.CORE.toString());\n      final CloudDescriptor cd = getCoreDescriptor().getCloudDescriptor();\n      if (cd != null) {\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getCollectionName() != null) {\n            return cd.getCollectionName();\n          } else {\n            return \"_notset_\";\n          }\n        }, true, \"collection\", Category.CORE.toString());\n\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getShardId() != null) {\n            return cd.getShardId();\n          } else {\n            return \"_auto_\";\n          }\n        }, true, \"shard\", Category.CORE.toString());\n      }\n    }\n    // initialize disk total / free metrics\n    Path dataDirPath = Paths.get(dataDir);\n    File dataDirFile = dataDirPath.toFile();\n    manager.registerGauge(this, registry, () -> dataDirFile.getTotalSpace(), true, \"totalSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirFile.getUsableSpace(), true, \"usableSpace\", Category.CORE.toString(), \"fs\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    newSearcherCounter = manager.counter(this, registry, \"new\", Category.SEARCHER.toString());\n    newSearcherTimer = manager.timer(this, registry, \"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = manager.timer(this, registry, \"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = manager.counter(this, registry, \"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = manager.counter(this, registry, \"errors\", Category.SEARCHER.toString(), \"new\");\n\n    manager.registerGauge(this, registry, () -> name == null ? \"(null)\" : name, true, \"coreName\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> startTime, true, \"startTime\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getOpenCount(), true, \"refCount\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> resourceLoader.getInstancePath().toString(), true, \"instanceDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getIndexDir(), true, \"indexDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getIndexSize(), true, \"sizeInBytes\", Category.INDEX.toString());\n    manager.registerGauge(this, registry, () -> NumberUtils.readableSize(getIndexSize()), true, \"size\", Category.INDEX.toString());\n    if (coreContainer != null) {\n      manager.registerGauge(this, registry, () -> coreContainer.getNamesForCore(this), true, \"aliases\", Category.CORE.toString());\n      final CloudDescriptor cd = getCoreDescriptor().getCloudDescriptor();\n      if (cd != null) {\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getCollectionName() != null) {\n            return cd.getCollectionName();\n          } else {\n            return \"_notset_\";\n          }\n        }, true, \"collection\", Category.CORE.toString());\n\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getShardId() != null) {\n            return cd.getShardId();\n          } else {\n            return \"_auto_\";\n          }\n        }, true, \"shard\", Category.CORE.toString());\n      }\n    }\n    // initialize disk total / free metrics\n    Path dataDirPath = Paths.get(dataDir);\n    File dataDirFile = dataDirPath.toFile();\n    manager.registerGauge(this, registry, () -> dataDirFile.getTotalSpace(), true, \"totalSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirFile.getUsableSpace(), true, \"usableSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirPath.toAbsolutePath().toString(), true, \"path\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> {\n      try {\n        return org.apache.lucene.util.IOUtils.spins(dataDirPath.toAbsolutePath());\n      } catch (IOException e) {\n        // default to spinning\n        return true;\n      }\n    }, true, \"spins\", Category.CORE.toString(), \"fs\");\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    newSearcherCounter = manager.counter(this, registry, \"new\", Category.SEARCHER.toString());\n    newSearcherTimer = manager.timer(this, registry, \"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = manager.timer(this, registry, \"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = manager.counter(this, registry, \"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = manager.counter(this, registry, \"errors\", Category.SEARCHER.toString(), \"new\");\n\n    manager.registerGauge(this, registry, () -> name == null ? \"(null)\" : name, true, \"coreName\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> startTime, true, \"startTime\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getOpenCount(), true, \"refCount\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> resourceLoader.getInstancePath().toString(), true, \"instanceDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getIndexDir(), true, \"indexDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getIndexSize(), true, \"sizeInBytes\", Category.INDEX.toString());\n    manager.registerGauge(this, registry, () -> NumberUtils.readableSize(getIndexSize()), true, \"size\", Category.INDEX.toString());\n    if (coreContainer != null) {\n      manager.registerGauge(this, registry, () -> coreContainer.getNamesForCore(this), true, \"aliases\", Category.CORE.toString());\n      final CloudDescriptor cd = getCoreDescriptor().getCloudDescriptor();\n      if (cd != null) {\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getCollectionName() != null) {\n            return cd.getCollectionName();\n          } else {\n            return \"_notset_\";\n          }\n        }, true, \"collection\", Category.CORE.toString());\n\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getShardId() != null) {\n            return cd.getShardId();\n          } else {\n            return \"_auto_\";\n          }\n        }, true, \"shard\", Category.CORE.toString());\n      }\n    }\n    // initialize disk total / free metrics\n    Path dataDirPath = Paths.get(dataDir);\n    File dataDirFile = dataDirPath.toFile();\n    manager.registerGauge(this, registry, () -> dataDirFile.getTotalSpace(), true, \"totalSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirFile.getUsableSpace(), true, \"usableSpace\", Category.CORE.toString(), \"fs\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d79cc3ed7651d0765a5d13a6a4f9f8a085116c13","date":1502789544,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    newSearcherCounter = manager.counter(this, registry, \"new\", Category.SEARCHER.toString());\n    newSearcherTimer = manager.timer(this, registry, \"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = manager.timer(this, registry, \"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = manager.counter(this, registry, \"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = manager.counter(this, registry, \"errors\", Category.SEARCHER.toString(), \"new\");\n\n    manager.registerGauge(this, registry, () -> name == null ? \"(null)\" : name, true, \"coreName\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> startTime, true, \"startTime\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getOpenCount(), true, \"refCount\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> resourceLoader.getInstancePath().toString(), true, \"instanceDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> isClosed() ? \"(closed)\" : getIndexDir(), true, \"indexDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> isClosed() ? 0 : getIndexSize(), true, \"sizeInBytes\", Category.INDEX.toString());\n    manager.registerGauge(this, registry, () -> isClosed() ? \"(closed)\" : NumberUtils.readableSize(getIndexSize()), true, \"size\", Category.INDEX.toString());\n    if (coreContainer != null) {\n      manager.registerGauge(this, registry, () -> coreContainer.getNamesForCore(this), true, \"aliases\", Category.CORE.toString());\n      final CloudDescriptor cd = getCoreDescriptor().getCloudDescriptor();\n      if (cd != null) {\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getCollectionName() != null) {\n            return cd.getCollectionName();\n          } else {\n            return \"_notset_\";\n          }\n        }, true, \"collection\", Category.CORE.toString());\n\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getShardId() != null) {\n            return cd.getShardId();\n          } else {\n            return \"_auto_\";\n          }\n        }, true, \"shard\", Category.CORE.toString());\n      }\n    }\n    // initialize disk total / free metrics\n    Path dataDirPath = Paths.get(dataDir);\n    File dataDirFile = dataDirPath.toFile();\n    manager.registerGauge(this, registry, () -> dataDirFile.getTotalSpace(), true, \"totalSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirFile.getUsableSpace(), true, \"usableSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirPath.toAbsolutePath().toString(), true, \"path\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> {\n      try {\n        return org.apache.lucene.util.IOUtils.spins(dataDirPath.toAbsolutePath());\n      } catch (IOException e) {\n        // default to spinning\n        return true;\n      }\n    }, true, \"spins\", Category.CORE.toString(), \"fs\");\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    newSearcherCounter = manager.counter(this, registry, \"new\", Category.SEARCHER.toString());\n    newSearcherTimer = manager.timer(this, registry, \"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = manager.timer(this, registry, \"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = manager.counter(this, registry, \"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = manager.counter(this, registry, \"errors\", Category.SEARCHER.toString(), \"new\");\n\n    manager.registerGauge(this, registry, () -> name == null ? \"(null)\" : name, true, \"coreName\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> startTime, true, \"startTime\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getOpenCount(), true, \"refCount\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> resourceLoader.getInstancePath().toString(), true, \"instanceDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getIndexDir(), true, \"indexDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getIndexSize(), true, \"sizeInBytes\", Category.INDEX.toString());\n    manager.registerGauge(this, registry, () -> NumberUtils.readableSize(getIndexSize()), true, \"size\", Category.INDEX.toString());\n    if (coreContainer != null) {\n      manager.registerGauge(this, registry, () -> coreContainer.getNamesForCore(this), true, \"aliases\", Category.CORE.toString());\n      final CloudDescriptor cd = getCoreDescriptor().getCloudDescriptor();\n      if (cd != null) {\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getCollectionName() != null) {\n            return cd.getCollectionName();\n          } else {\n            return \"_notset_\";\n          }\n        }, true, \"collection\", Category.CORE.toString());\n\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getShardId() != null) {\n            return cd.getShardId();\n          } else {\n            return \"_auto_\";\n          }\n        }, true, \"shard\", Category.CORE.toString());\n      }\n    }\n    // initialize disk total / free metrics\n    Path dataDirPath = Paths.get(dataDir);\n    File dataDirFile = dataDirPath.toFile();\n    manager.registerGauge(this, registry, () -> dataDirFile.getTotalSpace(), true, \"totalSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirFile.getUsableSpace(), true, \"usableSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirPath.toAbsolutePath().toString(), true, \"path\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> {\n      try {\n        return org.apache.lucene.util.IOUtils.spins(dataDirPath.toAbsolutePath());\n      } catch (IOException e) {\n        // default to spinning\n        return true;\n      }\n    }, true, \"spins\", Category.CORE.toString(), \"fs\");\n  }\n\n","bugFix":["816521ebaad5add9cb96bb88c577394e2938c40b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c00aac053fdd75193eb8b6d45b64c26c3b586d5b","date":1503143818,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    newSearcherCounter = manager.counter(this, registry, \"new\", Category.SEARCHER.toString());\n    newSearcherTimer = manager.timer(this, registry, \"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = manager.timer(this, registry, \"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = manager.counter(this, registry, \"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = manager.counter(this, registry, \"errors\", Category.SEARCHER.toString(), \"new\");\n\n    manager.registerGauge(this, registry, () -> name == null ? \"(null)\" : name, true, \"coreName\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> startTime, true, \"startTime\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getOpenCount(), true, \"refCount\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> resourceLoader.getInstancePath().toString(), true, \"instanceDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> isClosed() ? \"(closed)\" : getIndexDir(), true, \"indexDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> isClosed() ? 0 : getIndexSize(), true, \"sizeInBytes\", Category.INDEX.toString());\n    manager.registerGauge(this, registry, () -> isClosed() ? \"(closed)\" : NumberUtils.readableSize(getIndexSize()), true, \"size\", Category.INDEX.toString());\n    if (coreContainer != null) {\n      manager.registerGauge(this, registry, () -> coreContainer.getNamesForCore(this), true, \"aliases\", Category.CORE.toString());\n      final CloudDescriptor cd = getCoreDescriptor().getCloudDescriptor();\n      if (cd != null) {\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getCollectionName() != null) {\n            return cd.getCollectionName();\n          } else {\n            return \"_notset_\";\n          }\n        }, true, \"collection\", Category.CORE.toString());\n\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getShardId() != null) {\n            return cd.getShardId();\n          } else {\n            return \"_auto_\";\n          }\n        }, true, \"shard\", Category.CORE.toString());\n      }\n    }\n    // initialize disk total / free metrics\n    Path dataDirPath = Paths.get(dataDir);\n    File dataDirFile = dataDirPath.toFile();\n    manager.registerGauge(this, registry, () -> dataDirFile.getTotalSpace(), true, \"totalSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirFile.getUsableSpace(), true, \"usableSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirPath.toAbsolutePath().toString(), true, \"path\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> {\n      try {\n        return org.apache.lucene.util.IOUtils.spins(dataDirPath.toAbsolutePath());\n      } catch (IOException e) {\n        // default to spinning\n        return true;\n      }\n    }, true, \"spins\", Category.CORE.toString(), \"fs\");\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    newSearcherCounter = manager.counter(this, registry, \"new\", Category.SEARCHER.toString());\n    newSearcherTimer = manager.timer(this, registry, \"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = manager.timer(this, registry, \"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = manager.counter(this, registry, \"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = manager.counter(this, registry, \"errors\", Category.SEARCHER.toString(), \"new\");\n\n    manager.registerGauge(this, registry, () -> name == null ? \"(null)\" : name, true, \"coreName\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> startTime, true, \"startTime\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getOpenCount(), true, \"refCount\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> resourceLoader.getInstancePath().toString(), true, \"instanceDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getIndexDir(), true, \"indexDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getIndexSize(), true, \"sizeInBytes\", Category.INDEX.toString());\n    manager.registerGauge(this, registry, () -> NumberUtils.readableSize(getIndexSize()), true, \"size\", Category.INDEX.toString());\n    if (coreContainer != null) {\n      manager.registerGauge(this, registry, () -> coreContainer.getNamesForCore(this), true, \"aliases\", Category.CORE.toString());\n      final CloudDescriptor cd = getCoreDescriptor().getCloudDescriptor();\n      if (cd != null) {\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getCollectionName() != null) {\n            return cd.getCollectionName();\n          } else {\n            return \"_notset_\";\n          }\n        }, true, \"collection\", Category.CORE.toString());\n\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getShardId() != null) {\n            return cd.getShardId();\n          } else {\n            return \"_auto_\";\n          }\n        }, true, \"shard\", Category.CORE.toString());\n      }\n    }\n    // initialize disk total / free metrics\n    Path dataDirPath = Paths.get(dataDir);\n    File dataDirFile = dataDirPath.toFile();\n    manager.registerGauge(this, registry, () -> dataDirFile.getTotalSpace(), true, \"totalSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirFile.getUsableSpace(), true, \"usableSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirPath.toAbsolutePath().toString(), true, \"path\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> {\n      try {\n        return org.apache.lucene.util.IOUtils.spins(dataDirPath.toAbsolutePath());\n      } catch (IOException e) {\n        // default to spinning\n        return true;\n      }\n    }, true, \"spins\", Category.CORE.toString(), \"fs\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfc52860e6d13d034226a760813c59d984c6817a","date":1522229027,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String tag, String scope) {\n    newSearcherCounter = manager.counter(this, registry, \"new\", Category.SEARCHER.toString());\n    newSearcherTimer = manager.timer(this, registry, \"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = manager.timer(this, registry, \"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = manager.counter(this, registry, \"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = manager.counter(this, registry, \"errors\", Category.SEARCHER.toString(), \"new\");\n\n    manager.registerGauge(this, registry, () -> name == null ? \"(null)\" : name, getMetricTag(), true, \"coreName\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> startTime, getMetricTag(), true, \"startTime\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getOpenCount(), getMetricTag(), true, \"refCount\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> resourceLoader.getInstancePath().toString(), getMetricTag(), true, \"instanceDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> isClosed() ? \"(closed)\" : getIndexDir(), getMetricTag(), true, \"indexDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> isClosed() ? 0 : getIndexSize(), getMetricTag(), true, \"sizeInBytes\", Category.INDEX.toString());\n    manager.registerGauge(this, registry, () -> isClosed() ? \"(closed)\" : NumberUtils.readableSize(getIndexSize()), getMetricTag(), true, \"size\", Category.INDEX.toString());\n    if (coreContainer != null) {\n      manager.registerGauge(this, registry, () -> coreContainer.getNamesForCore(this), getMetricTag(), true, \"aliases\", Category.CORE.toString());\n      final CloudDescriptor cd = getCoreDescriptor().getCloudDescriptor();\n      if (cd != null) {\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getCollectionName() != null) {\n            return cd.getCollectionName();\n          } else {\n            return \"_notset_\";\n          }\n        }, getMetricTag(), true, \"collection\", Category.CORE.toString());\n\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getShardId() != null) {\n            return cd.getShardId();\n          } else {\n            return \"_auto_\";\n          }\n        }, getMetricTag(), true, \"shard\", Category.CORE.toString());\n      }\n    }\n    // initialize disk total / free metrics\n    Path dataDirPath = Paths.get(dataDir);\n    File dataDirFile = dataDirPath.toFile();\n    manager.registerGauge(this, registry, () -> dataDirFile.getTotalSpace(), getMetricTag(), true, \"totalSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirFile.getUsableSpace(), getMetricTag(), true, \"usableSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirPath.toAbsolutePath().toString(), getMetricTag(), true, \"path\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> {\n      try {\n        return org.apache.lucene.util.IOUtils.spins(dataDirPath.toAbsolutePath());\n      } catch (IOException e) {\n        // default to spinning\n        return true;\n      }\n    }, getMetricTag(), true, \"spins\", Category.CORE.toString(), \"fs\");\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    newSearcherCounter = manager.counter(this, registry, \"new\", Category.SEARCHER.toString());\n    newSearcherTimer = manager.timer(this, registry, \"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = manager.timer(this, registry, \"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = manager.counter(this, registry, \"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = manager.counter(this, registry, \"errors\", Category.SEARCHER.toString(), \"new\");\n\n    manager.registerGauge(this, registry, () -> name == null ? \"(null)\" : name, true, \"coreName\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> startTime, true, \"startTime\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getOpenCount(), true, \"refCount\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> resourceLoader.getInstancePath().toString(), true, \"instanceDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> isClosed() ? \"(closed)\" : getIndexDir(), true, \"indexDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> isClosed() ? 0 : getIndexSize(), true, \"sizeInBytes\", Category.INDEX.toString());\n    manager.registerGauge(this, registry, () -> isClosed() ? \"(closed)\" : NumberUtils.readableSize(getIndexSize()), true, \"size\", Category.INDEX.toString());\n    if (coreContainer != null) {\n      manager.registerGauge(this, registry, () -> coreContainer.getNamesForCore(this), true, \"aliases\", Category.CORE.toString());\n      final CloudDescriptor cd = getCoreDescriptor().getCloudDescriptor();\n      if (cd != null) {\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getCollectionName() != null) {\n            return cd.getCollectionName();\n          } else {\n            return \"_notset_\";\n          }\n        }, true, \"collection\", Category.CORE.toString());\n\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getShardId() != null) {\n            return cd.getShardId();\n          } else {\n            return \"_auto_\";\n          }\n        }, true, \"shard\", Category.CORE.toString());\n      }\n    }\n    // initialize disk total / free metrics\n    Path dataDirPath = Paths.get(dataDir);\n    File dataDirFile = dataDirPath.toFile();\n    manager.registerGauge(this, registry, () -> dataDirFile.getTotalSpace(), true, \"totalSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirFile.getUsableSpace(), true, \"usableSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirPath.toAbsolutePath().toString(), true, \"path\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> {\n      try {\n        return org.apache.lucene.util.IOUtils.spins(dataDirPath.toAbsolutePath());\n      } catch (IOException e) {\n        // default to spinning\n        return true;\n      }\n    }, true, \"spins\", Category.CORE.toString(), \"fs\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String tag, String scope) {\n    newSearcherCounter = manager.counter(this, registry, \"new\", Category.SEARCHER.toString());\n    newSearcherTimer = manager.timer(this, registry, \"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = manager.timer(this, registry, \"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = manager.counter(this, registry, \"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = manager.counter(this, registry, \"errors\", Category.SEARCHER.toString(), \"new\");\n\n    manager.registerGauge(this, registry, () -> name == null ? \"(null)\" : name, getMetricTag(), true, \"coreName\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> startTime, getMetricTag(), true, \"startTime\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getOpenCount(), getMetricTag(), true, \"refCount\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> resourceLoader.getInstancePath().toString(), getMetricTag(), true, \"instanceDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> isClosed() ? \"(closed)\" : getIndexDir(), getMetricTag(), true, \"indexDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> isClosed() ? 0 : getIndexSize(), getMetricTag(), true, \"sizeInBytes\", Category.INDEX.toString());\n    manager.registerGauge(this, registry, () -> isClosed() ? \"(closed)\" : NumberUtils.readableSize(getIndexSize()), getMetricTag(), true, \"size\", Category.INDEX.toString());\n    if (coreContainer != null) {\n      manager.registerGauge(this, registry, () -> coreContainer.getNamesForCore(this), getMetricTag(), true, \"aliases\", Category.CORE.toString());\n      final CloudDescriptor cd = getCoreDescriptor().getCloudDescriptor();\n      if (cd != null) {\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getCollectionName() != null) {\n            return cd.getCollectionName();\n          } else {\n            return \"_notset_\";\n          }\n        }, getMetricTag(), true, \"collection\", Category.CORE.toString());\n\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getShardId() != null) {\n            return cd.getShardId();\n          } else {\n            return \"_auto_\";\n          }\n        }, getMetricTag(), true, \"shard\", Category.CORE.toString());\n      }\n    }\n    // initialize disk total / free metrics\n    Path dataDirPath = Paths.get(dataDir);\n    File dataDirFile = dataDirPath.toFile();\n    manager.registerGauge(this, registry, () -> dataDirFile.getTotalSpace(), getMetricTag(), true, \"totalSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirFile.getUsableSpace(), getMetricTag(), true, \"usableSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirPath.toAbsolutePath().toString(), getMetricTag(), true, \"path\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> {\n      try {\n        return org.apache.lucene.util.IOUtils.spins(dataDirPath.toAbsolutePath());\n      } catch (IOException e) {\n        // default to spinning\n        return true;\n      }\n    }, getMetricTag(), true, \"spins\", Category.CORE.toString(), \"fs\");\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    newSearcherCounter = manager.counter(this, registry, \"new\", Category.SEARCHER.toString());\n    newSearcherTimer = manager.timer(this, registry, \"time\", Category.SEARCHER.toString(), \"new\");\n    newSearcherWarmupTimer = manager.timer(this, registry, \"warmup\", Category.SEARCHER.toString(), \"new\");\n    newSearcherMaxReachedCounter = manager.counter(this, registry, \"maxReached\", Category.SEARCHER.toString(), \"new\");\n    newSearcherOtherErrorsCounter = manager.counter(this, registry, \"errors\", Category.SEARCHER.toString(), \"new\");\n\n    manager.registerGauge(this, registry, () -> name == null ? \"(null)\" : name, true, \"coreName\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> startTime, true, \"startTime\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> getOpenCount(), true, \"refCount\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> resourceLoader.getInstancePath().toString(), true, \"instanceDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> isClosed() ? \"(closed)\" : getIndexDir(), true, \"indexDir\", Category.CORE.toString());\n    manager.registerGauge(this, registry, () -> isClosed() ? 0 : getIndexSize(), true, \"sizeInBytes\", Category.INDEX.toString());\n    manager.registerGauge(this, registry, () -> isClosed() ? \"(closed)\" : NumberUtils.readableSize(getIndexSize()), true, \"size\", Category.INDEX.toString());\n    if (coreContainer != null) {\n      manager.registerGauge(this, registry, () -> coreContainer.getNamesForCore(this), true, \"aliases\", Category.CORE.toString());\n      final CloudDescriptor cd = getCoreDescriptor().getCloudDescriptor();\n      if (cd != null) {\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getCollectionName() != null) {\n            return cd.getCollectionName();\n          } else {\n            return \"_notset_\";\n          }\n        }, true, \"collection\", Category.CORE.toString());\n\n        manager.registerGauge(this, registry, () -> {\n          if (cd.getShardId() != null) {\n            return cd.getShardId();\n          } else {\n            return \"_auto_\";\n          }\n        }, true, \"shard\", Category.CORE.toString());\n      }\n    }\n    // initialize disk total / free metrics\n    Path dataDirPath = Paths.get(dataDir);\n    File dataDirFile = dataDirPath.toFile();\n    manager.registerGauge(this, registry, () -> dataDirFile.getTotalSpace(), true, \"totalSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirFile.getUsableSpace(), true, \"usableSpace\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> dataDirPath.toAbsolutePath().toString(), true, \"path\", Category.CORE.toString(), \"fs\");\n    manager.registerGauge(this, registry, () -> {\n      try {\n        return org.apache.lucene.util.IOUtils.spins(dataDirPath.toAbsolutePath());\n      } catch (IOException e) {\n        // default to spinning\n        return true;\n      }\n    }, true, \"spins\", Category.CORE.toString(), \"fs\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["0736a2d3712288b09f053f4ca52facf04669b06d"],"c00aac053fdd75193eb8b6d45b64c26c3b586d5b":["93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","d79cc3ed7651d0765a5d13a6a4f9f8a085116c13"],"43564cbb30b064675027cfb569564e8531096e97":["d79cc3ed7651d0765a5d13a6a4f9f8a085116c13","bfc52860e6d13d034226a760813c59d984c6817a"],"f5bbcf309247eced63db2b2eb0d35bb3e8c9384d":["6a9fde5df1c4cdd5292c6a5292c39c630896af8c"],"6a9fde5df1c4cdd5292c6a5292c39c630896af8c":["28288370235ed02234a64753cdbf0c6ec096304a"],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"d70adda62e57869d6b5efc336ea37e0b0e4cf79a":["d402ed03d3abe439fa7859facfae3c2fe0aba77e"],"0736a2d3712288b09f053f4ca52facf04669b06d":["ab68488225b6a6c357dda72ed11dedca9914a192"],"30c8e5574b55d57947e989443dfde611646530ee":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","28288370235ed02234a64753cdbf0c6ec096304a"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["816521ebaad5add9cb96bb88c577394e2938c40b"],"816521ebaad5add9cb96bb88c577394e2938c40b":["d70adda62e57869d6b5efc336ea37e0b0e4cf79a"],"28288370235ed02234a64753cdbf0c6ec096304a":["729cb470f975115d4c60517b2cb7c42e37a7a2e1","7871f9c286dce2a9370bcf517a3e7d12e3bd9602"],"58884af1f68e9d61c217c753fbd6266d86a63b14":["28288370235ed02234a64753cdbf0c6ec096304a","f5bbcf309247eced63db2b2eb0d35bb3e8c9384d"],"bfc52860e6d13d034226a760813c59d984c6817a":["d79cc3ed7651d0765a5d13a6a4f9f8a085116c13"],"d79cc3ed7651d0765a5d13a6a4f9f8a085116c13":["f5bbcf309247eced63db2b2eb0d35bb3e8c9384d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f34d83c894e07c24f5f957820777b5da2cc29e5a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["30c8e5574b55d57947e989443dfde611646530ee","f5bbcf309247eced63db2b2eb0d35bb3e8c9384d"],"6db2a2569883aff84117ae03caf199738df62519":["0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b"],"ab68488225b6a6c357dda72ed11dedca9914a192":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6db2a2569883aff84117ae03caf199738df62519"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43564cbb30b064675027cfb569564e8531096e97"],"d402ed03d3abe439fa7859facfae3c2fe0aba77e":["f34d83c894e07c24f5f957820777b5da2cc29e5a"],"0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["30c8e5574b55d57947e989443dfde611646530ee"],"c00aac053fdd75193eb8b6d45b64c26c3b586d5b":[],"43564cbb30b064675027cfb569564e8531096e97":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f5bbcf309247eced63db2b2eb0d35bb3e8c9384d":["58884af1f68e9d61c217c753fbd6266d86a63b14","d79cc3ed7651d0765a5d13a6a4f9f8a085116c13","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"6a9fde5df1c4cdd5292c6a5292c39c630896af8c":["f5bbcf309247eced63db2b2eb0d35bb3e8c9384d"],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["28288370235ed02234a64753cdbf0c6ec096304a"],"0736a2d3712288b09f053f4ca52facf04669b06d":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"d70adda62e57869d6b5efc336ea37e0b0e4cf79a":["816521ebaad5add9cb96bb88c577394e2938c40b"],"30c8e5574b55d57947e989443dfde611646530ee":["93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"28288370235ed02234a64753cdbf0c6ec096304a":["6a9fde5df1c4cdd5292c6a5292c39c630896af8c","30c8e5574b55d57947e989443dfde611646530ee","58884af1f68e9d61c217c753fbd6266d86a63b14"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["7871f9c286dce2a9370bcf517a3e7d12e3bd9602","28288370235ed02234a64753cdbf0c6ec096304a"],"816521ebaad5add9cb96bb88c577394e2938c40b":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"bfc52860e6d13d034226a760813c59d984c6817a":["43564cbb30b064675027cfb569564e8531096e97"],"d79cc3ed7651d0765a5d13a6a4f9f8a085116c13":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b","43564cbb30b064675027cfb569564e8531096e97","bfc52860e6d13d034226a760813c59d984c6817a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f34d83c894e07c24f5f957820777b5da2cc29e5a","ab68488225b6a6c357dda72ed11dedca9914a192","0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b"],"f34d83c894e07c24f5f957820777b5da2cc29e5a":["d402ed03d3abe439fa7859facfae3c2fe0aba77e"],"6db2a2569883aff84117ae03caf199738df62519":["ab68488225b6a6c357dda72ed11dedca9914a192"],"ab68488225b6a6c357dda72ed11dedca9914a192":["0736a2d3712288b09f053f4ca52facf04669b06d"],"d402ed03d3abe439fa7859facfae3c2fe0aba77e":["d70adda62e57869d6b5efc336ea37e0b0e4cf79a"],"0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b":["6db2a2569883aff84117ae03caf199738df62519"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b","58884af1f68e9d61c217c753fbd6266d86a63b14","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}