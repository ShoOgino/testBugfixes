{"path":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#testParseIntRoundTrip().mjava","commits":[{"id":"039a98d0ba2c3095541adb3e3ecbdee7812fc4b8","date":1372293867,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#testParseIntRoundTrip().mjava","pathOld":"/dev/null","sourceNew":"  public void testParseIntRoundTrip() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(\"int1_i\")); // should match dynamic field \"*_i\"\n    assertNotNull(schema.getFieldOrNull(\"int2_i\")); // should match dynamic field \"*_i\"\n    int value = 1089883491;\n    String intString1 = \"1089883491\";\n    String intString2 = \"1,089,883,491\";\n    SolrInputDocument d = processAdd(\"parse-int\",\n        doc(f(\"id\", \"113\"), f(\"int1_i\", intString1), f(\"int2_i\", intString2)));\n    assertNotNull(d);\n    assertTrue(d.getFieldValue(\"int1_i\") instanceof Integer);\n    assertEquals(value, ((Integer)d.getFieldValue(\"int1_i\")).intValue());\n    assertTrue(d.getFieldValue(\"int2_i\") instanceof Integer);\n    assertEquals(value, ((Integer)d.getFieldValue(\"int2_i\")).intValue());\n\n    assertU(commit());\n    assertQ(req(\"id:113\")\n        ,\"//int[@name='int1_i'][.='\" + value + \"']\"\n        ,\"//int[@name='int2_i'][.='\" + value + \"']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#testParseIntRoundTrip().mjava","pathOld":"/dev/null","sourceNew":"  public void testParseIntRoundTrip() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(\"int1_i\")); // should match dynamic field \"*_i\"\n    assertNotNull(schema.getFieldOrNull(\"int2_i\")); // should match dynamic field \"*_i\"\n    int value = 1089883491;\n    String intString1 = \"1089883491\";\n    String intString2 = \"1,089,883,491\";\n    SolrInputDocument d = processAdd(\"parse-int\",\n        doc(f(\"id\", \"113\"), f(\"int1_i\", intString1), f(\"int2_i\", intString2)));\n    assertNotNull(d);\n    assertTrue(d.getFieldValue(\"int1_i\") instanceof Integer);\n    assertEquals(value, ((Integer)d.getFieldValue(\"int1_i\")).intValue());\n    assertTrue(d.getFieldValue(\"int2_i\") instanceof Integer);\n    assertEquals(value, ((Integer)d.getFieldValue(\"int2_i\")).intValue());\n\n    assertU(commit());\n    assertQ(req(\"id:113\")\n        ,\"//int[@name='int1_i'][.='\" + value + \"']\"\n        ,\"//int[@name='int2_i'][.='\" + value + \"']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"695a2ea9bbdf1f04153f1f6f0fa8595f3694b58f","date":1561505163,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#testParseIntRoundTrip().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#testParseIntRoundTrip().mjava","sourceNew":"  public void testParseIntRoundTrip() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(\"int1_i\")); // should match dynamic field \"*_i\"\n    assertNotNull(schema.getFieldOrNull(\"int2_i\")); // should match dynamic field \"*_i\"\n    int value = 1089883491;\n    String intString1 = \"1089883491\";\n    String intString2 = \"1,089,883,491\";\n    SolrInputDocument d = processAdd(\"parse-int\",\n        doc(f(\"id\", \"113\"), f(\"int1_i\", intString1), f(\"int2_i\", intString2)));\n    assertNotNull(d);\n    assertThat(d.getFieldValue(\"int1_i\"), IS_INTEGER);\n    assertEquals(value, ((Integer)d.getFieldValue(\"int1_i\")).intValue());\n    assertThat(d.getFieldValue(\"int2_i\"), IS_INTEGER);\n    assertEquals(value, ((Integer)d.getFieldValue(\"int2_i\")).intValue());\n\n    assertU(commit());\n    assertQ(req(\"id:113\")\n        ,\"//int[@name='int1_i'][.='\" + value + \"']\"\n        ,\"//int[@name='int2_i'][.='\" + value + \"']\");\n  }\n\n","sourceOld":"  public void testParseIntRoundTrip() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(\"int1_i\")); // should match dynamic field \"*_i\"\n    assertNotNull(schema.getFieldOrNull(\"int2_i\")); // should match dynamic field \"*_i\"\n    int value = 1089883491;\n    String intString1 = \"1089883491\";\n    String intString2 = \"1,089,883,491\";\n    SolrInputDocument d = processAdd(\"parse-int\",\n        doc(f(\"id\", \"113\"), f(\"int1_i\", intString1), f(\"int2_i\", intString2)));\n    assertNotNull(d);\n    assertTrue(d.getFieldValue(\"int1_i\") instanceof Integer);\n    assertEquals(value, ((Integer)d.getFieldValue(\"int1_i\")).intValue());\n    assertTrue(d.getFieldValue(\"int2_i\") instanceof Integer);\n    assertEquals(value, ((Integer)d.getFieldValue(\"int2_i\")).intValue());\n\n    assertU(commit());\n    assertQ(req(\"id:113\")\n        ,\"//int[@name='int1_i'][.='\" + value + \"']\"\n        ,\"//int[@name='int2_i'][.='\" + value + \"']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","039a98d0ba2c3095541adb3e3ecbdee7812fc4b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"039a98d0ba2c3095541adb3e3ecbdee7812fc4b8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"695a2ea9bbdf1f04153f1f6f0fa8595f3694b58f":["039a98d0ba2c3095541adb3e3ecbdee7812fc4b8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["695a2ea9bbdf1f04153f1f6f0fa8595f3694b58f"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","039a98d0ba2c3095541adb3e3ecbdee7812fc4b8"],"039a98d0ba2c3095541adb3e3ecbdee7812fc4b8":["37a0f60745e53927c4c876cfe5b5a58170f0646c","695a2ea9bbdf1f04153f1f6f0fa8595f3694b58f"],"695a2ea9bbdf1f04153f1f6f0fa8595f3694b58f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}