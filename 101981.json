{"path":"solr/src/java/org/apache/solr/spelling/suggest/Suggester#getSuggestions(SpellingOptions).mjava","commits":[{"id":"4ff4f089150b5073dcd4fa1e2018954e3a1eb1af","date":1282571040,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/spelling/suggest/Suggester#getSuggestions(SpellingOptions).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n    LOG.debug(\"getSuggestions: \" + options.tokens);\n    if (lookup == null) {\n      LOG.info(\"Lookup is null - invoke spellchecker.build first\");\n      return EMPTY_RESULT;\n    }\n    SpellingResult res = new SpellingResult();\n    for (Token t : options.tokens) {\n      String term = new String(t.buffer(), 0, t.length());\n      List<LookupResult> suggestions = lookup.lookup(term,\n          options.onlyMorePopular, options.count);\n      if (suggestions == null) {\n        continue;\n      }\n      for (LookupResult lr : suggestions) {\n        res.add(t, lr.key, ((Number)lr.value).intValue());\n      }\n    }\n    return res;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfeee7ee8b23243a605949dd5e700be031184273","date":1287409807,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/spelling/suggest/Suggester#getSuggestions(SpellingOptions).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/Suggester#getSuggestions(SpellingOptions).mjava","sourceNew":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n    LOG.debug(\"getSuggestions: \" + options.tokens);\n    if (lookup == null) {\n      LOG.info(\"Lookup is null - invoke spellchecker.build first\");\n      return EMPTY_RESULT;\n    }\n    SpellingResult res = new SpellingResult();\n    for (Token t : options.tokens) {\n      String term = new String(t.buffer(), 0, t.length());\n      List<LookupResult> suggestions = lookup.lookup(term,\n          options.onlyMorePopular, options.count);\n      if (suggestions == null) {\n        continue;\n      }\n      if (!options.onlyMorePopular) {\n        Collections.sort(suggestions);\n      }\n      for (LookupResult lr : suggestions) {\n        res.add(t, lr.key, ((Number)lr.value).intValue());\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n    LOG.debug(\"getSuggestions: \" + options.tokens);\n    if (lookup == null) {\n      LOG.info(\"Lookup is null - invoke spellchecker.build first\");\n      return EMPTY_RESULT;\n    }\n    SpellingResult res = new SpellingResult();\n    for (Token t : options.tokens) {\n      String term = new String(t.buffer(), 0, t.length());\n      List<LookupResult> suggestions = lookup.lookup(term,\n          options.onlyMorePopular, options.count);\n      if (suggestions == null) {\n        continue;\n      }\n      for (LookupResult lr : suggestions) {\n        res.add(t, lr.key, ((Number)lr.value).intValue());\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/spelling/suggest/Suggester#getSuggestions(SpellingOptions).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/Suggester#getSuggestions(SpellingOptions).mjava","sourceNew":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n    LOG.debug(\"getSuggestions: \" + options.tokens);\n    if (lookup == null) {\n      LOG.info(\"Lookup is null - invoke spellchecker.build first\");\n      return EMPTY_RESULT;\n    }\n    SpellingResult res = new SpellingResult();\n    for (Token t : options.tokens) {\n      String term = new String(t.buffer(), 0, t.length());\n      List<LookupResult> suggestions = lookup.lookup(term,\n          options.onlyMorePopular, options.count);\n      if (suggestions == null) {\n        continue;\n      }\n      if (!options.onlyMorePopular) {\n        Collections.sort(suggestions);\n      }\n      for (LookupResult lr : suggestions) {\n        res.add(t, lr.key, ((Number)lr.value).intValue());\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n    LOG.debug(\"getSuggestions: \" + options.tokens);\n    if (lookup == null) {\n      LOG.info(\"Lookup is null - invoke spellchecker.build first\");\n      return EMPTY_RESULT;\n    }\n    SpellingResult res = new SpellingResult();\n    for (Token t : options.tokens) {\n      String term = new String(t.buffer(), 0, t.length());\n      List<LookupResult> suggestions = lookup.lookup(term,\n          options.onlyMorePopular, options.count);\n      if (suggestions == null) {\n        continue;\n      }\n      for (LookupResult lr : suggestions) {\n        res.add(t, lr.key, ((Number)lr.value).intValue());\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/spelling/suggest/Suggester#getSuggestions(SpellingOptions).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n    LOG.debug(\"getSuggestions: \" + options.tokens);\n    if (lookup == null) {\n      LOG.info(\"Lookup is null - invoke spellchecker.build first\");\n      return EMPTY_RESULT;\n    }\n    SpellingResult res = new SpellingResult();\n    for (Token t : options.tokens) {\n      String term = new String(t.buffer(), 0, t.length());\n      List<LookupResult> suggestions = lookup.lookup(term,\n          options.onlyMorePopular, options.count);\n      if (suggestions == null) {\n        continue;\n      }\n      if (!options.onlyMorePopular) {\n        Collections.sort(suggestions);\n      }\n      for (LookupResult lr : suggestions) {\n        res.add(t, lr.key, ((Number)lr.value).intValue());\n      }\n    }\n    return res;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#getSuggestions(SpellingOptions).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/Suggester#getSuggestions(SpellingOptions).mjava","sourceNew":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n    LOG.debug(\"getSuggestions: \" + options.tokens);\n    if (lookup == null) {\n      LOG.info(\"Lookup is null - invoke spellchecker.build first\");\n      return EMPTY_RESULT;\n    }\n    SpellingResult res = new SpellingResult();\n    for (Token t : options.tokens) {\n      String term = new String(t.buffer(), 0, t.length());\n      List<LookupResult> suggestions = lookup.lookup(term,\n          options.onlyMorePopular, options.count);\n      if (suggestions == null) {\n        continue;\n      }\n      if (!options.onlyMorePopular) {\n        Collections.sort(suggestions);\n      }\n      for (LookupResult lr : suggestions) {\n        res.add(t, lr.key, ((Number)lr.value).intValue());\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n    LOG.debug(\"getSuggestions: \" + options.tokens);\n    if (lookup == null) {\n      LOG.info(\"Lookup is null - invoke spellchecker.build first\");\n      return EMPTY_RESULT;\n    }\n    SpellingResult res = new SpellingResult();\n    for (Token t : options.tokens) {\n      String term = new String(t.buffer(), 0, t.length());\n      List<LookupResult> suggestions = lookup.lookup(term,\n          options.onlyMorePopular, options.count);\n      if (suggestions == null) {\n        continue;\n      }\n      if (!options.onlyMorePopular) {\n        Collections.sort(suggestions);\n      }\n      for (LookupResult lr : suggestions) {\n        res.add(t, lr.key, ((Number)lr.value).intValue());\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#getSuggestions(SpellingOptions).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/Suggester#getSuggestions(SpellingOptions).mjava","sourceNew":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n    LOG.debug(\"getSuggestions: \" + options.tokens);\n    if (lookup == null) {\n      LOG.info(\"Lookup is null - invoke spellchecker.build first\");\n      return EMPTY_RESULT;\n    }\n    SpellingResult res = new SpellingResult();\n    for (Token t : options.tokens) {\n      String term = new String(t.buffer(), 0, t.length());\n      List<LookupResult> suggestions = lookup.lookup(term,\n          options.onlyMorePopular, options.count);\n      if (suggestions == null) {\n        continue;\n      }\n      if (!options.onlyMorePopular) {\n        Collections.sort(suggestions);\n      }\n      for (LookupResult lr : suggestions) {\n        res.add(t, lr.key, ((Number)lr.value).intValue());\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n    LOG.debug(\"getSuggestions: \" + options.tokens);\n    if (lookup == null) {\n      LOG.info(\"Lookup is null - invoke spellchecker.build first\");\n      return EMPTY_RESULT;\n    }\n    SpellingResult res = new SpellingResult();\n    for (Token t : options.tokens) {\n      String term = new String(t.buffer(), 0, t.length());\n      List<LookupResult> suggestions = lookup.lookup(term,\n          options.onlyMorePopular, options.count);\n      if (suggestions == null) {\n        continue;\n      }\n      if (!options.onlyMorePopular) {\n        Collections.sort(suggestions);\n      }\n      for (LookupResult lr : suggestions) {\n        res.add(t, lr.key, ((Number)lr.value).intValue());\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/Suggester#getSuggestions(SpellingOptions).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/Suggester#getSuggestions(SpellingOptions).mjava","sourceNew":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n    LOG.debug(\"getSuggestions: \" + options.tokens);\n    if (lookup == null) {\n      LOG.info(\"Lookup is null - invoke spellchecker.build first\");\n      return EMPTY_RESULT;\n    }\n    SpellingResult res = new SpellingResult();\n    for (Token t : options.tokens) {\n      String term = new String(t.buffer(), 0, t.length());\n      List<LookupResult> suggestions = lookup.lookup(term,\n          options.onlyMorePopular, options.count);\n      if (suggestions == null) {\n        continue;\n      }\n      if (!options.onlyMorePopular) {\n        Collections.sort(suggestions);\n      }\n      for (LookupResult lr : suggestions) {\n        res.add(t, lr.key, ((Number)lr.value).intValue());\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n    LOG.debug(\"getSuggestions: \" + options.tokens);\n    if (lookup == null) {\n      LOG.info(\"Lookup is null - invoke spellchecker.build first\");\n      return EMPTY_RESULT;\n    }\n    SpellingResult res = new SpellingResult();\n    for (Token t : options.tokens) {\n      String term = new String(t.buffer(), 0, t.length());\n      List<LookupResult> suggestions = lookup.lookup(term,\n          options.onlyMorePopular, options.count);\n      if (suggestions == null) {\n        continue;\n      }\n      if (!options.onlyMorePopular) {\n        Collections.sort(suggestions);\n      }\n      for (LookupResult lr : suggestions) {\n        res.add(t, lr.key, ((Number)lr.value).intValue());\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ff4f089150b5073dcd4fa1e2018954e3a1eb1af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["cfeee7ee8b23243a605949dd5e700be031184273"],"c26f00b574427b55127e869b935845554afde1fa":["cfeee7ee8b23243a605949dd5e700be031184273","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cfeee7ee8b23243a605949dd5e700be031184273":["4ff4f089150b5073dcd4fa1e2018954e3a1eb1af"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["cfeee7ee8b23243a605949dd5e700be031184273"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cfeee7ee8b23243a605949dd5e700be031184273"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["4ff4f089150b5073dcd4fa1e2018954e3a1eb1af","cfeee7ee8b23243a605949dd5e700be031184273"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"4ff4f089150b5073dcd4fa1e2018954e3a1eb1af":["cfeee7ee8b23243a605949dd5e700be031184273","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ff4f089150b5073dcd4fa1e2018954e3a1eb1af","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cfeee7ee8b23243a605949dd5e700be031184273":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}