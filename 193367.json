{"path":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testIncrementalUnicodeStrings().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testIncrementalUnicodeStrings().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-510\n  public void testIncrementalUnicodeStrings() throws Throwable {\n    r = newRandom();\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    UnicodeUtil.UTF8Result utf8 = new UnicodeUtil.UTF8Result();\n    UnicodeUtil.UTF16Result utf16 = new UnicodeUtil.UTF16Result();\n    UnicodeUtil.UTF16Result utf16a = new UnicodeUtil.UTF16Result();\n\n    boolean hasIllegal = false;\n    byte[] last = new byte[60];\n\n    for(int iter=0;iter<100000;iter++) {\n\n      final int prefix;\n\n      if (iter == 0 || hasIllegal)\n        prefix = 0;\n      else\n        prefix = nextInt(20);\n\n      hasIllegal = fillUnicode(buffer, expected, prefix, 20-prefix);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.result[i]);\n      }\n\n      int bytePrefix = 20;\n      if (iter == 0 || hasIllegal)\n        bytePrefix = 0;\n      else\n        for(int i=0;i<20;i++)\n          if (last[i] != utf8.result[i]) {\n            bytePrefix = i;\n            break;\n          }\n      System.arraycopy(utf8.result, 0, last, 0, utf8.length);\n\n      UnicodeUtil.UTF8toUTF16(utf8.result, bytePrefix, utf8.length-bytePrefix, utf16);\n      assertEquals(20, utf16.length);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.result[i]);\n\n      UnicodeUtil.UTF8toUTF16(utf8.result, 0, utf8.length, utf16a);\n      assertEquals(20, utf16a.length);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16a.result[i]);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testIncrementalUnicodeStrings().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testIncrementalUnicodeStrings().mjava","sourceNew":"  // LUCENE-510\n  public void testIncrementalUnicodeStrings() throws Throwable {\n    r = newRandom();\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    UnicodeUtil.UTF8Result utf8 = new UnicodeUtil.UTF8Result();\n    UnicodeUtil.UTF16Result utf16 = new UnicodeUtil.UTF16Result();\n    UnicodeUtil.UTF16Result utf16a = new UnicodeUtil.UTF16Result();\n\n    boolean hasIllegal = false;\n    byte[] last = new byte[60];\n\n    for(int iter=0;iter<100000;iter++) {\n\n      final int prefix;\n\n      if (iter == 0 || hasIllegal)\n        prefix = 0;\n      else\n        prefix = nextInt(20);\n\n      hasIllegal = fillUnicode(buffer, expected, prefix, 20-prefix);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.result[i]);\n      }\n\n      int bytePrefix = 20;\n      if (iter == 0 || hasIllegal)\n        bytePrefix = 0;\n      else\n        for(int i=0;i<20;i++)\n          if (last[i] != utf8.result[i]) {\n            bytePrefix = i;\n            break;\n          }\n      System.arraycopy(utf8.result, 0, last, 0, utf8.length);\n\n      UnicodeUtil.UTF8toUTF16(utf8.result, bytePrefix, utf8.length-bytePrefix, utf16);\n      assertEquals(20, utf16.length);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.result[i]);\n\n      UnicodeUtil.UTF8toUTF16(utf8.result, 0, utf8.length, utf16a);\n      assertEquals(20, utf16a.length);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16a.result[i]);\n    }\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testIncrementalUnicodeStrings() throws Throwable {\n    r = newRandom();\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    UnicodeUtil.UTF8Result utf8 = new UnicodeUtil.UTF8Result();\n    UnicodeUtil.UTF16Result utf16 = new UnicodeUtil.UTF16Result();\n    UnicodeUtil.UTF16Result utf16a = new UnicodeUtil.UTF16Result();\n\n    boolean hasIllegal = false;\n    byte[] last = new byte[60];\n\n    for(int iter=0;iter<100000;iter++) {\n\n      final int prefix;\n\n      if (iter == 0 || hasIllegal)\n        prefix = 0;\n      else\n        prefix = nextInt(20);\n\n      hasIllegal = fillUnicode(buffer, expected, prefix, 20-prefix);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.result[i]);\n      }\n\n      int bytePrefix = 20;\n      if (iter == 0 || hasIllegal)\n        bytePrefix = 0;\n      else\n        for(int i=0;i<20;i++)\n          if (last[i] != utf8.result[i]) {\n            bytePrefix = i;\n            break;\n          }\n      System.arraycopy(utf8.result, 0, last, 0, utf8.length);\n\n      UnicodeUtil.UTF8toUTF16(utf8.result, bytePrefix, utf8.length-bytePrefix, utf16);\n      assertEquals(20, utf16.length);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.result[i]);\n\n      UnicodeUtil.UTF8toUTF16(utf8.result, 0, utf8.length, utf16a);\n      assertEquals(20, utf16a.length);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16a.result[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}