{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper#reusableTokenStream(String,Reader).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper#reusableTokenStream(String,Reader).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper#reusableTokenStream(String,Reader).mjava","sourceNew":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.wrapped = defaultAnalyzer.reusableTokenStream(fieldName, reader);\n      streams.shingle = new ShingleFilter(streams.wrapped);\n      setPreviousTokenStream(streams);\n    } else {\n      TokenStream result = defaultAnalyzer.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n        streams.shingle.reset(); \n      } else {\n        /* the wrapped analyzer did not, create a new shingle around the new one */\n        streams.wrapped = result;\n        streams.shingle = new ShingleFilter(streams.wrapped);\n      }\n    }\n    streams.shingle.setMaxShingleSize(maxShingleSize);\n    streams.shingle.setMinShingleSize(minShingleSize);\n    streams.shingle.setTokenSeparator(tokenSeparator);\n    streams.shingle.setOutputUnigrams(outputUnigrams);\n    return streams.shingle;\n  }\n\n","sourceOld":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.wrapped = defaultAnalyzer.reusableTokenStream(fieldName, reader);\n      streams.shingle = new ShingleFilter(streams.wrapped);\n      setPreviousTokenStream(streams);\n    } else {\n      TokenStream result = defaultAnalyzer.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n        streams.shingle.reset(); \n      } else {\n        /* the wrapped analyzer did not, create a new shingle around the new one */\n        streams.wrapped = result;\n        streams.shingle = new ShingleFilter(streams.wrapped);\n      }\n    }\n    streams.shingle.setMaxShingleSize(maxShingleSize);\n    streams.shingle.setMinShingleSize(minShingleSize);\n    streams.shingle.setTokenSeparator(tokenSeparator);\n    streams.shingle.setOutputUnigrams(outputUnigrams);\n    return streams.shingle;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62dce719f7b1e83e0b4020f146a516e5cf618884","date":1286643323,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper#reusableTokenStream(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper#reusableTokenStream(String,Reader).mjava","sourceNew":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.wrapped = defaultAnalyzer.reusableTokenStream(fieldName, reader);\n      streams.shingle = new ShingleFilter(streams.wrapped);\n      setPreviousTokenStream(streams);\n    } else {\n      TokenStream result = defaultAnalyzer.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n        streams.shingle.reset(); \n      } else {\n        /* the wrapped analyzer did not, create a new shingle around the new one */\n        streams.wrapped = result;\n        streams.shingle = new ShingleFilter(streams.wrapped);\n      }\n    }\n    streams.shingle.setMaxShingleSize(maxShingleSize);\n    streams.shingle.setMinShingleSize(minShingleSize);\n    streams.shingle.setTokenSeparator(tokenSeparator);\n    streams.shingle.setOutputUnigrams(outputUnigrams);\n    streams.shingle.setOutputUnigramsIfNoShingles(outputUnigramsIfNoShingles);\n    return streams.shingle;\n  }\n\n","sourceOld":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.wrapped = defaultAnalyzer.reusableTokenStream(fieldName, reader);\n      streams.shingle = new ShingleFilter(streams.wrapped);\n      setPreviousTokenStream(streams);\n    } else {\n      TokenStream result = defaultAnalyzer.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n        streams.shingle.reset(); \n      } else {\n        /* the wrapped analyzer did not, create a new shingle around the new one */\n        streams.wrapped = result;\n        streams.shingle = new ShingleFilter(streams.wrapped);\n      }\n    }\n    streams.shingle.setMaxShingleSize(maxShingleSize);\n    streams.shingle.setMinShingleSize(minShingleSize);\n    streams.shingle.setTokenSeparator(tokenSeparator);\n    streams.shingle.setOutputUnigrams(outputUnigrams);\n    return streams.shingle;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper#reusableTokenStream(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper#reusableTokenStream(String,Reader).mjava","sourceNew":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.wrapped = defaultAnalyzer.reusableTokenStream(fieldName, reader);\n      streams.shingle = new ShingleFilter(streams.wrapped);\n      setPreviousTokenStream(streams);\n    } else {\n      TokenStream result = defaultAnalyzer.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n        streams.shingle.reset(); \n      } else {\n        /* the wrapped analyzer did not, create a new shingle around the new one */\n        streams.wrapped = result;\n        streams.shingle = new ShingleFilter(streams.wrapped);\n      }\n    }\n    streams.shingle.setMaxShingleSize(maxShingleSize);\n    streams.shingle.setMinShingleSize(minShingleSize);\n    streams.shingle.setTokenSeparator(tokenSeparator);\n    streams.shingle.setOutputUnigrams(outputUnigrams);\n    streams.shingle.setOutputUnigramsIfNoShingles(outputUnigramsIfNoShingles);\n    return streams.shingle;\n  }\n\n","sourceOld":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.wrapped = defaultAnalyzer.reusableTokenStream(fieldName, reader);\n      streams.shingle = new ShingleFilter(streams.wrapped);\n      setPreviousTokenStream(streams);\n    } else {\n      TokenStream result = defaultAnalyzer.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n        streams.shingle.reset(); \n      } else {\n        /* the wrapped analyzer did not, create a new shingle around the new one */\n        streams.wrapped = result;\n        streams.shingle = new ShingleFilter(streams.wrapped);\n      }\n    }\n    streams.shingle.setMaxShingleSize(maxShingleSize);\n    streams.shingle.setMinShingleSize(minShingleSize);\n    streams.shingle.setTokenSeparator(tokenSeparator);\n    streams.shingle.setOutputUnigrams(outputUnigrams);\n    return streams.shingle;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcbc12aa8147f5203ca283e7252ba4280d6ffd16","date":1305663400,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper#reusableTokenStream(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper#reusableTokenStream(String,Reader).mjava","sourceNew":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.wrapped = defaultAnalyzer.reusableTokenStream(fieldName, reader);\n      streams.shingle = new ShingleFilter(streams.wrapped);\n      setPreviousTokenStream(streams);\n    } else {\n      TokenStream result = defaultAnalyzer.reusableTokenStream(fieldName, reader);\n      if (result != streams.wrapped) {\n        /* the wrapped analyzer did not, create a new shingle around the new one */\n        streams.wrapped = result;\n        streams.shingle = new ShingleFilter(streams.wrapped);\n      }\n    }\n    streams.shingle.setMaxShingleSize(maxShingleSize);\n    streams.shingle.setMinShingleSize(minShingleSize);\n    streams.shingle.setTokenSeparator(tokenSeparator);\n    streams.shingle.setOutputUnigrams(outputUnigrams);\n    streams.shingle.setOutputUnigramsIfNoShingles(outputUnigramsIfNoShingles);\n    return streams.shingle;\n  }\n\n","sourceOld":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.wrapped = defaultAnalyzer.reusableTokenStream(fieldName, reader);\n      streams.shingle = new ShingleFilter(streams.wrapped);\n      setPreviousTokenStream(streams);\n    } else {\n      TokenStream result = defaultAnalyzer.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n        streams.shingle.reset(); \n      } else {\n        /* the wrapped analyzer did not, create a new shingle around the new one */\n        streams.wrapped = result;\n        streams.shingle = new ShingleFilter(streams.wrapped);\n      }\n    }\n    streams.shingle.setMaxShingleSize(maxShingleSize);\n    streams.shingle.setMinShingleSize(minShingleSize);\n    streams.shingle.setTokenSeparator(tokenSeparator);\n    streams.shingle.setOutputUnigrams(outputUnigrams);\n    streams.shingle.setOutputUnigramsIfNoShingles(outputUnigramsIfNoShingles);\n    return streams.shingle;\n  }\n\n","bugFix":["18359c8e12d55f66c27cfe7babe86283f06a6aa5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper#reusableTokenStream(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper#reusableTokenStream(String,Reader).mjava","sourceNew":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.wrapped = defaultAnalyzer.reusableTokenStream(fieldName, reader);\n      streams.shingle = new ShingleFilter(streams.wrapped);\n      setPreviousTokenStream(streams);\n    } else {\n      TokenStream result = defaultAnalyzer.reusableTokenStream(fieldName, reader);\n      if (result != streams.wrapped) {\n        /* the wrapped analyzer did not, create a new shingle around the new one */\n        streams.wrapped = result;\n        streams.shingle = new ShingleFilter(streams.wrapped);\n      }\n    }\n    streams.shingle.setMaxShingleSize(maxShingleSize);\n    streams.shingle.setMinShingleSize(minShingleSize);\n    streams.shingle.setTokenSeparator(tokenSeparator);\n    streams.shingle.setOutputUnigrams(outputUnigrams);\n    streams.shingle.setOutputUnigramsIfNoShingles(outputUnigramsIfNoShingles);\n    return streams.shingle;\n  }\n\n","sourceOld":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.wrapped = defaultAnalyzer.reusableTokenStream(fieldName, reader);\n      streams.shingle = new ShingleFilter(streams.wrapped);\n      setPreviousTokenStream(streams);\n    } else {\n      TokenStream result = defaultAnalyzer.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n        streams.shingle.reset(); \n      } else {\n        /* the wrapped analyzer did not, create a new shingle around the new one */\n        streams.wrapped = result;\n        streams.shingle = new ShingleFilter(streams.wrapped);\n      }\n    }\n    streams.shingle.setMaxShingleSize(maxShingleSize);\n    streams.shingle.setMinShingleSize(minShingleSize);\n    streams.shingle.setTokenSeparator(tokenSeparator);\n    streams.shingle.setOutputUnigrams(outputUnigrams);\n    streams.shingle.setOutputUnigramsIfNoShingles(outputUnigramsIfNoShingles);\n    return streams.shingle;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper#reusableTokenStream(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper#reusableTokenStream(String,Reader).mjava","sourceNew":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.wrapped = defaultAnalyzer.reusableTokenStream(fieldName, reader);\n      streams.shingle = new ShingleFilter(streams.wrapped);\n      setPreviousTokenStream(streams);\n    } else {\n      TokenStream result = defaultAnalyzer.reusableTokenStream(fieldName, reader);\n      if (result != streams.wrapped) {\n        /* the wrapped analyzer did not, create a new shingle around the new one */\n        streams.wrapped = result;\n        streams.shingle = new ShingleFilter(streams.wrapped);\n      }\n    }\n    streams.shingle.setMaxShingleSize(maxShingleSize);\n    streams.shingle.setMinShingleSize(minShingleSize);\n    streams.shingle.setTokenSeparator(tokenSeparator);\n    streams.shingle.setOutputUnigrams(outputUnigrams);\n    streams.shingle.setOutputUnigramsIfNoShingles(outputUnigramsIfNoShingles);\n    return streams.shingle;\n  }\n\n","sourceOld":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.wrapped = defaultAnalyzer.reusableTokenStream(fieldName, reader);\n      streams.shingle = new ShingleFilter(streams.wrapped);\n      setPreviousTokenStream(streams);\n    } else {\n      TokenStream result = defaultAnalyzer.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n        streams.shingle.reset(); \n      } else {\n        /* the wrapped analyzer did not, create a new shingle around the new one */\n        streams.wrapped = result;\n        streams.shingle = new ShingleFilter(streams.wrapped);\n      }\n    }\n    streams.shingle.setMaxShingleSize(maxShingleSize);\n    streams.shingle.setMinShingleSize(minShingleSize);\n    streams.shingle.setTokenSeparator(tokenSeparator);\n    streams.shingle.setOutputUnigrams(outputUnigrams);\n    streams.shingle.setOutputUnigramsIfNoShingles(outputUnigramsIfNoShingles);\n    return streams.shingle;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f49143da0a5d278a72f741432047fcfa6da996e","date":1316927425,"type":4,"author":"Christopher John Male","isMerge":false,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper#reusableTokenStream(String,Reader).mjava","sourceNew":null,"sourceOld":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.wrapped = defaultAnalyzer.reusableTokenStream(fieldName, reader);\n      streams.shingle = new ShingleFilter(streams.wrapped);\n      setPreviousTokenStream(streams);\n    } else {\n      TokenStream result = defaultAnalyzer.reusableTokenStream(fieldName, reader);\n      if (result != streams.wrapped) {\n        /* the wrapped analyzer did not, create a new shingle around the new one */\n        streams.wrapped = result;\n        streams.shingle = new ShingleFilter(streams.wrapped);\n      }\n    }\n    streams.shingle.setMaxShingleSize(maxShingleSize);\n    streams.shingle.setMinShingleSize(minShingleSize);\n    streams.shingle.setTokenSeparator(tokenSeparator);\n    streams.shingle.setOutputUnigrams(outputUnigrams);\n    streams.shingle.setOutputUnigramsIfNoShingles(outputUnigramsIfNoShingles);\n    return streams.shingle;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fcbc12aa8147f5203ca283e7252ba4280d6ffd16":["62dce719f7b1e83e0b4020f146a516e5cf618884"],"62dce719f7b1e83e0b4020f146a516e5cf618884":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["62dce719f7b1e83e0b4020f146a516e5cf618884","fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"a3776dccca01c11e7046323cfad46a3b4a471233":["62dce719f7b1e83e0b4020f146a516e5cf618884","fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2f49143da0a5d278a72f741432047fcfa6da996e":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["0f080986da691a3bba7b757f43ab72cdc82b57ce","62dce719f7b1e83e0b4020f146a516e5cf618884"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2f49143da0a5d278a72f741432047fcfa6da996e"]},"commit2Childs":{"fcbc12aa8147f5203ca283e7252ba4280d6ffd16":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","2f49143da0a5d278a72f741432047fcfa6da996e"],"62dce719f7b1e83e0b4020f146a516e5cf618884":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"2f49143da0a5d278a72f741432047fcfa6da996e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["62dce719f7b1e83e0b4020f146a516e5cf618884","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}