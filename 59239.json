{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#testFloatEncoding().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#testFloatEncoding().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#testFloatEncoding().mjava","sourceNew":"  public void testFloatEncoding() throws Exception {\n    String test = \"The quick|1.0 red|2.0 fox|3.5 jumped|0.5 over the lazy|5 brown|99.3 dogs|83.7\";\n    DelimitedPayloadTokenFilter filter = new DelimitedPayloadTokenFilter(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false), '|', new FloatEncoder());\n    CharTermAttribute termAtt = filter.getAttribute(CharTermAttribute.class);\n    PayloadAttribute payAtt = filter.getAttribute(PayloadAttribute.class);\n    assertTermEquals(\"The\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"quick\", filter, termAtt, payAtt, PayloadHelper.encodeFloat(1.0f));\n    assertTermEquals(\"red\", filter, termAtt, payAtt, PayloadHelper.encodeFloat(2.0f));\n    assertTermEquals(\"fox\", filter, termAtt, payAtt, PayloadHelper.encodeFloat(3.5f));\n    assertTermEquals(\"jumped\", filter, termAtt, payAtt, PayloadHelper.encodeFloat(0.5f));\n    assertTermEquals(\"over\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"the\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"lazy\", filter, termAtt, payAtt, PayloadHelper.encodeFloat(5.0f));\n    assertTermEquals(\"brown\", filter, termAtt, payAtt, PayloadHelper.encodeFloat(99.3f));\n    assertTermEquals(\"dogs\", filter, termAtt, payAtt, PayloadHelper.encodeFloat(83.7f));\n    assertFalse(filter.incrementToken());\n  }\n\n","sourceOld":"  public void testFloatEncoding() throws Exception {\n    String test = \"The quick|1.0 red|2.0 fox|3.5 jumped|0.5 over the lazy|5 brown|99.3 dogs|83.7\";\n    DelimitedPayloadTokenFilter filter = new DelimitedPayloadTokenFilter(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false), '|', new FloatEncoder());\n    CharTermAttribute termAtt = filter.getAttribute(CharTermAttribute.class);\n    PayloadAttribute payAtt = filter.getAttribute(PayloadAttribute.class);\n    assertTermEquals(\"The\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"quick\", filter, termAtt, payAtt, PayloadHelper.encodeFloat(1.0f));\n    assertTermEquals(\"red\", filter, termAtt, payAtt, PayloadHelper.encodeFloat(2.0f));\n    assertTermEquals(\"fox\", filter, termAtt, payAtt, PayloadHelper.encodeFloat(3.5f));\n    assertTermEquals(\"jumped\", filter, termAtt, payAtt, PayloadHelper.encodeFloat(0.5f));\n    assertTermEquals(\"over\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"the\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"lazy\", filter, termAtt, payAtt, PayloadHelper.encodeFloat(5.0f));\n    assertTermEquals(\"brown\", filter, termAtt, payAtt, PayloadHelper.encodeFloat(99.3f));\n    assertTermEquals(\"dogs\", filter, termAtt, payAtt, PayloadHelper.encodeFloat(83.7f));\n    assertFalse(filter.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b735b811bfe6055a98336ee8dfd1e43cf2dc0","date":1379858263,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#testFloatEncoding().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#testFloatEncoding().mjava","sourceNew":"  public void testFloatEncoding() throws Exception {\n    String test = \"The quick|1.0 red|2.0 fox|3.5 jumped|0.5 over the lazy|5 brown|99.3 dogs|83.7\";\n    DelimitedPayloadTokenFilter filter = new DelimitedPayloadTokenFilter(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false), '|', new FloatEncoder());\n    CharTermAttribute termAtt = filter.getAttribute(CharTermAttribute.class);\n    PayloadAttribute payAtt = filter.getAttribute(PayloadAttribute.class);\n    filter.reset();\n    assertTermEquals(\"The\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"quick\", filter, termAtt, payAtt, PayloadHelper.encodeFloat(1.0f));\n    assertTermEquals(\"red\", filter, termAtt, payAtt, PayloadHelper.encodeFloat(2.0f));\n    assertTermEquals(\"fox\", filter, termAtt, payAtt, PayloadHelper.encodeFloat(3.5f));\n    assertTermEquals(\"jumped\", filter, termAtt, payAtt, PayloadHelper.encodeFloat(0.5f));\n    assertTermEquals(\"over\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"the\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"lazy\", filter, termAtt, payAtt, PayloadHelper.encodeFloat(5.0f));\n    assertTermEquals(\"brown\", filter, termAtt, payAtt, PayloadHelper.encodeFloat(99.3f));\n    assertTermEquals(\"dogs\", filter, termAtt, payAtt, PayloadHelper.encodeFloat(83.7f));\n    assertFalse(filter.incrementToken());\n    filter.end();\n    filter.close();\n  }\n\n","sourceOld":"  public void testFloatEncoding() throws Exception {\n    String test = \"The quick|1.0 red|2.0 fox|3.5 jumped|0.5 over the lazy|5 brown|99.3 dogs|83.7\";\n    DelimitedPayloadTokenFilter filter = new DelimitedPayloadTokenFilter(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false), '|', new FloatEncoder());\n    CharTermAttribute termAtt = filter.getAttribute(CharTermAttribute.class);\n    PayloadAttribute payAtt = filter.getAttribute(PayloadAttribute.class);\n    assertTermEquals(\"The\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"quick\", filter, termAtt, payAtt, PayloadHelper.encodeFloat(1.0f));\n    assertTermEquals(\"red\", filter, termAtt, payAtt, PayloadHelper.encodeFloat(2.0f));\n    assertTermEquals(\"fox\", filter, termAtt, payAtt, PayloadHelper.encodeFloat(3.5f));\n    assertTermEquals(\"jumped\", filter, termAtt, payAtt, PayloadHelper.encodeFloat(0.5f));\n    assertTermEquals(\"over\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"the\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"lazy\", filter, termAtt, payAtt, PayloadHelper.encodeFloat(5.0f));\n    assertTermEquals(\"brown\", filter, termAtt, payAtt, PayloadHelper.encodeFloat(99.3f));\n    assertTermEquals(\"dogs\", filter, termAtt, payAtt, PayloadHelper.encodeFloat(83.7f));\n    assertFalse(filter.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#testFloatEncoding().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#testFloatEncoding().mjava","sourceNew":"  public void testFloatEncoding() throws Exception {\n    String test = \"The quick|1.0 red|2.0 fox|3.5 jumped|0.5 over the lazy|5 brown|99.3 dogs|83.7\";\n    DelimitedPayloadTokenFilter filter = new DelimitedPayloadTokenFilter(whitespaceMockTokenizer(test), '|', new FloatEncoder());\n    CharTermAttribute termAtt = filter.getAttribute(CharTermAttribute.class);\n    PayloadAttribute payAtt = filter.getAttribute(PayloadAttribute.class);\n    filter.reset();\n    assertTermEquals(\"The\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"quick\", filter, termAtt, payAtt, PayloadHelper.encodeFloat(1.0f));\n    assertTermEquals(\"red\", filter, termAtt, payAtt, PayloadHelper.encodeFloat(2.0f));\n    assertTermEquals(\"fox\", filter, termAtt, payAtt, PayloadHelper.encodeFloat(3.5f));\n    assertTermEquals(\"jumped\", filter, termAtt, payAtt, PayloadHelper.encodeFloat(0.5f));\n    assertTermEquals(\"over\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"the\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"lazy\", filter, termAtt, payAtt, PayloadHelper.encodeFloat(5.0f));\n    assertTermEquals(\"brown\", filter, termAtt, payAtt, PayloadHelper.encodeFloat(99.3f));\n    assertTermEquals(\"dogs\", filter, termAtt, payAtt, PayloadHelper.encodeFloat(83.7f));\n    assertFalse(filter.incrementToken());\n    filter.end();\n    filter.close();\n  }\n\n","sourceOld":"  public void testFloatEncoding() throws Exception {\n    String test = \"The quick|1.0 red|2.0 fox|3.5 jumped|0.5 over the lazy|5 brown|99.3 dogs|83.7\";\n    DelimitedPayloadTokenFilter filter = new DelimitedPayloadTokenFilter(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false), '|', new FloatEncoder());\n    CharTermAttribute termAtt = filter.getAttribute(CharTermAttribute.class);\n    PayloadAttribute payAtt = filter.getAttribute(PayloadAttribute.class);\n    filter.reset();\n    assertTermEquals(\"The\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"quick\", filter, termAtt, payAtt, PayloadHelper.encodeFloat(1.0f));\n    assertTermEquals(\"red\", filter, termAtt, payAtt, PayloadHelper.encodeFloat(2.0f));\n    assertTermEquals(\"fox\", filter, termAtt, payAtt, PayloadHelper.encodeFloat(3.5f));\n    assertTermEquals(\"jumped\", filter, termAtt, payAtt, PayloadHelper.encodeFloat(0.5f));\n    assertTermEquals(\"over\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"the\", filter, termAtt, payAtt, null);\n    assertTermEquals(\"lazy\", filter, termAtt, payAtt, PayloadHelper.encodeFloat(5.0f));\n    assertTermEquals(\"brown\", filter, termAtt, payAtt, PayloadHelper.encodeFloat(99.3f));\n    assertTermEquals(\"dogs\", filter, termAtt, payAtt, PayloadHelper.encodeFloat(83.7f));\n    assertFalse(filter.incrementToken());\n    filter.end();\n    filter.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df1b735b811bfe6055a98336ee8dfd1e43cf2dc0":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["df1b735b811bfe6055a98336ee8dfd1e43cf2dc0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"]},"commit2Childs":{"df1b735b811bfe6055a98336ee8dfd1e43cf2dc0":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["df1b735b811bfe6055a98336ee8dfd1e43cf2dc0"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}