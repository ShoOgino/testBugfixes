{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simCreateShard(ZkNodeProps,NamedList).mjava","commits":[{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simCreateShard(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simCreateShard(ZkNodeProps,NamedList).mjava","sourceNew":"  /**\n   * Create a new shard. This uses a similar algorithm as {@link CreateShardCmd}.\n   * @param message operation details\n   * @param results operation results\n   */\n  public void simCreateShard(ZkNodeProps message, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    lock.lockInterruptibly();\n    try {\n      ZkWriteCommand cmd = new CollectionMutator(cloudManager).createShard(clusterState, message);\n      if (cmd.noop) {\n        results.add(\"success\", \"no-op\");\n        return;\n      }\n\n      opDelay(collectionName, CollectionParams.CollectionAction.CREATESHARD.name());\n\n      // copy shard properties -- our equivalent of creating an empty shard in cluster state\n      DocCollection collection = cmd.collection;\n      Slice slice = collection.getSlice(sliceName);\n      Map<String, Object> props = sliceProperties.computeIfAbsent(collection.getName(), c -> new ConcurrentHashMap<>())\n          .computeIfAbsent(sliceName, s -> new ConcurrentHashMap<>());\n      props.clear();\n      slice.getProperties().entrySet().stream()\n          .filter(e -> !e.getKey().equals(\"range\"))\n          .filter(e -> !e.getKey().equals(\"replicas\"))\n          .forEach(e -> props.put(e.getKey(), e.getValue()));\n      // 2. create new replicas\n      EnumMap<Replica.Type, Integer> replicaTypesVsCount = new EnumMap<>(Replica.Type.class);\n      int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n      int numTlogReplicas = message.getInt(TLOG_REPLICAS, message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0)));\n      int numPullReplicas = message.getInt(PULL_REPLICAS, message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0)));\n      replicaTypesVsCount.put(Replica.Type.NRT, numNrtReplicas);\n      replicaTypesVsCount.put(Replica.Type.TLOG, numTlogReplicas);\n      replicaTypesVsCount.put(Replica.Type.PULL, numPullReplicas);\n\n      ZkNodeProps addReplicasProps = new ZkNodeProps(\n          COLLECTION_PROP, collectionName,\n          SHARD_ID_PROP, sliceName,\n          ZkStateReader.NRT_REPLICAS, String.valueOf(replicaTypesVsCount.get(Replica.Type.NRT)),\n          ZkStateReader.TLOG_REPLICAS, String.valueOf(replicaTypesVsCount.get(Replica.Type.TLOG)),\n          ZkStateReader.PULL_REPLICAS, String.valueOf(replicaTypesVsCount.get(Replica.Type.PULL)),\n          OverseerCollectionMessageHandler.CREATE_NODE_SET, message.getStr(OverseerCollectionMessageHandler.CREATE_NODE_SET)\n          );\n\n      try {\n        // this also takes care of leader election\n        simAddReplica(addReplicasProps, results);\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n      \n      collProperties.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>());\n      results.add(\"success\", \"\");\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new shard. This uses a similar algorithm as {@link CreateShardCmd}.\n   * @param message operation details\n   * @param results operation results\n   */\n  public void simCreateShard(ZkNodeProps message, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    lock.lockInterruptibly();\n    try {\n      ZkWriteCommand cmd = new CollectionMutator(cloudManager).createShard(clusterState, message);\n      if (cmd.noop) {\n        results.add(\"success\", \"no-op\");\n        return;\n      }\n\n      opDelay(collectionName, CollectionParams.CollectionAction.CREATESHARD.name());\n\n      // copy shard properties -- our equivalent of creating an empty shard in cluster state\n      DocCollection collection = cmd.collection;\n      Slice slice = collection.getSlice(sliceName);\n      Map<String, Object> props = sliceProperties.computeIfAbsent(collection.getName(), c -> new ConcurrentHashMap<>())\n          .computeIfAbsent(sliceName, s -> new ConcurrentHashMap<>());\n      props.clear();\n      slice.getProperties().entrySet().stream()\n          .filter(e -> !e.getKey().equals(\"range\"))\n          .filter(e -> !e.getKey().equals(\"replicas\"))\n          .forEach(e -> props.put(e.getKey(), e.getValue()));\n      // 2. create new replicas\n      EnumMap<Replica.Type, Integer> replicaTypesVsCount = new EnumMap<>(Replica.Type.class);\n      int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n      int numTlogReplicas = message.getInt(TLOG_REPLICAS, message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0)));\n      int numPullReplicas = message.getInt(PULL_REPLICAS, message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0)));\n      replicaTypesVsCount.put(Replica.Type.NRT, numNrtReplicas);\n      replicaTypesVsCount.put(Replica.Type.TLOG, numTlogReplicas);\n      replicaTypesVsCount.put(Replica.Type.PULL, numPullReplicas);\n\n      ZkNodeProps addReplicasProps = new ZkNodeProps(\n          COLLECTION_PROP, collectionName,\n          SHARD_ID_PROP, sliceName,\n          ZkStateReader.NRT_REPLICAS, String.valueOf(replicaTypesVsCount.get(Replica.Type.NRT)),\n          ZkStateReader.TLOG_REPLICAS, String.valueOf(replicaTypesVsCount.get(Replica.Type.TLOG)),\n          ZkStateReader.PULL_REPLICAS, String.valueOf(replicaTypesVsCount.get(Replica.Type.PULL)),\n          OverseerCollectionMessageHandler.CREATE_NODE_SET, message.getStr(OverseerCollectionMessageHandler.CREATE_NODE_SET)\n          );\n\n      try {\n        // this also takes care of leader election\n        simAddReplica(addReplicasProps, results);\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n      \n      collProperties.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>());\n      results.add(\"success\", \"\");\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daa0f21a44e235a2299ea1fa913898b182dd7cce","date":1590952026,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simCreateShard(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simCreateShard(ZkNodeProps,NamedList).mjava","sourceNew":"  /**\n   * Create a new shard. This uses a similar algorithm as {@link CreateShardCmd}.\n   * @param message operation details\n   * @param results operation results\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void simCreateShard(ZkNodeProps message, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    lock.lockInterruptibly();\n    try {\n      ZkWriteCommand cmd = new CollectionMutator(cloudManager).createShard(clusterState, message);\n      if (cmd.noop) {\n        results.add(\"success\", \"no-op\");\n        return;\n      }\n\n      opDelay(collectionName, CollectionParams.CollectionAction.CREATESHARD.name());\n\n      // copy shard properties -- our equivalent of creating an empty shard in cluster state\n      DocCollection collection = cmd.collection;\n      Slice slice = collection.getSlice(sliceName);\n      Map<String, Object> props = sliceProperties.computeIfAbsent(collection.getName(), c -> new ConcurrentHashMap<>())\n          .computeIfAbsent(sliceName, s -> new ConcurrentHashMap<>());\n      props.clear();\n      slice.getProperties().entrySet().stream()\n          .filter(e -> !e.getKey().equals(\"range\"))\n          .filter(e -> !e.getKey().equals(\"replicas\"))\n          .forEach(e -> props.put(e.getKey(), e.getValue()));\n      // 2. create new replicas\n      EnumMap<Replica.Type, Integer> replicaTypesVsCount = new EnumMap<>(Replica.Type.class);\n      int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n      int numTlogReplicas = message.getInt(TLOG_REPLICAS, message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0)));\n      int numPullReplicas = message.getInt(PULL_REPLICAS, message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0)));\n      replicaTypesVsCount.put(Replica.Type.NRT, numNrtReplicas);\n      replicaTypesVsCount.put(Replica.Type.TLOG, numTlogReplicas);\n      replicaTypesVsCount.put(Replica.Type.PULL, numPullReplicas);\n\n      ZkNodeProps addReplicasProps = new ZkNodeProps(\n          COLLECTION_PROP, collectionName,\n          SHARD_ID_PROP, sliceName,\n          ZkStateReader.NRT_REPLICAS, String.valueOf(replicaTypesVsCount.get(Replica.Type.NRT)),\n          ZkStateReader.TLOG_REPLICAS, String.valueOf(replicaTypesVsCount.get(Replica.Type.TLOG)),\n          ZkStateReader.PULL_REPLICAS, String.valueOf(replicaTypesVsCount.get(Replica.Type.PULL)),\n          OverseerCollectionMessageHandler.CREATE_NODE_SET, message.getStr(OverseerCollectionMessageHandler.CREATE_NODE_SET)\n          );\n\n      try {\n        // this also takes care of leader election\n        simAddReplica(addReplicasProps, results);\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n      \n      collProperties.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>());\n      results.add(\"success\", \"\");\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new shard. This uses a similar algorithm as {@link CreateShardCmd}.\n   * @param message operation details\n   * @param results operation results\n   */\n  public void simCreateShard(ZkNodeProps message, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    lock.lockInterruptibly();\n    try {\n      ZkWriteCommand cmd = new CollectionMutator(cloudManager).createShard(clusterState, message);\n      if (cmd.noop) {\n        results.add(\"success\", \"no-op\");\n        return;\n      }\n\n      opDelay(collectionName, CollectionParams.CollectionAction.CREATESHARD.name());\n\n      // copy shard properties -- our equivalent of creating an empty shard in cluster state\n      DocCollection collection = cmd.collection;\n      Slice slice = collection.getSlice(sliceName);\n      Map<String, Object> props = sliceProperties.computeIfAbsent(collection.getName(), c -> new ConcurrentHashMap<>())\n          .computeIfAbsent(sliceName, s -> new ConcurrentHashMap<>());\n      props.clear();\n      slice.getProperties().entrySet().stream()\n          .filter(e -> !e.getKey().equals(\"range\"))\n          .filter(e -> !e.getKey().equals(\"replicas\"))\n          .forEach(e -> props.put(e.getKey(), e.getValue()));\n      // 2. create new replicas\n      EnumMap<Replica.Type, Integer> replicaTypesVsCount = new EnumMap<>(Replica.Type.class);\n      int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n      int numTlogReplicas = message.getInt(TLOG_REPLICAS, message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0)));\n      int numPullReplicas = message.getInt(PULL_REPLICAS, message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0)));\n      replicaTypesVsCount.put(Replica.Type.NRT, numNrtReplicas);\n      replicaTypesVsCount.put(Replica.Type.TLOG, numTlogReplicas);\n      replicaTypesVsCount.put(Replica.Type.PULL, numPullReplicas);\n\n      ZkNodeProps addReplicasProps = new ZkNodeProps(\n          COLLECTION_PROP, collectionName,\n          SHARD_ID_PROP, sliceName,\n          ZkStateReader.NRT_REPLICAS, String.valueOf(replicaTypesVsCount.get(Replica.Type.NRT)),\n          ZkStateReader.TLOG_REPLICAS, String.valueOf(replicaTypesVsCount.get(Replica.Type.TLOG)),\n          ZkStateReader.PULL_REPLICAS, String.valueOf(replicaTypesVsCount.get(Replica.Type.PULL)),\n          OverseerCollectionMessageHandler.CREATE_NODE_SET, message.getStr(OverseerCollectionMessageHandler.CREATE_NODE_SET)\n          );\n\n      try {\n        // this also takes care of leader election\n        simAddReplica(addReplicasProps, results);\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n      \n      collProperties.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>());\n      results.add(\"success\", \"\");\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simCreateShard(ZkNodeProps,NamedList).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create a new shard. This uses a similar algorithm as {@link CreateShardCmd}.\n   * @param message operation details\n   * @param results operation results\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void simCreateShard(ZkNodeProps message, NamedList results) throws Exception {\n    ensureNotClosed();\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    ClusterState clusterState = getClusterState();\n    lock.lockInterruptibly();\n    try {\n      ZkWriteCommand cmd = new CollectionMutator(cloudManager).createShard(clusterState, message);\n      if (cmd.noop) {\n        results.add(\"success\", \"no-op\");\n        return;\n      }\n\n      opDelay(collectionName, CollectionParams.CollectionAction.CREATESHARD.name());\n\n      // copy shard properties -- our equivalent of creating an empty shard in cluster state\n      DocCollection collection = cmd.collection;\n      Slice slice = collection.getSlice(sliceName);\n      Map<String, Object> props = sliceProperties.computeIfAbsent(collection.getName(), c -> new ConcurrentHashMap<>())\n          .computeIfAbsent(sliceName, s -> new ConcurrentHashMap<>());\n      props.clear();\n      slice.getProperties().entrySet().stream()\n          .filter(e -> !e.getKey().equals(\"range\"))\n          .filter(e -> !e.getKey().equals(\"replicas\"))\n          .forEach(e -> props.put(e.getKey(), e.getValue()));\n      // 2. create new replicas\n      EnumMap<Replica.Type, Integer> replicaTypesVsCount = new EnumMap<>(Replica.Type.class);\n      int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n      int numTlogReplicas = message.getInt(TLOG_REPLICAS, message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0)));\n      int numPullReplicas = message.getInt(PULL_REPLICAS, message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0)));\n      replicaTypesVsCount.put(Replica.Type.NRT, numNrtReplicas);\n      replicaTypesVsCount.put(Replica.Type.TLOG, numTlogReplicas);\n      replicaTypesVsCount.put(Replica.Type.PULL, numPullReplicas);\n\n      ZkNodeProps addReplicasProps = new ZkNodeProps(\n          COLLECTION_PROP, collectionName,\n          SHARD_ID_PROP, sliceName,\n          ZkStateReader.NRT_REPLICAS, String.valueOf(replicaTypesVsCount.get(Replica.Type.NRT)),\n          ZkStateReader.TLOG_REPLICAS, String.valueOf(replicaTypesVsCount.get(Replica.Type.TLOG)),\n          ZkStateReader.PULL_REPLICAS, String.valueOf(replicaTypesVsCount.get(Replica.Type.PULL)),\n          OverseerCollectionMessageHandler.CREATE_NODE_SET, message.getStr(OverseerCollectionMessageHandler.CREATE_NODE_SET)\n          );\n\n      try {\n        // this also takes care of leader election\n        simAddReplica(addReplicasProps, results);\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n      \n      collProperties.computeIfAbsent(collectionName, c -> new ConcurrentHashMap<>());\n      results.add(\"success\", \"\");\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["3f504512a03d978990cbff30db0522b354e846db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}