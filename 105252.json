{"path":"src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#comparatorNatural(String).mjava","commits":[{"id":"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76","date":1204055227,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#comparatorNatural(String).mjava","pathOld":"/dev/null","sourceNew":"  // The lucene natural sort ordering corresponds to numeric\n  // and string natural sort orderings (ascending).  Since\n  // the PriorityQueue keeps the biggest elements by default,\n  // we need to reverse the natural compare ordering so that the\n  // smallest elements are kept instead of the largest... hence\n  // the negative sign on the final compareTo().\n  Comparator comparatorNatural(String fieldName) {\n    return new ShardComparator(fieldName) {\n      public final int compare(final Object o1, final Object o2) {\n        ShardDoc sd1 = (ShardDoc) o1;\n        ShardDoc sd2 = (ShardDoc) o2;\n        Comparable v1 = (Comparable)sortVal(sd1);\n        Comparable v2 = (Comparable)sortVal(sd2);\n        if (v1==v2)\n          return 0;\n        if (v1==null)\n          return 1;\n        if(v2==null)\n          return -1;\n        return -v1.compareTo(v2);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#comparatorNatural(String).mjava","pathOld":"src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#comparatorNatural(String).mjava","sourceNew":"  // The lucene natural sort ordering corresponds to numeric\n  // and string natural sort orderings (ascending).  Since\n  // the PriorityQueue keeps the biggest elements by default,\n  // we need to reverse the natural compare ordering so that the\n  // smallest elements are kept instead of the largest... hence\n  // the negative sign on the final compareTo().\n  Comparator comparatorNatural(String fieldName) {\n    return new ShardComparator(fieldName) {\n      public final int compare(final Object o1, final Object o2) {\n        ShardDoc sd1 = (ShardDoc) o1;\n        ShardDoc sd2 = (ShardDoc) o2;\n        Comparable v1 = (Comparable)sortVal(sd1);\n        Comparable v2 = (Comparable)sortVal(sd2);\n        if (v1==v2)\n          return 0;\n        if (v1==null)\n          return 1;\n        if(v2==null)\n          return -1;\n        return -v1.compareTo(v2);\n      }\n    };\n  }\n\n","sourceOld":"  // The lucene natural sort ordering corresponds to numeric\n  // and string natural sort orderings (ascending).  Since\n  // the PriorityQueue keeps the biggest elements by default,\n  // we need to reverse the natural compare ordering so that the\n  // smallest elements are kept instead of the largest... hence\n  // the negative sign on the final compareTo().\n  Comparator comparatorNatural(String fieldName) {\n    return new ShardComparator(fieldName) {\n      public final int compare(final Object o1, final Object o2) {\n        ShardDoc sd1 = (ShardDoc) o1;\n        ShardDoc sd2 = (ShardDoc) o2;\n        Comparable v1 = (Comparable)sortVal(sd1);\n        Comparable v2 = (Comparable)sortVal(sd2);\n        if (v1==v2)\n          return 0;\n        if (v1==null)\n          return 1;\n        if(v2==null)\n          return -1;\n        return -v1.compareTo(v2);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}