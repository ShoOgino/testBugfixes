{"path":"solr/core/src/java/org/apache/solr/core/CoreContainer#swap(String,String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#swap(String,String).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#swap(String,String).mjava","sourceNew":"  /**\n   * Swaps two SolrCore descriptors.\n   * @param n0\n   * @param n1\n   */\n  public void swap(String n0, String n1) {\n    if( n0 == null || n1 == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Can not swap unnamed cores.\" );\n    }\n    n0 = checkDefault(n0);\n    n1 = checkDefault(n1);\n    synchronized( cores ) {\n      SolrCore c0 = cores.get(n0);\n      SolrCore c1 = cores.get(n1);\n      if (c0 == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + n0 );\n      if (c1 == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + n1 );\n      cores.put(n0, c1);\n      cores.put(n1, c0);\n\n      c0.setName(n1);\n      c0.getCoreDescriptor().name = n1;\n      c1.setName(n0);\n      c1.getCoreDescriptor().name = n0;\n    }\n\n\n    log.info(\"swaped: \"+n0 + \" with \" + n1);\n  }\n\n","sourceOld":"  /**\n   * Swaps two SolrCore descriptors.\n   * @param n0\n   * @param n1\n   */\n  public void swap(String n0, String n1) {\n    if( n0 == null || n1 == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Can not swap unnamed cores.\" );\n    }\n    n0 = checkDefault(n0);\n    n1 = checkDefault(n1);\n    synchronized( cores ) {\n      SolrCore c0 = cores.get(n0);\n      SolrCore c1 = cores.get(n1);\n      if (c0 == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + n0 );\n      if (c1 == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + n1 );\n      cores.put(n0, c1);\n      cores.put(n1, c0);\n\n      c0.setName(n1);\n      c0.getCoreDescriptor().name = n1;\n      c1.setName(n0);\n      c1.getCoreDescriptor().name = n0;\n    }\n\n\n    log.info(\"swaped: \"+n0 + \" with \" + n1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#swap(String,String).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#swap(String,String).mjava","sourceNew":"  /**\n   * Swaps two SolrCore descriptors.\n   * @param n0\n   * @param n1\n   */\n  public void swap(String n0, String n1) {\n    if( n0 == null || n1 == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Can not swap unnamed cores.\" );\n    }\n    n0 = checkDefault(n0);\n    n1 = checkDefault(n1);\n    synchronized( cores ) {\n      SolrCore c0 = cores.get(n0);\n      SolrCore c1 = cores.get(n1);\n      if (c0 == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + n0 );\n      if (c1 == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + n1 );\n      cores.put(n0, c1);\n      cores.put(n1, c0);\n\n      c0.setName(n1);\n      c0.getCoreDescriptor().name = n1;\n      c1.setName(n0);\n      c1.getCoreDescriptor().name = n0;\n    }\n\n\n    log.info(\"swaped: \"+n0 + \" with \" + n1);\n  }\n\n","sourceOld":"  /**\n   * Swaps two SolrCore descriptors.\n   * @param n0\n   * @param n1\n   */\n  public void swap(String n0, String n1) {\n    if( n0 == null || n1 == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Can not swap unnamed cores.\" );\n    }\n    n0 = checkDefault(n0);\n    n1 = checkDefault(n1);\n    synchronized( cores ) {\n      SolrCore c0 = cores.get(n0);\n      SolrCore c1 = cores.get(n1);\n      if (c0 == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + n0 );\n      if (c1 == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + n1 );\n      cores.put(n0, c1);\n      cores.put(n1, c0);\n\n      c0.setName(n1);\n      c0.getCoreDescriptor().name = n1;\n      c1.setName(n0);\n      c1.getCoreDescriptor().name = n0;\n    }\n\n\n    log.info(\"swaped: \"+n0 + \" with \" + n1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#swap(String,String).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#swap(String,String).mjava","sourceNew":"  /**\n   * Swaps two SolrCore descriptors.\n   * @param n0\n   * @param n1\n   */\n  public void swap(String n0, String n1) {\n    if( n0 == null || n1 == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Can not swap unnamed cores.\" );\n    }\n    n0 = checkDefault(n0);\n    n1 = checkDefault(n1);\n    synchronized( cores ) {\n      SolrCore c0 = cores.get(n0);\n      SolrCore c1 = cores.get(n1);\n      if (c0 == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + n0 );\n      if (c1 == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + n1 );\n      cores.put(n0, c1);\n      cores.put(n1, c0);\n\n      c0.setName(n1);\n      c0.getCoreDescriptor().name = n1;\n      c1.setName(n0);\n      c1.getCoreDescriptor().name = n0;\n    }\n\n\n    log.info(\"swaped: \"+n0 + \" with \" + n1);\n  }\n\n","sourceOld":"  /**\n   * Swaps two SolrCore descriptors.\n   * @param n0\n   * @param n1\n   */\n  public void swap(String n0, String n1) {\n    if( n0 == null || n1 == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Can not swap unnamed cores.\" );\n    }\n    n0 = checkDefault(n0);\n    n1 = checkDefault(n1);\n    synchronized( cores ) {\n      SolrCore c0 = cores.get(n0);\n      SolrCore c1 = cores.get(n1);\n      if (c0 == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + n0 );\n      if (c1 == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + n1 );\n      cores.put(n0, c1);\n      cores.put(n1, c0);\n\n      c0.setName(n1);\n      c0.getCoreDescriptor().name = n1;\n      c1.setName(n0);\n      c1.getCoreDescriptor().name = n0;\n    }\n\n\n    log.info(\"swaped: \"+n0 + \" with \" + n1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3db8806b31bea5a737953dc635284cba21eb8a6f","date":1335095622,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#swap(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#swap(String,String).mjava","sourceNew":"  /**\n   * Swaps two SolrCore descriptors.\n   * @param n0\n   * @param n1\n   */\n  public void swap(String n0, String n1) {\n    if( n0 == null || n1 == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Can not swap unnamed cores.\" );\n    }\n    n0 = checkDefault(n0);\n    n1 = checkDefault(n1);\n    synchronized( cores ) {\n      SolrCore c0 = cores.get(n0);\n      SolrCore c1 = cores.get(n1);\n      if (c0 == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + n0 );\n      if (c1 == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + n1 );\n      cores.put(n0, c1);\n      cores.put(n1, c0);\n\n      c0.setName(n1);\n      c0.getCoreDescriptor().name = n1;\n      c1.setName(n0);\n      c1.getCoreDescriptor().name = n0;\n    }\n\n\n    log.info(\"swapped: \"+n0 + \" with \" + n1);\n  }\n\n","sourceOld":"  /**\n   * Swaps two SolrCore descriptors.\n   * @param n0\n   * @param n1\n   */\n  public void swap(String n0, String n1) {\n    if( n0 == null || n1 == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Can not swap unnamed cores.\" );\n    }\n    n0 = checkDefault(n0);\n    n1 = checkDefault(n1);\n    synchronized( cores ) {\n      SolrCore c0 = cores.get(n0);\n      SolrCore c1 = cores.get(n1);\n      if (c0 == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + n0 );\n      if (c1 == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + n1 );\n      cores.put(n0, c1);\n      cores.put(n1, c0);\n\n      c0.setName(n1);\n      c0.getCoreDescriptor().name = n1;\n      c1.setName(n0);\n      c1.getCoreDescriptor().name = n0;\n    }\n\n\n    log.info(\"swaped: \"+n0 + \" with \" + n1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#swap(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#swap(String,String).mjava","sourceNew":"  /**\n   * Swaps two SolrCore descriptors.\n   */\n  public void swap(String n0, String n1) {\n    if( n0 == null || n1 == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Can not swap unnamed cores.\" );\n    }\n    n0 = checkDefault(n0);\n    n1 = checkDefault(n1);\n    synchronized( cores ) {\n      SolrCore c0 = cores.get(n0);\n      SolrCore c1 = cores.get(n1);\n      if (c0 == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + n0 );\n      if (c1 == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + n1 );\n      cores.put(n0, c1);\n      cores.put(n1, c0);\n\n      c0.setName(n1);\n      c0.getCoreDescriptor().name = n1;\n      c1.setName(n0);\n      c1.getCoreDescriptor().name = n0;\n    }\n\n\n    log.info(\"swapped: \"+n0 + \" with \" + n1);\n  }\n\n","sourceOld":"  /**\n   * Swaps two SolrCore descriptors.\n   * @param n0\n   * @param n1\n   */\n  public void swap(String n0, String n1) {\n    if( n0 == null || n1 == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Can not swap unnamed cores.\" );\n    }\n    n0 = checkDefault(n0);\n    n1 = checkDefault(n1);\n    synchronized( cores ) {\n      SolrCore c0 = cores.get(n0);\n      SolrCore c1 = cores.get(n1);\n      if (c0 == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + n0 );\n      if (c1 == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + n1 );\n      cores.put(n0, c1);\n      cores.put(n1, c0);\n\n      c0.setName(n1);\n      c0.getCoreDescriptor().name = n1;\n      c1.setName(n0);\n      c1.getCoreDescriptor().name = n0;\n    }\n\n\n    log.info(\"swapped: \"+n0 + \" with \" + n1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a837c064b67fa63a9394136e31218b908cdcf783","date":1362186072,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#swap(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#swap(String,String).mjava","sourceNew":"  /**\n   * Swaps two SolrCore descriptors.\n   */\n  public void swap(String n0, String n1) {\n    if( n0 == null || n1 == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Can not swap unnamed cores.\" );\n    }\n    n0 = checkDefault(n0);\n    n1 = checkDefault(n1);\n    coreMaps.swap(n0, n1);\n\n    log.info(\"swapped: \"+n0 + \" with \" + n1);\n  }\n\n","sourceOld":"  /**\n   * Swaps two SolrCore descriptors.\n   */\n  public void swap(String n0, String n1) {\n    if( n0 == null || n1 == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Can not swap unnamed cores.\" );\n    }\n    n0 = checkDefault(n0);\n    n1 = checkDefault(n1);\n    synchronized( cores ) {\n      SolrCore c0 = cores.get(n0);\n      SolrCore c1 = cores.get(n1);\n      if (c0 == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + n0 );\n      if (c1 == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + n1 );\n      cores.put(n0, c1);\n      cores.put(n1, c0);\n\n      c0.setName(n1);\n      c0.getCoreDescriptor().name = n1;\n      c1.setName(n0);\n      c1.getCoreDescriptor().name = n0;\n    }\n\n\n    log.info(\"swapped: \"+n0 + \" with \" + n1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9409650933cc688e77e565092a25e58adfc2e18d","date":1366663164,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#swap(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#swap(String,String).mjava","sourceNew":"  /**\n   * Swaps two SolrCore descriptors.\n   */\n  public void swap(String n0, String n1) {\n    if( n0 == null || n1 == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Can not swap unnamed cores.\" );\n    }\n    n0 = checkDefault(n0);\n    n1 = checkDefault(n1);\n    solrCores.swap(n0, n1);\n\n    log.info(\"swapped: \"+n0 + \" with \" + n1);\n  }\n\n","sourceOld":"  /**\n   * Swaps two SolrCore descriptors.\n   */\n  public void swap(String n0, String n1) {\n    if( n0 == null || n1 == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Can not swap unnamed cores.\" );\n    }\n    n0 = checkDefault(n0);\n    n1 = checkDefault(n1);\n    coreMaps.swap(n0, n1);\n\n    log.info(\"swapped: \"+n0 + \" with \" + n1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e764e9a107f93be9fa3c922bc6a197b3eec387e","date":1373560501,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#swap(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#swap(String,String).mjava","sourceNew":"  /**\n   * Swaps two SolrCore descriptors.\n   */\n  public void swap(String n0, String n1) {\n    if( n0 == null || n1 == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Can not swap unnamed cores.\" );\n    }\n    n0 = checkDefault(n0);\n    n1 = checkDefault(n1);\n    solrCores.swap(n0, n1);\n\n    coresLocator.persist(this, solrCores.getCoreDescriptor(n0), solrCores.getCoreDescriptor(n1));\n\n    log.info(\"swapped: \"+n0 + \" with \" + n1);\n  }\n\n","sourceOld":"  /**\n   * Swaps two SolrCore descriptors.\n   */\n  public void swap(String n0, String n1) {\n    if( n0 == null || n1 == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Can not swap unnamed cores.\" );\n    }\n    n0 = checkDefault(n0);\n    n1 = checkDefault(n1);\n    solrCores.swap(n0, n1);\n\n    log.info(\"swapped: \"+n0 + \" with \" + n1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#swap(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#swap(String,String).mjava","sourceNew":"  /**\n   * Swaps two SolrCore descriptors.\n   */\n  public void swap(String n0, String n1) {\n    if( n0 == null || n1 == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Can not swap unnamed cores.\" );\n    }\n    n0 = checkDefault(n0);\n    n1 = checkDefault(n1);\n    solrCores.swap(n0, n1);\n\n    coresLocator.persist(this, solrCores.getCoreDescriptor(n0), solrCores.getCoreDescriptor(n1));\n\n    log.info(\"swapped: \"+n0 + \" with \" + n1);\n  }\n\n","sourceOld":"  /**\n   * Swaps two SolrCore descriptors.\n   */\n  public void swap(String n0, String n1) {\n    if( n0 == null || n1 == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Can not swap unnamed cores.\" );\n    }\n    n0 = checkDefault(n0);\n    n1 = checkDefault(n1);\n    solrCores.swap(n0, n1);\n\n    log.info(\"swapped: \"+n0 + \" with \" + n1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc18432e156d55186f09714af80941b71f6cb9f6","date":1387055478,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#swap(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#swap(String,String).mjava","sourceNew":"  /**\n   * Swaps two SolrCore descriptors.\n   */\n  public void swap(String n0, String n1) {\n    if( n0 == null || n1 == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Can not swap unnamed cores.\" );\n    }\n    n0 = checkDefault(n0);\n    n1 = checkDefault(n1);\n    solrCores.swap(n0, n1);\n\n    coresLocator.swap(this, solrCores.getCoreDescriptor(n0), solrCores.getCoreDescriptor(n1));\n\n    log.info(\"swapped: \"+n0 + \" with \" + n1);\n  }\n\n","sourceOld":"  /**\n   * Swaps two SolrCore descriptors.\n   */\n  public void swap(String n0, String n1) {\n    if( n0 == null || n1 == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Can not swap unnamed cores.\" );\n    }\n    n0 = checkDefault(n0);\n    n1 = checkDefault(n1);\n    solrCores.swap(n0, n1);\n\n    coresLocator.persist(this, solrCores.getCoreDescriptor(n0), solrCores.getCoreDescriptor(n1));\n\n    log.info(\"swapped: \"+n0 + \" with \" + n1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#swap(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#swap(String,String).mjava","sourceNew":"  /**\n   * Swaps two SolrCore descriptors.\n   */\n  public void swap(String n0, String n1) {\n    if( n0 == null || n1 == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Can not swap unnamed cores.\" );\n    }\n    n0 = checkDefault(n0);\n    n1 = checkDefault(n1);\n    solrCores.swap(n0, n1);\n\n    coresLocator.swap(this, solrCores.getCoreDescriptor(n0), solrCores.getCoreDescriptor(n1));\n\n    log.info(\"swapped: \"+n0 + \" with \" + n1);\n  }\n\n","sourceOld":"  /**\n   * Swaps two SolrCore descriptors.\n   */\n  public void swap(String n0, String n1) {\n    if( n0 == null || n1 == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Can not swap unnamed cores.\" );\n    }\n    n0 = checkDefault(n0);\n    n1 = checkDefault(n1);\n    solrCores.swap(n0, n1);\n\n    coresLocator.persist(this, solrCores.getCoreDescriptor(n0), solrCores.getCoreDescriptor(n1));\n\n    log.info(\"swapped: \"+n0 + \" with \" + n1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#swap(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#swap(String,String).mjava","sourceNew":"  /**\n   * Swaps two SolrCore descriptors.\n   */\n  public void swap(String n0, String n1) {\n    if( n0 == null || n1 == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Can not swap unnamed cores.\" );\n    }\n    solrCores.swap(n0, n1);\n\n    coresLocator.swap(this, solrCores.getCoreDescriptor(n0), solrCores.getCoreDescriptor(n1));\n\n    log.info(\"swapped: \"+n0 + \" with \" + n1);\n  }\n\n","sourceOld":"  /**\n   * Swaps two SolrCore descriptors.\n   */\n  public void swap(String n0, String n1) {\n    if( n0 == null || n1 == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Can not swap unnamed cores.\" );\n    }\n    n0 = checkDefault(n0);\n    n1 = checkDefault(n1);\n    solrCores.swap(n0, n1);\n\n    coresLocator.swap(this, solrCores.getCoreDescriptor(n0), solrCores.getCoreDescriptor(n1));\n\n    log.info(\"swapped: \"+n0 + \" with \" + n1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00e1c8e1340d9e31d2c6bee5f72d9040ce569049","date":1431584404,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#swap(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#swap(String,String).mjava","sourceNew":"  /**\n   * Swaps two SolrCore descriptors.\n   */\n  public void swap(String n0, String n1) {\n    if( n0 == null || n1 == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Can not swap unnamed cores.\" );\n    }\n    solrCores.swap(n0, n1);\n\n    coresLocator.swap(this, solrCores.getCoreDescriptor(n0), solrCores.getCoreDescriptor(n1));\n\n    log.info(\"swapped: \" + n0 + \" with \" + n1);\n  }\n\n","sourceOld":"  /**\n   * Swaps two SolrCore descriptors.\n   */\n  public void swap(String n0, String n1) {\n    if( n0 == null || n1 == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Can not swap unnamed cores.\" );\n    }\n    solrCores.swap(n0, n1);\n\n    coresLocator.swap(this, solrCores.getCoreDescriptor(n0), solrCores.getCoreDescriptor(n1));\n\n    log.info(\"swapped: \"+n0 + \" with \" + n1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#swap(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#swap(String,String).mjava","sourceNew":"  /**\n   * Swaps two SolrCore descriptors.\n   */\n  public void swap(String n0, String n1) {\n    if (n0 == null || n1 == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can not swap unnamed cores.\");\n    }\n    solrCores.swap(n0, n1);\n\n    coresLocator.swap(this, solrCores.getCoreDescriptor(n0), solrCores.getCoreDescriptor(n1));\n\n    log.info(\"swapped: \" + n0 + \" with \" + n1);\n  }\n\n","sourceOld":"  /**\n   * Swaps two SolrCore descriptors.\n   */\n  public void swap(String n0, String n1) {\n    if( n0 == null || n1 == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Can not swap unnamed cores.\" );\n    }\n    solrCores.swap(n0, n1);\n\n    coresLocator.swap(this, solrCores.getCoreDescriptor(n0), solrCores.getCoreDescriptor(n1));\n\n    log.info(\"swapped: \" + n0 + \" with \" + n1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#swap(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#swap(String,String).mjava","sourceNew":"  /**\n   * Swaps two SolrCore descriptors.\n   */\n  public void swap(String n0, String n1) {\n    if (n0 == null || n1 == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can not swap unnamed cores.\");\n    }\n    solrCores.swap(n0, n1);\n\n    coresLocator.swap(this, solrCores.getCoreDescriptor(n0), solrCores.getCoreDescriptor(n1));\n\n    log.info(\"swapped: {} with {}\", n0, n1);\n  }\n\n","sourceOld":"  /**\n   * Swaps two SolrCore descriptors.\n   */\n  public void swap(String n0, String n1) {\n    if (n0 == null || n1 == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can not swap unnamed cores.\");\n    }\n    solrCores.swap(n0, n1);\n\n    coresLocator.swap(this, solrCores.getCoreDescriptor(n0), solrCores.getCoreDescriptor(n1));\n\n    log.info(\"swapped: \" + n0 + \" with \" + n1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e80876f1ee57780ad756fa083e88c95d7c1d0c0b","date":1595653703,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#swap(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#swap(String,String).mjava","sourceNew":"  /**\n   * Swaps two SolrCore descriptors.\n   */\n  public void swap(String n0, String n1) {\n    apiAssumeStandalone();\n    if (n0 == null || n1 == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can not swap unnamed cores.\");\n    }\n    solrCores.swap(n0, n1);\n\n    coresLocator.swap(this, solrCores.getCoreDescriptor(n0), solrCores.getCoreDescriptor(n1));\n\n    log.info(\"swapped: {} with {}\", n0, n1);\n  }\n\n","sourceOld":"  /**\n   * Swaps two SolrCore descriptors.\n   */\n  public void swap(String n0, String n1) {\n    if (n0 == null || n1 == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can not swap unnamed cores.\");\n    }\n    solrCores.swap(n0, n1);\n\n    coresLocator.swap(this, solrCores.getCoreDescriptor(n0), solrCores.getCoreDescriptor(n1));\n\n    log.info(\"swapped: {} with {}\", n0, n1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["3db8806b31bea5a737953dc635284cba21eb8a6f"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["9409650933cc688e77e565092a25e58adfc2e18d","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["dc18432e156d55186f09714af80941b71f6cb9f6"],"3db8806b31bea5a737953dc635284cba21eb8a6f":["c26f00b574427b55127e869b935845554afde1fa"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["00e1c8e1340d9e31d2c6bee5f72d9040ce569049"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9409650933cc688e77e565092a25e58adfc2e18d":["a837c064b67fa63a9394136e31218b908cdcf783"],"140be51d03394488536f4aacedace29f9b318347":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["6e764e9a107f93be9fa3c922bc6a197b3eec387e","dc18432e156d55186f09714af80941b71f6cb9f6"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["9409650933cc688e77e565092a25e58adfc2e18d"],"a837c064b67fa63a9394136e31218b908cdcf783":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"e80876f1ee57780ad756fa083e88c95d7c1d0c0b":["140be51d03394488536f4aacedace29f9b318347"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e80876f1ee57780ad756fa083e88c95d7c1d0c0b"],"00e1c8e1340d9e31d2c6bee5f72d9040ce569049":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"dc18432e156d55186f09714af80941b71f6cb9f6":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["a837c064b67fa63a9394136e31218b908cdcf783"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"c26f00b574427b55127e869b935845554afde1fa":["3db8806b31bea5a737953dc635284cba21eb8a6f"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["00e1c8e1340d9e31d2c6bee5f72d9040ce569049"],"3db8806b31bea5a737953dc635284cba21eb8a6f":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["140be51d03394488536f4aacedace29f9b318347"],"9409650933cc688e77e565092a25e58adfc2e18d":["37a0f60745e53927c4c876cfe5b5a58170f0646c","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"140be51d03394488536f4aacedace29f9b318347":["e80876f1ee57780ad756fa083e88c95d7c1d0c0b"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["37a0f60745e53927c4c876cfe5b5a58170f0646c","74f45af4339b0daf7a95c820ab88c1aea74fbce0","dc18432e156d55186f09714af80941b71f6cb9f6"],"a837c064b67fa63a9394136e31218b908cdcf783":["9409650933cc688e77e565092a25e58adfc2e18d"],"e80876f1ee57780ad756fa083e88c95d7c1d0c0b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dc18432e156d55186f09714af80941b71f6cb9f6":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"00e1c8e1340d9e31d2c6bee5f72d9040ce569049":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","74f45af4339b0daf7a95c820ab88c1aea74fbce0","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}