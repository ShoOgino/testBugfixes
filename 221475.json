{"path":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#getPayloads(Spans[]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#getPayloads(Spans[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#getPayloads(Spans[]).mjava","sourceNew":"    // Get the payloads associated with all underlying subspans\n    public void getPayloads(Spans[] subSpans) throws IOException {\n      for (int i = 0; i < subSpans.length; i++) {\n        if (subSpans[i] instanceof NearSpansOrdered) {\n          if (((NearSpansOrdered) subSpans[i]).isPayloadAvailable()) {\n            processPayloads(((NearSpansOrdered) subSpans[i]).getPayload(),\n                subSpans[i].start(), subSpans[i].end());\n          }\n          getPayloads(((NearSpansOrdered) subSpans[i]).getSubSpans());\n        } else if (subSpans[i] instanceof NearSpansUnordered) {\n          if (((NearSpansUnordered) subSpans[i]).isPayloadAvailable()) {\n            processPayloads(((NearSpansUnordered) subSpans[i]).getPayload(),\n                subSpans[i].start(), subSpans[i].end());\n          }\n          getPayloads(((NearSpansUnordered) subSpans[i]).getSubSpans());\n        }\n      }\n    }\n\n","sourceOld":"    // Get the payloads associated with all underlying subspans\n    public void getPayloads(Spans[] subSpans) throws IOException {\n      for (int i = 0; i < subSpans.length; i++) {\n        if (subSpans[i] instanceof NearSpansOrdered) {\n          if (((NearSpansOrdered) subSpans[i]).isPayloadAvailable()) {\n            processPayloads(((NearSpansOrdered) subSpans[i]).getPayload(),\n                subSpans[i].start(), subSpans[i].end());\n          }\n          getPayloads(((NearSpansOrdered) subSpans[i]).getSubSpans());\n        } else if (subSpans[i] instanceof NearSpansUnordered) {\n          if (((NearSpansUnordered) subSpans[i]).isPayloadAvailable()) {\n            processPayloads(((NearSpansUnordered) subSpans[i]).getPayload(),\n                subSpans[i].start(), subSpans[i].end());\n          }\n          getPayloads(((NearSpansUnordered) subSpans[i]).getSubSpans());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30de45e50bdc1a79a6797f34dca6271c8866cb6e","date":1427790465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#getPayloads(Spans[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#getPayloads(Spans[]).mjava","sourceNew":"    // Get the payloads associated with all underlying subspans\n    public void getPayloads(Spans[] subSpans) throws IOException {\n      for (int i = 0; i < subSpans.length; i++) {\n        if (subSpans[i] instanceof NearSpansOrdered) {\n          if (((NearSpansOrdered) subSpans[i]).isPayloadAvailable()) {\n            processPayloads(((NearSpansOrdered) subSpans[i]).getPayload(),\n                subSpans[i].startPosition(), subSpans[i].endPosition());\n          }\n          getPayloads(((NearSpansOrdered) subSpans[i]).getSubSpans());\n        } else if (subSpans[i] instanceof NearSpansUnordered) {\n          if (((NearSpansUnordered) subSpans[i]).isPayloadAvailable()) {\n            processPayloads(((NearSpansUnordered) subSpans[i]).getPayload(),\n                subSpans[i].startPosition(), subSpans[i].endPosition());\n          }\n          getPayloads(((NearSpansUnordered) subSpans[i]).getSubSpans());\n        }\n      }\n    }\n\n","sourceOld":"    // Get the payloads associated with all underlying subspans\n    public void getPayloads(Spans[] subSpans) throws IOException {\n      for (int i = 0; i < subSpans.length; i++) {\n        if (subSpans[i] instanceof NearSpansOrdered) {\n          if (((NearSpansOrdered) subSpans[i]).isPayloadAvailable()) {\n            processPayloads(((NearSpansOrdered) subSpans[i]).getPayload(),\n                subSpans[i].start(), subSpans[i].end());\n          }\n          getPayloads(((NearSpansOrdered) subSpans[i]).getSubSpans());\n        } else if (subSpans[i] instanceof NearSpansUnordered) {\n          if (((NearSpansUnordered) subSpans[i]).isPayloadAvailable()) {\n            processPayloads(((NearSpansUnordered) subSpans[i]).getPayload(),\n                subSpans[i].start(), subSpans[i].end());\n          }\n          getPayloads(((NearSpansUnordered) subSpans[i]).getSubSpans());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#getPayloads(Spans[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#getPayloads(Spans[]).mjava","sourceNew":"    // Get the payloads associated with all underlying subspans\n    public void getPayloads(Spans[] subSpans) throws IOException {\n      for (int i = 0; i < subSpans.length; i++) {\n        if (subSpans[i] instanceof NearSpansOrdered) {\n          if (((NearSpansOrdered) subSpans[i]).isPayloadAvailable()) {\n            processPayloads(((NearSpansOrdered) subSpans[i]).getPayload(),\n                subSpans[i].startPosition(), subSpans[i].endPosition());\n          }\n          getPayloads(((NearSpansOrdered) subSpans[i]).getSubSpans());\n        } else if (subSpans[i] instanceof NearSpansUnordered) {\n          if (((NearSpansUnordered) subSpans[i]).isPayloadAvailable()) {\n            processPayloads(((NearSpansUnordered) subSpans[i]).getPayload(),\n                subSpans[i].startPosition(), subSpans[i].endPosition());\n          }\n          getPayloads(((NearSpansUnordered) subSpans[i]).getSubSpans());\n        }\n      }\n    }\n\n","sourceOld":"    // Get the payloads associated with all underlying subspans\n    public void getPayloads(Spans[] subSpans) throws IOException {\n      for (int i = 0; i < subSpans.length; i++) {\n        if (subSpans[i] instanceof NearSpansOrdered) {\n          if (((NearSpansOrdered) subSpans[i]).isPayloadAvailable()) {\n            processPayloads(((NearSpansOrdered) subSpans[i]).getPayload(),\n                subSpans[i].start(), subSpans[i].end());\n          }\n          getPayloads(((NearSpansOrdered) subSpans[i]).getSubSpans());\n        } else if (subSpans[i] instanceof NearSpansUnordered) {\n          if (((NearSpansUnordered) subSpans[i]).isPayloadAvailable()) {\n            processPayloads(((NearSpansUnordered) subSpans[i]).getPayload(),\n                subSpans[i].start(), subSpans[i].end());\n          }\n          getPayloads(((NearSpansUnordered) subSpans[i]).getSubSpans());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d530e71ed32ab23b34ca3fc72b080a554a40404","date":1432026158,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#getPayloads(Spans[]).mjava","sourceNew":null,"sourceOld":"    // Get the payloads associated with all underlying subspans\n    public void getPayloads(Spans[] subSpans) throws IOException {\n      for (int i = 0; i < subSpans.length; i++) {\n        if (subSpans[i] instanceof NearSpansOrdered) {\n          if (((NearSpansOrdered) subSpans[i]).isPayloadAvailable()) {\n            processPayloads(((NearSpansOrdered) subSpans[i]).getPayload(),\n                subSpans[i].startPosition(), subSpans[i].endPosition());\n          }\n          getPayloads(((NearSpansOrdered) subSpans[i]).getSubSpans());\n        } else if (subSpans[i] instanceof NearSpansUnordered) {\n          if (((NearSpansUnordered) subSpans[i]).isPayloadAvailable()) {\n            processPayloads(((NearSpansUnordered) subSpans[i]).getPayload(),\n                subSpans[i].startPosition(), subSpans[i].endPosition());\n          }\n          getPayloads(((NearSpansUnordered) subSpans[i]).getSubSpans());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"fab172655716b96f7e42376116235017a922de3a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2d530e71ed32ab23b34ca3fc72b080a554a40404"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["30de45e50bdc1a79a6797f34dca6271c8866cb6e","fab172655716b96f7e42376116235017a922de3a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["2d530e71ed32ab23b34ca3fc72b080a554a40404","fab172655716b96f7e42376116235017a922de3a"],"fab172655716b96f7e42376116235017a922de3a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}