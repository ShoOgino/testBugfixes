{"path":"solr/core/src/test/org/apache/solr/util/TimeZoneUtilsTest#testRandom().mjava","commits":[{"id":"b3c7501e15f71c01b69ba22749b192827fa2019b","date":1335285341,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TimeZoneUtilsTest#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandom() throws Exception {\n    final String ONE_DIGIT = \"%1d\";\n    final String TWO_DIGIT = \"%02d\";\n\n    final Random r = random();\n    final int iters = atLeast(r, 50);\n    for (int i = 0; i <= iters; i++) {\n      int hour = _TestUtil.nextInt(r, 0, 23);\n      int min = _TestUtil.nextInt(r, 0, 59);\n\n      String hours = String.format(Locale.US, \n                                   (r.nextBoolean() ? ONE_DIGIT : TWO_DIGIT),\n                                   hour);\n      String mins = String.format(Locale.US, TWO_DIGIT, min);\n      String input = \"GMT\" + (r.nextBoolean()?\"+\":\"-\") \n        + hours + (r.nextBoolean() ? \"\" : ((r.nextBoolean()?\":\":\"\") + mins));\n      assertEquals(input,  \n                   TimeZone.getTimeZone(input),\n                   TimeZoneUtils.getTimeZone(input));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"210ddb28897ffc5a75f04dd53de6a2fb8dacca29","date":1335293446,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TimeZoneUtilsTest#testRandom().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TimeZoneUtilsTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    final String ONE_DIGIT = \"%1d\";\n    final String TWO_DIGIT = \"%02d\";\n\n    final Random r = random();\n    final int iters = atLeast(r, 50);\n    for (int i = 0; i <= iters; i++) {\n      int hour = _TestUtil.nextInt(r, 0, 23);\n      int min = _TestUtil.nextInt(r, 0, 59);\n\n      String hours = String.format(Locale.US, \n                                   (r.nextBoolean() ? ONE_DIGIT : TWO_DIGIT),\n                                   hour);\n      String mins = String.format(Locale.US, TWO_DIGIT, min);\n      String input = \"GMT\" + (r.nextBoolean()?\"+\":\"-\") \n        + hours + (r.nextBoolean() ? \"\" : ((r.nextBoolean()?\":\":\"\") + mins));\n      assertSameRules(input,  \n                      TimeZone.getTimeZone(input),\n                      TimeZoneUtils.getTimeZone(input));\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    final String ONE_DIGIT = \"%1d\";\n    final String TWO_DIGIT = \"%02d\";\n\n    final Random r = random();\n    final int iters = atLeast(r, 50);\n    for (int i = 0; i <= iters; i++) {\n      int hour = _TestUtil.nextInt(r, 0, 23);\n      int min = _TestUtil.nextInt(r, 0, 59);\n\n      String hours = String.format(Locale.US, \n                                   (r.nextBoolean() ? ONE_DIGIT : TWO_DIGIT),\n                                   hour);\n      String mins = String.format(Locale.US, TWO_DIGIT, min);\n      String input = \"GMT\" + (r.nextBoolean()?\"+\":\"-\") \n        + hours + (r.nextBoolean() ? \"\" : ((r.nextBoolean()?\":\":\"\") + mins));\n      assertEquals(input,  \n                   TimeZone.getTimeZone(input),\n                   TimeZoneUtils.getTimeZone(input));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279c7cd47f17e1e8b674a3741ff5f040bc680be","date":1341675760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TimeZoneUtilsTest#testRandom().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TimeZoneUtilsTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    final String ONE_DIGIT = \"%1d\";\n    final String TWO_DIGIT = \"%02d\";\n\n    final Random r = random();\n    final int iters = atLeast(r, 50);\n    for (int i = 0; i <= iters; i++) {\n      int hour = _TestUtil.nextInt(r, 0, 23);\n      int min = _TestUtil.nextInt(r, 0, 59);\n\n      String hours = String.format(Locale.ROOT, \n                                   (r.nextBoolean() ? ONE_DIGIT : TWO_DIGIT),\n                                   hour);\n      String mins = String.format(Locale.ROOT, TWO_DIGIT, min);\n      String input = \"GMT\" + (r.nextBoolean()?\"+\":\"-\") \n        + hours + (r.nextBoolean() ? \"\" : ((r.nextBoolean()?\":\":\"\") + mins));\n      assertSameRules(input,  \n                      TimeZone.getTimeZone(input),\n                      TimeZoneUtils.getTimeZone(input));\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    final String ONE_DIGIT = \"%1d\";\n    final String TWO_DIGIT = \"%02d\";\n\n    final Random r = random();\n    final int iters = atLeast(r, 50);\n    for (int i = 0; i <= iters; i++) {\n      int hour = _TestUtil.nextInt(r, 0, 23);\n      int min = _TestUtil.nextInt(r, 0, 59);\n\n      String hours = String.format(Locale.US, \n                                   (r.nextBoolean() ? ONE_DIGIT : TWO_DIGIT),\n                                   hour);\n      String mins = String.format(Locale.US, TWO_DIGIT, min);\n      String input = \"GMT\" + (r.nextBoolean()?\"+\":\"-\") \n        + hours + (r.nextBoolean() ? \"\" : ((r.nextBoolean()?\":\":\"\") + mins));\n      assertSameRules(input,  \n                      TimeZone.getTimeZone(input),\n                      TimeZoneUtils.getTimeZone(input));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/TimeZoneUtilsTest#testRandom().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TimeZoneUtilsTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    final String ONE_DIGIT = \"%1d\";\n    final String TWO_DIGIT = \"%02d\";\n\n    final Random r = random();\n    final int iters = atLeast(r, 50);\n    for (int i = 0; i <= iters; i++) {\n      int hour = _TestUtil.nextInt(r, 0, 23);\n      int min = _TestUtil.nextInt(r, 0, 59);\n\n      String hours = String.format(Locale.ROOT, \n                                   (r.nextBoolean() ? ONE_DIGIT : TWO_DIGIT),\n                                   hour);\n      String mins = String.format(Locale.ROOT, TWO_DIGIT, min);\n      String input = \"GMT\" + (r.nextBoolean()?\"+\":\"-\") \n        + hours + (r.nextBoolean() ? \"\" : ((r.nextBoolean()?\":\":\"\") + mins));\n      assertSameRules(input,  \n                      TimeZone.getTimeZone(input),\n                      TimeZoneUtils.getTimeZone(input));\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    final String ONE_DIGIT = \"%1d\";\n    final String TWO_DIGIT = \"%02d\";\n\n    final Random r = random();\n    final int iters = atLeast(r, 50);\n    for (int i = 0; i <= iters; i++) {\n      int hour = _TestUtil.nextInt(r, 0, 23);\n      int min = _TestUtil.nextInt(r, 0, 59);\n\n      String hours = String.format(Locale.US, \n                                   (r.nextBoolean() ? ONE_DIGIT : TWO_DIGIT),\n                                   hour);\n      String mins = String.format(Locale.US, TWO_DIGIT, min);\n      String input = \"GMT\" + (r.nextBoolean()?\"+\":\"-\") \n        + hours + (r.nextBoolean() ? \"\" : ((r.nextBoolean()?\":\":\"\") + mins));\n      assertSameRules(input,  \n                      TimeZone.getTimeZone(input),\n                      TimeZoneUtils.getTimeZone(input));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/TimeZoneUtilsTest#testRandom().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TimeZoneUtilsTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    final String ONE_DIGIT = \"%1d\";\n    final String TWO_DIGIT = \"%02d\";\n\n    final Random r = random();\n    final int iters = atLeast(r, 50);\n    for (int i = 0; i <= iters; i++) {\n      int hour = _TestUtil.nextInt(r, 0, 23);\n      int min = _TestUtil.nextInt(r, 0, 59);\n\n      String hours = String.format(Locale.ROOT, \n                                   (r.nextBoolean() ? ONE_DIGIT : TWO_DIGIT),\n                                   hour);\n      String mins = String.format(Locale.ROOT, TWO_DIGIT, min);\n      String input = \"GMT\" + (r.nextBoolean()?\"+\":\"-\") \n        + hours + (r.nextBoolean() ? \"\" : ((r.nextBoolean()?\":\":\"\") + mins));\n      assertSameRules(input,  \n                      TimeZone.getTimeZone(input),\n                      TimeZoneUtils.getTimeZone(input));\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    final String ONE_DIGIT = \"%1d\";\n    final String TWO_DIGIT = \"%02d\";\n\n    final Random r = random();\n    final int iters = atLeast(r, 50);\n    for (int i = 0; i <= iters; i++) {\n      int hour = _TestUtil.nextInt(r, 0, 23);\n      int min = _TestUtil.nextInt(r, 0, 59);\n\n      String hours = String.format(Locale.US, \n                                   (r.nextBoolean() ? ONE_DIGIT : TWO_DIGIT),\n                                   hour);\n      String mins = String.format(Locale.US, TWO_DIGIT, min);\n      String input = \"GMT\" + (r.nextBoolean()?\"+\":\"-\") \n        + hours + (r.nextBoolean() ? \"\" : ((r.nextBoolean()?\":\":\"\") + mins));\n      assertSameRules(input,  \n                      TimeZone.getTimeZone(input),\n                      TimeZoneUtils.getTimeZone(input));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/TimeZoneUtilsTest#testRandom().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TimeZoneUtilsTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    final String ONE_DIGIT = \"%1d\";\n    final String TWO_DIGIT = \"%02d\";\n\n    final Random r = random();\n    final int iters = atLeast(r, 50);\n    for (int i = 0; i <= iters; i++) {\n      int hour = _TestUtil.nextInt(r, 0, 23);\n      int min = _TestUtil.nextInt(r, 0, 59);\n\n      String hours = String.format(Locale.ROOT, \n                                   (r.nextBoolean() ? ONE_DIGIT : TWO_DIGIT),\n                                   hour);\n      String mins = String.format(Locale.ROOT, TWO_DIGIT, min);\n      String input = \"GMT\" + (r.nextBoolean()?\"+\":\"-\") \n        + hours + (r.nextBoolean() ? \"\" : ((r.nextBoolean()?\":\":\"\") + mins));\n      assertSameRules(input,  \n                      TimeZone.getTimeZone(input),\n                      TimeZoneUtils.getTimeZone(input));\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    final String ONE_DIGIT = \"%1d\";\n    final String TWO_DIGIT = \"%02d\";\n\n    final Random r = random();\n    final int iters = atLeast(r, 50);\n    for (int i = 0; i <= iters; i++) {\n      int hour = _TestUtil.nextInt(r, 0, 23);\n      int min = _TestUtil.nextInt(r, 0, 59);\n\n      String hours = String.format(Locale.US, \n                                   (r.nextBoolean() ? ONE_DIGIT : TWO_DIGIT),\n                                   hour);\n      String mins = String.format(Locale.US, TWO_DIGIT, min);\n      String input = \"GMT\" + (r.nextBoolean()?\"+\":\"-\") \n        + hours + (r.nextBoolean() ? \"\" : ((r.nextBoolean()?\":\":\"\") + mins));\n      assertSameRules(input,  \n                      TimeZone.getTimeZone(input),\n                      TimeZoneUtils.getTimeZone(input));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TimeZoneUtilsTest#testRandom().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TimeZoneUtilsTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    final String ONE_DIGIT = \"%1d\";\n    final String TWO_DIGIT = \"%02d\";\n\n    final Random r = random();\n    final int iters = atLeast(r, 50);\n    for (int i = 0; i <= iters; i++) {\n      int hour = TestUtil.nextInt(r, 0, 23);\n      int min = TestUtil.nextInt(r, 0, 59);\n\n      String hours = String.format(Locale.ROOT, \n                                   (r.nextBoolean() ? ONE_DIGIT : TWO_DIGIT),\n                                   hour);\n      String mins = String.format(Locale.ROOT, TWO_DIGIT, min);\n      String input = \"GMT\" + (r.nextBoolean()?\"+\":\"-\") \n        + hours + (r.nextBoolean() ? \"\" : ((r.nextBoolean()?\":\":\"\") + mins));\n      assertSameRules(input,  \n                      TimeZone.getTimeZone(input),\n                      TimeZoneUtils.getTimeZone(input));\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    final String ONE_DIGIT = \"%1d\";\n    final String TWO_DIGIT = \"%02d\";\n\n    final Random r = random();\n    final int iters = atLeast(r, 50);\n    for (int i = 0; i <= iters; i++) {\n      int hour = _TestUtil.nextInt(r, 0, 23);\n      int min = _TestUtil.nextInt(r, 0, 59);\n\n      String hours = String.format(Locale.ROOT, \n                                   (r.nextBoolean() ? ONE_DIGIT : TWO_DIGIT),\n                                   hour);\n      String mins = String.format(Locale.ROOT, TWO_DIGIT, min);\n      String input = \"GMT\" + (r.nextBoolean()?\"+\":\"-\") \n        + hours + (r.nextBoolean() ? \"\" : ((r.nextBoolean()?\":\":\"\") + mins));\n      assertSameRules(input,  \n                      TimeZone.getTimeZone(input),\n                      TimeZoneUtils.getTimeZone(input));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"210ddb28897ffc5a75f04dd53de6a2fb8dacca29":["b3c7501e15f71c01b69ba22749b192827fa2019b"],"b3c7501e15f71c01b69ba22749b192827fa2019b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6613659748fe4411a7dcf85266e55db1f95f7315":["2acf500f78aa12b92e371fd89c719291986b6b90"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["210ddb28897ffc5a75f04dd53de6a2fb8dacca29","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["210ddb28897ffc5a75f04dd53de6a2fb8dacca29"],"2acf500f78aa12b92e371fd89c719291986b6b90":["210ddb28897ffc5a75f04dd53de6a2fb8dacca29","9279c7cd47f17e1e8b674a3741ff5f040bc680be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6613659748fe4411a7dcf85266e55db1f95f7315"],"46d8ada1fff8d18cb197c38c7983225162599948":["210ddb28897ffc5a75f04dd53de6a2fb8dacca29","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"210ddb28897ffc5a75f04dd53de6a2fb8dacca29":["fe33227f6805edab2036cbb80645cc4e2d1fa424","9279c7cd47f17e1e8b674a3741ff5f040bc680be","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"b3c7501e15f71c01b69ba22749b192827fa2019b":["210ddb28897ffc5a75f04dd53de6a2fb8dacca29"],"6613659748fe4411a7dcf85266e55db1f95f7315":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b3c7501e15f71c01b69ba22749b192827fa2019b"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["6613659748fe4411a7dcf85266e55db1f95f7315","fe33227f6805edab2036cbb80645cc4e2d1fa424","46d8ada1fff8d18cb197c38c7983225162599948"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}