{"path":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testOverNexting().mjava","commits":[{"id":"9ce0dc549cffe574c5e49b654c95a60713e0453c","date":1492031850,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testOverNexting().mjava","pathOld":"/dev/null","sourceNew":"  // OfflineSorter should not call my BytesSequencesReader.next() again after it already returned null:\n  public void testOverNexting() throws Exception {\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createTempOutput(\"unsorted\", \"tmp\", IOContext.DEFAULT);\n    try (ByteSequencesWriter w = new OfflineSorter.ByteSequencesWriter(out)) {\n      byte[] bytes = new byte[Integer.BYTES];\n      random().nextBytes(bytes);\n      w.write(bytes);\n      CodecUtil.writeFooter(out);\n    }\n\n    new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(4), OfflineSorter.MAX_TEMPFILES, Integer.BYTES) {\n      @Override\n      protected ByteSequencesReader getReader(ChecksumIndexInput in, String name) throws IOException {\n        ByteSequencesReader other = super.getReader(in, name);\n\n        return new ByteSequencesReader(in, name) {\n\n          private boolean alreadyEnded;\n              \n          @Override\n          public BytesRef next() throws IOException {\n            // if we returned null already, OfflineSorter should not call next() again\n            assertFalse(alreadyEnded);\n            BytesRef result = other.next();\n            if (result == null) {\n              alreadyEnded = true;\n            }\n            return result;\n          }\n\n          @Override\n          public void close() throws IOException {\n            other.close();\n          }\n        };\n      }\n    }.sort(out.getName());\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testOverNexting().mjava","pathOld":"/dev/null","sourceNew":"  // OfflineSorter should not call my BytesSequencesReader.next() again after it already returned null:\n  public void testOverNexting() throws Exception {\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createTempOutput(\"unsorted\", \"tmp\", IOContext.DEFAULT);\n    try (ByteSequencesWriter w = new OfflineSorter.ByteSequencesWriter(out)) {\n      byte[] bytes = new byte[Integer.BYTES];\n      random().nextBytes(bytes);\n      w.write(bytes);\n      CodecUtil.writeFooter(out);\n    }\n\n    new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(4), OfflineSorter.MAX_TEMPFILES, Integer.BYTES) {\n      @Override\n      protected ByteSequencesReader getReader(ChecksumIndexInput in, String name) throws IOException {\n        ByteSequencesReader other = super.getReader(in, name);\n\n        return new ByteSequencesReader(in, name) {\n\n          private boolean alreadyEnded;\n              \n          @Override\n          public BytesRef next() throws IOException {\n            // if we returned null already, OfflineSorter should not call next() again\n            assertFalse(alreadyEnded);\n            BytesRef result = other.next();\n            if (result == null) {\n              alreadyEnded = true;\n            }\n            return result;\n          }\n\n          @Override\n          public void close() throws IOException {\n            other.close();\n          }\n        };\n      }\n    }.sort(out.getName());\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dcb0432bcb41451b41e9aaaabe99f5d208258fe","date":1493203108,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testOverNexting().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testOverNexting().mjava","sourceNew":"  // OfflineSorter should not call my BytesSequencesReader.next() again after it already returned null:\n  public void testOverNexting() throws Exception {\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createTempOutput(\"unsorted\", \"tmp\", IOContext.DEFAULT);\n    try (ByteSequencesWriter w = new OfflineSorter.ByteSequencesWriter(out)) {\n      byte[] bytes = new byte[Integer.BYTES];\n      random().nextBytes(bytes);\n      w.write(bytes);\n      CodecUtil.writeFooter(out);\n    }\n\n    new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(4), OfflineSorter.MAX_TEMPFILES, Integer.BYTES, null, 0) {\n      @Override\n      protected ByteSequencesReader getReader(ChecksumIndexInput in, String name) throws IOException {\n        ByteSequencesReader other = super.getReader(in, name);\n\n        return new ByteSequencesReader(in, name) {\n\n          private boolean alreadyEnded;\n              \n          @Override\n          public BytesRef next() throws IOException {\n            // if we returned null already, OfflineSorter should not call next() again\n            assertFalse(alreadyEnded);\n            BytesRef result = other.next();\n            if (result == null) {\n              alreadyEnded = true;\n            }\n            return result;\n          }\n\n          @Override\n          public void close() throws IOException {\n            other.close();\n          }\n        };\n      }\n    }.sort(out.getName());\n    dir.close();\n  }\n\n","sourceOld":"  // OfflineSorter should not call my BytesSequencesReader.next() again after it already returned null:\n  public void testOverNexting() throws Exception {\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createTempOutput(\"unsorted\", \"tmp\", IOContext.DEFAULT);\n    try (ByteSequencesWriter w = new OfflineSorter.ByteSequencesWriter(out)) {\n      byte[] bytes = new byte[Integer.BYTES];\n      random().nextBytes(bytes);\n      w.write(bytes);\n      CodecUtil.writeFooter(out);\n    }\n\n    new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(4), OfflineSorter.MAX_TEMPFILES, Integer.BYTES) {\n      @Override\n      protected ByteSequencesReader getReader(ChecksumIndexInput in, String name) throws IOException {\n        ByteSequencesReader other = super.getReader(in, name);\n\n        return new ByteSequencesReader(in, name) {\n\n          private boolean alreadyEnded;\n              \n          @Override\n          public BytesRef next() throws IOException {\n            // if we returned null already, OfflineSorter should not call next() again\n            assertFalse(alreadyEnded);\n            BytesRef result = other.next();\n            if (result == null) {\n              alreadyEnded = true;\n            }\n            return result;\n          }\n\n          @Override\n          public void close() throws IOException {\n            other.close();\n          }\n        };\n      }\n    }.sort(out.getName());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testOverNexting().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testOverNexting().mjava","sourceNew":"  // OfflineSorter should not call my BytesSequencesReader.next() again after it already returned null:\n  public void testOverNexting() throws Exception {\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createTempOutput(\"unsorted\", \"tmp\", IOContext.DEFAULT);\n    try (ByteSequencesWriter w = new OfflineSorter.ByteSequencesWriter(out)) {\n      byte[] bytes = new byte[Integer.BYTES];\n      random().nextBytes(bytes);\n      w.write(bytes);\n      CodecUtil.writeFooter(out);\n    }\n\n    new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(4), OfflineSorter.MAX_TEMPFILES, Integer.BYTES, null, 0) {\n      @Override\n      protected ByteSequencesReader getReader(ChecksumIndexInput in, String name) throws IOException {\n        ByteSequencesReader other = super.getReader(in, name);\n\n        return new ByteSequencesReader(in, name) {\n\n          private boolean alreadyEnded;\n              \n          @Override\n          public BytesRef next() throws IOException {\n            // if we returned null already, OfflineSorter should not call next() again\n            assertFalse(alreadyEnded);\n            BytesRef result = other.next();\n            if (result == null) {\n              alreadyEnded = true;\n            }\n            return result;\n          }\n\n          @Override\n          public void close() throws IOException {\n            other.close();\n          }\n        };\n      }\n    }.sort(out.getName());\n    dir.close();\n  }\n\n","sourceOld":"  // OfflineSorter should not call my BytesSequencesReader.next() again after it already returned null:\n  public void testOverNexting() throws Exception {\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createTempOutput(\"unsorted\", \"tmp\", IOContext.DEFAULT);\n    try (ByteSequencesWriter w = new OfflineSorter.ByteSequencesWriter(out)) {\n      byte[] bytes = new byte[Integer.BYTES];\n      random().nextBytes(bytes);\n      w.write(bytes);\n      CodecUtil.writeFooter(out);\n    }\n\n    new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(4), OfflineSorter.MAX_TEMPFILES, Integer.BYTES) {\n      @Override\n      protected ByteSequencesReader getReader(ChecksumIndexInput in, String name) throws IOException {\n        ByteSequencesReader other = super.getReader(in, name);\n\n        return new ByteSequencesReader(in, name) {\n\n          private boolean alreadyEnded;\n              \n          @Override\n          public BytesRef next() throws IOException {\n            // if we returned null already, OfflineSorter should not call next() again\n            assertFalse(alreadyEnded);\n            BytesRef result = other.next();\n            if (result == null) {\n              alreadyEnded = true;\n            }\n            return result;\n          }\n\n          @Override\n          public void close() throws IOException {\n            other.close();\n          }\n        };\n      }\n    }.sort(out.getName());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","7dcb0432bcb41451b41e9aaaabe99f5d208258fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ce0dc549cffe574c5e49b654c95a60713e0453c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7dcb0432bcb41451b41e9aaaabe99f5d208258fe":["9ce0dc549cffe574c5e49b654c95a60713e0453c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dcb0432bcb41451b41e9aaaabe99f5d208258fe"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","9ce0dc549cffe574c5e49b654c95a60713e0453c"],"9ce0dc549cffe574c5e49b654c95a60713e0453c":["7dcb0432bcb41451b41e9aaaabe99f5d208258fe"],"7dcb0432bcb41451b41e9aaaabe99f5d208258fe":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}