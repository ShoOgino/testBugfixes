{"path":"solr/core/src/test/org/apache/solr/cloud/DeleteLastCustomShardedReplicaTest#removeAndWaitForReplicaGone(CloudSolrClient,String,Replica,String,int).mjava","commits":[{"id":"175a04d27a2b736171e7e51ca46a03b2aec094d4","date":1452534768,"type":1,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteLastCustomShardedReplicaTest#removeAndWaitForReplicaGone(CloudSolrClient,String,Replica,String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteLastCustomShardedReplicaTest#removeAndWaitForLastReplicaGone(CloudSolrClient,String,Replica,String).mjava","sourceNew":"  protected void removeAndWaitForReplicaGone(CloudSolrClient client, String COLL_NAME, Replica replica, String shard,\n      final int expectedNumReplicasRemaining)\n      throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\"collection\", COLL_NAME, \"action\", DELETEREPLICA.toLower(), \"shard\",\n        shard, \"replica\", replica.getName());\n    SolrParams params = new MapSolrParams(m);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    boolean success = false;\n    DocCollection testcoll = null;\n    while (! timeout.hasTimedOut()) {\n      testcoll = getCommonCloudSolrClient().getZkStateReader()\n          .getClusterState().getCollection(COLL_NAME);\n      // As of SOLR-5209 the last replica deletion no longer leads to\n      // the deletion of the slice.\n      final Slice slice = testcoll.getSlice(shard);\n      final int actualNumReplicasRemaining = (slice == null ? 0 : slice.getReplicas().size());\n      success = (actualNumReplicasRemaining == expectedNumReplicasRemaining);\n      if (success) {\n        log.info(\"replica cleaned up {}/{} core {}\",\n            shard + \"/\" + replica.getName(), replica.getStr(\"core\"));\n        log.info(\"current state {}\", testcoll);\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"Replica not cleaned up\", success);\n  }\n\n","sourceOld":"  protected void removeAndWaitForLastReplicaGone(CloudSolrClient client, String COLL_NAME, Replica replica, String shard)\n      throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\"collection\", COLL_NAME, \"action\", DELETEREPLICA.toLower(), \"shard\",\n        shard, \"replica\", replica.getName());\n    SolrParams params = new MapSolrParams(m);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    boolean success = false;\n    DocCollection testcoll = null;\n    while (! timeout.hasTimedOut()) {\n      testcoll = getCommonCloudSolrClient().getZkStateReader()\n          .getClusterState().getCollection(COLL_NAME);\n      // In case of a custom sharded collection, the last replica deletion would also lead to\n      // the deletion of the slice.\n      success = testcoll.getSlice(shard) == null;\n      if (success) {\n        log.info(\"replica cleaned up {}/{} core {}\",\n            shard + \"/\" + replica.getName(), replica.getStr(\"core\"));\n        log.info(\"current state {}\", testcoll);\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"Replica not cleaned up\", success);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"636a04bc82e662bf141a55f1d10f52e1c76c727b","date":1483014160,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteLastCustomShardedReplicaTest#removeAndWaitForReplicaGone(CloudSolrClient,String,Replica,String,int).mjava","sourceNew":null,"sourceOld":"  protected void removeAndWaitForReplicaGone(CloudSolrClient client, String COLL_NAME, Replica replica, String shard,\n      final int expectedNumReplicasRemaining)\n      throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\"collection\", COLL_NAME, \"action\", DELETEREPLICA.toLower(), \"shard\",\n        shard, \"replica\", replica.getName());\n    SolrParams params = new MapSolrParams(m);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    boolean success = false;\n    DocCollection testcoll = null;\n    while (! timeout.hasTimedOut()) {\n      testcoll = getCommonCloudSolrClient().getZkStateReader()\n          .getClusterState().getCollection(COLL_NAME);\n      // As of SOLR-5209 the last replica deletion no longer leads to\n      // the deletion of the slice.\n      final Slice slice = testcoll.getSlice(shard);\n      final int actualNumReplicasRemaining = (slice == null ? 0 : slice.getReplicas().size());\n      success = (actualNumReplicasRemaining == expectedNumReplicasRemaining);\n      if (success) {\n        log.info(\"replica cleaned up {}/{} core {}\",\n            shard + \"/\" + replica.getName(), replica.getStr(\"core\"));\n        log.info(\"current state {}\", testcoll);\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"Replica not cleaned up\", success);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteLastCustomShardedReplicaTest#removeAndWaitForReplicaGone(CloudSolrClient,String,Replica,String,int).mjava","sourceNew":null,"sourceOld":"  protected void removeAndWaitForReplicaGone(CloudSolrClient client, String COLL_NAME, Replica replica, String shard,\n      final int expectedNumReplicasRemaining)\n      throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\"collection\", COLL_NAME, \"action\", DELETEREPLICA.toLower(), \"shard\",\n        shard, \"replica\", replica.getName());\n    SolrParams params = new MapSolrParams(m);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    boolean success = false;\n    DocCollection testcoll = null;\n    while (! timeout.hasTimedOut()) {\n      testcoll = getCommonCloudSolrClient().getZkStateReader()\n          .getClusterState().getCollection(COLL_NAME);\n      // As of SOLR-5209 the last replica deletion no longer leads to\n      // the deletion of the slice.\n      final Slice slice = testcoll.getSlice(shard);\n      final int actualNumReplicasRemaining = (slice == null ? 0 : slice.getReplicas().size());\n      success = (actualNumReplicasRemaining == expectedNumReplicasRemaining);\n      if (success) {\n        log.info(\"replica cleaned up {}/{} core {}\",\n            shard + \"/\" + replica.getName(), replica.getStr(\"core\"));\n        log.info(\"current state {}\", testcoll);\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"Replica not cleaned up\", success);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"636a04bc82e662bf141a55f1d10f52e1c76c727b":["175a04d27a2b736171e7e51ca46a03b2aec094d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"175a04d27a2b736171e7e51ca46a03b2aec094d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["636a04bc82e662bf141a55f1d10f52e1c76c727b"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["175a04d27a2b736171e7e51ca46a03b2aec094d4","636a04bc82e662bf141a55f1d10f52e1c76c727b"]},"commit2Childs":{"636a04bc82e662bf141a55f1d10f52e1c76c727b":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["175a04d27a2b736171e7e51ca46a03b2aec094d4"],"175a04d27a2b736171e7e51ca46a03b2aec094d4":["636a04bc82e662bf141a55f1d10f52e1c76c727b","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}