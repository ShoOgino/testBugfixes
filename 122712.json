{"path":"backwards/src/java/org/apache/lucene/index/SegmentMerger#mergeTermInfos(FormatPostingsFieldsConsumer).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/index/SegmentMerger#mergeTermInfos(FormatPostingsFieldsConsumer).mjava","pathOld":"/dev/null","sourceNew":"  private final void mergeTermInfos(final FormatPostingsFieldsConsumer consumer) throws CorruptIndexException, IOException {\n    int base = 0;\n    final int readerCount = readers.size();\n    for (int i = 0; i < readerCount; i++) {\n      IndexReader reader = readers.get(i);\n      TermEnum termEnum = reader.terms();\n      SegmentMergeInfo smi = new SegmentMergeInfo(base, termEnum, reader);\n      int[] docMap  = smi.getDocMap();\n      if (docMap != null) {\n        if (docMaps == null) {\n          docMaps = new int[readerCount][];\n          delCounts = new int[readerCount];\n        }\n        docMaps[i] = docMap;\n        delCounts[i] = smi.reader.maxDoc() - smi.reader.numDocs();\n      }\n      \n      base += reader.numDocs();\n\n      assert reader.numDocs() == reader.maxDoc() - smi.delCount;\n\n      if (smi.next())\n        queue.add(smi);\t\t\t\t  // initialize queue\n      else\n        smi.close();\n    }\n\n    SegmentMergeInfo[] match = new SegmentMergeInfo[readers.size()];\n\n    String currentField = null;\n    FormatPostingsTermsConsumer termsConsumer = null;\n\n    while (queue.size() > 0) {\n      int matchSize = 0;\t\t\t  // pop matching terms\n      match[matchSize++] = queue.pop();\n      Term term = match[0].term;\n      SegmentMergeInfo top = queue.top();\n\n      while (top != null && term.compareTo(top.term) == 0) {\n        match[matchSize++] =  queue.pop();\n        top =  queue.top();\n      }\n\n      if (currentField != term.field) {\n        currentField = term.field;\n        if (termsConsumer != null)\n          termsConsumer.finish();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(currentField);\n        termsConsumer = consumer.addField(fieldInfo);\n        omitTermFreqAndPositions = fieldInfo.omitTermFreqAndPositions;\n      }\n\n      int df = appendPostings(termsConsumer, match, matchSize);\t\t  // add new TermInfo\n\n      checkAbort.work(df/3.0);\n\n      while (matchSize > 0) {\n        SegmentMergeInfo smi = match[--matchSize];\n        if (smi.next())\n          queue.add(smi);\t\t\t  // restore queue\n        else\n          smi.close();\t\t\t\t  // done with a segment\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/SegmentMerger#mergeTermInfos(FormatPostingsFieldsConsumer).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/SegmentMerger#mergeTermInfos(FormatPostingsFieldsConsumer).mjava","sourceNew":"  private final void mergeTermInfos(final FormatPostingsFieldsConsumer consumer) throws CorruptIndexException, IOException {\n    int base = 0;\n    final int readerCount = readers.size();\n    for (int i = 0; i < readerCount; i++) {\n      IndexReader reader = readers.get(i);\n      TermEnum termEnum = reader.terms();\n      SegmentMergeInfo smi = new SegmentMergeInfo(base, termEnum, reader);\n      int[] docMap  = smi.getDocMap();\n      if (docMap != null) {\n        if (docMaps == null) {\n          docMaps = new int[readerCount][];\n          delCounts = new int[readerCount];\n        }\n        docMaps[i] = docMap;\n        delCounts[i] = smi.reader.maxDoc() - smi.reader.numDocs();\n      }\n      \n      base += reader.numDocs();\n\n      assert reader.numDocs() == reader.maxDoc() - smi.delCount;\n\n      if (smi.next())\n        queue.add(smi);\t\t\t\t  // initialize queue\n      else\n        smi.close();\n    }\n\n    SegmentMergeInfo[] match = new SegmentMergeInfo[readers.size()];\n\n    String currentField = null;\n    FormatPostingsTermsConsumer termsConsumer = null;\n\n    while (queue.size() > 0) {\n      int matchSize = 0;\t\t\t  // pop matching terms\n      match[matchSize++] = queue.pop();\n      Term term = match[0].term;\n      SegmentMergeInfo top = queue.top();\n\n      while (top != null && term.compareTo(top.term) == 0) {\n        match[matchSize++] =  queue.pop();\n        top =  queue.top();\n      }\n\n      if (currentField != term.field) {\n        currentField = term.field;\n        if (termsConsumer != null)\n          termsConsumer.finish();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(currentField);\n        termsConsumer = consumer.addField(fieldInfo);\n        omitTermFreqAndPositions = fieldInfo.omitTermFreqAndPositions;\n      }\n\n      int df = appendPostings(termsConsumer, match, matchSize);\t\t  // add new TermInfo\n\n      checkAbort.work(df/3.0);\n\n      while (matchSize > 0) {\n        SegmentMergeInfo smi = match[--matchSize];\n        if (smi.next())\n          queue.add(smi);\t\t\t  // restore queue\n        else\n          smi.close();\t\t\t\t  // done with a segment\n      }\n    }\n  }\n\n","sourceOld":"  private final void mergeTermInfos(final FormatPostingsFieldsConsumer consumer) throws CorruptIndexException, IOException {\n    int base = 0;\n    final int readerCount = readers.size();\n    for (int i = 0; i < readerCount; i++) {\n      IndexReader reader = readers.get(i);\n      TermEnum termEnum = reader.terms();\n      SegmentMergeInfo smi = new SegmentMergeInfo(base, termEnum, reader);\n      int[] docMap  = smi.getDocMap();\n      if (docMap != null) {\n        if (docMaps == null) {\n          docMaps = new int[readerCount][];\n          delCounts = new int[readerCount];\n        }\n        docMaps[i] = docMap;\n        delCounts[i] = smi.reader.maxDoc() - smi.reader.numDocs();\n      }\n      \n      base += reader.numDocs();\n\n      assert reader.numDocs() == reader.maxDoc() - smi.delCount;\n\n      if (smi.next())\n        queue.add(smi);\t\t\t\t  // initialize queue\n      else\n        smi.close();\n    }\n\n    SegmentMergeInfo[] match = new SegmentMergeInfo[readers.size()];\n\n    String currentField = null;\n    FormatPostingsTermsConsumer termsConsumer = null;\n\n    while (queue.size() > 0) {\n      int matchSize = 0;\t\t\t  // pop matching terms\n      match[matchSize++] = queue.pop();\n      Term term = match[0].term;\n      SegmentMergeInfo top = queue.top();\n\n      while (top != null && term.compareTo(top.term) == 0) {\n        match[matchSize++] =  queue.pop();\n        top =  queue.top();\n      }\n\n      if (currentField != term.field) {\n        currentField = term.field;\n        if (termsConsumer != null)\n          termsConsumer.finish();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(currentField);\n        termsConsumer = consumer.addField(fieldInfo);\n        omitTermFreqAndPositions = fieldInfo.omitTermFreqAndPositions;\n      }\n\n      int df = appendPostings(termsConsumer, match, matchSize);\t\t  // add new TermInfo\n\n      checkAbort.work(df/3.0);\n\n      while (matchSize > 0) {\n        SegmentMergeInfo smi = match[--matchSize];\n        if (smi.next())\n          queue.add(smi);\t\t\t  // restore queue\n        else\n          smi.close();\t\t\t\t  // done with a segment\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}