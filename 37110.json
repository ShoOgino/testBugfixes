{"path":"src/java/org/apache/solr/analysis/WordDelimiterFilter#newTok(Token,int,int).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/WordDelimiterFilter#newTok(Token,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private Token newTok(Token orig, int start, int end) {\n    return new Token(orig.termText().substring(start,end),\n            orig.startOffset() + start,\n            orig.startOffset() + end,\n            orig.type());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["089207813330a5449ca0d4adb19c15734266ef80"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ccc76b6c713f3e022bca745da888fa20a742772","date":1186761183,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/WordDelimiterFilter#newTok(Token,int,int).mjava","pathOld":"src/java/org/apache/solr/analysis/WordDelimiterFilter#newTok(Token,int,int).mjava","sourceNew":"  private Token newTok(Token orig, int start, int end) {\n    int startOff = orig.startOffset();\n    int endOff = orig.endOffset();\n    String origStr = orig.termText();\n\n    // if length by start + end offsets doesn't match the term text then assume\n    // this is a synonym and don't adjust the offsets.\n    if (origStr.length() == endOff-startOff) {\n      endOff = startOff + end;\n      startOff += start;     \n    }\n\n    return new Token(orig.termText().substring(start,end),\n            startOff,\n            endOff,\n            orig.type());\n  }\n\n","sourceOld":"  private Token newTok(Token orig, int start, int end) {\n    return new Token(orig.termText().substring(start,end),\n            orig.startOffset() + start,\n            orig.startOffset() + end,\n            orig.type());\n  }\n\n","bugFix":null,"bugIntro":["089207813330a5449ca0d4adb19c15734266ef80"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe8ae1ed027200f075b0de9f264776fa32c4862f","date":1207066219,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/WordDelimiterFilter#newTok(Token,int,int).mjava","pathOld":"src/java/org/apache/solr/analysis/WordDelimiterFilter#newTok(Token,int,int).mjava","sourceNew":"  private Token newTok(Token orig, int start, int end) {\n    int startOff = orig.startOffset();\n    int endOff = orig.endOffset();\n    // if length by start + end offsets doesn't match the term text then assume\n    // this is a synonym and don't adjust the offsets.\n    if (orig.termLength() == endOff-startOff) {\n      endOff = startOff + end;\n      startOff += start;     \n    }\n\n    Token newTok = new Token(startOff,\n            endOff,\n            orig.type());\n    newTok.setTermBuffer(orig.termBuffer(), start, (end - start));\n    return newTok;\n  }\n\n","sourceOld":"  private Token newTok(Token orig, int start, int end) {\n    int startOff = orig.startOffset();\n    int endOff = orig.endOffset();\n    String origStr = orig.termText();\n\n    // if length by start + end offsets doesn't match the term text then assume\n    // this is a synonym and don't adjust the offsets.\n    if (origStr.length() == endOff-startOff) {\n      endOff = startOff + end;\n      startOff += start;     \n    }\n\n    return new Token(orig.termText().substring(start,end),\n            startOff,\n            endOff,\n            orig.type());\n  }\n\n","bugFix":null,"bugIntro":["089207813330a5449ca0d4adb19c15734266ef80"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"089207813330a5449ca0d4adb19c15734266ef80","date":1224604203,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/WordDelimiterFilter#newTok(Token,int,int).mjava","pathOld":"src/java/org/apache/solr/analysis/WordDelimiterFilter#newTok(Token,int,int).mjava","sourceNew":"  private Token newTok(Token orig, int start, int end) {\n    int startOff = orig.startOffset();\n    int endOff = orig.endOffset();\n    // if length by start + end offsets doesn't match the term text then assume\n    // this is a synonym and don't adjust the offsets.\n    if (orig.termLength() == endOff-startOff) {\n      endOff = startOff + end;\n      startOff += start;     \n    }\n\n    return (Token)orig.clone(orig.termBuffer(), start, (end - start), startOff, endOff);\n  }\n\n","sourceOld":"  private Token newTok(Token orig, int start, int end) {\n    int startOff = orig.startOffset();\n    int endOff = orig.endOffset();\n    // if length by start + end offsets doesn't match the term text then assume\n    // this is a synonym and don't adjust the offsets.\n    if (orig.termLength() == endOff-startOff) {\n      endOff = startOff + end;\n      startOff += start;     \n    }\n\n    Token newTok = new Token(startOff,\n            endOff,\n            orig.type());\n    newTok.setTermBuffer(orig.termBuffer(), start, (end - start));\n    return newTok;\n  }\n\n","bugFix":["fe8ae1ed027200f075b0de9f264776fa32c4862f","0ccc76b6c713f3e022bca745da888fa20a742772","0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef28ac95f5f85bbf872801277448c0924b0a6827","date":1268600312,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/solr/analysis/WordDelimiterFilter#newTok(Token,int,int).mjava","sourceNew":null,"sourceOld":"  private Token newTok(Token orig, int start, int end) {\n    int startOff = orig.startOffset();\n    int endOff = orig.endOffset();\n    // if length by start + end offsets doesn't match the term text then assume\n    // this is a synonym and don't adjust the offsets.\n    if (orig.termLength() == endOff-startOff) {\n      endOff = startOff + end;\n      startOff += start;     \n    }\n\n    return (Token)orig.clone(orig.termBuffer(), start, (end - start), startOff, endOff);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe8ae1ed027200f075b0de9f264776fa32c4862f":["0ccc76b6c713f3e022bca745da888fa20a742772"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ef28ac95f5f85bbf872801277448c0924b0a6827":["089207813330a5449ca0d4adb19c15734266ef80"],"089207813330a5449ca0d4adb19c15734266ef80":["fe8ae1ed027200f075b0de9f264776fa32c4862f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0ccc76b6c713f3e022bca745da888fa20a742772":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"]},"commit2Childs":{"fe8ae1ed027200f075b0de9f264776fa32c4862f":["089207813330a5449ca0d4adb19c15734266ef80"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["0ccc76b6c713f3e022bca745da888fa20a742772"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef28ac95f5f85bbf872801277448c0924b0a6827":[],"089207813330a5449ca0d4adb19c15734266ef80":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"0ccc76b6c713f3e022bca745da888fa20a742772":["fe8ae1ed027200f075b0de9f264776fa32c4862f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ef28ac95f5f85bbf872801277448c0924b0a6827","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}