{"path":"lucene/facet/src/java/org/apache/lucene/facet/DrillSideways#search(DrillDownQuery,Filter,FieldDoc,int,Sort,boolean,boolean).mjava","commits":[{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillSideways#search(DrillDownQuery,Filter,FieldDoc,int,Sort,boolean,boolean).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/SimpleDrillSideways#search(SimpleDrillDownQuery,Filter,FieldDoc,int,Sort,boolean,boolean).mjava","sourceNew":"  /**\n   * Search, sorting by {@link Sort}, and computing\n   * drill down and sideways counts.\n   */\n  public DrillSidewaysResult search(DrillDownQuery query,\n                                          Filter filter, FieldDoc after, int topN, Sort sort, boolean doDocScores,\n                                          boolean doMaxScore) throws IOException {\n    if (filter != null) {\n      query = new DrillDownQuery(config, filter, query);\n    }\n    if (sort != null) {\n      int limit = searcher.getIndexReader().maxDoc();\n      if (limit == 0) {\n        limit = 1; // the collector does not alow numHits = 0\n      }\n      topN = Math.min(topN, limit);\n      final TopFieldCollector hitCollector = TopFieldCollector.create(sort,\n                                                                      topN,\n                                                                      after,\n                                                                      true,\n                                                                      doDocScores,\n                                                                      doMaxScore,\n                                                                      true);\n      DrillSidewaysResult r = search(query, hitCollector);\n      return new DrillSidewaysResult(r.facets, hitCollector.topDocs());\n    } else {\n      return search(after, query, topN);\n    }\n  }\n\n","sourceOld":"  /**\n   * Search, sorting by {@link Sort}, and computing\n   * drill down and sideways counts.\n   */\n  public SimpleDrillSidewaysResult search(SimpleDrillDownQuery query,\n                                          Filter filter, FieldDoc after, int topN, Sort sort, boolean doDocScores,\n                                          boolean doMaxScore) throws IOException {\n    if (filter != null) {\n      query = new SimpleDrillDownQuery(config, filter, query);\n    }\n    if (sort != null) {\n      int limit = searcher.getIndexReader().maxDoc();\n      if (limit == 0) {\n        limit = 1; // the collector does not alow numHits = 0\n      }\n      topN = Math.min(topN, limit);\n      final TopFieldCollector hitCollector = TopFieldCollector.create(sort,\n                                                                      topN,\n                                                                      after,\n                                                                      true,\n                                                                      doDocScores,\n                                                                      doMaxScore,\n                                                                      true);\n      SimpleDrillSidewaysResult r = search(query, hitCollector);\n      return new SimpleDrillSidewaysResult(r.facets, hitCollector.topDocs());\n    } else {\n      return search(after, query, topN);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillSideways#search(DrillDownQuery,Filter,FieldDoc,int,Sort,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Search, sorting by {@link Sort}, and computing\n   * drill down and sideways counts.\n   */\n  public DrillSidewaysResult search(DrillDownQuery query,\n                                          Filter filter, FieldDoc after, int topN, Sort sort, boolean doDocScores,\n                                          boolean doMaxScore) throws IOException {\n    if (filter != null) {\n      query = new DrillDownQuery(config, filter, query);\n    }\n    if (sort != null) {\n      int limit = searcher.getIndexReader().maxDoc();\n      if (limit == 0) {\n        limit = 1; // the collector does not alow numHits = 0\n      }\n      topN = Math.min(topN, limit);\n      final TopFieldCollector hitCollector = TopFieldCollector.create(sort,\n                                                                      topN,\n                                                                      after,\n                                                                      true,\n                                                                      doDocScores,\n                                                                      doMaxScore,\n                                                                      true);\n      DrillSidewaysResult r = search(query, hitCollector);\n      return new DrillSidewaysResult(r.facets, hitCollector.topDocs());\n    } else {\n      return search(after, query, topN);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"40640359164f629dd440a47df2e145d084ce9645","date":1391711808,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillSideways#search(DrillDownQuery,Filter,FieldDoc,int,Sort,boolean,boolean).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/DrillSideways#search(DrillDownQuery,Filter,FieldDoc,int,Sort,boolean,boolean).mjava","sourceNew":"  /**\n   * Search, sorting by {@link Sort}, and computing\n   * drill down and sideways counts.\n   */\n  public DrillSidewaysResult search(DrillDownQuery query,\n                                    Filter filter, FieldDoc after, int topN, Sort sort, boolean doDocScores,\n                                    boolean doMaxScore) throws IOException {\n    if (filter != null) {\n      query = new DrillDownQuery(config, filter, query);\n    }\n    if (sort != null) {\n      int limit = searcher.getIndexReader().maxDoc();\n      if (limit == 0) {\n        limit = 1; // the collector does not alow numHits = 0\n      }\n      topN = Math.min(topN, limit);\n      final TopFieldCollector hitCollector = TopFieldCollector.create(sort,\n                                                                      topN,\n                                                                      after,\n                                                                      true,\n                                                                      doDocScores,\n                                                                      doMaxScore,\n                                                                      true);\n      DrillSidewaysResult r = search(query, hitCollector);\n      return new DrillSidewaysResult(r.facets, hitCollector.topDocs());\n    } else {\n      return search(after, query, topN);\n    }\n  }\n\n","sourceOld":"  /**\n   * Search, sorting by {@link Sort}, and computing\n   * drill down and sideways counts.\n   */\n  public DrillSidewaysResult search(DrillDownQuery query,\n                                          Filter filter, FieldDoc after, int topN, Sort sort, boolean doDocScores,\n                                          boolean doMaxScore) throws IOException {\n    if (filter != null) {\n      query = new DrillDownQuery(config, filter, query);\n    }\n    if (sort != null) {\n      int limit = searcher.getIndexReader().maxDoc();\n      if (limit == 0) {\n        limit = 1; // the collector does not alow numHits = 0\n      }\n      topN = Math.min(topN, limit);\n      final TopFieldCollector hitCollector = TopFieldCollector.create(sort,\n                                                                      topN,\n                                                                      after,\n                                                                      true,\n                                                                      doDocScores,\n                                                                      doMaxScore,\n                                                                      true);\n      DrillSidewaysResult r = search(query, hitCollector);\n      return new DrillSidewaysResult(r.facets, hitCollector.topDocs());\n    } else {\n      return search(after, query, topN);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillSideways#search(DrillDownQuery,Filter,FieldDoc,int,Sort,boolean,boolean).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/DrillSideways#search(DrillDownQuery,Filter,FieldDoc,int,Sort,boolean,boolean).mjava","sourceNew":"  /**\n   * Search, sorting by {@link Sort}, and computing\n   * drill down and sideways counts.\n   */\n  public DrillSidewaysResult search(DrillDownQuery query,\n                                    Filter filter, FieldDoc after, int topN, Sort sort, boolean doDocScores,\n                                    boolean doMaxScore) throws IOException {\n    if (filter != null) {\n      query = new DrillDownQuery(config, filter, query);\n    }\n    if (sort != null) {\n      int limit = searcher.getIndexReader().maxDoc();\n      if (limit == 0) {\n        limit = 1; // the collector does not alow numHits = 0\n      }\n      topN = Math.min(topN, limit);\n      final TopFieldCollector hitCollector = TopFieldCollector.create(sort,\n                                                                      topN,\n                                                                      after,\n                                                                      true,\n                                                                      doDocScores,\n                                                                      doMaxScore);\n      DrillSidewaysResult r = search(query, hitCollector);\n      return new DrillSidewaysResult(r.facets, hitCollector.topDocs());\n    } else {\n      return search(after, query, topN);\n    }\n  }\n\n","sourceOld":"  /**\n   * Search, sorting by {@link Sort}, and computing\n   * drill down and sideways counts.\n   */\n  public DrillSidewaysResult search(DrillDownQuery query,\n                                    Filter filter, FieldDoc after, int topN, Sort sort, boolean doDocScores,\n                                    boolean doMaxScore) throws IOException {\n    if (filter != null) {\n      query = new DrillDownQuery(config, filter, query);\n    }\n    if (sort != null) {\n      int limit = searcher.getIndexReader().maxDoc();\n      if (limit == 0) {\n        limit = 1; // the collector does not alow numHits = 0\n      }\n      topN = Math.min(topN, limit);\n      final TopFieldCollector hitCollector = TopFieldCollector.create(sort,\n                                                                      topN,\n                                                                      after,\n                                                                      true,\n                                                                      doDocScores,\n                                                                      doMaxScore,\n                                                                      true);\n      DrillSidewaysResult r = search(query, hitCollector);\n      return new DrillSidewaysResult(r.facets, hitCollector.topDocs());\n    } else {\n      return search(after, query, topN);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd6be878365e339c75cc43ad7d5df95ab4ea21e5","date":1435762101,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillSideways#search(DrillDownQuery,Query,FieldDoc,int,Sort,boolean,boolean).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/DrillSideways#search(DrillDownQuery,Filter,FieldDoc,int,Sort,boolean,boolean).mjava","sourceNew":"  /**\n   * Search, sorting by {@link Sort}, and computing\n   * drill down and sideways counts.\n   */\n  public DrillSidewaysResult search(DrillDownQuery query,\n                                    Query filter, FieldDoc after, int topN, Sort sort, boolean doDocScores,\n                                    boolean doMaxScore) throws IOException {\n    if (filter != null) {\n      query = new DrillDownQuery(config, filter, query);\n    }\n    if (sort != null) {\n      int limit = searcher.getIndexReader().maxDoc();\n      if (limit == 0) {\n        limit = 1; // the collector does not alow numHits = 0\n      }\n      topN = Math.min(topN, limit);\n      final TopFieldCollector hitCollector = TopFieldCollector.create(sort,\n                                                                      topN,\n                                                                      after,\n                                                                      true,\n                                                                      doDocScores,\n                                                                      doMaxScore);\n      DrillSidewaysResult r = search(query, hitCollector);\n      return new DrillSidewaysResult(r.facets, hitCollector.topDocs());\n    } else {\n      return search(after, query, topN);\n    }\n  }\n\n","sourceOld":"  /**\n   * Search, sorting by {@link Sort}, and computing\n   * drill down and sideways counts.\n   */\n  public DrillSidewaysResult search(DrillDownQuery query,\n                                    Filter filter, FieldDoc after, int topN, Sort sort, boolean doDocScores,\n                                    boolean doMaxScore) throws IOException {\n    if (filter != null) {\n      query = new DrillDownQuery(config, filter, query);\n    }\n    if (sort != null) {\n      int limit = searcher.getIndexReader().maxDoc();\n      if (limit == 0) {\n        limit = 1; // the collector does not alow numHits = 0\n      }\n      topN = Math.min(topN, limit);\n      final TopFieldCollector hitCollector = TopFieldCollector.create(sort,\n                                                                      topN,\n                                                                      after,\n                                                                      true,\n                                                                      doDocScores,\n                                                                      doMaxScore);\n      DrillSidewaysResult r = search(query, hitCollector);\n      return new DrillSidewaysResult(r.facets, hitCollector.topDocs());\n    } else {\n      return search(after, query, topN);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["40640359164f629dd440a47df2e145d084ce9645"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21d36d0db865f7b84026b447bec653469a6e66df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","21d36d0db865f7b84026b447bec653469a6e66df"],"40640359164f629dd440a47df2e145d084ce9645":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"dd6be878365e339c75cc43ad7d5df95ab4ea21e5":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd6be878365e339c75cc43ad7d5df95ab4ea21e5"]},"commit2Childs":{"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["dd6be878365e339c75cc43ad7d5df95ab4ea21e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["21d36d0db865f7b84026b447bec653469a6e66df","3cc728b07df73b197e6d940d27f9b08b63918f13"],"21d36d0db865f7b84026b447bec653469a6e66df":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["40640359164f629dd440a47df2e145d084ce9645"],"40640359164f629dd440a47df2e145d084ce9645":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"dd6be878365e339c75cc43ad7d5df95ab4ea21e5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}