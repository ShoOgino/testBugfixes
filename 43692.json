{"path":"src/java/org/apache/solr/schema/IndexSchema#getCopyFields(String).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/IndexSchema#getCopyFields(String).mjava","pathOld":"/dev/null","sourceNew":"  public SchemaField[] getCopyFields(String sourceField) {\n    return copyFields.get(sourceField);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f80211c8197bb79dae092b6ea66a4a839be2add","date":1149580420,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/IndexSchema#getCopyFields(String).mjava","pathOld":"src/java/org/apache/solr/schema/IndexSchema#getCopyFields(String).mjava","sourceNew":"  /**\n   * Returns the list of fields that should recieve a copy of any indexed values added to the specified field.\n   * @return may be null or empty if there are no matching copyField directives\n   */\n  public SchemaField[] getCopyFields(String sourceField) {\n    return copyFields.get(sourceField);\n  }\n\n","sourceOld":"  public SchemaField[] getCopyFields(String sourceField) {\n    return copyFields.get(sourceField);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b451a0c4c12c9a8575a49bafc27463190c8b8833","date":1149619984,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/IndexSchema#getCopyFields(String).mjava","pathOld":"src/java/org/apache/solr/schema/IndexSchema#getCopyFields(String).mjava","sourceNew":"  /**\n   * Get all copy fields, both the static and the dynamic ones.\n   * @param sourceField\n   * @return Array of fields to copy to.\n   */\n  public SchemaField[] getCopyFields(String sourceField) {\n    // Get the dynamic ones into a list.\n    List<SchemaField> matchCopyFields = new ArrayList<SchemaField>();\n\n    for(DynamicCopy dynamicCopy : dynamicCopyFields) {\n      if(dynamicCopy.matches(sourceField)) {\n        matchCopyFields.add(dynamicCopy.targetField);\n      }\n    }\n\n    // Get the fixed ones, if there are any.\n    SchemaField[] fixedCopyFields = copyFields.get(sourceField);\n\n    boolean appendFixed = copyFields.containsKey(sourceField);\n\n    // Construct the results by concatenating dynamic and fixed into a results array.\n\n    SchemaField[] results = new SchemaField[matchCopyFields.size() + (appendFixed ? fixedCopyFields.length : 0)];\n\n    matchCopyFields.toArray(results);\n\n    if(appendFixed) {\n      System.arraycopy(fixedCopyFields, 0, results, matchCopyFields.size(), fixedCopyFields.length);\n    }\n\n    return results;\n  }\n\n","sourceOld":"  /**\n   * Returns the list of fields that should recieve a copy of any indexed values added to the specified field.\n   * @return may be null or empty if there are no matching copyField directives\n   */\n  public SchemaField[] getCopyFields(String sourceField) {\n    return copyFields.get(sourceField);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80da508d266be0277931540f4d8f7905b54e7432","date":1178761952,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/IndexSchema#getCopyFields(String).mjava","pathOld":"src/java/org/apache/solr/schema/IndexSchema#getCopyFields(String).mjava","sourceNew":"  /**\n   * Get all copy fields, both the static and the dynamic ones.\n   * @param sourceField\n   * @return Array of fields to copy to.\n   */\n  public SchemaField[] getCopyFields(String sourceField) {\n    // Get the dynamic ones into a list.\n    List<SchemaField> matchCopyFields = new ArrayList<SchemaField>();\n\n    for(DynamicCopy dynamicCopy : dynamicCopyFields) {\n      if(dynamicCopy.matches(sourceField)) {\n        matchCopyFields.add(dynamicCopy.getTargetField(sourceField));\n      }\n    }\n\n    // Get the fixed ones, if there are any.\n    SchemaField[] fixedCopyFields = copyFields.get(sourceField);\n\n    boolean appendFixed = copyFields.containsKey(sourceField);\n\n    // Construct the results by concatenating dynamic and fixed into a results array.\n\n    SchemaField[] results = new SchemaField[matchCopyFields.size() + (appendFixed ? fixedCopyFields.length : 0)];\n\n    matchCopyFields.toArray(results);\n\n    if(appendFixed) {\n      System.arraycopy(fixedCopyFields, 0, results, matchCopyFields.size(), fixedCopyFields.length);\n    }\n\n    return results;\n  }\n\n","sourceOld":"  /**\n   * Get all copy fields, both the static and the dynamic ones.\n   * @param sourceField\n   * @return Array of fields to copy to.\n   */\n  public SchemaField[] getCopyFields(String sourceField) {\n    // Get the dynamic ones into a list.\n    List<SchemaField> matchCopyFields = new ArrayList<SchemaField>();\n\n    for(DynamicCopy dynamicCopy : dynamicCopyFields) {\n      if(dynamicCopy.matches(sourceField)) {\n        matchCopyFields.add(dynamicCopy.targetField);\n      }\n    }\n\n    // Get the fixed ones, if there are any.\n    SchemaField[] fixedCopyFields = copyFields.get(sourceField);\n\n    boolean appendFixed = copyFields.containsKey(sourceField);\n\n    // Construct the results by concatenating dynamic and fixed into a results array.\n\n    SchemaField[] results = new SchemaField[matchCopyFields.size() + (appendFixed ? fixedCopyFields.length : 0)];\n\n    matchCopyFields.toArray(results);\n\n    if(appendFixed) {\n      System.arraycopy(fixedCopyFields, 0, results, matchCopyFields.size(), fixedCopyFields.length);\n    }\n\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55883d09343e80968c5e44b9c14da13238544a0a","date":1228020380,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/IndexSchema#getCopyFields(String).mjava","pathOld":"src/java/org/apache/solr/schema/IndexSchema#getCopyFields(String).mjava","sourceNew":"  /**\n   * Get all copy fields, both the static and the dynamic ones.\n   * \n   * @param sourceField\n   * @return Array of fields to copy to.\n   * @deprecated Use {@link #getCopyFieldsList(String)} instead.\n   */\n  @Deprecated\n  public SchemaField[] getCopyFields(String sourceField) {\n    // This is the List that holds all the results, dynamic or not.\n    List<SchemaField> matchCopyFields = new ArrayList<SchemaField>();\n\n    // Get the dynamic results into the list.\n    for(DynamicCopy dynamicCopy : dynamicCopyFields) {\n      if(dynamicCopy.matches(sourceField)) {\n        matchCopyFields.add(dynamicCopy.getTargetField(sourceField));\n      }\n    }\n\n    // Get the fixed ones, if there are any and add them.\n    final List<CopyField> copyFields = copyFieldsMap.get(sourceField);\n    if (copyFields!=null) {\n      final Iterator<CopyField> it = copyFields.iterator();\n      while (it.hasNext()) {\n        matchCopyFields.add(it.next().getDestination());\n      }\n    }\n\n    // Construct the results by transforming the list into an array.\n    return matchCopyFields.toArray(new SchemaField[matchCopyFields.size()]);\n  }\n\n","sourceOld":"  /**\n   * Get all copy fields, both the static and the dynamic ones.\n   * @param sourceField\n   * @return Array of fields to copy to.\n   */\n  public SchemaField[] getCopyFields(String sourceField) {\n    // Get the dynamic ones into a list.\n    List<SchemaField> matchCopyFields = new ArrayList<SchemaField>();\n\n    for(DynamicCopy dynamicCopy : dynamicCopyFields) {\n      if(dynamicCopy.matches(sourceField)) {\n        matchCopyFields.add(dynamicCopy.getTargetField(sourceField));\n      }\n    }\n\n    // Get the fixed ones, if there are any.\n    SchemaField[] fixedCopyFields = copyFields.get(sourceField);\n\n    boolean appendFixed = copyFields.containsKey(sourceField);\n\n    // Construct the results by concatenating dynamic and fixed into a results array.\n\n    SchemaField[] results = new SchemaField[matchCopyFields.size() + (appendFixed ? fixedCopyFields.length : 0)];\n\n    matchCopyFields.toArray(results);\n\n    if(appendFixed) {\n      System.arraycopy(fixedCopyFields, 0, results, matchCopyFields.size(), fixedCopyFields.length);\n    }\n\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/IndexSchema#getCopyFields(String).mjava","pathOld":"src/java/org/apache/solr/schema/IndexSchema#getCopyFields(String).mjava","sourceNew":"  /**\n   * Get all copy fields, both the static and the dynamic ones.\n   * \n   * @param sourceField\n   * @return Array of fields to copy to.\n   * @deprecated Use {@link #getCopyFieldsList(String)} instead.\n   */\n  @Deprecated\n  public SchemaField[] getCopyFields(String sourceField) {\n    // This is the List that holds all the results, dynamic or not.\n    List<SchemaField> matchCopyFields = new ArrayList<SchemaField>();\n\n    // Get the dynamic results into the list.\n    for(DynamicCopy dynamicCopy : dynamicCopyFields) {\n      if(dynamicCopy.matches(sourceField)) {\n        matchCopyFields.add(dynamicCopy.getTargetField(sourceField));\n      }\n    }\n\n    // Get the fixed ones, if there are any and add them.\n    final List<CopyField> copyFields = copyFieldsMap.get(sourceField);\n    if (copyFields!=null) {\n      final Iterator<CopyField> it = copyFields.iterator();\n      while (it.hasNext()) {\n        matchCopyFields.add(it.next().getDestination());\n      }\n    }\n\n    // Construct the results by transforming the list into an array.\n    return matchCopyFields.toArray(new SchemaField[matchCopyFields.size()]);\n  }\n\n","sourceOld":"  /**\n   * Get all copy fields, both the static and the dynamic ones.\n   * \n   * @param sourceField\n   * @return Array of fields to copy to.\n   * @deprecated Use {@link #getCopyFieldsList(String)} instead.\n   */\n  @Deprecated\n  public SchemaField[] getCopyFields(String sourceField) {\n    // This is the List that holds all the results, dynamic or not.\n    List<SchemaField> matchCopyFields = new ArrayList<SchemaField>();\n\n    // Get the dynamic results into the list.\n    for(DynamicCopy dynamicCopy : dynamicCopyFields) {\n      if(dynamicCopy.matches(sourceField)) {\n        matchCopyFields.add(dynamicCopy.getTargetField(sourceField));\n      }\n    }\n\n    // Get the fixed ones, if there are any and add them.\n    final List<CopyField> copyFields = copyFieldsMap.get(sourceField);\n    if (copyFields!=null) {\n      final Iterator<CopyField> it = copyFields.iterator();\n      while (it.hasNext()) {\n        matchCopyFields.add(it.next().getDestination());\n      }\n    }\n\n    // Construct the results by transforming the list into an array.\n    return matchCopyFields.toArray(new SchemaField[matchCopyFields.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["55883d09343e80968c5e44b9c14da13238544a0a"],"80da508d266be0277931540f4d8f7905b54e7432":["b451a0c4c12c9a8575a49bafc27463190c8b8833"],"b451a0c4c12c9a8575a49bafc27463190c8b8833":["2f80211c8197bb79dae092b6ea66a4a839be2add"],"55883d09343e80968c5e44b9c14da13238544a0a":["80da508d266be0277931540f4d8f7905b54e7432"],"2f80211c8197bb79dae092b6ea66a4a839be2add":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["2f80211c8197bb79dae092b6ea66a4a839be2add"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"80da508d266be0277931540f4d8f7905b54e7432":["55883d09343e80968c5e44b9c14da13238544a0a"],"b451a0c4c12c9a8575a49bafc27463190c8b8833":["80da508d266be0277931540f4d8f7905b54e7432"],"55883d09343e80968c5e44b9c14da13238544a0a":["ad94625fb8d088209f46650c8097196fec67f00c"],"2f80211c8197bb79dae092b6ea66a4a839be2add":["b451a0c4c12c9a8575a49bafc27463190c8b8833"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}