{"path":"solr/contrib/analysis-extras/src/test/java/org/apache/solr/schema/TestICUCollationField#setupSolrHome().mjava","commits":[{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/analysis-extras/src/test/java/org/apache/solr/schema/TestICUCollationField#setupSolrHome().mjava","pathOld":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationField#setupSolrHome().mjava","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile, \"conf\");\n    confDir.mkdir();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr-analysis-extras/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr-analysis-extras/conf/schema-icucollate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","sourceOld":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile, \"conf\");\n    confDir.mkdir();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr-analysis-extras/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr-analysis-extras/conf/schema-icucollate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationField#setupSolrHome().mjava","pathOld":"solr/contrib/analysis-extras/src/test/java/org/apache/solr/schema/TestICUCollationField#setupSolrHome().mjava","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile, \"conf\");\n    confDir.mkdir();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr-analysis-extras/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr-analysis-extras/conf/schema-icucollate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","sourceOld":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile, \"data\").mkdir();\n    File confDir = new File(tmpFile, \"conf\");\n    confDir.mkdir();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"solr-analysis-extras/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr-analysis-extras/conf/schema-icucollate.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}