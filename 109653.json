{"path":"solr/core/src/java/org/apache/solr/util/SolrCLI#getZkHost(CommandLine).mjava","commits":[{"id":"f1cd9cffef251190badd40d1da8b604d0185d744","date":1421390175,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#getZkHost(CommandLine).mjava","pathOld":"/dev/null","sourceNew":"  public static String getZkHost(CommandLine cli) throws Exception {\n    String zkHost = cli.getOptionValue(\"zkHost\");\n    if (zkHost != null)\n      return zkHost;\n\n    // find it using the localPort\n    String solrUrl = cli.getOptionValue(\"solrUrl\");\n    if (solrUrl == null)\n      throw new IllegalStateException(\n          \"Must provide either the -zkHost or -solrUrl parameters to use the create_collection command!\");\n\n    if (!solrUrl.endsWith(\"/\"))\n      solrUrl += \"/\";\n\n    String systemInfoUrl = solrUrl+\"admin/info/system\";\n    CloseableHttpClient httpClient = getHttpClient();\n    try {\n      // hit Solr to get system info\n      Map<String,Object> systemInfo = getJson(httpClient, systemInfoUrl, 2);\n\n      // convert raw JSON into user-friendly output\n      StatusTool statusTool = new StatusTool();\n      Map<String,Object> status = statusTool.reportStatus(solrUrl, systemInfo, httpClient);\n      Map<String,Object> cloud = (Map<String, Object>)status.get(\"cloud\");\n      if (cloud != null) {\n        String zookeeper = (String) cloud.get(\"ZooKeeper\");\n        if (zookeeper.endsWith(\"(embedded)\")) {\n          zookeeper = zookeeper.substring(0, zookeeper.length() - \"(embedded)\".length());\n        }\n        zkHost = zookeeper;\n      }\n    } finally {\n      HttpClientUtil.close(httpClient);\n    }\n\n    return zkHost;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"547b9bdc942b65ebcd943738bb12c2a222fcf566","date":1432317527,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#getZkHost(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#getZkHost(CommandLine).mjava","sourceNew":"  /**\n   * Get the ZooKeeper connection string from either the zkHost command-line option or by looking it\n   * up from a running Solr instance based on the solrUrl option.\n   */\n  public static String getZkHost(CommandLine cli) throws Exception {\n    String zkHost = cli.getOptionValue(\"zkHost\");\n    if (zkHost != null)\n      return zkHost;\n\n    // find it using the localPort\n    String solrUrl = cli.getOptionValue(\"solrUrl\");\n    if (solrUrl == null)\n      throw new IllegalStateException(\n          \"Must provide either the -zkHost or -solrUrl parameters to use the create_collection command!\");\n\n    if (!solrUrl.endsWith(\"/\"))\n      solrUrl += \"/\";\n\n    String systemInfoUrl = solrUrl+\"admin/info/system\";\n    CloseableHttpClient httpClient = getHttpClient();\n    try {\n      // hit Solr to get system info\n      Map<String,Object> systemInfo = getJson(httpClient, systemInfoUrl, 2);\n\n      // convert raw JSON into user-friendly output\n      StatusTool statusTool = new StatusTool();\n      Map<String,Object> status = statusTool.reportStatus(solrUrl, systemInfo, httpClient);\n      Map<String,Object> cloud = (Map<String, Object>)status.get(\"cloud\");\n      if (cloud != null) {\n        String zookeeper = (String) cloud.get(\"ZooKeeper\");\n        if (zookeeper.endsWith(\"(embedded)\")) {\n          zookeeper = zookeeper.substring(0, zookeeper.length() - \"(embedded)\".length());\n        }\n        zkHost = zookeeper;\n      }\n    } finally {\n      HttpClientUtil.close(httpClient);\n    }\n\n    return zkHost;\n  }\n\n","sourceOld":"  public static String getZkHost(CommandLine cli) throws Exception {\n    String zkHost = cli.getOptionValue(\"zkHost\");\n    if (zkHost != null)\n      return zkHost;\n\n    // find it using the localPort\n    String solrUrl = cli.getOptionValue(\"solrUrl\");\n    if (solrUrl == null)\n      throw new IllegalStateException(\n          \"Must provide either the -zkHost or -solrUrl parameters to use the create_collection command!\");\n\n    if (!solrUrl.endsWith(\"/\"))\n      solrUrl += \"/\";\n\n    String systemInfoUrl = solrUrl+\"admin/info/system\";\n    CloseableHttpClient httpClient = getHttpClient();\n    try {\n      // hit Solr to get system info\n      Map<String,Object> systemInfo = getJson(httpClient, systemInfoUrl, 2);\n\n      // convert raw JSON into user-friendly output\n      StatusTool statusTool = new StatusTool();\n      Map<String,Object> status = statusTool.reportStatus(solrUrl, systemInfo, httpClient);\n      Map<String,Object> cloud = (Map<String, Object>)status.get(\"cloud\");\n      if (cloud != null) {\n        String zookeeper = (String) cloud.get(\"ZooKeeper\");\n        if (zookeeper.endsWith(\"(embedded)\")) {\n          zookeeper = zookeeper.substring(0, zookeeper.length() - \"(embedded)\".length());\n        }\n        zkHost = zookeeper;\n      }\n    } finally {\n      HttpClientUtil.close(httpClient);\n    }\n\n    return zkHost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e2df0ef4d31d965ccc4afc2ec6349c06c3cccf","date":1432317730,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#getZkHost(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#getZkHost(CommandLine).mjava","sourceNew":"  public static String getZkHost(CommandLine cli) throws Exception {\n    String zkHost = cli.getOptionValue(\"zkHost\");\n    if (zkHost != null)\n      return zkHost;\n\n    // find it using the localPort\n    String solrUrl = cli.getOptionValue(\"solrUrl\");\n    if (solrUrl == null)\n      throw new IllegalStateException(\n          \"Must provide either the -zkHost or -solrUrl parameters to use the create_collection command!\");\n\n    if (!solrUrl.endsWith(\"/\"))\n      solrUrl += \"/\";\n\n    String systemInfoUrl = solrUrl+\"admin/info/system\";\n    CloseableHttpClient httpClient = getHttpClient();\n    try {\n      // hit Solr to get system info\n      Map<String,Object> systemInfo = getJson(httpClient, systemInfoUrl, 2);\n\n      // convert raw JSON into user-friendly output\n      StatusTool statusTool = new StatusTool();\n      Map<String,Object> status = statusTool.reportStatus(solrUrl, systemInfo, httpClient);\n      Map<String,Object> cloud = (Map<String, Object>)status.get(\"cloud\");\n      if (cloud != null) {\n        String zookeeper = (String) cloud.get(\"ZooKeeper\");\n        if (zookeeper.endsWith(\"(embedded)\")) {\n          zookeeper = zookeeper.substring(0, zookeeper.length() - \"(embedded)\".length());\n        }\n        zkHost = zookeeper;\n      }\n    } finally {\n      HttpClientUtil.close(httpClient);\n    }\n\n    return zkHost;\n  }\n\n","sourceOld":"  /**\n   * Get the ZooKeeper connection string from either the zkHost command-line option or by looking it\n   * up from a running Solr instance based on the solrUrl option.\n   */\n  public static String getZkHost(CommandLine cli) throws Exception {\n    String zkHost = cli.getOptionValue(\"zkHost\");\n    if (zkHost != null)\n      return zkHost;\n\n    // find it using the localPort\n    String solrUrl = cli.getOptionValue(\"solrUrl\");\n    if (solrUrl == null)\n      throw new IllegalStateException(\n          \"Must provide either the -zkHost or -solrUrl parameters to use the create_collection command!\");\n\n    if (!solrUrl.endsWith(\"/\"))\n      solrUrl += \"/\";\n\n    String systemInfoUrl = solrUrl+\"admin/info/system\";\n    CloseableHttpClient httpClient = getHttpClient();\n    try {\n      // hit Solr to get system info\n      Map<String,Object> systemInfo = getJson(httpClient, systemInfoUrl, 2);\n\n      // convert raw JSON into user-friendly output\n      StatusTool statusTool = new StatusTool();\n      Map<String,Object> status = statusTool.reportStatus(solrUrl, systemInfo, httpClient);\n      Map<String,Object> cloud = (Map<String, Object>)status.get(\"cloud\");\n      if (cloud != null) {\n        String zookeeper = (String) cloud.get(\"ZooKeeper\");\n        if (zookeeper.endsWith(\"(embedded)\")) {\n          zookeeper = zookeeper.substring(0, zookeeper.length() - \"(embedded)\".length());\n        }\n        zkHost = zookeeper;\n      }\n    } finally {\n      HttpClientUtil.close(httpClient);\n    }\n\n    return zkHost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"919a9ff0212f46eb240b8716a6d189b06659d3f2","date":1432317985,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#getZkHost(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#getZkHost(CommandLine).mjava","sourceNew":"  /**\n   * Get the ZooKeeper connection string from either the zkHost command-line option or by looking it\n   * up from a running Solr instance based on the solrUrl option.\n   */\n  public static String getZkHost(CommandLine cli) throws Exception {\n    String zkHost = cli.getOptionValue(\"zkHost\");\n    if (zkHost != null)\n      return zkHost;\n\n    // find it using the localPort\n    String solrUrl = cli.getOptionValue(\"solrUrl\");\n    if (solrUrl == null)\n      throw new IllegalStateException(\n          \"Must provide either the -zkHost or -solrUrl parameters to use the create_collection command!\");\n\n    if (!solrUrl.endsWith(\"/\"))\n      solrUrl += \"/\";\n\n    String systemInfoUrl = solrUrl+\"admin/info/system\";\n    CloseableHttpClient httpClient = getHttpClient();\n    try {\n      // hit Solr to get system info\n      Map<String,Object> systemInfo = getJson(httpClient, systemInfoUrl, 2);\n\n      // convert raw JSON into user-friendly output\n      StatusTool statusTool = new StatusTool();\n      Map<String,Object> status = statusTool.reportStatus(solrUrl, systemInfo, httpClient);\n      Map<String,Object> cloud = (Map<String, Object>)status.get(\"cloud\");\n      if (cloud != null) {\n        String zookeeper = (String) cloud.get(\"ZooKeeper\");\n        if (zookeeper.endsWith(\"(embedded)\")) {\n          zookeeper = zookeeper.substring(0, zookeeper.length() - \"(embedded)\".length());\n        }\n        zkHost = zookeeper;\n      }\n    } finally {\n      HttpClientUtil.close(httpClient);\n    }\n\n    return zkHost;\n  }\n\n","sourceOld":"  public static String getZkHost(CommandLine cli) throws Exception {\n    String zkHost = cli.getOptionValue(\"zkHost\");\n    if (zkHost != null)\n      return zkHost;\n\n    // find it using the localPort\n    String solrUrl = cli.getOptionValue(\"solrUrl\");\n    if (solrUrl == null)\n      throw new IllegalStateException(\n          \"Must provide either the -zkHost or -solrUrl parameters to use the create_collection command!\");\n\n    if (!solrUrl.endsWith(\"/\"))\n      solrUrl += \"/\";\n\n    String systemInfoUrl = solrUrl+\"admin/info/system\";\n    CloseableHttpClient httpClient = getHttpClient();\n    try {\n      // hit Solr to get system info\n      Map<String,Object> systemInfo = getJson(httpClient, systemInfoUrl, 2);\n\n      // convert raw JSON into user-friendly output\n      StatusTool statusTool = new StatusTool();\n      Map<String,Object> status = statusTool.reportStatus(solrUrl, systemInfo, httpClient);\n      Map<String,Object> cloud = (Map<String, Object>)status.get(\"cloud\");\n      if (cloud != null) {\n        String zookeeper = (String) cloud.get(\"ZooKeeper\");\n        if (zookeeper.endsWith(\"(embedded)\")) {\n          zookeeper = zookeeper.substring(0, zookeeper.length() - \"(embedded)\".length());\n        }\n        zkHost = zookeeper;\n      }\n    } finally {\n      HttpClientUtil.close(httpClient);\n    }\n\n    return zkHost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca20be81c9284c840498143264e583ccbb8525a","date":1438705932,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#getZkHost(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#getZkHost(CommandLine).mjava","sourceNew":"  /**\n   * Get the ZooKeeper connection string from either the zkHost command-line option or by looking it\n   * up from a running Solr instance based on the solrUrl option.\n   */\n  public static String getZkHost(CommandLine cli) throws Exception {\n    String zkHost = cli.getOptionValue(\"zkHost\");\n    if (zkHost != null)\n      return zkHost;\n\n    // find it using the localPort\n    String solrUrl = cli.getOptionValue(\"solrUrl\");\n    if (solrUrl == null)\n      throw new IllegalStateException(\n          \"Must provide either the -zkHost or -solrUrl parameters to use the create_collection command!\");\n\n    if (!solrUrl.endsWith(\"/\"))\n      solrUrl += \"/\";\n\n    String systemInfoUrl = solrUrl+\"admin/info/system\";\n    CloseableHttpClient httpClient = getHttpClient();\n    try {\n      // hit Solr to get system info\n      Map<String,Object> systemInfo = getJson(httpClient, systemInfoUrl, 2, true);\n\n      // convert raw JSON into user-friendly output\n      StatusTool statusTool = new StatusTool();\n      Map<String,Object> status = statusTool.reportStatus(solrUrl, systemInfo, httpClient);\n      Map<String,Object> cloud = (Map<String, Object>)status.get(\"cloud\");\n      if (cloud != null) {\n        String zookeeper = (String) cloud.get(\"ZooKeeper\");\n        if (zookeeper.endsWith(\"(embedded)\")) {\n          zookeeper = zookeeper.substring(0, zookeeper.length() - \"(embedded)\".length());\n        }\n        zkHost = zookeeper;\n      }\n    } finally {\n      HttpClientUtil.close(httpClient);\n    }\n\n    return zkHost;\n  }\n\n","sourceOld":"  /**\n   * Get the ZooKeeper connection string from either the zkHost command-line option or by looking it\n   * up from a running Solr instance based on the solrUrl option.\n   */\n  public static String getZkHost(CommandLine cli) throws Exception {\n    String zkHost = cli.getOptionValue(\"zkHost\");\n    if (zkHost != null)\n      return zkHost;\n\n    // find it using the localPort\n    String solrUrl = cli.getOptionValue(\"solrUrl\");\n    if (solrUrl == null)\n      throw new IllegalStateException(\n          \"Must provide either the -zkHost or -solrUrl parameters to use the create_collection command!\");\n\n    if (!solrUrl.endsWith(\"/\"))\n      solrUrl += \"/\";\n\n    String systemInfoUrl = solrUrl+\"admin/info/system\";\n    CloseableHttpClient httpClient = getHttpClient();\n    try {\n      // hit Solr to get system info\n      Map<String,Object> systemInfo = getJson(httpClient, systemInfoUrl, 2);\n\n      // convert raw JSON into user-friendly output\n      StatusTool statusTool = new StatusTool();\n      Map<String,Object> status = statusTool.reportStatus(solrUrl, systemInfo, httpClient);\n      Map<String,Object> cloud = (Map<String, Object>)status.get(\"cloud\");\n      if (cloud != null) {\n        String zookeeper = (String) cloud.get(\"ZooKeeper\");\n        if (zookeeper.endsWith(\"(embedded)\")) {\n          zookeeper = zookeeper.substring(0, zookeeper.length() - \"(embedded)\".length());\n        }\n        zkHost = zookeeper;\n      }\n    } finally {\n      HttpClientUtil.close(httpClient);\n    }\n\n    return zkHost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b79a5db147a1c6f95d1625ddbc3561ef56955225","date":1528848080,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#getZkHost(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#getZkHost(CommandLine).mjava","sourceNew":"  /**\n   * Get the ZooKeeper connection string from either the zkHost command-line option or by looking it\n   * up from a running Solr instance based on the solrUrl option.\n   */\n  public static String getZkHost(CommandLine cli) throws Exception {\n    String zkHost = cli.getOptionValue(\"zkHost\");\n    if (zkHost != null)\n      return zkHost;\n\n    // find it using the localPort\n    String solrUrl = cli.getOptionValue(\"solrUrl\");\n    if (solrUrl == null)\n      throw new IllegalStateException(\n          \"Must provide either the -zkHost or -solrUrl parameters to use the create_collection command!\");\n\n    if (!solrUrl.endsWith(\"/\"))\n      solrUrl += \"/\";\n\n    String systemInfoUrl = solrUrl+\"admin/info/system\";\n    CloseableHttpClient httpClient = getHttpClient();\n    try {\n      // hit Solr to get system info\n      Map<String,Object> systemInfo = getJson(httpClient, systemInfoUrl, 2, true);\n\n      // convert raw JSON into user-friendly output\n      StatusTool statusTool = new StatusTool();\n      Map<String,Object> status = statusTool.reportStatus(solrUrl, systemInfo, httpClient);\n      Map<String,Object> cloud = (Map<String, Object>)status.get(\"cloud\");\n      if (cloud != null) {\n        String zookeeper = (String) cloud.get(\"ZooKeeper\");\n        if (zookeeper.endsWith(\"(embedded)\")) {\n          zookeeper = zookeeper.substring(0, zookeeper.length() - \"(embedded)\".length());\n        }\n        zkHost = zookeeper;\n      }\n    } finally {\n      HttpClientUtil.close(httpClient);\n    }\n\n    return zkHost;\n  }\n\n","sourceOld":"  /**\n   * Get the ZooKeeper connection string from either the zkHost command-line option or by looking it\n   * up from a running Solr instance based on the solrUrl option.\n   */\n  public static String getZkHost(CommandLine cli) throws Exception {\n    String zkHost = cli.getOptionValue(\"zkHost\");\n    if (zkHost != null)\n      return zkHost;\n\n    // find it using the localPort\n    String solrUrl = cli.getOptionValue(\"solrUrl\");\n    if (solrUrl == null)\n      throw new IllegalStateException(\n          \"Must provide either the -zkHost or -solrUrl parameters to use the create_collection command!\");\n\n    if (!solrUrl.endsWith(\"/\"))\n      solrUrl += \"/\";\n\n    String systemInfoUrl = solrUrl+\"admin/info/system\";\n    CloseableHttpClient httpClient = getHttpClient();\n    try {\n      // hit Solr to get system info\n      Map<String,Object> systemInfo = getJson(httpClient, systemInfoUrl, 2, true);\n\n      // convert raw JSON into user-friendly output\n      StatusTool statusTool = new StatusTool();\n      Map<String,Object> status = statusTool.reportStatus(solrUrl, systemInfo, httpClient);\n      Map<String,Object> cloud = (Map<String, Object>)status.get(\"cloud\");\n      if (cloud != null) {\n        String zookeeper = (String) cloud.get(\"ZooKeeper\");\n        if (zookeeper.endsWith(\"(embedded)\")) {\n          zookeeper = zookeeper.substring(0, zookeeper.length() - \"(embedded)\".length());\n        }\n        zkHost = zookeeper;\n      }\n    } finally {\n      HttpClientUtil.close(httpClient);\n    }\n\n    return zkHost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#getZkHost(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#getZkHost(CommandLine).mjava","sourceNew":"  /**\n   * Get the ZooKeeper connection string from either the zkHost command-line option or by looking it\n   * up from a running Solr instance based on the solrUrl option.\n   */\n  public static String getZkHost(CommandLine cli) throws Exception {\n    String zkHost = cli.getOptionValue(\"zkHost\");\n    if (zkHost != null)\n      return zkHost;\n\n    // find it using the localPort\n    String solrUrl = cli.getOptionValue(\"solrUrl\");\n    if (solrUrl == null)\n      throw new IllegalStateException(\n          \"Must provide either the -zkHost or -solrUrl parameters to use the create_collection command!\");\n\n    if (!solrUrl.endsWith(\"/\"))\n      solrUrl += \"/\";\n\n    String systemInfoUrl = solrUrl+\"admin/info/system\";\n    CloseableHttpClient httpClient = getHttpClient();\n    try {\n      // hit Solr to get system info\n      Map<String,Object> systemInfo = getJson(httpClient, systemInfoUrl, 2, true);\n\n      // convert raw JSON into user-friendly output\n      StatusTool statusTool = new StatusTool();\n      Map<String,Object> status = statusTool.reportStatus(solrUrl, systemInfo, httpClient);\n      Map<String,Object> cloud = (Map<String, Object>)status.get(\"cloud\");\n      if (cloud != null) {\n        String zookeeper = (String) cloud.get(\"ZooKeeper\");\n        if (zookeeper.endsWith(\"(embedded)\")) {\n          zookeeper = zookeeper.substring(0, zookeeper.length() - \"(embedded)\".length());\n        }\n        zkHost = zookeeper;\n      }\n    } finally {\n      HttpClientUtil.close(httpClient);\n    }\n\n    return zkHost;\n  }\n\n","sourceOld":"  /**\n   * Get the ZooKeeper connection string from either the zkHost command-line option or by looking it\n   * up from a running Solr instance based on the solrUrl option.\n   */\n  public static String getZkHost(CommandLine cli) throws Exception {\n    String zkHost = cli.getOptionValue(\"zkHost\");\n    if (zkHost != null)\n      return zkHost;\n\n    // find it using the localPort\n    String solrUrl = cli.getOptionValue(\"solrUrl\");\n    if (solrUrl == null)\n      throw new IllegalStateException(\n          \"Must provide either the -zkHost or -solrUrl parameters to use the create_collection command!\");\n\n    if (!solrUrl.endsWith(\"/\"))\n      solrUrl += \"/\";\n\n    String systemInfoUrl = solrUrl+\"admin/info/system\";\n    CloseableHttpClient httpClient = getHttpClient();\n    try {\n      // hit Solr to get system info\n      Map<String,Object> systemInfo = getJson(httpClient, systemInfoUrl, 2, true);\n\n      // convert raw JSON into user-friendly output\n      StatusTool statusTool = new StatusTool();\n      Map<String,Object> status = statusTool.reportStatus(solrUrl, systemInfo, httpClient);\n      Map<String,Object> cloud = (Map<String, Object>)status.get(\"cloud\");\n      if (cloud != null) {\n        String zookeeper = (String) cloud.get(\"ZooKeeper\");\n        if (zookeeper.endsWith(\"(embedded)\")) {\n          zookeeper = zookeeper.substring(0, zookeeper.length() - \"(embedded)\".length());\n        }\n        zkHost = zookeeper;\n      }\n    } finally {\n      HttpClientUtil.close(httpClient);\n    }\n\n    return zkHost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#getZkHost(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#getZkHost(CommandLine).mjava","sourceNew":"  /**\n   * Get the ZooKeeper connection string from either the zkHost command-line option or by looking it\n   * up from a running Solr instance based on the solrUrl option.\n   */\n  public static String getZkHost(CommandLine cli) throws Exception {\n    String zkHost = cli.getOptionValue(\"zkHost\");\n    if (zkHost != null)\n      return zkHost;\n\n    // find it using the localPort\n    String solrUrl = cli.getOptionValue(\"solrUrl\");\n    if (solrUrl == null)\n      throw new IllegalStateException(\n          \"Must provide either the -zkHost or -solrUrl parameters to use the create_collection command!\");\n\n    if (!solrUrl.endsWith(\"/\"))\n      solrUrl += \"/\";\n\n    String systemInfoUrl = solrUrl+\"admin/info/system\";\n    CloseableHttpClient httpClient = getHttpClient();\n    try {\n      // hit Solr to get system info\n      Map<String,Object> systemInfo = getJson(httpClient, systemInfoUrl, 2, true);\n\n      // convert raw JSON into user-friendly output\n      StatusTool statusTool = new StatusTool();\n      Map<String,Object> status = statusTool.reportStatus(solrUrl, systemInfo, httpClient);\n      Map<String,Object> cloud = (Map<String, Object>)status.get(\"cloud\");\n      if (cloud != null) {\n        String zookeeper = (String) cloud.get(\"ZooKeeper\");\n        if (zookeeper.endsWith(\"(embedded)\")) {\n          zookeeper = zookeeper.substring(0, zookeeper.length() - \"(embedded)\".length());\n        }\n        zkHost = zookeeper;\n      }\n    } finally {\n      HttpClientUtil.close(httpClient);\n    }\n\n    return zkHost;\n  }\n\n","sourceOld":"  /**\n   * Get the ZooKeeper connection string from either the zkHost command-line option or by looking it\n   * up from a running Solr instance based on the solrUrl option.\n   */\n  public static String getZkHost(CommandLine cli) throws Exception {\n    String zkHost = cli.getOptionValue(\"zkHost\");\n    if (zkHost != null)\n      return zkHost;\n\n    // find it using the localPort\n    String solrUrl = cli.getOptionValue(\"solrUrl\");\n    if (solrUrl == null)\n      throw new IllegalStateException(\n          \"Must provide either the -zkHost or -solrUrl parameters to use the create_collection command!\");\n\n    if (!solrUrl.endsWith(\"/\"))\n      solrUrl += \"/\";\n\n    String systemInfoUrl = solrUrl+\"admin/info/system\";\n    CloseableHttpClient httpClient = getHttpClient();\n    try {\n      // hit Solr to get system info\n      Map<String,Object> systemInfo = getJson(httpClient, systemInfoUrl, 2, true);\n\n      // convert raw JSON into user-friendly output\n      StatusTool statusTool = new StatusTool();\n      Map<String,Object> status = statusTool.reportStatus(solrUrl, systemInfo, httpClient);\n      Map<String,Object> cloud = (Map<String, Object>)status.get(\"cloud\");\n      if (cloud != null) {\n        String zookeeper = (String) cloud.get(\"ZooKeeper\");\n        if (zookeeper.endsWith(\"(embedded)\")) {\n          zookeeper = zookeeper.substring(0, zookeeper.length() - \"(embedded)\".length());\n        }\n        zkHost = zookeeper;\n      }\n    } finally {\n      HttpClientUtil.close(httpClient);\n    }\n\n    return zkHost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee8fbffa595c312bc0437f2c9bb6376a29c1b427","date":1589412657,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#getZkHost(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#getZkHost(CommandLine).mjava","sourceNew":"  /**\n   * Get the ZooKeeper connection string from either the zkHost command-line option or by looking it\n   * up from a running Solr instance based on the solrUrl option.\n   */\n  public static String getZkHost(CommandLine cli) throws Exception {\n    String zkHost = cli.getOptionValue(\"zkHost\");\n    if (zkHost != null)\n      return zkHost;\n\n    // find it using the localPort\n    String solrUrl = cli.getOptionValue(\"solrUrl\");\n    if (solrUrl == null)\n      throw new IllegalStateException(\n          \"Must provide either the -zkHost or -solrUrl parameters to use the create_collection command!\");\n\n    if (!solrUrl.endsWith(\"/\"))\n      solrUrl += \"/\";\n\n    String systemInfoUrl = solrUrl+\"admin/info/system\";\n    CloseableHttpClient httpClient = getHttpClient();\n    try {\n      // hit Solr to get system info\n      Map<String,Object> systemInfo = getJson(httpClient, systemInfoUrl, 2, true);\n\n      // convert raw JSON into user-friendly output\n      StatusTool statusTool = new StatusTool();\n      Map<String,Object> status = statusTool.reportStatus(solrUrl, systemInfo, httpClient);\n      @SuppressWarnings(\"unchecked\")\n      Map<String,Object> cloud = (Map<String, Object>)status.get(\"cloud\");\n      if (cloud != null) {\n        String zookeeper = (String) cloud.get(\"ZooKeeper\");\n        if (zookeeper.endsWith(\"(embedded)\")) {\n          zookeeper = zookeeper.substring(0, zookeeper.length() - \"(embedded)\".length());\n        }\n        zkHost = zookeeper;\n      }\n    } finally {\n      HttpClientUtil.close(httpClient);\n    }\n\n    return zkHost;\n  }\n\n","sourceOld":"  /**\n   * Get the ZooKeeper connection string from either the zkHost command-line option or by looking it\n   * up from a running Solr instance based on the solrUrl option.\n   */\n  public static String getZkHost(CommandLine cli) throws Exception {\n    String zkHost = cli.getOptionValue(\"zkHost\");\n    if (zkHost != null)\n      return zkHost;\n\n    // find it using the localPort\n    String solrUrl = cli.getOptionValue(\"solrUrl\");\n    if (solrUrl == null)\n      throw new IllegalStateException(\n          \"Must provide either the -zkHost or -solrUrl parameters to use the create_collection command!\");\n\n    if (!solrUrl.endsWith(\"/\"))\n      solrUrl += \"/\";\n\n    String systemInfoUrl = solrUrl+\"admin/info/system\";\n    CloseableHttpClient httpClient = getHttpClient();\n    try {\n      // hit Solr to get system info\n      Map<String,Object> systemInfo = getJson(httpClient, systemInfoUrl, 2, true);\n\n      // convert raw JSON into user-friendly output\n      StatusTool statusTool = new StatusTool();\n      Map<String,Object> status = statusTool.reportStatus(solrUrl, systemInfo, httpClient);\n      Map<String,Object> cloud = (Map<String, Object>)status.get(\"cloud\");\n      if (cloud != null) {\n        String zookeeper = (String) cloud.get(\"ZooKeeper\");\n        if (zookeeper.endsWith(\"(embedded)\")) {\n          zookeeper = zookeeper.substring(0, zookeeper.length() - \"(embedded)\".length());\n        }\n        zkHost = zookeeper;\n      }\n    } finally {\n      HttpClientUtil.close(httpClient);\n    }\n\n    return zkHost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ca20be81c9284c840498143264e583ccbb8525a":["919a9ff0212f46eb240b8716a6d189b06659d3f2"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["4ca20be81c9284c840498143264e583ccbb8525a","b79a5db147a1c6f95d1625ddbc3561ef56955225"],"547b9bdc942b65ebcd943738bb12c2a222fcf566":["f1cd9cffef251190badd40d1da8b604d0185d744"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ee8fbffa595c312bc0437f2c9bb6376a29c1b427":["b79a5db147a1c6f95d1625ddbc3561ef56955225"],"919a9ff0212f46eb240b8716a6d189b06659d3f2":["b3e2df0ef4d31d965ccc4afc2ec6349c06c3cccf"],"f1cd9cffef251190badd40d1da8b604d0185d744":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ee8fbffa595c312bc0437f2c9bb6376a29c1b427"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["4ca20be81c9284c840498143264e583ccbb8525a"],"b3e2df0ef4d31d965ccc4afc2ec6349c06c3cccf":["547b9bdc942b65ebcd943738bb12c2a222fcf566"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["4ca20be81c9284c840498143264e583ccbb8525a","b79a5db147a1c6f95d1625ddbc3561ef56955225"]},"commit2Childs":{"4ca20be81c9284c840498143264e583ccbb8525a":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","b79a5db147a1c6f95d1625ddbc3561ef56955225","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"547b9bdc942b65ebcd943738bb12c2a222fcf566":["b3e2df0ef4d31d965ccc4afc2ec6349c06c3cccf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f1cd9cffef251190badd40d1da8b604d0185d744"],"ee8fbffa595c312bc0437f2c9bb6376a29c1b427":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"919a9ff0212f46eb240b8716a6d189b06659d3f2":["4ca20be81c9284c840498143264e583ccbb8525a"],"f1cd9cffef251190badd40d1da8b604d0185d744":["547b9bdc942b65ebcd943738bb12c2a222fcf566"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","ee8fbffa595c312bc0437f2c9bb6376a29c1b427","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"b3e2df0ef4d31d965ccc4afc2ec6349c06c3cccf":["919a9ff0212f46eb240b8716a6d189b06659d3f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}