{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testFeaturesSelectionStream().mjava","commits":[{"id":"f6b1e64caa933f6fb3c0494afd6ca2597f55cc91","date":1470238980,"type":0,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testFeaturesSelectionStream().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testFeaturesSelectionStream() throws Exception {\n    String expr = \"featuresSelection(collection1, q=\\\"*:*\\\", featureSet=\\\"first\\\", field=\\\"tv_text\\\", outcome=\\\"out_i\\\", numTerms=4, positiveLabel=2)\";\n    FeaturesSelectionStream stream = new FeaturesSelectionStream(StreamExpressionParser.parse(expr), factory);\n    String expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"featureSet=first\"));\n    assertTrue(expressionString.contains(\"field=tv_text\"));\n    assertTrue(expressionString.contains(\"outcome=out_i\"));\n    assertTrue(expressionString.contains(\"numTerms=4\"));\n    assertTrue(expressionString.contains(\"positiveLabel=2\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testFeaturesSelectionStream().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testFeaturesSelectionStream() throws Exception {\n    String expr = \"featuresSelection(collection1, q=\\\"*:*\\\", featureSet=\\\"first\\\", field=\\\"tv_text\\\", outcome=\\\"out_i\\\", numTerms=4, positiveLabel=2)\";\n    FeaturesSelectionStream stream = new FeaturesSelectionStream(StreamExpressionParser.parse(expr), factory);\n    String expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"featureSet=first\"));\n    assertTrue(expressionString.contains(\"field=tv_text\"));\n    assertTrue(expressionString.contains(\"outcome=out_i\"));\n    assertTrue(expressionString.contains(\"numTerms=4\"));\n    assertTrue(expressionString.contains(\"positiveLabel=2\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testFeaturesSelectionStream().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testFeaturesSelectionStream() throws Exception {\n    String expr = \"featuresSelection(collection1, q=\\\"*:*\\\", featureSet=\\\"first\\\", field=\\\"tv_text\\\", outcome=\\\"out_i\\\", numTerms=4, positiveLabel=2)\";\n    FeaturesSelectionStream stream = new FeaturesSelectionStream(StreamExpressionParser.parse(expr), factory);\n    String expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"featureSet=first\"));\n    assertTrue(expressionString.contains(\"field=tv_text\"));\n    assertTrue(expressionString.contains(\"outcome=out_i\"));\n    assertTrue(expressionString.contains(\"numTerms=4\"));\n    assertTrue(expressionString.contains(\"positiveLabel=2\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15af35d55d70c34451f9df5edeaeff6b31f8cbe","date":1519625627,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testFeaturesSelectionStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testFeaturesSelectionStream().mjava","sourceNew":"  @Test\n  public void testFeaturesSelectionStream() throws Exception {\n    String expr = \"featuresSelection(collection1, q=\\\"*:*\\\", featureSet=\\\"first\\\", field=\\\"tv_text\\\", outcome=\\\"out_i\\\", numTerms=4, positiveLabel=2)\";\n    try (FeaturesSelectionStream stream = new FeaturesSelectionStream(StreamExpressionParser.parse(expr), factory)) {\n      String expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"featureSet=first\"));\n      assertTrue(expressionString.contains(\"field=tv_text\"));\n      assertTrue(expressionString.contains(\"outcome=out_i\"));\n      assertTrue(expressionString.contains(\"numTerms=4\"));\n      assertTrue(expressionString.contains(\"positiveLabel=2\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testFeaturesSelectionStream() throws Exception {\n    String expr = \"featuresSelection(collection1, q=\\\"*:*\\\", featureSet=\\\"first\\\", field=\\\"tv_text\\\", outcome=\\\"out_i\\\", numTerms=4, positiveLabel=2)\";\n    FeaturesSelectionStream stream = new FeaturesSelectionStream(StreamExpressionParser.parse(expr), factory);\n    String expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"featureSet=first\"));\n    assertTrue(expressionString.contains(\"field=tv_text\"));\n    assertTrue(expressionString.contains(\"outcome=out_i\"));\n    assertTrue(expressionString.contains(\"numTerms=4\"));\n    assertTrue(expressionString.contains(\"positiveLabel=2\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f6b1e64caa933f6fb3c0494afd6ca2597f55cc91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["f6b1e64caa933f6fb3c0494afd6ca2597f55cc91"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f6b1e64caa933f6fb3c0494afd6ca2597f55cc91"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f6b1e64caa933f6fb3c0494afd6ca2597f55cc91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"]},"commit2Childs":{"f6b1e64caa933f6fb3c0494afd6ca2597f55cc91":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f6b1e64caa933f6fb3c0494afd6ca2597f55cc91","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}