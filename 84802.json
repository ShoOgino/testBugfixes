{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest#testInvalidOffsets().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest#testInvalidOffsets().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest#testInvalidOffsets().mjava","sourceNew":"  // LUCENE-3642\n  // EdgeNgram blindly adds term length to offset, but this can take things out of bounds\n  // wrt original text if a previous filter increases the length of the word (in this case æ -> ae)\n  // so in this case we behave like WDF, and preserve any modified offsets\n  public void testInvalidOffsets() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        TokenFilter filters = new ASCIIFoldingFilter(tokenizer);\n        filters = new EdgeNGramTokenFilter(filters, EdgeNGramTokenFilter.Side.FRONT, 2, 15);\n        return new TokenStreamComponents(tokenizer, filters);\n      }\n    };\n    assertAnalyzesTo(analyzer, \"mosfellsbær\",\n        new String[] { \"mo\", \"mos\", \"mosf\", \"mosfe\", \"mosfel\", \"mosfell\", \"mosfells\", \"mosfellsb\", \"mosfellsba\", \"mosfellsbae\", \"mosfellsbaer\" },\n        new int[]    {    0,     0,      0,       0,        0,         0,          0,           0,            0,             0,              0 },\n        new int[]    {   11,    11,     11,      11,       11,        11,         11,          11,           11,            11,             11 });\n  }\n\n","sourceOld":"  // LUCENE-3642\n  // EdgeNgram blindly adds term length to offset, but this can take things out of bounds\n  // wrt original text if a previous filter increases the length of the word (in this case æ -> ae)\n  // so in this case we behave like WDF, and preserve any modified offsets\n  public void testInvalidOffsets() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        TokenFilter filters = new ASCIIFoldingFilter(tokenizer);\n        filters = new EdgeNGramTokenFilter(filters, EdgeNGramTokenFilter.Side.FRONT, 2, 15);\n        return new TokenStreamComponents(tokenizer, filters);\n      }\n    };\n    assertAnalyzesTo(analyzer, \"mosfellsbær\",\n        new String[] { \"mo\", \"mos\", \"mosf\", \"mosfe\", \"mosfel\", \"mosfell\", \"mosfells\", \"mosfellsb\", \"mosfellsba\", \"mosfellsbae\", \"mosfellsbaer\" },\n        new int[]    {    0,     0,      0,       0,        0,         0,          0,           0,            0,             0,              0 },\n        new int[]    {   11,    11,     11,      11,       11,        11,         11,          11,           11,            11,             11 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"523c1863d7ec17e9a5067cef7e233c388f8ab263","date":1367931848,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest#testInvalidOffsets().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest#testInvalidOffsets().mjava","sourceNew":"  // LUCENE-3642\n  // EdgeNgram blindly adds term length to offset, but this can take things out of bounds\n  // wrt original text if a previous filter increases the length of the word (in this case æ -> ae)\n  // so in this case we behave like WDF, and preserve any modified offsets\n  public void testInvalidOffsets() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        TokenFilter filters = new ASCIIFoldingFilter(tokenizer);\n        filters = new EdgeNGramTokenFilter(Version.LUCENE_43, filters, EdgeNGramTokenFilter.Side.FRONT, 2, 15);\n        return new TokenStreamComponents(tokenizer, filters);\n      }\n    };\n    assertAnalyzesTo(analyzer, \"mosfellsbær\",\n        new String[] { \"mo\", \"mos\", \"mosf\", \"mosfe\", \"mosfel\", \"mosfell\", \"mosfells\", \"mosfellsb\", \"mosfellsba\", \"mosfellsbae\", \"mosfellsbaer\" },\n        new int[]    {    0,     0,      0,       0,        0,         0,          0,           0,            0,             0,              0 },\n        new int[]    {   11,    11,     11,      11,       11,        11,         11,          11,           11,            11,             11 });\n  }\n\n","sourceOld":"  // LUCENE-3642\n  // EdgeNgram blindly adds term length to offset, but this can take things out of bounds\n  // wrt original text if a previous filter increases the length of the word (in this case æ -> ae)\n  // so in this case we behave like WDF, and preserve any modified offsets\n  public void testInvalidOffsets() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        TokenFilter filters = new ASCIIFoldingFilter(tokenizer);\n        filters = new EdgeNGramTokenFilter(filters, EdgeNGramTokenFilter.Side.FRONT, 2, 15);\n        return new TokenStreamComponents(tokenizer, filters);\n      }\n    };\n    assertAnalyzesTo(analyzer, \"mosfellsbær\",\n        new String[] { \"mo\", \"mos\", \"mosf\", \"mosfe\", \"mosfel\", \"mosfell\", \"mosfells\", \"mosfellsb\", \"mosfellsba\", \"mosfellsbae\", \"mosfellsbaer\" },\n        new int[]    {    0,     0,      0,       0,        0,         0,          0,           0,            0,             0,              0 },\n        new int[]    {   11,    11,     11,      11,       11,        11,         11,          11,           11,            11,             11 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7567347acd9579d742a2ffd4feb1a32062fb1bc3","date":1367935406,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest#testInvalidOffsets().mjava","sourceNew":null,"sourceOld":"  // LUCENE-3642\n  // EdgeNgram blindly adds term length to offset, but this can take things out of bounds\n  // wrt original text if a previous filter increases the length of the word (in this case æ -> ae)\n  // so in this case we behave like WDF, and preserve any modified offsets\n  public void testInvalidOffsets() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        TokenFilter filters = new ASCIIFoldingFilter(tokenizer);\n        filters = new EdgeNGramTokenFilter(Version.LUCENE_43, filters, EdgeNGramTokenFilter.Side.FRONT, 2, 15);\n        return new TokenStreamComponents(tokenizer, filters);\n      }\n    };\n    assertAnalyzesTo(analyzer, \"mosfellsbær\",\n        new String[] { \"mo\", \"mos\", \"mosf\", \"mosfe\", \"mosfel\", \"mosfell\", \"mosfells\", \"mosfellsb\", \"mosfellsba\", \"mosfellsbae\", \"mosfellsbaer\" },\n        new int[]    {    0,     0,      0,       0,        0,         0,          0,           0,            0,             0,              0 },\n        new int[]    {   11,    11,     11,      11,       11,        11,         11,          11,           11,            11,             11 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"523c1863d7ec17e9a5067cef7e233c388f8ab263":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7567347acd9579d742a2ffd4feb1a32062fb1bc3"],"7567347acd9579d742a2ffd4feb1a32062fb1bc3":["523c1863d7ec17e9a5067cef7e233c388f8ab263"]},"commit2Childs":{"523c1863d7ec17e9a5067cef7e233c388f8ab263":["7567347acd9579d742a2ffd4feb1a32062fb1bc3"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["523c1863d7ec17e9a5067cef7e233c388f8ab263"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7567347acd9579d742a2ffd4feb1a32062fb1bc3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}