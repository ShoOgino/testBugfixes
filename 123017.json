{"path":"solr/core/src/java/org/apache/solr/schema/IndexSchemaFactory#buildIndexSchema(String,SolrConfig).mjava","commits":[{"id":"9cf81bc8c6e4078e236f0e38b3a2d0271854f207","date":1364832963,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchemaFactory#buildIndexSchema(String,SolrConfig).mjava","pathOld":"/dev/null","sourceNew":"  public static IndexSchema buildIndexSchema(String resourceName, SolrConfig config) {\n    PluginInfo info = config.getPluginInfo(IndexSchemaFactory.class.getName());\n    IndexSchemaFactory factory;\n    if (null != info) {\n      factory = config.getResourceLoader().newInstance(info.className, IndexSchemaFactory.class);\n      factory.init(info.initArgs);\n    } else {\n      factory = new ClassicIndexSchemaFactory();\n    }\n    IndexSchema schema = factory.create(resourceName, config);\n    return schema;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchemaFactory#buildIndexSchema(String,SolrConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchemaFactory#buildIndexSchema(String,SolrConfig).mjava","sourceNew":"  /** Instantiates the configured schema factory, then calls create on it. */\n  public static IndexSchema buildIndexSchema(String resourceName, SolrConfig config) {\n    PluginInfo info = config.getPluginInfo(IndexSchemaFactory.class.getName());\n    IndexSchemaFactory factory;\n    if (null != info) {\n      factory = config.getResourceLoader().newInstance(info.className, IndexSchemaFactory.class);\n      factory.init(info.initArgs);\n    } else {\n      factory = new ClassicIndexSchemaFactory();\n    }\n    IndexSchema schema = factory.create(resourceName, config);\n    return schema;\n  }\n\n","sourceOld":"  public static IndexSchema buildIndexSchema(String resourceName, SolrConfig config) {\n    PluginInfo info = config.getPluginInfo(IndexSchemaFactory.class.getName());\n    IndexSchemaFactory factory;\n    if (null != info) {\n      factory = config.getResourceLoader().newInstance(info.className, IndexSchemaFactory.class);\n      factory.init(info.initArgs);\n    } else {\n      factory = new ClassicIndexSchemaFactory();\n    }\n    IndexSchema schema = factory.create(resourceName, config);\n    return schema;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6cd2239be52b443d5348781402d9474cece93334","date":1449473561,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchemaFactory#buildIndexSchema(String,SolrConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchemaFactory#buildIndexSchema(String,SolrConfig).mjava","sourceNew":"  /** Instantiates the configured schema factory, then calls create on it. */\n  public static IndexSchema buildIndexSchema(String resourceName, SolrConfig config) {\n    PluginInfo info = config.getPluginInfo(IndexSchemaFactory.class.getName());\n    IndexSchemaFactory factory;\n    if (null != info) {\n      factory = config.getResourceLoader().newInstance(info.className, IndexSchemaFactory.class);\n      factory.init(info.initArgs);\n    } else {\n      if (config.luceneMatchVersion.onOrAfter(Version.LUCENE_6_0_0)) {\n        factory = new ManagedIndexSchemaFactory();\n      } else {\n        factory = new ClassicIndexSchemaFactory();\n      }\n    }\n    IndexSchema schema = factory.create(resourceName, config);\n    return schema;\n  }\n\n","sourceOld":"  /** Instantiates the configured schema factory, then calls create on it. */\n  public static IndexSchema buildIndexSchema(String resourceName, SolrConfig config) {\n    PluginInfo info = config.getPluginInfo(IndexSchemaFactory.class.getName());\n    IndexSchemaFactory factory;\n    if (null != info) {\n      factory = config.getResourceLoader().newInstance(info.className, IndexSchemaFactory.class);\n      factory.init(info.initArgs);\n    } else {\n      factory = new ClassicIndexSchemaFactory();\n    }\n    IndexSchema schema = factory.create(resourceName, config);\n    return schema;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"666d496dc705cfe54deff000163f3058de20a080","date":1450166455,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchemaFactory#buildIndexSchema(String,SolrConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchemaFactory#buildIndexSchema(String,SolrConfig).mjava","sourceNew":"  /** Instantiates the configured schema factory, then calls create on it. */\n  public static IndexSchema buildIndexSchema(String resourceName, SolrConfig config) {\n    PluginInfo info = config.getPluginInfo(IndexSchemaFactory.class.getName());\n    IndexSchemaFactory factory;\n    if (null != info) {\n      factory = config.getResourceLoader().newInstance(info.className, IndexSchemaFactory.class);\n      factory.init(info.initArgs);\n    } else {\n      if (config.luceneMatchVersion.onOrAfter(Version.LUCENE_6_0_0)) {\n        // ManagedIndexSchemaFactory is SolrCoreAware so we must create using the resource loader\n        factory = config.getResourceLoader().newInstance(ManagedIndexSchemaFactory.class.getName(), IndexSchemaFactory.class);\n      } else {\n        factory = new ClassicIndexSchemaFactory();\n      }\n    }\n    IndexSchema schema = factory.create(resourceName, config);\n    return schema;\n  }\n\n","sourceOld":"  /** Instantiates the configured schema factory, then calls create on it. */\n  public static IndexSchema buildIndexSchema(String resourceName, SolrConfig config) {\n    PluginInfo info = config.getPluginInfo(IndexSchemaFactory.class.getName());\n    IndexSchemaFactory factory;\n    if (null != info) {\n      factory = config.getResourceLoader().newInstance(info.className, IndexSchemaFactory.class);\n      factory.init(info.initArgs);\n    } else {\n      if (config.luceneMatchVersion.onOrAfter(Version.LUCENE_6_0_0)) {\n        factory = new ManagedIndexSchemaFactory();\n      } else {\n        factory = new ClassicIndexSchemaFactory();\n      }\n    }\n    IndexSchema schema = factory.create(resourceName, config);\n    return schema;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd7538cbbd9c304bc5396980e9802cd3a5bcf8e4","date":1499084229,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchemaFactory#buildIndexSchema(String,SolrConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchemaFactory#buildIndexSchema(String,SolrConfig).mjava","sourceNew":"  /** Instantiates the configured schema factory, then calls create on it. */\n  public static IndexSchema buildIndexSchema(String resourceName, SolrConfig config) {\n    PluginInfo info = config.getPluginInfo(IndexSchemaFactory.class.getName());\n    IndexSchemaFactory factory;\n    if (null != info) {\n      factory = config.getResourceLoader().newInstance(info.className, IndexSchemaFactory.class);\n      factory.init(info.initArgs);\n    } else {\n      factory = config.getResourceLoader().newInstance(ManagedIndexSchemaFactory.class.getName(), IndexSchemaFactory.class);\n    }\n    IndexSchema schema = factory.create(resourceName, config);\n    return schema;\n  }\n\n","sourceOld":"  /** Instantiates the configured schema factory, then calls create on it. */\n  public static IndexSchema buildIndexSchema(String resourceName, SolrConfig config) {\n    PluginInfo info = config.getPluginInfo(IndexSchemaFactory.class.getName());\n    IndexSchemaFactory factory;\n    if (null != info) {\n      factory = config.getResourceLoader().newInstance(info.className, IndexSchemaFactory.class);\n      factory.init(info.initArgs);\n    } else {\n      if (config.luceneMatchVersion.onOrAfter(Version.LUCENE_6_0_0)) {\n        // ManagedIndexSchemaFactory is SolrCoreAware so we must create using the resource loader\n        factory = config.getResourceLoader().newInstance(ManagedIndexSchemaFactory.class.getName(), IndexSchemaFactory.class);\n      } else {\n        factory = new ClassicIndexSchemaFactory();\n      }\n    }\n    IndexSchema schema = factory.create(resourceName, config);\n    return schema;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc018b79379c67835b40b1259cd3dc931df60944","date":1499109112,"type":3,"author":"Anshum Gupta","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchemaFactory#buildIndexSchema(String,SolrConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchemaFactory#buildIndexSchema(String,SolrConfig).mjava","sourceNew":"  /** Instantiates the configured schema factory, then calls create on it. */\n  public static IndexSchema buildIndexSchema(String resourceName, SolrConfig config) {\n    PluginInfo info = config.getPluginInfo(IndexSchemaFactory.class.getName());\n    IndexSchemaFactory factory;\n    if (null != info) {\n      factory = config.getResourceLoader().newInstance(info.className, IndexSchemaFactory.class);\n      factory.init(info.initArgs);\n    } else {\n      factory = config.getResourceLoader().newInstance(ManagedIndexSchemaFactory.class.getName(), IndexSchemaFactory.class);\n    }\n    IndexSchema schema = factory.create(resourceName, config);\n    return schema;\n  }\n\n","sourceOld":"  /** Instantiates the configured schema factory, then calls create on it. */\n  public static IndexSchema buildIndexSchema(String resourceName, SolrConfig config) {\n    PluginInfo info = config.getPluginInfo(IndexSchemaFactory.class.getName());\n    IndexSchemaFactory factory;\n    if (null != info) {\n      factory = config.getResourceLoader().newInstance(info.className, IndexSchemaFactory.class);\n      factory.init(info.initArgs);\n    } else {\n      if (config.luceneMatchVersion.onOrAfter(Version.LUCENE_6_0_0)) {\n        // ManagedIndexSchemaFactory is SolrCoreAware so we must create using the resource loader\n        factory = config.getResourceLoader().newInstance(ManagedIndexSchemaFactory.class.getName(), IndexSchemaFactory.class);\n      } else {\n        factory = new ClassicIndexSchemaFactory();\n      }\n    }\n    IndexSchema schema = factory.create(resourceName, config);\n    return schema;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchemaFactory#buildIndexSchema(String,SolrConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchemaFactory#buildIndexSchema(String,SolrConfig).mjava","sourceNew":"  /** Instantiates the configured schema factory, then calls create on it. */\n  public static IndexSchema buildIndexSchema(String resourceName, SolrConfig config) {\n    PluginInfo info = config.getPluginInfo(IndexSchemaFactory.class.getName());\n    IndexSchemaFactory factory;\n    if (null != info) {\n      factory = config.getResourceLoader().newInstance(info.className, IndexSchemaFactory.class);\n      factory.init(info.initArgs);\n    } else {\n      factory = config.getResourceLoader().newInstance(ManagedIndexSchemaFactory.class.getName(), IndexSchemaFactory.class);\n    }\n    IndexSchema schema = factory.create(resourceName, config);\n    return schema;\n  }\n\n","sourceOld":"  /** Instantiates the configured schema factory, then calls create on it. */\n  public static IndexSchema buildIndexSchema(String resourceName, SolrConfig config) {\n    PluginInfo info = config.getPluginInfo(IndexSchemaFactory.class.getName());\n    IndexSchemaFactory factory;\n    if (null != info) {\n      factory = config.getResourceLoader().newInstance(info.className, IndexSchemaFactory.class);\n      factory.init(info.initArgs);\n    } else {\n      if (config.luceneMatchVersion.onOrAfter(Version.LUCENE_6_0_0)) {\n        // ManagedIndexSchemaFactory is SolrCoreAware so we must create using the resource loader\n        factory = config.getResourceLoader().newInstance(ManagedIndexSchemaFactory.class.getName(), IndexSchemaFactory.class);\n      } else {\n        factory = new ClassicIndexSchemaFactory();\n      }\n    }\n    IndexSchema schema = factory.create(resourceName, config);\n    return schema;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e4fb176991e13ab85dfe62dceeb287dde115745","date":1579630717,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchemaFactory#buildIndexSchema(String,SolrConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchemaFactory#buildIndexSchema(String,SolrConfig).mjava","sourceNew":"  /** Instantiates the configured schema factory, then calls create on it. */\n  public static IndexSchema buildIndexSchema(String resourceName, SolrConfig config) {\n    return newIndexSchemaFactory(config).create(resourceName, config);\n  }\n\n","sourceOld":"  /** Instantiates the configured schema factory, then calls create on it. */\n  public static IndexSchema buildIndexSchema(String resourceName, SolrConfig config) {\n    PluginInfo info = config.getPluginInfo(IndexSchemaFactory.class.getName());\n    IndexSchemaFactory factory;\n    if (null != info) {\n      factory = config.getResourceLoader().newInstance(info.className, IndexSchemaFactory.class);\n      factory.init(info.initArgs);\n    } else {\n      factory = config.getResourceLoader().newInstance(ManagedIndexSchemaFactory.class.getName(), IndexSchemaFactory.class);\n    }\n    IndexSchema schema = factory.create(resourceName, config);\n    return schema;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6cd2239be52b443d5348781402d9474cece93334":["08970e5b8411182a29412c177eff67ec1110095b"],"9cf81bc8c6e4078e236f0e38b3a2d0271854f207":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3e4fb176991e13ab85dfe62dceeb287dde115745":["cc018b79379c67835b40b1259cd3dc931df60944"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc018b79379c67835b40b1259cd3dc931df60944":["666d496dc705cfe54deff000163f3058de20a080","cd7538cbbd9c304bc5396980e9802cd3a5bcf8e4"],"30c8e5574b55d57947e989443dfde611646530ee":["666d496dc705cfe54deff000163f3058de20a080","cc018b79379c67835b40b1259cd3dc931df60944"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e4fb176991e13ab85dfe62dceeb287dde115745"],"666d496dc705cfe54deff000163f3058de20a080":["6cd2239be52b443d5348781402d9474cece93334"],"08970e5b8411182a29412c177eff67ec1110095b":["9cf81bc8c6e4078e236f0e38b3a2d0271854f207"],"cd7538cbbd9c304bc5396980e9802cd3a5bcf8e4":["666d496dc705cfe54deff000163f3058de20a080"]},"commit2Childs":{"6cd2239be52b443d5348781402d9474cece93334":["666d496dc705cfe54deff000163f3058de20a080"],"9cf81bc8c6e4078e236f0e38b3a2d0271854f207":["08970e5b8411182a29412c177eff67ec1110095b"],"3e4fb176991e13ab85dfe62dceeb287dde115745":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9cf81bc8c6e4078e236f0e38b3a2d0271854f207"],"cc018b79379c67835b40b1259cd3dc931df60944":["3e4fb176991e13ab85dfe62dceeb287dde115745","30c8e5574b55d57947e989443dfde611646530ee"],"30c8e5574b55d57947e989443dfde611646530ee":[],"08970e5b8411182a29412c177eff67ec1110095b":["6cd2239be52b443d5348781402d9474cece93334"],"666d496dc705cfe54deff000163f3058de20a080":["cc018b79379c67835b40b1259cd3dc931df60944","30c8e5574b55d57947e989443dfde611646530ee","cd7538cbbd9c304bc5396980e9802cd3a5bcf8e4"],"cd7538cbbd9c304bc5396980e9802cd3a5bcf8e4":["cc018b79379c67835b40b1259cd3dc931df60944"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}