{"path":"src/test/org/apache/solr/search/TestSearchPerf#createIndex2(int).mjava","commits":[{"id":"1de28dd3a9dd43a5d574a7f5469b28f789e68c56","date":1242823326,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/TestSearchPerf#createIndex2(int).mjava","pathOld":"/dev/null","sourceNew":"  void createIndex2(int nDocs) throws IOException {\n    SolrQueryRequest req = lrf.makeRequest();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    UpdateRequestProcessorChain processorChain = req.getCore().getUpdateProcessingChain(null);\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    for (int i=0; i<nDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\",Float.toString(i));\n      doc.addField(\"foomany_s\",t(r.nextInt(nDocs*10)));\n      AddUpdateCommand cmd = new AddUpdateCommand();\n      cmd.solrDoc = doc;\n      processor.processAdd(cmd);\n    }\n    processor.finish();\n    req.close();\n\n    assertU(commit());\n\n    req = lrf.makeRequest();\n    assertEquals(nDocs, req.getSearcher().maxDoc());\n    req.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52df4540d5cd0c887f5e56ef0f387d7489f5d44f","date":1243099614,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/TestSearchPerf#createIndex2(int,String...).mjava","pathOld":"src/test/org/apache/solr/search/TestSearchPerf#createIndex2(int).mjava","sourceNew":"  // Skip encoding for updating the index\n  void createIndex2(int nDocs, String... fields) throws IOException {\n    Set<String> fieldSet = new HashSet<String>(Arrays.asList(fields));\n\n    SolrQueryRequest req = lrf.makeRequest();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    UpdateRequestProcessorChain processorChain = req.getCore().getUpdateProcessingChain(null);\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    boolean foomany_s = fieldSet.contains(\"foomany_s\");\n    boolean foo1_s = fieldSet.contains(\"foo1_s\");\n    boolean foo2_s = fieldSet.contains(\"foo2_s\");\n    boolean foo4_s = fieldSet.contains(\"foo4_s\");\n    boolean foo8_s = fieldSet.contains(\"foo8_s\");\n    boolean t10_100_ws = fieldSet.contains(\"t10_100_ws\");\n\n    \n    for (int i=0; i<nDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\",Float.toString(i));\n      if (foomany_s) {\n        doc.addField(\"foomany_s\",t(r.nextInt(nDocs*10)));\n      }\n      if (foo1_s) {\n        doc.addField(\"foo1_s\",t(0));\n      }\n      if (foo2_s) {\n        doc.addField(\"foo2_s\",r.nextInt(2));\n      }\n      if (foo4_s) {\n        doc.addField(\"foo4_s\",r.nextInt(4));\n      }\n      if (foo8_s) {\n        doc.addField(\"foo8_s\",r.nextInt(8));\n      }\n      if (t10_100_ws) {\n        StringBuilder sb = new StringBuilder(9*100);\n        for (int j=0; j<100; j++) {\n          sb.append(' ');\n          sb.append(t(r.nextInt(10)));\n        }\n        doc.addField(\"t10_100_ws\", sb.toString());\n      }\n\n      AddUpdateCommand cmd = new AddUpdateCommand();\n      cmd.solrDoc = doc;\n      processor.processAdd(cmd);\n    }\n    processor.finish();\n    req.close();\n\n    assertU(commit());\n\n    req = lrf.makeRequest();\n    assertEquals(nDocs, req.getSearcher().maxDoc());\n    req.close();\n  }\n\n","sourceOld":"  void createIndex2(int nDocs) throws IOException {\n    SolrQueryRequest req = lrf.makeRequest();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    UpdateRequestProcessorChain processorChain = req.getCore().getUpdateProcessingChain(null);\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    for (int i=0; i<nDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\",Float.toString(i));\n      doc.addField(\"foomany_s\",t(r.nextInt(nDocs*10)));\n      AddUpdateCommand cmd = new AddUpdateCommand();\n      cmd.solrDoc = doc;\n      processor.processAdd(cmd);\n    }\n    processor.finish();\n    req.close();\n\n    assertU(commit());\n\n    req = lrf.makeRequest();\n    assertEquals(nDocs, req.getSearcher().maxDoc());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"52df4540d5cd0c887f5e56ef0f387d7489f5d44f":["1de28dd3a9dd43a5d574a7f5469b28f789e68c56"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1de28dd3a9dd43a5d574a7f5469b28f789e68c56":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"52df4540d5cd0c887f5e56ef0f387d7489f5d44f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["1de28dd3a9dd43a5d574a7f5469b28f789e68c56"],"1de28dd3a9dd43a5d574a7f5469b28f789e68c56":["52df4540d5cd0c887f5e56ef0f387d7489f5d44f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["52df4540d5cd0c887f5e56ef0f387d7489f5d44f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}