{"path":"contrib/clustering/src/main/java/org/apache/solr/handler/clustering/ClusteringComponent#process(ResponseBuilder).mjava","commits":[{"id":"3ee70799f6a87a250e98ce10a7bc3e28d41eac23","date":1242826192,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/clustering/src/main/java/org/apache/solr/handler/clustering/ClusteringComponent#process(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n    String name = params.get(ClusteringParams.ENGINE_NAME, ClusteringEngine.DEFAULT_ENGINE_NAME);\n    boolean useResults = params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false);\n    if (useResults == true) {\n      SearchClusteringEngine engine = searchClusteringEngines.get(name);\n      if (engine != null) {\n        DocListAndSet results = rb.getResults();\n        NamedList nl = engine.cluster(rb.getQuery(), results.docList, params);\n        rb.rsp.add(\"clusters\", nl);\n      } else {\n        log.warn(\"No engine for: \" + name);\n      }\n    }\n    boolean useCollection = params.getBool(ClusteringParams.USE_COLLECTION, false);\n    if (useCollection == true) {\n      DocumentClusteringEngine engine = documentClusteringEngines.get(name);\n      if (engine != null) {\n        boolean useDocSet = params.getBool(ClusteringParams.USE_DOC_SET, false);\n        NamedList nl = null;\n\n        //TODO: This likely needs to be made into a background task that runs in an executor\n        if (useDocSet == true) {\n          nl = engine.cluster(rb.getResults().docSet, params);\n        } else {\n          nl = engine.cluster(params);\n        }\n        rb.rsp.add(\"clusters\", nl);\n      } else {\n        log.warn(\"No engine for \" + name);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a2a4e39332de25d2866f373dbf3991a7125b31d","date":1246542679,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/clustering/src/main/java/org/apache/solr/handler/clustering/ClusteringComponent#process(ResponseBuilder).mjava","pathOld":"contrib/clustering/src/main/java/org/apache/solr/handler/clustering/ClusteringComponent#process(ResponseBuilder).mjava","sourceNew":"  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n    String name = params.get(ClusteringParams.ENGINE_NAME, ClusteringEngine.DEFAULT_ENGINE_NAME);\n    boolean useResults = params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false);\n    if (useResults == true) {\n      SearchClusteringEngine engine = searchClusteringEngines.get(name);\n      if (engine != null) {\n        DocListAndSet results = rb.getResults();\n        Object clusters = engine.cluster(rb.getQuery(), results.docList, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        log.warn(\"No engine for: \" + name);\n      }\n    }\n    boolean useCollection = params.getBool(ClusteringParams.USE_COLLECTION, false);\n    if (useCollection == true) {\n      DocumentClusteringEngine engine = documentClusteringEngines.get(name);\n      if (engine != null) {\n        boolean useDocSet = params.getBool(ClusteringParams.USE_DOC_SET, false);\n        NamedList nl = null;\n\n        //TODO: This likely needs to be made into a background task that runs in an executor\n        if (useDocSet == true) {\n          nl = engine.cluster(rb.getResults().docSet, params);\n        } else {\n          nl = engine.cluster(params);\n        }\n        rb.rsp.add(\"clusters\", nl);\n      } else {\n        log.warn(\"No engine for \" + name);\n      }\n    }\n  }\n\n","sourceOld":"  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n    String name = params.get(ClusteringParams.ENGINE_NAME, ClusteringEngine.DEFAULT_ENGINE_NAME);\n    boolean useResults = params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false);\n    if (useResults == true) {\n      SearchClusteringEngine engine = searchClusteringEngines.get(name);\n      if (engine != null) {\n        DocListAndSet results = rb.getResults();\n        NamedList nl = engine.cluster(rb.getQuery(), results.docList, params);\n        rb.rsp.add(\"clusters\", nl);\n      } else {\n        log.warn(\"No engine for: \" + name);\n      }\n    }\n    boolean useCollection = params.getBool(ClusteringParams.USE_COLLECTION, false);\n    if (useCollection == true) {\n      DocumentClusteringEngine engine = documentClusteringEngines.get(name);\n      if (engine != null) {\n        boolean useDocSet = params.getBool(ClusteringParams.USE_DOC_SET, false);\n        NamedList nl = null;\n\n        //TODO: This likely needs to be made into a background task that runs in an executor\n        if (useDocSet == true) {\n          nl = engine.cluster(rb.getResults().docSet, params);\n        } else {\n          nl = engine.cluster(params);\n        }\n        rb.rsp.add(\"clusters\", nl);\n      } else {\n        log.warn(\"No engine for \" + name);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/ClusteringComponent#process(ResponseBuilder).mjava","pathOld":"contrib/clustering/src/main/java/org/apache/solr/handler/clustering/ClusteringComponent#process(ResponseBuilder).mjava","sourceNew":"  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n    String name = params.get(ClusteringParams.ENGINE_NAME, ClusteringEngine.DEFAULT_ENGINE_NAME);\n    boolean useResults = params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false);\n    if (useResults == true) {\n      SearchClusteringEngine engine = searchClusteringEngines.get(name);\n      if (engine != null) {\n        DocListAndSet results = rb.getResults();\n        Object clusters = engine.cluster(rb.getQuery(), results.docList, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        log.warn(\"No engine for: \" + name);\n      }\n    }\n    boolean useCollection = params.getBool(ClusteringParams.USE_COLLECTION, false);\n    if (useCollection == true) {\n      DocumentClusteringEngine engine = documentClusteringEngines.get(name);\n      if (engine != null) {\n        boolean useDocSet = params.getBool(ClusteringParams.USE_DOC_SET, false);\n        NamedList nl = null;\n\n        //TODO: This likely needs to be made into a background task that runs in an executor\n        if (useDocSet == true) {\n          nl = engine.cluster(rb.getResults().docSet, params);\n        } else {\n          nl = engine.cluster(params);\n        }\n        rb.rsp.add(\"clusters\", nl);\n      } else {\n        log.warn(\"No engine for \" + name);\n      }\n    }\n  }\n\n","sourceOld":"  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n    String name = params.get(ClusteringParams.ENGINE_NAME, ClusteringEngine.DEFAULT_ENGINE_NAME);\n    boolean useResults = params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false);\n    if (useResults == true) {\n      SearchClusteringEngine engine = searchClusteringEngines.get(name);\n      if (engine != null) {\n        DocListAndSet results = rb.getResults();\n        Object clusters = engine.cluster(rb.getQuery(), results.docList, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        log.warn(\"No engine for: \" + name);\n      }\n    }\n    boolean useCollection = params.getBool(ClusteringParams.USE_COLLECTION, false);\n    if (useCollection == true) {\n      DocumentClusteringEngine engine = documentClusteringEngines.get(name);\n      if (engine != null) {\n        boolean useDocSet = params.getBool(ClusteringParams.USE_DOC_SET, false);\n        NamedList nl = null;\n\n        //TODO: This likely needs to be made into a background task that runs in an executor\n        if (useDocSet == true) {\n          nl = engine.cluster(rb.getResults().docSet, params);\n        } else {\n          nl = engine.cluster(params);\n        }\n        rb.rsp.add(\"clusters\", nl);\n      } else {\n        log.warn(\"No engine for \" + name);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a2a4e39332de25d2866f373dbf3991a7125b31d":["3ee70799f6a87a250e98ce10a7bc3e28d41eac23"],"3ee70799f6a87a250e98ce10a7bc3e28d41eac23":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["0a2a4e39332de25d2866f373dbf3991a7125b31d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0a2a4e39332de25d2866f373dbf3991a7125b31d":["ad94625fb8d088209f46650c8097196fec67f00c"],"3ee70799f6a87a250e98ce10a7bc3e28d41eac23":["0a2a4e39332de25d2866f373dbf3991a7125b31d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["3ee70799f6a87a250e98ce10a7bc3e28d41eac23"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}