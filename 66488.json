{"path":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#toString(String).mjava","commits":[{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#toString(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DimensionalRangeQuery#toString(String).mjava","sourceNew":"  @Override\n  public String toString(String field) {\n    final StringBuilder sb = new StringBuilder();\n    sb.append(getClass().getSimpleName());\n    sb.append(':');\n    if (this.field.equals(field) == false) {\n      sb.append(\"field=\");\n      sb.append(this.field);\n      sb.append(':');\n    }\n\n    return sb.append('[')\n      .append(Arrays.toString(lowerPoint))\n      .append(\" TO \")\n      .append(Arrays.toString(upperPoint))\n      .append(']')\n      .toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString(String field) {\n    final StringBuilder sb = new StringBuilder();\n    sb.append(getClass().getSimpleName());\n    sb.append(':');\n    if (this.field.equals(field) == false) {\n      sb.append(\"field=\");\n      sb.append(this.field);\n      sb.append(':');\n    }\n\n    return sb.append('[')\n      .append(Arrays.toString(lowerPoint))\n      .append(\" TO \")\n      .append(Arrays.toString(upperPoint))\n      .append(']')\n      .toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86cab68ee900a31d093b114182b488ea8e85c59d","date":1456171815,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#toString(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#toString(String).mjava","sourceNew":"  @Override\n  public String toString(String field) {\n    final StringBuilder sb = new StringBuilder();\n    if (this.field.equals(field) == false) {\n      sb.append(this.field);\n      sb.append(':');\n    }\n\n    // print ourselves as \"range per dimension\"\n    for (int i = 0; i < numDims; i++) {\n      if (i > 0) {\n        sb.append(',');\n      }\n\n      if (lowerInclusive[i]) {\n        sb.append('[');\n      } else {\n        sb.append('{');\n      }\n\n      if (lowerPoint[i] == null) {\n        sb.append('*');\n      } else {\n        sb.append(toString(lowerPoint[i]));\n      }\n\n      sb.append(\" TO \");\n\n      if (upperPoint[i] == null) {\n        sb.append('*');\n      } else {\n        sb.append(toString(upperPoint[i]));\n      }\n\n      if (upperInclusive[i]) {\n        sb.append(']');\n      } else {\n        sb.append('}');\n      }\n    }\n\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString(String field) {\n    final StringBuilder sb = new StringBuilder();\n    sb.append(getClass().getSimpleName());\n    sb.append(':');\n    if (this.field.equals(field) == false) {\n      sb.append(\"field=\");\n      sb.append(this.field);\n      sb.append(':');\n    }\n\n    return sb.append('[')\n      .append(Arrays.toString(lowerPoint))\n      .append(\" TO \")\n      .append(Arrays.toString(upperPoint))\n      .append(']')\n      .toString();\n  }\n\n","bugFix":null,"bugIntro":["609ba4ce51a7095e9815d4fb2666ec85714f8f54","1800b996d8677670482a071dcb7a48b08c423ace"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"419a8f52c6635419beb951255cacbbb281044c57","date":1456189353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#toString(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#toString(String).mjava","sourceNew":"  @Override\n  public String toString(String field) {\n    final StringBuilder sb = new StringBuilder();\n    if (this.field.equals(field) == false) {\n      sb.append(this.field);\n      sb.append(':');\n    }\n\n    // print ourselves as \"range per dimension\"\n    for (int i = 0; i < numDims; i++) {\n      if (i > 0) {\n        sb.append(',');\n      }\n\n      if (lowerInclusive[i]) {\n        sb.append('[');\n      } else {\n        sb.append('{');\n      }\n\n      if (lowerPoint[i] == null) {\n        sb.append('*');\n      } else {\n        sb.append(toString(lowerPoint[i]));\n      }\n\n      sb.append(\" TO \");\n\n      if (upperPoint[i] == null) {\n        sb.append('*');\n      } else {\n        sb.append(toString(upperPoint[i]));\n      }\n\n      if (upperInclusive[i]) {\n        sb.append(']');\n      } else {\n        sb.append('}');\n      }\n    }\n\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString(String field) {\n    final StringBuilder sb = new StringBuilder();\n    sb.append(getClass().getSimpleName());\n    sb.append(':');\n    if (this.field.equals(field) == false) {\n      sb.append(\"field=\");\n      sb.append(this.field);\n      sb.append(':');\n    }\n\n    return sb.append('[')\n      .append(Arrays.toString(lowerPoint))\n      .append(\" TO \")\n      .append(Arrays.toString(upperPoint))\n      .append(']')\n      .toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"609ba4ce51a7095e9815d4fb2666ec85714f8f54","date":1456320705,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#toString(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#toString(String).mjava","sourceNew":"  @Override\n  public String toString(String field) {\n    final StringBuilder sb = new StringBuilder();\n    if (this.field.equals(field) == false) {\n      sb.append(this.field);\n      sb.append(':');\n    }\n\n    // print ourselves as \"range per dimension\"\n    for (int i = 0; i < numDims; i++) {\n      if (i > 0) {\n        sb.append(',');\n      }\n\n      if (lowerInclusive[i]) {\n        sb.append('[');\n      } else {\n        sb.append('{');\n      }\n\n      if (lowerPoint[i] == null) {\n        sb.append('*');\n      } else {\n        sb.append(toString(i, lowerPoint[i]));\n      }\n\n      sb.append(\" TO \");\n\n      if (upperPoint[i] == null) {\n        sb.append('*');\n      } else {\n        sb.append(toString(i, upperPoint[i]));\n      }\n\n      if (upperInclusive[i]) {\n        sb.append(']');\n      } else {\n        sb.append('}');\n      }\n    }\n\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString(String field) {\n    final StringBuilder sb = new StringBuilder();\n    if (this.field.equals(field) == false) {\n      sb.append(this.field);\n      sb.append(':');\n    }\n\n    // print ourselves as \"range per dimension\"\n    for (int i = 0; i < numDims; i++) {\n      if (i > 0) {\n        sb.append(',');\n      }\n\n      if (lowerInclusive[i]) {\n        sb.append('[');\n      } else {\n        sb.append('{');\n      }\n\n      if (lowerPoint[i] == null) {\n        sb.append('*');\n      } else {\n        sb.append(toString(lowerPoint[i]));\n      }\n\n      sb.append(\" TO \");\n\n      if (upperPoint[i] == null) {\n        sb.append('*');\n      } else {\n        sb.append(toString(upperPoint[i]));\n      }\n\n      if (upperInclusive[i]) {\n        sb.append(']');\n      } else {\n        sb.append('}');\n      }\n    }\n\n    return sb.toString();\n  }\n\n","bugFix":["86cab68ee900a31d093b114182b488ea8e85c59d"],"bugIntro":["1800b996d8677670482a071dcb7a48b08c423ace"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6","date":1456321728,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#toString(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#toString(String).mjava","sourceNew":"  @Override\n  public String toString(String field) {\n    final StringBuilder sb = new StringBuilder();\n    if (this.field.equals(field) == false) {\n      sb.append(this.field);\n      sb.append(':');\n    }\n\n    // print ourselves as \"range per dimension\"\n    for (int i = 0; i < numDims; i++) {\n      if (i > 0) {\n        sb.append(',');\n      }\n\n      if (lowerInclusive[i]) {\n        sb.append('[');\n      } else {\n        sb.append('{');\n      }\n\n      if (lowerPoint[i] == null) {\n        sb.append('*');\n      } else {\n        sb.append(toString(i, lowerPoint[i]));\n      }\n\n      sb.append(\" TO \");\n\n      if (upperPoint[i] == null) {\n        sb.append('*');\n      } else {\n        sb.append(toString(i, upperPoint[i]));\n      }\n\n      if (upperInclusive[i]) {\n        sb.append(']');\n      } else {\n        sb.append('}');\n      }\n    }\n\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString(String field) {\n    final StringBuilder sb = new StringBuilder();\n    if (this.field.equals(field) == false) {\n      sb.append(this.field);\n      sb.append(':');\n    }\n\n    // print ourselves as \"range per dimension\"\n    for (int i = 0; i < numDims; i++) {\n      if (i > 0) {\n        sb.append(',');\n      }\n\n      if (lowerInclusive[i]) {\n        sb.append('[');\n      } else {\n        sb.append('{');\n      }\n\n      if (lowerPoint[i] == null) {\n        sb.append('*');\n      } else {\n        sb.append(toString(lowerPoint[i]));\n      }\n\n      sb.append(\" TO \");\n\n      if (upperPoint[i] == null) {\n        sb.append('*');\n      } else {\n        sb.append(toString(upperPoint[i]));\n      }\n\n      if (upperInclusive[i]) {\n        sb.append(']');\n      } else {\n        sb.append('}');\n      }\n    }\n\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1800b996d8677670482a071dcb7a48b08c423ace","date":1456955558,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#toString(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#toString(String).mjava","sourceNew":"  @Override\n  public String toString(String field) {\n    final StringBuilder sb = new StringBuilder();\n    if (this.field.equals(field) == false) {\n      sb.append(this.field);\n      sb.append(':');\n    }\n\n    // print ourselves as \"range per dimension\"\n    for (int i = 0; i < numDims; i++) {\n      if (i > 0) {\n        sb.append(',');\n      }\n\n      sb.append('[');\n      sb.append(toString(i, lowerPoint[i]));\n      sb.append(\" TO \");\n      sb.append(toString(i, upperPoint[i]));\n      sb.append(']');\n    }\n\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString(String field) {\n    final StringBuilder sb = new StringBuilder();\n    if (this.field.equals(field) == false) {\n      sb.append(this.field);\n      sb.append(':');\n    }\n\n    // print ourselves as \"range per dimension\"\n    for (int i = 0; i < numDims; i++) {\n      if (i > 0) {\n        sb.append(',');\n      }\n\n      if (lowerInclusive[i]) {\n        sb.append('[');\n      } else {\n        sb.append('{');\n      }\n\n      if (lowerPoint[i] == null) {\n        sb.append('*');\n      } else {\n        sb.append(toString(i, lowerPoint[i]));\n      }\n\n      sb.append(\" TO \");\n\n      if (upperPoint[i] == null) {\n        sb.append('*');\n      } else {\n        sb.append(toString(i, upperPoint[i]));\n      }\n\n      if (upperInclusive[i]) {\n        sb.append(']');\n      } else {\n        sb.append('}');\n      }\n    }\n\n    return sb.toString();\n  }\n\n","bugFix":["609ba4ce51a7095e9815d4fb2666ec85714f8f54","86cab68ee900a31d093b114182b488ea8e85c59d"],"bugIntro":["606ea169579957651185909e7264798e99e714f9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c422e924212367b334b4938f1fd3e44438e88c40","date":1456962933,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#toString(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#toString(String).mjava","sourceNew":"  @Override\n  public String toString(String field) {\n    final StringBuilder sb = new StringBuilder();\n    if (this.field.equals(field) == false) {\n      sb.append(this.field);\n      sb.append(':');\n    }\n\n    // print ourselves as \"range per dimension\"\n    for (int i = 0; i < numDims; i++) {\n      if (i > 0) {\n        sb.append(',');\n      }\n\n      sb.append('[');\n      sb.append(toString(i, lowerPoint[i]));\n      sb.append(\" TO \");\n      sb.append(toString(i, upperPoint[i]));\n      sb.append(']');\n    }\n\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString(String field) {\n    final StringBuilder sb = new StringBuilder();\n    if (this.field.equals(field) == false) {\n      sb.append(this.field);\n      sb.append(':');\n    }\n\n    // print ourselves as \"range per dimension\"\n    for (int i = 0; i < numDims; i++) {\n      if (i > 0) {\n        sb.append(',');\n      }\n\n      if (lowerInclusive[i]) {\n        sb.append('[');\n      } else {\n        sb.append('{');\n      }\n\n      if (lowerPoint[i] == null) {\n        sb.append('*');\n      } else {\n        sb.append(toString(i, lowerPoint[i]));\n      }\n\n      sb.append(\" TO \");\n\n      if (upperPoint[i] == null) {\n        sb.append('*');\n      } else {\n        sb.append(toString(i, upperPoint[i]));\n      }\n\n      if (upperInclusive[i]) {\n        sb.append(']');\n      } else {\n        sb.append('}');\n      }\n    }\n\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#toString(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#toString(String).mjava","sourceNew":"  @Override\n  public String toString(String field) {\n    final StringBuilder sb = new StringBuilder();\n    if (this.field.equals(field) == false) {\n      sb.append(this.field);\n      sb.append(':');\n    }\n\n    // print ourselves as \"range per dimension\"\n    for (int i = 0; i < numDims; i++) {\n      if (i > 0) {\n        sb.append(',');\n      }\n\n      sb.append('[');\n      sb.append(toString(i, lowerPoint[i]));\n      sb.append(\" TO \");\n      sb.append(toString(i, upperPoint[i]));\n      sb.append(']');\n    }\n\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString(String field) {\n    final StringBuilder sb = new StringBuilder();\n    if (this.field.equals(field) == false) {\n      sb.append(this.field);\n      sb.append(':');\n    }\n\n    // print ourselves as \"range per dimension\"\n    for (int i = 0; i < numDims; i++) {\n      if (i > 0) {\n        sb.append(',');\n      }\n\n      if (lowerInclusive[i]) {\n        sb.append('[');\n      } else {\n        sb.append('{');\n      }\n\n      if (lowerPoint[i] == null) {\n        sb.append('*');\n      } else {\n        sb.append(toString(i, lowerPoint[i]));\n      }\n\n      sb.append(\" TO \");\n\n      if (upperPoint[i] == null) {\n        sb.append('*');\n      } else {\n        sb.append(toString(i, upperPoint[i]));\n      }\n\n      if (upperInclusive[i]) {\n        sb.append(']');\n      } else {\n        sb.append('}');\n      }\n    }\n\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5839bca64b33c24668e37476ee168d00dc0bb96d","date":1457536035,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#toString(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#toString(String).mjava","sourceNew":"  @Override\n  public final String toString(String field) {\n    final StringBuilder sb = new StringBuilder();\n    if (this.field.equals(field) == false) {\n      sb.append(this.field);\n      sb.append(':');\n    }\n\n    // print ourselves as \"range per dimension\"\n    for (int i = 0; i < numDims; i++) {\n      if (i > 0) {\n        sb.append(',');\n      }\n\n      sb.append('[');\n      sb.append(toString(i, lowerPoint[i]));\n      sb.append(\" TO \");\n      sb.append(toString(i, upperPoint[i]));\n      sb.append(']');\n    }\n\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString(String field) {\n    final StringBuilder sb = new StringBuilder();\n    if (this.field.equals(field) == false) {\n      sb.append(this.field);\n      sb.append(':');\n    }\n\n    // print ourselves as \"range per dimension\"\n    for (int i = 0; i < numDims; i++) {\n      if (i > 0) {\n        sb.append(',');\n      }\n\n      sb.append('[');\n      sb.append(toString(i, lowerPoint[i]));\n      sb.append(\" TO \");\n      sb.append(toString(i, upperPoint[i]));\n      sb.append(']');\n    }\n\n    return sb.toString();\n  }\n\n","bugFix":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"606ea169579957651185909e7264798e99e714f9","date":1458504317,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#toString(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#toString(String).mjava","sourceNew":"  @Override\n  public final String toString(String field) {\n    final StringBuilder sb = new StringBuilder();\n    if (this.field.equals(field) == false) {\n      sb.append(this.field);\n      sb.append(':');\n    }\n\n    // print ourselves as \"range per dimension\"\n    for (int i = 0; i < numDims; i++) {\n      if (i > 0) {\n        sb.append(',');\n      }\n      \n      int startOffset = bytesPerDim * i;\n\n      sb.append('[');\n      sb.append(toString(i, Arrays.copyOfRange(lowerPoint, startOffset, startOffset + bytesPerDim)));\n      sb.append(\" TO \");\n      sb.append(toString(i, Arrays.copyOfRange(upperPoint, startOffset, startOffset + bytesPerDim)));\n      sb.append(']');\n    }\n\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public final String toString(String field) {\n    final StringBuilder sb = new StringBuilder();\n    if (this.field.equals(field) == false) {\n      sb.append(this.field);\n      sb.append(':');\n    }\n\n    // print ourselves as \"range per dimension\"\n    for (int i = 0; i < numDims; i++) {\n      if (i > 0) {\n        sb.append(',');\n      }\n\n      sb.append('[');\n      sb.append(toString(i, lowerPoint[i]));\n      sb.append(\" TO \");\n      sb.append(toString(i, upperPoint[i]));\n      sb.append(']');\n    }\n\n    return sb.toString();\n  }\n\n","bugFix":["1800b996d8677670482a071dcb7a48b08c423ace"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9798d0818e7a880546802b509792d3f3d57babd2","date":1528358901,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#toString(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#toString(String).mjava","sourceNew":"  @Override\n  public final String toString(String field) {\n    final StringBuilder sb = new StringBuilder();\n    if (this.field.equals(field) == false) {\n      sb.append(this.field);\n      sb.append(':');\n    }\n\n    // print ourselves as \"range per dimension\"\n    for (int i = 0; i < numDims; i++) {\n      if (i > 0) {\n        sb.append(',');\n      }\n      \n      int startOffset = bytesPerDim * i;\n\n      sb.append('[');\n      sb.append(toString(i, ArrayUtil.copyOfSubArray(lowerPoint, startOffset, startOffset + bytesPerDim)));\n      sb.append(\" TO \");\n      sb.append(toString(i, ArrayUtil.copyOfSubArray(upperPoint, startOffset, startOffset + bytesPerDim)));\n      sb.append(']');\n    }\n\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public final String toString(String field) {\n    final StringBuilder sb = new StringBuilder();\n    if (this.field.equals(field) == false) {\n      sb.append(this.field);\n      sb.append(':');\n    }\n\n    // print ourselves as \"range per dimension\"\n    for (int i = 0; i < numDims; i++) {\n      if (i > 0) {\n        sb.append(',');\n      }\n      \n      int startOffset = bytesPerDim * i;\n\n      sb.append('[');\n      sb.append(toString(i, Arrays.copyOfRange(lowerPoint, startOffset, startOffset + bytesPerDim)));\n      sb.append(\" TO \");\n      sb.append(toString(i, Arrays.copyOfRange(upperPoint, startOffset, startOffset + bytesPerDim)));\n      sb.append(']');\n    }\n\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#toString(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#toString(String).mjava","sourceNew":"  @Override\n  public final String toString(String field) {\n    final StringBuilder sb = new StringBuilder();\n    if (this.field.equals(field) == false) {\n      sb.append(this.field);\n      sb.append(':');\n    }\n\n    // print ourselves as \"range per dimension\"\n    for (int i = 0; i < numDims; i++) {\n      if (i > 0) {\n        sb.append(',');\n      }\n      \n      int startOffset = bytesPerDim * i;\n\n      sb.append('[');\n      sb.append(toString(i, ArrayUtil.copyOfSubArray(lowerPoint, startOffset, startOffset + bytesPerDim)));\n      sb.append(\" TO \");\n      sb.append(toString(i, ArrayUtil.copyOfSubArray(upperPoint, startOffset, startOffset + bytesPerDim)));\n      sb.append(']');\n    }\n\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public final String toString(String field) {\n    final StringBuilder sb = new StringBuilder();\n    if (this.field.equals(field) == false) {\n      sb.append(this.field);\n      sb.append(':');\n    }\n\n    // print ourselves as \"range per dimension\"\n    for (int i = 0; i < numDims; i++) {\n      if (i > 0) {\n        sb.append(',');\n      }\n      \n      int startOffset = bytesPerDim * i;\n\n      sb.append('[');\n      sb.append(toString(i, Arrays.copyOfRange(lowerPoint, startOffset, startOffset + bytesPerDim)));\n      sb.append(\" TO \");\n      sb.append(toString(i, Arrays.copyOfRange(upperPoint, startOffset, startOffset + bytesPerDim)));\n      sb.append(']');\n    }\n\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#toString(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#toString(String).mjava","sourceNew":"  @Override\n  public final String toString(String field) {\n    final StringBuilder sb = new StringBuilder();\n    if (this.field.equals(field) == false) {\n      sb.append(this.field);\n      sb.append(':');\n    }\n\n    // print ourselves as \"range per dimension\"\n    for (int i = 0; i < numDims; i++) {\n      if (i > 0) {\n        sb.append(',');\n      }\n      \n      int startOffset = bytesPerDim * i;\n\n      sb.append('[');\n      sb.append(toString(i, ArrayUtil.copyOfSubArray(lowerPoint, startOffset, startOffset + bytesPerDim)));\n      sb.append(\" TO \");\n      sb.append(toString(i, ArrayUtil.copyOfSubArray(upperPoint, startOffset, startOffset + bytesPerDim)));\n      sb.append(']');\n    }\n\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public final String toString(String field) {\n    final StringBuilder sb = new StringBuilder();\n    if (this.field.equals(field) == false) {\n      sb.append(this.field);\n      sb.append(':');\n    }\n\n    // print ourselves as \"range per dimension\"\n    for (int i = 0; i < numDims; i++) {\n      if (i > 0) {\n        sb.append(',');\n      }\n      \n      int startOffset = bytesPerDim * i;\n\n      sb.append('[');\n      sb.append(toString(i, Arrays.copyOfRange(lowerPoint, startOffset, startOffset + bytesPerDim)));\n      sb.append(\" TO \");\n      sb.append(toString(i, Arrays.copyOfRange(upperPoint, startOffset, startOffset + bytesPerDim)));\n      sb.append(']');\n    }\n\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5839bca64b33c24668e37476ee168d00dc0bb96d":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"419a8f52c6635419beb951255cacbbb281044c57":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","86cab68ee900a31d093b114182b488ea8e85c59d"],"606ea169579957651185909e7264798e99e714f9":["5839bca64b33c24668e37476ee168d00dc0bb96d"],"c422e924212367b334b4938f1fd3e44438e88c40":["609ba4ce51a7095e9815d4fb2666ec85714f8f54","1800b996d8677670482a071dcb7a48b08c423ace"],"1800b996d8677670482a071dcb7a48b08c423ace":["609ba4ce51a7095e9815d4fb2666ec85714f8f54"],"609ba4ce51a7095e9815d4fb2666ec85714f8f54":["419a8f52c6635419beb951255cacbbb281044c57"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["606ea169579957651185909e7264798e99e714f9","9798d0818e7a880546802b509792d3f3d57babd2"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["609ba4ce51a7095e9815d4fb2666ec85714f8f54","c422e924212367b334b4938f1fd3e44438e88c40"],"9798d0818e7a880546802b509792d3f3d57babd2":["606ea169579957651185909e7264798e99e714f9"],"86cab68ee900a31d093b114182b488ea8e85c59d":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6":["419a8f52c6635419beb951255cacbbb281044c57","609ba4ce51a7095e9815d4fb2666ec85714f8f54"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9798d0818e7a880546802b509792d3f3d57babd2"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["606ea169579957651185909e7264798e99e714f9","9798d0818e7a880546802b509792d3f3d57babd2"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["419a8f52c6635419beb951255cacbbb281044c57","86cab68ee900a31d093b114182b488ea8e85c59d"],"5839bca64b33c24668e37476ee168d00dc0bb96d":["606ea169579957651185909e7264798e99e714f9"],"419a8f52c6635419beb951255cacbbb281044c57":["609ba4ce51a7095e9815d4fb2666ec85714f8f54","1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6"],"606ea169579957651185909e7264798e99e714f9":["b70042a8a492f7054d480ccdd2be9796510d4327","9798d0818e7a880546802b509792d3f3d57babd2","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"c422e924212367b334b4938f1fd3e44438e88c40":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"1800b996d8677670482a071dcb7a48b08c423ace":["c422e924212367b334b4938f1fd3e44438e88c40"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"609ba4ce51a7095e9815d4fb2666ec85714f8f54":["c422e924212367b334b4938f1fd3e44438e88c40","1800b996d8677670482a071dcb7a48b08c423ace","cf1a614098b46c9c22afebd7b898ae4d1d2fc273","1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["5839bca64b33c24668e37476ee168d00dc0bb96d"],"86cab68ee900a31d093b114182b488ea8e85c59d":["419a8f52c6635419beb951255cacbbb281044c57"],"9798d0818e7a880546802b509792d3f3d57babd2":["b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}