{"path":"solr/test-framework/src/java/org/apache/solr/JSONTestUtil#match(String,String,String,double).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/JSONTestUtil#match(String,String,String,double).mjava","pathOld":"solr/src/test-framework/org/apache/solr/JSONTestUtil#match(String,String,String,double).mjava","sourceNew":"  /**\n   * @param path JSON path expression\n   * @param input JSON Structure to parse and test against\n   * @param expected expected value of path\n   * @param delta tollerance allowed in comparing float/double values\n   */\n  public static String match(String path, String input, String expected, double delta) throws Exception {\n    Object inputObj = ObjectBuilder.fromJSON(input);\n    Object expectObj = ObjectBuilder.fromJSON(expected);\n    return matchObj(path, inputObj, expectObj);\n  }\n\n","sourceOld":"  /**\n   * @param path JSON path expression\n   * @param input JSON Structure to parse and test against\n   * @param expected expected value of path\n   * @param delta tollerance allowed in comparing float/double values\n   */\n  public static String match(String path, String input, String expected, double delta) throws Exception {\n    Object inputObj = ObjectBuilder.fromJSON(input);\n    Object expectObj = ObjectBuilder.fromJSON(expected);\n    return matchObj(path, inputObj, expectObj);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/JSONTestUtil#match(String,String,String,double).mjava","pathOld":"solr/src/test-framework/org/apache/solr/JSONTestUtil#match(String,String,String,double).mjava","sourceNew":"  /**\n   * @param path JSON path expression\n   * @param input JSON Structure to parse and test against\n   * @param expected expected value of path\n   * @param delta tollerance allowed in comparing float/double values\n   */\n  public static String match(String path, String input, String expected, double delta) throws Exception {\n    Object inputObj = ObjectBuilder.fromJSON(input);\n    Object expectObj = ObjectBuilder.fromJSON(expected);\n    return matchObj(path, inputObj, expectObj);\n  }\n\n","sourceOld":"  /**\n   * @param path JSON path expression\n   * @param input JSON Structure to parse and test against\n   * @param expected expected value of path\n   * @param delta tollerance allowed in comparing float/double values\n   */\n  public static String match(String path, String input, String expected, double delta) throws Exception {\n    Object inputObj = ObjectBuilder.fromJSON(input);\n    Object expectObj = ObjectBuilder.fromJSON(expected);\n    return matchObj(path, inputObj, expectObj);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/JSONTestUtil#match(String,String,String,double).mjava","pathOld":"solr/src/test-framework/org/apache/solr/JSONTestUtil#match(String,String,String,double).mjava","sourceNew":"  /**\n   * @param path JSON path expression\n   * @param input JSON Structure to parse and test against\n   * @param expected expected value of path\n   * @param delta tollerance allowed in comparing float/double values\n   */\n  public static String match(String path, String input, String expected, double delta) throws Exception {\n    Object inputObj = ObjectBuilder.fromJSON(input);\n    Object expectObj = ObjectBuilder.fromJSON(expected);\n    return matchObj(path, inputObj, expectObj);\n  }\n\n","sourceOld":"  /**\n   * @param path JSON path expression\n   * @param input JSON Structure to parse and test against\n   * @param expected expected value of path\n   * @param delta tollerance allowed in comparing float/double values\n   */\n  public static String match(String path, String input, String expected, double delta) throws Exception {\n    Object inputObj = ObjectBuilder.fromJSON(input);\n    Object expectObj = ObjectBuilder.fromJSON(expected);\n    return matchObj(path, inputObj, expectObj);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b572b024e0b33a1176216afd84f90a925baf838","date":1326227649,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/JSONTestUtil#match(String,String,String,double).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/JSONTestUtil#match(String,String,String,double).mjava","sourceNew":"  /**\n   * @param path JSON path expression\n   * @param input JSON Structure to parse and test against\n   * @param expected expected value of path\n   * @param delta tollerance allowed in comparing float/double values\n   */\n  public static String match(String path, String input, String expected, double delta) throws Exception {\n    Object inputObj = ObjectBuilder.fromJSON(input);\n    Object expectObj = ObjectBuilder.fromJSON(expected);\n    return matchObj(path, inputObj, expectObj, delta);\n  }\n\n","sourceOld":"  /**\n   * @param path JSON path expression\n   * @param input JSON Structure to parse and test against\n   * @param expected expected value of path\n   * @param delta tollerance allowed in comparing float/double values\n   */\n  public static String match(String path, String input, String expected, double delta) throws Exception {\n    Object inputObj = ObjectBuilder.fromJSON(input);\n    Object expectObj = ObjectBuilder.fromJSON(expected);\n    return matchObj(path, inputObj, expectObj);\n  }\n\n","bugFix":["7395bdaa5646a7eb2087b1043b713b4bf3294a5c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1efce6dea0cfd25d21147c588865c2eaf639d02","date":1426252676,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/JSONTestUtil#match(String,String,String,double).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/JSONTestUtil#match(String,String,String,double).mjava","sourceNew":"  /**\n   * @param path JSON path expression\n   * @param input JSON Structure to parse and test against\n   * @param expected expected value of path\n   * @param delta tollerance allowed in comparing float/double values\n   */\n  public static String match(String path, String input, String expected, double delta) throws Exception {\n    Object inputObj = failRepeatedKeys ? new NoDupsObjectBuilder(new JSONParser(input)).getVal() : ObjectBuilder.fromJSON(input);\n    Object expectObj = failRepeatedKeys ? new NoDupsObjectBuilder(new JSONParser(expected)).getVal() : ObjectBuilder.fromJSON(expected);\n    return matchObj(path, inputObj, expectObj, delta);\n  }\n\n","sourceOld":"  /**\n   * @param path JSON path expression\n   * @param input JSON Structure to parse and test against\n   * @param expected expected value of path\n   * @param delta tollerance allowed in comparing float/double values\n   */\n  public static String match(String path, String input, String expected, double delta) throws Exception {\n    Object inputObj = ObjectBuilder.fromJSON(input);\n    Object expectObj = ObjectBuilder.fromJSON(expected);\n    return matchObj(path, inputObj, expectObj, delta);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/JSONTestUtil#match(String,String,String,double).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/JSONTestUtil#match(String,String,String,double).mjava","sourceNew":"  /**\n   * @param path JSON path expression\n   * @param input JSON Structure to parse and test against\n   * @param expected expected value of path\n   * @param delta tollerance allowed in comparing float/double values\n   */\n  public static String match(String path, String input, String expected, double delta) throws Exception {\n    Object inputObj = failRepeatedKeys ? new NoDupsObjectBuilder(new JSONParser(input)).getVal() : ObjectBuilder.fromJSON(input);\n    Object expectObj = failRepeatedKeys ? new NoDupsObjectBuilder(new JSONParser(expected)).getVal() : ObjectBuilder.fromJSON(expected);\n    return matchObj(path, inputObj, expectObj, delta);\n  }\n\n","sourceOld":"  /**\n   * @param path JSON path expression\n   * @param input JSON Structure to parse and test against\n   * @param expected expected value of path\n   * @param delta tollerance allowed in comparing float/double values\n   */\n  public static String match(String path, String input, String expected, double delta) throws Exception {\n    Object inputObj = ObjectBuilder.fromJSON(input);\n    Object expectObj = ObjectBuilder.fromJSON(expected);\n    return matchObj(path, inputObj, expectObj, delta);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["8b572b024e0b33a1176216afd84f90a925baf838","f1efce6dea0cfd25d21147c588865c2eaf639d02"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f1efce6dea0cfd25d21147c588865c2eaf639d02":["8b572b024e0b33a1176216afd84f90a925baf838"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f1efce6dea0cfd25d21147c588865c2eaf639d02"],"8b572b024e0b33a1176216afd84f90a925baf838":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["8b572b024e0b33a1176216afd84f90a925baf838"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"f1efce6dea0cfd25d21147c588865c2eaf639d02":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8b572b024e0b33a1176216afd84f90a925baf838":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","f1efce6dea0cfd25d21147c588865c2eaf639d02"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}