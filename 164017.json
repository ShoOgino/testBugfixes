{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetCloudTest#missingTest().mjava","commits":[{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":0,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetCloudTest#missingTest().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void missingTest() throws Exception { \n    String[] params = new String[] {\n        \"o.missingn.s.int\", \"missing(int_id)\",\n        \"o.missingn.s.long\", \"missing(long_ld)\",\n        \"o.missingn.s.float\", \"missing(float_fd)\",\n        \"o.missingn.s.double\", \"missing(double_dd)\",\n        \"o.missingn.ff\", \"string_sd\",\n        \"o.missingn.ff\", \"date_dtd\",\n\n        \"o.missing.s.str\", \"missing(string_sd)\",\n        \"o.missing.s.date\", \"missing(date_dtd)\",\n        \"o.missing.ff\", \"int_id\",\n        \"o.missing.ff\", \"long_ld\"\n    };\n    NamedList<Object> response = queryLegacyCloudAnalytics(params);\n    String responseStr = response.toString();\n    \n    //Int Date\n    Collection<Long> intDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"int\", false);\n    setLatestType(\"int\");\n    assertEquals(responseStr,intDateTestMissing,intDate);\n    \n    //Int String\n    Collection<Long> intString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"int\", false);\n    assertEquals(responseStr,intStringTestMissing,intString);\n\n    //Long Date\n    Collection<Long> longDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", false);\n    setLatestType(\"long\");\n    assertEquals(responseStr,longDateTestMissing,longDate);\n    \n    //Long String\n    Collection<Long> longString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"long\", false);\n    assertEquals(responseStr,longStringTestMissing,longString);\n\n    //Float Date\n    Collection<Long> floatDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"float\", false);\n    setLatestType(\"float\");\n    assertEquals(responseStr,floatDateTestMissing,floatDate);\n    \n    //Float String\n    Collection<Long> floatString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"float\", false);\n    assertEquals(responseStr,floatStringTestMissing,floatString);\n\n    //Double Date\n    Collection<Long> doubleDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"double\", false);\n    setLatestType(\"double\");\n    assertEquals(responseStr,doubleDateTestMissing,doubleDate);\n    \n    //Double String\n    Collection<Long> doubleString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"double\", false);\n    assertEquals(responseStr,doubleStringTestMissing,doubleString);\n\n    //Date Int\n    Collection<Long> dateInt = getValueList(response, \"missing\", \"fieldFacets\", \"int_id\", \"date\", false);\n    setLatestType(\"date\");\n    assertEquals(responseStr,dateIntTestMissing,dateInt);\n    \n    //Date Long\n    Collection<Long> dateLong = getValueList(response, \"missing\", \"fieldFacets\", \"long_ld\", \"date\", false);\n    assertEquals(responseStr,dateLongTestMissing,dateLong);\n\n    //String Int\n    Collection<Long> stringInt = getValueList(response, \"missing\", \"fieldFacets\", \"int_id\", \"str\", false);\n    setLatestType(\"string\");\n    assertEquals(responseStr,stringIntTestMissing,stringInt);\n    \n    //String Long\n    Collection<Long> stringLong = getValueList(response, \"missing\", \"fieldFacets\", \"long_ld\", \"str\", false);\n    assertEquals(responseStr,stringLongTestMissing,stringLong);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetCloudTest#missingTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetCloudTest#missingTest().mjava","sourceNew":"  @Test\n  public void missingTest() throws Exception {\n    String[] params = new String[] {\n        \"o.missingn.s.int\", \"missing(int_id)\",\n        \"o.missingn.s.long\", \"missing(long_ld)\",\n        \"o.missingn.s.float\", \"missing(float_fd)\",\n        \"o.missingn.s.double\", \"missing(double_dd)\",\n        \"o.missingn.ff\", \"string_sd\",\n        \"o.missingn.ff\", \"date_dtd\",\n\n        \"o.missing.s.str\", \"missing(string_sd)\",\n        \"o.missing.s.date\", \"missing(date_dtd)\",\n        \"o.missing.ff\", \"int_id\",\n        \"o.missing.ff\", \"long_ld\"\n    };\n    NamedList<Object> response = queryLegacyCloudAnalytics(params);\n    String responseStr = response.toString();\n\n    //Int Date\n    Collection<Long> intDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"int\", false);\n    setLatestType(\"int\");\n    assertEquals(responseStr,intDateTestMissing,intDate);\n\n    //Int String\n    Collection<Long> intString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"int\", false);\n    assertEquals(responseStr,intStringTestMissing,intString);\n\n    //Long Date\n    Collection<Long> longDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", false);\n    setLatestType(\"long\");\n    assertEquals(responseStr,longDateTestMissing,longDate);\n\n    //Long String\n    Collection<Long> longString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"long\", false);\n    assertEquals(responseStr,longStringTestMissing,longString);\n\n    //Float Date\n    Collection<Long> floatDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"float\", false);\n    setLatestType(\"float\");\n    assertEquals(responseStr,floatDateTestMissing,floatDate);\n\n    //Float String\n    Collection<Long> floatString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"float\", false);\n    assertEquals(responseStr,floatStringTestMissing,floatString);\n\n    //Double Date\n    Collection<Long> doubleDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"double\", false);\n    setLatestType(\"double\");\n    assertEquals(responseStr,doubleDateTestMissing,doubleDate);\n\n    //Double String\n    Collection<Long> doubleString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"double\", false);\n    assertEquals(responseStr,doubleStringTestMissing,doubleString);\n\n    //Date Int\n    Collection<Long> dateInt = getValueList(response, \"missing\", \"fieldFacets\", \"int_id\", \"date\", false);\n    setLatestType(\"date\");\n    assertEquals(responseStr,dateIntTestMissing,dateInt);\n\n    //Date Long\n    Collection<Long> dateLong = getValueList(response, \"missing\", \"fieldFacets\", \"long_ld\", \"date\", false);\n    assertEquals(responseStr,dateLongTestMissing,dateLong);\n\n    //String Int\n    Collection<Long> stringInt = getValueList(response, \"missing\", \"fieldFacets\", \"int_id\", \"str\", false);\n    setLatestType(\"string\");\n    assertEquals(responseStr,stringIntTestMissing,stringInt);\n\n    //String Long\n    Collection<Long> stringLong = getValueList(response, \"missing\", \"fieldFacets\", \"long_ld\", \"str\", false);\n    assertEquals(responseStr,stringLongTestMissing,stringLong);\n  }\n\n","sourceOld":"  @Test\n  public void missingTest() throws Exception { \n    String[] params = new String[] {\n        \"o.missingn.s.int\", \"missing(int_id)\",\n        \"o.missingn.s.long\", \"missing(long_ld)\",\n        \"o.missingn.s.float\", \"missing(float_fd)\",\n        \"o.missingn.s.double\", \"missing(double_dd)\",\n        \"o.missingn.ff\", \"string_sd\",\n        \"o.missingn.ff\", \"date_dtd\",\n\n        \"o.missing.s.str\", \"missing(string_sd)\",\n        \"o.missing.s.date\", \"missing(date_dtd)\",\n        \"o.missing.ff\", \"int_id\",\n        \"o.missing.ff\", \"long_ld\"\n    };\n    NamedList<Object> response = queryLegacyCloudAnalytics(params);\n    String responseStr = response.toString();\n    \n    //Int Date\n    Collection<Long> intDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"int\", false);\n    setLatestType(\"int\");\n    assertEquals(responseStr,intDateTestMissing,intDate);\n    \n    //Int String\n    Collection<Long> intString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"int\", false);\n    assertEquals(responseStr,intStringTestMissing,intString);\n\n    //Long Date\n    Collection<Long> longDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", false);\n    setLatestType(\"long\");\n    assertEquals(responseStr,longDateTestMissing,longDate);\n    \n    //Long String\n    Collection<Long> longString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"long\", false);\n    assertEquals(responseStr,longStringTestMissing,longString);\n\n    //Float Date\n    Collection<Long> floatDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"float\", false);\n    setLatestType(\"float\");\n    assertEquals(responseStr,floatDateTestMissing,floatDate);\n    \n    //Float String\n    Collection<Long> floatString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"float\", false);\n    assertEquals(responseStr,floatStringTestMissing,floatString);\n\n    //Double Date\n    Collection<Long> doubleDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"double\", false);\n    setLatestType(\"double\");\n    assertEquals(responseStr,doubleDateTestMissing,doubleDate);\n    \n    //Double String\n    Collection<Long> doubleString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"double\", false);\n    assertEquals(responseStr,doubleStringTestMissing,doubleString);\n\n    //Date Int\n    Collection<Long> dateInt = getValueList(response, \"missing\", \"fieldFacets\", \"int_id\", \"date\", false);\n    setLatestType(\"date\");\n    assertEquals(responseStr,dateIntTestMissing,dateInt);\n    \n    //Date Long\n    Collection<Long> dateLong = getValueList(response, \"missing\", \"fieldFacets\", \"long_ld\", \"date\", false);\n    assertEquals(responseStr,dateLongTestMissing,dateLong);\n\n    //String Int\n    Collection<Long> stringInt = getValueList(response, \"missing\", \"fieldFacets\", \"int_id\", \"str\", false);\n    setLatestType(\"string\");\n    assertEquals(responseStr,stringIntTestMissing,stringInt);\n    \n    //String Long\n    Collection<Long> stringLong = getValueList(response, \"missing\", \"fieldFacets\", \"long_ld\", \"str\", false);\n    assertEquals(responseStr,stringLongTestMissing,stringLong);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetCloudTest#missingTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetCloudTest#missingTest().mjava","sourceNew":"  @Test\n  public void missingTest() throws Exception {\n    String[] params = new String[] {\n        \"o.missingn.s.int\", \"missing(int_id)\",\n        \"o.missingn.s.long\", \"missing(long_ld)\",\n        \"o.missingn.s.float\", \"missing(float_fd)\",\n        \"o.missingn.s.double\", \"missing(double_dd)\",\n        \"o.missingn.ff\", \"string_sd\",\n        \"o.missingn.ff\", \"date_dtd\",\n\n        \"o.missing.s.str\", \"missing(string_sd)\",\n        \"o.missing.s.date\", \"missing(date_dtd)\",\n        \"o.missing.ff\", \"int_id\",\n        \"o.missing.ff\", \"long_ld\"\n    };\n    NamedList<Object> response = queryLegacyCloudAnalytics(params);\n    String responseStr = response.toString();\n\n    //Int Date\n    Collection<Long> intDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"int\", false);\n    setLatestType(\"int\");\n    assertEquals(responseStr,intDateTestMissing,intDate);\n\n    //Int String\n    Collection<Long> intString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"int\", false);\n    assertEquals(responseStr,intStringTestMissing,intString);\n\n    //Long Date\n    Collection<Long> longDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", false);\n    setLatestType(\"long\");\n    assertEquals(responseStr,longDateTestMissing,longDate);\n\n    //Long String\n    Collection<Long> longString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"long\", false);\n    assertEquals(responseStr,longStringTestMissing,longString);\n\n    //Float Date\n    Collection<Long> floatDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"float\", false);\n    setLatestType(\"float\");\n    assertEquals(responseStr,floatDateTestMissing,floatDate);\n\n    //Float String\n    Collection<Long> floatString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"float\", false);\n    assertEquals(responseStr,floatStringTestMissing,floatString);\n\n    //Double Date\n    Collection<Long> doubleDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"double\", false);\n    setLatestType(\"double\");\n    assertEquals(responseStr,doubleDateTestMissing,doubleDate);\n\n    //Double String\n    Collection<Long> doubleString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"double\", false);\n    assertEquals(responseStr,doubleStringTestMissing,doubleString);\n\n    //Date Int\n    Collection<Long> dateInt = getValueList(response, \"missing\", \"fieldFacets\", \"int_id\", \"date\", false);\n    setLatestType(\"date\");\n    assertEquals(responseStr,dateIntTestMissing,dateInt);\n\n    //Date Long\n    Collection<Long> dateLong = getValueList(response, \"missing\", \"fieldFacets\", \"long_ld\", \"date\", false);\n    assertEquals(responseStr,dateLongTestMissing,dateLong);\n\n    //String Int\n    Collection<Long> stringInt = getValueList(response, \"missing\", \"fieldFacets\", \"int_id\", \"str\", false);\n    setLatestType(\"string\");\n    assertEquals(responseStr,stringIntTestMissing,stringInt);\n\n    //String Long\n    Collection<Long> stringLong = getValueList(response, \"missing\", \"fieldFacets\", \"long_ld\", \"str\", false);\n    assertEquals(responseStr,stringLongTestMissing,stringLong);\n  }\n\n","sourceOld":"  @Test\n  public void missingTest() throws Exception { \n    String[] params = new String[] {\n        \"o.missingn.s.int\", \"missing(int_id)\",\n        \"o.missingn.s.long\", \"missing(long_ld)\",\n        \"o.missingn.s.float\", \"missing(float_fd)\",\n        \"o.missingn.s.double\", \"missing(double_dd)\",\n        \"o.missingn.ff\", \"string_sd\",\n        \"o.missingn.ff\", \"date_dtd\",\n\n        \"o.missing.s.str\", \"missing(string_sd)\",\n        \"o.missing.s.date\", \"missing(date_dtd)\",\n        \"o.missing.ff\", \"int_id\",\n        \"o.missing.ff\", \"long_ld\"\n    };\n    NamedList<Object> response = queryLegacyCloudAnalytics(params);\n    String responseStr = response.toString();\n    \n    //Int Date\n    Collection<Long> intDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"int\", false);\n    setLatestType(\"int\");\n    assertEquals(responseStr,intDateTestMissing,intDate);\n    \n    //Int String\n    Collection<Long> intString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"int\", false);\n    assertEquals(responseStr,intStringTestMissing,intString);\n\n    //Long Date\n    Collection<Long> longDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", false);\n    setLatestType(\"long\");\n    assertEquals(responseStr,longDateTestMissing,longDate);\n    \n    //Long String\n    Collection<Long> longString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"long\", false);\n    assertEquals(responseStr,longStringTestMissing,longString);\n\n    //Float Date\n    Collection<Long> floatDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"float\", false);\n    setLatestType(\"float\");\n    assertEquals(responseStr,floatDateTestMissing,floatDate);\n    \n    //Float String\n    Collection<Long> floatString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"float\", false);\n    assertEquals(responseStr,floatStringTestMissing,floatString);\n\n    //Double Date\n    Collection<Long> doubleDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"double\", false);\n    setLatestType(\"double\");\n    assertEquals(responseStr,doubleDateTestMissing,doubleDate);\n    \n    //Double String\n    Collection<Long> doubleString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"double\", false);\n    assertEquals(responseStr,doubleStringTestMissing,doubleString);\n\n    //Date Int\n    Collection<Long> dateInt = getValueList(response, \"missing\", \"fieldFacets\", \"int_id\", \"date\", false);\n    setLatestType(\"date\");\n    assertEquals(responseStr,dateIntTestMissing,dateInt);\n    \n    //Date Long\n    Collection<Long> dateLong = getValueList(response, \"missing\", \"fieldFacets\", \"long_ld\", \"date\", false);\n    assertEquals(responseStr,dateLongTestMissing,dateLong);\n\n    //String Int\n    Collection<Long> stringInt = getValueList(response, \"missing\", \"fieldFacets\", \"int_id\", \"str\", false);\n    setLatestType(\"string\");\n    assertEquals(responseStr,stringIntTestMissing,stringInt);\n    \n    //String Long\n    Collection<Long> stringLong = getValueList(response, \"missing\", \"fieldFacets\", \"long_ld\", \"str\", false);\n    assertEquals(responseStr,stringLongTestMissing,stringLong);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8061ddd97f3352007d927dae445884a6f3d857b":["3bd4c6955956e76c96eb12dfe64108ed03522983","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e4e64b7199d2f2a17be7f3926c7532553910dce"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["1e4e64b7199d2f2a17be7f3926c7532553910dce","f8061ddd97f3352007d927dae445884a6f3d857b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}