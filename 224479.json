{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLightAutomaton#testMinus().mjava","commits":[{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLightAutomaton#testMinus().mjava","pathOld":"/dev/null","sourceNew":"  // nocommit testMinus\n  public void testMinus() throws Exception {\n    LightAutomaton a1 = BasicAutomata.makeStringLight(\"foobar\");\n    LightAutomaton a2 = BasicAutomata.makeStringLight(\"boobar\");\n    LightAutomaton a3 = BasicAutomata.makeStringLight(\"beebar\");\n    LightAutomaton a = BasicOperations.unionLight(Arrays.asList(a1, a2, a3));\n    if (random().nextBoolean()) {\n      a = BasicOperations.determinize(a);\n    } else if (random().nextBoolean()) {\n      a = MinimizationOperationsLight.minimize(a);\n    }\n\n    LightAutomaton a4 = BasicOperations.determinize(BasicOperations.minusLight(a, a2));\n    \n    assertTrue(BasicOperations.run(a4, \"foobar\"));\n    assertFalse(BasicOperations.run(a4, \"boobar\"));\n    assertTrue(BasicOperations.run(a4, \"beebar\"));\n\n    // nocommit test getFinitStrings count == 2\n\n    a4 = BasicOperations.determinize(BasicOperations.minusLight(a4, a1));\n    assertFalse(BasicOperations.run(a4, \"foobar\"));\n    assertFalse(BasicOperations.run(a4, \"boobar\"));\n    assertTrue(BasicOperations.run(a4, \"beebar\"));\n\n    a4 = BasicOperations.determinize(BasicOperations.minusLight(a4, a3));\n    assertFalse(BasicOperations.run(a4, \"foobar\"));\n    assertFalse(BasicOperations.run(a4, \"boobar\"));\n    assertFalse(BasicOperations.run(a4, \"beebar\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c8cfaac638acc80d26d08288440ede37e6539e9","date":1402678000,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLightAutomaton#testMinus().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLightAutomaton#testMinus().mjava","sourceNew":"  // nocommit testMinus\n  public void testMinus() throws Exception {\n    LightAutomaton a1 = BasicAutomata.makeStringLight(\"foobar\");\n    LightAutomaton a2 = BasicAutomata.makeStringLight(\"boobar\");\n    LightAutomaton a3 = BasicAutomata.makeStringLight(\"beebar\");\n    LightAutomaton a = BasicOperations.unionLight(Arrays.asList(a1, a2, a3));\n    if (random().nextBoolean()) {\n      a = BasicOperations.determinize(a);\n    } else if (random().nextBoolean()) {\n      a = MinimizationOperationsLight.minimize(a);\n    }\n    assertMatches(a, \"foobar\", \"beebar\", \"boobar\");\n\n    LightAutomaton a4 = BasicOperations.determinize(BasicOperations.minusLight(a, a2));\n    \n    assertTrue(BasicOperations.run(a4, \"foobar\"));\n    assertFalse(BasicOperations.run(a4, \"boobar\"));\n    assertTrue(BasicOperations.run(a4, \"beebar\"));\n    assertMatches(a4, \"foobar\", \"beebar\");\n\n    a4 = BasicOperations.determinize(BasicOperations.minusLight(a4, a1));\n    assertFalse(BasicOperations.run(a4, \"foobar\"));\n    assertFalse(BasicOperations.run(a4, \"boobar\"));\n    assertTrue(BasicOperations.run(a4, \"beebar\"));\n    assertMatches(a4, \"beebar\");\n\n    a4 = BasicOperations.determinize(BasicOperations.minusLight(a4, a3));\n    assertFalse(BasicOperations.run(a4, \"foobar\"));\n    assertFalse(BasicOperations.run(a4, \"boobar\"));\n    assertFalse(BasicOperations.run(a4, \"beebar\"));\n    assertMatches(a4);\n  }\n\n","sourceOld":"  // nocommit testMinus\n  public void testMinus() throws Exception {\n    LightAutomaton a1 = BasicAutomata.makeStringLight(\"foobar\");\n    LightAutomaton a2 = BasicAutomata.makeStringLight(\"boobar\");\n    LightAutomaton a3 = BasicAutomata.makeStringLight(\"beebar\");\n    LightAutomaton a = BasicOperations.unionLight(Arrays.asList(a1, a2, a3));\n    if (random().nextBoolean()) {\n      a = BasicOperations.determinize(a);\n    } else if (random().nextBoolean()) {\n      a = MinimizationOperationsLight.minimize(a);\n    }\n\n    LightAutomaton a4 = BasicOperations.determinize(BasicOperations.minusLight(a, a2));\n    \n    assertTrue(BasicOperations.run(a4, \"foobar\"));\n    assertFalse(BasicOperations.run(a4, \"boobar\"));\n    assertTrue(BasicOperations.run(a4, \"beebar\"));\n\n    // nocommit test getFinitStrings count == 2\n\n    a4 = BasicOperations.determinize(BasicOperations.minusLight(a4, a1));\n    assertFalse(BasicOperations.run(a4, \"foobar\"));\n    assertFalse(BasicOperations.run(a4, \"boobar\"));\n    assertTrue(BasicOperations.run(a4, \"beebar\"));\n\n    a4 = BasicOperations.determinize(BasicOperations.minusLight(a4, a3));\n    assertFalse(BasicOperations.run(a4, \"foobar\"));\n    assertFalse(BasicOperations.run(a4, \"boobar\"));\n    assertFalse(BasicOperations.run(a4, \"beebar\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9","date":1402946522,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLightAutomaton#testMinus().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLightAutomaton#testMinus().mjava","sourceNew":"  public void testMinus() throws Exception {\n    LightAutomaton a1 = BasicAutomata.makeStringLight(\"foobar\");\n    LightAutomaton a2 = BasicAutomata.makeStringLight(\"boobar\");\n    LightAutomaton a3 = BasicAutomata.makeStringLight(\"beebar\");\n    LightAutomaton a = BasicOperations.unionLight(Arrays.asList(a1, a2, a3));\n    if (random().nextBoolean()) {\n      a = BasicOperations.determinize(a);\n    } else if (random().nextBoolean()) {\n      a = MinimizationOperationsLight.minimize(a);\n    }\n    assertMatches(a, \"foobar\", \"beebar\", \"boobar\");\n\n    LightAutomaton a4 = BasicOperations.determinize(BasicOperations.minusLight(a, a2));\n    \n    assertTrue(BasicOperations.run(a4, \"foobar\"));\n    assertFalse(BasicOperations.run(a4, \"boobar\"));\n    assertTrue(BasicOperations.run(a4, \"beebar\"));\n    assertMatches(a4, \"foobar\", \"beebar\");\n\n    a4 = BasicOperations.determinize(BasicOperations.minusLight(a4, a1));\n    assertFalse(BasicOperations.run(a4, \"foobar\"));\n    assertFalse(BasicOperations.run(a4, \"boobar\"));\n    assertTrue(BasicOperations.run(a4, \"beebar\"));\n    assertMatches(a4, \"beebar\");\n\n    a4 = BasicOperations.determinize(BasicOperations.minusLight(a4, a3));\n    assertFalse(BasicOperations.run(a4, \"foobar\"));\n    assertFalse(BasicOperations.run(a4, \"boobar\"));\n    assertFalse(BasicOperations.run(a4, \"beebar\"));\n    assertMatches(a4);\n  }\n\n","sourceOld":"  // nocommit testMinus\n  public void testMinus() throws Exception {\n    LightAutomaton a1 = BasicAutomata.makeStringLight(\"foobar\");\n    LightAutomaton a2 = BasicAutomata.makeStringLight(\"boobar\");\n    LightAutomaton a3 = BasicAutomata.makeStringLight(\"beebar\");\n    LightAutomaton a = BasicOperations.unionLight(Arrays.asList(a1, a2, a3));\n    if (random().nextBoolean()) {\n      a = BasicOperations.determinize(a);\n    } else if (random().nextBoolean()) {\n      a = MinimizationOperationsLight.minimize(a);\n    }\n    assertMatches(a, \"foobar\", \"beebar\", \"boobar\");\n\n    LightAutomaton a4 = BasicOperations.determinize(BasicOperations.minusLight(a, a2));\n    \n    assertTrue(BasicOperations.run(a4, \"foobar\"));\n    assertFalse(BasicOperations.run(a4, \"boobar\"));\n    assertTrue(BasicOperations.run(a4, \"beebar\"));\n    assertMatches(a4, \"foobar\", \"beebar\");\n\n    a4 = BasicOperations.determinize(BasicOperations.minusLight(a4, a1));\n    assertFalse(BasicOperations.run(a4, \"foobar\"));\n    assertFalse(BasicOperations.run(a4, \"boobar\"));\n    assertTrue(BasicOperations.run(a4, \"beebar\"));\n    assertMatches(a4, \"beebar\");\n\n    a4 = BasicOperations.determinize(BasicOperations.minusLight(a4, a3));\n    assertFalse(BasicOperations.run(a4, \"foobar\"));\n    assertFalse(BasicOperations.run(a4, \"boobar\"));\n    assertFalse(BasicOperations.run(a4, \"beebar\"));\n    assertMatches(a4);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLightAutomaton#testMinus().mjava","sourceNew":null,"sourceOld":"  public void testMinus() throws Exception {\n    LightAutomaton a1 = BasicAutomata.makeStringLight(\"foobar\");\n    LightAutomaton a2 = BasicAutomata.makeStringLight(\"boobar\");\n    LightAutomaton a3 = BasicAutomata.makeStringLight(\"beebar\");\n    LightAutomaton a = BasicOperations.unionLight(Arrays.asList(a1, a2, a3));\n    if (random().nextBoolean()) {\n      a = BasicOperations.determinize(a);\n    } else if (random().nextBoolean()) {\n      a = MinimizationOperationsLight.minimize(a);\n    }\n    assertMatches(a, \"foobar\", \"beebar\", \"boobar\");\n\n    LightAutomaton a4 = BasicOperations.determinize(BasicOperations.minusLight(a, a2));\n    \n    assertTrue(BasicOperations.run(a4, \"foobar\"));\n    assertFalse(BasicOperations.run(a4, \"boobar\"));\n    assertTrue(BasicOperations.run(a4, \"beebar\"));\n    assertMatches(a4, \"foobar\", \"beebar\");\n\n    a4 = BasicOperations.determinize(BasicOperations.minusLight(a4, a1));\n    assertFalse(BasicOperations.run(a4, \"foobar\"));\n    assertFalse(BasicOperations.run(a4, \"boobar\"));\n    assertTrue(BasicOperations.run(a4, \"beebar\"));\n    assertMatches(a4, \"beebar\");\n\n    a4 = BasicOperations.determinize(BasicOperations.minusLight(a4, a3));\n    assertFalse(BasicOperations.run(a4, \"foobar\"));\n    assertFalse(BasicOperations.run(a4, \"boobar\"));\n    assertFalse(BasicOperations.run(a4, \"beebar\"));\n    assertMatches(a4);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["0c8cfaac638acc80d26d08288440ede37e6539e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0c8cfaac638acc80d26d08288440ede37e6539e9":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["0c8cfaac638acc80d26d08288440ede37e6539e9"],"0c8cfaac638acc80d26d08288440ede37e6539e9":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}