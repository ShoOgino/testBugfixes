{"path":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleReloadAction(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"8512200aed2724abd80dbeb686d3412d537b7d8a","date":1342139754,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleReloadAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  private void handleReloadAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.info(\"Reloading Collection : \" + req.getParamString());\n    String name = req.getParams().required().get(\"name\");\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerCollectionProcessor.RELOADCOLLECTION, \"name\", name);\n\n    // TODO: what if you want to block until the collection is available?\n    coreContainer.getZkController().getOverseerCollectionQueue().offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleReloadAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  private void handleReloadAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.info(\"Reloading Collection : \" + req.getParamString());\n    String name = req.getParams().required().get(\"name\");\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerCollectionProcessor.RELOADCOLLECTION, \"name\", name);\n\n    // TODO: what if you want to block until the collection is available?\n    coreContainer.getZkController().getOverseerCollectionQueue().offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleReloadAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  private void handleReloadAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.info(\"Reloading Collection : \" + req.getParamString());\n    String name = req.getParams().required().get(\"name\");\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerCollectionProcessor.RELOADCOLLECTION, \"name\", name);\n\n    // TODO: what if you want to block until the collection is available?\n    coreContainer.getZkController().getOverseerCollectionQueue().offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c986b1ea9768aff3c903f05a2c85b7b672b5c225","date":1359126891,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleReloadAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleReloadAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleReloadAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.info(\"Reloading Collection : \" + req.getParamString());\n    String name = req.getParams().required().get(\"name\");\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerCollectionProcessor.RELOADCOLLECTION, \"name\", name);\n\n    handleResponse(OverseerCollectionProcessor.RELOADCOLLECTION, m, rsp);\n  }\n\n","sourceOld":"  private void handleReloadAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.info(\"Reloading Collection : \" + req.getParamString());\n    String name = req.getParams().required().get(\"name\");\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerCollectionProcessor.RELOADCOLLECTION, \"name\", name);\n\n    // TODO: what if you want to block until the collection is available?\n    coreContainer.getZkController().getOverseerCollectionQueue().offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd45d4a2ee01a1932d33eec42f5272c2402da679","date":1359316912,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleReloadAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleReloadAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleReloadAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.info(\"Reloading Collection : \" + req.getParamString());\n    String name = req.getParams().required().get(\"name\");\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerCollectionProcessor.RELOADCOLLECTION, \"name\", name);\n\n    handleResponse(OverseerCollectionProcessor.RELOADCOLLECTION, m, rsp);\n  }\n\n","sourceOld":"  private void handleReloadAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.info(\"Reloading Collection : \" + req.getParamString());\n    String name = req.getParams().required().get(\"name\");\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerCollectionProcessor.RELOADCOLLECTION, \"name\", name);\n\n    // TODO: what if you want to block until the collection is available?\n    coreContainer.getZkController().getOverseerCollectionQueue().offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleReloadAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleReloadAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleReloadAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.info(\"Reloading Collection : \" + req.getParamString());\n    String name = req.getParams().required().get(\"name\");\n\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerCollectionProcessor.RELOADCOLLECTION, \"name\", name);\n\n    handleResponse(OverseerCollectionProcessor.RELOADCOLLECTION, m, rsp);\n  }\n\n","sourceOld":"  private void handleReloadAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.info(\"Reloading Collection : \" + req.getParamString());\n    String name = req.getParams().required().get(\"name\");\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerCollectionProcessor.RELOADCOLLECTION, \"name\", name);\n\n    handleResponse(OverseerCollectionProcessor.RELOADCOLLECTION, m, rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleReloadAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleReloadAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleReloadAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.info(\"Reloading Collection : \" + req.getParamString());\n    String name = req.getParams().required().get(\"name\");\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerCollectionProcessor.RELOADCOLLECTION, \"name\", name);\n\n    handleResponse(OverseerCollectionProcessor.RELOADCOLLECTION, m, rsp);\n  }\n\n","sourceOld":"  private void handleReloadAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.info(\"Reloading Collection : \" + req.getParamString());\n    String name = req.getParams().required().get(\"name\");\n\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerCollectionProcessor.RELOADCOLLECTION, \"name\", name);\n\n    handleResponse(OverseerCollectionProcessor.RELOADCOLLECTION, m, rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c688f7052130cef7bd419c85e3c5be214f7b9e","date":1411018984,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleReloadAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleReloadAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleReloadAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.info(\"Reloading Collection : \" + req.getParamString());\n    String name = req.getParams().required().get(\"name\");\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        RELOAD.toLower(), \"name\", name);\n\n    handleResponse(RELOAD.toLower(), m, rsp);\n  }\n\n","sourceOld":"  private void handleReloadAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.info(\"Reloading Collection : \" + req.getParamString());\n    String name = req.getParams().required().get(\"name\");\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        OverseerCollectionProcessor.RELOADCOLLECTION, \"name\", name);\n\n    handleResponse(OverseerCollectionProcessor.RELOADCOLLECTION, m, rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1390137e395d2f07f9ba5b8c43d293befe84d563","date":1427947685,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleReloadAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleReloadAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleReloadAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.info(\"Reloading Collection : \" + req.getParamString());\n    String name = req.getParams().required().get(NAME);\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        RELOAD.toLower(), NAME, name);\n\n    handleResponse(RELOAD.toLower(), m, rsp);\n  }\n\n","sourceOld":"  private void handleReloadAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.info(\"Reloading Collection : \" + req.getParamString());\n    String name = req.getParams().required().get(\"name\");\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        RELOAD.toLower(), \"name\", name);\n\n    handleResponse(RELOAD.toLower(), m, rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleReloadAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleReloadAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleReloadAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.info(\"Reloading Collection : \" + req.getParamString());\n    String name = req.getParams().required().get(NAME);\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        RELOAD.toLower(), NAME, name);\n\n    handleResponse(RELOAD.toLower(), m, rsp);\n  }\n\n","sourceOld":"  private void handleReloadAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.info(\"Reloading Collection : \" + req.getParamString());\n    String name = req.getParams().required().get(\"name\");\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        RELOAD.toLower(), \"name\", name);\n\n    handleResponse(RELOAD.toLower(), m, rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ebd3a557326ef3eab85b73a8cff781f7d801248","date":1431620752,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleReloadAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  private void handleReloadAction(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    log.info(\"Reloading Collection : \" + req.getParamString());\n    String name = req.getParams().required().get(NAME);\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n        RELOAD.toLower(), NAME, name);\n\n    handleResponse(RELOAD.toLower(), m, rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"9ebd3a557326ef3eab85b73a8cff781f7d801248":["1390137e395d2f07f9ba5b8c43d293befe84d563"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":["8512200aed2724abd80dbeb686d3412d537b7d8a","c986b1ea9768aff3c903f05a2c85b7b672b5c225"],"30c688f7052130cef7bd419c85e3c5be214f7b9e":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["c986b1ea9768aff3c903f05a2c85b7b672b5c225"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8512200aed2724abd80dbeb686d3412d537b7d8a"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["30c688f7052130cef7bd419c85e3c5be214f7b9e"],"c986b1ea9768aff3c903f05a2c85b7b672b5c225":["8512200aed2724abd80dbeb686d3412d537b7d8a"],"8512200aed2724abd80dbeb686d3412d537b7d8a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8512200aed2724abd80dbeb686d3412d537b7d8a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["30c688f7052130cef7bd419c85e3c5be214f7b9e","1390137e395d2f07f9ba5b8c43d293befe84d563"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ebd3a557326ef3eab85b73a8cff781f7d801248"]},"commit2Childs":{"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["30c688f7052130cef7bd419c85e3c5be214f7b9e"],"9ebd3a557326ef3eab85b73a8cff781f7d801248":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":[],"30c688f7052130cef7bd419c85e3c5be214f7b9e":["1390137e395d2f07f9ba5b8c43d293befe84d563","d2638f781be724518ff6c2263d14a48cf6e68017"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"1390137e395d2f07f9ba5b8c43d293befe84d563":["9ebd3a557326ef3eab85b73a8cff781f7d801248","d2638f781be724518ff6c2263d14a48cf6e68017"],"8512200aed2724abd80dbeb686d3412d537b7d8a":["dd45d4a2ee01a1932d33eec42f5272c2402da679","aba371508186796cc6151d8223a5b4e16d02e26e","c986b1ea9768aff3c903f05a2c85b7b672b5c225","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"c986b1ea9768aff3c903f05a2c85b7b672b5c225":["dd45d4a2ee01a1932d33eec42f5272c2402da679","a6f693ed86f289b2e42b46684409b3997f2c264a"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","8512200aed2724abd80dbeb686d3412d537b7d8a","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dd45d4a2ee01a1932d33eec42f5272c2402da679","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}