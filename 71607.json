{"path":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#FixedGapTermsIndexWriter(SegmentWriteState).mjava","commits":[{"id":"99cf56f3a650b908f7017a72f9d23940418f8a52","date":1284891529,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#FixedGapTermsIndexWriter(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexWriter#SimpleStandardTermsIndexWriter(SegmentWriteState).mjava","sourceNew":"  public FixedGapTermsIndexWriter(SegmentWriteState state) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentName, \"\", TERMS_INDEX_EXTENSION);\n    state.flushedFiles.add(indexFileName);\n    termIndexInterval = state.termIndexInterval;\n    out = state.directory.createOutput(indexFileName);\n    fieldInfos = state.fieldInfos;\n    writeHeader(out);\n    out.writeInt(termIndexInterval);\n  }\n\n","sourceOld":"  public SimpleStandardTermsIndexWriter(SegmentWriteState state) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentName, \"\", StandardCodec.TERMS_INDEX_EXTENSION);\n    state.flushedFiles.add(indexFileName);\n    termIndexInterval = state.termIndexInterval;\n    out = state.directory.createOutput(indexFileName);\n    fieldInfos = state.fieldInfos;\n    writeHeader(out);\n    out.writeInt(termIndexInterval);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16c697f6ca5cdc82f918f753317a4ac9c70d259f","date":1289840486,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#FixedGapTermsIndexWriter(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#FixedGapTermsIndexWriter(SegmentWriteState).mjava","sourceNew":"  public FixedGapTermsIndexWriter(SegmentWriteState state) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_INDEX_EXTENSION);\n    state.flushedFiles.add(indexFileName);\n    termIndexInterval = state.termIndexInterval;\n    out = state.directory.createOutput(indexFileName);\n    fieldInfos = state.fieldInfos;\n    writeHeader(out);\n    out.writeInt(termIndexInterval);\n  }\n\n","sourceOld":"  public FixedGapTermsIndexWriter(SegmentWriteState state) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentName, \"\", TERMS_INDEX_EXTENSION);\n    state.flushedFiles.add(indexFileName);\n    termIndexInterval = state.termIndexInterval;\n    out = state.directory.createOutput(indexFileName);\n    fieldInfos = state.fieldInfos;\n    writeHeader(out);\n    out.writeInt(termIndexInterval);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#FixedGapTermsIndexWriter(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#FixedGapTermsIndexWriter(SegmentWriteState).mjava","sourceNew":"  public FixedGapTermsIndexWriter(SegmentWriteState state) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_INDEX_EXTENSION);\n    state.flushedFiles.add(indexFileName);\n    termIndexInterval = state.termIndexInterval;\n    out = state.directory.createOutput(indexFileName);\n    fieldInfos = state.fieldInfos;\n    writeHeader(out);\n    out.writeInt(termIndexInterval);\n  }\n\n","sourceOld":"  public FixedGapTermsIndexWriter(SegmentWriteState state) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentName, \"\", TERMS_INDEX_EXTENSION);\n    state.flushedFiles.add(indexFileName);\n    termIndexInterval = state.termIndexInterval;\n    out = state.directory.createOutput(indexFileName);\n    fieldInfos = state.fieldInfos;\n    writeHeader(out);\n    out.writeInt(termIndexInterval);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#FixedGapTermsIndexWriter(SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"  public FixedGapTermsIndexWriter(SegmentWriteState state) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_INDEX_EXTENSION);\n    state.flushedFiles.add(indexFileName);\n    termIndexInterval = state.termIndexInterval;\n    out = state.directory.createOutput(indexFileName);\n    fieldInfos = state.fieldInfos;\n    writeHeader(out);\n    out.writeInt(termIndexInterval);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fdc49cf4bbf2603a647b53ff5cfa6878743a3ffe","date":1294227869,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#FixedGapTermsIndexWriter(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#FixedGapTermsIndexWriter(SegmentWriteState).mjava","sourceNew":"  public FixedGapTermsIndexWriter(SegmentWriteState state) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_INDEX_EXTENSION);\n    termIndexInterval = state.termIndexInterval;\n    out = state.directory.createOutput(indexFileName);\n    fieldInfos = state.fieldInfos;\n    writeHeader(out);\n    out.writeInt(termIndexInterval);\n  }\n\n","sourceOld":"  public FixedGapTermsIndexWriter(SegmentWriteState state) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_INDEX_EXTENSION);\n    state.flushedFiles.add(indexFileName);\n    termIndexInterval = state.termIndexInterval;\n    out = state.directory.createOutput(indexFileName);\n    fieldInfos = state.fieldInfos;\n    writeHeader(out);\n    out.writeInt(termIndexInterval);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#FixedGapTermsIndexWriter(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#FixedGapTermsIndexWriter(SegmentWriteState).mjava","sourceNew":"  public FixedGapTermsIndexWriter(SegmentWriteState state) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_INDEX_EXTENSION);\n    termIndexInterval = state.termIndexInterval;\n    out = state.directory.createOutput(indexFileName);\n    fieldInfos = state.fieldInfos;\n    writeHeader(out);\n    out.writeInt(termIndexInterval);\n  }\n\n","sourceOld":"  public FixedGapTermsIndexWriter(SegmentWriteState state) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_INDEX_EXTENSION);\n    state.flushedFiles.add(indexFileName);\n    termIndexInterval = state.termIndexInterval;\n    out = state.directory.createOutput(indexFileName);\n    fieldInfos = state.fieldInfos;\n    writeHeader(out);\n    out.writeInt(termIndexInterval);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#FixedGapTermsIndexWriter(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#FixedGapTermsIndexWriter(SegmentWriteState).mjava","sourceNew":"  public FixedGapTermsIndexWriter(SegmentWriteState state) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_INDEX_EXTENSION);\n    termIndexInterval = state.termIndexInterval;\n    out = state.directory.createOutput(indexFileName);\n    fieldInfos = state.fieldInfos;\n    writeHeader(out);\n    out.writeInt(termIndexInterval);\n  }\n\n","sourceOld":"  public FixedGapTermsIndexWriter(SegmentWriteState state) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_INDEX_EXTENSION);\n    state.flushedFiles.add(indexFileName);\n    termIndexInterval = state.termIndexInterval;\n    out = state.directory.createOutput(indexFileName);\n    fieldInfos = state.fieldInfos;\n    writeHeader(out);\n    out.writeInt(termIndexInterval);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#FixedGapTermsIndexWriter(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#FixedGapTermsIndexWriter(SegmentWriteState).mjava","sourceNew":"  public FixedGapTermsIndexWriter(SegmentWriteState state) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecIdAsString(), TERMS_INDEX_EXTENSION);\n    termIndexInterval = state.termIndexInterval;\n    out = state.directory.createOutput(indexFileName);\n    fieldInfos = state.fieldInfos;\n    writeHeader(out);\n    out.writeInt(termIndexInterval);\n  }\n\n","sourceOld":"  public FixedGapTermsIndexWriter(SegmentWriteState state) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_INDEX_EXTENSION);\n    termIndexInterval = state.termIndexInterval;\n    out = state.directory.createOutput(indexFileName);\n    fieldInfos = state.fieldInfos;\n    writeHeader(out);\n    out.writeInt(termIndexInterval);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efb7a19703a037c29e30440260d393500febc1f4","date":1306648116,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#FixedGapTermsIndexWriter(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#FixedGapTermsIndexWriter(SegmentWriteState).mjava","sourceNew":"  public FixedGapTermsIndexWriter(SegmentWriteState state) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_INDEX_EXTENSION);\n    termIndexInterval = state.termIndexInterval;\n    out = state.directory.createOutput(indexFileName);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      out.writeInt(termIndexInterval);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, out);\n      }\n    }\n  }\n\n","sourceOld":"  public FixedGapTermsIndexWriter(SegmentWriteState state) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_INDEX_EXTENSION);\n    termIndexInterval = state.termIndexInterval;\n    out = state.directory.createOutput(indexFileName);\n    fieldInfos = state.fieldInfos;\n    writeHeader(out);\n    out.writeInt(termIndexInterval);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#FixedGapTermsIndexWriter(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#FixedGapTermsIndexWriter(SegmentWriteState).mjava","sourceNew":"  public FixedGapTermsIndexWriter(SegmentWriteState state) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_INDEX_EXTENSION);\n    termIndexInterval = state.termIndexInterval;\n    out = state.directory.createOutput(indexFileName);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      out.writeInt(termIndexInterval);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, out);\n      }\n    }\n  }\n\n","sourceOld":"  public FixedGapTermsIndexWriter(SegmentWriteState state) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_INDEX_EXTENSION);\n    termIndexInterval = state.termIndexInterval;\n    out = state.directory.createOutput(indexFileName);\n    fieldInfos = state.fieldInfos;\n    writeHeader(out);\n    out.writeInt(termIndexInterval);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#FixedGapTermsIndexWriter(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#FixedGapTermsIndexWriter(SegmentWriteState).mjava","sourceNew":"  public FixedGapTermsIndexWriter(SegmentWriteState state) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecIdAsString(), TERMS_INDEX_EXTENSION);\n    termIndexInterval = state.termIndexInterval;\n    out = state.directory.createOutput(indexFileName);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      out.writeInt(termIndexInterval);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, out);\n      }\n    }\n  }\n\n","sourceOld":"  public FixedGapTermsIndexWriter(SegmentWriteState state) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecIdAsString(), TERMS_INDEX_EXTENSION);\n    termIndexInterval = state.termIndexInterval;\n    out = state.directory.createOutput(indexFileName);\n    fieldInfos = state.fieldInfos;\n    writeHeader(out);\n    out.writeInt(termIndexInterval);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0150c6e116b24d66f02d63fcb0758f336e8791e2","date":1307283797,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#FixedGapTermsIndexWriter(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#FixedGapTermsIndexWriter(SegmentWriteState).mjava","sourceNew":"  public FixedGapTermsIndexWriter(SegmentWriteState state) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_INDEX_EXTENSION);\n    termIndexInterval = state.termIndexInterval;\n    out = state.directory.createOutput(indexFileName);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      out.writeInt(termIndexInterval);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, out);\n      }\n    }\n  }\n\n","sourceOld":"  public FixedGapTermsIndexWriter(SegmentWriteState state) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecIdAsString(), TERMS_INDEX_EXTENSION);\n    termIndexInterval = state.termIndexInterval;\n    out = state.directory.createOutput(indexFileName);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      out.writeInt(termIndexInterval);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#FixedGapTermsIndexWriter(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#FixedGapTermsIndexWriter(SegmentWriteState).mjava","sourceNew":"  public FixedGapTermsIndexWriter(SegmentWriteState state) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_INDEX_EXTENSION);\n    termIndexInterval = state.termIndexInterval;\n    out = state.directory.createOutput(indexFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      out.writeInt(termIndexInterval);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, out);\n      }\n    }\n  }\n\n","sourceOld":"  public FixedGapTermsIndexWriter(SegmentWriteState state) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_INDEX_EXTENSION);\n    termIndexInterval = state.termIndexInterval;\n    out = state.directory.createOutput(indexFileName);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      out.writeInt(termIndexInterval);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#FixedGapTermsIndexWriter(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#FixedGapTermsIndexWriter(SegmentWriteState).mjava","sourceNew":"  public FixedGapTermsIndexWriter(SegmentWriteState state) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_INDEX_EXTENSION);\n    termIndexInterval = state.termIndexInterval;\n    out = state.directory.createOutput(indexFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      out.writeInt(termIndexInterval);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, out);\n      }\n    }\n  }\n\n","sourceOld":"  public FixedGapTermsIndexWriter(SegmentWriteState state) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_INDEX_EXTENSION);\n    termIndexInterval = state.termIndexInterval;\n    out = state.directory.createOutput(indexFileName);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      out.writeInt(termIndexInterval);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#FixedGapTermsIndexWriter(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#FixedGapTermsIndexWriter(SegmentWriteState).mjava","sourceNew":"  public FixedGapTermsIndexWriter(SegmentWriteState state) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_INDEX_EXTENSION);\n    termIndexInterval = state.termIndexInterval;\n    out = state.directory.createOutput(indexFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      out.writeInt(termIndexInterval);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, out);\n      }\n    }\n  }\n\n","sourceOld":"  public FixedGapTermsIndexWriter(SegmentWriteState state) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_INDEX_EXTENSION);\n    termIndexInterval = state.termIndexInterval;\n    out = state.directory.createOutput(indexFileName);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      out.writeInt(termIndexInterval);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24230fe54121f9be9d85f2c2067536296785e421","date":1314462346,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#FixedGapTermsIndexWriter(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#FixedGapTermsIndexWriter(SegmentWriteState).mjava","sourceNew":"  public FixedGapTermsIndexWriter(SegmentWriteState state) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_INDEX_EXTENSION);\n    termIndexInterval = state.termIndexInterval;\n    out = state.directory.createOutput(indexFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      out.writeInt(termIndexInterval);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public FixedGapTermsIndexWriter(SegmentWriteState state) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_INDEX_EXTENSION);\n    termIndexInterval = state.termIndexInterval;\n    out = state.directory.createOutput(indexFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      out.writeInt(termIndexInterval);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#FixedGapTermsIndexWriter(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#FixedGapTermsIndexWriter(SegmentWriteState).mjava","sourceNew":"  public FixedGapTermsIndexWriter(SegmentWriteState state) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n    termIndexInterval = state.termIndexInterval;\n    out = state.directory.createOutput(indexFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      out.writeInt(termIndexInterval);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public FixedGapTermsIndexWriter(SegmentWriteState state) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_INDEX_EXTENSION);\n    termIndexInterval = state.termIndexInterval;\n    out = state.directory.createOutput(indexFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      out.writeInt(termIndexInterval);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/FixedGapTermsIndexWriter#FixedGapTermsIndexWriter(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#FixedGapTermsIndexWriter(SegmentWriteState).mjava","sourceNew":"  public FixedGapTermsIndexWriter(SegmentWriteState state) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n    termIndexInterval = state.termIndexInterval;\n    out = state.directory.createOutput(indexFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      out.writeInt(termIndexInterval);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public FixedGapTermsIndexWriter(SegmentWriteState state) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n    termIndexInterval = state.termIndexInterval;\n    out = state.directory.createOutput(indexFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      out.writeInt(termIndexInterval);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24230fe54121f9be9d85f2c2067536296785e421":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"70ad682703b8585f5d0a637efec044d57ec05efb":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","fdc49cf4bbf2603a647b53ff5cfa6878743a3ffe"],"16c697f6ca5cdc82f918f753317a4ac9c70d259f":["99cf56f3a650b908f7017a72f9d23940418f8a52"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["99cf56f3a650b908f7017a72f9d23940418f8a52","16c697f6ca5cdc82f918f753317a4ac9c70d259f"],"efb7a19703a037c29e30440260d393500febc1f4":["fdc49cf4bbf2603a647b53ff5cfa6878743a3ffe"],"0150c6e116b24d66f02d63fcb0758f336e8791e2":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["efb7a19703a037c29e30440260d393500febc1f4"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","16c697f6ca5cdc82f918f753317a4ac9c70d259f"],"7b91922b55d15444d554721b352861d028eb8278":["24230fe54121f9be9d85f2c2067536296785e421"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["fdc49cf4bbf2603a647b53ff5cfa6878743a3ffe","efb7a19703a037c29e30440260d393500febc1f4"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["70ad682703b8585f5d0a637efec044d57ec05efb","fdc49cf4bbf2603a647b53ff5cfa6878743a3ffe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["efb7a19703a037c29e30440260d393500febc1f4","639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["7b91922b55d15444d554721b352861d028eb8278"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fdc49cf4bbf2603a647b53ff5cfa6878743a3ffe"],"fdc49cf4bbf2603a647b53ff5cfa6878743a3ffe":["16c697f6ca5cdc82f918f753317a4ac9c70d259f"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["d619839baa8ce5503e496b94a9e42ad6f079293f","efb7a19703a037c29e30440260d393500febc1f4"]},"commit2Childs":{"24230fe54121f9be9d85f2c2067536296785e421":["7b91922b55d15444d554721b352861d028eb8278"],"70ad682703b8585f5d0a637efec044d57ec05efb":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["70ad682703b8585f5d0a637efec044d57ec05efb"],"16c697f6ca5cdc82f918f753317a4ac9c70d259f":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fdc49cf4bbf2603a647b53ff5cfa6878743a3ffe"],"efb7a19703a037c29e30440260d393500febc1f4":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","ddc4c914be86e34b54f70023f45a60fa7f04e929","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"0150c6e116b24d66f02d63fcb0758f336e8791e2":[],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"7b91922b55d15444d554721b352861d028eb8278":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","99cf56f3a650b908f7017a72f9d23940418f8a52"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["24230fe54121f9be9d85f2c2067536296785e421","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"fdc49cf4bbf2603a647b53ff5cfa6878743a3ffe":["70ad682703b8585f5d0a637efec044d57ec05efb","efb7a19703a037c29e30440260d393500febc1f4","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","d619839baa8ce5503e496b94a9e42ad6f079293f","868da859b43505d9d2a023bfeae6dd0c795f5295"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["16c697f6ca5cdc82f918f753317a4ac9c70d259f","9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["0150c6e116b24d66f02d63fcb0758f336e8791e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0150c6e116b24d66f02d63fcb0758f336e8791e2","5d004d0e0b3f65bb40da76d476d659d7888270e8","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}