{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDRadixSelector#partition(OfflinePointWriter,PointWriter,PointWriter,PointWriter,long,long,int,int,long).mjava","commits":[{"id":"78bdc7d6906146edb12a1a6c1f765ba680ed5124","date":1549523533,"type":0,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDRadixSelector#partition(OfflinePointWriter,PointWriter,PointWriter,PointWriter,long,long,int,int,long).mjava","pathOld":"/dev/null","sourceNew":"  private void partition(OfflinePointWriter points, PointWriter left, PointWriter right, PointWriter deltaPoints,\n                           long from, long to, int dim, int bytePosition, long numDocsTiebreak) throws IOException {\n    assert bytePosition == bytesSorted -1 || deltaPoints != null;\n    long tiebreakCounter = 0;\n    try (OfflinePointReader reader = points.getReader(from, to - from, offlineBuffer)) {\n      while (reader.next()) {\n        reader.packedValueWithDocId(bytesRef1);\n        reader.packedValue(bytesRef2);\n        int docID = reader.docID();\n        int bucket;\n        if (bytePosition < bytesPerDim) {\n          bucket = bytesRef1.bytes[bytesRef1.offset + dim * bytesPerDim + bytePosition] & 0xff;\n        } else {\n          bucket = bytesRef1.bytes[bytesRef1.offset + packedBytesLength + bytePosition - bytesPerDim] & 0xff;\n        }\n        //int bucket = getBucket(bytesRef1, dim, thisCommonPrefix);\n        if (bucket < this.partitionBucket[bytePosition]) {\n          // to the left side\n          left.append(bytesRef2, docID);\n        } else if (bucket > this.partitionBucket[bytePosition]) {\n          // to the right side\n          right.append(bytesRef2, docID);\n        } else {\n          if (bytePosition == bytesSorted - 1) {\n            if (tiebreakCounter < numDocsTiebreak) {\n              left.append(bytesRef2, docID);\n              tiebreakCounter++;\n            } else {\n              right.append(bytesRef2, docID);\n            }\n          } else {\n            deltaPoints.append(bytesRef2, docID);\n          }\n        }\n      }\n    }\n    //Delete original file\n    points.destroy();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a69ebf290ab26d026cc224e517e0d93d931ac87b","date":1549869083,"type":5,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDRadixSelector#offlinePartition(OfflinePointWriter,PointWriter,PointWriter,PointWriter,long,long,int,int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDRadixSelector#partition(OfflinePointWriter,PointWriter,PointWriter,PointWriter,long,long,int,int,long).mjava","sourceNew":"  private void offlinePartition(OfflinePointWriter points, PointWriter left, PointWriter right, PointWriter deltaPoints,\n                                long from, long to, int dim, int bytePosition, long numDocsTiebreak) throws IOException {\n    assert bytePosition == bytesSorted -1 || deltaPoints != null;\n    long tiebreakCounter = 0;\n    try (OfflinePointReader reader = points.getReader(from, to - from, offlineBuffer)) {\n      while (reader.next()) {\n        reader.packedValueWithDocId(bytesRef1);\n        reader.packedValue(bytesRef2);\n        int docID = reader.docID();\n        int bucket;\n        if (bytePosition < bytesPerDim) {\n          bucket = bytesRef1.bytes[bytesRef1.offset + dim * bytesPerDim + bytePosition] & 0xff;\n        } else {\n          bucket = bytesRef1.bytes[bytesRef1.offset + packedBytesLength + bytePosition - bytesPerDim] & 0xff;\n        }\n        //int bucket = getBucket(bytesRef1, dim, thisCommonPrefix);\n        if (bucket < this.partitionBucket[bytePosition]) {\n          // to the left side\n          left.append(bytesRef2, docID);\n        } else if (bucket > this.partitionBucket[bytePosition]) {\n          // to the right side\n          right.append(bytesRef2, docID);\n        } else {\n          if (bytePosition == bytesSorted - 1) {\n            if (tiebreakCounter < numDocsTiebreak) {\n              left.append(bytesRef2, docID);\n              tiebreakCounter++;\n            } else {\n              right.append(bytesRef2, docID);\n            }\n          } else {\n            deltaPoints.append(bytesRef2, docID);\n          }\n        }\n      }\n    }\n    //Delete original file\n    points.destroy();\n  }\n\n","sourceOld":"  private void partition(OfflinePointWriter points, PointWriter left, PointWriter right, PointWriter deltaPoints,\n                           long from, long to, int dim, int bytePosition, long numDocsTiebreak) throws IOException {\n    assert bytePosition == bytesSorted -1 || deltaPoints != null;\n    long tiebreakCounter = 0;\n    try (OfflinePointReader reader = points.getReader(from, to - from, offlineBuffer)) {\n      while (reader.next()) {\n        reader.packedValueWithDocId(bytesRef1);\n        reader.packedValue(bytesRef2);\n        int docID = reader.docID();\n        int bucket;\n        if (bytePosition < bytesPerDim) {\n          bucket = bytesRef1.bytes[bytesRef1.offset + dim * bytesPerDim + bytePosition] & 0xff;\n        } else {\n          bucket = bytesRef1.bytes[bytesRef1.offset + packedBytesLength + bytePosition - bytesPerDim] & 0xff;\n        }\n        //int bucket = getBucket(bytesRef1, dim, thisCommonPrefix);\n        if (bucket < this.partitionBucket[bytePosition]) {\n          // to the left side\n          left.append(bytesRef2, docID);\n        } else if (bucket > this.partitionBucket[bytePosition]) {\n          // to the right side\n          right.append(bytesRef2, docID);\n        } else {\n          if (bytePosition == bytesSorted - 1) {\n            if (tiebreakCounter < numDocsTiebreak) {\n              left.append(bytesRef2, docID);\n              tiebreakCounter++;\n            } else {\n              right.append(bytesRef2, docID);\n            }\n          } else {\n            deltaPoints.append(bytesRef2, docID);\n          }\n        }\n      }\n    }\n    //Delete original file\n    points.destroy();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a69ebf290ab26d026cc224e517e0d93d931ac87b":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a69ebf290ab26d026cc224e517e0d93d931ac87b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["a69ebf290ab26d026cc224e517e0d93d931ac87b"],"a69ebf290ab26d026cc224e517e0d93d931ac87b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}