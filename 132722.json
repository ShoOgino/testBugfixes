{"path":"lucene/backwards/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testFarsi().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testFarsi().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testFarsi().mjava","sourceNew":"  public void testFarsi() throws Exception {\n\n    /* build an index */\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new SimpleAnalyzer(), T,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc\n        .add(new Field(\"body\", \"body\", Field.Store.YES,\n            Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator. However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is\n    // not supported).\n    ScoreDoc[] result = search.search(csrq(\"content\", \"\\u062F\", \"\\u0698\", T, T,\n        c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = search.search(csrq(\"content\", \"\\u0633\", \"\\u0638\", T, T, c), null,\n        1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","sourceOld":"  public void testFarsi() throws Exception {\n\n    /* build an index */\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new SimpleAnalyzer(), T,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc\n        .add(new Field(\"body\", \"body\", Field.Store.YES,\n            Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator. However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is\n    // not supported).\n    ScoreDoc[] result = search.search(csrq(\"content\", \"\\u062F\", \"\\u0698\", T, T,\n        c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = search.search(csrq(\"content\", \"\\u0633\", \"\\u0638\", T, T, c), null,\n        1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testFarsi().mjava","sourceNew":null,"sourceOld":"  public void testFarsi() throws Exception {\n\n    /* build an index */\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new SimpleAnalyzer(), T,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc\n        .add(new Field(\"body\", \"body\", Field.Store.YES,\n            Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator. However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is\n    // not supported).\n    ScoreDoc[] result = search.search(csrq(\"content\", \"\\u062F\", \"\\u0698\", T, T,\n        c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = search.search(csrq(\"content\", \"\\u0633\", \"\\u0638\", T, T, c), null,\n        1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}