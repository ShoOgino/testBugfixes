{"path":"lucene/src/java/org/apache/lucene/index/Term#createTerm(BytesRef).mjava","commits":[{"id":"4f29ba80b723649f5feb7e37afe1a558dd2c1304","date":1278318805,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/Term#createTerm(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Optimized construction of new Terms by reusing same field as this Term\n   * - avoids field.intern() overhead \n   * <p>WARNING: the provided BytesRef is not copied, but used directly.\n   * Therefore the bytes should not be modified after construction, for\n   * example, you should clone a copy rather than pass reused bytes from\n   * a TermsEnum.\n   * @param text The bytes of the new term (field is implicitly same as this Term instance)\n   * @return A new Term\n   */\n  public Term createTerm(BytesRef bytes)\n  {\n      return new Term(field,bytes,false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/Term#createTerm(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Optimized construction of new Terms by reusing same field as this Term\n   * - avoids field.intern() overhead \n   * <p>WARNING: the provided BytesRef is not copied, but used directly.\n   * Therefore the bytes should not be modified after construction, for\n   * example, you should clone a copy rather than pass reused bytes from\n   * a TermsEnum.\n   * @param text The bytes of the new term (field is implicitly same as this Term instance)\n   * @return A new Term\n   */\n  public Term createTerm(BytesRef bytes)\n  {\n      return new Term(field,bytes,false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"444ad7e7387cb262e7c9515d0847b4082e7227a3","date":1283181885,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/Term#createTerm(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/Term#createTerm(BytesRef).mjava","sourceNew":"  /**\n   * Optimized construction of new Terms by reusing same field as this Term\n   * - avoids field.intern() overhead \n   * <p>WARNING: the provided BytesRef is not copied, but used directly.\n   * Therefore the bytes should not be modified after construction, for\n   * example, you should clone a copy rather than pass reused bytes from\n   * a TermsEnum.\n   * @param bytes The bytes of the new term (field is implicitly same as this Term instance)\n   * @return A new Term\n   */\n  public Term createTerm(BytesRef bytes)\n  {\n      return new Term(field,bytes,false);\n  }\n\n","sourceOld":"  /**\n   * Optimized construction of new Terms by reusing same field as this Term\n   * - avoids field.intern() overhead \n   * <p>WARNING: the provided BytesRef is not copied, but used directly.\n   * Therefore the bytes should not be modified after construction, for\n   * example, you should clone a copy rather than pass reused bytes from\n   * a TermsEnum.\n   * @param text The bytes of the new term (field is implicitly same as this Term instance)\n   * @return A new Term\n   */\n  public Term createTerm(BytesRef bytes)\n  {\n      return new Term(field,bytes,false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/Term#createTerm(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/Term#createTerm(BytesRef).mjava","sourceNew":"  /**\n   * Optimized construction of new Terms by reusing same field as this Term\n   * - avoids field.intern() overhead \n   * <p>WARNING: the provided BytesRef is not copied, but used directly.\n   * Therefore the bytes should not be modified after construction, for\n   * example, you should clone a copy rather than pass reused bytes from\n   * a TermsEnum.\n   * @param bytes The bytes of the new term (field is implicitly same as this Term instance)\n   * @return A new Term\n   */\n  public Term createTerm(BytesRef bytes)\n  {\n      return new Term(field,bytes,false);\n  }\n\n","sourceOld":"  /**\n   * Optimized construction of new Terms by reusing same field as this Term\n   * - avoids field.intern() overhead \n   * <p>WARNING: the provided BytesRef is not copied, but used directly.\n   * Therefore the bytes should not be modified after construction, for\n   * example, you should clone a copy rather than pass reused bytes from\n   * a TermsEnum.\n   * @param text The bytes of the new term (field is implicitly same as this Term instance)\n   * @return A new Term\n   */\n  public Term createTerm(BytesRef bytes)\n  {\n      return new Term(field,bytes,false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","date":1308670974,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/Term#createTerm(BytesRef).mjava","sourceNew":null,"sourceOld":"  /**\n   * Optimized construction of new Terms by reusing same field as this Term\n   * - avoids field.intern() overhead \n   * <p>WARNING: the provided BytesRef is not copied, but used directly.\n   * Therefore the bytes should not be modified after construction, for\n   * example, you should clone a copy rather than pass reused bytes from\n   * a TermsEnum.\n   * @param bytes The bytes of the new term (field is implicitly same as this Term instance)\n   * @return A new Term\n   */\n  public Term createTerm(BytesRef bytes)\n  {\n      return new Term(field,bytes,false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/Term#createTerm(BytesRef).mjava","sourceNew":null,"sourceOld":"  /**\n   * Optimized construction of new Terms by reusing same field as this Term\n   * - avoids field.intern() overhead \n   * <p>WARNING: the provided BytesRef is not copied, but used directly.\n   * Therefore the bytes should not be modified after construction, for\n   * example, you should clone a copy rather than pass reused bytes from\n   * a TermsEnum.\n   * @param bytes The bytes of the new term (field is implicitly same as this Term instance)\n   * @return A new Term\n   */\n  public Term createTerm(BytesRef bytes)\n  {\n      return new Term(field,bytes,false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/Term#createTerm(BytesRef).mjava","sourceNew":null,"sourceOld":"  /**\n   * Optimized construction of new Terms by reusing same field as this Term\n   * - avoids field.intern() overhead \n   * <p>WARNING: the provided BytesRef is not copied, but used directly.\n   * Therefore the bytes should not be modified after construction, for\n   * example, you should clone a copy rather than pass reused bytes from\n   * a TermsEnum.\n   * @param bytes The bytes of the new term (field is implicitly same as this Term instance)\n   * @return A new Term\n   */\n  public Term createTerm(BytesRef bytes)\n  {\n      return new Term(field,bytes,false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"444ad7e7387cb262e7c9515d0847b4082e7227a3":["4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["444ad7e7387cb262e7c9515d0847b4082e7227a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"2553b00f699380c64959ccb27991289aae87be2e":["444ad7e7387cb262e7c9515d0847b4082e7227a3","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","444ad7e7387cb262e7c9515d0847b4082e7227a3"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["444ad7e7387cb262e7c9515d0847b4082e7227a3","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"]},"commit2Childs":{"444ad7e7387cb262e7c9515d0847b4082e7227a3":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","2553b00f699380c64959ccb27991289aae87be2e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["444ad7e7387cb262e7c9515d0847b4082e7227a3","5f4e87790277826a2aea119328600dfb07761f32"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4f29ba80b723649f5feb7e37afe1a558dd2c1304","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"2553b00f699380c64959ccb27991289aae87be2e":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}