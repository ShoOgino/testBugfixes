{"path":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#processAliases(Aliases,List[String]).mjava","commits":[{"id":"a760e2135dfe20a04dea360873d4de1c6a0280bb","date":1430762855,"type":1,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#processAliases(Aliases,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#processAliases(SolrQueryRequest,Aliases,List[String]).mjava","sourceNew":"  private void processAliases(Aliases aliases,\n                              List<String> collectionsList) {\n    String collection = solrReq.getParams().get(\"collection\");\n    if (collection != null) {\n      collectionsList = StrUtils.splitSmart(collection, \",\", true);\n    }\n    if (collectionsList != null) {\n      Set<String> newCollectionsList = new HashSet<>(\n          collectionsList.size());\n      for (String col : collectionsList) {\n        String al = aliases.getCollectionAlias(col);\n        if (al != null) {\n          List<String> aliasList = StrUtils.splitSmart(al, \",\", true);\n          newCollectionsList.addAll(aliasList);\n        } else {\n          newCollectionsList.add(col);\n        }\n      }\n      if (newCollectionsList.size() > 0) {\n        StringBuilder collectionString = new StringBuilder();\n        Iterator<String> it = newCollectionsList.iterator();\n        int sz = newCollectionsList.size();\n        for (int i = 0; i < sz; i++) {\n          collectionString.append(it.next());\n          if (i < newCollectionsList.size() - 1) {\n            collectionString.append(\",\");\n          }\n        }\n        ModifiableSolrParams params = new ModifiableSolrParams(\n            solrReq.getParams());\n        params.set(\"collection\", collectionString.toString());\n        solrReq.setParams(params);\n      }\n    }\n  }\n\n","sourceOld":"  private void processAliases(SolrQueryRequest solrReq, Aliases aliases,\n      List<String> collectionsList) {\n    String collection = solrReq.getParams().get(\"collection\");\n    if (collection != null) {\n      collectionsList = StrUtils.splitSmart(collection, \",\", true);\n    }\n    if (collectionsList != null) {\n      Set<String> newCollectionsList = new HashSet<>(\n          collectionsList.size());\n      for (String col : collectionsList) {\n        String al = aliases.getCollectionAlias(col);\n        if (al != null) {\n          List<String> aliasList = StrUtils.splitSmart(al, \",\", true);\n          newCollectionsList.addAll(aliasList);\n        } else {\n          newCollectionsList.add(col);\n        }\n      }\n      if (newCollectionsList.size() > 0) {\n        StringBuilder collectionString = new StringBuilder();\n        Iterator<String> it = newCollectionsList.iterator();\n        int sz = newCollectionsList.size();\n        for (int i = 0; i < sz; i++) {\n          collectionString.append(it.next());\n          if (i < newCollectionsList.size() - 1) {\n            collectionString.append(\",\");\n          }\n        }\n        ModifiableSolrParams params = new ModifiableSolrParams(\n            solrReq.getParams());\n        params.set(\"collection\", collectionString.toString());\n        solrReq.setParams(params);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00e1c8e1340d9e31d2c6bee5f72d9040ce569049","date":1431584404,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#processAliases(Aliases,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#processAliases(Aliases,List[String]).mjava","sourceNew":"  private void processAliases(Aliases aliases,\n                              List<String> collectionsList) {\n    String collection = solrReq.getParams().get(COLLECTION_PROP);\n    if (collection != null) {\n      collectionsList = StrUtils.splitSmart(collection, \",\", true);\n    }\n    if (collectionsList != null) {\n      Set<String> newCollectionsList = new HashSet<>(\n          collectionsList.size());\n      for (String col : collectionsList) {\n        String al = aliases.getCollectionAlias(col);\n        if (al != null) {\n          List<String> aliasList = StrUtils.splitSmart(al, \",\", true);\n          newCollectionsList.addAll(aliasList);\n        } else {\n          newCollectionsList.add(col);\n        }\n      }\n      if (newCollectionsList.size() > 0) {\n        StringBuilder collectionString = new StringBuilder();\n        Iterator<String> it = newCollectionsList.iterator();\n        int sz = newCollectionsList.size();\n        for (int i = 0; i < sz; i++) {\n          collectionString.append(it.next());\n          if (i < newCollectionsList.size() - 1) {\n            collectionString.append(\",\");\n          }\n        }\n        ModifiableSolrParams params = new ModifiableSolrParams(\n            solrReq.getParams());\n        params.set(COLLECTION_PROP, collectionString.toString());\n        solrReq.setParams(params);\n      }\n    }\n  }\n\n","sourceOld":"  private void processAliases(Aliases aliases,\n                              List<String> collectionsList) {\n    String collection = solrReq.getParams().get(\"collection\");\n    if (collection != null) {\n      collectionsList = StrUtils.splitSmart(collection, \",\", true);\n    }\n    if (collectionsList != null) {\n      Set<String> newCollectionsList = new HashSet<>(\n          collectionsList.size());\n      for (String col : collectionsList) {\n        String al = aliases.getCollectionAlias(col);\n        if (al != null) {\n          List<String> aliasList = StrUtils.splitSmart(al, \",\", true);\n          newCollectionsList.addAll(aliasList);\n        } else {\n          newCollectionsList.add(col);\n        }\n      }\n      if (newCollectionsList.size() > 0) {\n        StringBuilder collectionString = new StringBuilder();\n        Iterator<String> it = newCollectionsList.iterator();\n        int sz = newCollectionsList.size();\n        for (int i = 0; i < sz; i++) {\n          collectionString.append(it.next());\n          if (i < newCollectionsList.size() - 1) {\n            collectionString.append(\",\");\n          }\n        }\n        ModifiableSolrParams params = new ModifiableSolrParams(\n            solrReq.getParams());\n        params.set(\"collection\", collectionString.toString());\n        solrReq.setParams(params);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#processAliases(Aliases,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#processAliases(Aliases,List[String]).mjava","sourceNew":"  protected void processAliases(Aliases aliases,\n                              List<String> collectionsList) {\n    String collection = solrReq.getParams().get(COLLECTION_PROP);\n    if (collection != null) {\n      collectionsList = StrUtils.splitSmart(collection, \",\", true);\n    }\n    if (collectionsList != null) {\n      Set<String> newCollectionsList = new HashSet<>(\n          collectionsList.size());\n      for (String col : collectionsList) {\n        String al = aliases.getCollectionAlias(col);\n        if (al != null) {\n          List<String> aliasList = StrUtils.splitSmart(al, \",\", true);\n          newCollectionsList.addAll(aliasList);\n        } else {\n          newCollectionsList.add(col);\n        }\n      }\n      if (newCollectionsList.size() > 0) {\n        StringBuilder collectionString = new StringBuilder();\n        Iterator<String> it = newCollectionsList.iterator();\n        int sz = newCollectionsList.size();\n        for (int i = 0; i < sz; i++) {\n          collectionString.append(it.next());\n          if (i < newCollectionsList.size() - 1) {\n            collectionString.append(\",\");\n          }\n        }\n        ModifiableSolrParams params = new ModifiableSolrParams(\n            solrReq.getParams());\n        params.set(COLLECTION_PROP, collectionString.toString());\n        solrReq.setParams(params);\n      }\n    }\n  }\n\n","sourceOld":"  private void processAliases(Aliases aliases,\n                              List<String> collectionsList) {\n    String collection = solrReq.getParams().get(COLLECTION_PROP);\n    if (collection != null) {\n      collectionsList = StrUtils.splitSmart(collection, \",\", true);\n    }\n    if (collectionsList != null) {\n      Set<String> newCollectionsList = new HashSet<>(\n          collectionsList.size());\n      for (String col : collectionsList) {\n        String al = aliases.getCollectionAlias(col);\n        if (al != null) {\n          List<String> aliasList = StrUtils.splitSmart(al, \",\", true);\n          newCollectionsList.addAll(aliasList);\n        } else {\n          newCollectionsList.add(col);\n        }\n      }\n      if (newCollectionsList.size() > 0) {\n        StringBuilder collectionString = new StringBuilder();\n        Iterator<String> it = newCollectionsList.iterator();\n        int sz = newCollectionsList.size();\n        for (int i = 0; i < sz; i++) {\n          collectionString.append(it.next());\n          if (i < newCollectionsList.size() - 1) {\n            collectionString.append(\",\");\n          }\n        }\n        ModifiableSolrParams params = new ModifiableSolrParams(\n            solrReq.getParams());\n        params.set(COLLECTION_PROP, collectionString.toString());\n        solrReq.setParams(params);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#processAliases(Aliases,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#processAliases(Aliases,List[String]).mjava","sourceNew":"  protected void processAliases(Aliases aliases,\n                              List<String> collectionsList) {\n    String collection = solrReq.getParams().get(COLLECTION_PROP);\n    if (collection != null) {\n      collectionsList = StrUtils.splitSmart(collection, \",\", true);\n    }\n    if (collectionsList != null) {\n      Set<String> newCollectionsList = new HashSet<>(\n          collectionsList.size());\n      for (String col : collectionsList) {\n        String al = aliases.getCollectionAlias(col);\n        if (al != null) {\n          List<String> aliasList = StrUtils.splitSmart(al, \",\", true);\n          newCollectionsList.addAll(aliasList);\n        } else {\n          newCollectionsList.add(col);\n        }\n      }\n      if (newCollectionsList.size() > 0) {\n        StringBuilder collectionString = new StringBuilder();\n        Iterator<String> it = newCollectionsList.iterator();\n        int sz = newCollectionsList.size();\n        for (int i = 0; i < sz; i++) {\n          collectionString.append(it.next());\n          if (i < newCollectionsList.size() - 1) {\n            collectionString.append(\",\");\n          }\n        }\n        ModifiableSolrParams params = new ModifiableSolrParams(\n            solrReq.getParams());\n        params.set(COLLECTION_PROP, collectionString.toString());\n        solrReq.setParams(params);\n      }\n    }\n  }\n\n","sourceOld":"  private void processAliases(Aliases aliases,\n                              List<String> collectionsList) {\n    String collection = solrReq.getParams().get(COLLECTION_PROP);\n    if (collection != null) {\n      collectionsList = StrUtils.splitSmart(collection, \",\", true);\n    }\n    if (collectionsList != null) {\n      Set<String> newCollectionsList = new HashSet<>(\n          collectionsList.size());\n      for (String col : collectionsList) {\n        String al = aliases.getCollectionAlias(col);\n        if (al != null) {\n          List<String> aliasList = StrUtils.splitSmart(al, \",\", true);\n          newCollectionsList.addAll(aliasList);\n        } else {\n          newCollectionsList.add(col);\n        }\n      }\n      if (newCollectionsList.size() > 0) {\n        StringBuilder collectionString = new StringBuilder();\n        Iterator<String> it = newCollectionsList.iterator();\n        int sz = newCollectionsList.size();\n        for (int i = 0; i < sz; i++) {\n          collectionString.append(it.next());\n          if (i < newCollectionsList.size() - 1) {\n            collectionString.append(\",\");\n          }\n        }\n        ModifiableSolrParams params = new ModifiableSolrParams(\n            solrReq.getParams());\n        params.set(COLLECTION_PROP, collectionString.toString());\n        solrReq.setParams(params);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b824daa61db3f30b91a22213d6c04e1fa2e2b06","date":1508385744,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#processAliases(Aliases,List[String]).mjava","sourceNew":null,"sourceOld":"  protected void processAliases(Aliases aliases,\n                              List<String> collectionsList) {\n    String collection = solrReq.getParams().get(COLLECTION_PROP);\n    if (collection != null) {\n      collectionsList = StrUtils.splitSmart(collection, \",\", true);\n    }\n    if (collectionsList != null) {\n      Set<String> newCollectionsList = new HashSet<>(\n          collectionsList.size());\n      for (String col : collectionsList) {\n        String al = aliases.getCollectionAlias(col);\n        if (al != null) {\n          List<String> aliasList = StrUtils.splitSmart(al, \",\", true);\n          newCollectionsList.addAll(aliasList);\n        } else {\n          newCollectionsList.add(col);\n        }\n      }\n      if (newCollectionsList.size() > 0) {\n        StringBuilder collectionString = new StringBuilder();\n        Iterator<String> it = newCollectionsList.iterator();\n        int sz = newCollectionsList.size();\n        for (int i = 0; i < sz; i++) {\n          collectionString.append(it.next());\n          if (i < newCollectionsList.size() - 1) {\n            collectionString.append(\",\");\n          }\n        }\n        ModifiableSolrParams params = new ModifiableSolrParams(\n            solrReq.getParams());\n        params.set(COLLECTION_PROP, collectionString.toString());\n        solrReq.setParams(params);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6b824daa61db3f30b91a22213d6c04e1fa2e2b06":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["00e1c8e1340d9e31d2c6bee5f72d9040ce569049"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["00e1c8e1340d9e31d2c6bee5f72d9040ce569049","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"a760e2135dfe20a04dea360873d4de1c6a0280bb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06"],"00e1c8e1340d9e31d2c6bee5f72d9040ce569049":["a760e2135dfe20a04dea360873d4de1c6a0280bb"]},"commit2Childs":{"6b824daa61db3f30b91a22213d6c04e1fa2e2b06":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a760e2135dfe20a04dea360873d4de1c6a0280bb"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"a760e2135dfe20a04dea360873d4de1c6a0280bb":["00e1c8e1340d9e31d2c6bee5f72d9040ce569049"],"00e1c8e1340d9e31d2c6bee5f72d9040ce569049":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}