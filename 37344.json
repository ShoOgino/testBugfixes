{"path":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#inform(ResourceLoader).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#inform(ResourceLoader).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrResourceLoader#inform(ResourceLoader).mjava","sourceNew":"  /**\n   * Tell all {@link ResourceLoaderAware} instances about the loader\n   */\n  public void inform( ResourceLoader loader ) \n  {\n\n     // make a copy to avoid potential deadlock of a callback adding to the list\n    ResourceLoaderAware[] arr;\n\n    while (waitingForResources.size() > 0) {\n      synchronized (waitingForResources) {\n        arr = waitingForResources.toArray(new ResourceLoaderAware[waitingForResources.size()]);\n        waitingForResources.clear();\n      }\n\n      for( ResourceLoaderAware aware : arr) {\n        aware.inform(loader);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Tell all {@link ResourceLoaderAware} instances about the loader\n   */\n  public void inform( ResourceLoader loader ) \n  {\n\n     // make a copy to avoid potential deadlock of a callback adding to the list\n    ResourceLoaderAware[] arr;\n\n    while (waitingForResources.size() > 0) {\n      synchronized (waitingForResources) {\n        arr = waitingForResources.toArray(new ResourceLoaderAware[waitingForResources.size()]);\n        waitingForResources.clear();\n      }\n\n      for( ResourceLoaderAware aware : arr) {\n        aware.inform(loader);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#inform(ResourceLoader).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrResourceLoader#inform(ResourceLoader).mjava","sourceNew":"  /**\n   * Tell all {@link ResourceLoaderAware} instances about the loader\n   */\n  public void inform( ResourceLoader loader ) \n  {\n\n     // make a copy to avoid potential deadlock of a callback adding to the list\n    ResourceLoaderAware[] arr;\n\n    while (waitingForResources.size() > 0) {\n      synchronized (waitingForResources) {\n        arr = waitingForResources.toArray(new ResourceLoaderAware[waitingForResources.size()]);\n        waitingForResources.clear();\n      }\n\n      for( ResourceLoaderAware aware : arr) {\n        aware.inform(loader);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Tell all {@link ResourceLoaderAware} instances about the loader\n   */\n  public void inform( ResourceLoader loader ) \n  {\n\n     // make a copy to avoid potential deadlock of a callback adding to the list\n    ResourceLoaderAware[] arr;\n\n    while (waitingForResources.size() > 0) {\n      synchronized (waitingForResources) {\n        arr = waitingForResources.toArray(new ResourceLoaderAware[waitingForResources.size()]);\n        waitingForResources.clear();\n      }\n\n      for( ResourceLoaderAware aware : arr) {\n        aware.inform(loader);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#inform(ResourceLoader).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrResourceLoader#inform(ResourceLoader).mjava","sourceNew":"  /**\n   * Tell all {@link ResourceLoaderAware} instances about the loader\n   */\n  public void inform( ResourceLoader loader ) \n  {\n\n     // make a copy to avoid potential deadlock of a callback adding to the list\n    ResourceLoaderAware[] arr;\n\n    while (waitingForResources.size() > 0) {\n      synchronized (waitingForResources) {\n        arr = waitingForResources.toArray(new ResourceLoaderAware[waitingForResources.size()]);\n        waitingForResources.clear();\n      }\n\n      for( ResourceLoaderAware aware : arr) {\n        aware.inform(loader);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Tell all {@link ResourceLoaderAware} instances about the loader\n   */\n  public void inform( ResourceLoader loader ) \n  {\n\n     // make a copy to avoid potential deadlock of a callback adding to the list\n    ResourceLoaderAware[] arr;\n\n    while (waitingForResources.size() > 0) {\n      synchronized (waitingForResources) {\n        arr = waitingForResources.toArray(new ResourceLoaderAware[waitingForResources.size()]);\n        waitingForResources.clear();\n      }\n\n      for( ResourceLoaderAware aware : arr) {\n        aware.inform(loader);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6f80818731469e00f54165ec94aae2db868ea05","date":1343266866,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#inform(ResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#inform(ResourceLoader).mjava","sourceNew":"  /**\n   * Tell all {@link ResourceLoaderAware} instances about the loader\n   */\n  public void inform( ResourceLoader loader ) throws IOException\n  {\n\n     // make a copy to avoid potential deadlock of a callback adding to the list\n    ResourceLoaderAware[] arr;\n\n    while (waitingForResources.size() > 0) {\n      synchronized (waitingForResources) {\n        arr = waitingForResources.toArray(new ResourceLoaderAware[waitingForResources.size()]);\n        waitingForResources.clear();\n      }\n\n      for( ResourceLoaderAware aware : arr) {\n        aware.inform(loader);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Tell all {@link ResourceLoaderAware} instances about the loader\n   */\n  public void inform( ResourceLoader loader ) \n  {\n\n     // make a copy to avoid potential deadlock of a callback adding to the list\n    ResourceLoaderAware[] arr;\n\n    while (waitingForResources.size() > 0) {\n      synchronized (waitingForResources) {\n        arr = waitingForResources.toArray(new ResourceLoaderAware[waitingForResources.size()]);\n        waitingForResources.clear();\n      }\n\n      for( ResourceLoaderAware aware : arr) {\n        aware.inform(loader);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#inform(ResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#inform(ResourceLoader).mjava","sourceNew":"  /**\n   * Tell all {@link ResourceLoaderAware} instances about the loader\n   */\n  public void inform( ResourceLoader loader ) throws IOException\n  {\n\n     // make a copy to avoid potential deadlock of a callback adding to the list\n    ResourceLoaderAware[] arr;\n\n    while (waitingForResources.size() > 0) {\n      synchronized (waitingForResources) {\n        arr = waitingForResources.toArray(new ResourceLoaderAware[waitingForResources.size()]);\n        waitingForResources.clear();\n      }\n\n      for( ResourceLoaderAware aware : arr) {\n        aware.inform(loader);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Tell all {@link ResourceLoaderAware} instances about the loader\n   */\n  public void inform( ResourceLoader loader ) \n  {\n\n     // make a copy to avoid potential deadlock of a callback adding to the list\n    ResourceLoaderAware[] arr;\n\n    while (waitingForResources.size() > 0) {\n      synchronized (waitingForResources) {\n        arr = waitingForResources.toArray(new ResourceLoaderAware[waitingForResources.size()]);\n        waitingForResources.clear();\n      }\n\n      for( ResourceLoaderAware aware : arr) {\n        aware.inform(loader);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#inform(ResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#inform(ResourceLoader).mjava","sourceNew":"  /**\n   * Tell all {@link ResourceLoaderAware} instances about the loader\n   */\n  public void inform( ResourceLoader loader ) throws IOException\n  {\n\n     // make a copy to avoid potential deadlock of a callback adding to the list\n    ResourceLoaderAware[] arr;\n\n    while (waitingForResources.size() > 0) {\n      synchronized (waitingForResources) {\n        arr = waitingForResources.toArray(new ResourceLoaderAware[waitingForResources.size()]);\n        waitingForResources.clear();\n      }\n\n      for( ResourceLoaderAware aware : arr) {\n        aware.inform(loader);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Tell all {@link ResourceLoaderAware} instances about the loader\n   */\n  public void inform( ResourceLoader loader ) \n  {\n\n     // make a copy to avoid potential deadlock of a callback adding to the list\n    ResourceLoaderAware[] arr;\n\n    while (waitingForResources.size() > 0) {\n      synchronized (waitingForResources) {\n        arr = waitingForResources.toArray(new ResourceLoaderAware[waitingForResources.size()]);\n        waitingForResources.clear();\n      }\n\n      for( ResourceLoaderAware aware : arr) {\n        aware.inform(loader);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"954ae83b7dfacaa33d48ea056448ae11f7745a93","date":1571867711,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#inform(ResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#inform(ResourceLoader).mjava","sourceNew":"  /**\n   * Tell all {@link ResourceLoaderAware} instances about the loader\n   */\n  public void inform(ResourceLoader loader) throws IOException {\n\n    // make a copy to avoid potential deadlock of a callback adding to the list\n    ResourceLoaderAware[] arr;\n\n    while (waitingForResources.size() > 0) {\n      synchronized (waitingForResources) {\n        arr = waitingForResources.toArray(new ResourceLoaderAware[waitingForResources.size()]);\n        waitingForResources.clear();\n      }\n\n      for (ResourceLoaderAware aware : arr) {\n        aware.inform(loader);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Tell all {@link ResourceLoaderAware} instances about the loader\n   */\n  public void inform( ResourceLoader loader ) throws IOException\n  {\n\n     // make a copy to avoid potential deadlock of a callback adding to the list\n    ResourceLoaderAware[] arr;\n\n    while (waitingForResources.size() > 0) {\n      synchronized (waitingForResources) {\n        arr = waitingForResources.toArray(new ResourceLoaderAware[waitingForResources.size()]);\n        waitingForResources.clear();\n      }\n\n      for( ResourceLoaderAware aware : arr) {\n        aware.inform(loader);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f53fd7227ce17ccc6445b3433d004cb6ac33e08a","date":1600333804,"type":3,"author":"noblepaul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#inform(ResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#inform(ResourceLoader).mjava","sourceNew":"  /**\n   * Tell all {@link ResourceLoaderAware} instances about the loader\n   */\n  public void inform(ResourceLoader loader) throws IOException {\n\n    // make a copy to avoid potential deadlock of a callback adding to the list\n    ResourceLoaderAware[] arr;\n\n    while (waitingForResources.size() > 0) {\n      synchronized (waitingForResources) {\n        arr = waitingForResources.toArray(new ResourceLoaderAware[waitingForResources.size()]);\n        waitingForResources.clear();\n      }\n\n      for (ResourceLoaderAware aware : arr) {\n        CURRENT_AWARE.set(aware);\n        try{\n          aware.inform(loader);\n        } finally {\n          CURRENT_AWARE.remove();\n        }\n\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Tell all {@link ResourceLoaderAware} instances about the loader\n   */\n  public void inform(ResourceLoader loader) throws IOException {\n\n    // make a copy to avoid potential deadlock of a callback adding to the list\n    ResourceLoaderAware[] arr;\n\n    while (waitingForResources.size() > 0) {\n      synchronized (waitingForResources) {\n        arr = waitingForResources.toArray(new ResourceLoaderAware[waitingForResources.size()]);\n        waitingForResources.clear();\n      }\n\n      for (ResourceLoaderAware aware : arr) {\n        aware.inform(loader);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f3a7ad440719bd3745e24257995343834d7f4b3","date":1602047075,"type":3,"author":"noblepaul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#inform(ResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#inform(ResourceLoader).mjava","sourceNew":"  /**\n   * Tell all {@link ResourceLoaderAware} instances about the loader\n   */\n  public void inform(ResourceLoader loader) throws IOException {\n\n    // make a copy to avoid potential deadlock of a callback adding to the list\n    ResourceLoaderAware[] arr;\n\n    while (waitingForResources.size() > 0) {\n      synchronized (waitingForResources) {\n        arr = waitingForResources.toArray(new ResourceLoaderAware[waitingForResources.size()]);\n        waitingForResources.clear();\n      }\n\n      for (ResourceLoaderAware aware : arr) {\n        informAware(loader, aware);\n\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Tell all {@link ResourceLoaderAware} instances about the loader\n   */\n  public void inform(ResourceLoader loader) throws IOException {\n\n    // make a copy to avoid potential deadlock of a callback adding to the list\n    ResourceLoaderAware[] arr;\n\n    while (waitingForResources.size() > 0) {\n      synchronized (waitingForResources) {\n        arr = waitingForResources.toArray(new ResourceLoaderAware[waitingForResources.size()]);\n        waitingForResources.clear();\n      }\n\n      for (ResourceLoaderAware aware : arr) {\n        CURRENT_AWARE.set(aware);\n        try{\n          aware.inform(loader);\n        } finally {\n          CURRENT_AWARE.remove();\n        }\n\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f53fd7227ce17ccc6445b3433d004cb6ac33e08a":["954ae83b7dfacaa33d48ea056448ae11f7745a93"],"954ae83b7dfacaa33d48ea056448ae11f7745a93":["f6f80818731469e00f54165ec94aae2db868ea05"],"aba371508186796cc6151d8223a5b4e16d02e26e":["c26f00b574427b55127e869b935845554afde1fa","f6f80818731469e00f54165ec94aae2db868ea05"],"9f3a7ad440719bd3745e24257995343834d7f4b3":["f53fd7227ce17ccc6445b3433d004cb6ac33e08a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["c26f00b574427b55127e869b935845554afde1fa","f6f80818731469e00f54165ec94aae2db868ea05"],"f6f80818731469e00f54165ec94aae2db868ea05":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9f3a7ad440719bd3745e24257995343834d7f4b3"]},"commit2Childs":{"f53fd7227ce17ccc6445b3433d004cb6ac33e08a":["9f3a7ad440719bd3745e24257995343834d7f4b3"],"954ae83b7dfacaa33d48ea056448ae11f7745a93":["f53fd7227ce17ccc6445b3433d004cb6ac33e08a"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"9f3a7ad440719bd3745e24257995343834d7f4b3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","f6f80818731469e00f54165ec94aae2db868ea05"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"f6f80818731469e00f54165ec94aae2db868ea05":["954ae83b7dfacaa33d48ea056448ae11f7745a93","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}