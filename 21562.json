{"path":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","commits":[{"id":"78186e8256d3f75ec4673d08ff89841f1b6ed13a","date":1106177572,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","pathOld":"/dev/null","sourceNew":"    public void testBooleanQueryContainingSingleTermPrefixQuery() throws IOException {\n      // this tests against bug 33161 (now fixed)\n      // In order to cause the bug, the outer query must have more than one term \n      // and all terms required.\n      // The contained PhraseMultiQuery must contain exactly one term array.\n\n      RAMDirectory indexStore = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n      add(\"blueberry pie\", writer);\n      add(\"blueberry chewing gum\", writer);\n      add(\"blue raspberry pie\", writer);\n      writer.optimize();\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(indexStore);\n      // This query will be equivalent to +body:pie +body:\"blue*\"\n      BooleanQuery q = new BooleanQuery();\n      q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n\n      MultiPhraseQuery trouble = new MultiPhraseQuery();\n      trouble.add(new Term[] {\n          new Term(\"body\", \"blueberry\"),\n          new Term(\"body\", \"blue\")\n      });\n      q.add(trouble, BooleanClause.Occur.MUST);\n\n      // exception will be thrown here without fix\n      Hits hits = searcher.search(q);\n\n      assertEquals(\"Wrong number of hits\", 2, hits.length());\n      searcher.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","sourceNew":"    public void testBooleanQueryContainingSingleTermPrefixQuery() throws IOException {\n      // this tests against bug 33161 (now fixed)\n      // In order to cause the bug, the outer query must have more than one term \n      // and all terms required.\n      // The contained PhraseMultiQuery must contain exactly one term array.\n\n      RAMDirectory indexStore = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      add(\"blueberry pie\", writer);\n      add(\"blueberry chewing gum\", writer);\n      add(\"blue raspberry pie\", writer);\n      writer.optimize();\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(indexStore);\n      // This query will be equivalent to +body:pie +body:\"blue*\"\n      BooleanQuery q = new BooleanQuery();\n      q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n\n      MultiPhraseQuery trouble = new MultiPhraseQuery();\n      trouble.add(new Term[] {\n          new Term(\"body\", \"blueberry\"),\n          new Term(\"body\", \"blue\")\n      });\n      q.add(trouble, BooleanClause.Occur.MUST);\n\n      // exception will be thrown here without fix\n      Hits hits = searcher.search(q);\n\n      assertEquals(\"Wrong number of hits\", 2, hits.length());\n      searcher.close();\n  }\n\n","sourceOld":"    public void testBooleanQueryContainingSingleTermPrefixQuery() throws IOException {\n      // this tests against bug 33161 (now fixed)\n      // In order to cause the bug, the outer query must have more than one term \n      // and all terms required.\n      // The contained PhraseMultiQuery must contain exactly one term array.\n\n      RAMDirectory indexStore = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n      add(\"blueberry pie\", writer);\n      add(\"blueberry chewing gum\", writer);\n      add(\"blue raspberry pie\", writer);\n      writer.optimize();\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(indexStore);\n      // This query will be equivalent to +body:pie +body:\"blue*\"\n      BooleanQuery q = new BooleanQuery();\n      q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n\n      MultiPhraseQuery trouble = new MultiPhraseQuery();\n      trouble.add(new Term[] {\n          new Term(\"body\", \"blueberry\"),\n          new Term(\"body\", \"blue\")\n      });\n      q.add(trouble, BooleanClause.Occur.MUST);\n\n      // exception will be thrown here without fix\n      Hits hits = searcher.search(q);\n\n      assertEquals(\"Wrong number of hits\", 2, hits.length());\n      searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","sourceNew":"    public void testBooleanQueryContainingSingleTermPrefixQuery() throws IOException {\n      // this tests against bug 33161 (now fixed)\n      // In order to cause the bug, the outer query must have more than one term \n      // and all terms required.\n      // The contained PhraseMultiQuery must contain exactly one term array.\n\n      RAMDirectory indexStore = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      add(\"blueberry pie\", writer);\n      add(\"blueberry chewing gum\", writer);\n      add(\"blue raspberry pie\", writer);\n      writer.optimize();\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(indexStore);\n      // This query will be equivalent to +body:pie +body:\"blue*\"\n      BooleanQuery q = new BooleanQuery();\n      q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n\n      MultiPhraseQuery trouble = new MultiPhraseQuery();\n      trouble.add(new Term[] {\n          new Term(\"body\", \"blueberry\"),\n          new Term(\"body\", \"blue\")\n      });\n      q.add(trouble, BooleanClause.Occur.MUST);\n\n      // exception will be thrown here without fix\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n\n      assertEquals(\"Wrong number of hits\", 2, hits.length);\n      searcher.close();\n  }\n\n","sourceOld":"    public void testBooleanQueryContainingSingleTermPrefixQuery() throws IOException {\n      // this tests against bug 33161 (now fixed)\n      // In order to cause the bug, the outer query must have more than one term \n      // and all terms required.\n      // The contained PhraseMultiQuery must contain exactly one term array.\n\n      RAMDirectory indexStore = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      add(\"blueberry pie\", writer);\n      add(\"blueberry chewing gum\", writer);\n      add(\"blue raspberry pie\", writer);\n      writer.optimize();\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(indexStore);\n      // This query will be equivalent to +body:pie +body:\"blue*\"\n      BooleanQuery q = new BooleanQuery();\n      q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n\n      MultiPhraseQuery trouble = new MultiPhraseQuery();\n      trouble.add(new Term[] {\n          new Term(\"body\", \"blueberry\"),\n          new Term(\"body\", \"blue\")\n      });\n      q.add(trouble, BooleanClause.Occur.MUST);\n\n      // exception will be thrown here without fix\n      Hits hits = searcher.search(q);\n\n      assertEquals(\"Wrong number of hits\", 2, hits.length());\n      searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","sourceNew":"    public void testBooleanQueryContainingSingleTermPrefixQuery() throws IOException {\n      // this tests against bug 33161 (now fixed)\n      // In order to cause the bug, the outer query must have more than one term \n      // and all terms required.\n      // The contained PhraseMultiQuery must contain exactly one term array.\n\n      RAMDirectory indexStore = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      add(\"blueberry pie\", writer);\n      add(\"blueberry chewing gum\", writer);\n      add(\"blue raspberry pie\", writer);\n      writer.optimize();\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(indexStore, true);\n      // This query will be equivalent to +body:pie +body:\"blue*\"\n      BooleanQuery q = new BooleanQuery();\n      q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n\n      MultiPhraseQuery trouble = new MultiPhraseQuery();\n      trouble.add(new Term[] {\n          new Term(\"body\", \"blueberry\"),\n          new Term(\"body\", \"blue\")\n      });\n      q.add(trouble, BooleanClause.Occur.MUST);\n\n      // exception will be thrown here without fix\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n\n      assertEquals(\"Wrong number of hits\", 2, hits.length);\n      searcher.close();\n  }\n\n","sourceOld":"    public void testBooleanQueryContainingSingleTermPrefixQuery() throws IOException {\n      // this tests against bug 33161 (now fixed)\n      // In order to cause the bug, the outer query must have more than one term \n      // and all terms required.\n      // The contained PhraseMultiQuery must contain exactly one term array.\n\n      RAMDirectory indexStore = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      add(\"blueberry pie\", writer);\n      add(\"blueberry chewing gum\", writer);\n      add(\"blue raspberry pie\", writer);\n      writer.optimize();\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(indexStore);\n      // This query will be equivalent to +body:pie +body:\"blue*\"\n      BooleanQuery q = new BooleanQuery();\n      q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n\n      MultiPhraseQuery trouble = new MultiPhraseQuery();\n      trouble.add(new Term[] {\n          new Term(\"body\", \"blueberry\"),\n          new Term(\"body\", \"blue\")\n      });\n      q.add(trouble, BooleanClause.Occur.MUST);\n\n      // exception will be thrown here without fix\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n\n      assertEquals(\"Wrong number of hits\", 2, hits.length);\n      searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","sourceNew":"    public void testBooleanQueryContainingSingleTermPrefixQuery() throws IOException {\n      // this tests against bug 33161 (now fixed)\n      // In order to cause the bug, the outer query must have more than one term \n      // and all terms required.\n      // The contained PhraseMultiQuery must contain exactly one term array.\n\n      RAMDirectory indexStore = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      add(\"blueberry pie\", writer);\n      add(\"blueberry chewing gum\", writer);\n      add(\"blue raspberry pie\", writer);\n      writer.optimize();\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(indexStore, true);\n      // This query will be equivalent to +body:pie +body:\"blue*\"\n      BooleanQuery q = new BooleanQuery();\n      q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n\n      MultiPhraseQuery trouble = new MultiPhraseQuery();\n      trouble.add(new Term[] {\n          new Term(\"body\", \"blueberry\"),\n          new Term(\"body\", \"blue\")\n      });\n      q.add(trouble, BooleanClause.Occur.MUST);\n\n      // exception will be thrown here without fix\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n\n      assertEquals(\"Wrong number of hits\", 2, hits.length);\n      searcher.close();\n  }\n\n","sourceOld":"    public void testBooleanQueryContainingSingleTermPrefixQuery() throws IOException {\n      // this tests against bug 33161 (now fixed)\n      // In order to cause the bug, the outer query must have more than one term \n      // and all terms required.\n      // The contained PhraseMultiQuery must contain exactly one term array.\n\n      RAMDirectory indexStore = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      add(\"blueberry pie\", writer);\n      add(\"blueberry chewing gum\", writer);\n      add(\"blue raspberry pie\", writer);\n      writer.optimize();\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(indexStore);\n      // This query will be equivalent to +body:pie +body:\"blue*\"\n      BooleanQuery q = new BooleanQuery();\n      q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n\n      MultiPhraseQuery trouble = new MultiPhraseQuery();\n      trouble.add(new Term[] {\n          new Term(\"body\", \"blueberry\"),\n          new Term(\"body\", \"blue\")\n      });\n      q.add(trouble, BooleanClause.Occur.MUST);\n\n      // exception will be thrown here without fix\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n\n      assertEquals(\"Wrong number of hits\", 2, hits.length);\n      searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","sourceNew":"    public void testBooleanQueryContainingSingleTermPrefixQuery() throws IOException {\n      // this tests against bug 33161 (now fixed)\n      // In order to cause the bug, the outer query must have more than one term \n      // and all terms required.\n      // The contained PhraseMultiQuery must contain exactly one term array.\n\n      RAMDirectory indexStore = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      add(\"blueberry pie\", writer);\n      add(\"blueberry chewing gum\", writer);\n      add(\"blue raspberry pie\", writer);\n      writer.optimize();\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(indexStore, true);\n      // This query will be equivalent to +body:pie +body:\"blue*\"\n      BooleanQuery q = new BooleanQuery();\n      q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n\n      MultiPhraseQuery trouble = new MultiPhraseQuery();\n      trouble.add(new Term[] {\n          new Term(\"body\", \"blueberry\"),\n          new Term(\"body\", \"blue\")\n      });\n      q.add(trouble, BooleanClause.Occur.MUST);\n\n      // exception will be thrown here without fix\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n\n      assertEquals(\"Wrong number of hits\", 2, hits.length);\n      searcher.close();\n  }\n\n","sourceOld":"    public void testBooleanQueryContainingSingleTermPrefixQuery() throws IOException {\n      // this tests against bug 33161 (now fixed)\n      // In order to cause the bug, the outer query must have more than one term \n      // and all terms required.\n      // The contained PhraseMultiQuery must contain exactly one term array.\n\n      RAMDirectory indexStore = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      add(\"blueberry pie\", writer);\n      add(\"blueberry chewing gum\", writer);\n      add(\"blue raspberry pie\", writer);\n      writer.optimize();\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(indexStore, true);\n      // This query will be equivalent to +body:pie +body:\"blue*\"\n      BooleanQuery q = new BooleanQuery();\n      q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n\n      MultiPhraseQuery trouble = new MultiPhraseQuery();\n      trouble.add(new Term[] {\n          new Term(\"body\", \"blueberry\"),\n          new Term(\"body\", \"blue\")\n      });\n      q.add(trouble, BooleanClause.Occur.MUST);\n\n      // exception will be thrown here without fix\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n\n      assertEquals(\"Wrong number of hits\", 2, hits.length);\n      searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","sourceNew":"    public void testBooleanQueryContainingSingleTermPrefixQuery() throws IOException {\n      // this tests against bug 33161 (now fixed)\n      // In order to cause the bug, the outer query must have more than one term \n      // and all terms required.\n      // The contained PhraseMultiQuery must contain exactly one term array.\n\n      RAMDirectory indexStore = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      add(\"blueberry pie\", writer);\n      add(\"blueberry chewing gum\", writer);\n      add(\"blue raspberry pie\", writer);\n      writer.optimize();\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(indexStore, true);\n      // This query will be equivalent to +body:pie +body:\"blue*\"\n      BooleanQuery q = new BooleanQuery();\n      q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n\n      MultiPhraseQuery trouble = new MultiPhraseQuery();\n      trouble.add(new Term[] {\n          new Term(\"body\", \"blueberry\"),\n          new Term(\"body\", \"blue\")\n      });\n      q.add(trouble, BooleanClause.Occur.MUST);\n\n      // exception will be thrown here without fix\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n\n      assertEquals(\"Wrong number of hits\", 2, hits.length);\n      searcher.close();\n  }\n\n","sourceOld":"    public void testBooleanQueryContainingSingleTermPrefixQuery() throws IOException {\n      // this tests against bug 33161 (now fixed)\n      // In order to cause the bug, the outer query must have more than one term \n      // and all terms required.\n      // The contained PhraseMultiQuery must contain exactly one term array.\n\n      RAMDirectory indexStore = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      add(\"blueberry pie\", writer);\n      add(\"blueberry chewing gum\", writer);\n      add(\"blue raspberry pie\", writer);\n      writer.optimize();\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(indexStore, true);\n      // This query will be equivalent to +body:pie +body:\"blue*\"\n      BooleanQuery q = new BooleanQuery();\n      q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n\n      MultiPhraseQuery trouble = new MultiPhraseQuery();\n      trouble.add(new Term[] {\n          new Term(\"body\", \"blueberry\"),\n          new Term(\"body\", \"blue\")\n      });\n      q.add(trouble, BooleanClause.Occur.MUST);\n\n      // exception will be thrown here without fix\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n\n      assertEquals(\"Wrong number of hits\", 2, hits.length);\n      searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","sourceNew":"    public void testBooleanQueryContainingSingleTermPrefixQuery() throws IOException {\n      // this tests against bug 33161 (now fixed)\n      // In order to cause the bug, the outer query must have more than one term \n      // and all terms required.\n      // The contained PhraseMultiQuery must contain exactly one term array.\n\n      RAMDirectory indexStore = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(TEST_VERSION_CURRENT));\n      add(\"blueberry pie\", writer);\n      add(\"blueberry chewing gum\", writer);\n      add(\"blue raspberry pie\", writer);\n      writer.optimize();\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(indexStore, true);\n      // This query will be equivalent to +body:pie +body:\"blue*\"\n      BooleanQuery q = new BooleanQuery();\n      q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n\n      MultiPhraseQuery trouble = new MultiPhraseQuery();\n      trouble.add(new Term[] {\n          new Term(\"body\", \"blueberry\"),\n          new Term(\"body\", \"blue\")\n      });\n      q.add(trouble, BooleanClause.Occur.MUST);\n\n      // exception will be thrown here without fix\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n\n      assertEquals(\"Wrong number of hits\", 2, hits.length);\n      searcher.close();\n  }\n\n","sourceOld":"    public void testBooleanQueryContainingSingleTermPrefixQuery() throws IOException {\n      // this tests against bug 33161 (now fixed)\n      // In order to cause the bug, the outer query must have more than one term \n      // and all terms required.\n      // The contained PhraseMultiQuery must contain exactly one term array.\n\n      RAMDirectory indexStore = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      add(\"blueberry pie\", writer);\n      add(\"blueberry chewing gum\", writer);\n      add(\"blue raspberry pie\", writer);\n      writer.optimize();\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(indexStore, true);\n      // This query will be equivalent to +body:pie +body:\"blue*\"\n      BooleanQuery q = new BooleanQuery();\n      q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n\n      MultiPhraseQuery trouble = new MultiPhraseQuery();\n      trouble.add(new Term[] {\n          new Term(\"body\", \"blueberry\"),\n          new Term(\"body\", \"blue\")\n      });\n      q.add(trouble, BooleanClause.Occur.MUST);\n\n      // exception will be thrown here without fix\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n\n      assertEquals(\"Wrong number of hits\", 2, hits.length);\n      searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","sourceNew":"    public void testBooleanQueryContainingSingleTermPrefixQuery() throws IOException {\n      // this tests against bug 33161 (now fixed)\n      // In order to cause the bug, the outer query must have more than one term \n      // and all terms required.\n      // The contained PhraseMultiQuery must contain exactly one term array.\n\n      RAMDirectory indexStore = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      add(\"blueberry pie\", writer);\n      add(\"blueberry chewing gum\", writer);\n      add(\"blue raspberry pie\", writer);\n      writer.optimize();\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(indexStore, true);\n      // This query will be equivalent to +body:pie +body:\"blue*\"\n      BooleanQuery q = new BooleanQuery();\n      q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n\n      MultiPhraseQuery trouble = new MultiPhraseQuery();\n      trouble.add(new Term[] {\n          new Term(\"body\", \"blueberry\"),\n          new Term(\"body\", \"blue\")\n      });\n      q.add(trouble, BooleanClause.Occur.MUST);\n\n      // exception will be thrown here without fix\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n\n      assertEquals(\"Wrong number of hits\", 2, hits.length);\n      searcher.close();\n  }\n\n","sourceOld":"    public void testBooleanQueryContainingSingleTermPrefixQuery() throws IOException {\n      // this tests against bug 33161 (now fixed)\n      // In order to cause the bug, the outer query must have more than one term \n      // and all terms required.\n      // The contained PhraseMultiQuery must contain exactly one term array.\n\n      RAMDirectory indexStore = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(TEST_VERSION_CURRENT));\n      add(\"blueberry pie\", writer);\n      add(\"blueberry chewing gum\", writer);\n      add(\"blue raspberry pie\", writer);\n      writer.optimize();\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(indexStore, true);\n      // This query will be equivalent to +body:pie +body:\"blue*\"\n      BooleanQuery q = new BooleanQuery();\n      q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n\n      MultiPhraseQuery trouble = new MultiPhraseQuery();\n      trouble.add(new Term[] {\n          new Term(\"body\", \"blueberry\"),\n          new Term(\"body\", \"blue\")\n      });\n      q.add(trouble, BooleanClause.Occur.MUST);\n\n      // exception will be thrown here without fix\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n\n      assertEquals(\"Wrong number of hits\", 2, hits.length);\n      searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","sourceNew":"    public void testBooleanQueryContainingSingleTermPrefixQuery() throws IOException {\n      // this tests against bug 33161 (now fixed)\n      // In order to cause the bug, the outer query must have more than one term \n      // and all terms required.\n      // The contained PhraseMultiQuery must contain exactly one term array.\n\n      RAMDirectory indexStore = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n      add(\"blueberry pie\", writer);\n      add(\"blueberry chewing gum\", writer);\n      add(\"blue raspberry pie\", writer);\n      writer.optimize();\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(indexStore, true);\n      // This query will be equivalent to +body:pie +body:\"blue*\"\n      BooleanQuery q = new BooleanQuery();\n      q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n\n      MultiPhraseQuery trouble = new MultiPhraseQuery();\n      trouble.add(new Term[] {\n          new Term(\"body\", \"blueberry\"),\n          new Term(\"body\", \"blue\")\n      });\n      q.add(trouble, BooleanClause.Occur.MUST);\n\n      // exception will be thrown here without fix\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n\n      assertEquals(\"Wrong number of hits\", 2, hits.length);\n      searcher.close();\n  }\n\n","sourceOld":"    public void testBooleanQueryContainingSingleTermPrefixQuery() throws IOException {\n      // this tests against bug 33161 (now fixed)\n      // In order to cause the bug, the outer query must have more than one term \n      // and all terms required.\n      // The contained PhraseMultiQuery must contain exactly one term array.\n\n      RAMDirectory indexStore = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      add(\"blueberry pie\", writer);\n      add(\"blueberry chewing gum\", writer);\n      add(\"blue raspberry pie\", writer);\n      writer.optimize();\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(indexStore, true);\n      // This query will be equivalent to +body:pie +body:\"blue*\"\n      BooleanQuery q = new BooleanQuery();\n      q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n\n      MultiPhraseQuery trouble = new MultiPhraseQuery();\n      trouble.add(new Term[] {\n          new Term(\"body\", \"blueberry\"),\n          new Term(\"body\", \"blue\")\n      });\n      q.add(trouble, BooleanClause.Occur.MUST);\n\n      // exception will be thrown here without fix\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n\n      assertEquals(\"Wrong number of hits\", 2, hits.length);\n      searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testBooleanQueryContainingSingleTermPrefixQuery().mjava","sourceNew":"    public void testBooleanQueryContainingSingleTermPrefixQuery() throws IOException {\n      // this tests against bug 33161 (now fixed)\n      // In order to cause the bug, the outer query must have more than one term \n      // and all terms required.\n      // The contained PhraseMultiQuery must contain exactly one term array.\n\n      RAMDirectory indexStore = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n      add(\"blueberry pie\", writer);\n      add(\"blueberry chewing gum\", writer);\n      add(\"blue raspberry pie\", writer);\n      writer.optimize();\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(indexStore, true);\n      // This query will be equivalent to +body:pie +body:\"blue*\"\n      BooleanQuery q = new BooleanQuery();\n      q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n\n      MultiPhraseQuery trouble = new MultiPhraseQuery();\n      trouble.add(new Term[] {\n          new Term(\"body\", \"blueberry\"),\n          new Term(\"body\", \"blue\")\n      });\n      q.add(trouble, BooleanClause.Occur.MUST);\n\n      // exception will be thrown here without fix\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n\n      assertEquals(\"Wrong number of hits\", 2, hits.length);\n      searcher.close();\n  }\n\n","sourceOld":"    public void testBooleanQueryContainingSingleTermPrefixQuery() throws IOException {\n      // this tests against bug 33161 (now fixed)\n      // In order to cause the bug, the outer query must have more than one term \n      // and all terms required.\n      // The contained PhraseMultiQuery must contain exactly one term array.\n\n      RAMDirectory indexStore = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n      add(\"blueberry pie\", writer);\n      add(\"blueberry chewing gum\", writer);\n      add(\"blue raspberry pie\", writer);\n      writer.optimize();\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(indexStore, true);\n      // This query will be equivalent to +body:pie +body:\"blue*\"\n      BooleanQuery q = new BooleanQuery();\n      q.add(new TermQuery(new Term(\"body\", \"pie\")), BooleanClause.Occur.MUST);\n\n      MultiPhraseQuery trouble = new MultiPhraseQuery();\n      trouble.add(new Term[] {\n          new Term(\"body\", \"blueberry\"),\n          new Term(\"body\", \"blue\")\n      });\n      q.add(trouble, BooleanClause.Occur.MUST);\n\n      // exception will be thrown here without fix\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n\n      assertEquals(\"Wrong number of hits\", 2, hits.length);\n      searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"78186e8256d3f75ec4673d08ff89841f1b6ed13a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["5af07783dbc171e26a694c4f7d735e30c2769faa","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["78186e8256d3f75ec4673d08ff89841f1b6ed13a"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"78186e8256d3f75ec4673d08ff89841f1b6ed13a":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["78186e8256d3f75ec4673d08ff89841f1b6ed13a"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}