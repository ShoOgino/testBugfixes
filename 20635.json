{"path":"lucene/src/java/org/apache/lucene/util/StringHelper#bytesDifference(BytesRef,BytesRef).mjava","commits":[{"id":"61f30939a6ca0891c7b0c0f34aa43800bd4c9a15","date":1322511317,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/StringHelper#bytesDifference(BytesRef,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Compares two {@link BytesRef}, element by element, and returns the\n   * number of elements common to both arrays.\n   *\n   * @param left The first {@link BytesRef} to compare\n   * @param right The second {@link BytesRef} to compare\n   * @return The number of common elements.\n   */\n  public static int bytesDifference(BytesRef left, BytesRef right) {\n    int len = left.length < right.length ? left.length : right.length;\n    final byte[] bytesLeft = left.bytes;\n    final int offLeft = left.offset;\n    byte[] bytesRight = right.bytes;\n    final int offRight = right.offset;\n    for (int i = 0; i < len; i++)\n      if (bytesLeft[i+offLeft] != bytesRight[i+offRight])\n        return i;\n    return len;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/StringHelper#bytesDifference(BytesRef,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/StringHelper#bytesDifference(BytesRef,BytesRef).mjava","sourceNew":"  /**\n   * Compares two {@link BytesRef}, element by element, and returns the\n   * number of elements common to both arrays.\n   *\n   * @param left The first {@link BytesRef} to compare\n   * @param right The second {@link BytesRef} to compare\n   * @return The number of common elements.\n   */\n  public static int bytesDifference(BytesRef left, BytesRef right) {\n    int len = left.length < right.length ? left.length : right.length;\n    final byte[] bytesLeft = left.bytes;\n    final int offLeft = left.offset;\n    byte[] bytesRight = right.bytes;\n    final int offRight = right.offset;\n    for (int i = 0; i < len; i++)\n      if (bytesLeft[i+offLeft] != bytesRight[i+offRight])\n        return i;\n    return len;\n  }\n\n","sourceOld":"  /**\n   * Compares two {@link BytesRef}, element by element, and returns the\n   * number of elements common to both arrays.\n   *\n   * @param left The first {@link BytesRef} to compare\n   * @param right The second {@link BytesRef} to compare\n   * @return The number of common elements.\n   */\n  public static int bytesDifference(BytesRef left, BytesRef right) {\n    int len = left.length < right.length ? left.length : right.length;\n    final byte[] bytesLeft = left.bytes;\n    final int offLeft = left.offset;\n    byte[] bytesRight = right.bytes;\n    final int offRight = right.offset;\n    for (int i = 0; i < len; i++)\n      if (bytesLeft[i+offLeft] != bytesRight[i+offRight])\n        return i;\n    return len;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["61f30939a6ca0891c7b0c0f34aa43800bd4c9a15"],"61f30939a6ca0891c7b0c0f34aa43800bd4c9a15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"61f30939a6ca0891c7b0c0f34aa43800bd4c9a15":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["61f30939a6ca0891c7b0c0f34aa43800bd4c9a15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}