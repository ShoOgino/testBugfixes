{"path":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/search/TestStandardGdataSearcher#testSearch().mjava","commits":[{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/search/TestStandardGdataSearcher#testSearch().mjava","pathOld":"contrib/gdata-server/src/test/org/apache/lucene/gdata/search/TestStandardGdataSearcher#testSearch().mjava","sourceNew":"    /*\n     * Test method for\n     * 'org.apache.lucene.gdata.search.StandardGdataSearcher.search(Query, int,\n     * int)'\n     */\n    public void testSearch() throws IOException {\n        Query q = new TermQuery(new Term(FIELDNAME, FIELDVALUE));\n        Hits hits = this.searcher.get().search(q);\n        assertEquals(amountDocuments, hits.length());\n        List<String> returnValue = this.gdataSearcher.search(q,\n                this.amountDocuments, 0,this.feedId);\n        assertEquals(amountDocuments, returnValue.size());\n        assertTrue(returnValue.containsAll(this.idlist));\n        try {\n            this.gdataSearcher.search(null, 1, 0,this.feedId);\n            fail(\"searcher is null\");\n        } catch (RuntimeException e) {\n        }\n\n        try {\n            this.gdataSearcher.search(q, -1, 5,this.feedId);\n            fail(\"hitcount is less than 0\");\n        } catch (IllegalArgumentException e) {}\n        try {\n            this.gdataSearcher.search(q, 4, -1,this.feedId);\n            fail(\"offset is less than 0\");\n        } catch (IllegalArgumentException e) {}\n        try {\n            this.gdataSearcher.search(q, 4, 5,null);\n            fail(\"feed id is null\");\n        } catch (IllegalArgumentException e) {}\n      \n        returnValue = this.gdataSearcher.search(q,this.amountDocuments, 0,\"SomeOtherFeed\");\n        assertEquals(0,returnValue.size());\n        \n\n    }\n\n","sourceOld":"    /*\n     * Test method for\n     * 'org.apache.lucene.gdata.search.StandardGdataSearcher.search(Query, int,\n     * int)'\n     */\n    public void testSearch() throws IOException {\n        Query q = new TermQuery(new Term(FIELDNAME, FIELDVALUE));\n        Hits hits = this.searcher.get().search(q);\n        assertEquals(amountDocuments, hits.length());\n        List<String> returnValue = this.gdataSearcher.search(q,\n                this.amountDocuments, 0,this.feedId);\n        assertEquals(amountDocuments, returnValue.size());\n        assertTrue(returnValue.containsAll(this.idlist));\n        try {\n            this.gdataSearcher.search(null, 1, 0,this.feedId);\n            fail(\"searcher is null\");\n        } catch (RuntimeException e) {\n        }\n\n        try {\n            this.gdataSearcher.search(q, -1, 5,this.feedId);\n            fail(\"hitcount is less than 0\");\n        } catch (IllegalArgumentException e) {}\n        try {\n            this.gdataSearcher.search(q, 4, -1,this.feedId);\n            fail(\"offset is less than 0\");\n        } catch (IllegalArgumentException e) {}\n        try {\n            this.gdataSearcher.search(q, 4, 5,null);\n            fail(\"feed id is null\");\n        } catch (IllegalArgumentException e) {}\n      \n        returnValue = this.gdataSearcher.search(q,this.amountDocuments, 0,\"SomeOtherFeed\");\n        assertEquals(0,returnValue.size());\n        \n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/src/test/org/apache/lucene/gdata/search/TestStandardGdataSearcher#testSearch().mjava","pathOld":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/search/TestStandardGdataSearcher#testSearch().mjava","sourceNew":"    /*\n     * Test method for\n     * 'org.apache.lucene.gdata.search.StandardGdataSearcher.search(Query, int,\n     * int)'\n     */\n    public void testSearch() throws IOException {\n        Query q = new TermQuery(new Term(FIELDNAME, FIELDVALUE));\n        Hits hits = this.searcher.get().search(q);\n        assertEquals(amountDocuments, hits.length());\n        List<String> returnValue = this.gdataSearcher.search(q,\n                this.amountDocuments, 0,this.feedId);\n        assertEquals(amountDocuments, returnValue.size());\n        assertTrue(returnValue.containsAll(this.idlist));\n        try {\n            this.gdataSearcher.search(null, 1, 0,this.feedId);\n            fail(\"searcher is null\");\n        } catch (RuntimeException e) {\n        }\n\n        try {\n            this.gdataSearcher.search(q, -1, 5,this.feedId);\n            fail(\"hitcount is less than 0\");\n        } catch (IllegalArgumentException e) {}\n        try {\n            this.gdataSearcher.search(q, 4, -1,this.feedId);\n            fail(\"offset is less than 0\");\n        } catch (IllegalArgumentException e) {}\n        try {\n            this.gdataSearcher.search(q, 4, 5,null);\n            fail(\"feed id is null\");\n        } catch (IllegalArgumentException e) {}\n      \n        returnValue = this.gdataSearcher.search(q,this.amountDocuments, 0,\"SomeOtherFeed\");\n        assertEquals(0,returnValue.size());\n        \n\n    }\n\n","sourceOld":"    /*\n     * Test method for\n     * 'org.apache.lucene.gdata.search.StandardGdataSearcher.search(Query, int,\n     * int)'\n     */\n    public void testSearch() throws IOException {\n        Query q = new TermQuery(new Term(FIELDNAME, FIELDVALUE));\n        Hits hits = this.searcher.get().search(q);\n        assertEquals(amountDocuments, hits.length());\n        List<String> returnValue = this.gdataSearcher.search(q,\n                this.amountDocuments, 0,this.feedId);\n        assertEquals(amountDocuments, returnValue.size());\n        assertTrue(returnValue.containsAll(this.idlist));\n        try {\n            this.gdataSearcher.search(null, 1, 0,this.feedId);\n            fail(\"searcher is null\");\n        } catch (RuntimeException e) {\n        }\n\n        try {\n            this.gdataSearcher.search(q, -1, 5,this.feedId);\n            fail(\"hitcount is less than 0\");\n        } catch (IllegalArgumentException e) {}\n        try {\n            this.gdataSearcher.search(q, 4, -1,this.feedId);\n            fail(\"offset is less than 0\");\n        } catch (IllegalArgumentException e) {}\n        try {\n            this.gdataSearcher.search(q, 4, 5,null);\n            fail(\"feed id is null\");\n        } catch (IllegalArgumentException e) {}\n      \n        returnValue = this.gdataSearcher.search(q,this.amountDocuments, 0,\"SomeOtherFeed\");\n        assertEquals(0,returnValue.size());\n        \n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}