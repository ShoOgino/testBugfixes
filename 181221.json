{"path":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinSortField#getDoubleComparator(int).mjava","commits":[{"id":"db447c88c3c3367999a54f10d9a207f3e63db201","date":1435740861,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinSortField#getDoubleComparator(int).mjava","pathOld":"/dev/null","sourceNew":"  private FieldComparator<?> getDoubleComparator(int numHits) {\n    return new FieldComparator.DoubleComparator(numHits, getField(), (Double) missingValue) {\n      @Override\n      protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n        SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(context.reader(), field);\n        final BlockJoinSelector.Type type = order\n            ? BlockJoinSelector.Type.MAX\n            : BlockJoinSelector.Type.MIN;\n        final BitDocIdSet parents = parentFilter.getDocIdSet(context);\n        final BitDocIdSet children = childFilter.getDocIdSet(context);\n        if (children == null) {\n          return DocValues.emptyNumeric();\n        }\n        final NumericDocValues view = BlockJoinSelector.wrap(sortedNumeric, type, parents.bits(), children.bits());\n        // undo the numericutils sortability\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return NumericUtils.sortableDoubleBits(view.get(docID));\n          }\n        };\n      }\n      @Override\n      protected Bits getDocsWithValue(LeafReaderContext context, String field) throws IOException {\n        final Bits docsWithValue = DocValues.getDocsWithField(context.reader(), field);\n        final BitDocIdSet parents = parentFilter.getDocIdSet(context);\n        final BitDocIdSet children = childFilter.getDocIdSet(context);\n        if (children == null) {\n          return new Bits.MatchNoBits(context.reader().maxDoc());\n        }\n        return BlockJoinSelector.wrap(docsWithValue, parents.bits(), children.bits());\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b3915945926c0bf7def01b0c504977709d3aed3","date":1436197708,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinSortField#getDoubleComparator(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinSortField#getDoubleComparator(int).mjava","sourceNew":"  private FieldComparator<?> getDoubleComparator(int numHits) {\n    return new FieldComparator.DoubleComparator(numHits, getField(), (Double) missingValue) {\n      @Override\n      protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n        SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(context.reader(), field);\n        final BlockJoinSelector.Type type = order\n            ? BlockJoinSelector.Type.MAX\n            : BlockJoinSelector.Type.MIN;\n        final BitSet parents = parentFilter.getBitSet(context);\n        final BitSet children = childFilter.getBitSet(context);\n        if (children == null) {\n          return DocValues.emptyNumeric();\n        }\n        final NumericDocValues view = BlockJoinSelector.wrap(sortedNumeric, type, parents, children);\n        // undo the numericutils sortability\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return NumericUtils.sortableDoubleBits(view.get(docID));\n          }\n        };\n      }\n      @Override\n      protected Bits getDocsWithValue(LeafReaderContext context, String field) throws IOException {\n        final Bits docsWithValue = DocValues.getDocsWithField(context.reader(), field);\n        final BitSet parents = parentFilter.getBitSet(context);\n        final BitSet children = childFilter.getBitSet(context);\n        if (children == null) {\n          return new Bits.MatchNoBits(context.reader().maxDoc());\n        }\n        return BlockJoinSelector.wrap(docsWithValue, parents, children);\n      }\n    };\n  }\n\n","sourceOld":"  private FieldComparator<?> getDoubleComparator(int numHits) {\n    return new FieldComparator.DoubleComparator(numHits, getField(), (Double) missingValue) {\n      @Override\n      protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n        SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(context.reader(), field);\n        final BlockJoinSelector.Type type = order\n            ? BlockJoinSelector.Type.MAX\n            : BlockJoinSelector.Type.MIN;\n        final BitDocIdSet parents = parentFilter.getDocIdSet(context);\n        final BitDocIdSet children = childFilter.getDocIdSet(context);\n        if (children == null) {\n          return DocValues.emptyNumeric();\n        }\n        final NumericDocValues view = BlockJoinSelector.wrap(sortedNumeric, type, parents.bits(), children.bits());\n        // undo the numericutils sortability\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return NumericUtils.sortableDoubleBits(view.get(docID));\n          }\n        };\n      }\n      @Override\n      protected Bits getDocsWithValue(LeafReaderContext context, String field) throws IOException {\n        final Bits docsWithValue = DocValues.getDocsWithField(context.reader(), field);\n        final BitDocIdSet parents = parentFilter.getDocIdSet(context);\n        final BitDocIdSet children = childFilter.getDocIdSet(context);\n        if (children == null) {\n          return new Bits.MatchNoBits(context.reader().maxDoc());\n        }\n        return BlockJoinSelector.wrap(docsWithValue, parents.bits(), children.bits());\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinSortField#getDoubleComparator(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinSortField#getDoubleComparator(int).mjava","sourceNew":"  private FieldComparator<?> getDoubleComparator(int numHits) {\n    return new FieldComparator.DoubleComparator(numHits, getField(), (Double) missingValue) {\n      @Override\n      protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n        SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(context.reader(), field);\n        final BlockJoinSelector.Type type = order\n            ? BlockJoinSelector.Type.MAX\n            : BlockJoinSelector.Type.MIN;\n        final BitSet parents = parentFilter.getBitSet(context);\n        final BitSet children = childFilter.getBitSet(context);\n        if (children == null) {\n          return DocValues.emptyNumeric();\n        }\n        final NumericDocValues view = BlockJoinSelector.wrap(sortedNumeric, type, parents, children);\n        // undo the numericutils sortability\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return LegacyNumericUtils.sortableDoubleBits(view.get(docID));\n          }\n        };\n      }\n      @Override\n      protected Bits getDocsWithValue(LeafReaderContext context, String field) throws IOException {\n        final Bits docsWithValue = DocValues.getDocsWithField(context.reader(), field);\n        final BitSet parents = parentFilter.getBitSet(context);\n        final BitSet children = childFilter.getBitSet(context);\n        if (children == null) {\n          return new Bits.MatchNoBits(context.reader().maxDoc());\n        }\n        return BlockJoinSelector.wrap(docsWithValue, parents, children);\n      }\n    };\n  }\n\n","sourceOld":"  private FieldComparator<?> getDoubleComparator(int numHits) {\n    return new FieldComparator.DoubleComparator(numHits, getField(), (Double) missingValue) {\n      @Override\n      protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n        SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(context.reader(), field);\n        final BlockJoinSelector.Type type = order\n            ? BlockJoinSelector.Type.MAX\n            : BlockJoinSelector.Type.MIN;\n        final BitSet parents = parentFilter.getBitSet(context);\n        final BitSet children = childFilter.getBitSet(context);\n        if (children == null) {\n          return DocValues.emptyNumeric();\n        }\n        final NumericDocValues view = BlockJoinSelector.wrap(sortedNumeric, type, parents, children);\n        // undo the numericutils sortability\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return NumericUtils.sortableDoubleBits(view.get(docID));\n          }\n        };\n      }\n      @Override\n      protected Bits getDocsWithValue(LeafReaderContext context, String field) throws IOException {\n        final Bits docsWithValue = DocValues.getDocsWithField(context.reader(), field);\n        final BitSet parents = parentFilter.getBitSet(context);\n        final BitSet children = childFilter.getBitSet(context);\n        if (children == null) {\n          return new Bits.MatchNoBits(context.reader().maxDoc());\n        }\n        return BlockJoinSelector.wrap(docsWithValue, parents, children);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb","date":1457059932,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinSortField#getDoubleComparator(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinSortField#getDoubleComparator(int).mjava","sourceNew":"  private FieldComparator<?> getDoubleComparator(int numHits) {\n    return new FieldComparator.DoubleComparator(numHits, getField(), (Double) missingValue) {\n      @Override\n      protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n        SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(context.reader(), field);\n        final BlockJoinSelector.Type type = order\n            ? BlockJoinSelector.Type.MAX\n            : BlockJoinSelector.Type.MIN;\n        final BitSet parents = parentFilter.getBitSet(context);\n        final BitSet children = childFilter.getBitSet(context);\n        if (children == null) {\n          return DocValues.emptyNumeric();\n        }\n        final NumericDocValues view = BlockJoinSelector.wrap(sortedNumeric, type, parents, children);\n        // undo the numericutils sortability\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return NumericUtils.sortableDoubleBits(view.get(docID));\n          }\n        };\n      }\n      @Override\n      protected Bits getDocsWithValue(LeafReaderContext context, String field) throws IOException {\n        final Bits docsWithValue = DocValues.getDocsWithField(context.reader(), field);\n        final BitSet parents = parentFilter.getBitSet(context);\n        final BitSet children = childFilter.getBitSet(context);\n        if (children == null) {\n          return new Bits.MatchNoBits(context.reader().maxDoc());\n        }\n        return BlockJoinSelector.wrap(docsWithValue, parents, children);\n      }\n    };\n  }\n\n","sourceOld":"  private FieldComparator<?> getDoubleComparator(int numHits) {\n    return new FieldComparator.DoubleComparator(numHits, getField(), (Double) missingValue) {\n      @Override\n      protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n        SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(context.reader(), field);\n        final BlockJoinSelector.Type type = order\n            ? BlockJoinSelector.Type.MAX\n            : BlockJoinSelector.Type.MIN;\n        final BitSet parents = parentFilter.getBitSet(context);\n        final BitSet children = childFilter.getBitSet(context);\n        if (children == null) {\n          return DocValues.emptyNumeric();\n        }\n        final NumericDocValues view = BlockJoinSelector.wrap(sortedNumeric, type, parents, children);\n        // undo the numericutils sortability\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return LegacyNumericUtils.sortableDoubleBits(view.get(docID));\n          }\n        };\n      }\n      @Override\n      protected Bits getDocsWithValue(LeafReaderContext context, String field) throws IOException {\n        final Bits docsWithValue = DocValues.getDocsWithField(context.reader(), field);\n        final BitSet parents = parentFilter.getBitSet(context);\n        final BitSet children = childFilter.getBitSet(context);\n        if (children == null) {\n          return new Bits.MatchNoBits(context.reader().maxDoc());\n        }\n        return BlockJoinSelector.wrap(docsWithValue, parents, children);\n      }\n    };\n  }\n\n","bugFix":["770342641f7b505eaa8dccdc666158bff2419109"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinSortField#getDoubleComparator(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinSortField#getDoubleComparator(int).mjava","sourceNew":"  private FieldComparator<?> getDoubleComparator(int numHits) {\n    return new FieldComparator.DoubleComparator(numHits, getField(), (Double) missingValue) {\n      @Override\n      protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n        SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(context.reader(), field);\n        final BlockJoinSelector.Type type = order\n            ? BlockJoinSelector.Type.MAX\n            : BlockJoinSelector.Type.MIN;\n        final BitSet parents = parentFilter.getBitSet(context);\n        final BitSet children = childFilter.getBitSet(context);\n        if (children == null) {\n          return DocValues.emptyNumeric();\n        }\n        final NumericDocValues view = BlockJoinSelector.wrap(sortedNumeric, type, parents, children);\n        // undo the numericutils sortability\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return NumericUtils.sortableDoubleBits(view.get(docID));\n          }\n        };\n      }\n      @Override\n      protected Bits getDocsWithValue(LeafReaderContext context, String field) throws IOException {\n        final Bits docsWithValue = DocValues.getDocsWithField(context.reader(), field);\n        final BitSet parents = parentFilter.getBitSet(context);\n        final BitSet children = childFilter.getBitSet(context);\n        if (children == null) {\n          return new Bits.MatchNoBits(context.reader().maxDoc());\n        }\n        return BlockJoinSelector.wrap(docsWithValue, parents, children);\n      }\n    };\n  }\n\n","sourceOld":"  private FieldComparator<?> getDoubleComparator(int numHits) {\n    return new FieldComparator.DoubleComparator(numHits, getField(), (Double) missingValue) {\n      @Override\n      protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n        SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(context.reader(), field);\n        final BlockJoinSelector.Type type = order\n            ? BlockJoinSelector.Type.MAX\n            : BlockJoinSelector.Type.MIN;\n        final BitSet parents = parentFilter.getBitSet(context);\n        final BitSet children = childFilter.getBitSet(context);\n        if (children == null) {\n          return DocValues.emptyNumeric();\n        }\n        final NumericDocValues view = BlockJoinSelector.wrap(sortedNumeric, type, parents, children);\n        // undo the numericutils sortability\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return LegacyNumericUtils.sortableDoubleBits(view.get(docID));\n          }\n        };\n      }\n      @Override\n      protected Bits getDocsWithValue(LeafReaderContext context, String field) throws IOException {\n        final Bits docsWithValue = DocValues.getDocsWithField(context.reader(), field);\n        final BitSet parents = parentFilter.getBitSet(context);\n        final BitSet children = childFilter.getBitSet(context);\n        if (children == null) {\n          return new Bits.MatchNoBits(context.reader().maxDoc());\n        }\n        return BlockJoinSelector.wrap(docsWithValue, parents, children);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinSortField#getDoubleComparator(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinSortField#getDoubleComparator(int).mjava","sourceNew":"  private FieldComparator<?> getDoubleComparator(int numHits) {\n    return new FieldComparator.DoubleComparator(numHits, getField(), (Double) missingValue) {\n      @Override\n      protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n        SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(context.reader(), field);\n        final BlockJoinSelector.Type type = order\n            ? BlockJoinSelector.Type.MAX\n            : BlockJoinSelector.Type.MIN;\n        final BitSet parents = parentFilter.getBitSet(context);\n        final BitSet children = childFilter.getBitSet(context);\n        if (children == null) {\n          return DocValues.emptyNumeric();\n        }\n        return new FilterNumericDocValues(BlockJoinSelector.wrap(sortedNumeric, type, parents, children)) {\n          @Override\n          public long longValue() {\n            // undo the numericutils sortability\n            return NumericUtils.sortableDoubleBits(super.longValue());\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  private FieldComparator<?> getDoubleComparator(int numHits) {\n    return new FieldComparator.DoubleComparator(numHits, getField(), (Double) missingValue) {\n      @Override\n      protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n        SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(context.reader(), field);\n        final BlockJoinSelector.Type type = order\n            ? BlockJoinSelector.Type.MAX\n            : BlockJoinSelector.Type.MIN;\n        final BitSet parents = parentFilter.getBitSet(context);\n        final BitSet children = childFilter.getBitSet(context);\n        if (children == null) {\n          return DocValues.emptyNumeric();\n        }\n        final NumericDocValues view = BlockJoinSelector.wrap(sortedNumeric, type, parents, children);\n        // undo the numericutils sortability\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return NumericUtils.sortableDoubleBits(view.get(docID));\n          }\n        };\n      }\n      @Override\n      protected Bits getDocsWithValue(LeafReaderContext context, String field) throws IOException {\n        final Bits docsWithValue = DocValues.getDocsWithField(context.reader(), field);\n        final BitSet parents = parentFilter.getBitSet(context);\n        final BitSet children = childFilter.getBitSet(context);\n        if (children == null) {\n          return new Bits.MatchNoBits(context.reader().maxDoc());\n        }\n        return BlockJoinSelector.wrap(docsWithValue, parents, children);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinSortField#getDoubleComparator(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinSortField#getDoubleComparator(int).mjava","sourceNew":"  private FieldComparator<?> getDoubleComparator(int numHits) {\n    return new FieldComparator.DoubleComparator(numHits, getField(), (Double) missingValue) {\n      @Override\n      protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n        SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(context.reader(), field);\n        final BlockJoinSelector.Type type = order\n            ? BlockJoinSelector.Type.MAX\n            : BlockJoinSelector.Type.MIN;\n        final BitSet parents = parentFilter.getBitSet(context);\n        final BitSet children = childFilter.getBitSet(context);\n        if (children == null) {\n          return DocValues.emptyNumeric();\n        }\n        return new FilterNumericDocValues(BlockJoinSelector.wrap(sortedNumeric, type, parents, children)) {\n          @Override\n          public long longValue() {\n            // undo the numericutils sortability\n            return NumericUtils.sortableDoubleBits(super.longValue());\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  private FieldComparator<?> getDoubleComparator(int numHits) {\n    return new FieldComparator.DoubleComparator(numHits, getField(), (Double) missingValue) {\n      @Override\n      protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n        SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(context.reader(), field);\n        final BlockJoinSelector.Type type = order\n            ? BlockJoinSelector.Type.MAX\n            : BlockJoinSelector.Type.MIN;\n        final BitSet parents = parentFilter.getBitSet(context);\n        final BitSet children = childFilter.getBitSet(context);\n        if (children == null) {\n          return DocValues.emptyNumeric();\n        }\n        final NumericDocValues view = BlockJoinSelector.wrap(sortedNumeric, type, parents, children);\n        // undo the numericutils sortability\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return NumericUtils.sortableDoubleBits(view.get(docID));\n          }\n        };\n      }\n      @Override\n      protected Bits getDocsWithValue(LeafReaderContext context, String field) throws IOException {\n        final Bits docsWithValue = DocValues.getDocsWithField(context.reader(), field);\n        final BitSet parents = parentFilter.getBitSet(context);\n        final BitSet children = childFilter.getBitSet(context);\n        if (children == null) {\n          return new Bits.MatchNoBits(context.reader().maxDoc());\n        }\n        return BlockJoinSelector.wrap(docsWithValue, parents, children);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d217880fb207e1a26143863d06cf461c7cabeec","date":1475691535,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinSortField#getDoubleComparator(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinSortField#getDoubleComparator(int).mjava","sourceNew":"  private FieldComparator<?> getDoubleComparator(int numHits) {\n    return new FieldComparator.DoubleComparator(numHits, getField(), (Double) missingValue) {\n      @Override\n      protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n        SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(context.reader(), field);\n        final BlockJoinSelector.Type type = order\n            ? BlockJoinSelector.Type.MAX\n            : BlockJoinSelector.Type.MIN;\n        final BitSet parents = parentFilter.getBitSet(context);\n        final BitSet children = childFilter.getBitSet(context);\n        if (children == null) {\n          return DocValues.emptyNumeric();\n        }\n        return new FilterNumericDocValues(BlockJoinSelector.wrap(sortedNumeric, type, parents, children)) {\n          @Override\n          public long longValue() throws IOException {\n            // undo the numericutils sortability\n            return NumericUtils.sortableDoubleBits(super.longValue());\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  private FieldComparator<?> getDoubleComparator(int numHits) {\n    return new FieldComparator.DoubleComparator(numHits, getField(), (Double) missingValue) {\n      @Override\n      protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n        SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(context.reader(), field);\n        final BlockJoinSelector.Type type = order\n            ? BlockJoinSelector.Type.MAX\n            : BlockJoinSelector.Type.MIN;\n        final BitSet parents = parentFilter.getBitSet(context);\n        final BitSet children = childFilter.getBitSet(context);\n        if (children == null) {\n          return DocValues.emptyNumeric();\n        }\n        return new FilterNumericDocValues(BlockJoinSelector.wrap(sortedNumeric, type, parents, children)) {\n          @Override\n          public long longValue() {\n            // undo the numericutils sortability\n            return NumericUtils.sortableDoubleBits(super.longValue());\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinSortField#getDoubleComparator(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinSortField#getDoubleComparator(int).mjava","sourceNew":"  private FieldComparator<?> getDoubleComparator(int numHits) {\n    return new FieldComparator.DoubleComparator(numHits, getField(), (Double) missingValue) {\n      @Override\n      protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n        SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(context.reader(), field);\n        final BlockJoinSelector.Type type = order\n            ? BlockJoinSelector.Type.MAX\n            : BlockJoinSelector.Type.MIN;\n        final BitSet parents = parentFilter.getBitSet(context);\n        final BitSet children = childFilter.getBitSet(context);\n        if (children == null) {\n          return DocValues.emptyNumeric();\n        }\n        return new FilterNumericDocValues(BlockJoinSelector.wrap(sortedNumeric, type, parents, children)) {\n          @Override\n          public long longValue() throws IOException {\n            // undo the numericutils sortability\n            return NumericUtils.sortableDoubleBits(super.longValue());\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  private FieldComparator<?> getDoubleComparator(int numHits) {\n    return new FieldComparator.DoubleComparator(numHits, getField(), (Double) missingValue) {\n      @Override\n      protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n        SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(context.reader(), field);\n        final BlockJoinSelector.Type type = order\n            ? BlockJoinSelector.Type.MAX\n            : BlockJoinSelector.Type.MIN;\n        final BitSet parents = parentFilter.getBitSet(context);\n        final BitSet children = childFilter.getBitSet(context);\n        if (children == null) {\n          return DocValues.emptyNumeric();\n        }\n        final NumericDocValues view = BlockJoinSelector.wrap(sortedNumeric, type, parents, children);\n        // undo the numericutils sortability\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return NumericUtils.sortableDoubleBits(view.get(docID));\n          }\n        };\n      }\n      @Override\n      protected Bits getDocsWithValue(LeafReaderContext context, String field) throws IOException {\n        final Bits docsWithValue = DocValues.getDocsWithField(context.reader(), field);\n        final BitSet parents = parentFilter.getBitSet(context);\n        final BitSet children = childFilter.getBitSet(context);\n        if (children == null) {\n          return new Bits.MatchNoBits(context.reader().maxDoc());\n        }\n        return BlockJoinSelector.wrap(docsWithValue, parents, children);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinSortField#getDoubleComparator(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinSortField#getDoubleComparator(int).mjava","sourceNew":"  private FieldComparator<?> getDoubleComparator(int numHits) {\n    return new FieldComparator.DoubleComparator(numHits, getField(), (Double) missingValue) {\n      @SuppressWarnings(\"deprecation\")\n      @Override\n      protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n        SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(context.reader(), field);\n        final BlockJoinSelector.Type type = order\n            ? BlockJoinSelector.Type.MAX\n            : BlockJoinSelector.Type.MIN;\n        final BitSet parents = parentFilter.getBitSet(context);\n        final BitSet children = childFilter.getBitSet(context);\n        if (children == null) {\n          return DocValues.emptyNumeric();\n        }\n        return new FilterNumericDocValues(BlockJoinSelector.wrap(sortedNumeric, type, parents, children)) {\n          @Override\n          public long longValue() throws IOException {\n            // undo the numericutils sortability\n            return NumericUtils.sortableDoubleBits(super.longValue());\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  private FieldComparator<?> getDoubleComparator(int numHits) {\n    return new FieldComparator.DoubleComparator(numHits, getField(), (Double) missingValue) {\n      @Override\n      protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n        SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(context.reader(), field);\n        final BlockJoinSelector.Type type = order\n            ? BlockJoinSelector.Type.MAX\n            : BlockJoinSelector.Type.MIN;\n        final BitSet parents = parentFilter.getBitSet(context);\n        final BitSet children = childFilter.getBitSet(context);\n        if (children == null) {\n          return DocValues.emptyNumeric();\n        }\n        return new FilterNumericDocValues(BlockJoinSelector.wrap(sortedNumeric, type, parents, children)) {\n          @Override\n          public long longValue() throws IOException {\n            // undo the numericutils sortability\n            return NumericUtils.sortableDoubleBits(super.longValue());\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinSortField#getDoubleComparator(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinSortField#getDoubleComparator(int).mjava","sourceNew":"  private FieldComparator<?> getDoubleComparator(int numHits) {\n    return new FieldComparator.DoubleComparator(numHits, getField(), (Double) missingValue) {\n      @Override\n      protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n        SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(context.reader(), field);\n        final BlockJoinSelector.Type type = order\n            ? BlockJoinSelector.Type.MAX\n            : BlockJoinSelector.Type.MIN;\n        final BitSet parents = parentFilter.getBitSet(context);\n        final BitSet children = childFilter.getBitSet(context);\n        if (children == null) {\n          return DocValues.emptyNumeric();\n        }\n        return new FilterNumericDocValues(BlockJoinSelector.wrap(sortedNumeric, type, parents, children)) {\n          @Override\n          public long longValue() throws IOException {\n            // undo the numericutils sortability\n            return NumericUtils.sortableDoubleBits(super.longValue());\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  private FieldComparator<?> getDoubleComparator(int numHits) {\n    return new FieldComparator.DoubleComparator(numHits, getField(), (Double) missingValue) {\n      @SuppressWarnings(\"deprecation\")\n      @Override\n      protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n        SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(context.reader(), field);\n        final BlockJoinSelector.Type type = order\n            ? BlockJoinSelector.Type.MAX\n            : BlockJoinSelector.Type.MIN;\n        final BitSet parents = parentFilter.getBitSet(context);\n        final BitSet children = childFilter.getBitSet(context);\n        if (children == null) {\n          return DocValues.emptyNumeric();\n        }\n        return new FilterNumericDocValues(BlockJoinSelector.wrap(sortedNumeric, type, parents, children)) {\n          @Override\n          public long longValue() throws IOException {\n            // undo the numericutils sortability\n            return NumericUtils.sortableDoubleBits(super.longValue());\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinSortField#getDoubleComparator(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinSortField#getDoubleComparator(int).mjava","sourceNew":"  private FieldComparator<?> getDoubleComparator(int numHits) {\n    return new FieldComparator.DoubleComparator(numHits, getField(), (Double) missingValue) {\n      @Override\n      protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n        SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(context.reader(), field);\n        final BlockJoinSelector.Type type = order\n            ? BlockJoinSelector.Type.MAX\n            : BlockJoinSelector.Type.MIN;\n        final BitSet parents = parentFilter.getBitSet(context);\n        final BitSet children = childFilter.getBitSet(context);\n        if (children == null) {\n          return DocValues.emptyNumeric();\n        }\n        return new FilterNumericDocValues(BlockJoinSelector.wrap(sortedNumeric, type, parents, toIter(children))) {\n          @Override\n          public long longValue() throws IOException {\n            // undo the numericutils sortability\n            return NumericUtils.sortableDoubleBits(super.longValue());\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  private FieldComparator<?> getDoubleComparator(int numHits) {\n    return new FieldComparator.DoubleComparator(numHits, getField(), (Double) missingValue) {\n      @Override\n      protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n        SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(context.reader(), field);\n        final BlockJoinSelector.Type type = order\n            ? BlockJoinSelector.Type.MAX\n            : BlockJoinSelector.Type.MIN;\n        final BitSet parents = parentFilter.getBitSet(context);\n        final BitSet children = childFilter.getBitSet(context);\n        if (children == null) {\n          return DocValues.emptyNumeric();\n        }\n        return new FilterNumericDocValues(BlockJoinSelector.wrap(sortedNumeric, type, parents, children)) {\n          @Override\n          public long longValue() throws IOException {\n            // undo the numericutils sortability\n            return NumericUtils.sortableDoubleBits(super.longValue());\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241","date":1599588987,"type":4,"author":"Mayya Sharipova","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinSortField#getDoubleComparator(int).mjava","sourceNew":null,"sourceOld":"  private FieldComparator<?> getDoubleComparator(int numHits) {\n    return new FieldComparator.DoubleComparator(numHits, getField(), (Double) missingValue) {\n      @Override\n      protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n        SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(context.reader(), field);\n        final BlockJoinSelector.Type type = order\n            ? BlockJoinSelector.Type.MAX\n            : BlockJoinSelector.Type.MIN;\n        final BitSet parents = parentFilter.getBitSet(context);\n        final BitSet children = childFilter.getBitSet(context);\n        if (children == null) {\n          return DocValues.emptyNumeric();\n        }\n        return new FilterNumericDocValues(BlockJoinSelector.wrap(sortedNumeric, type, parents, toIter(children))) {\n          @Override\n          public long longValue() throws IOException {\n            // undo the numericutils sortability\n            return NumericUtils.sortableDoubleBits(super.longValue());\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["5d217880fb207e1a26143863d06cf461c7cabeec"],"770342641f7b505eaa8dccdc666158bff2419109":["4b3915945926c0bf7def01b0c504977709d3aed3"],"4b3915945926c0bf7def01b0c504977709d3aed3":["db447c88c3c3367999a54f10d9a207f3e63db201"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","5d217880fb207e1a26143863d06cf461c7cabeec"],"e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"db447c88c3c3367999a54f10d9a207f3e63db201":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"5d217880fb207e1a26143863d06cf461c7cabeec":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["770342641f7b505eaa8dccdc666158bff2419109","a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241"],"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb":["770342641f7b505eaa8dccdc666158bff2419109"]},"commit2Childs":{"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"770342641f7b505eaa8dccdc666158bff2419109":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"4b3915945926c0bf7def01b0c504977709d3aed3":["770342641f7b505eaa8dccdc666158bff2419109"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"db447c88c3c3367999a54f10d9a207f3e63db201":["4b3915945926c0bf7def01b0c504977709d3aed3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db447c88c3c3367999a54f10d9a207f3e63db201"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["5d217880fb207e1a26143863d06cf461c7cabeec"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"5d217880fb207e1a26143863d06cf461c7cabeec":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241"],"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}