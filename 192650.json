{"path":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort#sort(File,File).mjava","commits":[{"id":"7bf07f4ebadc7539de83a531e64678350d78ca26","date":1322776167,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort#sort(File,File).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Sort input to output, explicit hint for the buffer size. The amount of allocated\n   * memory may deviate from the hint (may be smaller or larger).  \n   */\n  public SortInfo sort(File input, File output) throws IOException {\n    sortInfo = new SortInfo();\n    sortInfo.totalTime = System.currentTimeMillis();\n\n    output.delete();\n\n    ArrayList<File> merges = new ArrayList<File>();\n    ByteSequencesReader is = new ByteSequencesReader(input);\n    boolean success = false;\n    try {\n      int lines = 0;\n      while ((lines = readPartition(is)) > 0) {                    \n        merges.add(sortPartition(lines));\n        sortInfo.tempMergeFiles++;\n        sortInfo.lines += lines;\n\n        // Handle intermediate merges.\n        if (merges.size() == maxTempFiles) {\n          File intermediate = File.createTempFile(\"sort\", \"intermediate\", tempDirectory);\n          mergePartitions(merges, intermediate);\n          for (File file : merges) {\n            file.delete();\n          }\n          merges.clear();\n          merges.add(intermediate);\n          sortInfo.tempMergeFiles++;\n        }\n      }\n      success = true;\n    } finally {\n      if (success)\n        IOUtils.close(is);\n      else\n        IOUtils.closeWhileHandlingException(is);\n    }\n\n    // One partition, try to rename or copy if unsuccessful.\n    if (merges.size() == 1) {     \n      // If simple rename doesn't work this means the output is\n      // on a different volume or something. Copy the input then.\n      if (!merges.get(0).renameTo(output)) {\n        copy(merges.get(0), output);\n      }\n    } else { \n      // otherwise merge the partitions with a priority queue.                  \n      mergePartitions(merges, output);                            \n      for (File file : merges) {\n        file.delete();\n      }\n    }\n\n    sortInfo.totalTime = (System.currentTimeMillis() - sortInfo.totalTime); \n    return sortInfo;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fa4688b7aaba64836010dee5308f052574ec398d","cbc3688252d4a8045d69a164236b2cf87b721f17","cbc3688252d4a8045d69a164236b2cf87b721f17","cbc3688252d4a8045d69a164236b2cf87b721f17","cbc3688252d4a8045d69a164236b2cf87b721f17"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort#sort(File,File).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort#sort(File,File).mjava","sourceNew":"  /** \n   * Sort input to output, explicit hint for the buffer size. The amount of allocated\n   * memory may deviate from the hint (may be smaller or larger).  \n   */\n  public SortInfo sort(File input, File output) throws IOException {\n    sortInfo = new SortInfo();\n    sortInfo.totalTime = System.currentTimeMillis();\n\n    output.delete();\n\n    ArrayList<File> merges = new ArrayList<File>();\n    ByteSequencesReader is = new ByteSequencesReader(input);\n    boolean success = false;\n    try {\n      int lines = 0;\n      while ((lines = readPartition(is)) > 0) {                    \n        merges.add(sortPartition(lines));\n        sortInfo.tempMergeFiles++;\n        sortInfo.lines += lines;\n\n        // Handle intermediate merges.\n        if (merges.size() == maxTempFiles) {\n          File intermediate = File.createTempFile(\"sort\", \"intermediate\", tempDirectory);\n          mergePartitions(merges, intermediate);\n          for (File file : merges) {\n            file.delete();\n          }\n          merges.clear();\n          merges.add(intermediate);\n          sortInfo.tempMergeFiles++;\n        }\n      }\n      success = true;\n    } finally {\n      if (success)\n        IOUtils.close(is);\n      else\n        IOUtils.closeWhileHandlingException(is);\n    }\n\n    // One partition, try to rename or copy if unsuccessful.\n    if (merges.size() == 1) {     \n      // If simple rename doesn't work this means the output is\n      // on a different volume or something. Copy the input then.\n      if (!merges.get(0).renameTo(output)) {\n        copy(merges.get(0), output);\n      }\n    } else { \n      // otherwise merge the partitions with a priority queue.                  \n      mergePartitions(merges, output);                            \n      for (File file : merges) {\n        file.delete();\n      }\n    }\n\n    sortInfo.totalTime = (System.currentTimeMillis() - sortInfo.totalTime); \n    return sortInfo;\n  }\n\n","sourceOld":"  /** \n   * Sort input to output, explicit hint for the buffer size. The amount of allocated\n   * memory may deviate from the hint (may be smaller or larger).  \n   */\n  public SortInfo sort(File input, File output) throws IOException {\n    sortInfo = new SortInfo();\n    sortInfo.totalTime = System.currentTimeMillis();\n\n    output.delete();\n\n    ArrayList<File> merges = new ArrayList<File>();\n    ByteSequencesReader is = new ByteSequencesReader(input);\n    boolean success = false;\n    try {\n      int lines = 0;\n      while ((lines = readPartition(is)) > 0) {                    \n        merges.add(sortPartition(lines));\n        sortInfo.tempMergeFiles++;\n        sortInfo.lines += lines;\n\n        // Handle intermediate merges.\n        if (merges.size() == maxTempFiles) {\n          File intermediate = File.createTempFile(\"sort\", \"intermediate\", tempDirectory);\n          mergePartitions(merges, intermediate);\n          for (File file : merges) {\n            file.delete();\n          }\n          merges.clear();\n          merges.add(intermediate);\n          sortInfo.tempMergeFiles++;\n        }\n      }\n      success = true;\n    } finally {\n      if (success)\n        IOUtils.close(is);\n      else\n        IOUtils.closeWhileHandlingException(is);\n    }\n\n    // One partition, try to rename or copy if unsuccessful.\n    if (merges.size() == 1) {     \n      // If simple rename doesn't work this means the output is\n      // on a different volume or something. Copy the input then.\n      if (!merges.get(0).renameTo(output)) {\n        copy(merges.get(0), output);\n      }\n    } else { \n      // otherwise merge the partitions with a priority queue.                  \n      mergePartitions(merges, output);                            \n      for (File file : merges) {\n        file.delete();\n      }\n    }\n\n    sortInfo.totalTime = (System.currentTimeMillis() - sortInfo.totalTime); \n    return sortInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"7bf07f4ebadc7539de83a531e64678350d78ca26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7bf07f4ebadc7539de83a531e64678350d78ca26":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}