{"path":"solr/src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","pathOld":"/dev/null","sourceNew":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n    if (dataDir != null && dataDir.length()==0) dataDir=null;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = (Node) getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, get(\"jmx/@agentId\", null), get(\n          \"jmx/@serviceUrl\", null));\n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n\n     //TODO deprecated remove it later\n     loadPluginInfo(SolrHighlighter.class,\"highlighting\",false, false);\n     if( pluginStore.containsKey( SolrHighlighter.class.getName() ) )\n       log.warn( \"Deprecated syntax found. <highlighting/> should move to <searchComponent/>\" );\n\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","sourceNew":null,"sourceOld":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n    if (dataDir != null && dataDir.length()==0) dataDir=null;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = (Node) getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, get(\"jmx/@agentId\", null), get(\n          \"jmx/@serviceUrl\", null));\n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n\n     //TODO deprecated remove it later\n     loadPluginInfo(SolrHighlighter.class,\"highlighting\",false, false);\n     if( pluginStore.containsKey( SolrHighlighter.class.getName() ) )\n       log.warn( \"Deprecated syntax found. <highlighting/> should move to <searchComponent/>\" );\n\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","pathOld":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","sourceNew":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    luceneMatchVersion = getLuceneVersion(\"luceneMatchVersion\", Version.LUCENE_24);\n    log.info(\"Using Lucene MatchVersion: \" + luceneMatchVersion);\n\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n    if (dataDir != null && dataDir.length()==0) dataDir=null;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = (Node) getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, get(\"jmx/@agentId\", null), get(\n          \"jmx/@serviceUrl\", null));\n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n\n     //TODO deprecated remove it later\n     loadPluginInfo(SolrHighlighter.class,\"highlighting\",false, false);\n     if( pluginStore.containsKey( SolrHighlighter.class.getName() ) )\n       log.warn( \"Deprecated syntax found. <highlighting/> should move to <searchComponent/>\" );\n\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","sourceOld":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    luceneMatchVersion = getLuceneVersion(\"luceneMatchVersion\", Version.LUCENE_24);\n    log.info(\"Using Lucene MatchVersion: \" + luceneMatchVersion);\n\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n    if (dataDir != null && dataDir.length()==0) dataDir=null;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = (Node) getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, get(\"jmx/@agentId\", null), get(\n          \"jmx/@serviceUrl\", null));\n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n\n     //TODO deprecated remove it later\n     loadPluginInfo(SolrHighlighter.class,\"highlighting\",false, false);\n     if( pluginStore.containsKey( SolrHighlighter.class.getName() ) )\n       log.warn( \"Deprecated syntax found. <highlighting/> should move to <searchComponent/>\" );\n\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","pathOld":"/dev/null","sourceNew":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    luceneMatchVersion = getLuceneVersion(\"luceneMatchVersion\", Version.LUCENE_24);\n    log.info(\"Using Lucene MatchVersion: \" + luceneMatchVersion);\n\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n    if (dataDir != null && dataDir.length()==0) dataDir=null;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = (Node) getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, get(\"jmx/@agentId\", null), get(\n          \"jmx/@serviceUrl\", null));\n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n\n     //TODO deprecated remove it later\n     loadPluginInfo(SolrHighlighter.class,\"highlighting\",false, false);\n     if( pluginStore.containsKey( SolrHighlighter.class.getName() ) )\n       log.warn( \"Deprecated syntax found. <highlighting/> should move to <searchComponent/>\" );\n\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d73a8a1e6997c2a6f3d04ad1b08b13e6220cac94","date":1273283476,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","sourceNew":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    luceneMatchVersion = getLuceneVersion(\"luceneMatchVersion\", Version.LUCENE_24);\n    log.info(\"Using Lucene MatchVersion: \" + luceneMatchVersion);\n\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n    if (dataDir != null && dataDir.length()==0) dataDir=null;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = (Node) getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, \n                                       get(\"jmx/@agentId\", null), \n                                       get(\"jmx/@serviceUrl\", null),\n                                       get(\"jmx/@rootName\", null));\n                                           \n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n\n     //TODO deprecated remove it later\n     loadPluginInfo(SolrHighlighter.class,\"highlighting\",false, false);\n     if( pluginStore.containsKey( SolrHighlighter.class.getName() ) )\n       log.warn( \"Deprecated syntax found. <highlighting/> should move to <searchComponent/>\" );\n\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","sourceOld":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    luceneMatchVersion = getLuceneVersion(\"luceneMatchVersion\", Version.LUCENE_24);\n    log.info(\"Using Lucene MatchVersion: \" + luceneMatchVersion);\n\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n    if (dataDir != null && dataDir.length()==0) dataDir=null;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = (Node) getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, get(\"jmx/@agentId\", null), get(\n          \"jmx/@serviceUrl\", null));\n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n\n     //TODO deprecated remove it later\n     loadPluginInfo(SolrHighlighter.class,\"highlighting\",false, false);\n     if( pluginStore.containsKey( SolrHighlighter.class.getName() ) )\n       log.warn( \"Deprecated syntax found. <highlighting/> should move to <searchComponent/>\" );\n\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3f7e3e91f914e6265ed09a3208cc60c9ba2a477d","date":1286157263,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","sourceNew":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    luceneMatchVersion = getLuceneVersion(\"luceneMatchVersion\", Version.LUCENE_24);\n    log.info(\"Using Lucene MatchVersion: \" + luceneMatchVersion);\n\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n    if (dataDir != null && dataDir.length()==0) dataDir=null;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, \n                                       get(\"jmx/@agentId\", null), \n                                       get(\"jmx/@serviceUrl\", null),\n                                       get(\"jmx/@rootName\", null));\n                                           \n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n\n     //TODO deprecated remove it later\n     loadPluginInfo(SolrHighlighter.class,\"highlighting\",false, false);\n     if( pluginStore.containsKey( SolrHighlighter.class.getName() ) )\n       log.warn( \"Deprecated syntax found. <highlighting/> should move to <searchComponent/>\" );\n\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","sourceOld":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    luceneMatchVersion = getLuceneVersion(\"luceneMatchVersion\", Version.LUCENE_24);\n    log.info(\"Using Lucene MatchVersion: \" + luceneMatchVersion);\n\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n    if (dataDir != null && dataDir.length()==0) dataDir=null;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = (Node) getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, \n                                       get(\"jmx/@agentId\", null), \n                                       get(\"jmx/@serviceUrl\", null),\n                                       get(\"jmx/@rootName\", null));\n                                           \n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n\n     //TODO deprecated remove it later\n     loadPluginInfo(SolrHighlighter.class,\"highlighting\",false, false);\n     if( pluginStore.containsKey( SolrHighlighter.class.getName() ) )\n       log.warn( \"Deprecated syntax found. <highlighting/> should move to <searchComponent/>\" );\n\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","sourceNew":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    luceneMatchVersion = getLuceneVersion(\"luceneMatchVersion\", Version.LUCENE_30);\n    log.info(\"Using Lucene MatchVersion: \" + luceneMatchVersion);\n\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n    if (dataDir != null && dataDir.length()==0) dataDir=null;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, \n                                       get(\"jmx/@agentId\", null), \n                                       get(\"jmx/@serviceUrl\", null),\n                                       get(\"jmx/@rootName\", null));\n                                           \n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n\n     //TODO deprecated remove it later\n     loadPluginInfo(SolrHighlighter.class,\"highlighting\",false, false);\n     if( pluginStore.containsKey( SolrHighlighter.class.getName() ) )\n       log.warn( \"Deprecated syntax found. <highlighting/> should move to <searchComponent/>\" );\n\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","sourceOld":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    luceneMatchVersion = getLuceneVersion(\"luceneMatchVersion\", Version.LUCENE_24);\n    log.info(\"Using Lucene MatchVersion: \" + luceneMatchVersion);\n\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n    if (dataDir != null && dataDir.length()==0) dataDir=null;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, \n                                       get(\"jmx/@agentId\", null), \n                                       get(\"jmx/@serviceUrl\", null),\n                                       get(\"jmx/@rootName\", null));\n                                           \n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n\n     //TODO deprecated remove it later\n     loadPluginInfo(SolrHighlighter.class,\"highlighting\",false, false);\n     if( pluginStore.containsKey( SolrHighlighter.class.getName() ) )\n       log.warn( \"Deprecated syntax found. <highlighting/> should move to <searchComponent/>\" );\n\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e97b3edffa80bb1a993f2baa9dfa465e62504a0b","date":1291207021,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","sourceNew":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    luceneMatchVersion = getLuceneVersion(\"luceneMatchVersion\");\n    log.info(\"Using Lucene MatchVersion: \" + luceneMatchVersion);\n\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n    if (dataDir != null && dataDir.length()==0) dataDir=null;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, \n                                       get(\"jmx/@agentId\", null), \n                                       get(\"jmx/@serviceUrl\", null),\n                                       get(\"jmx/@rootName\", null));\n                                           \n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n\n     //TODO deprecated remove it later\n     loadPluginInfo(SolrHighlighter.class,\"highlighting\",false, false);\n     if( pluginStore.containsKey( SolrHighlighter.class.getName() ) )\n       log.warn( \"Deprecated syntax found. <highlighting/> should move to <searchComponent/>\" );\n\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","sourceOld":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    luceneMatchVersion = getLuceneVersion(\"luceneMatchVersion\", Version.LUCENE_30);\n    log.info(\"Using Lucene MatchVersion: \" + luceneMatchVersion);\n\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n    if (dataDir != null && dataDir.length()==0) dataDir=null;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, \n                                       get(\"jmx/@agentId\", null), \n                                       get(\"jmx/@serviceUrl\", null),\n                                       get(\"jmx/@rootName\", null));\n                                           \n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n\n     //TODO deprecated remove it later\n     loadPluginInfo(SolrHighlighter.class,\"highlighting\",false, false);\n     if( pluginStore.containsKey( SolrHighlighter.class.getName() ) )\n       log.warn( \"Deprecated syntax found. <highlighting/> should move to <searchComponent/>\" );\n\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","sourceNew":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    luceneMatchVersion = getLuceneVersion(\"luceneMatchVersion\");\n    log.info(\"Using Lucene MatchVersion: \" + luceneMatchVersion);\n\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n    if (dataDir != null && dataDir.length()==0) dataDir=null;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, \n                                       get(\"jmx/@agentId\", null), \n                                       get(\"jmx/@serviceUrl\", null),\n                                       get(\"jmx/@rootName\", null));\n                                           \n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n\n     //TODO deprecated remove it later\n     loadPluginInfo(SolrHighlighter.class,\"highlighting\",false, false);\n     if( pluginStore.containsKey( SolrHighlighter.class.getName() ) )\n       log.warn( \"Deprecated syntax found. <highlighting/> should move to <searchComponent/>\" );\n\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","sourceOld":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    luceneMatchVersion = getLuceneVersion(\"luceneMatchVersion\", Version.LUCENE_24);\n    log.info(\"Using Lucene MatchVersion: \" + luceneMatchVersion);\n\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n    if (dataDir != null && dataDir.length()==0) dataDir=null;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, \n                                       get(\"jmx/@agentId\", null), \n                                       get(\"jmx/@serviceUrl\", null),\n                                       get(\"jmx/@rootName\", null));\n                                           \n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n\n     //TODO deprecated remove it later\n     loadPluginInfo(SolrHighlighter.class,\"highlighting\",false, false);\n     if( pluginStore.containsKey( SolrHighlighter.class.getName() ) )\n       log.warn( \"Deprecated syntax found. <highlighting/> should move to <searchComponent/>\" );\n\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28e9b4f0446e4a60433a9442e4b2fa4e2f68d737","date":1292289052,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","sourceNew":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    luceneMatchVersion = getLuceneVersion(\"luceneMatchVersion\");\n    log.info(\"Using Lucene MatchVersion: \" + luceneMatchVersion);\n\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n    if (dataDir != null && dataDir.length()==0) dataDir=null;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, \n                                       get(\"jmx/@agentId\", null), \n                                       get(\"jmx/@serviceUrl\", null),\n                                       get(\"jmx/@rootName\", null));\n                                           \n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n\n     // this is hackish, since it picks up all SolrEventListeners,\n     // regardless of when/how/why thye are used (or even if they are \n     // declared outside of the appropriate context) but there's no nice \n     // way arround that in the PluginInfo framework\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n\n     //TODO deprecated remove it later\n     loadPluginInfo(SolrHighlighter.class,\"highlighting\",false, false);\n     if( pluginStore.containsKey( SolrHighlighter.class.getName() ) )\n       log.warn( \"Deprecated syntax found. <highlighting/> should move to <searchComponent/>\" );\n\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","sourceOld":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    luceneMatchVersion = getLuceneVersion(\"luceneMatchVersion\");\n    log.info(\"Using Lucene MatchVersion: \" + luceneMatchVersion);\n\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n    if (dataDir != null && dataDir.length()==0) dataDir=null;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, \n                                       get(\"jmx/@agentId\", null), \n                                       get(\"jmx/@serviceUrl\", null),\n                                       get(\"jmx/@rootName\", null));\n                                           \n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n\n     //TODO deprecated remove it later\n     loadPluginInfo(SolrHighlighter.class,\"highlighting\",false, false);\n     if( pluginStore.containsKey( SolrHighlighter.class.getName() ) )\n       log.warn( \"Deprecated syntax found. <highlighting/> should move to <searchComponent/>\" );\n\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","sourceNew":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    luceneMatchVersion = getLuceneVersion(\"luceneMatchVersion\");\n    log.info(\"Using Lucene MatchVersion: \" + luceneMatchVersion);\n\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n    if (dataDir != null && dataDir.length()==0) dataDir=null;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, \n                                       get(\"jmx/@agentId\", null), \n                                       get(\"jmx/@serviceUrl\", null),\n                                       get(\"jmx/@rootName\", null));\n                                           \n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n\n     // this is hackish, since it picks up all SolrEventListeners,\n     // regardless of when/how/why thye are used (or even if they are \n     // declared outside of the appropriate context) but there's no nice \n     // way arround that in the PluginInfo framework\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n\n     //TODO deprecated remove it later\n     loadPluginInfo(SolrHighlighter.class,\"highlighting\",false, false);\n     if( pluginStore.containsKey( SolrHighlighter.class.getName() ) )\n       log.warn( \"Deprecated syntax found. <highlighting/> should move to <searchComponent/>\" );\n\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","sourceOld":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    luceneMatchVersion = getLuceneVersion(\"luceneMatchVersion\");\n    log.info(\"Using Lucene MatchVersion: \" + luceneMatchVersion);\n\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n    if (dataDir != null && dataDir.length()==0) dataDir=null;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, \n                                       get(\"jmx/@agentId\", null), \n                                       get(\"jmx/@serviceUrl\", null),\n                                       get(\"jmx/@rootName\", null));\n                                           \n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n\n     //TODO deprecated remove it later\n     loadPluginInfo(SolrHighlighter.class,\"highlighting\",false, false);\n     if( pluginStore.containsKey( SolrHighlighter.class.getName() ) )\n       log.warn( \"Deprecated syntax found. <highlighting/> should move to <searchComponent/>\" );\n\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","sourceNew":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    luceneMatchVersion = getLuceneVersion(\"luceneMatchVersion\");\n    log.info(\"Using Lucene MatchVersion: \" + luceneMatchVersion);\n\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n    if (dataDir != null && dataDir.length()==0) dataDir=null;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, \n                                       get(\"jmx/@agentId\", null), \n                                       get(\"jmx/@serviceUrl\", null),\n                                       get(\"jmx/@rootName\", null));\n                                           \n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n\n     // this is hackish, since it picks up all SolrEventListeners,\n     // regardless of when/how/why thye are used (or even if they are \n     // declared outside of the appropriate context) but there's no nice \n     // way arround that in the PluginInfo framework\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n\n     //TODO deprecated remove it later\n     loadPluginInfo(SolrHighlighter.class,\"highlighting\",false, false);\n     if( pluginStore.containsKey( SolrHighlighter.class.getName() ) )\n       log.warn( \"Deprecated syntax found. <highlighting/> should move to <searchComponent/>\" );\n\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","sourceOld":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    luceneMatchVersion = getLuceneVersion(\"luceneMatchVersion\", Version.LUCENE_24);\n    log.info(\"Using Lucene MatchVersion: \" + luceneMatchVersion);\n\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n    if (dataDir != null && dataDir.length()==0) dataDir=null;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = (Node) getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, \n                                       get(\"jmx/@agentId\", null), \n                                       get(\"jmx/@serviceUrl\", null),\n                                       get(\"jmx/@rootName\", null));\n                                           \n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n\n     //TODO deprecated remove it later\n     loadPluginInfo(SolrHighlighter.class,\"highlighting\",false, false);\n     if( pluginStore.containsKey( SolrHighlighter.class.getName() ) )\n       log.warn( \"Deprecated syntax found. <highlighting/> should move to <searchComponent/>\" );\n\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ca9f0d2674f0af26237bf66660b2e5be1512723b","date":1293818922,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","sourceNew":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    luceneMatchVersion = getLuceneVersion(\"luceneMatchVersion\");\n    log.info(\"Using Lucene MatchVersion: \" + luceneMatchVersion);\n\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n    if (dataDir != null && dataDir.length()==0) dataDir=null;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, \n                                       get(\"jmx/@agentId\", null), \n                                       get(\"jmx/@serviceUrl\", null),\n                                       get(\"jmx/@rootName\", null));\n                                           \n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n\n     // this is hackish, since it picks up all SolrEventListeners,\n     // regardless of when/how/why thye are used (or even if they are \n     // declared outside of the appropriate context) but there's no nice \n     // way arround that in the PluginInfo framework\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n  }\n\n","sourceOld":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    luceneMatchVersion = getLuceneVersion(\"luceneMatchVersion\");\n    log.info(\"Using Lucene MatchVersion: \" + luceneMatchVersion);\n\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n    if (dataDir != null && dataDir.length()==0) dataDir=null;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, \n                                       get(\"jmx/@agentId\", null), \n                                       get(\"jmx/@serviceUrl\", null),\n                                       get(\"jmx/@rootName\", null));\n                                           \n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n\n     // this is hackish, since it picks up all SolrEventListeners,\n     // regardless of when/how/why thye are used (or even if they are \n     // declared outside of the appropriate context) but there's no nice \n     // way arround that in the PluginInfo framework\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n\n     //TODO deprecated remove it later\n     loadPluginInfo(SolrHighlighter.class,\"highlighting\",false, false);\n     if( pluginStore.containsKey( SolrHighlighter.class.getName() ) )\n       log.warn( \"Deprecated syntax found. <highlighting/> should move to <searchComponent/>\" );\n\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","sourceNew":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    luceneMatchVersion = getLuceneVersion(\"luceneMatchVersion\");\n    log.info(\"Using Lucene MatchVersion: \" + luceneMatchVersion);\n\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n    if (dataDir != null && dataDir.length()==0) dataDir=null;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, \n                                       get(\"jmx/@agentId\", null), \n                                       get(\"jmx/@serviceUrl\", null),\n                                       get(\"jmx/@rootName\", null));\n                                           \n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n\n     // this is hackish, since it picks up all SolrEventListeners,\n     // regardless of when/how/why thye are used (or even if they are \n     // declared outside of the appropriate context) but there's no nice \n     // way arround that in the PluginInfo framework\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n  }\n\n","sourceOld":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    luceneMatchVersion = getLuceneVersion(\"luceneMatchVersion\");\n    log.info(\"Using Lucene MatchVersion: \" + luceneMatchVersion);\n\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n    if (dataDir != null && dataDir.length()==0) dataDir=null;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, \n                                       get(\"jmx/@agentId\", null), \n                                       get(\"jmx/@serviceUrl\", null),\n                                       get(\"jmx/@rootName\", null));\n                                           \n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n\n     // this is hackish, since it picks up all SolrEventListeners,\n     // regardless of when/how/why thye are used (or even if they are \n     // declared outside of the appropriate context) but there's no nice \n     // way arround that in the PluginInfo framework\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n\n     //TODO deprecated remove it later\n     loadPluginInfo(SolrHighlighter.class,\"highlighting\",false, false);\n     if( pluginStore.containsKey( SolrHighlighter.class.getName() ) )\n       log.warn( \"Deprecated syntax found. <highlighting/> should move to <searchComponent/>\" );\n\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","sourceNew":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    luceneMatchVersion = getLuceneVersion(\"luceneMatchVersion\");\n    log.info(\"Using Lucene MatchVersion: \" + luceneMatchVersion);\n\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n    if (dataDir != null && dataDir.length()==0) dataDir=null;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, \n                                       get(\"jmx/@agentId\", null), \n                                       get(\"jmx/@serviceUrl\", null),\n                                       get(\"jmx/@rootName\", null));\n                                           \n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n\n     // this is hackish, since it picks up all SolrEventListeners,\n     // regardless of when/how/why thye are used (or even if they are \n     // declared outside of the appropriate context) but there's no nice \n     // way arround that in the PluginInfo framework\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n  }\n\n","sourceOld":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    luceneMatchVersion = getLuceneVersion(\"luceneMatchVersion\");\n    log.info(\"Using Lucene MatchVersion: \" + luceneMatchVersion);\n\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n    if (dataDir != null && dataDir.length()==0) dataDir=null;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, \n                                       get(\"jmx/@agentId\", null), \n                                       get(\"jmx/@serviceUrl\", null),\n                                       get(\"jmx/@rootName\", null));\n                                           \n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n\n     // this is hackish, since it picks up all SolrEventListeners,\n     // regardless of when/how/why thye are used (or even if they are \n     // declared outside of the appropriate context) but there's no nice \n     // way arround that in the PluginInfo framework\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n\n     //TODO deprecated remove it later\n     loadPluginInfo(SolrHighlighter.class,\"highlighting\",false, false);\n     if( pluginStore.containsKey( SolrHighlighter.class.getName() ) )\n       log.warn( \"Deprecated syntax found. <highlighting/> should move to <searchComponent/>\" );\n\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74090d4b844e97e85a7b922b6a6db19362528447","date":1296077982,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","sourceNew":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    luceneMatchVersion = getLuceneVersion(\"luceneMatchVersion\");\n    log.info(\"Using Lucene MatchVersion: \" + luceneMatchVersion);\n\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = Math.max(1, getInt(\"query/queryResultWindowSize\", 1));\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n    if (dataDir != null && dataDir.length()==0) dataDir=null;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, \n                                       get(\"jmx/@agentId\", null), \n                                       get(\"jmx/@serviceUrl\", null),\n                                       get(\"jmx/@rootName\", null));\n                                           \n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n\n     // this is hackish, since it picks up all SolrEventListeners,\n     // regardless of when/how/why thye are used (or even if they are \n     // declared outside of the appropriate context) but there's no nice \n     // way arround that in the PluginInfo framework\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n  }\n\n","sourceOld":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    luceneMatchVersion = getLuceneVersion(\"luceneMatchVersion\");\n    log.info(\"Using Lucene MatchVersion: \" + luceneMatchVersion);\n\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n    if (dataDir != null && dataDir.length()==0) dataDir=null;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, \n                                       get(\"jmx/@agentId\", null), \n                                       get(\"jmx/@serviceUrl\", null),\n                                       get(\"jmx/@rootName\", null));\n                                           \n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n\n     // this is hackish, since it picks up all SolrEventListeners,\n     // regardless of when/how/why thye are used (or even if they are \n     // declared outside of the appropriate context) but there's no nice \n     // way arround that in the PluginInfo framework\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n  }\n\n","bugFix":["048361614025800e582bfc7a7b0329dc6fd6a95e"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","sourceNew":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    luceneMatchVersion = getLuceneVersion(\"luceneMatchVersion\");\n    log.info(\"Using Lucene MatchVersion: \" + luceneMatchVersion);\n\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = Math.max(1, getInt(\"query/queryResultWindowSize\", 1));\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n    if (dataDir != null && dataDir.length()==0) dataDir=null;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, \n                                       get(\"jmx/@agentId\", null), \n                                       get(\"jmx/@serviceUrl\", null),\n                                       get(\"jmx/@rootName\", null));\n                                           \n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n\n     // this is hackish, since it picks up all SolrEventListeners,\n     // regardless of when/how/why thye are used (or even if they are \n     // declared outside of the appropriate context) but there's no nice \n     // way arround that in the PluginInfo framework\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n  }\n\n","sourceOld":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    luceneMatchVersion = getLuceneVersion(\"luceneMatchVersion\");\n    log.info(\"Using Lucene MatchVersion: \" + luceneMatchVersion);\n\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n    if (dataDir != null && dataDir.length()==0) dataDir=null;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, \n                                       get(\"jmx/@agentId\", null), \n                                       get(\"jmx/@serviceUrl\", null),\n                                       get(\"jmx/@rootName\", null));\n                                           \n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n\n     // this is hackish, since it picks up all SolrEventListeners,\n     // regardless of when/how/why thye are used (or even if they are \n     // declared outside of the appropriate context) but there's no nice \n     // way arround that in the PluginInfo framework\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","sourceNew":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    luceneMatchVersion = getLuceneVersion(\"luceneMatchVersion\");\n    log.info(\"Using Lucene MatchVersion: \" + luceneMatchVersion);\n\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = Math.max(1, getInt(\"query/queryResultWindowSize\", 1));\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n    if (dataDir != null && dataDir.length()==0) dataDir=null;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, \n                                       get(\"jmx/@agentId\", null), \n                                       get(\"jmx/@serviceUrl\", null),\n                                       get(\"jmx/@rootName\", null));\n                                           \n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n\n     // this is hackish, since it picks up all SolrEventListeners,\n     // regardless of when/how/why thye are used (or even if they are \n     // declared outside of the appropriate context) but there's no nice \n     // way arround that in the PluginInfo framework\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n  }\n\n","sourceOld":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    luceneMatchVersion = getLuceneVersion(\"luceneMatchVersion\");\n    log.info(\"Using Lucene MatchVersion: \" + luceneMatchVersion);\n\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n    if (dataDir != null && dataDir.length()==0) dataDir=null;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, \n                                       get(\"jmx/@agentId\", null), \n                                       get(\"jmx/@serviceUrl\", null),\n                                       get(\"jmx/@rootName\", null));\n                                           \n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n\n     // this is hackish, since it picks up all SolrEventListeners,\n     // regardless of when/how/why thye are used (or even if they are \n     // declared outside of the appropriate context) but there's no nice \n     // way arround that in the PluginInfo framework\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b24326411db492f92ea49f6fb947c90bc73cf19e","date":1298813468,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputSource).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","sourceNew":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputSource is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    luceneMatchVersion = getLuceneVersion(\"luceneMatchVersion\");\n    log.info(\"Using Lucene MatchVersion: \" + luceneMatchVersion);\n\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = Math.max(1, getInt(\"query/queryResultWindowSize\", 1));\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n    if (dataDir != null && dataDir.length()==0) dataDir=null;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, \n                                       get(\"jmx/@agentId\", null), \n                                       get(\"jmx/@serviceUrl\", null),\n                                       get(\"jmx/@rootName\", null));\n                                           \n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n\n     // this is hackish, since it picks up all SolrEventListeners,\n     // regardless of when/how/why thye are used (or even if they are \n     // declared outside of the appropriate context) but there's no nice \n     // way arround that in the PluginInfo framework\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n  }\n\n","sourceOld":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    luceneMatchVersion = getLuceneVersion(\"luceneMatchVersion\");\n    log.info(\"Using Lucene MatchVersion: \" + luceneMatchVersion);\n\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = Math.max(1, getInt(\"query/queryResultWindowSize\", 1));\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n    if (dataDir != null && dataDir.length()==0) dataDir=null;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, \n                                       get(\"jmx/@agentId\", null), \n                                       get(\"jmx/@serviceUrl\", null),\n                                       get(\"jmx/@rootName\", null));\n                                           \n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n\n     // this is hackish, since it picks up all SolrEventListeners,\n     // regardless of when/how/why thye are used (or even if they are \n     // declared outside of the appropriate context) but there's no nice \n     // way arround that in the PluginInfo framework\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","sourceNew":null,"sourceOld":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    luceneMatchVersion = getLuceneVersion(\"luceneMatchVersion\");\n    log.info(\"Using Lucene MatchVersion: \" + luceneMatchVersion);\n\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = Math.max(1, getInt(\"query/queryResultWindowSize\", 1));\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n    if (dataDir != null && dataDir.length()==0) dataDir=null;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, \n                                       get(\"jmx/@agentId\", null), \n                                       get(\"jmx/@serviceUrl\", null),\n                                       get(\"jmx/@rootName\", null));\n                                           \n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n\n     // this is hackish, since it picks up all SolrEventListeners,\n     // regardless of when/how/why thye are used (or even if they are \n     // declared outside of the appropriate context) but there's no nice \n     // way arround that in the PluginInfo framework\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","sourceNew":null,"sourceOld":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    luceneMatchVersion = getLuceneVersion(\"luceneMatchVersion\");\n    log.info(\"Using Lucene MatchVersion: \" + luceneMatchVersion);\n\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = Math.max(1, getInt(\"query/queryResultWindowSize\", 1));\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n    if (dataDir != null && dataDir.length()==0) dataDir=null;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, \n                                       get(\"jmx/@agentId\", null), \n                                       get(\"jmx/@serviceUrl\", null),\n                                       get(\"jmx/@rootName\", null));\n                                           \n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n\n     // this is hackish, since it picks up all SolrEventListeners,\n     // regardless of when/how/why thye are used (or even if they are \n     // declared outside of the appropriate context) but there's no nice \n     // way arround that in the PluginInfo framework\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"28e9b4f0446e4a60433a9442e4b2fa4e2f68d737":["e97b3edffa80bb1a993f2baa9dfa465e62504a0b"],"3f7e3e91f914e6265ed09a3208cc60c9ba2a477d":["d73a8a1e6997c2a6f3d04ad1b08b13e6220cac94"],"70ad682703b8585f5d0a637efec044d57ec05efb":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","ca9f0d2674f0af26237bf66660b2e5be1512723b"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["3bb13258feba31ab676502787ab2e1779f129b7a","28e9b4f0446e4a60433a9442e4b2fa4e2f68d737"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d73a8a1e6997c2a6f3d04ad1b08b13e6220cac94","28e9b4f0446e4a60433a9442e4b2fa4e2f68d737"],"b24326411db492f92ea49f6fb947c90bc73cf19e":["74090d4b844e97e85a7b922b6a6db19362528447"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ca9f0d2674f0af26237bf66660b2e5be1512723b"],"d73a8a1e6997c2a6f3d04ad1b08b13e6220cac94":["1da8d55113b689b06716246649de6f62430f15c0"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bde51b089eb7f86171eb3406e38a274743f9b7ac","b24326411db492f92ea49f6fb947c90bc73cf19e"],"ca9f0d2674f0af26237bf66660b2e5be1512723b":["28e9b4f0446e4a60433a9442e4b2fa4e2f68d737"],"e97b3edffa80bb1a993f2baa9dfa465e62504a0b":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","b24326411db492f92ea49f6fb947c90bc73cf19e"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","74090d4b844e97e85a7b922b6a6db19362528447"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","74090d4b844e97e85a7b922b6a6db19362528447"],"3bb13258feba31ab676502787ab2e1779f129b7a":["3f7e3e91f914e6265ed09a3208cc60c9ba2a477d","e97b3edffa80bb1a993f2baa9dfa465e62504a0b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b24326411db492f92ea49f6fb947c90bc73cf19e"],"74090d4b844e97e85a7b922b6a6db19362528447":["ca9f0d2674f0af26237bf66660b2e5be1512723b"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["3f7e3e91f914e6265ed09a3208cc60c9ba2a477d"]},"commit2Childs":{"28e9b4f0446e4a60433a9442e4b2fa4e2f68d737":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ca9f0d2674f0af26237bf66660b2e5be1512723b"],"3f7e3e91f914e6265ed09a3208cc60c9ba2a477d":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["70ad682703b8585f5d0a637efec044d57ec05efb"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"b24326411db492f92ea49f6fb947c90bc73cf19e":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1da8d55113b689b06716246649de6f62430f15c0":["d73a8a1e6997c2a6f3d04ad1b08b13e6220cac94"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"d73a8a1e6997c2a6f3d04ad1b08b13e6220cac94":["3f7e3e91f914e6265ed09a3208cc60c9ba2a477d","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"e97b3edffa80bb1a993f2baa9dfa465e62504a0b":["28e9b4f0446e4a60433a9442e4b2fa4e2f68d737","3bb13258feba31ab676502787ab2e1779f129b7a"],"ca9f0d2674f0af26237bf66660b2e5be1512723b":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","74090d4b844e97e85a7b922b6a6db19362528447"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"3bb13258feba31ab676502787ab2e1779f129b7a":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"74090d4b844e97e85a7b922b6a6db19362528447":["b24326411db492f92ea49f6fb947c90bc73cf19e","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["e97b3edffa80bb1a993f2baa9dfa465e62504a0b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}