{"path":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAnalyzerClass().mjava","commits":[{"id":"3c3d2444349054ee067813f2bec7610c0933009b","date":1434665250,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAnalyzerClass().mjava","pathOld":"/dev/null","sourceNew":"  public void testAnalyzerClass() throws Exception {\n\n    String addFieldTypeAnalyzerWithClass = \"{\\n\" +\n        \"'add-field-type' : {\" +\n        \"    'name' : 'myNewTextFieldWithAnalyzerClass',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {\\n\" +\n        \"        'luceneMatchVersion':'5.0.0',\\n\" +\n        \"        'class':'org.apache.lucene.analysis.core.WhitespaceAnalyzer'\\n\";\n    String charFilters =\n        \"        'charFilters' : [{\\n\" +\n        \"            'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"            'replacement':'$1$1',\\n\" +\n        \"            'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"        }],\\n\";\n    String tokenizer =\n        \"        'tokenizer' : { 'class':'solr.WhitespaceTokenizerFactory' },\\n\";\n    String filters =\n        \"        'filters' : [{ 'class':'solr.ASCIIFoldingFilterFactory' }]\\n\";\n    String suffix =\n        \"    }\\n\"+\n        \"}}\";\n\n    String response = restTestHarness.post(\"/schema?wt=json\",\n        json(addFieldTypeAnalyzerWithClass + ',' + charFilters + tokenizer + filters + suffix));\n    Map map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    List list = (List)map.get(\"errors\");\n    List errorList = (List)((Map)list.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define any char filters!\"));\n\n    response = restTestHarness.post(\"/schema?wt=json\",\n        json(addFieldTypeAnalyzerWithClass + ',' + tokenizer + filters + suffix));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    list = (List)map.get(\"errors\");\n    errorList = (List)((Map)list.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define a tokenizer!\"));\n\n    response = restTestHarness.post(\"/schema?wt=json\",\n        json(addFieldTypeAnalyzerWithClass + ',' + filters + suffix));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    list = (List)map.get(\"errors\");\n    errorList = (List)((Map)list.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define any filters!\"));\n\n    response = restTestHarness.post(\"/schema?wt=json\", json(addFieldTypeAnalyzerWithClass + suffix));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    map = getObj(restTestHarness, \"myNewTextFieldWithAnalyzerClass\", \"fieldTypes\");\n    assertNotNull(map);\n    Map analyzer = (Map)map.get(\"analyzer\");\n    assertEquals(\"org.apache.lucene.analysis.core.WhitespaceAnalyzer\", String.valueOf(analyzer.get(\"class\")));\n    assertEquals(\"5.0.0\", String.valueOf(analyzer.get(\"luceneMatchVersion\")));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["73b91012493e4750b9dc169cf1ae8cdd91493b42"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ac1e7fa558287a811ea07634d815ee7b1c541284","date":1500910922,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAnalyzerClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAnalyzerClass().mjava","sourceNew":"  public void testAnalyzerClass() throws Exception {\n\n    String addFieldTypeAnalyzerWithClass = \"{\\n\" +\n        \"'add-field-type' : {\" +\n        \"    'name' : 'myNewTextFieldWithAnalyzerClass',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {\\n\" +\n        \"        'luceneMatchVersion':'5.0.0',\\n\" +\n        \"        'class':'org.apache.lucene.analysis.core.WhitespaceAnalyzer'\\n\";\n    String charFilters =\n        \"        'charFilters' : [{\\n\" +\n        \"            'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"            'replacement':'$1$1',\\n\" +\n        \"            'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"        }],\\n\";\n    String tokenizer =\n        \"        'tokenizer' : { 'class':'solr.WhitespaceTokenizerFactory' },\\n\";\n    String filters =\n        \"        'filters' : [{ 'class':'solr.ASCIIFoldingFilterFactory' }]\\n\";\n    String suffix =\n        \"    }\\n\"+\n        \"}}\";\n\n    String response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + charFilters + tokenizer + filters + suffix));\n    Map map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    List list = (List)map.get(\"errors\");\n    List errorList = (List)((Map)list.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define any char filters!\"));\n\n    response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + tokenizer + filters + suffix));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    list = (List)map.get(\"errors\");\n    errorList = (List)((Map)list.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define a tokenizer!\"));\n\n    response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + filters + suffix));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    list = (List)map.get(\"errors\");\n    errorList = (List)((Map)list.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define any filters!\"));\n\n    response = restTestHarness.post(\"/schema\", json(addFieldTypeAnalyzerWithClass + suffix));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    map = getObj(restTestHarness, \"myNewTextFieldWithAnalyzerClass\", \"fieldTypes\");\n    assertNotNull(map);\n    Map analyzer = (Map)map.get(\"analyzer\");\n    assertEquals(\"org.apache.lucene.analysis.core.WhitespaceAnalyzer\", String.valueOf(analyzer.get(\"class\")));\n    assertEquals(\"5.0.0\", String.valueOf(analyzer.get(\"luceneMatchVersion\")));\n  }\n\n","sourceOld":"  public void testAnalyzerClass() throws Exception {\n\n    String addFieldTypeAnalyzerWithClass = \"{\\n\" +\n        \"'add-field-type' : {\" +\n        \"    'name' : 'myNewTextFieldWithAnalyzerClass',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {\\n\" +\n        \"        'luceneMatchVersion':'5.0.0',\\n\" +\n        \"        'class':'org.apache.lucene.analysis.core.WhitespaceAnalyzer'\\n\";\n    String charFilters =\n        \"        'charFilters' : [{\\n\" +\n        \"            'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"            'replacement':'$1$1',\\n\" +\n        \"            'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"        }],\\n\";\n    String tokenizer =\n        \"        'tokenizer' : { 'class':'solr.WhitespaceTokenizerFactory' },\\n\";\n    String filters =\n        \"        'filters' : [{ 'class':'solr.ASCIIFoldingFilterFactory' }]\\n\";\n    String suffix =\n        \"    }\\n\"+\n        \"}}\";\n\n    String response = restTestHarness.post(\"/schema?wt=json\",\n        json(addFieldTypeAnalyzerWithClass + ',' + charFilters + tokenizer + filters + suffix));\n    Map map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    List list = (List)map.get(\"errors\");\n    List errorList = (List)((Map)list.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define any char filters!\"));\n\n    response = restTestHarness.post(\"/schema?wt=json\",\n        json(addFieldTypeAnalyzerWithClass + ',' + tokenizer + filters + suffix));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    list = (List)map.get(\"errors\");\n    errorList = (List)((Map)list.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define a tokenizer!\"));\n\n    response = restTestHarness.post(\"/schema?wt=json\",\n        json(addFieldTypeAnalyzerWithClass + ',' + filters + suffix));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    list = (List)map.get(\"errors\");\n    errorList = (List)((Map)list.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define any filters!\"));\n\n    response = restTestHarness.post(\"/schema?wt=json\", json(addFieldTypeAnalyzerWithClass + suffix));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    map = getObj(restTestHarness, \"myNewTextFieldWithAnalyzerClass\", \"fieldTypes\");\n    assertNotNull(map);\n    Map analyzer = (Map)map.get(\"analyzer\");\n    assertEquals(\"org.apache.lucene.analysis.core.WhitespaceAnalyzer\", String.valueOf(analyzer.get(\"class\")));\n    assertEquals(\"5.0.0\", String.valueOf(analyzer.get(\"luceneMatchVersion\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAnalyzerClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAnalyzerClass().mjava","sourceNew":"  public void testAnalyzerClass() throws Exception {\n\n    String addFieldTypeAnalyzerWithClass = \"{\\n\" +\n        \"'add-field-type' : {\" +\n        \"    'name' : 'myNewTextFieldWithAnalyzerClass',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {\\n\" +\n        \"        'luceneMatchVersion':'5.0.0',\\n\" +\n        \"        'class':'org.apache.lucene.analysis.core.WhitespaceAnalyzer'\\n\";\n    String charFilters =\n        \"        'charFilters' : [{\\n\" +\n        \"            'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"            'replacement':'$1$1',\\n\" +\n        \"            'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"        }],\\n\";\n    String tokenizer =\n        \"        'tokenizer' : { 'class':'solr.WhitespaceTokenizerFactory' },\\n\";\n    String filters =\n        \"        'filters' : [{ 'class':'solr.ASCIIFoldingFilterFactory' }]\\n\";\n    String suffix =\n        \"    }\\n\"+\n        \"}}\";\n\n    String response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + charFilters + tokenizer + filters + suffix));\n    Map map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    List list = (List)map.get(\"errors\");\n    List errorList = (List)((Map)list.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define any char filters!\"));\n\n    response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + tokenizer + filters + suffix));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    list = (List)map.get(\"errors\");\n    errorList = (List)((Map)list.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define a tokenizer!\"));\n\n    response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + filters + suffix));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    list = (List)map.get(\"errors\");\n    errorList = (List)((Map)list.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define any filters!\"));\n\n    response = restTestHarness.post(\"/schema\", json(addFieldTypeAnalyzerWithClass + suffix));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    map = getObj(restTestHarness, \"myNewTextFieldWithAnalyzerClass\", \"fieldTypes\");\n    assertNotNull(map);\n    Map analyzer = (Map)map.get(\"analyzer\");\n    assertEquals(\"org.apache.lucene.analysis.core.WhitespaceAnalyzer\", String.valueOf(analyzer.get(\"class\")));\n    assertEquals(\"5.0.0\", String.valueOf(analyzer.get(\"luceneMatchVersion\")));\n  }\n\n","sourceOld":"  public void testAnalyzerClass() throws Exception {\n\n    String addFieldTypeAnalyzerWithClass = \"{\\n\" +\n        \"'add-field-type' : {\" +\n        \"    'name' : 'myNewTextFieldWithAnalyzerClass',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {\\n\" +\n        \"        'luceneMatchVersion':'5.0.0',\\n\" +\n        \"        'class':'org.apache.lucene.analysis.core.WhitespaceAnalyzer'\\n\";\n    String charFilters =\n        \"        'charFilters' : [{\\n\" +\n        \"            'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"            'replacement':'$1$1',\\n\" +\n        \"            'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"        }],\\n\";\n    String tokenizer =\n        \"        'tokenizer' : { 'class':'solr.WhitespaceTokenizerFactory' },\\n\";\n    String filters =\n        \"        'filters' : [{ 'class':'solr.ASCIIFoldingFilterFactory' }]\\n\";\n    String suffix =\n        \"    }\\n\"+\n        \"}}\";\n\n    String response = restTestHarness.post(\"/schema?wt=json\",\n        json(addFieldTypeAnalyzerWithClass + ',' + charFilters + tokenizer + filters + suffix));\n    Map map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    List list = (List)map.get(\"errors\");\n    List errorList = (List)((Map)list.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define any char filters!\"));\n\n    response = restTestHarness.post(\"/schema?wt=json\",\n        json(addFieldTypeAnalyzerWithClass + ',' + tokenizer + filters + suffix));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    list = (List)map.get(\"errors\");\n    errorList = (List)((Map)list.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define a tokenizer!\"));\n\n    response = restTestHarness.post(\"/schema?wt=json\",\n        json(addFieldTypeAnalyzerWithClass + ',' + filters + suffix));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    list = (List)map.get(\"errors\");\n    errorList = (List)((Map)list.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define any filters!\"));\n\n    response = restTestHarness.post(\"/schema?wt=json\", json(addFieldTypeAnalyzerWithClass + suffix));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    map = getObj(restTestHarness, \"myNewTextFieldWithAnalyzerClass\", \"fieldTypes\");\n    assertNotNull(map);\n    Map analyzer = (Map)map.get(\"analyzer\");\n    assertEquals(\"org.apache.lucene.analysis.core.WhitespaceAnalyzer\", String.valueOf(analyzer.get(\"class\")));\n    assertEquals(\"5.0.0\", String.valueOf(analyzer.get(\"luceneMatchVersion\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAnalyzerClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAnalyzerClass().mjava","sourceNew":"  public void testAnalyzerClass() throws Exception {\n\n    String addFieldTypeAnalyzerWithClass = \"{\\n\" +\n        \"'add-field-type' : {\" +\n        \"    'name' : 'myNewTextFieldWithAnalyzerClass',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {\\n\" +\n        \"        'luceneMatchVersion':'5.0.0',\\n\" +\n        \"        'class':'org.apache.lucene.analysis.core.WhitespaceAnalyzer'\\n\";\n    String charFilters =\n        \"        'charFilters' : [{\\n\" +\n        \"            'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"            'replacement':'$1$1',\\n\" +\n        \"            'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"        }],\\n\";\n    String tokenizer =\n        \"        'tokenizer' : { 'class':'solr.WhitespaceTokenizerFactory' },\\n\";\n    String filters =\n        \"        'filters' : [{ 'class':'solr.ASCIIFoldingFilterFactory' }]\\n\";\n    String suffix =\n        \"    }\\n\"+\n        \"}}\";\n\n    String response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + charFilters + tokenizer + filters + suffix));\n    Map map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    List list = (List)map.get(\"errors\");\n    List errorList = (List)((Map)list.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define any char filters!\"));\n\n    response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + tokenizer + filters + suffix));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    list = (List)map.get(\"errors\");\n    errorList = (List)((Map)list.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define a tokenizer!\"));\n\n    response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + filters + suffix));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    list = (List)map.get(\"errors\");\n    errorList = (List)((Map)list.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define any filters!\"));\n\n    response = restTestHarness.post(\"/schema\", json(addFieldTypeAnalyzerWithClass + suffix));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    map = getObj(restTestHarness, \"myNewTextFieldWithAnalyzerClass\", \"fieldTypes\");\n    assertNotNull(map);\n    Map analyzer = (Map)map.get(\"analyzer\");\n    assertEquals(\"org.apache.lucene.analysis.core.WhitespaceAnalyzer\", String.valueOf(analyzer.get(\"class\")));\n    assertEquals(\"5.0.0\", String.valueOf(analyzer.get(\"luceneMatchVersion\")));\n  }\n\n","sourceOld":"  public void testAnalyzerClass() throws Exception {\n\n    String addFieldTypeAnalyzerWithClass = \"{\\n\" +\n        \"'add-field-type' : {\" +\n        \"    'name' : 'myNewTextFieldWithAnalyzerClass',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {\\n\" +\n        \"        'luceneMatchVersion':'5.0.0',\\n\" +\n        \"        'class':'org.apache.lucene.analysis.core.WhitespaceAnalyzer'\\n\";\n    String charFilters =\n        \"        'charFilters' : [{\\n\" +\n        \"            'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"            'replacement':'$1$1',\\n\" +\n        \"            'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"        }],\\n\";\n    String tokenizer =\n        \"        'tokenizer' : { 'class':'solr.WhitespaceTokenizerFactory' },\\n\";\n    String filters =\n        \"        'filters' : [{ 'class':'solr.ASCIIFoldingFilterFactory' }]\\n\";\n    String suffix =\n        \"    }\\n\"+\n        \"}}\";\n\n    String response = restTestHarness.post(\"/schema?wt=json\",\n        json(addFieldTypeAnalyzerWithClass + ',' + charFilters + tokenizer + filters + suffix));\n    Map map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    List list = (List)map.get(\"errors\");\n    List errorList = (List)((Map)list.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define any char filters!\"));\n\n    response = restTestHarness.post(\"/schema?wt=json\",\n        json(addFieldTypeAnalyzerWithClass + ',' + tokenizer + filters + suffix));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    list = (List)map.get(\"errors\");\n    errorList = (List)((Map)list.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define a tokenizer!\"));\n\n    response = restTestHarness.post(\"/schema?wt=json\",\n        json(addFieldTypeAnalyzerWithClass + ',' + filters + suffix));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    list = (List)map.get(\"errors\");\n    errorList = (List)((Map)list.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define any filters!\"));\n\n    response = restTestHarness.post(\"/schema?wt=json\", json(addFieldTypeAnalyzerWithClass + suffix));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    map = getObj(restTestHarness, \"myNewTextFieldWithAnalyzerClass\", \"fieldTypes\");\n    assertNotNull(map);\n    Map analyzer = (Map)map.get(\"analyzer\");\n    assertEquals(\"org.apache.lucene.analysis.core.WhitespaceAnalyzer\", String.valueOf(analyzer.get(\"class\")));\n    assertEquals(\"5.0.0\", String.valueOf(analyzer.get(\"luceneMatchVersion\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"03d29de0abdd3a2150c0dabfe1bf98024bbfa367","date":1515464714,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAnalyzerClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAnalyzerClass().mjava","sourceNew":"  public void testAnalyzerClass() throws Exception {\n\n    String addFieldTypeAnalyzerWithClass = \"{\\n\" +\n        \"'add-field-type' : {\" +\n        \"    'name' : 'myNewTextFieldWithAnalyzerClass',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {\\n\" +\n        \"        'luceneMatchVersion':'5.0.0',\\n\" +\n        \"        'class':'org.apache.lucene.analysis.core.WhitespaceAnalyzer'\\n\";\n    String charFilters =\n        \"        'charFilters' : [{\\n\" +\n        \"            'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"            'replacement':'$1$1',\\n\" +\n        \"            'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"        }],\\n\";\n    String tokenizer =\n        \"        'tokenizer' : { 'class':'solr.WhitespaceTokenizerFactory' },\\n\";\n    String filters =\n        \"        'filters' : [{ 'class':'solr.ASCIIFoldingFilterFactory' }]\\n\";\n    String suffix =\n        \"    }\\n\"+\n        \"}}\";\n\n    String response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + charFilters + tokenizer + filters + suffix));\n    Map map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Map error = (Map)map.get(\"error\");\n    assertNotNull(\"No errors\", error);\n    List details = (List)error.get(\"details\");\n    assertNotNull(\"No details\", details);\n    assertEquals(\"Wrong number of details\", 1, details.size());\n    List errorList = (List)((Map)details.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define any char filters!\"));\n\n    response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + tokenizer + filters + suffix));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    error = (Map)map.get(\"error\");\n    assertNotNull(\"No errors\", error);\n    details = (List)error.get(\"details\");\n    assertNotNull(\"No details\", details);\n    assertEquals(\"Wrong number of details\", 1, details.size());\n    errorList = (List)((Map)details.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define a tokenizer!\"));\n\n    response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + filters + suffix));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    error = (Map)map.get(\"error\");\n    assertNotNull(\"No errors\", error);\n    details = (List)error.get(\"details\");\n    assertNotNull(\"No details\", details);\n    assertEquals(\"Wrong number of details\", 1, details.size());\n    errorList = (List)((Map)details.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define any filters!\"));\n\n    response = restTestHarness.post(\"/schema\", json(addFieldTypeAnalyzerWithClass + suffix));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"error\"));\n\n    map = getObj(restTestHarness, \"myNewTextFieldWithAnalyzerClass\", \"fieldTypes\");\n    assertNotNull(map);\n    Map analyzer = (Map)map.get(\"analyzer\");\n    assertEquals(\"org.apache.lucene.analysis.core.WhitespaceAnalyzer\", String.valueOf(analyzer.get(\"class\")));\n    assertEquals(\"5.0.0\", String.valueOf(analyzer.get(\"luceneMatchVersion\")));\n  }\n\n","sourceOld":"  public void testAnalyzerClass() throws Exception {\n\n    String addFieldTypeAnalyzerWithClass = \"{\\n\" +\n        \"'add-field-type' : {\" +\n        \"    'name' : 'myNewTextFieldWithAnalyzerClass',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {\\n\" +\n        \"        'luceneMatchVersion':'5.0.0',\\n\" +\n        \"        'class':'org.apache.lucene.analysis.core.WhitespaceAnalyzer'\\n\";\n    String charFilters =\n        \"        'charFilters' : [{\\n\" +\n        \"            'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"            'replacement':'$1$1',\\n\" +\n        \"            'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"        }],\\n\";\n    String tokenizer =\n        \"        'tokenizer' : { 'class':'solr.WhitespaceTokenizerFactory' },\\n\";\n    String filters =\n        \"        'filters' : [{ 'class':'solr.ASCIIFoldingFilterFactory' }]\\n\";\n    String suffix =\n        \"    }\\n\"+\n        \"}}\";\n\n    String response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + charFilters + tokenizer + filters + suffix));\n    Map map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    List list = (List)map.get(\"errors\");\n    List errorList = (List)((Map)list.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define any char filters!\"));\n\n    response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + tokenizer + filters + suffix));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    list = (List)map.get(\"errors\");\n    errorList = (List)((Map)list.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define a tokenizer!\"));\n\n    response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + filters + suffix));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    list = (List)map.get(\"errors\");\n    errorList = (List)((Map)list.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define any filters!\"));\n\n    response = restTestHarness.post(\"/schema\", json(addFieldTypeAnalyzerWithClass + suffix));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    map = getObj(restTestHarness, \"myNewTextFieldWithAnalyzerClass\", \"fieldTypes\");\n    assertNotNull(map);\n    Map analyzer = (Map)map.get(\"analyzer\");\n    assertEquals(\"org.apache.lucene.analysis.core.WhitespaceAnalyzer\", String.valueOf(analyzer.get(\"class\")));\n    assertEquals(\"5.0.0\", String.valueOf(analyzer.get(\"luceneMatchVersion\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAnalyzerClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAnalyzerClass().mjava","sourceNew":"  public void testAnalyzerClass() throws Exception {\n\n    String addFieldTypeAnalyzerWithClass = \"{\\n\" +\n        \"'add-field-type' : {\" +\n        \"    'name' : 'myNewTextFieldWithAnalyzerClass',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {\\n\" +\n        \"        'luceneMatchVersion':'5.0.0',\\n\" +\n        \"        'class':'org.apache.lucene.analysis.core.WhitespaceAnalyzer'\\n\";\n    String charFilters =\n        \"        'charFilters' : [{\\n\" +\n        \"            'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"            'replacement':'$1$1',\\n\" +\n        \"            'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"        }],\\n\";\n    String tokenizer =\n        \"        'tokenizer' : { 'class':'solr.WhitespaceTokenizerFactory' },\\n\";\n    String filters =\n        \"        'filters' : [{ 'class':'solr.ASCIIFoldingFilterFactory' }]\\n\";\n    String suffix =\n        \"    }\\n\"+\n        \"}}\";\n\n    String response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + charFilters + tokenizer + filters + suffix));\n    Map map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Map error = (Map)map.get(\"error\");\n    assertNotNull(\"No errors\", error);\n    List details = (List)error.get(\"details\");\n    assertNotNull(\"No details\", details);\n    assertEquals(\"Wrong number of details\", 1, details.size());\n    List errorList = (List)((Map)details.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define any char filters!\"));\n\n    response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + tokenizer + filters + suffix));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    error = (Map)map.get(\"error\");\n    assertNotNull(\"No errors\", error);\n    details = (List)error.get(\"details\");\n    assertNotNull(\"No details\", details);\n    assertEquals(\"Wrong number of details\", 1, details.size());\n    errorList = (List)((Map)details.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define a tokenizer!\"));\n\n    response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + filters + suffix));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    error = (Map)map.get(\"error\");\n    assertNotNull(\"No errors\", error);\n    details = (List)error.get(\"details\");\n    assertNotNull(\"No details\", details);\n    assertEquals(\"Wrong number of details\", 1, details.size());\n    errorList = (List)((Map)details.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define any filters!\"));\n\n    response = restTestHarness.post(\"/schema\", json(addFieldTypeAnalyzerWithClass + suffix));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"error\"));\n\n    map = getObj(restTestHarness, \"myNewTextFieldWithAnalyzerClass\", \"fieldTypes\");\n    assertNotNull(map);\n    Map analyzer = (Map)map.get(\"analyzer\");\n    assertEquals(\"org.apache.lucene.analysis.core.WhitespaceAnalyzer\", String.valueOf(analyzer.get(\"class\")));\n    assertEquals(\"5.0.0\", String.valueOf(analyzer.get(\"luceneMatchVersion\")));\n  }\n\n","sourceOld":"  public void testAnalyzerClass() throws Exception {\n\n    String addFieldTypeAnalyzerWithClass = \"{\\n\" +\n        \"'add-field-type' : {\" +\n        \"    'name' : 'myNewTextFieldWithAnalyzerClass',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {\\n\" +\n        \"        'luceneMatchVersion':'5.0.0',\\n\" +\n        \"        'class':'org.apache.lucene.analysis.core.WhitespaceAnalyzer'\\n\";\n    String charFilters =\n        \"        'charFilters' : [{\\n\" +\n        \"            'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"            'replacement':'$1$1',\\n\" +\n        \"            'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"        }],\\n\";\n    String tokenizer =\n        \"        'tokenizer' : { 'class':'solr.WhitespaceTokenizerFactory' },\\n\";\n    String filters =\n        \"        'filters' : [{ 'class':'solr.ASCIIFoldingFilterFactory' }]\\n\";\n    String suffix =\n        \"    }\\n\"+\n        \"}}\";\n\n    String response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + charFilters + tokenizer + filters + suffix));\n    Map map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    List list = (List)map.get(\"errors\");\n    List errorList = (List)((Map)list.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define any char filters!\"));\n\n    response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + tokenizer + filters + suffix));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    list = (List)map.get(\"errors\");\n    errorList = (List)((Map)list.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define a tokenizer!\"));\n\n    response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + filters + suffix));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    list = (List)map.get(\"errors\");\n    errorList = (List)((Map)list.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define any filters!\"));\n\n    response = restTestHarness.post(\"/schema\", json(addFieldTypeAnalyzerWithClass + suffix));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    map = getObj(restTestHarness, \"myNewTextFieldWithAnalyzerClass\", \"fieldTypes\");\n    assertNotNull(map);\n    Map analyzer = (Map)map.get(\"analyzer\");\n    assertEquals(\"org.apache.lucene.analysis.core.WhitespaceAnalyzer\", String.valueOf(analyzer.get(\"class\")));\n    assertEquals(\"5.0.0\", String.valueOf(analyzer.get(\"luceneMatchVersion\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3714bcf66a68a1600e9dd11442fc1b33b62ef088","date":1556832005,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAnalyzerClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAnalyzerClass().mjava","sourceNew":"  public void testAnalyzerClass() throws Exception {\n\n    String addFieldTypeAnalyzerWithClass = \"{\\n\" +\n        \"'add-field-type' : {\" +\n        \"    'name' : 'myNewTextFieldWithAnalyzerClass',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {\\n\" +\n        \"        'luceneMatchVersion':'5.0.0',\\n\" +\n        \"        'class':'org.apache.lucene.analysis.core.WhitespaceAnalyzer'\\n\";\n    String charFilters =\n        \"        'charFilters' : [{\\n\" +\n        \"            'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"            'replacement':'$1$1',\\n\" +\n        \"            'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"        }],\\n\";\n    String tokenizer =\n        \"        'tokenizer' : { 'class':'solr.WhitespaceTokenizerFactory' },\\n\";\n    String filters =\n        \"        'filters' : [{ 'class':'solr.ASCIIFoldingFilterFactory' }]\\n\";\n    String suffix =\n        \"    }\\n\"+\n        \"}}\";\n\n    String response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + charFilters + tokenizer + filters + suffix));\n    Map map = (Map) fromJSONString(response);\n    Map error = (Map)map.get(\"error\");\n    assertNotNull(\"No errors\", error);\n    List details = (List)error.get(\"details\");\n    assertNotNull(\"No details\", details);\n    assertEquals(\"Wrong number of details\", 1, details.size());\n    List errorList = (List)((Map)details.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define any char filters!\"));\n\n    response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + tokenizer + filters + suffix));\n    map = (Map) fromJSONString(response);\n    error = (Map)map.get(\"error\");\n    assertNotNull(\"No errors\", error);\n    details = (List)error.get(\"details\");\n    assertNotNull(\"No details\", details);\n    assertEquals(\"Wrong number of details\", 1, details.size());\n    errorList = (List)((Map)details.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define a tokenizer!\"));\n\n    response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + filters + suffix));\n    map = (Map) fromJSONString(response);\n    error = (Map)map.get(\"error\");\n    assertNotNull(\"No errors\", error);\n    details = (List)error.get(\"details\");\n    assertNotNull(\"No details\", details);\n    assertEquals(\"Wrong number of details\", 1, details.size());\n    errorList = (List)((Map)details.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define any filters!\"));\n\n    response = restTestHarness.post(\"/schema\", json(addFieldTypeAnalyzerWithClass + suffix));\n    map = (Map) fromJSONString(response);\n    assertNull(response, map.get(\"error\"));\n\n    map = getObj(restTestHarness, \"myNewTextFieldWithAnalyzerClass\", \"fieldTypes\");\n    assertNotNull(map);\n    Map analyzer = (Map)map.get(\"analyzer\");\n    assertEquals(\"org.apache.lucene.analysis.core.WhitespaceAnalyzer\", String.valueOf(analyzer.get(\"class\")));\n    assertEquals(\"5.0.0\", String.valueOf(analyzer.get(\"luceneMatchVersion\")));\n  }\n\n","sourceOld":"  public void testAnalyzerClass() throws Exception {\n\n    String addFieldTypeAnalyzerWithClass = \"{\\n\" +\n        \"'add-field-type' : {\" +\n        \"    'name' : 'myNewTextFieldWithAnalyzerClass',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {\\n\" +\n        \"        'luceneMatchVersion':'5.0.0',\\n\" +\n        \"        'class':'org.apache.lucene.analysis.core.WhitespaceAnalyzer'\\n\";\n    String charFilters =\n        \"        'charFilters' : [{\\n\" +\n        \"            'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"            'replacement':'$1$1',\\n\" +\n        \"            'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"        }],\\n\";\n    String tokenizer =\n        \"        'tokenizer' : { 'class':'solr.WhitespaceTokenizerFactory' },\\n\";\n    String filters =\n        \"        'filters' : [{ 'class':'solr.ASCIIFoldingFilterFactory' }]\\n\";\n    String suffix =\n        \"    }\\n\"+\n        \"}}\";\n\n    String response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + charFilters + tokenizer + filters + suffix));\n    Map map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Map error = (Map)map.get(\"error\");\n    assertNotNull(\"No errors\", error);\n    List details = (List)error.get(\"details\");\n    assertNotNull(\"No details\", details);\n    assertEquals(\"Wrong number of details\", 1, details.size());\n    List errorList = (List)((Map)details.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define any char filters!\"));\n\n    response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + tokenizer + filters + suffix));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    error = (Map)map.get(\"error\");\n    assertNotNull(\"No errors\", error);\n    details = (List)error.get(\"details\");\n    assertNotNull(\"No details\", details);\n    assertEquals(\"Wrong number of details\", 1, details.size());\n    errorList = (List)((Map)details.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define a tokenizer!\"));\n\n    response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + filters + suffix));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    error = (Map)map.get(\"error\");\n    assertNotNull(\"No errors\", error);\n    details = (List)error.get(\"details\");\n    assertNotNull(\"No details\", details);\n    assertEquals(\"Wrong number of details\", 1, details.size());\n    errorList = (List)((Map)details.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define any filters!\"));\n\n    response = restTestHarness.post(\"/schema\", json(addFieldTypeAnalyzerWithClass + suffix));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"error\"));\n\n    map = getObj(restTestHarness, \"myNewTextFieldWithAnalyzerClass\", \"fieldTypes\");\n    assertNotNull(map);\n    Map analyzer = (Map)map.get(\"analyzer\");\n    assertEquals(\"org.apache.lucene.analysis.core.WhitespaceAnalyzer\", String.valueOf(analyzer.get(\"class\")));\n    assertEquals(\"5.0.0\", String.valueOf(analyzer.get(\"luceneMatchVersion\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"73b91012493e4750b9dc169cf1ae8cdd91493b42","date":1569935879,"type":3,"author":"Thomas Wöckinger","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAnalyzerClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAnalyzerClass().mjava","sourceNew":"  public void testAnalyzerClass() throws Exception {\n\n    String addFieldTypeAnalyzerWithClass = \"{\\n\" +\n        \"'add-field-type' : {\" +\n        \"    'name' : 'myNewTextFieldWithAnalyzerClass',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {\\n\" +\n        \"        'luceneMatchVersion':'5.0.0',\\n\" +\n        \"        'class':'org.apache.lucene.analysis.core.WhitespaceAnalyzer'\\n\";\n    String charFilters =\n        \"        'charFilters' : [{\\n\" +\n        \"            'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"            'replacement':'$1$1',\\n\" +\n        \"            'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"        }],\\n\";\n    String tokenizer =\n        \"        'tokenizer' : { 'class':'solr.WhitespaceTokenizerFactory' },\\n\";\n    String filters =\n        \"        'filters' : [{ 'class':'solr.ASCIIFoldingFilterFactory' }]\\n\";\n    String suffix =\n        \"    }\\n\"+\n        \"}}\";\n\n    String response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + charFilters + tokenizer + filters + suffix));\n    Map map = (Map) fromJSONString(response);\n    Map error = (Map)map.get(\"error\");\n    assertNotNull(\"No errors\", error);\n    List details = (List)error.get(\"details\");\n    assertNotNull(\"No details\", details);\n    assertEquals(\"Wrong number of details\", 1, details.size());\n    List errorList = (List)((Map)details.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define any char filters!\"));\n\n    response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + tokenizer + filters + suffix));\n    map = (Map) fromJSONString(response);\n    error = (Map)map.get(\"error\");\n    assertNotNull(\"No errors\", error);\n    details = (List)error.get(\"details\");\n    assertNotNull(\"No details\", details);\n    assertEquals(\"Wrong number of details\", 1, details.size());\n    errorList = (List)((Map)details.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define a tokenizer!\"));\n\n    response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + filters + suffix));\n    map = (Map) fromJSONString(response);\n    error = (Map)map.get(\"error\");\n    assertNotNull(\"No errors\", error);\n    details = (List)error.get(\"details\");\n    assertNotNull(\"No details\", details);\n    assertEquals(\"Wrong number of details\", 1, details.size());\n    errorList = (List)((Map)details.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define any filters!\"));\n\n    response = restTestHarness.post(\"/schema\", json(addFieldTypeAnalyzerWithClass + suffix));\n    map = (Map) fromJSONString(response);\n    assertNull(response, map.get(\"error\"));\n    \n    restTestHarness.checkAdminResponseStatus(\"/admin/cores?wt=xml&action=RELOAD&core=\" + coreName, \"0\");\n\n    map = getObj(restTestHarness, \"myNewTextFieldWithAnalyzerClass\", \"fieldTypes\");\n    assertNotNull(map);\n    Map analyzer = (Map)map.get(\"analyzer\");\n    assertEquals(\"org.apache.lucene.analysis.core.WhitespaceAnalyzer\", String.valueOf(analyzer.get(\"class\")));\n    assertEquals(\"5.0.0\", String.valueOf(analyzer.get(IndexSchema.LUCENE_MATCH_VERSION_PARAM)));\n  }\n\n","sourceOld":"  public void testAnalyzerClass() throws Exception {\n\n    String addFieldTypeAnalyzerWithClass = \"{\\n\" +\n        \"'add-field-type' : {\" +\n        \"    'name' : 'myNewTextFieldWithAnalyzerClass',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {\\n\" +\n        \"        'luceneMatchVersion':'5.0.0',\\n\" +\n        \"        'class':'org.apache.lucene.analysis.core.WhitespaceAnalyzer'\\n\";\n    String charFilters =\n        \"        'charFilters' : [{\\n\" +\n        \"            'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"            'replacement':'$1$1',\\n\" +\n        \"            'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"        }],\\n\";\n    String tokenizer =\n        \"        'tokenizer' : { 'class':'solr.WhitespaceTokenizerFactory' },\\n\";\n    String filters =\n        \"        'filters' : [{ 'class':'solr.ASCIIFoldingFilterFactory' }]\\n\";\n    String suffix =\n        \"    }\\n\"+\n        \"}}\";\n\n    String response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + charFilters + tokenizer + filters + suffix));\n    Map map = (Map) fromJSONString(response);\n    Map error = (Map)map.get(\"error\");\n    assertNotNull(\"No errors\", error);\n    List details = (List)error.get(\"details\");\n    assertNotNull(\"No details\", details);\n    assertEquals(\"Wrong number of details\", 1, details.size());\n    List errorList = (List)((Map)details.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define any char filters!\"));\n\n    response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + tokenizer + filters + suffix));\n    map = (Map) fromJSONString(response);\n    error = (Map)map.get(\"error\");\n    assertNotNull(\"No errors\", error);\n    details = (List)error.get(\"details\");\n    assertNotNull(\"No details\", details);\n    assertEquals(\"Wrong number of details\", 1, details.size());\n    errorList = (List)((Map)details.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define a tokenizer!\"));\n\n    response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + filters + suffix));\n    map = (Map) fromJSONString(response);\n    error = (Map)map.get(\"error\");\n    assertNotNull(\"No errors\", error);\n    details = (List)error.get(\"details\");\n    assertNotNull(\"No details\", details);\n    assertEquals(\"Wrong number of details\", 1, details.size());\n    errorList = (List)((Map)details.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define any filters!\"));\n\n    response = restTestHarness.post(\"/schema\", json(addFieldTypeAnalyzerWithClass + suffix));\n    map = (Map) fromJSONString(response);\n    assertNull(response, map.get(\"error\"));\n\n    map = getObj(restTestHarness, \"myNewTextFieldWithAnalyzerClass\", \"fieldTypes\");\n    assertNotNull(map);\n    Map analyzer = (Map)map.get(\"analyzer\");\n    assertEquals(\"org.apache.lucene.analysis.core.WhitespaceAnalyzer\", String.valueOf(analyzer.get(\"class\")));\n    assertEquals(\"5.0.0\", String.valueOf(analyzer.get(\"luceneMatchVersion\")));\n  }\n\n","bugFix":["3c3d2444349054ee067813f2bec7610c0933009b"],"bugIntro":["43320f4e37917fa7fd8f8c1e703fc6eaf55d78b3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"43320f4e37917fa7fd8f8c1e703fc6eaf55d78b3","date":1570208701,"type":3,"author":"Thomas Wöckinger","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAnalyzerClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAnalyzerClass().mjava","sourceNew":"  public void testAnalyzerClass() throws Exception {\n\n    String addFieldTypeAnalyzerWithClass = \"{\\n\" +\n        \"'add-field-type' : {\" +\n        \"    'name' : 'myNewTextFieldWithAnalyzerClass',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {\\n\" +\n        \"        'luceneMatchVersion':'5.0.0',\\n\" +\n        \"        'class':'org.apache.lucene.analysis.core.WhitespaceAnalyzer'\\n\";\n    String charFilters =\n        \"        'charFilters' : [{\\n\" +\n        \"            'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"            'replacement':'$1$1',\\n\" +\n        \"            'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"        }],\\n\";\n    String tokenizer =\n        \"        'tokenizer' : { 'class':'solr.WhitespaceTokenizerFactory' },\\n\";\n    String filters =\n        \"        'filters' : [{ 'class':'solr.ASCIIFoldingFilterFactory' }]\\n\";\n    String suffix =\n        \"    }\\n\"+\n        \"}}\";\n\n    String response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + charFilters + tokenizer + filters + suffix));\n    Map map = (Map) fromJSONString(response);\n    Map error = (Map)map.get(\"error\");\n    assertNotNull(\"No errors\", error);\n    List details = (List)error.get(\"details\");\n    assertNotNull(\"No details\", details);\n    assertEquals(\"Wrong number of details\", 1, details.size());\n    List errorList = (List)((Map)details.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define any char filters!\"));\n\n    response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + tokenizer + filters + suffix));\n    map = (Map) fromJSONString(response);\n    error = (Map)map.get(\"error\");\n    assertNotNull(\"No errors\", error);\n    details = (List)error.get(\"details\");\n    assertNotNull(\"No details\", details);\n    assertEquals(\"Wrong number of details\", 1, details.size());\n    errorList = (List)((Map)details.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define a tokenizer!\"));\n\n    response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + filters + suffix));\n    map = (Map) fromJSONString(response);\n    error = (Map)map.get(\"error\");\n    assertNotNull(\"No errors\", error);\n    details = (List)error.get(\"details\");\n    assertNotNull(\"No details\", details);\n    assertEquals(\"Wrong number of details\", 1, details.size());\n    errorList = (List)((Map)details.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define any filters!\"));\n\n    response = restTestHarness.post(\"/schema\", json(addFieldTypeAnalyzerWithClass + suffix));\n    map = (Map) fromJSONString(response);\n    assertNull(response, map.get(\"error\"));\n\n    map = getObj(restTestHarness, \"myNewTextFieldWithAnalyzerClass\", \"fieldTypes\");\n    assertNotNull(map);\n    Map analyzer = (Map)map.get(\"analyzer\");\n    assertEquals(\"org.apache.lucene.analysis.core.WhitespaceAnalyzer\", String.valueOf(analyzer.get(\"class\")));\n    assertEquals(\"5.0.0\", String.valueOf(analyzer.get(IndexSchema.LUCENE_MATCH_VERSION_PARAM)));\n  }\n\n","sourceOld":"  public void testAnalyzerClass() throws Exception {\n\n    String addFieldTypeAnalyzerWithClass = \"{\\n\" +\n        \"'add-field-type' : {\" +\n        \"    'name' : 'myNewTextFieldWithAnalyzerClass',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {\\n\" +\n        \"        'luceneMatchVersion':'5.0.0',\\n\" +\n        \"        'class':'org.apache.lucene.analysis.core.WhitespaceAnalyzer'\\n\";\n    String charFilters =\n        \"        'charFilters' : [{\\n\" +\n        \"            'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"            'replacement':'$1$1',\\n\" +\n        \"            'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"        }],\\n\";\n    String tokenizer =\n        \"        'tokenizer' : { 'class':'solr.WhitespaceTokenizerFactory' },\\n\";\n    String filters =\n        \"        'filters' : [{ 'class':'solr.ASCIIFoldingFilterFactory' }]\\n\";\n    String suffix =\n        \"    }\\n\"+\n        \"}}\";\n\n    String response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + charFilters + tokenizer + filters + suffix));\n    Map map = (Map) fromJSONString(response);\n    Map error = (Map)map.get(\"error\");\n    assertNotNull(\"No errors\", error);\n    List details = (List)error.get(\"details\");\n    assertNotNull(\"No details\", details);\n    assertEquals(\"Wrong number of details\", 1, details.size());\n    List errorList = (List)((Map)details.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define any char filters!\"));\n\n    response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + tokenizer + filters + suffix));\n    map = (Map) fromJSONString(response);\n    error = (Map)map.get(\"error\");\n    assertNotNull(\"No errors\", error);\n    details = (List)error.get(\"details\");\n    assertNotNull(\"No details\", details);\n    assertEquals(\"Wrong number of details\", 1, details.size());\n    errorList = (List)((Map)details.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define a tokenizer!\"));\n\n    response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + filters + suffix));\n    map = (Map) fromJSONString(response);\n    error = (Map)map.get(\"error\");\n    assertNotNull(\"No errors\", error);\n    details = (List)error.get(\"details\");\n    assertNotNull(\"No details\", details);\n    assertEquals(\"Wrong number of details\", 1, details.size());\n    errorList = (List)((Map)details.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define any filters!\"));\n\n    response = restTestHarness.post(\"/schema\", json(addFieldTypeAnalyzerWithClass + suffix));\n    map = (Map) fromJSONString(response);\n    assertNull(response, map.get(\"error\"));\n    \n    restTestHarness.checkAdminResponseStatus(\"/admin/cores?wt=xml&action=RELOAD&core=\" + coreName, \"0\");\n\n    map = getObj(restTestHarness, \"myNewTextFieldWithAnalyzerClass\", \"fieldTypes\");\n    assertNotNull(map);\n    Map analyzer = (Map)map.get(\"analyzer\");\n    assertEquals(\"org.apache.lucene.analysis.core.WhitespaceAnalyzer\", String.valueOf(analyzer.get(\"class\")));\n    assertEquals(\"5.0.0\", String.valueOf(analyzer.get(IndexSchema.LUCENE_MATCH_VERSION_PARAM)));\n  }\n\n","bugFix":["73b91012493e4750b9dc169cf1ae8cdd91493b42"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAnalyzerClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAnalyzerClass().mjava","sourceNew":"  public void testAnalyzerClass() throws Exception {\n\n    String addFieldTypeAnalyzerWithClass = \"{\\n\" +\n        \"'add-field-type' : {\" +\n        \"    'name' : 'myNewTextFieldWithAnalyzerClass',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {\\n\" +\n        \"        'luceneMatchVersion':'5.0.0',\\n\" +\n        \"        'class':'org.apache.lucene.analysis.core.WhitespaceAnalyzer'\\n\";\n    String charFilters =\n        \"        'charFilters' : [{\\n\" +\n        \"            'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"            'replacement':'$1$1',\\n\" +\n        \"            'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"        }],\\n\";\n    String tokenizer =\n        \"        'tokenizer' : { 'class':'solr.WhitespaceTokenizerFactory' },\\n\";\n    String filters =\n        \"        'filters' : [{ 'class':'solr.ASCIIFoldingFilterFactory' }]\\n\";\n    String suffix =\n        \"    }\\n\"+\n        \"}}\";\n\n    String response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + charFilters + tokenizer + filters + suffix));\n    Map map = (Map) fromJSONString(response);\n    Map error = (Map)map.get(\"error\");\n    assertNotNull(\"No errors\", error);\n    List details = (List)error.get(\"details\");\n    assertNotNull(\"No details\", details);\n    assertEquals(\"Wrong number of details\", 1, details.size());\n    List errorList = (List)((Map)details.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define any char filters!\"));\n\n    response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + tokenizer + filters + suffix));\n    map = (Map) fromJSONString(response);\n    error = (Map)map.get(\"error\");\n    assertNotNull(\"No errors\", error);\n    details = (List)error.get(\"details\");\n    assertNotNull(\"No details\", details);\n    assertEquals(\"Wrong number of details\", 1, details.size());\n    errorList = (List)((Map)details.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define a tokenizer!\"));\n\n    response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + filters + suffix));\n    map = (Map) fromJSONString(response);\n    error = (Map)map.get(\"error\");\n    assertNotNull(\"No errors\", error);\n    details = (List)error.get(\"details\");\n    assertNotNull(\"No details\", details);\n    assertEquals(\"Wrong number of details\", 1, details.size());\n    errorList = (List)((Map)details.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define any filters!\"));\n\n    response = restTestHarness.post(\"/schema\", json(addFieldTypeAnalyzerWithClass + suffix));\n    map = (Map) fromJSONString(response);\n    assertNull(response, map.get(\"error\"));\n\n    map = getObj(restTestHarness, \"myNewTextFieldWithAnalyzerClass\", \"fieldTypes\");\n    assertNotNull(map);\n    Map analyzer = (Map)map.get(\"analyzer\");\n    assertEquals(\"org.apache.lucene.analysis.core.WhitespaceAnalyzer\", String.valueOf(analyzer.get(\"class\")));\n    assertEquals(\"5.0.0\", String.valueOf(analyzer.get(IndexSchema.LUCENE_MATCH_VERSION_PARAM)));\n  }\n\n","sourceOld":"  public void testAnalyzerClass() throws Exception {\n\n    String addFieldTypeAnalyzerWithClass = \"{\\n\" +\n        \"'add-field-type' : {\" +\n        \"    'name' : 'myNewTextFieldWithAnalyzerClass',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {\\n\" +\n        \"        'luceneMatchVersion':'5.0.0',\\n\" +\n        \"        'class':'org.apache.lucene.analysis.core.WhitespaceAnalyzer'\\n\";\n    String charFilters =\n        \"        'charFilters' : [{\\n\" +\n        \"            'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"            'replacement':'$1$1',\\n\" +\n        \"            'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"        }],\\n\";\n    String tokenizer =\n        \"        'tokenizer' : { 'class':'solr.WhitespaceTokenizerFactory' },\\n\";\n    String filters =\n        \"        'filters' : [{ 'class':'solr.ASCIIFoldingFilterFactory' }]\\n\";\n    String suffix =\n        \"    }\\n\"+\n        \"}}\";\n\n    String response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + charFilters + tokenizer + filters + suffix));\n    Map map = (Map) fromJSONString(response);\n    Map error = (Map)map.get(\"error\");\n    assertNotNull(\"No errors\", error);\n    List details = (List)error.get(\"details\");\n    assertNotNull(\"No details\", details);\n    assertEquals(\"Wrong number of details\", 1, details.size());\n    List errorList = (List)((Map)details.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define any char filters!\"));\n\n    response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + tokenizer + filters + suffix));\n    map = (Map) fromJSONString(response);\n    error = (Map)map.get(\"error\");\n    assertNotNull(\"No errors\", error);\n    details = (List)error.get(\"details\");\n    assertNotNull(\"No details\", details);\n    assertEquals(\"Wrong number of details\", 1, details.size());\n    errorList = (List)((Map)details.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define a tokenizer!\"));\n\n    response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + filters + suffix));\n    map = (Map) fromJSONString(response);\n    error = (Map)map.get(\"error\");\n    assertNotNull(\"No errors\", error);\n    details = (List)error.get(\"details\");\n    assertNotNull(\"No details\", details);\n    assertEquals(\"Wrong number of details\", 1, details.size());\n    errorList = (List)((Map)details.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define any filters!\"));\n\n    response = restTestHarness.post(\"/schema\", json(addFieldTypeAnalyzerWithClass + suffix));\n    map = (Map) fromJSONString(response);\n    assertNull(response, map.get(\"error\"));\n\n    map = getObj(restTestHarness, \"myNewTextFieldWithAnalyzerClass\", \"fieldTypes\");\n    assertNotNull(map);\n    Map analyzer = (Map)map.get(\"analyzer\");\n    assertEquals(\"org.apache.lucene.analysis.core.WhitespaceAnalyzer\", String.valueOf(analyzer.get(\"class\")));\n    assertEquals(\"5.0.0\", String.valueOf(analyzer.get(\"luceneMatchVersion\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAnalyzerClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAnalyzerClass().mjava","sourceNew":"  public void testAnalyzerClass() throws Exception {\n\n    String addFieldTypeAnalyzerWithClass = \"{\\n\" +\n        \"'add-field-type' : {\" +\n        \"    'name' : 'myNewTextFieldWithAnalyzerClass',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {\\n\" +\n        \"        'luceneMatchVersion':'5.0.0',\\n\" +\n        \"        'class':'org.apache.lucene.analysis.core.WhitespaceAnalyzer'\\n\";\n    String charFilters =\n        \"        'charFilters' : [{\\n\" +\n        \"            'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"            'replacement':'$1$1',\\n\" +\n        \"            'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"        }],\\n\";\n    String tokenizer =\n        \"        'tokenizer' : { 'class':'solr.WhitespaceTokenizerFactory' },\\n\";\n    String filters =\n        \"        'filters' : [{ 'class':'solr.ASCIIFoldingFilterFactory' }]\\n\";\n    String suffix =\n        \"    }\\n\"+\n        \"}}\";\n\n    String response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + charFilters + tokenizer + filters + suffix));\n    @SuppressWarnings({\"rawtypes\"})\n    Map map = (Map) fromJSONString(response);\n    @SuppressWarnings({\"rawtypes\"})\n    Map error = (Map)map.get(\"error\");\n    assertNotNull(\"No errors\", error);\n    @SuppressWarnings({\"rawtypes\"})\n    List details = (List)error.get(\"details\");\n    assertNotNull(\"No details\", details);\n    assertEquals(\"Wrong number of details\", 1, details.size());\n    @SuppressWarnings({\"rawtypes\"})\n    List errorList = (List)((Map)details.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define any char filters!\"));\n\n    response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + tokenizer + filters + suffix));\n    map = (Map) fromJSONString(response);\n    error = (Map)map.get(\"error\");\n    assertNotNull(\"No errors\", error);\n    details = (List)error.get(\"details\");\n    assertNotNull(\"No details\", details);\n    assertEquals(\"Wrong number of details\", 1, details.size());\n    errorList = (List)((Map)details.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define a tokenizer!\"));\n\n    response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + filters + suffix));\n    map = (Map) fromJSONString(response);\n    error = (Map)map.get(\"error\");\n    assertNotNull(\"No errors\", error);\n    details = (List)error.get(\"details\");\n    assertNotNull(\"No details\", details);\n    assertEquals(\"Wrong number of details\", 1, details.size());\n    errorList = (List)((Map)details.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define any filters!\"));\n\n    response = restTestHarness.post(\"/schema\", json(addFieldTypeAnalyzerWithClass + suffix));\n    map = (Map) fromJSONString(response);\n    assertNull(response, map.get(\"error\"));\n\n    map = getObj(restTestHarness, \"myNewTextFieldWithAnalyzerClass\", \"fieldTypes\");\n    assertNotNull(map);\n    @SuppressWarnings({\"rawtypes\"})\n    Map analyzer = (Map)map.get(\"analyzer\");\n    assertEquals(\"org.apache.lucene.analysis.core.WhitespaceAnalyzer\", String.valueOf(analyzer.get(\"class\")));\n    assertEquals(\"5.0.0\", String.valueOf(analyzer.get(IndexSchema.LUCENE_MATCH_VERSION_PARAM)));\n  }\n\n","sourceOld":"  public void testAnalyzerClass() throws Exception {\n\n    String addFieldTypeAnalyzerWithClass = \"{\\n\" +\n        \"'add-field-type' : {\" +\n        \"    'name' : 'myNewTextFieldWithAnalyzerClass',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {\\n\" +\n        \"        'luceneMatchVersion':'5.0.0',\\n\" +\n        \"        'class':'org.apache.lucene.analysis.core.WhitespaceAnalyzer'\\n\";\n    String charFilters =\n        \"        'charFilters' : [{\\n\" +\n        \"            'class':'solr.PatternReplaceCharFilterFactory',\\n\" +\n        \"            'replacement':'$1$1',\\n\" +\n        \"            'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"        }],\\n\";\n    String tokenizer =\n        \"        'tokenizer' : { 'class':'solr.WhitespaceTokenizerFactory' },\\n\";\n    String filters =\n        \"        'filters' : [{ 'class':'solr.ASCIIFoldingFilterFactory' }]\\n\";\n    String suffix =\n        \"    }\\n\"+\n        \"}}\";\n\n    String response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + charFilters + tokenizer + filters + suffix));\n    Map map = (Map) fromJSONString(response);\n    Map error = (Map)map.get(\"error\");\n    assertNotNull(\"No errors\", error);\n    List details = (List)error.get(\"details\");\n    assertNotNull(\"No details\", details);\n    assertEquals(\"Wrong number of details\", 1, details.size());\n    List errorList = (List)((Map)details.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define any char filters!\"));\n\n    response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + tokenizer + filters + suffix));\n    map = (Map) fromJSONString(response);\n    error = (Map)map.get(\"error\");\n    assertNotNull(\"No errors\", error);\n    details = (List)error.get(\"details\");\n    assertNotNull(\"No details\", details);\n    assertEquals(\"Wrong number of details\", 1, details.size());\n    errorList = (List)((Map)details.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define a tokenizer!\"));\n\n    response = restTestHarness.post(\"/schema\",\n        json(addFieldTypeAnalyzerWithClass + ',' + filters + suffix));\n    map = (Map) fromJSONString(response);\n    error = (Map)map.get(\"error\");\n    assertNotNull(\"No errors\", error);\n    details = (List)error.get(\"details\");\n    assertNotNull(\"No details\", details);\n    assertEquals(\"Wrong number of details\", 1, details.size());\n    errorList = (List)((Map)details.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains\n        (\"An analyzer with a class property may not define any filters!\"));\n\n    response = restTestHarness.post(\"/schema\", json(addFieldTypeAnalyzerWithClass + suffix));\n    map = (Map) fromJSONString(response);\n    assertNull(response, map.get(\"error\"));\n\n    map = getObj(restTestHarness, \"myNewTextFieldWithAnalyzerClass\", \"fieldTypes\");\n    assertNotNull(map);\n    Map analyzer = (Map)map.get(\"analyzer\");\n    assertEquals(\"org.apache.lucene.analysis.core.WhitespaceAnalyzer\", String.valueOf(analyzer.get(\"class\")));\n    assertEquals(\"5.0.0\", String.valueOf(analyzer.get(IndexSchema.LUCENE_MATCH_VERSION_PARAM)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a52341299179de5479672f7cf518bf4b173f34b3","03d29de0abdd3a2150c0dabfe1bf98024bbfa367"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["3c3d2444349054ee067813f2bec7610c0933009b","ac1e7fa558287a811ea07634d815ee7b1c541284"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["b94236357aaa22b76c10629851fe4e376e0cea82"],"e98520789adb1d5ad05afb4956eca0944a929688":["43320f4e37917fa7fd8f8c1e703fc6eaf55d78b3"],"03d29de0abdd3a2150c0dabfe1bf98024bbfa367":["a52341299179de5479672f7cf518bf4b173f34b3"],"a52341299179de5479672f7cf518bf4b173f34b3":["3c3d2444349054ee067813f2bec7610c0933009b","ac1e7fa558287a811ea07634d815ee7b1c541284"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3c3d2444349054ee067813f2bec7610c0933009b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"73b91012493e4750b9dc169cf1ae8cdd91493b42":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"43320f4e37917fa7fd8f8c1e703fc6eaf55d78b3":["73b91012493e4750b9dc169cf1ae8cdd91493b42"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["3c3d2444349054ee067813f2bec7610c0933009b"],"b0b597c65628ca9e73913a07e81691f8229bae35":["3714bcf66a68a1600e9dd11442fc1b33b62ef088","43320f4e37917fa7fd8f8c1e703fc6eaf55d78b3"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["73b91012493e4750b9dc169cf1ae8cdd91493b42","b0b597c65628ca9e73913a07e81691f8229bae35"],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"03d29de0abdd3a2150c0dabfe1bf98024bbfa367":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a52341299179de5479672f7cf518bf4b173f34b3":["b94236357aaa22b76c10629851fe4e376e0cea82","03d29de0abdd3a2150c0dabfe1bf98024bbfa367"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3c3d2444349054ee067813f2bec7610c0933009b"],"3c3d2444349054ee067813f2bec7610c0933009b":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3","ac1e7fa558287a811ea07634d815ee7b1c541284"],"73b91012493e4750b9dc169cf1ae8cdd91493b42":["43320f4e37917fa7fd8f8c1e703fc6eaf55d78b3"],"43320f4e37917fa7fd8f8c1e703fc6eaf55d78b3":["e98520789adb1d5ad05afb4956eca0944a929688","b0b597c65628ca9e73913a07e81691f8229bae35"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}