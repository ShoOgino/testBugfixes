{"path":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#checkOverrideMethods(Class[#]).mjava","commits":[{"id":"5c35c9bf5db9416d4ae2f56567931bfcef588b46","date":1330259234,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#checkOverrideMethods(Class[#]).mjava","pathOld":"/dev/null","sourceNew":"  private void checkOverrideMethods(Class<?> clazz) throws Exception {\n    boolean fail = false;\n    for (Method m : clazz.getMethods()) {\n      int mods = m.getModifiers();\n      if (Modifier.isStatic(mods) || Modifier.isFinal(mods) || m.isSynthetic()) {\n        continue;\n      }\n      Class<?> declaringClass = m.getDeclaringClass();\n      if (declaringClass != clazz && declaringClass != Object.class) {\n        System.err.println(\"method is not overridden by \"+clazz.getName()+\": \" + m.toGenericString());\n        fail = true;\n      }\n    }\n    assertFalse(clazz.getName()+\"does not override some methods; see log above\", fail);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fe43a17fb193c95257604ee5486e9f6e2a392c28","3a8e3b821ad7b92563c3a55ff02e943ecce84c0a","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a8e3b821ad7b92563c3a55ff02e943ecce84c0a","date":1330260205,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#checkOverrideMethods(Class[#]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#checkOverrideMethods(Class[#]).mjava","sourceNew":"  private void checkOverrideMethods(Class<?> clazz) throws Exception {\n    boolean fail = false;\n    for (Method m : clazz.getMethods()) {\n      int mods = m.getModifiers();\n      if (Modifier.isStatic(mods) || Modifier.isFinal(mods) || m.isSynthetic()) {\n        continue;\n      }\n      Class<?> declaringClass = m.getDeclaringClass();\n      if (declaringClass != clazz && declaringClass != Object.class) {\n        System.err.println(\"method is not overridden by \"+clazz.getName()+\": \" + m.toGenericString());\n        fail = true;\n      }\n    }\n    assertFalse(clazz.getName()+\" does not override some methods; see log above\", fail);\n  }\n\n","sourceOld":"  private void checkOverrideMethods(Class<?> clazz) throws Exception {\n    boolean fail = false;\n    for (Method m : clazz.getMethods()) {\n      int mods = m.getModifiers();\n      if (Modifier.isStatic(mods) || Modifier.isFinal(mods) || m.isSynthetic()) {\n        continue;\n      }\n      Class<?> declaringClass = m.getDeclaringClass();\n      if (declaringClass != clazz && declaringClass != Object.class) {\n        System.err.println(\"method is not overridden by \"+clazz.getName()+\": \" + m.toGenericString());\n        fail = true;\n      }\n    }\n    assertFalse(clazz.getName()+\"does not override some methods; see log above\", fail);\n  }\n\n","bugFix":["5c35c9bf5db9416d4ae2f56567931bfcef588b46"],"bugIntro":["fe43a17fb193c95257604ee5486e9f6e2a392c28"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#checkOverrideMethods(Class[#]).mjava","pathOld":"/dev/null","sourceNew":"  private void checkOverrideMethods(Class<?> clazz) throws Exception {\n    boolean fail = false;\n    for (Method m : clazz.getMethods()) {\n      int mods = m.getModifiers();\n      if (Modifier.isStatic(mods) || Modifier.isFinal(mods) || m.isSynthetic()) {\n        continue;\n      }\n      Class<?> declaringClass = m.getDeclaringClass();\n      if (declaringClass != clazz && declaringClass != Object.class) {\n        System.err.println(\"method is not overridden by \"+clazz.getName()+\": \" + m.toGenericString());\n        fail = true;\n      }\n    }\n    assertFalse(clazz.getName()+\" does not override some methods; see log above\", fail);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#checkOverrideMethods(Class[#]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#checkOverrideMethods(Class[#]).mjava","sourceNew":"  private void checkOverrideMethods(Class<?> clazz) {\n    boolean fail = false;\n    for (Method m : clazz.getMethods()) {\n      int mods = m.getModifiers();\n      if (Modifier.isStatic(mods) || Modifier.isFinal(mods) || m.isSynthetic()) {\n        continue;\n      }\n      Class<?> declaringClass = m.getDeclaringClass();\n      if (declaringClass != clazz && declaringClass != Object.class) {\n        System.err.println(\"method is not overridden by \"+clazz.getName()+\": \" + m.toGenericString());\n        fail = true;\n      }\n    }\n    assertFalse(clazz.getName()+\" does not override some methods; see log above\", fail);\n  }\n\n","sourceOld":"  private void checkOverrideMethods(Class<?> clazz) throws Exception {\n    boolean fail = false;\n    for (Method m : clazz.getMethods()) {\n      int mods = m.getModifiers();\n      if (Modifier.isStatic(mods) || Modifier.isFinal(mods) || m.isSynthetic()) {\n        continue;\n      }\n      Class<?> declaringClass = m.getDeclaringClass();\n      if (declaringClass != clazz && declaringClass != Object.class) {\n        System.err.println(\"method is not overridden by \"+clazz.getName()+\": \" + m.toGenericString());\n        fail = true;\n      }\n    }\n    assertFalse(clazz.getName()+\" does not override some methods; see log above\", fail);\n  }\n\n","bugFix":["5c35c9bf5db9416d4ae2f56567931bfcef588b46"],"bugIntro":["fe43a17fb193c95257604ee5486e9f6e2a392c28"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#checkOverrideMethods(Class[#]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#checkOverrideMethods(Class[#]).mjava","sourceNew":"  private void checkOverrideMethods(Class<?> clazz) {\n    boolean fail = false;\n    for (Method m : clazz.getMethods()) {\n      int mods = m.getModifiers();\n      if (Modifier.isStatic(mods) || Modifier.isFinal(mods) || m.isSynthetic()) {\n        continue;\n      }\n      Class<?> declaringClass = m.getDeclaringClass();\n      if (declaringClass != clazz && declaringClass != Object.class) {\n        System.err.println(\"method is not overridden by \"+clazz.getName()+\": \" + m.toGenericString());\n        fail = true;\n      }\n    }\n    assertFalse(clazz.getName()+\" does not override some methods; see log above\", fail);\n  }\n\n","sourceOld":"  private void checkOverrideMethods(Class<?> clazz) throws Exception {\n    boolean fail = false;\n    for (Method m : clazz.getMethods()) {\n      int mods = m.getModifiers();\n      if (Modifier.isStatic(mods) || Modifier.isFinal(mods) || m.isSynthetic()) {\n        continue;\n      }\n      Class<?> declaringClass = m.getDeclaringClass();\n      if (declaringClass != clazz && declaringClass != Object.class) {\n        System.err.println(\"method is not overridden by \"+clazz.getName()+\": \" + m.toGenericString());\n        fail = true;\n      }\n    }\n    assertFalse(clazz.getName()+\" does not override some methods; see log above\", fail);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe43a17fb193c95257604ee5486e9f6e2a392c28","date":1365104925,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#checkOverrideMethods(Class[#]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#checkOverrideMethods(Class[#]).mjava","sourceNew":"  private static void checkOverrideMethods(Class<?> clazz) throws NoSuchMethodException, SecurityException {\n    final Class<?> superClazz = clazz.getSuperclass();\n    for (Method m : superClazz.getMethods()) {\n      final int mods = m.getModifiers();\n      if (Modifier.isStatic(mods) || Modifier.isAbstract(mods) || Modifier.isFinal(mods) || m.isSynthetic()\n          || m.getName().equals(\"attributes\")) {\n        continue;\n      }\n      // The point of these checks is to ensure that methods that have a default\n      // impl through other methods are not overridden. This makes the number of\n      // methods to override to have a working impl minimal and prevents from some\n      // traps: for example, think about having getCoreCacheKey delegate to the\n      // filtered impl by default\n      final Method subM = clazz.getMethod(m.getName(), m.getParameterTypes());\n      if (subM.getDeclaringClass() == clazz\n          && m.getDeclaringClass() != Object.class\n          && m.getDeclaringClass() != subM.getDeclaringClass()) {\n        fail(clazz + \" overrides \" + m + \" although it has a default impl\");\n      }\n    }\n  }\n\n","sourceOld":"  private void checkOverrideMethods(Class<?> clazz) {\n    boolean fail = false;\n    for (Method m : clazz.getMethods()) {\n      int mods = m.getModifiers();\n      if (Modifier.isStatic(mods) || Modifier.isFinal(mods) || m.isSynthetic()) {\n        continue;\n      }\n      Class<?> declaringClass = m.getDeclaringClass();\n      if (declaringClass != clazz && declaringClass != Object.class) {\n        System.err.println(\"method is not overridden by \"+clazz.getName()+\": \" + m.toGenericString());\n        fail = true;\n      }\n    }\n    assertFalse(clazz.getName()+\" does not override some methods; see log above\", fail);\n  }\n\n","bugFix":["3a8e3b821ad7b92563c3a55ff02e943ecce84c0a","5c35c9bf5db9416d4ae2f56567931bfcef588b46","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9644a32526f2e2ae87543b00e8be543aa25f29c","date":1411548458,"type":5,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterLeafReader#checkOverrideMethods(Class[#]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#checkOverrideMethods(Class[#]).mjava","sourceNew":"  private static void checkOverrideMethods(Class<?> clazz) throws NoSuchMethodException, SecurityException {\n    final Class<?> superClazz = clazz.getSuperclass();\n    for (Method m : superClazz.getMethods()) {\n      final int mods = m.getModifiers();\n      if (Modifier.isStatic(mods) || Modifier.isAbstract(mods) || Modifier.isFinal(mods) || m.isSynthetic()\n          || m.getName().equals(\"attributes\")) {\n        continue;\n      }\n      // The point of these checks is to ensure that methods that have a default\n      // impl through other methods are not overridden. This makes the number of\n      // methods to override to have a working impl minimal and prevents from some\n      // traps: for example, think about having getCoreCacheKey delegate to the\n      // filtered impl by default\n      final Method subM = clazz.getMethod(m.getName(), m.getParameterTypes());\n      if (subM.getDeclaringClass() == clazz\n          && m.getDeclaringClass() != Object.class\n          && m.getDeclaringClass() != subM.getDeclaringClass()) {\n        fail(clazz + \" overrides \" + m + \" although it has a default impl\");\n      }\n    }\n  }\n\n","sourceOld":"  private static void checkOverrideMethods(Class<?> clazz) throws NoSuchMethodException, SecurityException {\n    final Class<?> superClazz = clazz.getSuperclass();\n    for (Method m : superClazz.getMethods()) {\n      final int mods = m.getModifiers();\n      if (Modifier.isStatic(mods) || Modifier.isAbstract(mods) || Modifier.isFinal(mods) || m.isSynthetic()\n          || m.getName().equals(\"attributes\")) {\n        continue;\n      }\n      // The point of these checks is to ensure that methods that have a default\n      // impl through other methods are not overridden. This makes the number of\n      // methods to override to have a working impl minimal and prevents from some\n      // traps: for example, think about having getCoreCacheKey delegate to the\n      // filtered impl by default\n      final Method subM = clazz.getMethod(m.getName(), m.getParameterTypes());\n      if (subM.getDeclaringClass() == clazz\n          && m.getDeclaringClass() != Object.class\n          && m.getDeclaringClass() != subM.getDeclaringClass()) {\n        fail(clazz + \" overrides \" + m + \" although it has a default impl\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe43a17fb193c95257604ee5486e9f6e2a392c28":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"3a8e3b821ad7b92563c3a55ff02e943ecce84c0a":["5c35c9bf5db9416d4ae2f56567931bfcef588b46"],"c9644a32526f2e2ae87543b00e8be543aa25f29c":["fe43a17fb193c95257604ee5486e9f6e2a392c28"],"5c35c9bf5db9416d4ae2f56567931bfcef588b46":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3a8e3b821ad7b92563c3a55ff02e943ecce84c0a"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a8e3b821ad7b92563c3a55ff02e943ecce84c0a","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a8e3b821ad7b92563c3a55ff02e943ecce84c0a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9644a32526f2e2ae87543b00e8be543aa25f29c"]},"commit2Childs":{"fe43a17fb193c95257604ee5486e9f6e2a392c28":["c9644a32526f2e2ae87543b00e8be543aa25f29c"],"3a8e3b821ad7b92563c3a55ff02e943ecce84c0a":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"5c35c9bf5db9416d4ae2f56567931bfcef588b46":["3a8e3b821ad7b92563c3a55ff02e943ecce84c0a"],"c9644a32526f2e2ae87543b00e8be543aa25f29c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5c35c9bf5db9416d4ae2f56567931bfcef588b46","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe43a17fb193c95257604ee5486e9f6e2a392c28","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}