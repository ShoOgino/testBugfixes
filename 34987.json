{"path":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher).mjava","commits":[{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/SimpleDrillSidewaysQuery#createWeight(IndexSearcher).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher);\n\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return baseQuery;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        // TODO: would be nice if AssertingIndexSearcher\n        // confirmed this for us\n        return false;\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                           boolean topScorer, Bits acceptDocs) throws IOException {\n\n        DrillSidewaysScorer.DocsEnumsAndFreq[] dims = new DrillSidewaysScorer.DocsEnumsAndFreq[drillDownTerms.length];\n        TermsEnum termsEnum = null;\n        String lastField = null;\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new DrillSidewaysScorer.DocsEnumsAndFreq();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          String field = drillDownTerms[dim][0].field();\n          dims[dim].dim = drillDownTerms[dim][0].text();\n          if (lastField == null || !lastField.equals(field)) {\n            AtomicReader reader = context.reader();\n            Terms terms = reader.terms(field);\n            if (terms != null) {\n              termsEnum = terms.iterator(null);\n            } else {\n              termsEnum = null;\n            }\n            lastField = field;\n          }\n          dims[dim].docsEnums = new DocsEnum[drillDownTerms[dim].length];\n          if (termsEnum == null) {\n            nullCount++;\n            continue;\n          }\n          for(int i=0;i<drillDownTerms[dim].length;i++) {\n            if (termsEnum.seekExact(drillDownTerms[dim][i].bytes())) {\n              DocsEnum docsEnum = termsEnum.docs(null, null, 0);\n              if (docsEnum != null) {\n                dims[dim].docsEnums[i] = docsEnum;\n                dims[dim].maxCost = Math.max(dims[dim].maxCost, docsEnum.cost());\n              }\n            }\n          }\n        }\n\n        if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, scoreDocsInOrder, false, acceptDocs);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(this, context,\n                                             baseScorer,\n                                             drillDownCollector, dims);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher);\n\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return baseQuery;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        // TODO: would be nice if AssertingIndexSearcher\n        // confirmed this for us\n        return false;\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                           boolean topScorer, Bits acceptDocs) throws IOException {\n\n        SimpleDrillSidewaysScorer.DocsEnumsAndFreq[] dims = new SimpleDrillSidewaysScorer.DocsEnumsAndFreq[drillDownTerms.length];\n        TermsEnum termsEnum = null;\n        String lastField = null;\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new SimpleDrillSidewaysScorer.DocsEnumsAndFreq();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          String field = drillDownTerms[dim][0].field();\n          dims[dim].dim = drillDownTerms[dim][0].text();\n          if (lastField == null || !lastField.equals(field)) {\n            AtomicReader reader = context.reader();\n            Terms terms = reader.terms(field);\n            if (terms != null) {\n              termsEnum = terms.iterator(null);\n            } else {\n              termsEnum = null;\n            }\n            lastField = field;\n          }\n          dims[dim].docsEnums = new DocsEnum[drillDownTerms[dim].length];\n          if (termsEnum == null) {\n            nullCount++;\n            continue;\n          }\n          for(int i=0;i<drillDownTerms[dim].length;i++) {\n            if (termsEnum.seekExact(drillDownTerms[dim][i].bytes())) {\n              DocsEnum docsEnum = termsEnum.docs(null, null, 0);\n              if (docsEnum != null) {\n                dims[dim].docsEnums[i] = docsEnum;\n                dims[dim].maxCost = Math.max(dims[dim].maxCost, docsEnum.cost());\n              }\n            }\n          }\n        }\n\n        if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, scoreDocsInOrder, false, acceptDocs);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new SimpleDrillSidewaysScorer(this, context,\n                                             baseScorer,\n                                             drillDownCollector, dims);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher);\n\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return baseQuery;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        // TODO: would be nice if AssertingIndexSearcher\n        // confirmed this for us\n        return false;\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                           boolean topScorer, Bits acceptDocs) throws IOException {\n\n        DrillSidewaysScorer.DocsEnumsAndFreq[] dims = new DrillSidewaysScorer.DocsEnumsAndFreq[drillDownTerms.length];\n        TermsEnum termsEnum = null;\n        String lastField = null;\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new DrillSidewaysScorer.DocsEnumsAndFreq();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          String field = drillDownTerms[dim][0].field();\n          dims[dim].dim = drillDownTerms[dim][0].text();\n          if (lastField == null || !lastField.equals(field)) {\n            AtomicReader reader = context.reader();\n            Terms terms = reader.terms(field);\n            if (terms != null) {\n              termsEnum = terms.iterator(null);\n            } else {\n              termsEnum = null;\n            }\n            lastField = field;\n          }\n          dims[dim].docsEnums = new DocsEnum[drillDownTerms[dim].length];\n          if (termsEnum == null) {\n            nullCount++;\n            continue;\n          }\n          for(int i=0;i<drillDownTerms[dim].length;i++) {\n            if (termsEnum.seekExact(drillDownTerms[dim][i].bytes())) {\n              DocsEnum docsEnum = termsEnum.docs(null, null, 0);\n              if (docsEnum != null) {\n                dims[dim].docsEnums[i] = docsEnum;\n                dims[dim].maxCost = Math.max(dims[dim].maxCost, docsEnum.cost());\n              }\n            }\n          }\n        }\n\n        if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, scoreDocsInOrder, false, acceptDocs);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(this, context,\n                                             baseScorer,\n                                             drillDownCollector, dims);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"40640359164f629dd440a47df2e145d084ce9645","date":1391711808,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher);\n    final Object[] drillDowns = new Object[drillDownQueries.length];\n    for(int dim=0;dim<drillDownQueries.length;dim++) {\n      Query query = drillDownQueries[dim];\n      Filter filter = DrillDownQuery.getFilter(query);\n      if (filter != null) {\n        drillDowns[dim] = filter;\n      } else {\n        // TODO: would be nice if we could say \"we will do no\n        // scoring\" here....\n        drillDowns[dim] = searcher.rewrite(query).createWeight(searcher);\n      }\n    }\n\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return baseQuery;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        // TODO: would be nice if AssertingIndexSearcher\n        // confirmed this for us\n        return false;\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                           boolean topScorer, Bits acceptDocs) throws IOException {\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, scoreDocsInOrder, false, acceptDocs);\n\n        DrillSidewaysScorer.DocsAndCost[] dims = new DrillSidewaysScorer.DocsAndCost[drillDowns.length];\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new DrillSidewaysScorer.DocsAndCost();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          if (drillDowns[dim] instanceof Filter) {\n            // Pass null for acceptDocs because we already\n            // passed it to baseScorer and baseScorer is\n            // MUST'd here\n            DocIdSet dis = ((Filter) drillDowns[dim]).getDocIdSet(context, null);\n\n            if (dis == null) {\n              continue;\n            }\n\n            Bits bits = dis.bits();\n\n            if (bits != null) {\n              // TODO: this logic is too naive: the\n              // existence of bits() in DIS today means\n              // either \"I'm a cheap FixedBitSet so apply me down\n              // low as you decode the postings\" or \"I'm so\n              // horribly expensive so apply me after all\n              // other Query/Filter clauses pass\"\n\n              // Filter supports random access; use that to\n              // prevent .advance() on costly filters:\n              dims[dim].bits = bits;\n\n              // TODO: Filter needs to express its expected\n              // cost somehow, before pulling the iterator;\n              // we should use that here to set the order to\n              // check the filters:\n\n            } else {\n              DocIdSetIterator disi = dis.iterator();\n              if (disi == null) {\n                nullCount++;\n                continue;\n              }\n              dims[dim].disi = disi;\n            }\n          } else {\n            DocIdSetIterator disi = ((Weight) drillDowns[dim]).scorer(context, true, false, null);\n            if (disi == null) {\n              nullCount++;\n              continue;\n            }\n            dims[dim].disi = disi;\n          }\n        }\n\n        // If more than one dim has no matches, then there\n        // are no hits nor drill-sideways counts.  Or, if we\n        // have only one dim and that dim has no matches,\n        // same thing.\n        //if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(this, context,\n                                       baseScorer,\n                                       drillDownCollector, dims,\n                                       scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher);\n\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return baseQuery;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        // TODO: would be nice if AssertingIndexSearcher\n        // confirmed this for us\n        return false;\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                           boolean topScorer, Bits acceptDocs) throws IOException {\n\n        DrillSidewaysScorer.DocsEnumsAndFreq[] dims = new DrillSidewaysScorer.DocsEnumsAndFreq[drillDownTerms.length];\n        TermsEnum termsEnum = null;\n        String lastField = null;\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new DrillSidewaysScorer.DocsEnumsAndFreq();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          String field = drillDownTerms[dim][0].field();\n          dims[dim].dim = drillDownTerms[dim][0].text();\n          if (lastField == null || !lastField.equals(field)) {\n            AtomicReader reader = context.reader();\n            Terms terms = reader.terms(field);\n            if (terms != null) {\n              termsEnum = terms.iterator(null);\n            } else {\n              termsEnum = null;\n            }\n            lastField = field;\n          }\n          dims[dim].docsEnums = new DocsEnum[drillDownTerms[dim].length];\n          if (termsEnum == null) {\n            nullCount++;\n            continue;\n          }\n          for(int i=0;i<drillDownTerms[dim].length;i++) {\n            if (termsEnum.seekExact(drillDownTerms[dim][i].bytes())) {\n              DocsEnum docsEnum = termsEnum.docs(null, null, 0);\n              if (docsEnum != null) {\n                dims[dim].docsEnums[i] = docsEnum;\n                dims[dim].maxCost = Math.max(dims[dim].maxCost, docsEnum.cost());\n              }\n            }\n          }\n        }\n\n        if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, scoreDocsInOrder, false, acceptDocs);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(this, context,\n                                             baseScorer,\n                                             drillDownCollector, dims);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e18c86f811939bfa8cd24046c96ed026f2e9b34","date":1393893071,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher);\n    final Object[] drillDowns = new Object[drillDownQueries.length];\n    for(int dim=0;dim<drillDownQueries.length;dim++) {\n      Query query = drillDownQueries[dim];\n      Filter filter = DrillDownQuery.getFilter(query);\n      if (filter != null) {\n        drillDowns[dim] = filter;\n      } else {\n        // TODO: would be nice if we could say \"we will do no\n        // scoring\" here....\n        drillDowns[dim] = searcher.rewrite(query).createWeight(searcher);\n      }\n    }\n\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return baseQuery;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        // TODO: would be nice if AssertingIndexSearcher\n        // confirmed this for us\n        return false;\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        // We can only run as a top scorer:\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public TopScorer topScorer(AtomicReaderContext context, boolean scoreDocsInOrder, Bits acceptDocs) throws IOException {\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, acceptDocs);\n\n        DrillSidewaysScorer.DocsAndCost[] dims = new DrillSidewaysScorer.DocsAndCost[drillDowns.length];\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new DrillSidewaysScorer.DocsAndCost();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          if (drillDowns[dim] instanceof Filter) {\n            // Pass null for acceptDocs because we already\n            // passed it to baseScorer and baseScorer is\n            // MUST'd here\n            DocIdSet dis = ((Filter) drillDowns[dim]).getDocIdSet(context, null);\n\n            if (dis == null) {\n              continue;\n            }\n\n            Bits bits = dis.bits();\n\n            if (bits != null) {\n              // TODO: this logic is too naive: the\n              // existence of bits() in DIS today means\n              // either \"I'm a cheap FixedBitSet so apply me down\n              // low as you decode the postings\" or \"I'm so\n              // horribly expensive so apply me after all\n              // other Query/Filter clauses pass\"\n\n              // Filter supports random access; use that to\n              // prevent .advance() on costly filters:\n              dims[dim].bits = bits;\n\n              // TODO: Filter needs to express its expected\n              // cost somehow, before pulling the iterator;\n              // we should use that here to set the order to\n              // check the filters:\n\n            } else {\n              DocIdSetIterator disi = dis.iterator();\n              if (disi == null) {\n                nullCount++;\n                continue;\n              }\n              dims[dim].disi = disi;\n            }\n          } else {\n            DocIdSetIterator disi = ((Weight) drillDowns[dim]).scorer(context, null);\n            if (disi == null) {\n              nullCount++;\n              continue;\n            }\n            dims[dim].disi = disi;\n          }\n        }\n\n        // If more than one dim has no matches, then there\n        // are no hits nor drill-sideways counts.  Or, if we\n        // have only one dim and that dim has no matches,\n        // same thing.\n        //if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(this, context,\n                                       baseScorer,\n                                       drillDownCollector, dims,\n                                       scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher);\n    final Object[] drillDowns = new Object[drillDownQueries.length];\n    for(int dim=0;dim<drillDownQueries.length;dim++) {\n      Query query = drillDownQueries[dim];\n      Filter filter = DrillDownQuery.getFilter(query);\n      if (filter != null) {\n        drillDowns[dim] = filter;\n      } else {\n        // TODO: would be nice if we could say \"we will do no\n        // scoring\" here....\n        drillDowns[dim] = searcher.rewrite(query).createWeight(searcher);\n      }\n    }\n\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return baseQuery;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        // TODO: would be nice if AssertingIndexSearcher\n        // confirmed this for us\n        return false;\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                           boolean topScorer, Bits acceptDocs) throws IOException {\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, scoreDocsInOrder, false, acceptDocs);\n\n        DrillSidewaysScorer.DocsAndCost[] dims = new DrillSidewaysScorer.DocsAndCost[drillDowns.length];\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new DrillSidewaysScorer.DocsAndCost();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          if (drillDowns[dim] instanceof Filter) {\n            // Pass null for acceptDocs because we already\n            // passed it to baseScorer and baseScorer is\n            // MUST'd here\n            DocIdSet dis = ((Filter) drillDowns[dim]).getDocIdSet(context, null);\n\n            if (dis == null) {\n              continue;\n            }\n\n            Bits bits = dis.bits();\n\n            if (bits != null) {\n              // TODO: this logic is too naive: the\n              // existence of bits() in DIS today means\n              // either \"I'm a cheap FixedBitSet so apply me down\n              // low as you decode the postings\" or \"I'm so\n              // horribly expensive so apply me after all\n              // other Query/Filter clauses pass\"\n\n              // Filter supports random access; use that to\n              // prevent .advance() on costly filters:\n              dims[dim].bits = bits;\n\n              // TODO: Filter needs to express its expected\n              // cost somehow, before pulling the iterator;\n              // we should use that here to set the order to\n              // check the filters:\n\n            } else {\n              DocIdSetIterator disi = dis.iterator();\n              if (disi == null) {\n                nullCount++;\n                continue;\n              }\n              dims[dim].disi = disi;\n            }\n          } else {\n            DocIdSetIterator disi = ((Weight) drillDowns[dim]).scorer(context, true, false, null);\n            if (disi == null) {\n              nullCount++;\n              continue;\n            }\n            dims[dim].disi = disi;\n          }\n        }\n\n        // If more than one dim has no matches, then there\n        // are no hits nor drill-sideways counts.  Or, if we\n        // have only one dim and that dim has no matches,\n        // same thing.\n        //if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(this, context,\n                                       baseScorer,\n                                       drillDownCollector, dims,\n                                       scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a5794e5c995c57444b154b01a9f3c837cd530a77","date":1394190201,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher);\n    final Object[] drillDowns = new Object[drillDownQueries.length];\n    for(int dim=0;dim<drillDownQueries.length;dim++) {\n      Query query = drillDownQueries[dim];\n      Filter filter = DrillDownQuery.getFilter(query);\n      if (filter != null) {\n        drillDowns[dim] = filter;\n      } else {\n        // TODO: would be nice if we could say \"we will do no\n        // scoring\" here....\n        drillDowns[dim] = searcher.rewrite(query).createWeight(searcher);\n      }\n    }\n\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return baseQuery;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        // TODO: would be nice if AssertingIndexSearcher\n        // confirmed this for us\n        return false;\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        // We can only run as a top scorer:\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public BulkScorer bulkScorer(AtomicReaderContext context, boolean scoreDocsInOrder, Bits acceptDocs) throws IOException {\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, acceptDocs);\n\n        DrillSidewaysScorer.DocsAndCost[] dims = new DrillSidewaysScorer.DocsAndCost[drillDowns.length];\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new DrillSidewaysScorer.DocsAndCost();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          if (drillDowns[dim] instanceof Filter) {\n            // Pass null for acceptDocs because we already\n            // passed it to baseScorer and baseScorer is\n            // MUST'd here\n            DocIdSet dis = ((Filter) drillDowns[dim]).getDocIdSet(context, null);\n\n            if (dis == null) {\n              continue;\n            }\n\n            Bits bits = dis.bits();\n\n            if (bits != null) {\n              // TODO: this logic is too naive: the\n              // existence of bits() in DIS today means\n              // either \"I'm a cheap FixedBitSet so apply me down\n              // low as you decode the postings\" or \"I'm so\n              // horribly expensive so apply me after all\n              // other Query/Filter clauses pass\"\n\n              // Filter supports random access; use that to\n              // prevent .advance() on costly filters:\n              dims[dim].bits = bits;\n\n              // TODO: Filter needs to express its expected\n              // cost somehow, before pulling the iterator;\n              // we should use that here to set the order to\n              // check the filters:\n\n            } else {\n              DocIdSetIterator disi = dis.iterator();\n              if (disi == null) {\n                nullCount++;\n                continue;\n              }\n              dims[dim].disi = disi;\n            }\n          } else {\n            DocIdSetIterator disi = ((Weight) drillDowns[dim]).scorer(context, null);\n            if (disi == null) {\n              nullCount++;\n              continue;\n            }\n            dims[dim].disi = disi;\n          }\n        }\n\n        // If more than one dim has no matches, then there\n        // are no hits nor drill-sideways counts.  Or, if we\n        // have only one dim and that dim has no matches,\n        // same thing.\n        //if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(this, context,\n                                       baseScorer,\n                                       drillDownCollector, dims,\n                                       scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher);\n    final Object[] drillDowns = new Object[drillDownQueries.length];\n    for(int dim=0;dim<drillDownQueries.length;dim++) {\n      Query query = drillDownQueries[dim];\n      Filter filter = DrillDownQuery.getFilter(query);\n      if (filter != null) {\n        drillDowns[dim] = filter;\n      } else {\n        // TODO: would be nice if we could say \"we will do no\n        // scoring\" here....\n        drillDowns[dim] = searcher.rewrite(query).createWeight(searcher);\n      }\n    }\n\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return baseQuery;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        // TODO: would be nice if AssertingIndexSearcher\n        // confirmed this for us\n        return false;\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        // We can only run as a top scorer:\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public TopScorer topScorer(AtomicReaderContext context, boolean scoreDocsInOrder, Bits acceptDocs) throws IOException {\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, acceptDocs);\n\n        DrillSidewaysScorer.DocsAndCost[] dims = new DrillSidewaysScorer.DocsAndCost[drillDowns.length];\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new DrillSidewaysScorer.DocsAndCost();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          if (drillDowns[dim] instanceof Filter) {\n            // Pass null for acceptDocs because we already\n            // passed it to baseScorer and baseScorer is\n            // MUST'd here\n            DocIdSet dis = ((Filter) drillDowns[dim]).getDocIdSet(context, null);\n\n            if (dis == null) {\n              continue;\n            }\n\n            Bits bits = dis.bits();\n\n            if (bits != null) {\n              // TODO: this logic is too naive: the\n              // existence of bits() in DIS today means\n              // either \"I'm a cheap FixedBitSet so apply me down\n              // low as you decode the postings\" or \"I'm so\n              // horribly expensive so apply me after all\n              // other Query/Filter clauses pass\"\n\n              // Filter supports random access; use that to\n              // prevent .advance() on costly filters:\n              dims[dim].bits = bits;\n\n              // TODO: Filter needs to express its expected\n              // cost somehow, before pulling the iterator;\n              // we should use that here to set the order to\n              // check the filters:\n\n            } else {\n              DocIdSetIterator disi = dis.iterator();\n              if (disi == null) {\n                nullCount++;\n                continue;\n              }\n              dims[dim].disi = disi;\n            }\n          } else {\n            DocIdSetIterator disi = ((Weight) drillDowns[dim]).scorer(context, null);\n            if (disi == null) {\n              nullCount++;\n              continue;\n            }\n            dims[dim].disi = disi;\n          }\n        }\n\n        // If more than one dim has no matches, then there\n        // are no hits nor drill-sideways counts.  Or, if we\n        // have only one dim and that dim has no matches,\n        // same thing.\n        //if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(this, context,\n                                       baseScorer,\n                                       drillDownCollector, dims,\n                                       scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher);\n    final Object[] drillDowns = new Object[drillDownQueries.length];\n    for(int dim=0;dim<drillDownQueries.length;dim++) {\n      Query query = drillDownQueries[dim];\n      Filter filter = DrillDownQuery.getFilter(query);\n      if (filter != null) {\n        drillDowns[dim] = filter;\n      } else {\n        // TODO: would be nice if we could say \"we will do no\n        // scoring\" here....\n        drillDowns[dim] = searcher.rewrite(query).createWeight(searcher);\n      }\n    }\n\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return baseQuery;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        // TODO: would be nice if AssertingIndexSearcher\n        // confirmed this for us\n        return false;\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        // We can only run as a top scorer:\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public BulkScorer bulkScorer(AtomicReaderContext context, boolean scoreDocsInOrder, Bits acceptDocs) throws IOException {\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, acceptDocs);\n\n        DrillSidewaysScorer.DocsAndCost[] dims = new DrillSidewaysScorer.DocsAndCost[drillDowns.length];\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new DrillSidewaysScorer.DocsAndCost();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          if (drillDowns[dim] instanceof Filter) {\n            // Pass null for acceptDocs because we already\n            // passed it to baseScorer and baseScorer is\n            // MUST'd here\n            DocIdSet dis = ((Filter) drillDowns[dim]).getDocIdSet(context, null);\n\n            if (dis == null) {\n              continue;\n            }\n\n            Bits bits = dis.bits();\n\n            if (bits != null) {\n              // TODO: this logic is too naive: the\n              // existence of bits() in DIS today means\n              // either \"I'm a cheap FixedBitSet so apply me down\n              // low as you decode the postings\" or \"I'm so\n              // horribly expensive so apply me after all\n              // other Query/Filter clauses pass\"\n\n              // Filter supports random access; use that to\n              // prevent .advance() on costly filters:\n              dims[dim].bits = bits;\n\n              // TODO: Filter needs to express its expected\n              // cost somehow, before pulling the iterator;\n              // we should use that here to set the order to\n              // check the filters:\n\n            } else {\n              DocIdSetIterator disi = dis.iterator();\n              if (disi == null) {\n                nullCount++;\n                continue;\n              }\n              dims[dim].disi = disi;\n            }\n          } else {\n            DocIdSetIterator disi = ((Weight) drillDowns[dim]).scorer(context, null);\n            if (disi == null) {\n              nullCount++;\n              continue;\n            }\n            dims[dim].disi = disi;\n          }\n        }\n\n        // If more than one dim has no matches, then there\n        // are no hits nor drill-sideways counts.  Or, if we\n        // have only one dim and that dim has no matches,\n        // same thing.\n        //if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(context,\n                                       baseScorer,\n                                       drillDownCollector, dims,\n                                       scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher);\n    final Object[] drillDowns = new Object[drillDownQueries.length];\n    for(int dim=0;dim<drillDownQueries.length;dim++) {\n      Query query = drillDownQueries[dim];\n      Filter filter = DrillDownQuery.getFilter(query);\n      if (filter != null) {\n        drillDowns[dim] = filter;\n      } else {\n        // TODO: would be nice if we could say \"we will do no\n        // scoring\" here....\n        drillDowns[dim] = searcher.rewrite(query).createWeight(searcher);\n      }\n    }\n\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return baseQuery;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        // TODO: would be nice if AssertingIndexSearcher\n        // confirmed this for us\n        return false;\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                           boolean topScorer, Bits acceptDocs) throws IOException {\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, scoreDocsInOrder, false, acceptDocs);\n\n        DrillSidewaysScorer.DocsAndCost[] dims = new DrillSidewaysScorer.DocsAndCost[drillDowns.length];\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new DrillSidewaysScorer.DocsAndCost();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          if (drillDowns[dim] instanceof Filter) {\n            // Pass null for acceptDocs because we already\n            // passed it to baseScorer and baseScorer is\n            // MUST'd here\n            DocIdSet dis = ((Filter) drillDowns[dim]).getDocIdSet(context, null);\n\n            if (dis == null) {\n              continue;\n            }\n\n            Bits bits = dis.bits();\n\n            if (bits != null) {\n              // TODO: this logic is too naive: the\n              // existence of bits() in DIS today means\n              // either \"I'm a cheap FixedBitSet so apply me down\n              // low as you decode the postings\" or \"I'm so\n              // horribly expensive so apply me after all\n              // other Query/Filter clauses pass\"\n\n              // Filter supports random access; use that to\n              // prevent .advance() on costly filters:\n              dims[dim].bits = bits;\n\n              // TODO: Filter needs to express its expected\n              // cost somehow, before pulling the iterator;\n              // we should use that here to set the order to\n              // check the filters:\n\n            } else {\n              DocIdSetIterator disi = dis.iterator();\n              if (disi == null) {\n                nullCount++;\n                continue;\n              }\n              dims[dim].disi = disi;\n            }\n          } else {\n            DocIdSetIterator disi = ((Weight) drillDowns[dim]).scorer(context, true, false, null);\n            if (disi == null) {\n              nullCount++;\n              continue;\n            }\n            dims[dim].disi = disi;\n          }\n        }\n\n        // If more than one dim has no matches, then there\n        // are no hits nor drill-sideways counts.  Or, if we\n        // have only one dim and that dim has no matches,\n        // same thing.\n        //if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(this, context,\n                                       baseScorer,\n                                       drillDownCollector, dims,\n                                       scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher);\n    final Object[] drillDowns = new Object[drillDownQueries.length];\n    for(int dim=0;dim<drillDownQueries.length;dim++) {\n      Query query = drillDownQueries[dim];\n      Filter filter = DrillDownQuery.getFilter(query);\n      if (filter != null) {\n        drillDowns[dim] = filter;\n      } else {\n        // TODO: would be nice if we could say \"we will do no\n        // scoring\" here....\n        drillDowns[dim] = searcher.rewrite(query).createWeight(searcher);\n      }\n    }\n\n    return new Weight() {\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return baseQuery;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        // TODO: would be nice if AssertingIndexSearcher\n        // confirmed this for us\n        return false;\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        // We can only run as a top scorer:\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context, boolean scoreDocsInOrder, Bits acceptDocs) throws IOException {\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, acceptDocs);\n\n        DrillSidewaysScorer.DocsAndCost[] dims = new DrillSidewaysScorer.DocsAndCost[drillDowns.length];\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new DrillSidewaysScorer.DocsAndCost();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          if (drillDowns[dim] instanceof Filter) {\n            // Pass null for acceptDocs because we already\n            // passed it to baseScorer and baseScorer is\n            // MUST'd here\n            DocIdSet dis = ((Filter) drillDowns[dim]).getDocIdSet(context, null);\n\n            if (dis == null) {\n              continue;\n            }\n\n            Bits bits = dis.bits();\n\n            if (bits != null) {\n              // TODO: this logic is too naive: the\n              // existence of bits() in DIS today means\n              // either \"I'm a cheap FixedBitSet so apply me down\n              // low as you decode the postings\" or \"I'm so\n              // horribly expensive so apply me after all\n              // other Query/Filter clauses pass\"\n\n              // Filter supports random access; use that to\n              // prevent .advance() on costly filters:\n              dims[dim].bits = bits;\n\n              // TODO: Filter needs to express its expected\n              // cost somehow, before pulling the iterator;\n              // we should use that here to set the order to\n              // check the filters:\n\n            } else {\n              DocIdSetIterator disi = dis.iterator();\n              if (disi == null) {\n                nullCount++;\n                continue;\n              }\n              dims[dim].disi = disi;\n            }\n          } else {\n            DocIdSetIterator disi = ((Weight) drillDowns[dim]).scorer(context, null);\n            if (disi == null) {\n              nullCount++;\n              continue;\n            }\n            dims[dim].disi = disi;\n          }\n        }\n\n        // If more than one dim has no matches, then there\n        // are no hits nor drill-sideways counts.  Or, if we\n        // have only one dim and that dim has no matches,\n        // same thing.\n        //if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(context,\n                                       baseScorer,\n                                       drillDownCollector, dims,\n                                       scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher);\n    final Object[] drillDowns = new Object[drillDownQueries.length];\n    for(int dim=0;dim<drillDownQueries.length;dim++) {\n      Query query = drillDownQueries[dim];\n      Filter filter = DrillDownQuery.getFilter(query);\n      if (filter != null) {\n        drillDowns[dim] = filter;\n      } else {\n        // TODO: would be nice if we could say \"we will do no\n        // scoring\" here....\n        drillDowns[dim] = searcher.rewrite(query).createWeight(searcher);\n      }\n    }\n\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return baseQuery;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        // TODO: would be nice if AssertingIndexSearcher\n        // confirmed this for us\n        return false;\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n        // We can only run as a top scorer:\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public BulkScorer bulkScorer(AtomicReaderContext context, boolean scoreDocsInOrder, Bits acceptDocs) throws IOException {\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, acceptDocs);\n\n        DrillSidewaysScorer.DocsAndCost[] dims = new DrillSidewaysScorer.DocsAndCost[drillDowns.length];\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new DrillSidewaysScorer.DocsAndCost();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          if (drillDowns[dim] instanceof Filter) {\n            // Pass null for acceptDocs because we already\n            // passed it to baseScorer and baseScorer is\n            // MUST'd here\n            DocIdSet dis = ((Filter) drillDowns[dim]).getDocIdSet(context, null);\n\n            if (dis == null) {\n              continue;\n            }\n\n            Bits bits = dis.bits();\n\n            if (bits != null) {\n              // TODO: this logic is too naive: the\n              // existence of bits() in DIS today means\n              // either \"I'm a cheap FixedBitSet so apply me down\n              // low as you decode the postings\" or \"I'm so\n              // horribly expensive so apply me after all\n              // other Query/Filter clauses pass\"\n\n              // Filter supports random access; use that to\n              // prevent .advance() on costly filters:\n              dims[dim].bits = bits;\n\n              // TODO: Filter needs to express its expected\n              // cost somehow, before pulling the iterator;\n              // we should use that here to set the order to\n              // check the filters:\n\n            } else {\n              DocIdSetIterator disi = dis.iterator();\n              if (disi == null) {\n                nullCount++;\n                continue;\n              }\n              dims[dim].disi = disi;\n            }\n          } else {\n            DocIdSetIterator disi = ((Weight) drillDowns[dim]).scorer(context, null);\n            if (disi == null) {\n              nullCount++;\n              continue;\n            }\n            dims[dim].disi = disi;\n          }\n        }\n\n        // If more than one dim has no matches, then there\n        // are no hits nor drill-sideways counts.  Or, if we\n        // have only one dim and that dim has no matches,\n        // same thing.\n        //if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(context,\n                                       baseScorer,\n                                       drillDownCollector, dims,\n                                       scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher);\n    final Object[] drillDowns = new Object[drillDownQueries.length];\n    for(int dim=0;dim<drillDownQueries.length;dim++) {\n      Query query = drillDownQueries[dim];\n      Filter filter = DrillDownQuery.getFilter(query);\n      if (filter != null) {\n        drillDowns[dim] = filter;\n      } else {\n        // TODO: would be nice if we could say \"we will do no\n        // scoring\" here....\n        drillDowns[dim] = searcher.rewrite(query).createWeight(searcher);\n      }\n    }\n\n    return new Weight() {\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return baseQuery;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        // We can only run as a top scorer:\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, acceptDocs);\n\n        DrillSidewaysScorer.DocsAndCost[] dims = new DrillSidewaysScorer.DocsAndCost[drillDowns.length];\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new DrillSidewaysScorer.DocsAndCost();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          if (drillDowns[dim] instanceof Filter) {\n            // Pass null for acceptDocs because we already\n            // passed it to baseScorer and baseScorer is\n            // MUST'd here\n            DocIdSet dis = ((Filter) drillDowns[dim]).getDocIdSet(context, null);\n\n            if (dis == null) {\n              continue;\n            }\n\n            Bits bits = dis.bits();\n\n            if (bits != null) {\n              // TODO: this logic is too naive: the\n              // existence of bits() in DIS today means\n              // either \"I'm a cheap FixedBitSet so apply me down\n              // low as you decode the postings\" or \"I'm so\n              // horribly expensive so apply me after all\n              // other Query/Filter clauses pass\"\n\n              // Filter supports random access; use that to\n              // prevent .advance() on costly filters:\n              dims[dim].bits = bits;\n\n              // TODO: Filter needs to express its expected\n              // cost somehow, before pulling the iterator;\n              // we should use that here to set the order to\n              // check the filters:\n\n            } else {\n              DocIdSetIterator disi = dis.iterator();\n              if (disi == null) {\n                nullCount++;\n                continue;\n              }\n              dims[dim].disi = disi;\n            }\n          } else {\n            DocIdSetIterator disi = ((Weight) drillDowns[dim]).scorer(context, null);\n            if (disi == null) {\n              nullCount++;\n              continue;\n            }\n            dims[dim].disi = disi;\n          }\n        }\n\n        // If more than one dim has no matches, then there\n        // are no hits nor drill-sideways counts.  Or, if we\n        // have only one dim and that dim has no matches,\n        // same thing.\n        //if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(context,\n                                       baseScorer,\n                                       drillDownCollector, dims,\n                                       scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher);\n    final Object[] drillDowns = new Object[drillDownQueries.length];\n    for(int dim=0;dim<drillDownQueries.length;dim++) {\n      Query query = drillDownQueries[dim];\n      Filter filter = DrillDownQuery.getFilter(query);\n      if (filter != null) {\n        drillDowns[dim] = filter;\n      } else {\n        // TODO: would be nice if we could say \"we will do no\n        // scoring\" here....\n        drillDowns[dim] = searcher.rewrite(query).createWeight(searcher);\n      }\n    }\n\n    return new Weight() {\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return baseQuery;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        // TODO: would be nice if AssertingIndexSearcher\n        // confirmed this for us\n        return false;\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        // We can only run as a top scorer:\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context, boolean scoreDocsInOrder, Bits acceptDocs) throws IOException {\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, acceptDocs);\n\n        DrillSidewaysScorer.DocsAndCost[] dims = new DrillSidewaysScorer.DocsAndCost[drillDowns.length];\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new DrillSidewaysScorer.DocsAndCost();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          if (drillDowns[dim] instanceof Filter) {\n            // Pass null for acceptDocs because we already\n            // passed it to baseScorer and baseScorer is\n            // MUST'd here\n            DocIdSet dis = ((Filter) drillDowns[dim]).getDocIdSet(context, null);\n\n            if (dis == null) {\n              continue;\n            }\n\n            Bits bits = dis.bits();\n\n            if (bits != null) {\n              // TODO: this logic is too naive: the\n              // existence of bits() in DIS today means\n              // either \"I'm a cheap FixedBitSet so apply me down\n              // low as you decode the postings\" or \"I'm so\n              // horribly expensive so apply me after all\n              // other Query/Filter clauses pass\"\n\n              // Filter supports random access; use that to\n              // prevent .advance() on costly filters:\n              dims[dim].bits = bits;\n\n              // TODO: Filter needs to express its expected\n              // cost somehow, before pulling the iterator;\n              // we should use that here to set the order to\n              // check the filters:\n\n            } else {\n              DocIdSetIterator disi = dis.iterator();\n              if (disi == null) {\n                nullCount++;\n                continue;\n              }\n              dims[dim].disi = disi;\n            }\n          } else {\n            DocIdSetIterator disi = ((Weight) drillDowns[dim]).scorer(context, null);\n            if (disi == null) {\n              nullCount++;\n              continue;\n            }\n            dims[dim].disi = disi;\n          }\n        }\n\n        // If more than one dim has no matches, then there\n        // are no hits nor drill-sideways counts.  Or, if we\n        // have only one dim and that dim has no matches,\n        // same thing.\n        //if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(context,\n                                       baseScorer,\n                                       drillDownCollector, dims,\n                                       scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher);\n    final Object[] drillDowns = new Object[drillDownQueries.length];\n    for(int dim=0;dim<drillDownQueries.length;dim++) {\n      Query query = drillDownQueries[dim];\n      Filter filter = DrillDownQuery.getFilter(query);\n      if (filter != null) {\n        drillDowns[dim] = filter;\n      } else {\n        // TODO: would be nice if we could say \"we will do no\n        // scoring\" here....\n        drillDowns[dim] = searcher.rewrite(query).createWeight(searcher);\n      }\n    }\n\n    return new Weight() {\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return baseQuery;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs, boolean needsScores) throws IOException {\n        // We can only run as a top scorer:\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context, Bits acceptDocs, boolean needsScores) throws IOException {\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, acceptDocs, needsScores);\n\n        DrillSidewaysScorer.DocsAndCost[] dims = new DrillSidewaysScorer.DocsAndCost[drillDowns.length];\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new DrillSidewaysScorer.DocsAndCost();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          if (drillDowns[dim] instanceof Filter) {\n            // Pass null for acceptDocs because we already\n            // passed it to baseScorer and baseScorer is\n            // MUST'd here\n            DocIdSet dis = ((Filter) drillDowns[dim]).getDocIdSet(context, null);\n\n            if (dis == null) {\n              continue;\n            }\n\n            Bits bits = dis.bits();\n\n            if (bits != null) {\n              // TODO: this logic is too naive: the\n              // existence of bits() in DIS today means\n              // either \"I'm a cheap FixedBitSet so apply me down\n              // low as you decode the postings\" or \"I'm so\n              // horribly expensive so apply me after all\n              // other Query/Filter clauses pass\"\n\n              // Filter supports random access; use that to\n              // prevent .advance() on costly filters:\n              dims[dim].bits = bits;\n\n              // TODO: Filter needs to express its expected\n              // cost somehow, before pulling the iterator;\n              // we should use that here to set the order to\n              // check the filters:\n\n            } else {\n              DocIdSetIterator disi = dis.iterator();\n              if (disi == null) {\n                nullCount++;\n                continue;\n              }\n              dims[dim].disi = disi;\n            }\n          } else {\n            DocIdSetIterator disi = ((Weight) drillDowns[dim]).scorer(context, null, needsScores);\n            if (disi == null) {\n              nullCount++;\n              continue;\n            }\n            dims[dim].disi = disi;\n          }\n        }\n\n        // If more than one dim has no matches, then there\n        // are no hits nor drill-sideways counts.  Or, if we\n        // have only one dim and that dim has no matches,\n        // same thing.\n        //if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(context,\n                                       baseScorer,\n                                       drillDownCollector, dims,\n                                       scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher);\n    final Object[] drillDowns = new Object[drillDownQueries.length];\n    for(int dim=0;dim<drillDownQueries.length;dim++) {\n      Query query = drillDownQueries[dim];\n      Filter filter = DrillDownQuery.getFilter(query);\n      if (filter != null) {\n        drillDowns[dim] = filter;\n      } else {\n        // TODO: would be nice if we could say \"we will do no\n        // scoring\" here....\n        drillDowns[dim] = searcher.rewrite(query).createWeight(searcher);\n      }\n    }\n\n    return new Weight() {\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return baseQuery;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        // We can only run as a top scorer:\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, acceptDocs);\n\n        DrillSidewaysScorer.DocsAndCost[] dims = new DrillSidewaysScorer.DocsAndCost[drillDowns.length];\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new DrillSidewaysScorer.DocsAndCost();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          if (drillDowns[dim] instanceof Filter) {\n            // Pass null for acceptDocs because we already\n            // passed it to baseScorer and baseScorer is\n            // MUST'd here\n            DocIdSet dis = ((Filter) drillDowns[dim]).getDocIdSet(context, null);\n\n            if (dis == null) {\n              continue;\n            }\n\n            Bits bits = dis.bits();\n\n            if (bits != null) {\n              // TODO: this logic is too naive: the\n              // existence of bits() in DIS today means\n              // either \"I'm a cheap FixedBitSet so apply me down\n              // low as you decode the postings\" or \"I'm so\n              // horribly expensive so apply me after all\n              // other Query/Filter clauses pass\"\n\n              // Filter supports random access; use that to\n              // prevent .advance() on costly filters:\n              dims[dim].bits = bits;\n\n              // TODO: Filter needs to express its expected\n              // cost somehow, before pulling the iterator;\n              // we should use that here to set the order to\n              // check the filters:\n\n            } else {\n              DocIdSetIterator disi = dis.iterator();\n              if (disi == null) {\n                nullCount++;\n                continue;\n              }\n              dims[dim].disi = disi;\n            }\n          } else {\n            DocIdSetIterator disi = ((Weight) drillDowns[dim]).scorer(context, null);\n            if (disi == null) {\n              nullCount++;\n              continue;\n            }\n            dims[dim].disi = disi;\n          }\n        }\n\n        // If more than one dim has no matches, then there\n        // are no hits nor drill-sideways counts.  Or, if we\n        // have only one dim and that dim has no matches,\n        // same thing.\n        //if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(context,\n                                       baseScorer,\n                                       drillDownCollector, dims,\n                                       scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87","2e18c86f811939bfa8cd24046c96ed026f2e9b34","f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher, needsScores);\n    final Object[] drillDowns = new Object[drillDownQueries.length];\n    for(int dim=0;dim<drillDownQueries.length;dim++) {\n      Query query = drillDownQueries[dim];\n      Filter filter = DrillDownQuery.getFilter(query);\n      if (filter != null) {\n        drillDowns[dim] = filter;\n      } else {\n        // TODO: would be nice if we could say \"we will do no\n        // scoring\" here....\n        drillDowns[dim] = searcher.rewrite(query).createWeight(searcher, needsScores);\n      }\n    }\n\n    return new Weight(DrillSidewaysQuery.this) {\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        // We can only run as a top scorer:\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, acceptDocs);\n\n        DrillSidewaysScorer.DocsAndCost[] dims = new DrillSidewaysScorer.DocsAndCost[drillDowns.length];\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new DrillSidewaysScorer.DocsAndCost();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          if (drillDowns[dim] instanceof Filter) {\n            // Pass null for acceptDocs because we already\n            // passed it to baseScorer and baseScorer is\n            // MUST'd here\n            DocIdSet dis = ((Filter) drillDowns[dim]).getDocIdSet(context, null);\n\n            if (dis == null) {\n              continue;\n            }\n\n            Bits bits = dis.bits();\n\n            if (bits != null) {\n              // TODO: this logic is too naive: the\n              // existence of bits() in DIS today means\n              // either \"I'm a cheap FixedBitSet so apply me down\n              // low as you decode the postings\" or \"I'm so\n              // horribly expensive so apply me after all\n              // other Query/Filter clauses pass\"\n\n              // Filter supports random access; use that to\n              // prevent .advance() on costly filters:\n              dims[dim].bits = bits;\n\n              // TODO: Filter needs to express its expected\n              // cost somehow, before pulling the iterator;\n              // we should use that here to set the order to\n              // check the filters:\n\n            } else {\n              DocIdSetIterator disi = dis.iterator();\n              if (disi == null) {\n                nullCount++;\n                continue;\n              }\n              dims[dim].disi = disi;\n            }\n          } else {\n            DocIdSetIterator disi = ((Weight) drillDowns[dim]).scorer(context, null);\n            if (disi == null) {\n              nullCount++;\n              continue;\n            }\n            dims[dim].disi = disi;\n          }\n        }\n\n        // If more than one dim has no matches, then there\n        // are no hits nor drill-sideways counts.  Or, if we\n        // have only one dim and that dim has no matches,\n        // same thing.\n        //if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(context,\n                                       baseScorer,\n                                       drillDownCollector, dims,\n                                       scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher);\n    final Object[] drillDowns = new Object[drillDownQueries.length];\n    for(int dim=0;dim<drillDownQueries.length;dim++) {\n      Query query = drillDownQueries[dim];\n      Filter filter = DrillDownQuery.getFilter(query);\n      if (filter != null) {\n        drillDowns[dim] = filter;\n      } else {\n        // TODO: would be nice if we could say \"we will do no\n        // scoring\" here....\n        drillDowns[dim] = searcher.rewrite(query).createWeight(searcher);\n      }\n    }\n\n    return new Weight() {\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return baseQuery;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return baseWeight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        baseWeight.normalize(norm, topLevelBoost);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs, boolean needsScores) throws IOException {\n        // We can only run as a top scorer:\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context, Bits acceptDocs, boolean needsScores) throws IOException {\n\n        // TODO: it could be better if we take acceptDocs\n        // into account instead of baseScorer?\n        Scorer baseScorer = baseWeight.scorer(context, acceptDocs, needsScores);\n\n        DrillSidewaysScorer.DocsAndCost[] dims = new DrillSidewaysScorer.DocsAndCost[drillDowns.length];\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          dims[dim] = new DrillSidewaysScorer.DocsAndCost();\n          dims[dim].sidewaysCollector = drillSidewaysCollectors[dim];\n          if (drillDowns[dim] instanceof Filter) {\n            // Pass null for acceptDocs because we already\n            // passed it to baseScorer and baseScorer is\n            // MUST'd here\n            DocIdSet dis = ((Filter) drillDowns[dim]).getDocIdSet(context, null);\n\n            if (dis == null) {\n              continue;\n            }\n\n            Bits bits = dis.bits();\n\n            if (bits != null) {\n              // TODO: this logic is too naive: the\n              // existence of bits() in DIS today means\n              // either \"I'm a cheap FixedBitSet so apply me down\n              // low as you decode the postings\" or \"I'm so\n              // horribly expensive so apply me after all\n              // other Query/Filter clauses pass\"\n\n              // Filter supports random access; use that to\n              // prevent .advance() on costly filters:\n              dims[dim].bits = bits;\n\n              // TODO: Filter needs to express its expected\n              // cost somehow, before pulling the iterator;\n              // we should use that here to set the order to\n              // check the filters:\n\n            } else {\n              DocIdSetIterator disi = dis.iterator();\n              if (disi == null) {\n                nullCount++;\n                continue;\n              }\n              dims[dim].disi = disi;\n            }\n          } else {\n            DocIdSetIterator disi = ((Weight) drillDowns[dim]).scorer(context, null, needsScores);\n            if (disi == null) {\n              nullCount++;\n              continue;\n            }\n            dims[dim].disi = disi;\n          }\n        }\n\n        // If more than one dim has no matches, then there\n        // are no hits nor drill-sideways counts.  Or, if we\n        // have only one dim and that dim has no matches,\n        // same thing.\n        //if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims);\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(context,\n                                       baseScorer,\n                                       drillDownCollector, dims,\n                                       scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["40640359164f629dd440a47df2e145d084ce9645"],"fb17639909a369c1e64866842e5c213440acc17e":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21d36d0db865f7b84026b447bec653469a6e66df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a5794e5c995c57444b154b01a9f3c837cd530a77":["2e18c86f811939bfa8cd24046c96ed026f2e9b34"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","21d36d0db865f7b84026b447bec653469a6e66df"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["40640359164f629dd440a47df2e145d084ce9645","a5794e5c995c57444b154b01a9f3c837cd530a77"],"40640359164f629dd440a47df2e145d084ce9645":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb17639909a369c1e64866842e5c213440acc17e"]},"commit2Childs":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["a5794e5c995c57444b154b01a9f3c837cd530a77"],"fb17639909a369c1e64866842e5c213440acc17e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["fb17639909a369c1e64866842e5c213440acc17e"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["21d36d0db865f7b84026b447bec653469a6e66df","3cc728b07df73b197e6d940d27f9b08b63918f13"],"21d36d0db865f7b84026b447bec653469a6e66df":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a5794e5c995c57444b154b01a9f3c837cd530a77":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["40640359164f629dd440a47df2e145d084ce9645"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"40640359164f629dd440a47df2e145d084ce9645":["2e18c86f811939bfa8cd24046c96ed026f2e9b34","acf00221f44c5f08ccea014f2492b53af15ecd66"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}