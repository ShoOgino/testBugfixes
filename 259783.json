{"path":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile2#testRandomAccess().mjava","commits":[{"id":"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171","date":1412231650,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile2#testRandomAccess().mjava","pathOld":"/dev/null","sourceNew":"  /** This test opens two files from a compound stream and verifies that\n   *  their file positions are independent of each other.\n   */\n  public void testRandomAccess() throws IOException {\n    CompoundFileDirectory cr = new CompoundFileDirectory(id, dir, \"f.comp\", newIOContext(random()), false);\n    \n    // Open two files\n    IndexInput e1 = dir.openInput(\"f11\", newIOContext(random()));\n    IndexInput e2 = dir.openInput(\"f3\", newIOContext(random()));\n    \n    IndexInput a1 = cr.openInput(\"f11\", newIOContext(random()));\n    IndexInput a2 = dir.openInput(\"f3\", newIOContext(random()));\n    \n    // Seek the first pair\n    e1.seek(100);\n    a1.seek(100);\n    assertEquals(100, e1.getFilePointer());\n    assertEquals(100, a1.getFilePointer());\n    byte be1 = e1.readByte();\n    byte ba1 = a1.readByte();\n    assertEquals(be1, ba1);\n    \n    // Now seek the second pair\n    e2.seek(1027);\n    a2.seek(1027);\n    assertEquals(1027, e2.getFilePointer());\n    assertEquals(1027, a2.getFilePointer());\n    byte be2 = e2.readByte();\n    byte ba2 = a2.readByte();\n    assertEquals(be2, ba2);\n    \n    // Now make sure the first one didn't move\n    assertEquals(101, e1.getFilePointer());\n    assertEquals(101, a1.getFilePointer());\n    be1 = e1.readByte();\n    ba1 = a1.readByte();\n    assertEquals(be1, ba1);\n    \n    // Now more the first one again, past the buffer length\n    e1.seek(1910);\n    a1.seek(1910);\n    assertEquals(1910, e1.getFilePointer());\n    assertEquals(1910, a1.getFilePointer());\n    be1 = e1.readByte();\n    ba1 = a1.readByte();\n    assertEquals(be1, ba1);\n    \n    // Now make sure the second set didn't move\n    assertEquals(1028, e2.getFilePointer());\n    assertEquals(1028, a2.getFilePointer());\n    be2 = e2.readByte();\n    ba2 = a2.readByte();\n    assertEquals(be2, ba2);\n    \n    // Move the second set back, again cross the buffer size\n    e2.seek(17);\n    a2.seek(17);\n    assertEquals(17, e2.getFilePointer());\n    assertEquals(17, a2.getFilePointer());\n    be2 = e2.readByte();\n    ba2 = a2.readByte();\n    assertEquals(be2, ba2);\n    \n    // Finally, make sure the first set didn't move\n    // Now make sure the first one didn't move\n    assertEquals(1911, e1.getFilePointer());\n    assertEquals(1911, a1.getFilePointer());\n    be1 = e1.readByte();\n    ba1 = a1.readByte();\n    assertEquals(be1, ba1);\n    \n    e1.close();\n    e2.close();\n    a1.close();\n    a2.close();\n    cr.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"989d940c4bf402188f4f0ae13736836885227383","date":1412263633,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile2#testRandomAccess().mjava","sourceNew":null,"sourceOld":"  /** This test opens two files from a compound stream and verifies that\n   *  their file positions are independent of each other.\n   */\n  public void testRandomAccess() throws IOException {\n    CompoundFileDirectory cr = new CompoundFileDirectory(id, dir, \"f.comp\", newIOContext(random()), false);\n    \n    // Open two files\n    IndexInput e1 = dir.openInput(\"f11\", newIOContext(random()));\n    IndexInput e2 = dir.openInput(\"f3\", newIOContext(random()));\n    \n    IndexInput a1 = cr.openInput(\"f11\", newIOContext(random()));\n    IndexInput a2 = dir.openInput(\"f3\", newIOContext(random()));\n    \n    // Seek the first pair\n    e1.seek(100);\n    a1.seek(100);\n    assertEquals(100, e1.getFilePointer());\n    assertEquals(100, a1.getFilePointer());\n    byte be1 = e1.readByte();\n    byte ba1 = a1.readByte();\n    assertEquals(be1, ba1);\n    \n    // Now seek the second pair\n    e2.seek(1027);\n    a2.seek(1027);\n    assertEquals(1027, e2.getFilePointer());\n    assertEquals(1027, a2.getFilePointer());\n    byte be2 = e2.readByte();\n    byte ba2 = a2.readByte();\n    assertEquals(be2, ba2);\n    \n    // Now make sure the first one didn't move\n    assertEquals(101, e1.getFilePointer());\n    assertEquals(101, a1.getFilePointer());\n    be1 = e1.readByte();\n    ba1 = a1.readByte();\n    assertEquals(be1, ba1);\n    \n    // Now more the first one again, past the buffer length\n    e1.seek(1910);\n    a1.seek(1910);\n    assertEquals(1910, e1.getFilePointer());\n    assertEquals(1910, a1.getFilePointer());\n    be1 = e1.readByte();\n    ba1 = a1.readByte();\n    assertEquals(be1, ba1);\n    \n    // Now make sure the second set didn't move\n    assertEquals(1028, e2.getFilePointer());\n    assertEquals(1028, a2.getFilePointer());\n    be2 = e2.readByte();\n    ba2 = a2.readByte();\n    assertEquals(be2, ba2);\n    \n    // Move the second set back, again cross the buffer size\n    e2.seek(17);\n    a2.seek(17);\n    assertEquals(17, e2.getFilePointer());\n    assertEquals(17, a2.getFilePointer());\n    be2 = e2.readByte();\n    ba2 = a2.readByte();\n    assertEquals(be2, ba2);\n    \n    // Finally, make sure the first set didn't move\n    // Now make sure the first one didn't move\n    assertEquals(1911, e1.getFilePointer());\n    assertEquals(1911, a1.getFilePointer());\n    be1 = e1.readByte();\n    ba1 = a1.readByte();\n    assertEquals(be1, ba1);\n    \n    e1.close();\n    e2.close();\n    a1.close();\n    a2.close();\n    cr.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"989d940c4bf402188f4f0ae13736836885227383":["f382b2e9f4ca7dbe98e2f15da70983ecfc02b171"],"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"989d940c4bf402188f4f0ae13736836885227383":[],"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171":["989d940c4bf402188f4f0ae13736836885227383"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f382b2e9f4ca7dbe98e2f15da70983ecfc02b171","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["989d940c4bf402188f4f0ae13736836885227383","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}