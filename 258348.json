{"path":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#testReloadCore().mjava","commits":[{"id":"0265144286422ad99682a00904cc2536b79c8535","date":1482222684,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#testReloadCore().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testReloadCore() throws Exception {\n    Random random = random();\n\n    String scope = SolrMetricTestUtils.getRandomScope(random, true);\n    SolrInfoMBean.Category category = SolrMetricTestUtils.getRandomCategory(random, true);\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(random, true);\n    SolrMetricProducer producer = SolrMetricTestUtils.getProducerOf(metricManager, category, scope, metrics);\n    coreMetricManager.registerMetricProducer(scope, producer);\n    Set<ObjectInstance> objects = mBeanServer.queryMBeans(null, null);\n    assertEquals(metrics.size(), objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            reporterName.equals(o.getObjectName().getKeyProperty(\"reporter\"))).count());\n\n    h.getCoreContainer().reload(h.getCore().getName());\n    PluginInfo pluginInfo = createReporterPluginInfo();\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(), pluginInfo);\n    coreMetricManager.registerMetricProducer(scope, producer);\n\n    objects = mBeanServer.queryMBeans(null, null);\n    assertEquals(metrics.size(), objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            pluginInfo.name.equals(o.getObjectName().getKeyProperty(\"reporter\"))).count());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c4ab4a7edc7af79e3c922c4d6a468fd48ea86946"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#testReloadCore().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testReloadCore() throws Exception {\n    Random random = random();\n\n    String scope = SolrMetricTestUtils.getRandomScope(random, true);\n    SolrInfoMBean.Category category = SolrMetricTestUtils.getRandomCategory(random, true);\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(random, true);\n    SolrMetricProducer producer = SolrMetricTestUtils.getProducerOf(metricManager, category, scope, metrics);\n    coreMetricManager.registerMetricProducer(scope, producer);\n    Set<ObjectInstance> objects = mBeanServer.queryMBeans(null, null);\n    assertEquals(metrics.size(), objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            reporterName.equals(o.getObjectName().getKeyProperty(\"reporter\"))).count());\n\n    h.getCoreContainer().reload(h.getCore().getName());\n    PluginInfo pluginInfo = createReporterPluginInfo();\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(), pluginInfo);\n    coreMetricManager.registerMetricProducer(scope, producer);\n\n    objects = mBeanServer.queryMBeans(null, null);\n    assertEquals(metrics.size(), objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            pluginInfo.name.equals(o.getObjectName().getKeyProperty(\"reporter\"))).count());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#testReloadCore().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#testReloadCore().mjava","sourceNew":"  @Test\n  public void testReloadCore() throws Exception {\n    Random random = random();\n\n    String scope = SolrMetricTestUtils.getRandomScope(random, true);\n    SolrInfoMBean.Category category = SolrMetricTestUtils.getRandomCategory(random, true);\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(random, true);\n    SolrMetricProducer producer = SolrMetricTestUtils.getProducerOf(metricManager, category, scope, metrics);\n    coreMetricManager.registerMetricProducer(scope, producer);\n    Set<ObjectInstance> objects = mBeanServer.queryMBeans(null, null);\n    assertEquals(metrics.size(), objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            reporterName.equals(o.getObjectName().getKeyProperty(\"reporter\"))).count());\n\n    h.getCoreContainer().reload(h.getCore().getName());\n    PluginInfo pluginInfo = createReporterPluginInfo();\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo, String.valueOf(coreMetricManager.getCore().hashCode()));\n    coreMetricManager.registerMetricProducer(scope, producer);\n\n    objects = mBeanServer.queryMBeans(null, null);\n    assertEquals(metrics.size(), objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            pluginInfo.name.equals(o.getObjectName().getKeyProperty(\"reporter\"))).count());\n  }\n\n","sourceOld":"  @Test\n  public void testReloadCore() throws Exception {\n    Random random = random();\n\n    String scope = SolrMetricTestUtils.getRandomScope(random, true);\n    SolrInfoMBean.Category category = SolrMetricTestUtils.getRandomCategory(random, true);\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(random, true);\n    SolrMetricProducer producer = SolrMetricTestUtils.getProducerOf(metricManager, category, scope, metrics);\n    coreMetricManager.registerMetricProducer(scope, producer);\n    Set<ObjectInstance> objects = mBeanServer.queryMBeans(null, null);\n    assertEquals(metrics.size(), objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            reporterName.equals(o.getObjectName().getKeyProperty(\"reporter\"))).count());\n\n    h.getCoreContainer().reload(h.getCore().getName());\n    PluginInfo pluginInfo = createReporterPluginInfo();\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(), pluginInfo);\n    coreMetricManager.registerMetricProducer(scope, producer);\n\n    objects = mBeanServer.queryMBeans(null, null);\n    assertEquals(metrics.size(), objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            pluginInfo.name.equals(o.getObjectName().getKeyProperty(\"reporter\"))).count());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#testReloadCore().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#testReloadCore().mjava","sourceNew":"  @Test\n  public void testReloadCore() throws Exception {\n    Random random = random();\n\n    String scope = SolrMetricTestUtils.getRandomScope(random, true);\n    SolrInfoBean.Category category = SolrMetricTestUtils.getRandomCategory(random, true);\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(random, true);\n    SolrMetricProducer producer = SolrMetricTestUtils.getProducerOf(metricManager, category, scope, metrics);\n    coreMetricManager.registerMetricProducer(scope, producer);\n    Set<ObjectInstance> objects = mBeanServer.queryMBeans(null, null);\n    assertEquals(metrics.size(), objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n        o.getObjectName().getDomain().equals(rootName)).count());\n\n    h.getCoreContainer().reload(h.getCore().getName());\n    PluginInfo pluginInfo = createReporterPluginInfo(rootName, true);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo, String.valueOf(coreMetricManager.getCore().hashCode()));\n    coreMetricManager.registerMetricProducer(scope, producer);\n\n    objects = mBeanServer.queryMBeans(null, null);\n    assertEquals(metrics.size(), objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            rootName.equals(o.getObjectName().getDomain())).count());\n  }\n\n","sourceOld":"  @Test\n  public void testReloadCore() throws Exception {\n    Random random = random();\n\n    String scope = SolrMetricTestUtils.getRandomScope(random, true);\n    SolrInfoMBean.Category category = SolrMetricTestUtils.getRandomCategory(random, true);\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(random, true);\n    SolrMetricProducer producer = SolrMetricTestUtils.getProducerOf(metricManager, category, scope, metrics);\n    coreMetricManager.registerMetricProducer(scope, producer);\n    Set<ObjectInstance> objects = mBeanServer.queryMBeans(null, null);\n    assertEquals(metrics.size(), objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            reporterName.equals(o.getObjectName().getKeyProperty(\"reporter\"))).count());\n\n    h.getCoreContainer().reload(h.getCore().getName());\n    PluginInfo pluginInfo = createReporterPluginInfo();\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo, String.valueOf(coreMetricManager.getCore().hashCode()));\n    coreMetricManager.registerMetricProducer(scope, producer);\n\n    objects = mBeanServer.queryMBeans(null, null);\n    assertEquals(metrics.size(), objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            pluginInfo.name.equals(o.getObjectName().getKeyProperty(\"reporter\"))).count());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#testReloadCore().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#testReloadCore().mjava","sourceNew":"  @Test\n  public void testReloadCore() throws Exception {\n    Random random = random();\n\n    String scope = SolrMetricTestUtils.getRandomScope(random, true);\n    SolrInfoBean.Category category = SolrMetricTestUtils.getRandomCategory(random, true);\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(random, true);\n    SolrMetricProducer producer = SolrMetricTestUtils.getProducerOf(metricManager, category, scope, metrics);\n    coreMetricManager.registerMetricProducer(scope, producer);\n    Set<ObjectInstance> objects = mBeanServer.queryMBeans(null, null);\n    assertEquals(metrics.size(), objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n        o.getObjectName().getDomain().equals(rootName)).count());\n\n    h.getCoreContainer().reload(h.getCore().getName());\n    PluginInfo pluginInfo = createReporterPluginInfo(rootName, true);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo, String.valueOf(coreMetricManager.getCore().hashCode()));\n    coreMetricManager.registerMetricProducer(scope, producer);\n\n    objects = mBeanServer.queryMBeans(null, null);\n    assertEquals(metrics.size(), objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            rootName.equals(o.getObjectName().getDomain())).count());\n  }\n\n","sourceOld":"  @Test\n  public void testReloadCore() throws Exception {\n    Random random = random();\n\n    String scope = SolrMetricTestUtils.getRandomScope(random, true);\n    SolrInfoMBean.Category category = SolrMetricTestUtils.getRandomCategory(random, true);\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(random, true);\n    SolrMetricProducer producer = SolrMetricTestUtils.getProducerOf(metricManager, category, scope, metrics);\n    coreMetricManager.registerMetricProducer(scope, producer);\n    Set<ObjectInstance> objects = mBeanServer.queryMBeans(null, null);\n    assertEquals(metrics.size(), objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            reporterName.equals(o.getObjectName().getKeyProperty(\"reporter\"))).count());\n\n    h.getCoreContainer().reload(h.getCore().getName());\n    PluginInfo pluginInfo = createReporterPluginInfo();\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo, String.valueOf(coreMetricManager.getCore().hashCode()));\n    coreMetricManager.registerMetricProducer(scope, producer);\n\n    objects = mBeanServer.queryMBeans(null, null);\n    assertEquals(metrics.size(), objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            pluginInfo.name.equals(o.getObjectName().getKeyProperty(\"reporter\"))).count());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4ab4a7edc7af79e3c922c4d6a468fd48ea86946","date":1499084472,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#testReloadCore().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#testReloadCore().mjava","sourceNew":"  @Test\n  public void testReloadCore() throws Exception {\n    Random random = random();\n\n    String scope = PREFIX + SolrMetricTestUtils.getRandomScope(random, true);\n    SolrInfoBean.Category category = SolrMetricTestUtils.getRandomCategory(random, true);\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(random, true);\n    SolrMetricProducer producer = SolrMetricTestUtils.getProducerOf(metricManager, category, scope, metrics);\n    coreMetricManager.registerMetricProducer(scope, producer);\n    Set<ObjectInstance> objects = mBeanServer.queryMBeans(null, null);\n    assertEquals(metrics.size(), objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n        o.getObjectName().getDomain().equals(rootName)).count());\n\n    h.getCoreContainer().reload(h.getCore().getName());\n    PluginInfo pluginInfo = createReporterPluginInfo(rootName, true);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo, String.valueOf(coreMetricManager.getCore().hashCode()));\n    coreMetricManager.registerMetricProducer(scope, producer);\n\n    objects = mBeanServer.queryMBeans(null, null);\n    assertEquals(metrics.size(), objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            rootName.equals(o.getObjectName().getDomain())).count());\n  }\n\n","sourceOld":"  @Test\n  public void testReloadCore() throws Exception {\n    Random random = random();\n\n    String scope = SolrMetricTestUtils.getRandomScope(random, true);\n    SolrInfoBean.Category category = SolrMetricTestUtils.getRandomCategory(random, true);\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(random, true);\n    SolrMetricProducer producer = SolrMetricTestUtils.getProducerOf(metricManager, category, scope, metrics);\n    coreMetricManager.registerMetricProducer(scope, producer);\n    Set<ObjectInstance> objects = mBeanServer.queryMBeans(null, null);\n    assertEquals(metrics.size(), objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n        o.getObjectName().getDomain().equals(rootName)).count());\n\n    h.getCoreContainer().reload(h.getCore().getName());\n    PluginInfo pluginInfo = createReporterPluginInfo(rootName, true);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo, String.valueOf(coreMetricManager.getCore().hashCode()));\n    coreMetricManager.registerMetricProducer(scope, producer);\n\n    objects = mBeanServer.queryMBeans(null, null);\n    assertEquals(metrics.size(), objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            rootName.equals(o.getObjectName().getDomain())).count());\n  }\n\n","bugFix":["0265144286422ad99682a00904cc2536b79c8535"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#testReloadCore().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#testReloadCore().mjava","sourceNew":"  @Test\n  public void testReloadCore() throws Exception {\n    Random random = random();\n\n    String scope = PREFIX + SolrMetricTestUtils.getRandomScope(random, true);\n    SolrInfoBean.Category category = SolrMetricTestUtils.getRandomCategory(random, true);\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(random, true);\n    SolrMetricProducer producer = SolrMetricTestUtils.getProducerOf(metricManager, category, scope, metrics);\n    coreMetricManager.registerMetricProducer(scope, producer);\n    Set<ObjectInstance> objects = mBeanServer.queryMBeans(null, null);\n    assertEquals(metrics.size(), objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n        o.getObjectName().getDomain().equals(rootName)).count());\n\n    h.getCoreContainer().reload(h.getCore().getName());\n    PluginInfo pluginInfo = createReporterPluginInfo(rootName, true);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo, String.valueOf(coreMetricManager.getCore().hashCode()));\n    coreMetricManager.registerMetricProducer(scope, producer);\n\n    objects = mBeanServer.queryMBeans(null, null);\n    assertEquals(metrics.size(), objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            rootName.equals(o.getObjectName().getDomain())).count());\n  }\n\n","sourceOld":"  @Test\n  public void testReloadCore() throws Exception {\n    Random random = random();\n\n    String scope = SolrMetricTestUtils.getRandomScope(random, true);\n    SolrInfoBean.Category category = SolrMetricTestUtils.getRandomCategory(random, true);\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(random, true);\n    SolrMetricProducer producer = SolrMetricTestUtils.getProducerOf(metricManager, category, scope, metrics);\n    coreMetricManager.registerMetricProducer(scope, producer);\n    Set<ObjectInstance> objects = mBeanServer.queryMBeans(null, null);\n    assertEquals(metrics.size(), objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n        o.getObjectName().getDomain().equals(rootName)).count());\n\n    h.getCoreContainer().reload(h.getCore().getName());\n    PluginInfo pluginInfo = createReporterPluginInfo(rootName, true);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo, String.valueOf(coreMetricManager.getCore().hashCode()));\n    coreMetricManager.registerMetricProducer(scope, producer);\n\n    objects = mBeanServer.queryMBeans(null, null);\n    assertEquals(metrics.size(), objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            rootName.equals(o.getObjectName().getDomain())).count());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f90f26c648df8320685eb76fec8bb9972e1994c4","date":1508340424,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#testReloadCore().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#testReloadCore().mjava","sourceNew":"  @Test\n  public void testReloadCore() throws Exception {\n    Random random = random();\n\n    String scope = PREFIX + SolrMetricTestUtils.getRandomScope(random, true);\n    SolrInfoBean.Category category = SolrMetricTestUtils.getRandomCategory(random, true);\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(random, true);\n    SolrMetricProducer producer = SolrMetricTestUtils.getProducerOf(metricManager, category, scope, metrics);\n    coreMetricManager.registerMetricProducer(scope, producer);\n    Set<ObjectInstance> objects = mBeanServer.queryMBeans(null, null);\n    assertEquals(metrics.size(), objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n        o.getObjectName().getDomain().equals(rootName)).count());\n\n    h.getCoreContainer().reload(h.getCore().getName());\n    PluginInfo pluginInfo = createReporterPluginInfo(rootName, true);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore(),\n        pluginInfo, String.valueOf(coreMetricManager.getCore().hashCode()));\n    coreMetricManager.registerMetricProducer(scope, producer);\n\n    objects = mBeanServer.queryMBeans(null, null);\n    assertEquals(metrics.size(), objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            rootName.equals(o.getObjectName().getDomain())).count());\n  }\n\n","sourceOld":"  @Test\n  public void testReloadCore() throws Exception {\n    Random random = random();\n\n    String scope = PREFIX + SolrMetricTestUtils.getRandomScope(random, true);\n    SolrInfoBean.Category category = SolrMetricTestUtils.getRandomCategory(random, true);\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(random, true);\n    SolrMetricProducer producer = SolrMetricTestUtils.getProducerOf(metricManager, category, scope, metrics);\n    coreMetricManager.registerMetricProducer(scope, producer);\n    Set<ObjectInstance> objects = mBeanServer.queryMBeans(null, null);\n    assertEquals(metrics.size(), objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n        o.getObjectName().getDomain().equals(rootName)).count());\n\n    h.getCoreContainer().reload(h.getCore().getName());\n    PluginInfo pluginInfo = createReporterPluginInfo(rootName, true);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo, String.valueOf(coreMetricManager.getCore().hashCode()));\n    coreMetricManager.registerMetricProducer(scope, producer);\n\n    objects = mBeanServer.queryMBeans(null, null);\n    assertEquals(metrics.size(), objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            rootName.equals(o.getObjectName().getDomain())).count());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9bfbea0278c393fb53c503162381e1c3b66929c","date":1573576925,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#testReloadCore().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#testReloadCore().mjava","sourceNew":"  @Test\n  public void testReloadCore() throws Exception {\n    Random random = random();\n\n    String scope = PREFIX + SolrMetricTestUtils.getRandomScope(random, true);\n    SolrInfoBean.Category category = SolrMetricTestUtils.getRandomCategory(random, true);\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(random, true);\n    SolrMetricProducer producer = SolrMetricTestUtils.getProducerOf(metricManager, category, scope, metrics);\n    coreMetricManager.registerMetricProducer(scope, producer);\n    Set<ObjectInstance> objects = TEST_MBEAN_SERVER.queryMBeans(null, null);\n    assertEquals(metrics.size(), objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n        o.getObjectName().getDomain().equals(rootName)).count());\n\n    h.getCoreContainer().reload(h.getCore().getName());\n    PluginInfo pluginInfo = createReporterPluginInfo(rootName, true);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore(),\n        pluginInfo, String.valueOf(coreMetricManager.getCore().hashCode()));\n    coreMetricManager.registerMetricProducer(scope, producer);\n\n    objects = TEST_MBEAN_SERVER.queryMBeans(null, null);\n    assertEquals(metrics.size(), objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            rootName.equals(o.getObjectName().getDomain())).count());\n  }\n\n","sourceOld":"  @Test\n  public void testReloadCore() throws Exception {\n    Random random = random();\n\n    String scope = PREFIX + SolrMetricTestUtils.getRandomScope(random, true);\n    SolrInfoBean.Category category = SolrMetricTestUtils.getRandomCategory(random, true);\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(random, true);\n    SolrMetricProducer producer = SolrMetricTestUtils.getProducerOf(metricManager, category, scope, metrics);\n    coreMetricManager.registerMetricProducer(scope, producer);\n    Set<ObjectInstance> objects = mBeanServer.queryMBeans(null, null);\n    assertEquals(metrics.size(), objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n        o.getObjectName().getDomain().equals(rootName)).count());\n\n    h.getCoreContainer().reload(h.getCore().getName());\n    PluginInfo pluginInfo = createReporterPluginInfo(rootName, true);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore(),\n        pluginInfo, String.valueOf(coreMetricManager.getCore().hashCode()));\n    coreMetricManager.registerMetricProducer(scope, producer);\n\n    objects = mBeanServer.queryMBeans(null, null);\n    assertEquals(metrics.size(), objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            rootName.equals(o.getObjectName().getDomain())).count());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"0265144286422ad99682a00904cc2536b79c8535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0265144286422ad99682a00904cc2536b79c8535"],"c4ab4a7edc7af79e3c922c4d6a468fd48ea86946":["816521ebaad5add9cb96bb88c577394e2938c40b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["0265144286422ad99682a00904cc2536b79c8535"],"30c8e5574b55d57947e989443dfde611646530ee":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","c4ab4a7edc7af79e3c922c4d6a468fd48ea86946"],"a9bfbea0278c393fb53c503162381e1c3b66929c":["f90f26c648df8320685eb76fec8bb9972e1994c4"],"f90f26c648df8320685eb76fec8bb9972e1994c4":["c4ab4a7edc7af79e3c922c4d6a468fd48ea86946"],"816521ebaad5add9cb96bb88c577394e2938c40b":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a9bfbea0278c393fb53c503162381e1c3b66929c"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["30c8e5574b55d57947e989443dfde611646530ee"],"0265144286422ad99682a00904cc2536b79c8535":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"c4ab4a7edc7af79e3c922c4d6a468fd48ea86946":["30c8e5574b55d57947e989443dfde611646530ee","f90f26c648df8320685eb76fec8bb9972e1994c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0265144286422ad99682a00904cc2536b79c8535","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"30c8e5574b55d57947e989443dfde611646530ee":[],"a9bfbea0278c393fb53c503162381e1c3b66929c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f90f26c648df8320685eb76fec8bb9972e1994c4":["a9bfbea0278c393fb53c503162381e1c3b66929c"],"816521ebaad5add9cb96bb88c577394e2938c40b":["c4ab4a7edc7af79e3c922c4d6a468fd48ea86946"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}