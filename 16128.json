{"path":"src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter#handleAdminRequest(HttpServletRequest,ServletResponse,SolrRequestHandler,SolrQueryRequest).mjava","commits":[{"id":"eeddcf8e42f213f1b4499194c6f014554e1a22ef","date":1242729902,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter#handleAdminRequest(HttpServletRequest,ServletResponse,SolrRequestHandler,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  private void handleAdminRequest(HttpServletRequest req, ServletResponse response, SolrRequestHandler handler,\n                                  SolrQueryRequest solrReq) throws IOException {\n    SolrQueryResponse solrResp = new SolrQueryResponse();\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    solrResp.add(\"responseHeader\", responseHeader);\n    NamedList toLog = solrResp.getToLog();\n    toLog.add(\"webapp\", req.getContextPath());\n    toLog.add(\"path\", solrReq.getContext().get(\"path\"));\n    toLog.add(\"params\", \"{\" + solrReq.getParamString() + \"}\");\n    handler.handleRequest(solrReq, solrResp);\n    SolrCore.setResponseHeaderValues(handler, solrReq, solrResp);\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < toLog.size(); i++) {\n      String name = toLog.getName(i);\n      Object val = toLog.getVal(i);\n      sb.append(name).append(\"=\").append(val).append(\" \");\n    }\n    QueryResponseWriter respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(solrReq.getParams().get(CommonParams.WT));\n    if (respWriter == null) respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(\"standard\");\n    writeResponse(solrResp, response, respWriter, solrReq, Method.getMethod(req.getMethod()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter#handleAdminRequest(HttpServletRequest,ServletResponse,SolrRequestHandler,SolrQueryRequest).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter#handleAdminRequest(HttpServletRequest,ServletResponse,SolrRequestHandler,SolrQueryRequest).mjava","sourceNew":"  private void handleAdminRequest(HttpServletRequest req, ServletResponse response, SolrRequestHandler handler,\n                                  SolrQueryRequest solrReq) throws IOException {\n    SolrQueryResponse solrResp = new SolrQueryResponse();\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    solrResp.add(\"responseHeader\", responseHeader);\n    NamedList toLog = solrResp.getToLog();\n    toLog.add(\"webapp\", req.getContextPath());\n    toLog.add(\"path\", solrReq.getContext().get(\"path\"));\n    toLog.add(\"params\", \"{\" + solrReq.getParamString() + \"}\");\n    handler.handleRequest(solrReq, solrResp);\n    SolrCore.setResponseHeaderValues(handler, solrReq, solrResp);\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < toLog.size(); i++) {\n      String name = toLog.getName(i);\n      Object val = toLog.getVal(i);\n      sb.append(name).append(\"=\").append(val).append(\" \");\n    }\n    QueryResponseWriter respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(solrReq.getParams().get(CommonParams.WT));\n    if (respWriter == null) respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(\"standard\");\n    writeResponse(solrResp, response, respWriter, solrReq, Method.getMethod(req.getMethod()));\n  }\n\n","sourceOld":"  private void handleAdminRequest(HttpServletRequest req, ServletResponse response, SolrRequestHandler handler,\n                                  SolrQueryRequest solrReq) throws IOException {\n    SolrQueryResponse solrResp = new SolrQueryResponse();\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    solrResp.add(\"responseHeader\", responseHeader);\n    NamedList toLog = solrResp.getToLog();\n    toLog.add(\"webapp\", req.getContextPath());\n    toLog.add(\"path\", solrReq.getContext().get(\"path\"));\n    toLog.add(\"params\", \"{\" + solrReq.getParamString() + \"}\");\n    handler.handleRequest(solrReq, solrResp);\n    SolrCore.setResponseHeaderValues(handler, solrReq, solrResp);\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < toLog.size(); i++) {\n      String name = toLog.getName(i);\n      Object val = toLog.getVal(i);\n      sb.append(name).append(\"=\").append(val).append(\" \");\n    }\n    QueryResponseWriter respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(solrReq.getParams().get(CommonParams.WT));\n    if (respWriter == null) respWriter = SolrCore.DEFAULT_RESPONSE_WRITERS.get(\"standard\");\n    writeResponse(solrResp, response, respWriter, solrReq, Method.getMethod(req.getMethod()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["eeddcf8e42f213f1b4499194c6f014554e1a22ef"],"eeddcf8e42f213f1b4499194c6f014554e1a22ef":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["eeddcf8e42f213f1b4499194c6f014554e1a22ef"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"eeddcf8e42f213f1b4499194c6f014554e1a22ef":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}