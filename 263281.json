{"path":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#newBufferCleaner(Class[#],MethodHandle).mjava","commits":[{"id":"2613a05c615dab2b84745ce1983d2f053fdb4358","date":1482346162,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#newBufferCleaner(Class[#],MethodHandle).mjava","pathOld":"/dev/null","sourceNew":"  private static BufferCleaner newBufferCleaner(final Class<?> unmappableBufferClass, final MethodHandle unmapper) {\n    assert Objects.equals(methodType(void.class, ByteBuffer.class), unmapper.type());\n    return (String resourceDescription, ByteBuffer buffer) -> {\n      if (!buffer.isDirect()) {\n        throw new IllegalArgumentException(\"unmapping only works with direct buffers\");\n      }\n      if (!unmappableBufferClass.isInstance(buffer)) {\n        throw new IllegalArgumentException(\"buffer is not an instance of \" + unmappableBufferClass.getName());\n      }\n      final Throwable error = AccessController.doPrivileged((PrivilegedAction<Throwable>) () -> {\n        try {\n          unmapper.invokeExact(buffer);\n          return null;\n        } catch (Throwable t) {\n          return t;\n        }\n      });\n      if (error != null) {\n        throw new IOException(\"Unable to unmap the mapped buffer: \" + resourceDescription, error);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#newBufferCleaner(Class[#],MethodHandle).mjava","pathOld":"/dev/null","sourceNew":"  private static BufferCleaner newBufferCleaner(final Class<?> unmappableBufferClass, final MethodHandle unmapper) {\n    assert Objects.equals(methodType(void.class, ByteBuffer.class), unmapper.type());\n    return (String resourceDescription, ByteBuffer buffer) -> {\n      if (!buffer.isDirect()) {\n        throw new IllegalArgumentException(\"unmapping only works with direct buffers\");\n      }\n      if (!unmappableBufferClass.isInstance(buffer)) {\n        throw new IllegalArgumentException(\"buffer is not an instance of \" + unmappableBufferClass.getName());\n      }\n      final Throwable error = AccessController.doPrivileged((PrivilegedAction<Throwable>) () -> {\n        try {\n          unmapper.invokeExact(buffer);\n          return null;\n        } catch (Throwable t) {\n          return t;\n        }\n      });\n      if (error != null) {\n        throw new IOException(\"Unable to unmap the mapped buffer: \" + resourceDescription, error);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2613a05c615dab2b84745ce1983d2f053fdb4358":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2613a05c615dab2b84745ce1983d2f053fdb4358"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2613a05c615dab2b84745ce1983d2f053fdb4358"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2613a05c615dab2b84745ce1983d2f053fdb4358","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"2613a05c615dab2b84745ce1983d2f053fdb4358":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}