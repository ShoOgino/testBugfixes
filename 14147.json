{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.StringSplitTokenizer#incrementToken().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.StringSplitTokenizer#incrementToken().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.StringSplitTokenizer#incrementToken().mjava","sourceNew":"    @Override\n    public final boolean incrementToken() throws IOException {\n      clearAttributes();      \n      if (upto < tokens.length) {\n        termAtt.setEmpty();\n        termAtt.append(tokens[upto]);\n        upto++;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public final boolean incrementToken() throws IOException {\n      clearAttributes();      \n      if (upto < tokens.length) {\n        termAtt.setEmpty();\n        termAtt.append(tokens[upto]);\n        upto++;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.StringSplitTokenizer#incrementToken().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.StringSplitTokenizer#incrementToken().mjava","sourceNew":"    @Override\n    public final boolean incrementToken() {\n      clearAttributes();      \n      if (upto < tokens.length) {\n        termAtt.setEmpty();\n        termAtt.append(tokens[upto]);\n        upto++;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public final boolean incrementToken() throws IOException {\n      clearAttributes();      \n      if (upto < tokens.length) {\n        termAtt.setEmpty();\n        termAtt.append(tokens[upto]);\n        upto++;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":["46ab5314fa7311a6a5c0d9f4913464fe322a48d5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.StringSplitTokenizer#incrementToken().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.StringSplitTokenizer#incrementToken().mjava","sourceNew":"    @Override\n    public final boolean incrementToken() {\n      clearAttributes();      \n      if (upto < tokens.length) {\n        termAtt.setEmpty();\n        termAtt.append(tokens[upto]);\n        upto++;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public final boolean incrementToken() throws IOException {\n      clearAttributes();      \n      if (upto < tokens.length) {\n        termAtt.setEmpty();\n        termAtt.append(tokens[upto]);\n        upto++;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe39f1a106531207c028defebbc9eb5bb489ac50","date":1592513789,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.StringSplitTokenizer#incrementToken().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.StringSplitTokenizer#incrementToken().mjava","sourceNew":"    @Override\n    public final boolean incrementToken() {\n      clearAttributes();\n      if (upto < tokens.length) {\n        termAtt.setEmpty();\n        termAtt.append(tokens[upto]);\n        upto++;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public final boolean incrementToken() {\n      clearAttributes();      \n      if (upto < tokens.length) {\n        termAtt.setEmpty();\n        termAtt.append(tokens[upto]);\n        upto++;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1182fe36fb5df768dc2da53f6d5338cbc07268ae","date":1592861749,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.StringSplitTokenizer#incrementToken().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.StringSplitTokenizer#incrementToken().mjava","sourceNew":"    @Override\n    public final boolean incrementToken() {\n      clearAttributes();      \n      if (upto < tokens.length) {\n        termAtt.setEmpty();\n        termAtt.append(tokens[upto]);\n        upto++;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public final boolean incrementToken() {\n      clearAttributes();\n      if (upto < tokens.length) {\n        termAtt.setEmpty();\n        termAtt.append(tokens[upto]);\n        upto++;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2a23476693f2bd9a4b44cc3187c429a2e21dac2","date":1593289545,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.StringSplitTokenizer#incrementToken().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.StringSplitTokenizer#incrementToken().mjava","sourceNew":"    @Override\n    public final boolean incrementToken() {\n      clearAttributes();\n      if (upto < tokens.length) {\n        termAtt.setEmpty();\n        termAtt.append(tokens[upto]);\n        upto++;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public final boolean incrementToken() {\n      clearAttributes();      \n      if (upto < tokens.length) {\n        termAtt.setEmpty();\n        termAtt.append(tokens[upto]);\n        upto++;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c2a23476693f2bd9a4b44cc3187c429a2e21dac2":["1182fe36fb5df768dc2da53f6d5338cbc07268ae"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1182fe36fb5df768dc2da53f6d5338cbc07268ae":["fe39f1a106531207c028defebbc9eb5bb489ac50"],"fe39f1a106531207c028defebbc9eb5bb489ac50":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c2a23476693f2bd9a4b44cc3187c429a2e21dac2"]},"commit2Childs":{"c2a23476693f2bd9a4b44cc3187c429a2e21dac2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1182fe36fb5df768dc2da53f6d5338cbc07268ae":["c2a23476693f2bd9a4b44cc3187c429a2e21dac2"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","fe39f1a106531207c028defebbc9eb5bb489ac50"],"fe39f1a106531207c028defebbc9eb5bb489ac50":["1182fe36fb5df768dc2da53f6d5338cbc07268ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}