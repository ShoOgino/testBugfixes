{"path":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","commits":[{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public BlockTreeTermsWriter(\n                              SegmentWriteState state,\n                              PostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock)\n    throws IOException\n  {\n    if (minItemsInBlock <= 1) {\n      throw new IllegalArgumentException(\"minItemsInBlock must be >= 2; got \" + minItemsInBlock);\n    }\n    if (maxItemsInBlock <= 0) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= 1; got \" + maxItemsInBlock);\n    }\n    if (minItemsInBlock > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n    if (2*(minItemsInBlock-1) > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      writeHeader(out);\n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      writeIndexHeader(indexOut);\n\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.start(out);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24230fe54121f9be9d85f2c2067536296785e421","date":1314462346,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","sourceNew":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public BlockTreeTermsWriter(\n                              SegmentWriteState state,\n                              PostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock)\n    throws IOException\n  {\n    if (minItemsInBlock <= 1) {\n      throw new IllegalArgumentException(\"minItemsInBlock must be >= 2; got \" + minItemsInBlock);\n    }\n    if (maxItemsInBlock <= 0) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= 1; got \" + maxItemsInBlock);\n    }\n    if (minItemsInBlock > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n    if (2*(minItemsInBlock-1) > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      writeHeader(out);\n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      writeIndexHeader(indexOut);\n\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.start(out);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","sourceOld":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public BlockTreeTermsWriter(\n                              SegmentWriteState state,\n                              PostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock)\n    throws IOException\n  {\n    if (minItemsInBlock <= 1) {\n      throw new IllegalArgumentException(\"minItemsInBlock must be >= 2; got \" + minItemsInBlock);\n    }\n    if (maxItemsInBlock <= 0) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= 1; got \" + maxItemsInBlock);\n    }\n    if (minItemsInBlock > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n    if (2*(minItemsInBlock-1) > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      writeHeader(out);\n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      writeIndexHeader(indexOut);\n\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.start(out);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","sourceNew":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public BlockTreeTermsWriter(\n                              SegmentWriteState state,\n                              PostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock)\n    throws IOException\n  {\n    if (minItemsInBlock <= 1) {\n      throw new IllegalArgumentException(\"minItemsInBlock must be >= 2; got \" + minItemsInBlock);\n    }\n    if (maxItemsInBlock <= 0) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= 1; got \" + maxItemsInBlock);\n    }\n    if (minItemsInBlock > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n    if (2*(minItemsInBlock-1) > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      writeHeader(out);\n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      writeIndexHeader(indexOut);\n\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.start(out);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","sourceOld":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public BlockTreeTermsWriter(\n                              SegmentWriteState state,\n                              PostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock)\n    throws IOException\n  {\n    if (minItemsInBlock <= 1) {\n      throw new IllegalArgumentException(\"minItemsInBlock must be >= 2; got \" + minItemsInBlock);\n    }\n    if (maxItemsInBlock <= 0) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= 1; got \" + maxItemsInBlock);\n    }\n    if (minItemsInBlock > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n    if (2*(minItemsInBlock-1) > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      writeHeader(out);\n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      writeIndexHeader(indexOut);\n\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.start(out);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsWriter#BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","sourceNew":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public BlockTreeTermsWriter(\n                              SegmentWriteState state,\n                              PostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock)\n    throws IOException\n  {\n    if (minItemsInBlock <= 1) {\n      throw new IllegalArgumentException(\"minItemsInBlock must be >= 2; got \" + minItemsInBlock);\n    }\n    if (maxItemsInBlock <= 0) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= 1; got \" + maxItemsInBlock);\n    }\n    if (minItemsInBlock > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n    if (2*(minItemsInBlock-1) > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      writeHeader(out);\n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      writeIndexHeader(indexOut);\n\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.start(out);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","sourceOld":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public BlockTreeTermsWriter(\n                              SegmentWriteState state,\n                              PostingsWriterBase postingsWriter,\n                              int minItemsInBlock,\n                              int maxItemsInBlock)\n    throws IOException\n  {\n    if (minItemsInBlock <= 1) {\n      throw new IllegalArgumentException(\"minItemsInBlock must be >= 2; got \" + minItemsInBlock);\n    }\n    if (maxItemsInBlock <= 0) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= 1; got \" + maxItemsInBlock);\n    }\n    if (minItemsInBlock > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n    if (2*(minItemsInBlock-1) > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      writeHeader(out);\n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      writeIndexHeader(indexOut);\n\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.start(out);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24230fe54121f9be9d85f2c2067536296785e421":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"60ba444201d2570214b6fcf1d15600dc1a01f548":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7b91922b55d15444d554721b352861d028eb8278":["24230fe54121f9be9d85f2c2067536296785e421"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"24230fe54121f9be9d85f2c2067536296785e421":["7b91922b55d15444d554721b352861d028eb8278"],"60ba444201d2570214b6fcf1d15600dc1a01f548":["24230fe54121f9be9d85f2c2067536296785e421"],"7b91922b55d15444d554721b352861d028eb8278":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}