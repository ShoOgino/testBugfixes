{"path":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean],MergeContext).mjava","commits":[{"id":"1d28f215464f76024caf026606f8ea51a5319c53","date":1527226629,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean],MergeContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean],IndexWriter).mjava","sourceNew":"  /**\n   * Determine what set of merge operations is necessary in\n   * order to merge to {@code <=} the specified segment count. {@link IndexWriter} calls this when its\n   * {@link IndexWriter#forceMerge} method is called. This call is always\n   * synchronized on the {@link IndexWriter} instance so only one thread at a\n   * time will call this method.\n   *  @param segmentInfos\n   *          the total set of segments in the index\n   * @param maxSegmentCount\n   *          requested maximum number of segments in the index (currently this\n   *          is always 1)\n   * @param segmentsToMerge\n *          contains the specific SegmentInfo instances that must be merged\n *          away. This may be a subset of all\n *          SegmentInfos.  If the value is True for a\n *          given SegmentInfo, that means this segment was\n *          an original segment present in the\n *          to-be-merged index; else, it was a segment\n *          produced by a cascaded merge.\n   * @param mergeContext the IndexWriter to find the merges on\n   */\n  public abstract MergeSpecification findForcedMerges(\n      SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge, MergeContext mergeContext)\n      throws IOException;\n\n","sourceOld":"  /**\n   * Determine what set of merge operations is necessary in\n   * order to merge to {@code <=} the specified segment count. {@link IndexWriter} calls this when its\n   * {@link IndexWriter#forceMerge} method is called. This call is always\n   * synchronized on the {@link IndexWriter} instance so only one thread at a\n   * time will call this method.\n   * \n   * @param segmentInfos\n   *          the total set of segments in the index\n   * @param maxSegmentCount\n   *          requested maximum number of segments in the index (currently this\n   *          is always 1)\n   * @param segmentsToMerge\n   *          contains the specific SegmentInfo instances that must be merged\n   *          away. This may be a subset of all\n   *          SegmentInfos.  If the value is True for a\n   *          given SegmentInfo, that means this segment was\n   *          an original segment present in the\n   *          to-be-merged index; else, it was a segment\n   *          produced by a cascaded merge.\n   * @param writer the IndexWriter to find the merges on\n   */\n  public abstract MergeSpecification findForcedMerges(\n          SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge, IndexWriter writer)\n      throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81819c5a4a660afd353042c67106e682bb877cf1","date":1583169587,"type":3,"author":"msfroh","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean],MergeContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean],MergeContext).mjava","sourceNew":"  /**\n   * Determine what set of merge operations is necessary in\n   * order to merge to {@code <=} the specified segment count. {@link IndexWriter} calls this when its\n   * {@link IndexWriter#forceMerge} method is called. This call is always\n   * synchronized on the {@link IndexWriter} instance so only one thread at a\n   * time will call this method.\n   *  @param segmentInfos\n   *          the total set of segments in the index\n   * @param maxSegmentCount\n   *          requested maximum number of segments in the index (currently this\n   *          is always 1)\n   * @param segmentsToMerge\n *          contains the specific SegmentInfo instances that must be merged\n *          away. This may be a subset of all\n *          SegmentInfos.  If the value is True for a\n *          given SegmentInfo, that means this segment was\n *          an original segment present in the\n *          to-be-merged index; else, it was a segment\n *          produced by a cascaded merge.\n   * @param mergeContext the MergeContext to find the merges on\n   */\n  public abstract MergeSpecification findForcedMerges(\n      SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge, MergeContext mergeContext)\n      throws IOException;\n\n","sourceOld":"  /**\n   * Determine what set of merge operations is necessary in\n   * order to merge to {@code <=} the specified segment count. {@link IndexWriter} calls this when its\n   * {@link IndexWriter#forceMerge} method is called. This call is always\n   * synchronized on the {@link IndexWriter} instance so only one thread at a\n   * time will call this method.\n   *  @param segmentInfos\n   *          the total set of segments in the index\n   * @param maxSegmentCount\n   *          requested maximum number of segments in the index (currently this\n   *          is always 1)\n   * @param segmentsToMerge\n *          contains the specific SegmentInfo instances that must be merged\n *          away. This may be a subset of all\n *          SegmentInfos.  If the value is True for a\n *          given SegmentInfo, that means this segment was\n *          an original segment present in the\n *          to-be-merged index; else, it was a segment\n *          produced by a cascaded merge.\n   * @param mergeContext the IndexWriter to find the merges on\n   */\n  public abstract MergeSpecification findForcedMerges(\n      SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge, MergeContext mergeContext)\n      throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba192a321314de8edbe20b279eee9c471b16b48b","date":1583706474,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean],MergeContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean],MergeContext).mjava","sourceNew":"  /**\n   * Determine what set of merge operations is necessary in\n   * order to merge to {@code <=} the specified segment count. {@link IndexWriter} calls this when its\n   * {@link IndexWriter#forceMerge} method is called. This call is always\n   * synchronized on the {@link IndexWriter} instance so only one thread at a\n   * time will call this method.\n   *  @param segmentInfos\n   *          the total set of segments in the index\n   * @param maxSegmentCount\n   *          requested maximum number of segments in the index (currently this\n   *          is always 1)\n   * @param segmentsToMerge\n *          contains the specific SegmentInfo instances that must be merged\n *          away. This may be a subset of all\n *          SegmentInfos.  If the value is True for a\n *          given SegmentInfo, that means this segment was\n *          an original segment present in the\n *          to-be-merged index; else, it was a segment\n *          produced by a cascaded merge.\n   * @param mergeContext the IndexWriter to find the merges on\n   */\n  public abstract MergeSpecification findForcedMerges(\n      SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge, MergeContext mergeContext)\n      throws IOException;\n\n","sourceOld":"  /**\n   * Determine what set of merge operations is necessary in\n   * order to merge to {@code <=} the specified segment count. {@link IndexWriter} calls this when its\n   * {@link IndexWriter#forceMerge} method is called. This call is always\n   * synchronized on the {@link IndexWriter} instance so only one thread at a\n   * time will call this method.\n   *  @param segmentInfos\n   *          the total set of segments in the index\n   * @param maxSegmentCount\n   *          requested maximum number of segments in the index (currently this\n   *          is always 1)\n   * @param segmentsToMerge\n *          contains the specific SegmentInfo instances that must be merged\n *          away. This may be a subset of all\n *          SegmentInfos.  If the value is True for a\n *          given SegmentInfo, that means this segment was\n *          an original segment present in the\n *          to-be-merged index; else, it was a segment\n *          produced by a cascaded merge.\n   * @param mergeContext the MergeContext to find the merges on\n   */\n  public abstract MergeSpecification findForcedMerges(\n      SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge, MergeContext mergeContext)\n      throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe39f1a106531207c028defebbc9eb5bb489ac50","date":1592513789,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean],MergeContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean],MergeContext).mjava","sourceNew":"  /**\n   * Determine what set of merge operations is necessary in\n   * order to merge to {@code <=} the specified segment count. {@link IndexWriter} calls this when its\n   * {@link IndexWriter#forceMerge} method is called. This call is always\n   * synchronized on the {@link IndexWriter} instance so only one thread at a\n   * time will call this method.\n   *  @param segmentInfos\n   *          the total set of segments in the index\n   * @param maxSegmentCount\n   *          requested maximum number of segments in the index (currently this\n   *          is always 1)\n   * @param segmentsToMerge\n *          contains the specific SegmentInfo instances that must be merged\n *          away. This may be a subset of all\n *          SegmentInfos.  If the value is True for a\n *          given SegmentInfo, that means this segment was\n *          an original segment present in the\n *          to-be-merged index; else, it was a segment\n *          produced by a cascaded merge.\n   * @param mergeContext the MergeContext to find the merges on\n   */\n  public abstract MergeSpecification findForcedMerges(\n      SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge, MergeContext mergeContext)\n      throws IOException;\n\n","sourceOld":"  /**\n   * Determine what set of merge operations is necessary in\n   * order to merge to {@code <=} the specified segment count. {@link IndexWriter} calls this when its\n   * {@link IndexWriter#forceMerge} method is called. This call is always\n   * synchronized on the {@link IndexWriter} instance so only one thread at a\n   * time will call this method.\n   *  @param segmentInfos\n   *          the total set of segments in the index\n   * @param maxSegmentCount\n   *          requested maximum number of segments in the index (currently this\n   *          is always 1)\n   * @param segmentsToMerge\n *          contains the specific SegmentInfo instances that must be merged\n *          away. This may be a subset of all\n *          SegmentInfos.  If the value is True for a\n *          given SegmentInfo, that means this segment was\n *          an original segment present in the\n *          to-be-merged index; else, it was a segment\n *          produced by a cascaded merge.\n   * @param mergeContext the IndexWriter to find the merges on\n   */\n  public abstract MergeSpecification findForcedMerges(\n      SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge, MergeContext mergeContext)\n      throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1182fe36fb5df768dc2da53f6d5338cbc07268ae","date":1592861749,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean],MergeContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean],MergeContext).mjava","sourceNew":"  /**\n   * Determine what set of merge operations is necessary in\n   * order to merge to {@code <=} the specified segment count. {@link IndexWriter} calls this when its\n   * {@link IndexWriter#forceMerge} method is called. This call is always\n   * synchronized on the {@link IndexWriter} instance so only one thread at a\n   * time will call this method.\n   *  @param segmentInfos\n   *          the total set of segments in the index\n   * @param maxSegmentCount\n   *          requested maximum number of segments in the index (currently this\n   *          is always 1)\n   * @param segmentsToMerge\n *          contains the specific SegmentInfo instances that must be merged\n *          away. This may be a subset of all\n *          SegmentInfos.  If the value is True for a\n *          given SegmentInfo, that means this segment was\n *          an original segment present in the\n *          to-be-merged index; else, it was a segment\n *          produced by a cascaded merge.\n   * @param mergeContext the IndexWriter to find the merges on\n   */\n  public abstract MergeSpecification findForcedMerges(\n      SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge, MergeContext mergeContext)\n      throws IOException;\n\n","sourceOld":"  /**\n   * Determine what set of merge operations is necessary in\n   * order to merge to {@code <=} the specified segment count. {@link IndexWriter} calls this when its\n   * {@link IndexWriter#forceMerge} method is called. This call is always\n   * synchronized on the {@link IndexWriter} instance so only one thread at a\n   * time will call this method.\n   *  @param segmentInfos\n   *          the total set of segments in the index\n   * @param maxSegmentCount\n   *          requested maximum number of segments in the index (currently this\n   *          is always 1)\n   * @param segmentsToMerge\n *          contains the specific SegmentInfo instances that must be merged\n *          away. This may be a subset of all\n *          SegmentInfos.  If the value is True for a\n *          given SegmentInfo, that means this segment was\n *          an original segment present in the\n *          to-be-merged index; else, it was a segment\n *          produced by a cascaded merge.\n   * @param mergeContext the MergeContext to find the merges on\n   */\n  public abstract MergeSpecification findForcedMerges(\n      SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge, MergeContext mergeContext)\n      throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2a23476693f2bd9a4b44cc3187c429a2e21dac2","date":1593289545,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean],MergeContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean],MergeContext).mjava","sourceNew":"  /**\n   * Determine what set of merge operations is necessary in\n   * order to merge to {@code <=} the specified segment count. {@link IndexWriter} calls this when its\n   * {@link IndexWriter#forceMerge} method is called. This call is always\n   * synchronized on the {@link IndexWriter} instance so only one thread at a\n   * time will call this method.\n   *  @param segmentInfos\n   *          the total set of segments in the index\n   * @param maxSegmentCount\n   *          requested maximum number of segments in the index (currently this\n   *          is always 1)\n   * @param segmentsToMerge\n *          contains the specific SegmentInfo instances that must be merged\n *          away. This may be a subset of all\n *          SegmentInfos.  If the value is True for a\n *          given SegmentInfo, that means this segment was\n *          an original segment present in the\n *          to-be-merged index; else, it was a segment\n *          produced by a cascaded merge.\n   * @param mergeContext the MergeContext to find the merges on\n   */\n  public abstract MergeSpecification findForcedMerges(\n      SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge, MergeContext mergeContext)\n      throws IOException;\n\n","sourceOld":"  /**\n   * Determine what set of merge operations is necessary in\n   * order to merge to {@code <=} the specified segment count. {@link IndexWriter} calls this when its\n   * {@link IndexWriter#forceMerge} method is called. This call is always\n   * synchronized on the {@link IndexWriter} instance so only one thread at a\n   * time will call this method.\n   *  @param segmentInfos\n   *          the total set of segments in the index\n   * @param maxSegmentCount\n   *          requested maximum number of segments in the index (currently this\n   *          is always 1)\n   * @param segmentsToMerge\n *          contains the specific SegmentInfo instances that must be merged\n *          away. This may be a subset of all\n *          SegmentInfos.  If the value is True for a\n *          given SegmentInfo, that means this segment was\n *          an original segment present in the\n *          to-be-merged index; else, it was a segment\n *          produced by a cascaded merge.\n   * @param mergeContext the IndexWriter to find the merges on\n   */\n  public abstract MergeSpecification findForcedMerges(\n      SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge, MergeContext mergeContext)\n      throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba192a321314de8edbe20b279eee9c471b16b48b":["81819c5a4a660afd353042c67106e682bb877cf1"],"c2a23476693f2bd9a4b44cc3187c429a2e21dac2":["1182fe36fb5df768dc2da53f6d5338cbc07268ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d28f215464f76024caf026606f8ea51a5319c53":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"81819c5a4a660afd353042c67106e682bb877cf1":["1d28f215464f76024caf026606f8ea51a5319c53"],"1182fe36fb5df768dc2da53f6d5338cbc07268ae":["fe39f1a106531207c028defebbc9eb5bb489ac50"],"fe39f1a106531207c028defebbc9eb5bb489ac50":["ba192a321314de8edbe20b279eee9c471b16b48b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c2a23476693f2bd9a4b44cc3187c429a2e21dac2"]},"commit2Childs":{"ba192a321314de8edbe20b279eee9c471b16b48b":["fe39f1a106531207c028defebbc9eb5bb489ac50"],"c2a23476693f2bd9a4b44cc3187c429a2e21dac2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d28f215464f76024caf026606f8ea51a5319c53"],"1d28f215464f76024caf026606f8ea51a5319c53":["81819c5a4a660afd353042c67106e682bb877cf1"],"81819c5a4a660afd353042c67106e682bb877cf1":["ba192a321314de8edbe20b279eee9c471b16b48b"],"1182fe36fb5df768dc2da53f6d5338cbc07268ae":["c2a23476693f2bd9a4b44cc3187c429a2e21dac2"],"fe39f1a106531207c028defebbc9eb5bb489ac50":["1182fe36fb5df768dc2da53f6d5338cbc07268ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}