{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testKnn().mjava","commits":[{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testKnn().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testKnn().mjava","sourceNew":"  @Test\n  public void testKnn() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=setRowLabels(matrix(array(1,1,1,0,0,0),\"+\n        \"                                     array(1,0,0,0,1,1),\"+\n        \"                                     array(0,0,0,1,1,1)), array(row1,row2,row3)),\"+\n        \"               b=array(0,0,0,1,1,1),\"+\n        \"               c=knn(a, b, 2),\"+\n        \"               d=getRowLabels(c),\"+\n        \"               e=getAttributes(c),\" +\n        \"               f=knn(a, b, 2, distance=manhattan),\" +\n        \"               g=getAttributes(f))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n\n    List<List<Number>> knnMatrix = (List<List<Number>>)tuples.get(0).get(\"c\");\n    assertEquals(knnMatrix.size(), 2);\n\n    List<Number> row1 = knnMatrix.get(0);\n    assertEquals(row1.size(), 6);\n    assertEquals(row1.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(3).doubleValue(), 1.0, 0.0);\n    assertEquals(row1.get(4).doubleValue(), 1.0, 0.0);\n    assertEquals(row1.get(5).doubleValue(), 1.0, 0.0);\n\n    List<Number> row2 = knnMatrix.get(1);\n    assertEquals(row2.size(), 6);\n\n    assertEquals(row2.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(row2.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(4).doubleValue(), 1.0, 0.0);\n    assertEquals(row2.get(5).doubleValue(), 1.0, 0.0);\n\n    Map atts = (Map)tuples.get(0).get(\"e\");\n    List<Number> dists = (List<Number>)atts.get(\"distances\");\n    assertEquals(dists.size(), 2);\n    assertEquals(dists.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(dists.get(1).doubleValue(), 1.4142135623730951, 0.0);\n\n    List<String> rowLabels = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(rowLabels.size(), 2);\n    assertEquals(rowLabels.get(0), \"row3\");\n    assertEquals(rowLabels.get(1), \"row2\");\n\n    atts = (Map)tuples.get(0).get(\"g\");\n    dists = (List<Number>)atts.get(\"distances\");\n    assertEquals(dists.size(), 2);\n    assertEquals(dists.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(dists.get(1).doubleValue(), 2.0, 0.0);\n  }\n\n","sourceOld":"  @Test\n  public void testKnn() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=setRowLabels(matrix(array(1,1,1,0,0,0),\"+\n        \"                                     array(1,0,0,0,1,1),\"+\n        \"                                     array(0,0,0,1,1,1)), array(row1,row2,row3)),\"+\n        \"               b=array(0,0,0,1,1,1),\"+\n        \"               c=knn(a, b, 2),\"+\n        \"               d=getRowLabels(c),\"+\n        \"               e=getAttributes(c),\" +\n        \"               f=knn(a, b, 2, distance=manhattan),\" +\n        \"               g=getAttributes(f))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n\n    List<List<Number>> knnMatrix = (List<List<Number>>)tuples.get(0).get(\"c\");\n    assertEquals(knnMatrix.size(), 2);\n\n    List<Number> row1 = knnMatrix.get(0);\n    assertEquals(row1.size(), 6);\n    assertEquals(row1.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(3).doubleValue(), 1.0, 0.0);\n    assertEquals(row1.get(4).doubleValue(), 1.0, 0.0);\n    assertEquals(row1.get(5).doubleValue(), 1.0, 0.0);\n\n    List<Number> row2 = knnMatrix.get(1);\n    assertEquals(row2.size(), 6);\n\n    assertEquals(row2.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(row2.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(4).doubleValue(), 1.0, 0.0);\n    assertEquals(row2.get(5).doubleValue(), 1.0, 0.0);\n\n    Map atts = (Map)tuples.get(0).get(\"e\");\n    List<Number> dists = (List<Number>)atts.get(\"distances\");\n    assertEquals(dists.size(), 2);\n    assertEquals(dists.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(dists.get(1).doubleValue(), 1.4142135623730951, 0.0);\n\n    List<String> rowLabels = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(rowLabels.size(), 2);\n    assertEquals(rowLabels.get(0), \"row3\");\n    assertEquals(rowLabels.get(1), \"row2\");\n\n    atts = (Map)tuples.get(0).get(\"g\");\n    dists = (List<Number>)atts.get(\"distances\");\n    assertEquals(dists.size(), 2);\n    assertEquals(dists.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(dists.get(1).doubleValue(), 2.0, 0.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d0b4707f3bab526e78877bedeebf53368dbc3d7","date":1524706692,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testKnn().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testKnn().mjava","sourceNew":"  @Test\n  public void testKnn() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=setRowLabels(matrix(array(1,1,1,0,0,0),\"+\n        \"                                     array(1,0,0,0,1,1),\"+\n        \"                                     array(0,0,0,1,1,1)), array(row1,row2,row3)),\"+\n        \"               b=array(0,0,0,1,1,1),\"+\n        \"               c=knn(a, b, 2),\"+\n        \"               d=getRowLabels(c),\"+\n        \"               e=getAttributes(c),\" +\n        \"               f=knn(a, b, 2, manhattan()),\" +\n        \"               g=getAttributes(f))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n\n    List<List<Number>> knnMatrix = (List<List<Number>>)tuples.get(0).get(\"c\");\n    assertEquals(knnMatrix.size(), 2);\n\n    List<Number> row1 = knnMatrix.get(0);\n    assertEquals(row1.size(), 6);\n    assertEquals(row1.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(3).doubleValue(), 1.0, 0.0);\n    assertEquals(row1.get(4).doubleValue(), 1.0, 0.0);\n    assertEquals(row1.get(5).doubleValue(), 1.0, 0.0);\n\n    List<Number> row2 = knnMatrix.get(1);\n    assertEquals(row2.size(), 6);\n\n    assertEquals(row2.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(row2.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(4).doubleValue(), 1.0, 0.0);\n    assertEquals(row2.get(5).doubleValue(), 1.0, 0.0);\n\n    Map atts = (Map)tuples.get(0).get(\"e\");\n    List<Number> dists = (List<Number>)atts.get(\"distances\");\n    assertEquals(dists.size(), 2);\n    assertEquals(dists.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(dists.get(1).doubleValue(), 1.4142135623730951, 0.0);\n\n    List<String> rowLabels = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(rowLabels.size(), 2);\n    assertEquals(rowLabels.get(0), \"row3\");\n    assertEquals(rowLabels.get(1), \"row2\");\n\n    atts = (Map)tuples.get(0).get(\"g\");\n    dists = (List<Number>)atts.get(\"distances\");\n    assertEquals(dists.size(), 2);\n    assertEquals(dists.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(dists.get(1).doubleValue(), 2.0, 0.0);\n  }\n\n","sourceOld":"  @Test\n  public void testKnn() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=setRowLabels(matrix(array(1,1,1,0,0,0),\"+\n        \"                                     array(1,0,0,0,1,1),\"+\n        \"                                     array(0,0,0,1,1,1)), array(row1,row2,row3)),\"+\n        \"               b=array(0,0,0,1,1,1),\"+\n        \"               c=knn(a, b, 2),\"+\n        \"               d=getRowLabels(c),\"+\n        \"               e=getAttributes(c),\" +\n        \"               f=knn(a, b, 2, distance=manhattan),\" +\n        \"               g=getAttributes(f))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n\n    List<List<Number>> knnMatrix = (List<List<Number>>)tuples.get(0).get(\"c\");\n    assertEquals(knnMatrix.size(), 2);\n\n    List<Number> row1 = knnMatrix.get(0);\n    assertEquals(row1.size(), 6);\n    assertEquals(row1.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(3).doubleValue(), 1.0, 0.0);\n    assertEquals(row1.get(4).doubleValue(), 1.0, 0.0);\n    assertEquals(row1.get(5).doubleValue(), 1.0, 0.0);\n\n    List<Number> row2 = knnMatrix.get(1);\n    assertEquals(row2.size(), 6);\n\n    assertEquals(row2.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(row2.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(4).doubleValue(), 1.0, 0.0);\n    assertEquals(row2.get(5).doubleValue(), 1.0, 0.0);\n\n    Map atts = (Map)tuples.get(0).get(\"e\");\n    List<Number> dists = (List<Number>)atts.get(\"distances\");\n    assertEquals(dists.size(), 2);\n    assertEquals(dists.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(dists.get(1).doubleValue(), 1.4142135623730951, 0.0);\n\n    List<String> rowLabels = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(rowLabels.size(), 2);\n    assertEquals(rowLabels.get(0), \"row3\");\n    assertEquals(rowLabels.get(1), \"row2\");\n\n    atts = (Map)tuples.get(0).get(\"g\");\n    dists = (List<Number>)atts.get(\"distances\");\n    assertEquals(dists.size(), 2);\n    assertEquals(dists.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(dists.get(1).doubleValue(), 2.0, 0.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"960f089602da7f0df48fb0e23de1ecbc791b95f0","date":1524725963,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testKnn().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testKnn().mjava","sourceNew":"  @Test\n  public void testKnn() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=setRowLabels(matrix(array(1,1,1,0,0,0),\"+\n        \"                                     array(1,0,0,0,1,1),\"+\n        \"                                     array(0,0,0,1,1,1)), array(row1,row2,row3)),\"+\n        \"               b=array(0,0,0,1,1,1),\"+\n        \"               c=knn(a, b, 2),\"+\n        \"               d=getRowLabels(c),\"+\n        \"               e=getAttributes(c),\" +\n        \"               f=knn(a, b, 2, manhattan()),\" +\n        \"               g=getAttributes(f))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n\n    List<List<Number>> knnMatrix = (List<List<Number>>)tuples.get(0).get(\"c\");\n    assertEquals(knnMatrix.size(), 2);\n\n    List<Number> row1 = knnMatrix.get(0);\n    assertEquals(row1.size(), 6);\n    assertEquals(row1.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(3).doubleValue(), 1.0, 0.0);\n    assertEquals(row1.get(4).doubleValue(), 1.0, 0.0);\n    assertEquals(row1.get(5).doubleValue(), 1.0, 0.0);\n\n    List<Number> row2 = knnMatrix.get(1);\n    assertEquals(row2.size(), 6);\n\n    assertEquals(row2.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(row2.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(4).doubleValue(), 1.0, 0.0);\n    assertEquals(row2.get(5).doubleValue(), 1.0, 0.0);\n\n    Map atts = (Map)tuples.get(0).get(\"e\");\n    List<Number> dists = (List<Number>)atts.get(\"distances\");\n    assertEquals(dists.size(), 2);\n    assertEquals(dists.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(dists.get(1).doubleValue(), 1.4142135623730951, 0.0);\n\n    List<String> rowLabels = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(rowLabels.size(), 2);\n    assertEquals(rowLabels.get(0), \"row3\");\n    assertEquals(rowLabels.get(1), \"row2\");\n\n    atts = (Map)tuples.get(0).get(\"g\");\n    dists = (List<Number>)atts.get(\"distances\");\n    assertEquals(dists.size(), 2);\n    assertEquals(dists.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(dists.get(1).doubleValue(), 2.0, 0.0);\n  }\n\n","sourceOld":"  @Test\n  public void testKnn() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=setRowLabels(matrix(array(1,1,1,0,0,0),\"+\n        \"                                     array(1,0,0,0,1,1),\"+\n        \"                                     array(0,0,0,1,1,1)), array(row1,row2,row3)),\"+\n        \"               b=array(0,0,0,1,1,1),\"+\n        \"               c=knn(a, b, 2),\"+\n        \"               d=getRowLabels(c),\"+\n        \"               e=getAttributes(c),\" +\n        \"               f=knn(a, b, 2, distance=manhattan),\" +\n        \"               g=getAttributes(f))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n\n    List<List<Number>> knnMatrix = (List<List<Number>>)tuples.get(0).get(\"c\");\n    assertEquals(knnMatrix.size(), 2);\n\n    List<Number> row1 = knnMatrix.get(0);\n    assertEquals(row1.size(), 6);\n    assertEquals(row1.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(3).doubleValue(), 1.0, 0.0);\n    assertEquals(row1.get(4).doubleValue(), 1.0, 0.0);\n    assertEquals(row1.get(5).doubleValue(), 1.0, 0.0);\n\n    List<Number> row2 = knnMatrix.get(1);\n    assertEquals(row2.size(), 6);\n\n    assertEquals(row2.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(row2.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(4).doubleValue(), 1.0, 0.0);\n    assertEquals(row2.get(5).doubleValue(), 1.0, 0.0);\n\n    Map atts = (Map)tuples.get(0).get(\"e\");\n    List<Number> dists = (List<Number>)atts.get(\"distances\");\n    assertEquals(dists.size(), 2);\n    assertEquals(dists.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(dists.get(1).doubleValue(), 1.4142135623730951, 0.0);\n\n    List<String> rowLabels = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(rowLabels.size(), 2);\n    assertEquals(rowLabels.get(0), \"row3\");\n    assertEquals(rowLabels.get(1), \"row2\");\n\n    atts = (Map)tuples.get(0).get(\"g\");\n    dists = (List<Number>)atts.get(\"distances\");\n    assertEquals(dists.size(), 2);\n    assertEquals(dists.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(dists.get(1).doubleValue(), 2.0, 0.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35cc45f54fe95a5534e02f9b8ca2a54af211ded5","date":1564774706,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testKnn().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testKnn().mjava","sourceNew":"  @Test\n  public void testKnn() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=setRowLabels(matrix(array(1,1,1,0,0,0),\"+\n        \"                                     array(1,0,0,0,1,1),\"+\n        \"                                     array(0,0,0,1,1,1)), array(\\\"row1\\\",\\\"row2\\\",\\\"row3\\\")),\"+\n        \"               b=array(0,0,0,1,1,1),\"+\n        \"               c=knn(a, b, 2),\"+\n        \"               d=getRowLabels(c),\"+\n        \"               e=getAttributes(c),\" +\n        \"               f=knn(a, b, 2, manhattan()),\" +\n        \"               g=getAttributes(f))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n\n    List<List<Number>> knnMatrix = (List<List<Number>>)tuples.get(0).get(\"c\");\n    assertEquals(knnMatrix.size(), 2);\n\n    List<Number> row1 = knnMatrix.get(0);\n    assertEquals(row1.size(), 6);\n    assertEquals(row1.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(3).doubleValue(), 1.0, 0.0);\n    assertEquals(row1.get(4).doubleValue(), 1.0, 0.0);\n    assertEquals(row1.get(5).doubleValue(), 1.0, 0.0);\n\n    List<Number> row2 = knnMatrix.get(1);\n    assertEquals(row2.size(), 6);\n\n    assertEquals(row2.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(row2.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(4).doubleValue(), 1.0, 0.0);\n    assertEquals(row2.get(5).doubleValue(), 1.0, 0.0);\n\n    Map atts = (Map)tuples.get(0).get(\"e\");\n    List<Number> dists = (List<Number>)atts.get(\"distances\");\n    assertEquals(dists.size(), 2);\n    assertEquals(dists.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(dists.get(1).doubleValue(), 1.4142135623730951, 0.0);\n\n    List<String> rowLabels = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(rowLabels.size(), 2);\n    assertEquals(rowLabels.get(0), \"row3\");\n    assertEquals(rowLabels.get(1), \"row2\");\n\n    atts = (Map)tuples.get(0).get(\"g\");\n    dists = (List<Number>)atts.get(\"distances\");\n    assertEquals(dists.size(), 2);\n    assertEquals(dists.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(dists.get(1).doubleValue(), 2.0, 0.0);\n  }\n\n","sourceOld":"  @Test\n  public void testKnn() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=setRowLabels(matrix(array(1,1,1,0,0,0),\"+\n        \"                                     array(1,0,0,0,1,1),\"+\n        \"                                     array(0,0,0,1,1,1)), array(row1,row2,row3)),\"+\n        \"               b=array(0,0,0,1,1,1),\"+\n        \"               c=knn(a, b, 2),\"+\n        \"               d=getRowLabels(c),\"+\n        \"               e=getAttributes(c),\" +\n        \"               f=knn(a, b, 2, manhattan()),\" +\n        \"               g=getAttributes(f))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n\n    List<List<Number>> knnMatrix = (List<List<Number>>)tuples.get(0).get(\"c\");\n    assertEquals(knnMatrix.size(), 2);\n\n    List<Number> row1 = knnMatrix.get(0);\n    assertEquals(row1.size(), 6);\n    assertEquals(row1.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(3).doubleValue(), 1.0, 0.0);\n    assertEquals(row1.get(4).doubleValue(), 1.0, 0.0);\n    assertEquals(row1.get(5).doubleValue(), 1.0, 0.0);\n\n    List<Number> row2 = knnMatrix.get(1);\n    assertEquals(row2.size(), 6);\n\n    assertEquals(row2.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(row2.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(4).doubleValue(), 1.0, 0.0);\n    assertEquals(row2.get(5).doubleValue(), 1.0, 0.0);\n\n    Map atts = (Map)tuples.get(0).get(\"e\");\n    List<Number> dists = (List<Number>)atts.get(\"distances\");\n    assertEquals(dists.size(), 2);\n    assertEquals(dists.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(dists.get(1).doubleValue(), 1.4142135623730951, 0.0);\n\n    List<String> rowLabels = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(rowLabels.size(), 2);\n    assertEquals(rowLabels.get(0), \"row3\");\n    assertEquals(rowLabels.get(1), \"row2\");\n\n    atts = (Map)tuples.get(0).get(\"g\");\n    dists = (List<Number>)atts.get(\"distances\");\n    assertEquals(dists.size(), 2);\n    assertEquals(dists.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(dists.get(1).doubleValue(), 2.0, 0.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testKnn().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testKnn().mjava","sourceNew":"  @Test\n  public void testKnn() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=setRowLabels(matrix(array(1,1,1,0,0,0),\"+\n        \"                                     array(1,0,0,0,1,1),\"+\n        \"                                     array(0,0,0,1,1,1)), array(\\\"row1\\\",\\\"row2\\\",\\\"row3\\\")),\"+\n        \"               b=array(0,0,0,1,1,1),\"+\n        \"               c=knn(a, b, 2),\"+\n        \"               d=getRowLabels(c),\"+\n        \"               e=getAttributes(c),\" +\n        \"               f=knn(a, b, 2, manhattan()),\" +\n        \"               g=getAttributes(f))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n\n    List<List<Number>> knnMatrix = (List<List<Number>>)tuples.get(0).get(\"c\");\n    assertEquals(knnMatrix.size(), 2);\n\n    List<Number> row1 = knnMatrix.get(0);\n    assertEquals(row1.size(), 6);\n    assertEquals(row1.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(3).doubleValue(), 1.0, 0.0);\n    assertEquals(row1.get(4).doubleValue(), 1.0, 0.0);\n    assertEquals(row1.get(5).doubleValue(), 1.0, 0.0);\n\n    List<Number> row2 = knnMatrix.get(1);\n    assertEquals(row2.size(), 6);\n\n    assertEquals(row2.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(row2.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(4).doubleValue(), 1.0, 0.0);\n    assertEquals(row2.get(5).doubleValue(), 1.0, 0.0);\n\n    Map atts = (Map)tuples.get(0).get(\"e\");\n    List<Number> dists = (List<Number>)atts.get(\"distances\");\n    assertEquals(dists.size(), 2);\n    assertEquals(dists.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(dists.get(1).doubleValue(), 1.4142135623730951, 0.0);\n\n    List<String> rowLabels = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(rowLabels.size(), 2);\n    assertEquals(rowLabels.get(0), \"row3\");\n    assertEquals(rowLabels.get(1), \"row2\");\n\n    atts = (Map)tuples.get(0).get(\"g\");\n    dists = (List<Number>)atts.get(\"distances\");\n    assertEquals(dists.size(), 2);\n    assertEquals(dists.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(dists.get(1).doubleValue(), 2.0, 0.0);\n  }\n\n","sourceOld":"  @Test\n  public void testKnn() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=setRowLabels(matrix(array(1,1,1,0,0,0),\"+\n        \"                                     array(1,0,0,0,1,1),\"+\n        \"                                     array(0,0,0,1,1,1)), array(row1,row2,row3)),\"+\n        \"               b=array(0,0,0,1,1,1),\"+\n        \"               c=knn(a, b, 2),\"+\n        \"               d=getRowLabels(c),\"+\n        \"               e=getAttributes(c),\" +\n        \"               f=knn(a, b, 2, manhattan()),\" +\n        \"               g=getAttributes(f))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n\n    List<List<Number>> knnMatrix = (List<List<Number>>)tuples.get(0).get(\"c\");\n    assertEquals(knnMatrix.size(), 2);\n\n    List<Number> row1 = knnMatrix.get(0);\n    assertEquals(row1.size(), 6);\n    assertEquals(row1.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(3).doubleValue(), 1.0, 0.0);\n    assertEquals(row1.get(4).doubleValue(), 1.0, 0.0);\n    assertEquals(row1.get(5).doubleValue(), 1.0, 0.0);\n\n    List<Number> row2 = knnMatrix.get(1);\n    assertEquals(row2.size(), 6);\n\n    assertEquals(row2.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(row2.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(4).doubleValue(), 1.0, 0.0);\n    assertEquals(row2.get(5).doubleValue(), 1.0, 0.0);\n\n    Map atts = (Map)tuples.get(0).get(\"e\");\n    List<Number> dists = (List<Number>)atts.get(\"distances\");\n    assertEquals(dists.size(), 2);\n    assertEquals(dists.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(dists.get(1).doubleValue(), 1.4142135623730951, 0.0);\n\n    List<String> rowLabels = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(rowLabels.size(), 2);\n    assertEquals(rowLabels.get(0), \"row3\");\n    assertEquals(rowLabels.get(1), \"row2\");\n\n    atts = (Map)tuples.get(0).get(\"g\");\n    dists = (List<Number>)atts.get(\"distances\");\n    assertEquals(dists.size(), 2);\n    assertEquals(dists.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(dists.get(1).doubleValue(), 2.0, 0.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testKnn().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testKnn().mjava","sourceNew":"  @Test\n  public void testKnn() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=setRowLabels(matrix(array(1,1,1,0,0,0),\"+\n        \"                                     array(1,0,0,0,1,1),\"+\n        \"                                     array(0,0,0,1,1,1)), array(\\\"row1\\\",\\\"row2\\\",\\\"row3\\\")),\"+\n        \"               b=array(0,0,0,1,1,1),\"+\n        \"               c=knn(a, b, 2),\"+\n        \"               d=getRowLabels(c),\"+\n        \"               e=getAttributes(c),\" +\n        \"               f=knn(a, b, 2, manhattan()),\" +\n        \"               g=getAttributes(f))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n\n    List<List<Number>> knnMatrix = (List<List<Number>>)tuples.get(0).get(\"c\");\n    assertEquals(knnMatrix.size(), 2);\n\n    List<Number> row1 = knnMatrix.get(0);\n    assertEquals(row1.size(), 6);\n    assertEquals(row1.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(3).doubleValue(), 1.0, 0.0);\n    assertEquals(row1.get(4).doubleValue(), 1.0, 0.0);\n    assertEquals(row1.get(5).doubleValue(), 1.0, 0.0);\n\n    List<Number> row2 = knnMatrix.get(1);\n    assertEquals(row2.size(), 6);\n\n    assertEquals(row2.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(row2.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(4).doubleValue(), 1.0, 0.0);\n    assertEquals(row2.get(5).doubleValue(), 1.0, 0.0);\n\n    Map atts = (Map)tuples.get(0).get(\"e\");\n    List<Number> dists = (List<Number>)atts.get(\"distances\");\n    assertEquals(dists.size(), 2);\n    assertEquals(dists.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(dists.get(1).doubleValue(), 1.4142135623730951, 0.0);\n\n    List<String> rowLabels = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(rowLabels.size(), 2);\n    assertEquals(rowLabels.get(0), \"row3\");\n    assertEquals(rowLabels.get(1), \"row2\");\n\n    atts = (Map)tuples.get(0).get(\"g\");\n    dists = (List<Number>)atts.get(\"distances\");\n    assertEquals(dists.size(), 2);\n    assertEquals(dists.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(dists.get(1).doubleValue(), 2.0, 0.0);\n  }\n\n","sourceOld":"  @Test\n  public void testKnn() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=setRowLabels(matrix(array(1,1,1,0,0,0),\"+\n        \"                                     array(1,0,0,0,1,1),\"+\n        \"                                     array(0,0,0,1,1,1)), array(row1,row2,row3)),\"+\n        \"               b=array(0,0,0,1,1,1),\"+\n        \"               c=knn(a, b, 2),\"+\n        \"               d=getRowLabels(c),\"+\n        \"               e=getAttributes(c),\" +\n        \"               f=knn(a, b, 2, manhattan()),\" +\n        \"               g=getAttributes(f))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n\n    List<List<Number>> knnMatrix = (List<List<Number>>)tuples.get(0).get(\"c\");\n    assertEquals(knnMatrix.size(), 2);\n\n    List<Number> row1 = knnMatrix.get(0);\n    assertEquals(row1.size(), 6);\n    assertEquals(row1.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(3).doubleValue(), 1.0, 0.0);\n    assertEquals(row1.get(4).doubleValue(), 1.0, 0.0);\n    assertEquals(row1.get(5).doubleValue(), 1.0, 0.0);\n\n    List<Number> row2 = knnMatrix.get(1);\n    assertEquals(row2.size(), 6);\n\n    assertEquals(row2.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(row2.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(4).doubleValue(), 1.0, 0.0);\n    assertEquals(row2.get(5).doubleValue(), 1.0, 0.0);\n\n    Map atts = (Map)tuples.get(0).get(\"e\");\n    List<Number> dists = (List<Number>)atts.get(\"distances\");\n    assertEquals(dists.size(), 2);\n    assertEquals(dists.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(dists.get(1).doubleValue(), 1.4142135623730951, 0.0);\n\n    List<String> rowLabels = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(rowLabels.size(), 2);\n    assertEquals(rowLabels.get(0), \"row3\");\n    assertEquals(rowLabels.get(1), \"row2\");\n\n    atts = (Map)tuples.get(0).get(\"g\");\n    dists = (List<Number>)atts.get(\"distances\");\n    assertEquals(dists.size(), 2);\n    assertEquals(dists.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(dists.get(1).doubleValue(), 2.0, 0.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testKnn().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testKnn().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testKnn() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=setRowLabels(matrix(array(1,1,1,0,0,0),\"+\n        \"                                     array(1,0,0,0,1,1),\"+\n        \"                                     array(0,0,0,1,1,1)), array(\\\"row1\\\",\\\"row2\\\",\\\"row3\\\")),\"+\n        \"               b=array(0,0,0,1,1,1),\"+\n        \"               c=knn(a, b, 2),\"+\n        \"               d=getRowLabels(c),\"+\n        \"               e=getAttributes(c),\" +\n        \"               f=knn(a, b, 2, manhattan()),\" +\n        \"               g=getAttributes(f))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n\n    List<List<Number>> knnMatrix = (List<List<Number>>)tuples.get(0).get(\"c\");\n    assertEquals(knnMatrix.size(), 2);\n\n    List<Number> row1 = knnMatrix.get(0);\n    assertEquals(row1.size(), 6);\n    assertEquals(row1.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(3).doubleValue(), 1.0, 0.0);\n    assertEquals(row1.get(4).doubleValue(), 1.0, 0.0);\n    assertEquals(row1.get(5).doubleValue(), 1.0, 0.0);\n\n    List<Number> row2 = knnMatrix.get(1);\n    assertEquals(row2.size(), 6);\n\n    assertEquals(row2.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(row2.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(4).doubleValue(), 1.0, 0.0);\n    assertEquals(row2.get(5).doubleValue(), 1.0, 0.0);\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map atts = (Map)tuples.get(0).get(\"e\");\n    List<Number> dists = (List<Number>)atts.get(\"distances\");\n    assertEquals(dists.size(), 2);\n    assertEquals(dists.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(dists.get(1).doubleValue(), 1.4142135623730951, 0.0);\n\n    List<String> rowLabels = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(rowLabels.size(), 2);\n    assertEquals(rowLabels.get(0), \"row3\");\n    assertEquals(rowLabels.get(1), \"row2\");\n\n    atts = (Map)tuples.get(0).get(\"g\");\n    dists = (List<Number>)atts.get(\"distances\");\n    assertEquals(dists.size(), 2);\n    assertEquals(dists.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(dists.get(1).doubleValue(), 2.0, 0.0);\n  }\n\n","sourceOld":"  @Test\n  public void testKnn() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=setRowLabels(matrix(array(1,1,1,0,0,0),\"+\n        \"                                     array(1,0,0,0,1,1),\"+\n        \"                                     array(0,0,0,1,1,1)), array(\\\"row1\\\",\\\"row2\\\",\\\"row3\\\")),\"+\n        \"               b=array(0,0,0,1,1,1),\"+\n        \"               c=knn(a, b, 2),\"+\n        \"               d=getRowLabels(c),\"+\n        \"               e=getAttributes(c),\" +\n        \"               f=knn(a, b, 2, manhattan()),\" +\n        \"               g=getAttributes(f))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n\n    List<List<Number>> knnMatrix = (List<List<Number>>)tuples.get(0).get(\"c\");\n    assertEquals(knnMatrix.size(), 2);\n\n    List<Number> row1 = knnMatrix.get(0);\n    assertEquals(row1.size(), 6);\n    assertEquals(row1.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(row1.get(3).doubleValue(), 1.0, 0.0);\n    assertEquals(row1.get(4).doubleValue(), 1.0, 0.0);\n    assertEquals(row1.get(5).doubleValue(), 1.0, 0.0);\n\n    List<Number> row2 = knnMatrix.get(1);\n    assertEquals(row2.size(), 6);\n\n    assertEquals(row2.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(row2.get(1).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(2).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(3).doubleValue(), 0.0, 0.0);\n    assertEquals(row2.get(4).doubleValue(), 1.0, 0.0);\n    assertEquals(row2.get(5).doubleValue(), 1.0, 0.0);\n\n    Map atts = (Map)tuples.get(0).get(\"e\");\n    List<Number> dists = (List<Number>)atts.get(\"distances\");\n    assertEquals(dists.size(), 2);\n    assertEquals(dists.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(dists.get(1).doubleValue(), 1.4142135623730951, 0.0);\n\n    List<String> rowLabels = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(rowLabels.size(), 2);\n    assertEquals(rowLabels.get(0), \"row3\");\n    assertEquals(rowLabels.get(1), \"row2\");\n\n    atts = (Map)tuples.get(0).get(\"g\");\n    dists = (List<Number>)atts.get(\"distances\");\n    assertEquals(dists.size(), 2);\n    assertEquals(dists.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(dists.get(1).doubleValue(), 2.0, 0.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["35cc45f54fe95a5534e02f9b8ca2a54af211ded5"],"5d0b4707f3bab526e78877bedeebf53368dbc3d7":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"960f089602da7f0df48fb0e23de1ecbc791b95f0":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","5d0b4707f3bab526e78877bedeebf53368dbc3d7"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["960f089602da7f0df48fb0e23de1ecbc791b95f0","35cc45f54fe95a5534e02f9b8ca2a54af211ded5"],"35cc45f54fe95a5534e02f9b8ca2a54af211ded5":["960f089602da7f0df48fb0e23de1ecbc791b95f0"],"f8061ddd97f3352007d927dae445884a6f3d857b":["960f089602da7f0df48fb0e23de1ecbc791b95f0","35cc45f54fe95a5534e02f9b8ca2a54af211ded5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5d0b4707f3bab526e78877bedeebf53368dbc3d7":["960f089602da7f0df48fb0e23de1ecbc791b95f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"960f089602da7f0df48fb0e23de1ecbc791b95f0":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","35cc45f54fe95a5534e02f9b8ca2a54af211ded5","f8061ddd97f3352007d927dae445884a6f3d857b"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"35cc45f54fe95a5534e02f9b8ca2a54af211ded5":["9ba1b632c041956c93c41aa1143d16a567014891","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["5d0b4707f3bab526e78877bedeebf53368dbc3d7","960f089602da7f0df48fb0e23de1ecbc791b95f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}