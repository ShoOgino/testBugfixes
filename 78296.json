{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","sourceNew":"    public void testReadOnly() throws Throwable {\n      RAMDirectory d = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n      \n      writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = r.reopen();\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = r2.reopen();\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.close();\n\n      r3.close();\n    }\n\n","sourceOld":"    public void testReadOnly() throws Throwable {\n      RAMDirectory d = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n      \n      writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = r.reopen();\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = r2.reopen();\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.close();\n\n      r3.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","sourceNew":null,"sourceOld":"    public void testReadOnly() throws Throwable {\n      RAMDirectory d = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n      \n      writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = r.reopen();\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = r2.reopen();\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.close();\n\n      r3.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}