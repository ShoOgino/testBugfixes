{"path":"lucene/core/src/java/org/apache/lucene/index/MergeState#readerToFieldsProducer(LeafReader).mjava","commits":[{"id":"2131047ecceac64b54ba70feec3d26bbd7e483d7","date":1411862069,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergeState#readerToFieldsProducer(LeafReader).mjava","pathOld":"/dev/null","sourceNew":"  private FieldsProducer readerToFieldsProducer(final LeafReader reader) throws IOException {\n    final Fields fields = reader.fields();\n    return new FieldsProducer() {\n      @Override\n      public Iterator<String> iterator() {\n        return fields.iterator();\n      }\n\n      @Override\n      public Terms terms(String field) throws IOException {\n        return fields.terms(field);\n      }\n\n      @Override\n      public int size() {\n        return fields.size();\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n        // We already checkIntegrity the entire reader up front in SegmentMerger\n      }\n\n      @Override\n      public void close() {\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n\n      @Override\n      public Iterable<? extends Accountable> getChildResources() {\n        return Collections.emptyList();\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergeState#readerToFieldsProducer(LeafReader).mjava","pathOld":"/dev/null","sourceNew":"  private FieldsProducer readerToFieldsProducer(final LeafReader reader) throws IOException {\n    final Fields fields = reader.fields();\n    return new FieldsProducer() {\n      @Override\n      public Iterator<String> iterator() {\n        return fields.iterator();\n      }\n\n      @Override\n      public Terms terms(String field) throws IOException {\n        return fields.terms(field);\n      }\n\n      @Override\n      public int size() {\n        return fields.size();\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n        // We already checkIntegrity the entire reader up front in SegmentMerger\n      }\n\n      @Override\n      public void close() {\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n\n      @Override\n      public Iterable<? extends Accountable> getChildResources() {\n        return Collections.emptyList();\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77b61b7fd5934220dbc74abb04287286682bcd1c","date":1416603983,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergeState#readerToFieldsProducer(LeafReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergeState#readerToFieldsProducer(LeafReader).mjava","sourceNew":"  private FieldsProducer readerToFieldsProducer(final LeafReader reader) throws IOException {\n    final Fields fields = reader.fields();\n    return new FieldsProducer() {\n      @Override\n      public Iterator<String> iterator() {\n        return fields.iterator();\n      }\n\n      @Override\n      public Terms terms(String field) throws IOException {\n        return fields.terms(field);\n      }\n\n      @Override\n      public int size() {\n        return fields.size();\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n        // We already checkIntegrity the entire reader up front in SegmentMerger\n      }\n\n      @Override\n      public void close() {\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n    };\n  }\n\n","sourceOld":"  private FieldsProducer readerToFieldsProducer(final LeafReader reader) throws IOException {\n    final Fields fields = reader.fields();\n    return new FieldsProducer() {\n      @Override\n      public Iterator<String> iterator() {\n        return fields.iterator();\n      }\n\n      @Override\n      public Terms terms(String field) throws IOException {\n        return fields.terms(field);\n      }\n\n      @Override\n      public int size() {\n        return fields.size();\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n        // We already checkIntegrity the entire reader up front in SegmentMerger\n      }\n\n      @Override\n      public void close() {\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n\n      @Override\n      public Iterable<? extends Accountable> getChildResources() {\n        return Collections.emptyList();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"505bff044e47a553f461b6f4484d1d08faf4ac85","date":1420728783,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SlowCodecReaderWrapper#readerToFieldsProducer(LeafReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergeState#readerToFieldsProducer(LeafReader).mjava","sourceNew":"  private static FieldsProducer readerToFieldsProducer(final LeafReader reader) throws IOException {\n    final Fields fields = reader.fields();\n    return new FieldsProducer() {\n      @Override\n      public Iterator<String> iterator() {\n        return fields.iterator();\n      }\n\n      @Override\n      public Terms terms(String field) throws IOException {\n        return fields.terms(field);\n      }\n\n      @Override\n      public int size() {\n        return fields.size();\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n        // We already checkIntegrity the entire reader up front\n      }\n\n      @Override\n      public void close() {\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n    };\n  }\n\n","sourceOld":"  private FieldsProducer readerToFieldsProducer(final LeafReader reader) throws IOException {\n    final Fields fields = reader.fields();\n    return new FieldsProducer() {\n      @Override\n      public Iterator<String> iterator() {\n        return fields.iterator();\n      }\n\n      @Override\n      public Terms terms(String field) throws IOException {\n        return fields.terms(field);\n      }\n\n      @Override\n      public int size() {\n        return fields.size();\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n        // We already checkIntegrity the entire reader up front in SegmentMerger\n      }\n\n      @Override\n      public void close() {\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"77b61b7fd5934220dbc74abb04287286682bcd1c":["9bb9a29a5e71a90295f175df8919802993142c9a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2131047ecceac64b54ba70feec3d26bbd7e483d7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2131047ecceac64b54ba70feec3d26bbd7e483d7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"505bff044e47a553f461b6f4484d1d08faf4ac85":["77b61b7fd5934220dbc74abb04287286682bcd1c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["505bff044e47a553f461b6f4484d1d08faf4ac85"]},"commit2Childs":{"77b61b7fd5934220dbc74abb04287286682bcd1c":["505bff044e47a553f461b6f4484d1d08faf4ac85"],"9bb9a29a5e71a90295f175df8919802993142c9a":["77b61b7fd5934220dbc74abb04287286682bcd1c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9bb9a29a5e71a90295f175df8919802993142c9a","2131047ecceac64b54ba70feec3d26bbd7e483d7"],"2131047ecceac64b54ba70feec3d26bbd7e483d7":["9bb9a29a5e71a90295f175df8919802993142c9a"],"505bff044e47a553f461b6f4484d1d08faf4ac85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}