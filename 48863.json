{"path":"contrib/gdata-server/src/gom/java/org/apache/lucene/gdata/gom/core/utils/GOMUtils#buildRfc822Date(long).mjava","commits":[{"id":"ebe0cf7fd7142a4f158b89ac046e386f7cf8a212","date":1166013594,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/gom/java/org/apache/lucene/gdata/gom/core/utils/GOMUtils#buildRfc822Date(long).mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * @param aMillisecondLong\n\t * @return\n\t */\n\tpublic static String buildRfc822Date(long aMillisecondLong) {\n\t\t/*\n\t\t * Rather implement it for a special case as use SDF. SDF is very\n\t\t * expensive to create and not thread safe so it should be synchronized\n\t\t * of pooled\n\t\t */\n\t\tCalendar instance = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));\n\t\tinstance.setTimeInMillis(aMillisecondLong);\n\n\t\tStringBuilder builder = new StringBuilder();\n\t\t// Sun, 06 Aug 2006 00:53:49 +0000\n\t\t// EEE, dd MMM yyyy HH:mm:ss Z\n\n\t\tswitch (instance.get(Calendar.DAY_OF_WEEK)) {\n\t\tcase Calendar.SUNDAY:\n\t\t\tbuilder.append(\"Sun\");\n\t\t\tbreak;\n\t\tcase Calendar.MONDAY:\n\t\t\tbuilder.append(\"Mon\");\n\t\t\tbreak;\n\t\tcase Calendar.TUESDAY:\n\t\t\tbuilder.append(\"Tue\");\n\t\t\tbreak;\n\t\tcase Calendar.WEDNESDAY:\n\t\t\tbuilder.append(\"Wed\");\n\t\t\tbreak;\n\t\tcase Calendar.THURSDAY:\n\t\t\tbuilder.append(\"Thu\");\n\t\t\tbreak;\n\t\tcase Calendar.FRIDAY:\n\t\t\tbuilder.append(\"Fri\");\n\t\t\tbreak;\n\t\tcase Calendar.SATURDAY:\n\t\t\tbuilder.append(\"Sat\");\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t\tbuilder.append(',');\n\t\tbuilder.append(' ');\n\n\t\tint time = 0;\n\t\ttime = instance.get(Calendar.DAY_OF_MONTH);\n\t\tif (time < 10)\n\t\t\tbuilder.append(0);\n\t\tbuilder.append(time);\n\t\tbuilder.append(' ');\n\t\tswitch (instance.get(Calendar.MONTH)) {\n\t\tcase Calendar.JANUARY:\n\t\t\tbuilder.append(\"Jan\");\n\t\t\tbreak;\n\t\tcase Calendar.FEBRUARY:\n\t\t\tbuilder.append(\"Feb\");\n\t\t\tbreak;\n\t\tcase Calendar.MARCH:\n\t\t\tbuilder.append(\"Mar\");\n\t\t\tbreak;\n\t\tcase Calendar.APRIL:\n\t\t\tbuilder.append(\"Apr\");\n\t\t\tbreak;\n\t\tcase Calendar.MAY:\n\t\t\tbuilder.append(\"May\");\n\t\t\tbreak;\n\t\tcase Calendar.JUNE:\n\t\t\tbuilder.append(\"Jun\");\n\t\t\tbreak;\n\t\tcase Calendar.JULY:\n\t\t\tbuilder.append(\"Jul\");\n\t\t\tbreak;\n\t\tcase Calendar.AUGUST:\n\t\t\tbuilder.append(\"Aug\");\n\t\t\tbreak;\n\t\tcase Calendar.SEPTEMBER:\n\t\t\tbuilder.append(\"Sep\");\n\t\t\tbreak;\n\t\tcase Calendar.OCTOBER:\n\t\t\tbuilder.append(\"Oct\");\n\t\t\tbreak;\n\t\tcase Calendar.NOVEMBER:\n\t\t\tbuilder.append(\"Nov\");\n\t\t\tbreak;\n\t\tcase Calendar.DECEMBER:\n\t\t\tbuilder.append(\"Dec\");\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t\tbuilder.append(' ');\n\t\ttime = instance.get(Calendar.YEAR);\n\t\tif (time < 1000)\n\t\t\tbuilder.append(\"0\");\n\t\tif (time < 100)\n\t\t\tbuilder.append(\"0\");\n\t\tif (time < 10)\n\t\t\tbuilder.append(\"0\");\n\t\tbuilder.append(time);\n\t\tbuilder.append(' ');\n\n\t\ttime = instance.get(Calendar.HOUR_OF_DAY);\n\t\tif (time < 10)\n\t\t\tbuilder.append(0);\n\t\tbuilder.append(time);\n\t\tbuilder.append(':');\n\t\ttime = instance.get(Calendar.MINUTE);\n\t\tif (time < 10)\n\t\t\tbuilder.append(0);\n\t\tbuilder.append(time);\n\t\tbuilder.append(':');\n\t\ttime = instance.get(Calendar.SECOND);\n\t\tif (time < 10)\n\t\t\tbuilder.append(0);\n\t\tbuilder.append(time);\n\n\t\t// this is always GMT offset -> 0\n\t\tbuilder.append(\" +0000\");\n\t\treturn builder.toString();\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/gom/src/java/org/apache/lucene/gdata/gom/core/utils/GOMUtils#buildRfc822Date(long).mjava","pathOld":"contrib/gdata-server/src/gom/java/org/apache/lucene/gdata/gom/core/utils/GOMUtils#buildRfc822Date(long).mjava","sourceNew":"\t/**\n\t * @param aMillisecondLong\n\t * @return\n\t */\n\tpublic static String buildRfc822Date(long aMillisecondLong) {\n\t\t/*\n\t\t * Rather implement it for a special case as use SDF. SDF is very\n\t\t * expensive to create and not thread safe so it should be synchronized\n\t\t * of pooled\n\t\t */\n\t\tCalendar instance = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));\n\t\tinstance.setTimeInMillis(aMillisecondLong);\n\n\t\tStringBuilder builder = new StringBuilder();\n\t\t// Sun, 06 Aug 2006 00:53:49 +0000\n\t\t// EEE, dd MMM yyyy HH:mm:ss Z\n\n\t\tswitch (instance.get(Calendar.DAY_OF_WEEK)) {\n\t\tcase Calendar.SUNDAY:\n\t\t\tbuilder.append(\"Sun\");\n\t\t\tbreak;\n\t\tcase Calendar.MONDAY:\n\t\t\tbuilder.append(\"Mon\");\n\t\t\tbreak;\n\t\tcase Calendar.TUESDAY:\n\t\t\tbuilder.append(\"Tue\");\n\t\t\tbreak;\n\t\tcase Calendar.WEDNESDAY:\n\t\t\tbuilder.append(\"Wed\");\n\t\t\tbreak;\n\t\tcase Calendar.THURSDAY:\n\t\t\tbuilder.append(\"Thu\");\n\t\t\tbreak;\n\t\tcase Calendar.FRIDAY:\n\t\t\tbuilder.append(\"Fri\");\n\t\t\tbreak;\n\t\tcase Calendar.SATURDAY:\n\t\t\tbuilder.append(\"Sat\");\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t\tbuilder.append(',');\n\t\tbuilder.append(' ');\n\n\t\tint time = 0;\n\t\ttime = instance.get(Calendar.DAY_OF_MONTH);\n\t\tif (time < 10)\n\t\t\tbuilder.append(0);\n\t\tbuilder.append(time);\n\t\tbuilder.append(' ');\n\t\tswitch (instance.get(Calendar.MONTH)) {\n\t\tcase Calendar.JANUARY:\n\t\t\tbuilder.append(\"Jan\");\n\t\t\tbreak;\n\t\tcase Calendar.FEBRUARY:\n\t\t\tbuilder.append(\"Feb\");\n\t\t\tbreak;\n\t\tcase Calendar.MARCH:\n\t\t\tbuilder.append(\"Mar\");\n\t\t\tbreak;\n\t\tcase Calendar.APRIL:\n\t\t\tbuilder.append(\"Apr\");\n\t\t\tbreak;\n\t\tcase Calendar.MAY:\n\t\t\tbuilder.append(\"May\");\n\t\t\tbreak;\n\t\tcase Calendar.JUNE:\n\t\t\tbuilder.append(\"Jun\");\n\t\t\tbreak;\n\t\tcase Calendar.JULY:\n\t\t\tbuilder.append(\"Jul\");\n\t\t\tbreak;\n\t\tcase Calendar.AUGUST:\n\t\t\tbuilder.append(\"Aug\");\n\t\t\tbreak;\n\t\tcase Calendar.SEPTEMBER:\n\t\t\tbuilder.append(\"Sep\");\n\t\t\tbreak;\n\t\tcase Calendar.OCTOBER:\n\t\t\tbuilder.append(\"Oct\");\n\t\t\tbreak;\n\t\tcase Calendar.NOVEMBER:\n\t\t\tbuilder.append(\"Nov\");\n\t\t\tbreak;\n\t\tcase Calendar.DECEMBER:\n\t\t\tbuilder.append(\"Dec\");\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t\tbuilder.append(' ');\n\t\ttime = instance.get(Calendar.YEAR);\n\t\tif (time < 1000)\n\t\t\tbuilder.append(\"0\");\n\t\tif (time < 100)\n\t\t\tbuilder.append(\"0\");\n\t\tif (time < 10)\n\t\t\tbuilder.append(\"0\");\n\t\tbuilder.append(time);\n\t\tbuilder.append(' ');\n\n\t\ttime = instance.get(Calendar.HOUR_OF_DAY);\n\t\tif (time < 10)\n\t\t\tbuilder.append(0);\n\t\tbuilder.append(time);\n\t\tbuilder.append(':');\n\t\ttime = instance.get(Calendar.MINUTE);\n\t\tif (time < 10)\n\t\t\tbuilder.append(0);\n\t\tbuilder.append(time);\n\t\tbuilder.append(':');\n\t\ttime = instance.get(Calendar.SECOND);\n\t\tif (time < 10)\n\t\t\tbuilder.append(0);\n\t\tbuilder.append(time);\n\n\t\t// this is always GMT offset -> 0\n\t\tbuilder.append(\" +0000\");\n\t\treturn builder.toString();\n\t}\n\n","sourceOld":"\t/**\n\t * @param aMillisecondLong\n\t * @return\n\t */\n\tpublic static String buildRfc822Date(long aMillisecondLong) {\n\t\t/*\n\t\t * Rather implement it for a special case as use SDF. SDF is very\n\t\t * expensive to create and not thread safe so it should be synchronized\n\t\t * of pooled\n\t\t */\n\t\tCalendar instance = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));\n\t\tinstance.setTimeInMillis(aMillisecondLong);\n\n\t\tStringBuilder builder = new StringBuilder();\n\t\t// Sun, 06 Aug 2006 00:53:49 +0000\n\t\t// EEE, dd MMM yyyy HH:mm:ss Z\n\n\t\tswitch (instance.get(Calendar.DAY_OF_WEEK)) {\n\t\tcase Calendar.SUNDAY:\n\t\t\tbuilder.append(\"Sun\");\n\t\t\tbreak;\n\t\tcase Calendar.MONDAY:\n\t\t\tbuilder.append(\"Mon\");\n\t\t\tbreak;\n\t\tcase Calendar.TUESDAY:\n\t\t\tbuilder.append(\"Tue\");\n\t\t\tbreak;\n\t\tcase Calendar.WEDNESDAY:\n\t\t\tbuilder.append(\"Wed\");\n\t\t\tbreak;\n\t\tcase Calendar.THURSDAY:\n\t\t\tbuilder.append(\"Thu\");\n\t\t\tbreak;\n\t\tcase Calendar.FRIDAY:\n\t\t\tbuilder.append(\"Fri\");\n\t\t\tbreak;\n\t\tcase Calendar.SATURDAY:\n\t\t\tbuilder.append(\"Sat\");\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t\tbuilder.append(',');\n\t\tbuilder.append(' ');\n\n\t\tint time = 0;\n\t\ttime = instance.get(Calendar.DAY_OF_MONTH);\n\t\tif (time < 10)\n\t\t\tbuilder.append(0);\n\t\tbuilder.append(time);\n\t\tbuilder.append(' ');\n\t\tswitch (instance.get(Calendar.MONTH)) {\n\t\tcase Calendar.JANUARY:\n\t\t\tbuilder.append(\"Jan\");\n\t\t\tbreak;\n\t\tcase Calendar.FEBRUARY:\n\t\t\tbuilder.append(\"Feb\");\n\t\t\tbreak;\n\t\tcase Calendar.MARCH:\n\t\t\tbuilder.append(\"Mar\");\n\t\t\tbreak;\n\t\tcase Calendar.APRIL:\n\t\t\tbuilder.append(\"Apr\");\n\t\t\tbreak;\n\t\tcase Calendar.MAY:\n\t\t\tbuilder.append(\"May\");\n\t\t\tbreak;\n\t\tcase Calendar.JUNE:\n\t\t\tbuilder.append(\"Jun\");\n\t\t\tbreak;\n\t\tcase Calendar.JULY:\n\t\t\tbuilder.append(\"Jul\");\n\t\t\tbreak;\n\t\tcase Calendar.AUGUST:\n\t\t\tbuilder.append(\"Aug\");\n\t\t\tbreak;\n\t\tcase Calendar.SEPTEMBER:\n\t\t\tbuilder.append(\"Sep\");\n\t\t\tbreak;\n\t\tcase Calendar.OCTOBER:\n\t\t\tbuilder.append(\"Oct\");\n\t\t\tbreak;\n\t\tcase Calendar.NOVEMBER:\n\t\t\tbuilder.append(\"Nov\");\n\t\t\tbreak;\n\t\tcase Calendar.DECEMBER:\n\t\t\tbuilder.append(\"Dec\");\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t\tbuilder.append(' ');\n\t\ttime = instance.get(Calendar.YEAR);\n\t\tif (time < 1000)\n\t\t\tbuilder.append(\"0\");\n\t\tif (time < 100)\n\t\t\tbuilder.append(\"0\");\n\t\tif (time < 10)\n\t\t\tbuilder.append(\"0\");\n\t\tbuilder.append(time);\n\t\tbuilder.append(' ');\n\n\t\ttime = instance.get(Calendar.HOUR_OF_DAY);\n\t\tif (time < 10)\n\t\t\tbuilder.append(0);\n\t\tbuilder.append(time);\n\t\tbuilder.append(':');\n\t\ttime = instance.get(Calendar.MINUTE);\n\t\tif (time < 10)\n\t\t\tbuilder.append(0);\n\t\tbuilder.append(time);\n\t\tbuilder.append(':');\n\t\ttime = instance.get(Calendar.SECOND);\n\t\tif (time < 10)\n\t\t\tbuilder.append(0);\n\t\tbuilder.append(time);\n\n\t\t// this is always GMT offset -> 0\n\t\tbuilder.append(\" +0000\");\n\t\treturn builder.toString();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["ebe0cf7fd7142a4f158b89ac046e386f7cf8a212"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ebe0cf7fd7142a4f158b89ac046e386f7cf8a212":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ebe0cf7fd7142a4f158b89ac046e386f7cf8a212"],"ebe0cf7fd7142a4f158b89ac046e386f7cf8a212":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}