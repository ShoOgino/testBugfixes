{"path":"lucene/demo/src/test/org/apache/lucene/demo/facet/TestMultiCategoryListsFacetsExample#assertExpectedCounts(List[FacetResult],ObjectToIntMap[FacetLabel]).mjava","commits":[{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/demo/src/test/org/apache/lucene/demo/facet/TestMultiCategoryListsFacetsExample#assertExpectedCounts(List[FacetResult],ObjectToIntMap[FacetLabel]).mjava","pathOld":"lucene/demo/src/test/org/apache/lucene/demo/facet/TestMultiCategoryListsFacetsExample#assertExpectedCounts(List[FacetResult],ObjectToIntMap[CategoryPath]).mjava","sourceNew":"  private void assertExpectedCounts(List<FacetResult> facetResults, ObjectToIntMap<FacetLabel> expCounts) {\n    for (FacetResult res : facetResults) {\n      FacetResultNode root = res.getFacetResultNode();\n      for (FacetResultNode node : root.subResults) {\n        assertEquals(\"incorrect count for \" + node.label, expCounts.get(node.label), (int) node.value);\n      }\n    }\n  }\n\n","sourceOld":"  private void assertExpectedCounts(List<FacetResult> facetResults, ObjectToIntMap<CategoryPath> expCounts) {\n    for (FacetResult res : facetResults) {\n      FacetResultNode root = res.getFacetResultNode();\n      for (FacetResultNode node : root.subResults) {\n        assertEquals(\"incorrect count for \" + node.label, expCounts.get(node.label), (int) node.value);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d899affd3c008feba40d1405b7a38972ce2005b4","date":1385469973,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/demo/src/test/org/apache/lucene/demo/facet/TestMultiCategoryListsFacetsExample#assertExpectedCounts(List[FacetResult],ObjectToIntMap[FacetLabel]).mjava","sourceNew":null,"sourceOld":"  private void assertExpectedCounts(List<FacetResult> facetResults, ObjectToIntMap<FacetLabel> expCounts) {\n    for (FacetResult res : facetResults) {\n      FacetResultNode root = res.getFacetResultNode();\n      for (FacetResultNode node : root.subResults) {\n        assertEquals(\"incorrect count for \" + node.label, expCounts.get(node.label), (int) node.value);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d899affd3c008feba40d1405b7a38972ce2005b4":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"d899affd3c008feba40d1405b7a38972ce2005b4":[],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["d899affd3c008feba40d1405b7a38972ce2005b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d899affd3c008feba40d1405b7a38972ce2005b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}