{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#extractFacetInfo(NamedList[Object]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#extractFacetInfo(NamedList[Object]).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/QueryResponse#extractFacetInfo(NamedList[Object]).mjava","sourceNew":"  private void extractFacetInfo( NamedList<Object> info )\n  {\n    // Parse the queries\n    _facetQuery = new LinkedHashMap<String, Integer>();\n    NamedList<Integer> fq = (NamedList<Integer>) info.get( \"facet_queries\" );\n    if (fq != null) {\n      for( Map.Entry<String, Integer> entry : fq ) {\n        _facetQuery.put( entry.getKey(), entry.getValue() );\n      }\n    }\n    \n    // Parse the facet info into fields\n    // TODO?? The list could be <int> or <long>?  If always <long> then we can switch to <Long>\n    NamedList<NamedList<Number>> ff = (NamedList<NamedList<Number>>) info.get( \"facet_fields\" );\n    if( ff != null ) {\n      _facetFields = new ArrayList<FacetField>( ff.size() );\n      _limitingFacets = new ArrayList<FacetField>( ff.size() );\n      \n      long minsize = _results == null ? Long.MAX_VALUE :_results.getNumFound();\n      for( Map.Entry<String,NamedList<Number>> facet : ff ) {\n        FacetField f = new FacetField( facet.getKey() );\n        for( Map.Entry<String, Number> entry : facet.getValue() ) {\n          f.add( entry.getKey(), entry.getValue().longValue() );\n        }\n        \n        _facetFields.add( f );\n        FacetField nl = f.getLimitingFields( minsize );\n        if( nl.getValueCount() > 0 ) {\n          _limitingFacets.add( nl );\n        }\n      }\n    }\n    \n    //Parse date facets\n    NamedList<NamedList<Object>> df = (NamedList<NamedList<Object>>) info.get(\"facet_dates\");\n    if (df != null) {\n      // System.out.println(df);\n      _facetDates = new ArrayList<FacetField>( df.size() );\n      for (Map.Entry<String, NamedList<Object>> facet : df) {\n        // System.out.println(\"Key: \" + facet.getKey() + \" Value: \" + facet.getValue());\n        NamedList<Object> values = facet.getValue();\n        String gap = (String) values.get(\"gap\");\n        Date end = (Date) values.get(\"end\");\n        FacetField f = new FacetField(facet.getKey(), gap, end);\n        \n        for (Map.Entry<String, Object> entry : values)   {\n          try {\n            f.add(entry.getKey(), Long.parseLong(entry.getValue().toString()));\n          } catch (NumberFormatException e) {\n            //Ignore for non-number responses which are already handled above\n          }\n        }\n        \n        _facetDates.add(f);\n      }\n    }\n    \n    //Parse pivot facets\n    NamedList pf = (NamedList) info.get(\"facet_pivot\");\n    if (pf != null) {\n      _facetPivot = new NamedList<List<PivotField>>();\n      for( int i=0; i<pf.size(); i++ ) {\n        _facetPivot.add( pf.getName(i), readPivots( (List<NamedList>)pf.getVal(i) ) );\n      }\n    }\n  }\n\n","sourceOld":"  private void extractFacetInfo( NamedList<Object> info )\n  {\n    // Parse the queries\n    _facetQuery = new LinkedHashMap<String, Integer>();\n    NamedList<Integer> fq = (NamedList<Integer>) info.get( \"facet_queries\" );\n    if (fq != null) {\n      for( Map.Entry<String, Integer> entry : fq ) {\n        _facetQuery.put( entry.getKey(), entry.getValue() );\n      }\n    }\n    \n    // Parse the facet info into fields\n    // TODO?? The list could be <int> or <long>?  If always <long> then we can switch to <Long>\n    NamedList<NamedList<Number>> ff = (NamedList<NamedList<Number>>) info.get( \"facet_fields\" );\n    if( ff != null ) {\n      _facetFields = new ArrayList<FacetField>( ff.size() );\n      _limitingFacets = new ArrayList<FacetField>( ff.size() );\n      \n      long minsize = _results == null ? Long.MAX_VALUE :_results.getNumFound();\n      for( Map.Entry<String,NamedList<Number>> facet : ff ) {\n        FacetField f = new FacetField( facet.getKey() );\n        for( Map.Entry<String, Number> entry : facet.getValue() ) {\n          f.add( entry.getKey(), entry.getValue().longValue() );\n        }\n        \n        _facetFields.add( f );\n        FacetField nl = f.getLimitingFields( minsize );\n        if( nl.getValueCount() > 0 ) {\n          _limitingFacets.add( nl );\n        }\n      }\n    }\n    \n    //Parse date facets\n    NamedList<NamedList<Object>> df = (NamedList<NamedList<Object>>) info.get(\"facet_dates\");\n    if (df != null) {\n      // System.out.println(df);\n      _facetDates = new ArrayList<FacetField>( df.size() );\n      for (Map.Entry<String, NamedList<Object>> facet : df) {\n        // System.out.println(\"Key: \" + facet.getKey() + \" Value: \" + facet.getValue());\n        NamedList<Object> values = facet.getValue();\n        String gap = (String) values.get(\"gap\");\n        Date end = (Date) values.get(\"end\");\n        FacetField f = new FacetField(facet.getKey(), gap, end);\n        \n        for (Map.Entry<String, Object> entry : values)   {\n          try {\n            f.add(entry.getKey(), Long.parseLong(entry.getValue().toString()));\n          } catch (NumberFormatException e) {\n            //Ignore for non-number responses which are already handled above\n          }\n        }\n        \n        _facetDates.add(f);\n      }\n    }\n    \n    //Parse pivot facets\n    NamedList pf = (NamedList) info.get(\"facet_pivot\");\n    if (pf != null) {\n      _facetPivot = new NamedList<List<PivotField>>();\n      for( int i=0; i<pf.size(); i++ ) {\n        _facetPivot.add( pf.getName(i), readPivots( (List<NamedList>)pf.getVal(i) ) );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#extractFacetInfo(NamedList[Object]).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/QueryResponse#extractFacetInfo(NamedList[Object]).mjava","sourceNew":"  private void extractFacetInfo( NamedList<Object> info )\n  {\n    // Parse the queries\n    _facetQuery = new LinkedHashMap<String, Integer>();\n    NamedList<Integer> fq = (NamedList<Integer>) info.get( \"facet_queries\" );\n    if (fq != null) {\n      for( Map.Entry<String, Integer> entry : fq ) {\n        _facetQuery.put( entry.getKey(), entry.getValue() );\n      }\n    }\n    \n    // Parse the facet info into fields\n    // TODO?? The list could be <int> or <long>?  If always <long> then we can switch to <Long>\n    NamedList<NamedList<Number>> ff = (NamedList<NamedList<Number>>) info.get( \"facet_fields\" );\n    if( ff != null ) {\n      _facetFields = new ArrayList<FacetField>( ff.size() );\n      _limitingFacets = new ArrayList<FacetField>( ff.size() );\n      \n      long minsize = _results == null ? Long.MAX_VALUE :_results.getNumFound();\n      for( Map.Entry<String,NamedList<Number>> facet : ff ) {\n        FacetField f = new FacetField( facet.getKey() );\n        for( Map.Entry<String, Number> entry : facet.getValue() ) {\n          f.add( entry.getKey(), entry.getValue().longValue() );\n        }\n        \n        _facetFields.add( f );\n        FacetField nl = f.getLimitingFields( minsize );\n        if( nl.getValueCount() > 0 ) {\n          _limitingFacets.add( nl );\n        }\n      }\n    }\n    \n    //Parse date facets\n    NamedList<NamedList<Object>> df = (NamedList<NamedList<Object>>) info.get(\"facet_dates\");\n    if (df != null) {\n      // System.out.println(df);\n      _facetDates = new ArrayList<FacetField>( df.size() );\n      for (Map.Entry<String, NamedList<Object>> facet : df) {\n        // System.out.println(\"Key: \" + facet.getKey() + \" Value: \" + facet.getValue());\n        NamedList<Object> values = facet.getValue();\n        String gap = (String) values.get(\"gap\");\n        Date end = (Date) values.get(\"end\");\n        FacetField f = new FacetField(facet.getKey(), gap, end);\n        \n        for (Map.Entry<String, Object> entry : values)   {\n          try {\n            f.add(entry.getKey(), Long.parseLong(entry.getValue().toString()));\n          } catch (NumberFormatException e) {\n            //Ignore for non-number responses which are already handled above\n          }\n        }\n        \n        _facetDates.add(f);\n      }\n    }\n    \n    //Parse pivot facets\n    NamedList pf = (NamedList) info.get(\"facet_pivot\");\n    if (pf != null) {\n      _facetPivot = new NamedList<List<PivotField>>();\n      for( int i=0; i<pf.size(); i++ ) {\n        _facetPivot.add( pf.getName(i), readPivots( (List<NamedList>)pf.getVal(i) ) );\n      }\n    }\n  }\n\n","sourceOld":"  private void extractFacetInfo( NamedList<Object> info )\n  {\n    // Parse the queries\n    _facetQuery = new LinkedHashMap<String, Integer>();\n    NamedList<Integer> fq = (NamedList<Integer>) info.get( \"facet_queries\" );\n    if (fq != null) {\n      for( Map.Entry<String, Integer> entry : fq ) {\n        _facetQuery.put( entry.getKey(), entry.getValue() );\n      }\n    }\n    \n    // Parse the facet info into fields\n    // TODO?? The list could be <int> or <long>?  If always <long> then we can switch to <Long>\n    NamedList<NamedList<Number>> ff = (NamedList<NamedList<Number>>) info.get( \"facet_fields\" );\n    if( ff != null ) {\n      _facetFields = new ArrayList<FacetField>( ff.size() );\n      _limitingFacets = new ArrayList<FacetField>( ff.size() );\n      \n      long minsize = _results == null ? Long.MAX_VALUE :_results.getNumFound();\n      for( Map.Entry<String,NamedList<Number>> facet : ff ) {\n        FacetField f = new FacetField( facet.getKey() );\n        for( Map.Entry<String, Number> entry : facet.getValue() ) {\n          f.add( entry.getKey(), entry.getValue().longValue() );\n        }\n        \n        _facetFields.add( f );\n        FacetField nl = f.getLimitingFields( minsize );\n        if( nl.getValueCount() > 0 ) {\n          _limitingFacets.add( nl );\n        }\n      }\n    }\n    \n    //Parse date facets\n    NamedList<NamedList<Object>> df = (NamedList<NamedList<Object>>) info.get(\"facet_dates\");\n    if (df != null) {\n      // System.out.println(df);\n      _facetDates = new ArrayList<FacetField>( df.size() );\n      for (Map.Entry<String, NamedList<Object>> facet : df) {\n        // System.out.println(\"Key: \" + facet.getKey() + \" Value: \" + facet.getValue());\n        NamedList<Object> values = facet.getValue();\n        String gap = (String) values.get(\"gap\");\n        Date end = (Date) values.get(\"end\");\n        FacetField f = new FacetField(facet.getKey(), gap, end);\n        \n        for (Map.Entry<String, Object> entry : values)   {\n          try {\n            f.add(entry.getKey(), Long.parseLong(entry.getValue().toString()));\n          } catch (NumberFormatException e) {\n            //Ignore for non-number responses which are already handled above\n          }\n        }\n        \n        _facetDates.add(f);\n      }\n    }\n    \n    //Parse pivot facets\n    NamedList pf = (NamedList) info.get(\"facet_pivot\");\n    if (pf != null) {\n      _facetPivot = new NamedList<List<PivotField>>();\n      for( int i=0; i<pf.size(); i++ ) {\n        _facetPivot.add( pf.getName(i), readPivots( (List<NamedList>)pf.getVal(i) ) );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#extractFacetInfo(NamedList[Object]).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/QueryResponse#extractFacetInfo(NamedList[Object]).mjava","sourceNew":"  private void extractFacetInfo( NamedList<Object> info )\n  {\n    // Parse the queries\n    _facetQuery = new LinkedHashMap<String, Integer>();\n    NamedList<Integer> fq = (NamedList<Integer>) info.get( \"facet_queries\" );\n    if (fq != null) {\n      for( Map.Entry<String, Integer> entry : fq ) {\n        _facetQuery.put( entry.getKey(), entry.getValue() );\n      }\n    }\n    \n    // Parse the facet info into fields\n    // TODO?? The list could be <int> or <long>?  If always <long> then we can switch to <Long>\n    NamedList<NamedList<Number>> ff = (NamedList<NamedList<Number>>) info.get( \"facet_fields\" );\n    if( ff != null ) {\n      _facetFields = new ArrayList<FacetField>( ff.size() );\n      _limitingFacets = new ArrayList<FacetField>( ff.size() );\n      \n      long minsize = _results == null ? Long.MAX_VALUE :_results.getNumFound();\n      for( Map.Entry<String,NamedList<Number>> facet : ff ) {\n        FacetField f = new FacetField( facet.getKey() );\n        for( Map.Entry<String, Number> entry : facet.getValue() ) {\n          f.add( entry.getKey(), entry.getValue().longValue() );\n        }\n        \n        _facetFields.add( f );\n        FacetField nl = f.getLimitingFields( minsize );\n        if( nl.getValueCount() > 0 ) {\n          _limitingFacets.add( nl );\n        }\n      }\n    }\n    \n    //Parse date facets\n    NamedList<NamedList<Object>> df = (NamedList<NamedList<Object>>) info.get(\"facet_dates\");\n    if (df != null) {\n      // System.out.println(df);\n      _facetDates = new ArrayList<FacetField>( df.size() );\n      for (Map.Entry<String, NamedList<Object>> facet : df) {\n        // System.out.println(\"Key: \" + facet.getKey() + \" Value: \" + facet.getValue());\n        NamedList<Object> values = facet.getValue();\n        String gap = (String) values.get(\"gap\");\n        Date end = (Date) values.get(\"end\");\n        FacetField f = new FacetField(facet.getKey(), gap, end);\n        \n        for (Map.Entry<String, Object> entry : values)   {\n          try {\n            f.add(entry.getKey(), Long.parseLong(entry.getValue().toString()));\n          } catch (NumberFormatException e) {\n            //Ignore for non-number responses which are already handled above\n          }\n        }\n        \n        _facetDates.add(f);\n      }\n    }\n    \n    //Parse pivot facets\n    NamedList pf = (NamedList) info.get(\"facet_pivot\");\n    if (pf != null) {\n      _facetPivot = new NamedList<List<PivotField>>();\n      for( int i=0; i<pf.size(); i++ ) {\n        _facetPivot.add( pf.getName(i), readPivots( (List<NamedList>)pf.getVal(i) ) );\n      }\n    }\n  }\n\n","sourceOld":"  private void extractFacetInfo( NamedList<Object> info )\n  {\n    // Parse the queries\n    _facetQuery = new LinkedHashMap<String, Integer>();\n    NamedList<Integer> fq = (NamedList<Integer>) info.get( \"facet_queries\" );\n    if (fq != null) {\n      for( Map.Entry<String, Integer> entry : fq ) {\n        _facetQuery.put( entry.getKey(), entry.getValue() );\n      }\n    }\n    \n    // Parse the facet info into fields\n    // TODO?? The list could be <int> or <long>?  If always <long> then we can switch to <Long>\n    NamedList<NamedList<Number>> ff = (NamedList<NamedList<Number>>) info.get( \"facet_fields\" );\n    if( ff != null ) {\n      _facetFields = new ArrayList<FacetField>( ff.size() );\n      _limitingFacets = new ArrayList<FacetField>( ff.size() );\n      \n      long minsize = _results == null ? Long.MAX_VALUE :_results.getNumFound();\n      for( Map.Entry<String,NamedList<Number>> facet : ff ) {\n        FacetField f = new FacetField( facet.getKey() );\n        for( Map.Entry<String, Number> entry : facet.getValue() ) {\n          f.add( entry.getKey(), entry.getValue().longValue() );\n        }\n        \n        _facetFields.add( f );\n        FacetField nl = f.getLimitingFields( minsize );\n        if( nl.getValueCount() > 0 ) {\n          _limitingFacets.add( nl );\n        }\n      }\n    }\n    \n    //Parse date facets\n    NamedList<NamedList<Object>> df = (NamedList<NamedList<Object>>) info.get(\"facet_dates\");\n    if (df != null) {\n      // System.out.println(df);\n      _facetDates = new ArrayList<FacetField>( df.size() );\n      for (Map.Entry<String, NamedList<Object>> facet : df) {\n        // System.out.println(\"Key: \" + facet.getKey() + \" Value: \" + facet.getValue());\n        NamedList<Object> values = facet.getValue();\n        String gap = (String) values.get(\"gap\");\n        Date end = (Date) values.get(\"end\");\n        FacetField f = new FacetField(facet.getKey(), gap, end);\n        \n        for (Map.Entry<String, Object> entry : values)   {\n          try {\n            f.add(entry.getKey(), Long.parseLong(entry.getValue().toString()));\n          } catch (NumberFormatException e) {\n            //Ignore for non-number responses which are already handled above\n          }\n        }\n        \n        _facetDates.add(f);\n      }\n    }\n    \n    //Parse pivot facets\n    NamedList pf = (NamedList) info.get(\"facet_pivot\");\n    if (pf != null) {\n      _facetPivot = new NamedList<List<PivotField>>();\n      for( int i=0; i<pf.size(); i++ ) {\n        _facetPivot.add( pf.getName(i), readPivots( (List<NamedList>)pf.getVal(i) ) );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4f1e070470c46013e0ab2939d8806159ae002a6","date":1311514829,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#extractFacetInfo(NamedList[Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#extractFacetInfo(NamedList[Object]).mjava","sourceNew":"  private void extractFacetInfo( NamedList<Object> info )\n  {\n    // Parse the queries\n    _facetQuery = new LinkedHashMap<String, Integer>();\n    NamedList<Integer> fq = (NamedList<Integer>) info.get( \"facet_queries\" );\n    if (fq != null) {\n      for( Map.Entry<String, Integer> entry : fq ) {\n        _facetQuery.put( entry.getKey(), entry.getValue() );\n      }\n    }\n    \n    // Parse the facet info into fields\n    // TODO?? The list could be <int> or <long>?  If always <long> then we can switch to <Long>\n    NamedList<NamedList<Number>> ff = (NamedList<NamedList<Number>>) info.get( \"facet_fields\" );\n    if( ff != null ) {\n      _facetFields = new ArrayList<FacetField>( ff.size() );\n      _limitingFacets = new ArrayList<FacetField>( ff.size() );\n      \n      long minsize = _results == null ? Long.MAX_VALUE :_results.getNumFound();\n      for( Map.Entry<String,NamedList<Number>> facet : ff ) {\n        FacetField f = new FacetField( facet.getKey() );\n        for( Map.Entry<String, Number> entry : facet.getValue() ) {\n          f.add( entry.getKey(), entry.getValue().longValue() );\n        }\n        \n        _facetFields.add( f );\n        FacetField nl = f.getLimitingFields( minsize );\n        if( nl.getValueCount() > 0 ) {\n          _limitingFacets.add( nl );\n        }\n      }\n    }\n    \n    //Parse date facets\n    NamedList<NamedList<Object>> df = (NamedList<NamedList<Object>>) info.get(\"facet_dates\");\n    if (df != null) {\n      // System.out.println(df);\n      _facetDates = new ArrayList<FacetField>( df.size() );\n      for (Map.Entry<String, NamedList<Object>> facet : df) {\n        // System.out.println(\"Key: \" + facet.getKey() + \" Value: \" + facet.getValue());\n        NamedList<Object> values = facet.getValue();\n        String gap = (String) values.get(\"gap\");\n        Date end = (Date) values.get(\"end\");\n        FacetField f = new FacetField(facet.getKey(), gap, end);\n        \n        for (Map.Entry<String, Object> entry : values)   {\n          try {\n            f.add(entry.getKey(), Long.parseLong(entry.getValue().toString()));\n          } catch (NumberFormatException e) {\n            //Ignore for non-number responses which are already handled above\n          }\n        }\n        \n        _facetDates.add(f);\n      }\n    }\n\n    //Parse range facets\n    NamedList<NamedList<Object>> rf = (NamedList<NamedList<Object>>) info.get(\"facet_ranges\");\n    if (rf != null) {\n      _facetRanges = new ArrayList<RangeFacet>( rf.size() );\n      for (Map.Entry<String, NamedList<Object>> facet : rf) {\n        NamedList<Object> values = facet.getValue();\n        Object rawGap = values.get(\"gap\");\n\n        RangeFacet rangeFacet;\n        if (rawGap instanceof Number) {\n          Number gap = (Number) rawGap;\n          Number start = (Number) values.get(\"start\");\n          Number end = (Number) values.get(\"end\");\n          rangeFacet = new RangeFacet.Numeric(facet.getKey(), start, end, gap);\n        } else {\n          String gap = (String) rawGap;\n          Date start = (Date) values.get(\"start\");\n          Date end = (Date) values.get(\"end\");\n          rangeFacet = new RangeFacet.Date(facet.getKey(), start, end, gap);\n        }\n\n        NamedList<Integer> counts = (NamedList<Integer>) values.get(\"counts\");\n        for (Map.Entry<String, Integer> entry : counts)   {\n          rangeFacet.addCount(entry.getKey(), entry.getValue());\n        }\n\n        _facetRanges.add(rangeFacet);\n      }\n    }\n    \n    //Parse pivot facets\n    NamedList pf = (NamedList) info.get(\"facet_pivot\");\n    if (pf != null) {\n      _facetPivot = new NamedList<List<PivotField>>();\n      for( int i=0; i<pf.size(); i++ ) {\n        _facetPivot.add( pf.getName(i), readPivots( (List<NamedList>)pf.getVal(i) ) );\n      }\n    }\n  }\n\n","sourceOld":"  private void extractFacetInfo( NamedList<Object> info )\n  {\n    // Parse the queries\n    _facetQuery = new LinkedHashMap<String, Integer>();\n    NamedList<Integer> fq = (NamedList<Integer>) info.get( \"facet_queries\" );\n    if (fq != null) {\n      for( Map.Entry<String, Integer> entry : fq ) {\n        _facetQuery.put( entry.getKey(), entry.getValue() );\n      }\n    }\n    \n    // Parse the facet info into fields\n    // TODO?? The list could be <int> or <long>?  If always <long> then we can switch to <Long>\n    NamedList<NamedList<Number>> ff = (NamedList<NamedList<Number>>) info.get( \"facet_fields\" );\n    if( ff != null ) {\n      _facetFields = new ArrayList<FacetField>( ff.size() );\n      _limitingFacets = new ArrayList<FacetField>( ff.size() );\n      \n      long minsize = _results == null ? Long.MAX_VALUE :_results.getNumFound();\n      for( Map.Entry<String,NamedList<Number>> facet : ff ) {\n        FacetField f = new FacetField( facet.getKey() );\n        for( Map.Entry<String, Number> entry : facet.getValue() ) {\n          f.add( entry.getKey(), entry.getValue().longValue() );\n        }\n        \n        _facetFields.add( f );\n        FacetField nl = f.getLimitingFields( minsize );\n        if( nl.getValueCount() > 0 ) {\n          _limitingFacets.add( nl );\n        }\n      }\n    }\n    \n    //Parse date facets\n    NamedList<NamedList<Object>> df = (NamedList<NamedList<Object>>) info.get(\"facet_dates\");\n    if (df != null) {\n      // System.out.println(df);\n      _facetDates = new ArrayList<FacetField>( df.size() );\n      for (Map.Entry<String, NamedList<Object>> facet : df) {\n        // System.out.println(\"Key: \" + facet.getKey() + \" Value: \" + facet.getValue());\n        NamedList<Object> values = facet.getValue();\n        String gap = (String) values.get(\"gap\");\n        Date end = (Date) values.get(\"end\");\n        FacetField f = new FacetField(facet.getKey(), gap, end);\n        \n        for (Map.Entry<String, Object> entry : values)   {\n          try {\n            f.add(entry.getKey(), Long.parseLong(entry.getValue().toString()));\n          } catch (NumberFormatException e) {\n            //Ignore for non-number responses which are already handled above\n          }\n        }\n        \n        _facetDates.add(f);\n      }\n    }\n    \n    //Parse pivot facets\n    NamedList pf = (NamedList) info.get(\"facet_pivot\");\n    if (pf != null) {\n      _facetPivot = new NamedList<List<PivotField>>();\n      for( int i=0; i<pf.size(); i++ ) {\n        _facetPivot.add( pf.getName(i), readPivots( (List<NamedList>)pf.getVal(i) ) );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0474ad4224e9573bcf8e80349a1489de3ee7f9c","date":1318083009,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#extractFacetInfo(NamedList[Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#extractFacetInfo(NamedList[Object]).mjava","sourceNew":"  private void extractFacetInfo( NamedList<Object> info )\n  {\n    // Parse the queries\n    _facetQuery = new LinkedHashMap<String, Integer>();\n    NamedList<Integer> fq = (NamedList<Integer>) info.get( \"facet_queries\" );\n    if (fq != null) {\n      for( Map.Entry<String, Integer> entry : fq ) {\n        _facetQuery.put( entry.getKey(), entry.getValue() );\n      }\n    }\n    \n    // Parse the facet info into fields\n    // TODO?? The list could be <int> or <long>?  If always <long> then we can switch to <Long>\n    NamedList<NamedList<Number>> ff = (NamedList<NamedList<Number>>) info.get( \"facet_fields\" );\n    if( ff != null ) {\n      _facetFields = new ArrayList<FacetField>( ff.size() );\n      _limitingFacets = new ArrayList<FacetField>( ff.size() );\n      \n      long minsize = _results == null ? Long.MAX_VALUE :_results.getNumFound();\n      for( Map.Entry<String,NamedList<Number>> facet : ff ) {\n        FacetField f = new FacetField( facet.getKey() );\n        for( Map.Entry<String, Number> entry : facet.getValue() ) {\n          f.add( entry.getKey(), entry.getValue().longValue() );\n        }\n        \n        _facetFields.add( f );\n        FacetField nl = f.getLimitingFields( minsize );\n        if( nl.getValueCount() > 0 ) {\n          _limitingFacets.add( nl );\n        }\n      }\n    }\n    \n    //Parse date facets\n    NamedList<NamedList<Object>> df = (NamedList<NamedList<Object>>) info.get(\"facet_dates\");\n    if (df != null) {\n      // System.out.println(df);\n      _facetDates = new ArrayList<FacetField>( df.size() );\n      for (Map.Entry<String, NamedList<Object>> facet : df) {\n        // System.out.println(\"Key: \" + facet.getKey() + \" Value: \" + facet.getValue());\n        NamedList<Object> values = facet.getValue();\n        String gap = (String) values.get(\"gap\");\n        Date end = (Date) values.get(\"end\");\n        FacetField f = new FacetField(facet.getKey(), gap, end);\n        \n        for (Map.Entry<String, Object> entry : values)   {\n          try {\n            f.add(entry.getKey(), Long.parseLong(entry.getValue().toString()));\n          } catch (NumberFormatException e) {\n            //Ignore for non-number responses which are already handled above\n          }\n        }\n        \n        _facetDates.add(f);\n      }\n    }\n\n    //Parse range facets\n    NamedList<NamedList<Object>> rf = (NamedList<NamedList<Object>>) info.get(\"facet_ranges\");\n    if (rf != null) {\n      _facetRanges = new ArrayList<RangeFacet>( rf.size() );\n      for (Map.Entry<String, NamedList<Object>> facet : rf) {\n        NamedList<Object> values = facet.getValue();\n        Object rawGap = values.get(\"gap\");\n\n        RangeFacet rangeFacet;\n        if (rawGap instanceof Number) {\n          Number gap = (Number) rawGap;\n          Number start = (Number) values.get(\"start\");\n          Number end = (Number) values.get(\"end\");\n\n          Number before = (Number) values.get(\"before\");\n          Number after = (Number) values.get(\"after\");\n\n          rangeFacet = new RangeFacet.Numeric(facet.getKey(), start, end, gap, before, after);\n        } else {\n          String gap = (String) rawGap;\n          Date start = (Date) values.get(\"start\");\n          Date end = (Date) values.get(\"end\");\n\n          Number before = (Number) values.get(\"before\");\n          Number after = (Number) values.get(\"after\");\n\n          rangeFacet = new RangeFacet.Date(facet.getKey(), start, end, gap, before, after);\n        }\n\n        NamedList<Integer> counts = (NamedList<Integer>) values.get(\"counts\");\n        for (Map.Entry<String, Integer> entry : counts)   {\n          rangeFacet.addCount(entry.getKey(), entry.getValue());\n        }\n\n        _facetRanges.add(rangeFacet);\n      }\n    }\n    \n    //Parse pivot facets\n    NamedList pf = (NamedList) info.get(\"facet_pivot\");\n    if (pf != null) {\n      _facetPivot = new NamedList<List<PivotField>>();\n      for( int i=0; i<pf.size(); i++ ) {\n        _facetPivot.add( pf.getName(i), readPivots( (List<NamedList>)pf.getVal(i) ) );\n      }\n    }\n  }\n\n","sourceOld":"  private void extractFacetInfo( NamedList<Object> info )\n  {\n    // Parse the queries\n    _facetQuery = new LinkedHashMap<String, Integer>();\n    NamedList<Integer> fq = (NamedList<Integer>) info.get( \"facet_queries\" );\n    if (fq != null) {\n      for( Map.Entry<String, Integer> entry : fq ) {\n        _facetQuery.put( entry.getKey(), entry.getValue() );\n      }\n    }\n    \n    // Parse the facet info into fields\n    // TODO?? The list could be <int> or <long>?  If always <long> then we can switch to <Long>\n    NamedList<NamedList<Number>> ff = (NamedList<NamedList<Number>>) info.get( \"facet_fields\" );\n    if( ff != null ) {\n      _facetFields = new ArrayList<FacetField>( ff.size() );\n      _limitingFacets = new ArrayList<FacetField>( ff.size() );\n      \n      long minsize = _results == null ? Long.MAX_VALUE :_results.getNumFound();\n      for( Map.Entry<String,NamedList<Number>> facet : ff ) {\n        FacetField f = new FacetField( facet.getKey() );\n        for( Map.Entry<String, Number> entry : facet.getValue() ) {\n          f.add( entry.getKey(), entry.getValue().longValue() );\n        }\n        \n        _facetFields.add( f );\n        FacetField nl = f.getLimitingFields( minsize );\n        if( nl.getValueCount() > 0 ) {\n          _limitingFacets.add( nl );\n        }\n      }\n    }\n    \n    //Parse date facets\n    NamedList<NamedList<Object>> df = (NamedList<NamedList<Object>>) info.get(\"facet_dates\");\n    if (df != null) {\n      // System.out.println(df);\n      _facetDates = new ArrayList<FacetField>( df.size() );\n      for (Map.Entry<String, NamedList<Object>> facet : df) {\n        // System.out.println(\"Key: \" + facet.getKey() + \" Value: \" + facet.getValue());\n        NamedList<Object> values = facet.getValue();\n        String gap = (String) values.get(\"gap\");\n        Date end = (Date) values.get(\"end\");\n        FacetField f = new FacetField(facet.getKey(), gap, end);\n        \n        for (Map.Entry<String, Object> entry : values)   {\n          try {\n            f.add(entry.getKey(), Long.parseLong(entry.getValue().toString()));\n          } catch (NumberFormatException e) {\n            //Ignore for non-number responses which are already handled above\n          }\n        }\n        \n        _facetDates.add(f);\n      }\n    }\n\n    //Parse range facets\n    NamedList<NamedList<Object>> rf = (NamedList<NamedList<Object>>) info.get(\"facet_ranges\");\n    if (rf != null) {\n      _facetRanges = new ArrayList<RangeFacet>( rf.size() );\n      for (Map.Entry<String, NamedList<Object>> facet : rf) {\n        NamedList<Object> values = facet.getValue();\n        Object rawGap = values.get(\"gap\");\n\n        RangeFacet rangeFacet;\n        if (rawGap instanceof Number) {\n          Number gap = (Number) rawGap;\n          Number start = (Number) values.get(\"start\");\n          Number end = (Number) values.get(\"end\");\n          rangeFacet = new RangeFacet.Numeric(facet.getKey(), start, end, gap);\n        } else {\n          String gap = (String) rawGap;\n          Date start = (Date) values.get(\"start\");\n          Date end = (Date) values.get(\"end\");\n          rangeFacet = new RangeFacet.Date(facet.getKey(), start, end, gap);\n        }\n\n        NamedList<Integer> counts = (NamedList<Integer>) values.get(\"counts\");\n        for (Map.Entry<String, Integer> entry : counts)   {\n          rangeFacet.addCount(entry.getKey(), entry.getValue());\n        }\n\n        _facetRanges.add(rangeFacet);\n      }\n    }\n    \n    //Parse pivot facets\n    NamedList pf = (NamedList) info.get(\"facet_pivot\");\n    if (pf != null) {\n      _facetPivot = new NamedList<List<PivotField>>();\n      for( int i=0; i<pf.size(); i++ ) {\n        _facetPivot.add( pf.getName(i), readPivots( (List<NamedList>)pf.getVal(i) ) );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["6d52c103ec2df541e0c5e0334fa88bb8d3573a75"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6d52c103ec2df541e0c5e0334fa88bb8d3573a75","date":1367330687,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#extractFacetInfo(NamedList[Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#extractFacetInfo(NamedList[Object]).mjava","sourceNew":"  private void extractFacetInfo( NamedList<Object> info )\n  {\n    // Parse the queries\n    _facetQuery = new LinkedHashMap<String, Integer>();\n    NamedList<Integer> fq = (NamedList<Integer>) info.get( \"facet_queries\" );\n    if (fq != null) {\n      for( Map.Entry<String, Integer> entry : fq ) {\n        _facetQuery.put( entry.getKey(), entry.getValue() );\n      }\n    }\n    \n    // Parse the facet info into fields\n    // TODO?? The list could be <int> or <long>?  If always <long> then we can switch to <Long>\n    NamedList<NamedList<Number>> ff = (NamedList<NamedList<Number>>) info.get( \"facet_fields\" );\n    if( ff != null ) {\n      _facetFields = new ArrayList<FacetField>( ff.size() );\n      _limitingFacets = new ArrayList<FacetField>( ff.size() );\n      \n      long minsize = _results == null ? Long.MAX_VALUE :_results.getNumFound();\n      for( Map.Entry<String,NamedList<Number>> facet : ff ) {\n        FacetField f = new FacetField( facet.getKey() );\n        for( Map.Entry<String, Number> entry : facet.getValue() ) {\n          f.add( entry.getKey(), entry.getValue().longValue() );\n        }\n        \n        _facetFields.add( f );\n        FacetField nl = f.getLimitingFields( minsize );\n        if( nl.getValueCount() > 0 ) {\n          _limitingFacets.add( nl );\n        }\n      }\n    }\n    \n    //Parse date facets\n    NamedList<NamedList<Object>> df = (NamedList<NamedList<Object>>) info.get(\"facet_dates\");\n    if (df != null) {\n      // System.out.println(df);\n      _facetDates = new ArrayList<FacetField>( df.size() );\n      for (Map.Entry<String, NamedList<Object>> facet : df) {\n        // System.out.println(\"Key: \" + facet.getKey() + \" Value: \" + facet.getValue());\n        NamedList<Object> values = facet.getValue();\n        String gap = (String) values.get(\"gap\");\n        Date end = (Date) values.get(\"end\");\n        FacetField f = new FacetField(facet.getKey(), gap, end);\n        \n        for (Map.Entry<String, Object> entry : values)   {\n          try {\n            f.add(entry.getKey(), Long.parseLong(entry.getValue().toString()));\n          } catch (NumberFormatException e) {\n            //Ignore for non-number responses which are already handled above\n          }\n        }\n        \n        _facetDates.add(f);\n      }\n    }\n\n    //Parse range facets\n    NamedList<NamedList<Object>> rf = (NamedList<NamedList<Object>>) info.get(\"facet_ranges\");\n    if (rf != null) {\n      _facetRanges = new ArrayList<RangeFacet>( rf.size() );\n      for (Map.Entry<String, NamedList<Object>> facet : rf) {\n        NamedList<Object> values = facet.getValue();\n        Object rawGap = values.get(\"gap\");\n\n        RangeFacet rangeFacet;\n        if (rawGap instanceof Number) {\n          Number gap = (Number) rawGap;\n          Number start = (Number) values.get(\"start\");\n          Number end = (Number) values.get(\"end\");\n\n          Number before = (Number) values.get(\"before\");\n          Number after = (Number) values.get(\"after\");\n          Number between = (Number) values.get(\"between\");\n\n          rangeFacet = new RangeFacet.Numeric(facet.getKey(), start, end, gap, before, after, between);\n        } else {\n          String gap = (String) rawGap;\n          Date start = (Date) values.get(\"start\");\n          Date end = (Date) values.get(\"end\");\n\n          Number before = (Number) values.get(\"before\");\n          Number after = (Number) values.get(\"after\");\n          Number between = (Number) values.get(\"between\");\n\n          rangeFacet = new RangeFacet.Date(facet.getKey(), start, end, gap, before, after, between);\n        }\n\n        NamedList<Integer> counts = (NamedList<Integer>) values.get(\"counts\");\n        for (Map.Entry<String, Integer> entry : counts)   {\n          rangeFacet.addCount(entry.getKey(), entry.getValue());\n        }\n\n        _facetRanges.add(rangeFacet);\n      }\n    }\n    \n    //Parse pivot facets\n    NamedList pf = (NamedList) info.get(\"facet_pivot\");\n    if (pf != null) {\n      _facetPivot = new NamedList<List<PivotField>>();\n      for( int i=0; i<pf.size(); i++ ) {\n        _facetPivot.add( pf.getName(i), readPivots( (List<NamedList>)pf.getVal(i) ) );\n      }\n    }\n  }\n\n","sourceOld":"  private void extractFacetInfo( NamedList<Object> info )\n  {\n    // Parse the queries\n    _facetQuery = new LinkedHashMap<String, Integer>();\n    NamedList<Integer> fq = (NamedList<Integer>) info.get( \"facet_queries\" );\n    if (fq != null) {\n      for( Map.Entry<String, Integer> entry : fq ) {\n        _facetQuery.put( entry.getKey(), entry.getValue() );\n      }\n    }\n    \n    // Parse the facet info into fields\n    // TODO?? The list could be <int> or <long>?  If always <long> then we can switch to <Long>\n    NamedList<NamedList<Number>> ff = (NamedList<NamedList<Number>>) info.get( \"facet_fields\" );\n    if( ff != null ) {\n      _facetFields = new ArrayList<FacetField>( ff.size() );\n      _limitingFacets = new ArrayList<FacetField>( ff.size() );\n      \n      long minsize = _results == null ? Long.MAX_VALUE :_results.getNumFound();\n      for( Map.Entry<String,NamedList<Number>> facet : ff ) {\n        FacetField f = new FacetField( facet.getKey() );\n        for( Map.Entry<String, Number> entry : facet.getValue() ) {\n          f.add( entry.getKey(), entry.getValue().longValue() );\n        }\n        \n        _facetFields.add( f );\n        FacetField nl = f.getLimitingFields( minsize );\n        if( nl.getValueCount() > 0 ) {\n          _limitingFacets.add( nl );\n        }\n      }\n    }\n    \n    //Parse date facets\n    NamedList<NamedList<Object>> df = (NamedList<NamedList<Object>>) info.get(\"facet_dates\");\n    if (df != null) {\n      // System.out.println(df);\n      _facetDates = new ArrayList<FacetField>( df.size() );\n      for (Map.Entry<String, NamedList<Object>> facet : df) {\n        // System.out.println(\"Key: \" + facet.getKey() + \" Value: \" + facet.getValue());\n        NamedList<Object> values = facet.getValue();\n        String gap = (String) values.get(\"gap\");\n        Date end = (Date) values.get(\"end\");\n        FacetField f = new FacetField(facet.getKey(), gap, end);\n        \n        for (Map.Entry<String, Object> entry : values)   {\n          try {\n            f.add(entry.getKey(), Long.parseLong(entry.getValue().toString()));\n          } catch (NumberFormatException e) {\n            //Ignore for non-number responses which are already handled above\n          }\n        }\n        \n        _facetDates.add(f);\n      }\n    }\n\n    //Parse range facets\n    NamedList<NamedList<Object>> rf = (NamedList<NamedList<Object>>) info.get(\"facet_ranges\");\n    if (rf != null) {\n      _facetRanges = new ArrayList<RangeFacet>( rf.size() );\n      for (Map.Entry<String, NamedList<Object>> facet : rf) {\n        NamedList<Object> values = facet.getValue();\n        Object rawGap = values.get(\"gap\");\n\n        RangeFacet rangeFacet;\n        if (rawGap instanceof Number) {\n          Number gap = (Number) rawGap;\n          Number start = (Number) values.get(\"start\");\n          Number end = (Number) values.get(\"end\");\n\n          Number before = (Number) values.get(\"before\");\n          Number after = (Number) values.get(\"after\");\n\n          rangeFacet = new RangeFacet.Numeric(facet.getKey(), start, end, gap, before, after);\n        } else {\n          String gap = (String) rawGap;\n          Date start = (Date) values.get(\"start\");\n          Date end = (Date) values.get(\"end\");\n\n          Number before = (Number) values.get(\"before\");\n          Number after = (Number) values.get(\"after\");\n\n          rangeFacet = new RangeFacet.Date(facet.getKey(), start, end, gap, before, after);\n        }\n\n        NamedList<Integer> counts = (NamedList<Integer>) values.get(\"counts\");\n        for (Map.Entry<String, Integer> entry : counts)   {\n          rangeFacet.addCount(entry.getKey(), entry.getValue());\n        }\n\n        _facetRanges.add(rangeFacet);\n      }\n    }\n    \n    //Parse pivot facets\n    NamedList pf = (NamedList) info.get(\"facet_pivot\");\n    if (pf != null) {\n      _facetPivot = new NamedList<List<PivotField>>();\n      for( int i=0; i<pf.size(); i++ ) {\n        _facetPivot.add( pf.getName(i), readPivots( (List<NamedList>)pf.getVal(i) ) );\n      }\n    }\n  }\n\n","bugFix":["c0474ad4224e9573bcf8e80349a1489de3ee7f9c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#extractFacetInfo(NamedList[Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#extractFacetInfo(NamedList[Object]).mjava","sourceNew":"  private void extractFacetInfo( NamedList<Object> info )\n  {\n    // Parse the queries\n    _facetQuery = new LinkedHashMap<>();\n    NamedList<Integer> fq = (NamedList<Integer>) info.get( \"facet_queries\" );\n    if (fq != null) {\n      for( Map.Entry<String, Integer> entry : fq ) {\n        _facetQuery.put( entry.getKey(), entry.getValue() );\n      }\n    }\n    \n    // Parse the facet info into fields\n    // TODO?? The list could be <int> or <long>?  If always <long> then we can switch to <Long>\n    NamedList<NamedList<Number>> ff = (NamedList<NamedList<Number>>) info.get( \"facet_fields\" );\n    if( ff != null ) {\n      _facetFields = new ArrayList<>( ff.size() );\n      _limitingFacets = new ArrayList<>( ff.size() );\n      \n      long minsize = _results == null ? Long.MAX_VALUE :_results.getNumFound();\n      for( Map.Entry<String,NamedList<Number>> facet : ff ) {\n        FacetField f = new FacetField( facet.getKey() );\n        for( Map.Entry<String, Number> entry : facet.getValue() ) {\n          f.add( entry.getKey(), entry.getValue().longValue() );\n        }\n        \n        _facetFields.add( f );\n        FacetField nl = f.getLimitingFields( minsize );\n        if( nl.getValueCount() > 0 ) {\n          _limitingFacets.add( nl );\n        }\n      }\n    }\n    \n    //Parse date facets\n    NamedList<NamedList<Object>> df = (NamedList<NamedList<Object>>) info.get(\"facet_dates\");\n    if (df != null) {\n      // System.out.println(df);\n      _facetDates = new ArrayList<>( df.size() );\n      for (Map.Entry<String, NamedList<Object>> facet : df) {\n        // System.out.println(\"Key: \" + facet.getKey() + \" Value: \" + facet.getValue());\n        NamedList<Object> values = facet.getValue();\n        String gap = (String) values.get(\"gap\");\n        Date end = (Date) values.get(\"end\");\n        FacetField f = new FacetField(facet.getKey(), gap, end);\n        \n        for (Map.Entry<String, Object> entry : values)   {\n          try {\n            f.add(entry.getKey(), Long.parseLong(entry.getValue().toString()));\n          } catch (NumberFormatException e) {\n            //Ignore for non-number responses which are already handled above\n          }\n        }\n        \n        _facetDates.add(f);\n      }\n    }\n\n    //Parse range facets\n    NamedList<NamedList<Object>> rf = (NamedList<NamedList<Object>>) info.get(\"facet_ranges\");\n    if (rf != null) {\n      _facetRanges = new ArrayList<>( rf.size() );\n      for (Map.Entry<String, NamedList<Object>> facet : rf) {\n        NamedList<Object> values = facet.getValue();\n        Object rawGap = values.get(\"gap\");\n\n        RangeFacet rangeFacet;\n        if (rawGap instanceof Number) {\n          Number gap = (Number) rawGap;\n          Number start = (Number) values.get(\"start\");\n          Number end = (Number) values.get(\"end\");\n\n          Number before = (Number) values.get(\"before\");\n          Number after = (Number) values.get(\"after\");\n          Number between = (Number) values.get(\"between\");\n\n          rangeFacet = new RangeFacet.Numeric(facet.getKey(), start, end, gap, before, after, between);\n        } else {\n          String gap = (String) rawGap;\n          Date start = (Date) values.get(\"start\");\n          Date end = (Date) values.get(\"end\");\n\n          Number before = (Number) values.get(\"before\");\n          Number after = (Number) values.get(\"after\");\n          Number between = (Number) values.get(\"between\");\n\n          rangeFacet = new RangeFacet.Date(facet.getKey(), start, end, gap, before, after, between);\n        }\n\n        NamedList<Integer> counts = (NamedList<Integer>) values.get(\"counts\");\n        for (Map.Entry<String, Integer> entry : counts)   {\n          rangeFacet.addCount(entry.getKey(), entry.getValue());\n        }\n\n        _facetRanges.add(rangeFacet);\n      }\n    }\n    \n    //Parse pivot facets\n    NamedList pf = (NamedList) info.get(\"facet_pivot\");\n    if (pf != null) {\n      _facetPivot = new NamedList<>();\n      for( int i=0; i<pf.size(); i++ ) {\n        _facetPivot.add( pf.getName(i), readPivots( (List<NamedList>)pf.getVal(i) ) );\n      }\n    }\n  }\n\n","sourceOld":"  private void extractFacetInfo( NamedList<Object> info )\n  {\n    // Parse the queries\n    _facetQuery = new LinkedHashMap<String, Integer>();\n    NamedList<Integer> fq = (NamedList<Integer>) info.get( \"facet_queries\" );\n    if (fq != null) {\n      for( Map.Entry<String, Integer> entry : fq ) {\n        _facetQuery.put( entry.getKey(), entry.getValue() );\n      }\n    }\n    \n    // Parse the facet info into fields\n    // TODO?? The list could be <int> or <long>?  If always <long> then we can switch to <Long>\n    NamedList<NamedList<Number>> ff = (NamedList<NamedList<Number>>) info.get( \"facet_fields\" );\n    if( ff != null ) {\n      _facetFields = new ArrayList<FacetField>( ff.size() );\n      _limitingFacets = new ArrayList<FacetField>( ff.size() );\n      \n      long minsize = _results == null ? Long.MAX_VALUE :_results.getNumFound();\n      for( Map.Entry<String,NamedList<Number>> facet : ff ) {\n        FacetField f = new FacetField( facet.getKey() );\n        for( Map.Entry<String, Number> entry : facet.getValue() ) {\n          f.add( entry.getKey(), entry.getValue().longValue() );\n        }\n        \n        _facetFields.add( f );\n        FacetField nl = f.getLimitingFields( minsize );\n        if( nl.getValueCount() > 0 ) {\n          _limitingFacets.add( nl );\n        }\n      }\n    }\n    \n    //Parse date facets\n    NamedList<NamedList<Object>> df = (NamedList<NamedList<Object>>) info.get(\"facet_dates\");\n    if (df != null) {\n      // System.out.println(df);\n      _facetDates = new ArrayList<FacetField>( df.size() );\n      for (Map.Entry<String, NamedList<Object>> facet : df) {\n        // System.out.println(\"Key: \" + facet.getKey() + \" Value: \" + facet.getValue());\n        NamedList<Object> values = facet.getValue();\n        String gap = (String) values.get(\"gap\");\n        Date end = (Date) values.get(\"end\");\n        FacetField f = new FacetField(facet.getKey(), gap, end);\n        \n        for (Map.Entry<String, Object> entry : values)   {\n          try {\n            f.add(entry.getKey(), Long.parseLong(entry.getValue().toString()));\n          } catch (NumberFormatException e) {\n            //Ignore for non-number responses which are already handled above\n          }\n        }\n        \n        _facetDates.add(f);\n      }\n    }\n\n    //Parse range facets\n    NamedList<NamedList<Object>> rf = (NamedList<NamedList<Object>>) info.get(\"facet_ranges\");\n    if (rf != null) {\n      _facetRanges = new ArrayList<RangeFacet>( rf.size() );\n      for (Map.Entry<String, NamedList<Object>> facet : rf) {\n        NamedList<Object> values = facet.getValue();\n        Object rawGap = values.get(\"gap\");\n\n        RangeFacet rangeFacet;\n        if (rawGap instanceof Number) {\n          Number gap = (Number) rawGap;\n          Number start = (Number) values.get(\"start\");\n          Number end = (Number) values.get(\"end\");\n\n          Number before = (Number) values.get(\"before\");\n          Number after = (Number) values.get(\"after\");\n          Number between = (Number) values.get(\"between\");\n\n          rangeFacet = new RangeFacet.Numeric(facet.getKey(), start, end, gap, before, after, between);\n        } else {\n          String gap = (String) rawGap;\n          Date start = (Date) values.get(\"start\");\n          Date end = (Date) values.get(\"end\");\n\n          Number before = (Number) values.get(\"before\");\n          Number after = (Number) values.get(\"after\");\n          Number between = (Number) values.get(\"between\");\n\n          rangeFacet = new RangeFacet.Date(facet.getKey(), start, end, gap, before, after, between);\n        }\n\n        NamedList<Integer> counts = (NamedList<Integer>) values.get(\"counts\");\n        for (Map.Entry<String, Integer> entry : counts)   {\n          rangeFacet.addCount(entry.getKey(), entry.getValue());\n        }\n\n        _facetRanges.add(rangeFacet);\n      }\n    }\n    \n    //Parse pivot facets\n    NamedList pf = (NamedList) info.get(\"facet_pivot\");\n    if (pf != null) {\n      _facetPivot = new NamedList<List<PivotField>>();\n      for( int i=0; i<pf.size(); i++ ) {\n        _facetPivot.add( pf.getName(i), readPivots( (List<NamedList>)pf.getVal(i) ) );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b74869edee26aa619609ae7a51351466ba06d39","date":1407454039,"type":3,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#extractFacetInfo(NamedList[Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#extractFacetInfo(NamedList[Object]).mjava","sourceNew":"  private void extractFacetInfo( NamedList<Object> info )\n  {\n    // Parse the queries\n    _facetQuery = new LinkedHashMap<>();\n    NamedList<Integer> fq = (NamedList<Integer>) info.get( \"facet_queries\" );\n    if (fq != null) {\n      for( Map.Entry<String, Integer> entry : fq ) {\n        _facetQuery.put( entry.getKey(), entry.getValue() );\n      }\n    }\n    \n    // Parse the facet info into fields\n    // TODO?? The list could be <int> or <long>?  If always <long> then we can switch to <Long>\n    NamedList<NamedList<Number>> ff = (NamedList<NamedList<Number>>) info.get( \"facet_fields\" );\n    if( ff != null ) {\n      _facetFields = new ArrayList<>( ff.size() );\n      _limitingFacets = new ArrayList<>( ff.size() );\n      \n      long minsize = _results == null ? Long.MAX_VALUE :_results.getNumFound();\n      for( Map.Entry<String,NamedList<Number>> facet : ff ) {\n        FacetField f = new FacetField( facet.getKey() );\n        for( Map.Entry<String, Number> entry : facet.getValue() ) {\n          f.add( entry.getKey(), entry.getValue().longValue() );\n        }\n        \n        _facetFields.add( f );\n        FacetField nl = f.getLimitingFields( minsize );\n        if( nl.getValueCount() > 0 ) {\n          _limitingFacets.add( nl );\n        }\n      }\n    }\n    \n    //Parse date facets\n    NamedList<NamedList<Object>> df = (NamedList<NamedList<Object>>) info.get(\"facet_dates\");\n    if (df != null) {\n      // System.out.println(df);\n      _facetDates = new ArrayList<>( df.size() );\n      for (Map.Entry<String, NamedList<Object>> facet : df) {\n        // System.out.println(\"Key: \" + facet.getKey() + \" Value: \" + facet.getValue());\n        NamedList<Object> values = facet.getValue();\n        String gap = (String) values.get(\"gap\");\n        Date end = (Date) values.get(\"end\");\n        FacetField f = new FacetField(facet.getKey(), gap, end);\n        \n        for (Map.Entry<String, Object> entry : values)   {\n          try {\n            f.add(entry.getKey(), Long.parseLong(entry.getValue().toString()));\n          } catch (NumberFormatException e) {\n            //Ignore for non-number responses which are already handled above\n          }\n        }\n        \n        _facetDates.add(f);\n      }\n    }\n\n    //Parse range facets\n    NamedList<NamedList<Object>> rf = (NamedList<NamedList<Object>>) info.get(\"facet_ranges\");\n    if (rf != null) {\n      _facetRanges = new ArrayList<>( rf.size() );\n      for (Map.Entry<String, NamedList<Object>> facet : rf) {\n        NamedList<Object> values = facet.getValue();\n        Object rawGap = values.get(\"gap\");\n\n        RangeFacet rangeFacet;\n        if (rawGap instanceof Number) {\n          Number gap = (Number) rawGap;\n          Number start = (Number) values.get(\"start\");\n          Number end = (Number) values.get(\"end\");\n\n          Number before = (Number) values.get(\"before\");\n          Number after = (Number) values.get(\"after\");\n          Number between = (Number) values.get(\"between\");\n\n          rangeFacet = new RangeFacet.Numeric(facet.getKey(), start, end, gap, before, after, between);\n        } else {\n          String gap = (String) rawGap;\n          Date start = (Date) values.get(\"start\");\n          Date end = (Date) values.get(\"end\");\n\n          Number before = (Number) values.get(\"before\");\n          Number after = (Number) values.get(\"after\");\n          Number between = (Number) values.get(\"between\");\n\n          rangeFacet = new RangeFacet.Date(facet.getKey(), start, end, gap, before, after, between);\n        }\n\n        NamedList<Integer> counts = (NamedList<Integer>) values.get(\"counts\");\n        for (Map.Entry<String, Integer> entry : counts)   {\n          rangeFacet.addCount(entry.getKey(), entry.getValue());\n        }\n\n        _facetRanges.add(rangeFacet);\n      }\n    }\n    \n    //Parse pivot facets\n    NamedList pf = (NamedList) info.get(\"facet_pivot\");\n    if (pf != null) {\n      _facetPivot = new NamedList<>();\n      for( int i=0; i<pf.size(); i++ ) {\n        _facetPivot.add( pf.getName(i), readPivots( (List<NamedList>)pf.getVal(i) ) );\n      }\n    }\n    \n    //Parse interval facets\n    NamedList<NamedList<Object>> intervalsNL = (NamedList<NamedList<Object>>) info.get(\"facet_intervals\");\n    if (intervalsNL != null) {\n      _intervalFacets = new ArrayList<>(intervalsNL.size());\n      for (Map.Entry<String, NamedList<Object>> intervalField : intervalsNL) {\n        String field = intervalField.getKey();\n        List<IntervalFacet.Count> counts = new ArrayList<IntervalFacet.Count>(intervalField.getValue().size());\n        for (Map.Entry<String, Object> interval : intervalField.getValue()) {\n          counts.add(new IntervalFacet.Count(interval.getKey(), (Integer)interval.getValue()));\n        }\n        _intervalFacets.add(new IntervalFacet(field, counts));\n      }\n    }\n  }\n\n","sourceOld":"  private void extractFacetInfo( NamedList<Object> info )\n  {\n    // Parse the queries\n    _facetQuery = new LinkedHashMap<>();\n    NamedList<Integer> fq = (NamedList<Integer>) info.get( \"facet_queries\" );\n    if (fq != null) {\n      for( Map.Entry<String, Integer> entry : fq ) {\n        _facetQuery.put( entry.getKey(), entry.getValue() );\n      }\n    }\n    \n    // Parse the facet info into fields\n    // TODO?? The list could be <int> or <long>?  If always <long> then we can switch to <Long>\n    NamedList<NamedList<Number>> ff = (NamedList<NamedList<Number>>) info.get( \"facet_fields\" );\n    if( ff != null ) {\n      _facetFields = new ArrayList<>( ff.size() );\n      _limitingFacets = new ArrayList<>( ff.size() );\n      \n      long minsize = _results == null ? Long.MAX_VALUE :_results.getNumFound();\n      for( Map.Entry<String,NamedList<Number>> facet : ff ) {\n        FacetField f = new FacetField( facet.getKey() );\n        for( Map.Entry<String, Number> entry : facet.getValue() ) {\n          f.add( entry.getKey(), entry.getValue().longValue() );\n        }\n        \n        _facetFields.add( f );\n        FacetField nl = f.getLimitingFields( minsize );\n        if( nl.getValueCount() > 0 ) {\n          _limitingFacets.add( nl );\n        }\n      }\n    }\n    \n    //Parse date facets\n    NamedList<NamedList<Object>> df = (NamedList<NamedList<Object>>) info.get(\"facet_dates\");\n    if (df != null) {\n      // System.out.println(df);\n      _facetDates = new ArrayList<>( df.size() );\n      for (Map.Entry<String, NamedList<Object>> facet : df) {\n        // System.out.println(\"Key: \" + facet.getKey() + \" Value: \" + facet.getValue());\n        NamedList<Object> values = facet.getValue();\n        String gap = (String) values.get(\"gap\");\n        Date end = (Date) values.get(\"end\");\n        FacetField f = new FacetField(facet.getKey(), gap, end);\n        \n        for (Map.Entry<String, Object> entry : values)   {\n          try {\n            f.add(entry.getKey(), Long.parseLong(entry.getValue().toString()));\n          } catch (NumberFormatException e) {\n            //Ignore for non-number responses which are already handled above\n          }\n        }\n        \n        _facetDates.add(f);\n      }\n    }\n\n    //Parse range facets\n    NamedList<NamedList<Object>> rf = (NamedList<NamedList<Object>>) info.get(\"facet_ranges\");\n    if (rf != null) {\n      _facetRanges = new ArrayList<>( rf.size() );\n      for (Map.Entry<String, NamedList<Object>> facet : rf) {\n        NamedList<Object> values = facet.getValue();\n        Object rawGap = values.get(\"gap\");\n\n        RangeFacet rangeFacet;\n        if (rawGap instanceof Number) {\n          Number gap = (Number) rawGap;\n          Number start = (Number) values.get(\"start\");\n          Number end = (Number) values.get(\"end\");\n\n          Number before = (Number) values.get(\"before\");\n          Number after = (Number) values.get(\"after\");\n          Number between = (Number) values.get(\"between\");\n\n          rangeFacet = new RangeFacet.Numeric(facet.getKey(), start, end, gap, before, after, between);\n        } else {\n          String gap = (String) rawGap;\n          Date start = (Date) values.get(\"start\");\n          Date end = (Date) values.get(\"end\");\n\n          Number before = (Number) values.get(\"before\");\n          Number after = (Number) values.get(\"after\");\n          Number between = (Number) values.get(\"between\");\n\n          rangeFacet = new RangeFacet.Date(facet.getKey(), start, end, gap, before, after, between);\n        }\n\n        NamedList<Integer> counts = (NamedList<Integer>) values.get(\"counts\");\n        for (Map.Entry<String, Integer> entry : counts)   {\n          rangeFacet.addCount(entry.getKey(), entry.getValue());\n        }\n\n        _facetRanges.add(rangeFacet);\n      }\n    }\n    \n    //Parse pivot facets\n    NamedList pf = (NamedList) info.get(\"facet_pivot\");\n    if (pf != null) {\n      _facetPivot = new NamedList<>();\n      for( int i=0; i<pf.size(); i++ ) {\n        _facetPivot.add( pf.getName(i), readPivots( (List<NamedList>)pf.getVal(i) ) );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22d0a81a05eba47d5e18976f17d88306b218cc22","date":1436341569,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#extractFacetInfo(NamedList[Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#extractFacetInfo(NamedList[Object]).mjava","sourceNew":"  private void extractFacetInfo( NamedList<Object> info )\n  {\n    // Parse the queries\n    _facetQuery = new LinkedHashMap<>();\n    NamedList<Integer> fq = (NamedList<Integer>) info.get( \"facet_queries\" );\n    if (fq != null) {\n      for( Map.Entry<String, Integer> entry : fq ) {\n        _facetQuery.put( entry.getKey(), entry.getValue() );\n      }\n    }\n    \n    // Parse the facet info into fields\n    // TODO?? The list could be <int> or <long>?  If always <long> then we can switch to <Long>\n    NamedList<NamedList<Number>> ff = (NamedList<NamedList<Number>>) info.get( \"facet_fields\" );\n    if( ff != null ) {\n      _facetFields = new ArrayList<>( ff.size() );\n      _limitingFacets = new ArrayList<>( ff.size() );\n      \n      long minsize = _results == null ? Long.MAX_VALUE :_results.getNumFound();\n      for( Map.Entry<String,NamedList<Number>> facet : ff ) {\n        FacetField f = new FacetField( facet.getKey() );\n        for( Map.Entry<String, Number> entry : facet.getValue() ) {\n          f.add( entry.getKey(), entry.getValue().longValue() );\n        }\n        \n        _facetFields.add( f );\n        FacetField nl = f.getLimitingFields( minsize );\n        if( nl.getValueCount() > 0 ) {\n          _limitingFacets.add( nl );\n        }\n      }\n    }\n    \n    //Parse date facets\n    NamedList<NamedList<Object>> df = (NamedList<NamedList<Object>>) info.get(\"facet_dates\");\n    if (df != null) {\n      // System.out.println(df);\n      _facetDates = new ArrayList<>( df.size() );\n      for (Map.Entry<String, NamedList<Object>> facet : df) {\n        // System.out.println(\"Key: \" + facet.getKey() + \" Value: \" + facet.getValue());\n        NamedList<Object> values = facet.getValue();\n        String gap = (String) values.get(\"gap\");\n        Date end = (Date) values.get(\"end\");\n        FacetField f = new FacetField(facet.getKey(), gap, end);\n        \n        for (Map.Entry<String, Object> entry : values)   {\n          try {\n            f.add(entry.getKey(), Long.parseLong(entry.getValue().toString()));\n          } catch (NumberFormatException e) {\n            //Ignore for non-number responses which are already handled above\n          }\n        }\n        \n        _facetDates.add(f);\n      }\n    }\n\n    //Parse range facets\n    NamedList<NamedList<Object>> rf = (NamedList<NamedList<Object>>) info.get(\"facet_ranges\");\n    if (rf != null) {\n      _facetRanges = extractRangeFacets(rf);\n    }\n    \n    //Parse pivot facets\n    NamedList pf = (NamedList) info.get(\"facet_pivot\");\n    if (pf != null) {\n      _facetPivot = new NamedList<>();\n      for( int i=0; i<pf.size(); i++ ) {\n        _facetPivot.add( pf.getName(i), readPivots( (List<NamedList>)pf.getVal(i) ) );\n      }\n    }\n    \n    //Parse interval facets\n    NamedList<NamedList<Object>> intervalsNL = (NamedList<NamedList<Object>>) info.get(\"facet_intervals\");\n    if (intervalsNL != null) {\n      _intervalFacets = new ArrayList<>(intervalsNL.size());\n      for (Map.Entry<String, NamedList<Object>> intervalField : intervalsNL) {\n        String field = intervalField.getKey();\n        List<IntervalFacet.Count> counts = new ArrayList<IntervalFacet.Count>(intervalField.getValue().size());\n        for (Map.Entry<String, Object> interval : intervalField.getValue()) {\n          counts.add(new IntervalFacet.Count(interval.getKey(), (Integer)interval.getValue()));\n        }\n        _intervalFacets.add(new IntervalFacet(field, counts));\n      }\n    }\n  }\n\n","sourceOld":"  private void extractFacetInfo( NamedList<Object> info )\n  {\n    // Parse the queries\n    _facetQuery = new LinkedHashMap<>();\n    NamedList<Integer> fq = (NamedList<Integer>) info.get( \"facet_queries\" );\n    if (fq != null) {\n      for( Map.Entry<String, Integer> entry : fq ) {\n        _facetQuery.put( entry.getKey(), entry.getValue() );\n      }\n    }\n    \n    // Parse the facet info into fields\n    // TODO?? The list could be <int> or <long>?  If always <long> then we can switch to <Long>\n    NamedList<NamedList<Number>> ff = (NamedList<NamedList<Number>>) info.get( \"facet_fields\" );\n    if( ff != null ) {\n      _facetFields = new ArrayList<>( ff.size() );\n      _limitingFacets = new ArrayList<>( ff.size() );\n      \n      long minsize = _results == null ? Long.MAX_VALUE :_results.getNumFound();\n      for( Map.Entry<String,NamedList<Number>> facet : ff ) {\n        FacetField f = new FacetField( facet.getKey() );\n        for( Map.Entry<String, Number> entry : facet.getValue() ) {\n          f.add( entry.getKey(), entry.getValue().longValue() );\n        }\n        \n        _facetFields.add( f );\n        FacetField nl = f.getLimitingFields( minsize );\n        if( nl.getValueCount() > 0 ) {\n          _limitingFacets.add( nl );\n        }\n      }\n    }\n    \n    //Parse date facets\n    NamedList<NamedList<Object>> df = (NamedList<NamedList<Object>>) info.get(\"facet_dates\");\n    if (df != null) {\n      // System.out.println(df);\n      _facetDates = new ArrayList<>( df.size() );\n      for (Map.Entry<String, NamedList<Object>> facet : df) {\n        // System.out.println(\"Key: \" + facet.getKey() + \" Value: \" + facet.getValue());\n        NamedList<Object> values = facet.getValue();\n        String gap = (String) values.get(\"gap\");\n        Date end = (Date) values.get(\"end\");\n        FacetField f = new FacetField(facet.getKey(), gap, end);\n        \n        for (Map.Entry<String, Object> entry : values)   {\n          try {\n            f.add(entry.getKey(), Long.parseLong(entry.getValue().toString()));\n          } catch (NumberFormatException e) {\n            //Ignore for non-number responses which are already handled above\n          }\n        }\n        \n        _facetDates.add(f);\n      }\n    }\n\n    //Parse range facets\n    NamedList<NamedList<Object>> rf = (NamedList<NamedList<Object>>) info.get(\"facet_ranges\");\n    if (rf != null) {\n      _facetRanges = new ArrayList<>( rf.size() );\n      for (Map.Entry<String, NamedList<Object>> facet : rf) {\n        NamedList<Object> values = facet.getValue();\n        Object rawGap = values.get(\"gap\");\n\n        RangeFacet rangeFacet;\n        if (rawGap instanceof Number) {\n          Number gap = (Number) rawGap;\n          Number start = (Number) values.get(\"start\");\n          Number end = (Number) values.get(\"end\");\n\n          Number before = (Number) values.get(\"before\");\n          Number after = (Number) values.get(\"after\");\n          Number between = (Number) values.get(\"between\");\n\n          rangeFacet = new RangeFacet.Numeric(facet.getKey(), start, end, gap, before, after, between);\n        } else {\n          String gap = (String) rawGap;\n          Date start = (Date) values.get(\"start\");\n          Date end = (Date) values.get(\"end\");\n\n          Number before = (Number) values.get(\"before\");\n          Number after = (Number) values.get(\"after\");\n          Number between = (Number) values.get(\"between\");\n\n          rangeFacet = new RangeFacet.Date(facet.getKey(), start, end, gap, before, after, between);\n        }\n\n        NamedList<Integer> counts = (NamedList<Integer>) values.get(\"counts\");\n        for (Map.Entry<String, Integer> entry : counts)   {\n          rangeFacet.addCount(entry.getKey(), entry.getValue());\n        }\n\n        _facetRanges.add(rangeFacet);\n      }\n    }\n    \n    //Parse pivot facets\n    NamedList pf = (NamedList) info.get(\"facet_pivot\");\n    if (pf != null) {\n      _facetPivot = new NamedList<>();\n      for( int i=0; i<pf.size(); i++ ) {\n        _facetPivot.add( pf.getName(i), readPivots( (List<NamedList>)pf.getVal(i) ) );\n      }\n    }\n    \n    //Parse interval facets\n    NamedList<NamedList<Object>> intervalsNL = (NamedList<NamedList<Object>>) info.get(\"facet_intervals\");\n    if (intervalsNL != null) {\n      _intervalFacets = new ArrayList<>(intervalsNL.size());\n      for (Map.Entry<String, NamedList<Object>> intervalField : intervalsNL) {\n        String field = intervalField.getKey();\n        List<IntervalFacet.Count> counts = new ArrayList<IntervalFacet.Count>(intervalField.getValue().size());\n        for (Map.Entry<String, Object> interval : intervalField.getValue()) {\n          counts.add(new IntervalFacet.Count(interval.getKey(), (Integer)interval.getValue()));\n        }\n        _intervalFacets.add(new IntervalFacet(field, counts));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15cb24c5fa70ba12290e43b3aa0feab5582863ee","date":1457033685,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#extractFacetInfo(NamedList[Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#extractFacetInfo(NamedList[Object]).mjava","sourceNew":"  private void extractFacetInfo( NamedList<Object> info )\n  {\n    // Parse the queries\n    _facetQuery = new LinkedHashMap<>();\n    NamedList<Integer> fq = (NamedList<Integer>) info.get( \"facet_queries\" );\n    if (fq != null) {\n      for( Map.Entry<String, Integer> entry : fq ) {\n        _facetQuery.put( entry.getKey(), entry.getValue() );\n      }\n    }\n    \n    // Parse the facet info into fields\n    // TODO?? The list could be <int> or <long>?  If always <long> then we can switch to <Long>\n    NamedList<NamedList<Number>> ff = (NamedList<NamedList<Number>>) info.get( \"facet_fields\" );\n    if( ff != null ) {\n      _facetFields = new ArrayList<>( ff.size() );\n      _limitingFacets = new ArrayList<>( ff.size() );\n      \n      long minsize = _results == null ? Long.MAX_VALUE :_results.getNumFound();\n      for( Map.Entry<String,NamedList<Number>> facet : ff ) {\n        FacetField f = new FacetField( facet.getKey() );\n        for( Map.Entry<String, Number> entry : facet.getValue() ) {\n          f.add( entry.getKey(), entry.getValue().longValue() );\n        }\n        \n        _facetFields.add( f );\n        FacetField nl = f.getLimitingFields( minsize );\n        if( nl.getValueCount() > 0 ) {\n          _limitingFacets.add( nl );\n        }\n      }\n    }\n    \n    //Parse range facets\n    NamedList<NamedList<Object>> rf = (NamedList<NamedList<Object>>) info.get(\"facet_ranges\");\n    if (rf != null) {\n      _facetRanges = extractRangeFacets(rf);\n    }\n    \n    //Parse pivot facets\n    NamedList pf = (NamedList) info.get(\"facet_pivot\");\n    if (pf != null) {\n      _facetPivot = new NamedList<>();\n      for( int i=0; i<pf.size(); i++ ) {\n        _facetPivot.add( pf.getName(i), readPivots( (List<NamedList>)pf.getVal(i) ) );\n      }\n    }\n    \n    //Parse interval facets\n    NamedList<NamedList<Object>> intervalsNL = (NamedList<NamedList<Object>>) info.get(\"facet_intervals\");\n    if (intervalsNL != null) {\n      _intervalFacets = new ArrayList<>(intervalsNL.size());\n      for (Map.Entry<String, NamedList<Object>> intervalField : intervalsNL) {\n        String field = intervalField.getKey();\n        List<IntervalFacet.Count> counts = new ArrayList<IntervalFacet.Count>(intervalField.getValue().size());\n        for (Map.Entry<String, Object> interval : intervalField.getValue()) {\n          counts.add(new IntervalFacet.Count(interval.getKey(), (Integer)interval.getValue()));\n        }\n        _intervalFacets.add(new IntervalFacet(field, counts));\n      }\n    }\n  }\n\n","sourceOld":"  private void extractFacetInfo( NamedList<Object> info )\n  {\n    // Parse the queries\n    _facetQuery = new LinkedHashMap<>();\n    NamedList<Integer> fq = (NamedList<Integer>) info.get( \"facet_queries\" );\n    if (fq != null) {\n      for( Map.Entry<String, Integer> entry : fq ) {\n        _facetQuery.put( entry.getKey(), entry.getValue() );\n      }\n    }\n    \n    // Parse the facet info into fields\n    // TODO?? The list could be <int> or <long>?  If always <long> then we can switch to <Long>\n    NamedList<NamedList<Number>> ff = (NamedList<NamedList<Number>>) info.get( \"facet_fields\" );\n    if( ff != null ) {\n      _facetFields = new ArrayList<>( ff.size() );\n      _limitingFacets = new ArrayList<>( ff.size() );\n      \n      long minsize = _results == null ? Long.MAX_VALUE :_results.getNumFound();\n      for( Map.Entry<String,NamedList<Number>> facet : ff ) {\n        FacetField f = new FacetField( facet.getKey() );\n        for( Map.Entry<String, Number> entry : facet.getValue() ) {\n          f.add( entry.getKey(), entry.getValue().longValue() );\n        }\n        \n        _facetFields.add( f );\n        FacetField nl = f.getLimitingFields( minsize );\n        if( nl.getValueCount() > 0 ) {\n          _limitingFacets.add( nl );\n        }\n      }\n    }\n    \n    //Parse date facets\n    NamedList<NamedList<Object>> df = (NamedList<NamedList<Object>>) info.get(\"facet_dates\");\n    if (df != null) {\n      // System.out.println(df);\n      _facetDates = new ArrayList<>( df.size() );\n      for (Map.Entry<String, NamedList<Object>> facet : df) {\n        // System.out.println(\"Key: \" + facet.getKey() + \" Value: \" + facet.getValue());\n        NamedList<Object> values = facet.getValue();\n        String gap = (String) values.get(\"gap\");\n        Date end = (Date) values.get(\"end\");\n        FacetField f = new FacetField(facet.getKey(), gap, end);\n        \n        for (Map.Entry<String, Object> entry : values)   {\n          try {\n            f.add(entry.getKey(), Long.parseLong(entry.getValue().toString()));\n          } catch (NumberFormatException e) {\n            //Ignore for non-number responses which are already handled above\n          }\n        }\n        \n        _facetDates.add(f);\n      }\n    }\n\n    //Parse range facets\n    NamedList<NamedList<Object>> rf = (NamedList<NamedList<Object>>) info.get(\"facet_ranges\");\n    if (rf != null) {\n      _facetRanges = extractRangeFacets(rf);\n    }\n    \n    //Parse pivot facets\n    NamedList pf = (NamedList) info.get(\"facet_pivot\");\n    if (pf != null) {\n      _facetPivot = new NamedList<>();\n      for( int i=0; i<pf.size(); i++ ) {\n        _facetPivot.add( pf.getName(i), readPivots( (List<NamedList>)pf.getVal(i) ) );\n      }\n    }\n    \n    //Parse interval facets\n    NamedList<NamedList<Object>> intervalsNL = (NamedList<NamedList<Object>>) info.get(\"facet_intervals\");\n    if (intervalsNL != null) {\n      _intervalFacets = new ArrayList<>(intervalsNL.size());\n      for (Map.Entry<String, NamedList<Object>> intervalField : intervalsNL) {\n        String field = intervalField.getKey();\n        List<IntervalFacet.Count> counts = new ArrayList<IntervalFacet.Count>(intervalField.getValue().size());\n        for (Map.Entry<String, Object> interval : intervalField.getValue()) {\n          counts.add(new IntervalFacet.Count(interval.getKey(), (Integer)interval.getValue()));\n        }\n        _intervalFacets.add(new IntervalFacet(field, counts));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#extractFacetInfo(NamedList[Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#extractFacetInfo(NamedList[Object]).mjava","sourceNew":"  private void extractFacetInfo( NamedList<Object> info )\n  {\n    // Parse the queries\n    _facetQuery = new LinkedHashMap<>();\n    NamedList<Integer> fq = (NamedList<Integer>) info.get( \"facet_queries\" );\n    if (fq != null) {\n      for( Map.Entry<String, Integer> entry : fq ) {\n        _facetQuery.put( entry.getKey(), entry.getValue() );\n      }\n    }\n    \n    // Parse the facet info into fields\n    // TODO?? The list could be <int> or <long>?  If always <long> then we can switch to <Long>\n    NamedList<NamedList<Number>> ff = (NamedList<NamedList<Number>>) info.get( \"facet_fields\" );\n    if( ff != null ) {\n      _facetFields = new ArrayList<>( ff.size() );\n      _limitingFacets = new ArrayList<>( ff.size() );\n      \n      long minsize = _results == null ? Long.MAX_VALUE :_results.getNumFound();\n      for( Map.Entry<String,NamedList<Number>> facet : ff ) {\n        FacetField f = new FacetField( facet.getKey() );\n        for( Map.Entry<String, Number> entry : facet.getValue() ) {\n          f.add( entry.getKey(), entry.getValue().longValue() );\n        }\n        \n        _facetFields.add( f );\n        FacetField nl = f.getLimitingFields( minsize );\n        if( nl.getValueCount() > 0 ) {\n          _limitingFacets.add( nl );\n        }\n      }\n    }\n    \n    //Parse range facets\n    NamedList<NamedList<Object>> rf = (NamedList<NamedList<Object>>) info.get(\"facet_ranges\");\n    if (rf != null) {\n      _facetRanges = extractRangeFacets(rf);\n    }\n    \n    //Parse pivot facets\n    NamedList pf = (NamedList) info.get(\"facet_pivot\");\n    if (pf != null) {\n      _facetPivot = new NamedList<>();\n      for( int i=0; i<pf.size(); i++ ) {\n        _facetPivot.add( pf.getName(i), readPivots( (List<NamedList>)pf.getVal(i) ) );\n      }\n    }\n    \n    //Parse interval facets\n    NamedList<NamedList<Object>> intervalsNL = (NamedList<NamedList<Object>>) info.get(\"facet_intervals\");\n    if (intervalsNL != null) {\n      _intervalFacets = new ArrayList<>(intervalsNL.size());\n      for (Map.Entry<String, NamedList<Object>> intervalField : intervalsNL) {\n        String field = intervalField.getKey();\n        List<IntervalFacet.Count> counts = new ArrayList<IntervalFacet.Count>(intervalField.getValue().size());\n        for (Map.Entry<String, Object> interval : intervalField.getValue()) {\n          counts.add(new IntervalFacet.Count(interval.getKey(), (Integer)interval.getValue()));\n        }\n        _intervalFacets.add(new IntervalFacet(field, counts));\n      }\n    }\n  }\n\n","sourceOld":"  private void extractFacetInfo( NamedList<Object> info )\n  {\n    // Parse the queries\n    _facetQuery = new LinkedHashMap<>();\n    NamedList<Integer> fq = (NamedList<Integer>) info.get( \"facet_queries\" );\n    if (fq != null) {\n      for( Map.Entry<String, Integer> entry : fq ) {\n        _facetQuery.put( entry.getKey(), entry.getValue() );\n      }\n    }\n    \n    // Parse the facet info into fields\n    // TODO?? The list could be <int> or <long>?  If always <long> then we can switch to <Long>\n    NamedList<NamedList<Number>> ff = (NamedList<NamedList<Number>>) info.get( \"facet_fields\" );\n    if( ff != null ) {\n      _facetFields = new ArrayList<>( ff.size() );\n      _limitingFacets = new ArrayList<>( ff.size() );\n      \n      long minsize = _results == null ? Long.MAX_VALUE :_results.getNumFound();\n      for( Map.Entry<String,NamedList<Number>> facet : ff ) {\n        FacetField f = new FacetField( facet.getKey() );\n        for( Map.Entry<String, Number> entry : facet.getValue() ) {\n          f.add( entry.getKey(), entry.getValue().longValue() );\n        }\n        \n        _facetFields.add( f );\n        FacetField nl = f.getLimitingFields( minsize );\n        if( nl.getValueCount() > 0 ) {\n          _limitingFacets.add( nl );\n        }\n      }\n    }\n    \n    //Parse date facets\n    NamedList<NamedList<Object>> df = (NamedList<NamedList<Object>>) info.get(\"facet_dates\");\n    if (df != null) {\n      // System.out.println(df);\n      _facetDates = new ArrayList<>( df.size() );\n      for (Map.Entry<String, NamedList<Object>> facet : df) {\n        // System.out.println(\"Key: \" + facet.getKey() + \" Value: \" + facet.getValue());\n        NamedList<Object> values = facet.getValue();\n        String gap = (String) values.get(\"gap\");\n        Date end = (Date) values.get(\"end\");\n        FacetField f = new FacetField(facet.getKey(), gap, end);\n        \n        for (Map.Entry<String, Object> entry : values)   {\n          try {\n            f.add(entry.getKey(), Long.parseLong(entry.getValue().toString()));\n          } catch (NumberFormatException e) {\n            //Ignore for non-number responses which are already handled above\n          }\n        }\n        \n        _facetDates.add(f);\n      }\n    }\n\n    //Parse range facets\n    NamedList<NamedList<Object>> rf = (NamedList<NamedList<Object>>) info.get(\"facet_ranges\");\n    if (rf != null) {\n      _facetRanges = extractRangeFacets(rf);\n    }\n    \n    //Parse pivot facets\n    NamedList pf = (NamedList) info.get(\"facet_pivot\");\n    if (pf != null) {\n      _facetPivot = new NamedList<>();\n      for( int i=0; i<pf.size(); i++ ) {\n        _facetPivot.add( pf.getName(i), readPivots( (List<NamedList>)pf.getVal(i) ) );\n      }\n    }\n    \n    //Parse interval facets\n    NamedList<NamedList<Object>> intervalsNL = (NamedList<NamedList<Object>>) info.get(\"facet_intervals\");\n    if (intervalsNL != null) {\n      _intervalFacets = new ArrayList<>(intervalsNL.size());\n      for (Map.Entry<String, NamedList<Object>> intervalField : intervalsNL) {\n        String field = intervalField.getKey();\n        List<IntervalFacet.Count> counts = new ArrayList<IntervalFacet.Count>(intervalField.getValue().size());\n        for (Map.Entry<String, Object> interval : intervalField.getValue()) {\n          counts.add(new IntervalFacet.Count(interval.getKey(), (Integer)interval.getValue()));\n        }\n        _intervalFacets.add(new IntervalFacet(field, counts));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7dfea4f7c80813344b0152e37fc18b31369e8ff","date":1592136683,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#extractFacetInfo(NamedList[Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#extractFacetInfo(NamedList[Object]).mjava","sourceNew":"  @SuppressWarnings({\"rawtypes\"})\n  private void extractFacetInfo( NamedList<Object> info )\n  {\n    // Parse the queries\n    _facetQuery = new LinkedHashMap<>();\n    NamedList<Integer> fq = (NamedList<Integer>) info.get( \"facet_queries\" );\n    if (fq != null) {\n      for( Map.Entry<String, Integer> entry : fq ) {\n        _facetQuery.put( entry.getKey(), entry.getValue() );\n      }\n    }\n    \n    // Parse the facet info into fields\n    // TODO?? The list could be <int> or <long>?  If always <long> then we can switch to <Long>\n    NamedList<NamedList<Number>> ff = (NamedList<NamedList<Number>>) info.get( \"facet_fields\" );\n    if( ff != null ) {\n      _facetFields = new ArrayList<>( ff.size() );\n      _limitingFacets = new ArrayList<>( ff.size() );\n      \n      long minsize = _results == null ? Long.MAX_VALUE :_results.getNumFound();\n      for( Map.Entry<String,NamedList<Number>> facet : ff ) {\n        FacetField f = new FacetField( facet.getKey() );\n        for( Map.Entry<String, Number> entry : facet.getValue() ) {\n          f.add( entry.getKey(), entry.getValue().longValue() );\n        }\n        \n        _facetFields.add( f );\n        FacetField nl = f.getLimitingFields( minsize );\n        if( nl.getValueCount() > 0 ) {\n          _limitingFacets.add( nl );\n        }\n      }\n    }\n    \n    //Parse range facets\n    NamedList<NamedList<Object>> rf = (NamedList<NamedList<Object>>) info.get(\"facet_ranges\");\n    if (rf != null) {\n      _facetRanges = extractRangeFacets(rf);\n    }\n    \n    //Parse pivot facets\n    NamedList pf = (NamedList) info.get(\"facet_pivot\");\n    if (pf != null) {\n      _facetPivot = new NamedList<>();\n      for( int i=0; i<pf.size(); i++ ) {\n        _facetPivot.add( pf.getName(i), readPivots( (List<NamedList>)pf.getVal(i) ) );\n      }\n    }\n    \n    //Parse interval facets\n    NamedList<NamedList<Object>> intervalsNL = (NamedList<NamedList<Object>>) info.get(\"facet_intervals\");\n    if (intervalsNL != null) {\n      _intervalFacets = new ArrayList<>(intervalsNL.size());\n      for (Map.Entry<String, NamedList<Object>> intervalField : intervalsNL) {\n        String field = intervalField.getKey();\n        List<IntervalFacet.Count> counts = new ArrayList<IntervalFacet.Count>(intervalField.getValue().size());\n        for (Map.Entry<String, Object> interval : intervalField.getValue()) {\n          counts.add(new IntervalFacet.Count(interval.getKey(), (Integer)interval.getValue()));\n        }\n        _intervalFacets.add(new IntervalFacet(field, counts));\n      }\n    }\n  }\n\n","sourceOld":"  private void extractFacetInfo( NamedList<Object> info )\n  {\n    // Parse the queries\n    _facetQuery = new LinkedHashMap<>();\n    NamedList<Integer> fq = (NamedList<Integer>) info.get( \"facet_queries\" );\n    if (fq != null) {\n      for( Map.Entry<String, Integer> entry : fq ) {\n        _facetQuery.put( entry.getKey(), entry.getValue() );\n      }\n    }\n    \n    // Parse the facet info into fields\n    // TODO?? The list could be <int> or <long>?  If always <long> then we can switch to <Long>\n    NamedList<NamedList<Number>> ff = (NamedList<NamedList<Number>>) info.get( \"facet_fields\" );\n    if( ff != null ) {\n      _facetFields = new ArrayList<>( ff.size() );\n      _limitingFacets = new ArrayList<>( ff.size() );\n      \n      long minsize = _results == null ? Long.MAX_VALUE :_results.getNumFound();\n      for( Map.Entry<String,NamedList<Number>> facet : ff ) {\n        FacetField f = new FacetField( facet.getKey() );\n        for( Map.Entry<String, Number> entry : facet.getValue() ) {\n          f.add( entry.getKey(), entry.getValue().longValue() );\n        }\n        \n        _facetFields.add( f );\n        FacetField nl = f.getLimitingFields( minsize );\n        if( nl.getValueCount() > 0 ) {\n          _limitingFacets.add( nl );\n        }\n      }\n    }\n    \n    //Parse range facets\n    NamedList<NamedList<Object>> rf = (NamedList<NamedList<Object>>) info.get(\"facet_ranges\");\n    if (rf != null) {\n      _facetRanges = extractRangeFacets(rf);\n    }\n    \n    //Parse pivot facets\n    NamedList pf = (NamedList) info.get(\"facet_pivot\");\n    if (pf != null) {\n      _facetPivot = new NamedList<>();\n      for( int i=0; i<pf.size(); i++ ) {\n        _facetPivot.add( pf.getName(i), readPivots( (List<NamedList>)pf.getVal(i) ) );\n      }\n    }\n    \n    //Parse interval facets\n    NamedList<NamedList<Object>> intervalsNL = (NamedList<NamedList<Object>>) info.get(\"facet_intervals\");\n    if (intervalsNL != null) {\n      _intervalFacets = new ArrayList<>(intervalsNL.size());\n      for (Map.Entry<String, NamedList<Object>> intervalField : intervalsNL) {\n        String field = intervalField.getKey();\n        List<IntervalFacet.Count> counts = new ArrayList<IntervalFacet.Count>(intervalField.getValue().size());\n        for (Map.Entry<String, Object> interval : intervalField.getValue()) {\n          counts.add(new IntervalFacet.Count(interval.getKey(), (Integer)interval.getValue()));\n        }\n        _intervalFacets.add(new IntervalFacet(field, counts));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6d52c103ec2df541e0c5e0334fa88bb8d3573a75"],"6d52c103ec2df541e0c5e0334fa88bb8d3573a75":["c0474ad4224e9573bcf8e80349a1489de3ee7f9c"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"c0474ad4224e9573bcf8e80349a1489de3ee7f9c":["b4f1e070470c46013e0ab2939d8806159ae002a6"],"15cb24c5fa70ba12290e43b3aa0feab5582863ee":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"4b74869edee26aa619609ae7a51351466ba06d39":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b4f1e070470c46013e0ab2939d8806159ae002a6":["c26f00b574427b55127e869b935845554afde1fa"],"22d0a81a05eba47d5e18976f17d88306b218cc22":["4b74869edee26aa619609ae7a51351466ba06d39"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["22d0a81a05eba47d5e18976f17d88306b218cc22","15cb24c5fa70ba12290e43b3aa0feab5582863ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4b74869edee26aa619609ae7a51351466ba06d39"],"6d52c103ec2df541e0c5e0334fa88bb8d3573a75":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c26f00b574427b55127e869b935845554afde1fa":["b4f1e070470c46013e0ab2939d8806159ae002a6"],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c0474ad4224e9573bcf8e80349a1489de3ee7f9c":["6d52c103ec2df541e0c5e0334fa88bb8d3573a75"],"15cb24c5fa70ba12290e43b3aa0feab5582863ee":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"4b74869edee26aa619609ae7a51351466ba06d39":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"b4f1e070470c46013e0ab2939d8806159ae002a6":["c0474ad4224e9573bcf8e80349a1489de3ee7f9c"],"22d0a81a05eba47d5e18976f17d88306b218cc22":["15cb24c5fa70ba12290e43b3aa0feab5582863ee","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}