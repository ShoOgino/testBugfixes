{"path":"lucene/core/src/java/org/apache/lucene/index/FreqProxFields.FreqProxTermsEnum#postings(PostingsEnum,int).mjava","commits":[{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FreqProxFields.FreqProxTermsEnum#postings(PostingsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FreqProxFields.FreqProxTermsEnum#postings(Bits,PostingsEnum,int).mjava","sourceNew":"    @Override\n    public PostingsEnum postings(PostingsEnum reuse, int flags) {\n      if (PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {\n        FreqProxPostingsEnum posEnum;\n\n        if (!terms.hasProx) {\n          // Caller wants positions but we didn't index them;\n          // don't lie:\n          throw new IllegalArgumentException(\"did not index positions\");\n        }\n\n        if (!terms.hasOffsets && PostingsEnum.featureRequested(flags, PostingsEnum.OFFSETS)) {\n          // Caller wants offsets but we didn't index them;\n          // don't lie:\n          throw new IllegalArgumentException(\"did not index offsets\");\n        }\n\n        if (reuse instanceof FreqProxPostingsEnum) {\n          posEnum = (FreqProxPostingsEnum) reuse;\n          if (posEnum.postingsArray != postingsArray) {\n            posEnum = new FreqProxPostingsEnum(terms, postingsArray);\n          }\n        } else {\n          posEnum = new FreqProxPostingsEnum(terms, postingsArray);\n        }\n        posEnum.reset(sortedTermIDs[ord]);\n        return posEnum;\n      }\n\n      FreqProxDocsEnum docsEnum;\n\n      if (!terms.hasFreq && PostingsEnum.featureRequested(flags, PostingsEnum.FREQS)) {\n        // Caller wants freqs but we didn't index them;\n        // don't lie:\n        throw new IllegalArgumentException(\"did not index freq\");\n      }\n\n      if (reuse instanceof FreqProxDocsEnum) {\n        docsEnum = (FreqProxDocsEnum) reuse;\n        if (docsEnum.postingsArray != postingsArray) {\n          docsEnum = new FreqProxDocsEnum(terms, postingsArray);\n        }\n      } else {\n        docsEnum = new FreqProxDocsEnum(terms, postingsArray);\n      }\n      docsEnum.reset(sortedTermIDs[ord]);\n      return docsEnum;\n    }\n\n","sourceOld":"    @Override\n    public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, int flags) {\n      if (liveDocs != null) {\n        throw new IllegalArgumentException(\"liveDocs must be null\");\n      }\n\n      if (PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {\n        FreqProxPostingsEnum posEnum;\n\n        if (!terms.hasProx) {\n          // Caller wants positions but we didn't index them;\n          // don't lie:\n          throw new IllegalArgumentException(\"did not index positions\");\n        }\n\n        if (!terms.hasOffsets && PostingsEnum.featureRequested(flags, PostingsEnum.OFFSETS)) {\n          // Caller wants offsets but we didn't index them;\n          // don't lie:\n          throw new IllegalArgumentException(\"did not index offsets\");\n        }\n\n        if (reuse instanceof FreqProxPostingsEnum) {\n          posEnum = (FreqProxPostingsEnum) reuse;\n          if (posEnum.postingsArray != postingsArray) {\n            posEnum = new FreqProxPostingsEnum(terms, postingsArray);\n          }\n        } else {\n          posEnum = new FreqProxPostingsEnum(terms, postingsArray);\n        }\n        posEnum.reset(sortedTermIDs[ord]);\n        return posEnum;\n      }\n\n      FreqProxDocsEnum docsEnum;\n\n      if (!terms.hasFreq && PostingsEnum.featureRequested(flags, PostingsEnum.FREQS)) {\n        // Caller wants freqs but we didn't index them;\n        // don't lie:\n        throw new IllegalArgumentException(\"did not index freq\");\n      }\n\n      if (reuse instanceof FreqProxDocsEnum) {\n        docsEnum = (FreqProxDocsEnum) reuse;\n        if (docsEnum.postingsArray != postingsArray) {\n          docsEnum = new FreqProxDocsEnum(terms, postingsArray);\n        }\n      } else {\n        docsEnum = new FreqProxDocsEnum(terms, postingsArray);\n      }\n      docsEnum.reset(sortedTermIDs[ord]);\n      return docsEnum;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4464508ee83288c8c4585b533f9faaa93aa314"]},"commit2Childs":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}