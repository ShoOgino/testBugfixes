{"path":"lucene/core/src/test/org/apache/lucene/util/TestSmallFloat#testInt4().mjava","commits":[{"id":"615370d2b876c3435773b5174df2e2242ad7981a","date":1495117651,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestSmallFloat#testInt4().mjava","pathOld":"/dev/null","sourceNew":"  public void testInt4() {\n    for (int i = 0; i <= 16; ++i) {\n      // all values in 0-16 are encoded accurately\n      assertEquals(i, SmallFloat.int4ToLong(SmallFloat.longToInt4(i)));\n    }\n    final int maxEncoded = SmallFloat.longToInt4(Long.MAX_VALUE);\n    for (int i = 1; i < maxEncoded; ++i) {\n      assertTrue(SmallFloat.int4ToLong(i) > SmallFloat.int4ToLong(i - 1));\n    }\n    final int iters = atLeast(1000);\n    for (int iter = 0; iter < iters; ++iter) {\n      final long l = TestUtil.nextLong(random(), 0, 1L << TestUtil.nextInt(random(), 5, 61));\n      int numBits = 64 - Long.numberOfLeadingZeros(l);\n      long expected = l;\n      if (numBits > 4) {\n        long mask = ~0L << (numBits - 4);\n        expected &= mask;\n      }\n      long l2 = SmallFloat.int4ToLong(SmallFloat.longToInt4(l));\n      assertEquals(expected, l2);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestSmallFloat#testInt4().mjava","pathOld":"/dev/null","sourceNew":"  public void testInt4() {\n    for (int i = 0; i <= 16; ++i) {\n      // all values in 0-16 are encoded accurately\n      assertEquals(i, SmallFloat.int4ToLong(SmallFloat.longToInt4(i)));\n    }\n    final int maxEncoded = SmallFloat.longToInt4(Long.MAX_VALUE);\n    for (int i = 1; i < maxEncoded; ++i) {\n      assertTrue(SmallFloat.int4ToLong(i) > SmallFloat.int4ToLong(i - 1));\n    }\n    final int iters = atLeast(1000);\n    for (int iter = 0; iter < iters; ++iter) {\n      final long l = TestUtil.nextLong(random(), 0, 1L << TestUtil.nextInt(random(), 5, 61));\n      int numBits = 64 - Long.numberOfLeadingZeros(l);\n      long expected = l;\n      if (numBits > 4) {\n        long mask = ~0L << (numBits - 4);\n        expected &= mask;\n      }\n      long l2 = SmallFloat.int4ToLong(SmallFloat.longToInt4(l));\n      assertEquals(expected, l2);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","615370d2b876c3435773b5174df2e2242ad7981a"],"615370d2b876c3435773b5174df2e2242ad7981a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["615370d2b876c3435773b5174df2e2242ad7981a"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"615370d2b876c3435773b5174df2e2242ad7981a":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","615370d2b876c3435773b5174df2e2242ad7981a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}