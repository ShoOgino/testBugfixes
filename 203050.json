{"path":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRScoringQuery#hashCode().mjava","commits":[{"id":"58c36d634c9789cb739fbd175c1a8d50b3303f6b","date":1478022614,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRScoringQuery#hashCode().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int hashCode() {\n    final int prime = 31;\n    int result = classHash();\n    result = (prime * result) + ((ltrScoringModel == null) ? 0 : ltrScoringModel.hashCode());\n    result = (prime * result)\n        + ((originalQuery == null) ? 0 : originalQuery.hashCode());\n    if (efi == null) {\n      result = (prime * result) + 0;\n    }\n    else {\n      for (final Map.Entry<String,String[]> entry : efi.entrySet()) {\n        final String key = entry.getKey();\n        final String[] values = entry.getValue();\n        result = (prime * result) + key.hashCode();\n        result = (prime * result) + Arrays.hashCode(values);\n      }\n    }\n    result = (prime * result) + this.toString().hashCode();\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRScoringQuery#hashCode().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int hashCode() {\n    final int prime = 31;\n    int result = classHash();\n    result = (prime * result) + ((ltrScoringModel == null) ? 0 : ltrScoringModel.hashCode());\n    result = (prime * result)\n        + ((originalQuery == null) ? 0 : originalQuery.hashCode());\n    if (efi == null) {\n      result = (prime * result) + 0;\n    }\n    else {\n      for (final Map.Entry<String,String[]> entry : efi.entrySet()) {\n        final String key = entry.getKey();\n        final String[] values = entry.getValue();\n        result = (prime * result) + key.hashCode();\n        result = (prime * result) + Arrays.hashCode(values);\n      }\n    }\n    result = (prime * result) + this.toString().hashCode();\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"]},"commit2Childs":{"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["9720b151fde2073f4e401450f4574e5f31c2d0ff","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9720b151fde2073f4e401450f4574e5f31c2d0ff","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}