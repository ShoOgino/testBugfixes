{"path":"lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","sourceNew":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeYield();\n    if (!delegate.fileExists(name))\n      throw new FileNotFoundException(name);\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput ii = new MockIndexInputWrapper(this, name, delegate.openInput(name, LuceneTestCase.newIOContext(randomState)));\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeYield();\n    if (!delegate.fileExists(name))\n      throw new FileNotFoundException(name);\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput ii = new MockIndexInputWrapper(this, name, delegate.openInput(name, LuceneTestCase.newIOContext(randomState)));\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","sourceNew":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeYield();\n    if (failOnOpenInput) {\n      maybeThrowDeterministicException();\n    }\n    if (!delegate.fileExists(name))\n      throw new FileNotFoundException(name);\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput ii = new MockIndexInputWrapper(this, name, delegate.openInput(name, LuceneTestCase.newIOContext(randomState)));\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeYield();\n    if (!delegate.fileExists(name))\n      throw new FileNotFoundException(name);\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput ii = new MockIndexInputWrapper(this, name, delegate.openInput(name, LuceneTestCase.newIOContext(randomState)));\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","sourceNew":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeYield();\n    if (failOnOpenInput) {\n      maybeThrowDeterministicException();\n    }\n    if (!delegate.fileExists(name))\n      throw new FileNotFoundException(name);\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput ii = new MockIndexInputWrapper(this, name, delegate.openInput(name, LuceneTestCase.newIOContext(randomState)));\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeYield();\n    if (failOnOpenInput) {\n      maybeThrowDeterministicException();\n    }\n    if (!delegate.fileExists(name))\n      throw new FileNotFoundException(name);\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput ii = new MockIndexInputWrapper(this, name, delegate.openInput(name, LuceneTestCase.newIOContext(randomState)));\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3cc749c053615f5871f3b95715fe292f34e70a53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["3cc749c053615f5871f3b95715fe292f34e70a53"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"3cc749c053615f5871f3b95715fe292f34e70a53":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}