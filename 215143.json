{"path":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#testInvalidDateException().mjava","commits":[{"id":"cea86be0df3af191454c4312a9255681b0b80673","date":1548614728,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#testInvalidDateException().mjava","pathOld":"/dev/null","sourceNew":"  public void testInvalidDateException() throws ParseException {\n    \n    expectThrows(ParseException.class, () -> {\n      tree.parseCalendar(\"2000-11T13\");\n    });\n    expectThrows(ParseException.class, () -> {\n      tree.parseCalendar(\"2000-11-10T13-1\");\n    });\n    {\n        String causeMessage = expectThrows(ParseException.class, () -> {\n          tree.parseCalendar(\"2000-11-10T13Z1\");\n        }).getCause().getMessage();\n        assertTrue(causeMessage +\" has actual delimeter\", causeMessage.contains(\"Z\"));\n        assertTrue(causeMessage +\" has expected delimeter\",causeMessage.contains(\":\"));\n        assertFalse(causeMessage +\" has no input\",causeMessage.contains(\"2000-11-10\"));\n    }\n    expectThrows(ParseException.class, () -> {\n      tree.parseCalendar(\"2000T13Z\");\n    });\n    expectThrows(ParseException.class, () -> {\n      tree.parseCalendar(\"2000-11T13Z\");\n    });\n    {\n      String causeMessage = expectThrows(ParseException.class, () -> {\n        tree.parseCalendar(\"2000-13-12\");\n      }).getCause().getMessage();\n      assertTrue(causeMessage +\" has actual value\",causeMessage.contains(\"13\"));\n      assertFalse(causeMessage +\" has no input\",causeMessage.contains(\"2000-13-12\"));\n    }\n    expectThrows(ParseException.class, () -> {\n      tree.parseCalendar(\"2000-13-41T13Z\");\n    });\n    expectThrows(ParseException.class, () -> {\n      tree.parseCalendar(\"2000-11-12T25Z\");\n    });\n    expectThrows(ParseException.class, () -> {\n      tree.parseCalendar(\"2000-11-12T25:61Z\");\n    });\n    expectThrows(ParseException.class, () -> {\n      tree.parseCalendar(\"2000-11-12T25:14:61Z\");\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50aeb34a24c3517f5c50aa5020590923e82f584e","date":1548663274,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#testInvalidDateException().mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#testInvalidDateException().mjava","sourceNew":"  public void testInvalidDateException() throws ParseException {\n    {\n      Calendar jurasic = tree.parseCalendar(\"-187183959-07-06T11:00:57.156\");\n      assertEquals(187183960, jurasic.get(Calendar.YEAR));\n      assertEquals(0, jurasic.get(Calendar.ERA));\n    }\n    expectThrows(ParseException.class, () -> {\n      tree.parseCalendar(\"2000-11T13\");\n    });\n    expectThrows(ParseException.class, () -> {\n      tree.parseCalendar(\"2000-11-10T13-1\");\n    });\n    {\n        String causeMessage = expectThrows(ParseException.class, () -> {\n          tree.parseCalendar(\"2000-11-10T13Z1\");\n        }).getCause().getMessage();\n        assertTrue(causeMessage +\" has actual delimeter\", causeMessage.contains(\"Z\"));\n        assertTrue(causeMessage +\" has expected delimeter\",causeMessage.contains(\":\"));\n        assertFalse(causeMessage +\" has no input\",causeMessage.contains(\"2000-11-10\"));\n    }\n    expectThrows(ParseException.class, () -> {\n      tree.parseCalendar(\"2000T13Z\");\n    });\n    expectThrows(ParseException.class, () -> {\n      tree.parseCalendar(\"2000-11T13Z\");\n    });\n    {\n      String causeMessage = expectThrows(ParseException.class, () -> {\n        tree.parseCalendar(\"2000-13-12\");\n      }).getCause().getMessage();\n      assertTrue(causeMessage +\" has actual value\",causeMessage.contains(\"13\"));\n      assertFalse(causeMessage +\" has no input\",causeMessage.contains(\"2000-13-12\"));\n    }\n    expectThrows(ParseException.class, () -> {\n      tree.parseCalendar(\"2000-13-41T13Z\");\n    });\n    expectThrows(ParseException.class, () -> {\n      tree.parseCalendar(\"2000-11-12T25Z\");\n    });\n    expectThrows(ParseException.class, () -> {\n      tree.parseCalendar(\"2000-11-12T25:61Z\");\n    });\n    expectThrows(ParseException.class, () -> {\n      tree.parseCalendar(\"2000-11-12T25:14:61Z\");\n    });\n  }\n\n","sourceOld":"  public void testInvalidDateException() throws ParseException {\n    \n    expectThrows(ParseException.class, () -> {\n      tree.parseCalendar(\"2000-11T13\");\n    });\n    expectThrows(ParseException.class, () -> {\n      tree.parseCalendar(\"2000-11-10T13-1\");\n    });\n    {\n        String causeMessage = expectThrows(ParseException.class, () -> {\n          tree.parseCalendar(\"2000-11-10T13Z1\");\n        }).getCause().getMessage();\n        assertTrue(causeMessage +\" has actual delimeter\", causeMessage.contains(\"Z\"));\n        assertTrue(causeMessage +\" has expected delimeter\",causeMessage.contains(\":\"));\n        assertFalse(causeMessage +\" has no input\",causeMessage.contains(\"2000-11-10\"));\n    }\n    expectThrows(ParseException.class, () -> {\n      tree.parseCalendar(\"2000T13Z\");\n    });\n    expectThrows(ParseException.class, () -> {\n      tree.parseCalendar(\"2000-11T13Z\");\n    });\n    {\n      String causeMessage = expectThrows(ParseException.class, () -> {\n        tree.parseCalendar(\"2000-13-12\");\n      }).getCause().getMessage();\n      assertTrue(causeMessage +\" has actual value\",causeMessage.contains(\"13\"));\n      assertFalse(causeMessage +\" has no input\",causeMessage.contains(\"2000-13-12\"));\n    }\n    expectThrows(ParseException.class, () -> {\n      tree.parseCalendar(\"2000-13-41T13Z\");\n    });\n    expectThrows(ParseException.class, () -> {\n      tree.parseCalendar(\"2000-11-12T25Z\");\n    });\n    expectThrows(ParseException.class, () -> {\n      tree.parseCalendar(\"2000-11-12T25:61Z\");\n    });\n    expectThrows(ParseException.class, () -> {\n      tree.parseCalendar(\"2000-11-12T25:14:61Z\");\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cea86be0df3af191454c4312a9255681b0b80673":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"50aeb34a24c3517f5c50aa5020590923e82f584e":["cea86be0df3af191454c4312a9255681b0b80673"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["50aeb34a24c3517f5c50aa5020590923e82f584e"]},"commit2Childs":{"cea86be0df3af191454c4312a9255681b0b80673":["50aeb34a24c3517f5c50aa5020590923e82f584e"],"50aeb34a24c3517f5c50aa5020590923e82f584e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cea86be0df3af191454c4312a9255681b0b80673"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}