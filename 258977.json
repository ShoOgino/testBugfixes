{"path":"solr/core/src/java/org/apache/solr/search/DocSetBase#getBits().mjava","commits":[{"id":"22e7d2e6a853c3178eccc356ffa07e7ebca55cdd","date":1332689453,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetBase#getBits().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSetBase[DocSet]#getBits().mjava","sourceNew":"  /**\n   * Inefficient base implementation.\n   *\n   * @see BitDocSet#getBits\n   */\n  public OpenBitSet getBits() {\n    OpenBitSet bits = new OpenBitSet();\n    for (DocIterator iter = iterator(); iter.hasNext();) {\n      bits.set(iter.nextDoc());\n    }\n    return bits;\n  }\n","sourceOld":"  /**\n   * Inefficient base implementation.\n   *\n   * @see BitDocSet#getBits\n   */\n  public OpenBitSet getBits() {\n    OpenBitSet bits = new OpenBitSet();\n    for (DocIterator iter = iterator(); iter.hasNext();) {\n      bits.set(iter.nextDoc());\n    }\n    return bits;\n  }\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetBase#getBits().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSetBase#getBits().mjava","sourceNew":"  /**\n   * Inefficient base implementation.\n   *\n   * @see BitDocSet#getBits\n   */\n  @Override\n  public OpenBitSet getBits() {\n    OpenBitSet bits = new OpenBitSet();\n    for (DocIterator iter = iterator(); iter.hasNext();) {\n      bits.set(iter.nextDoc());\n    }\n    return bits;\n  }\n","sourceOld":"  /**\n   * Inefficient base implementation.\n   *\n   * @see BitDocSet#getBits\n   */\n  public OpenBitSet getBits() {\n    OpenBitSet bits = new OpenBitSet();\n    for (DocIterator iter = iterator(); iter.hasNext();) {\n      bits.set(iter.nextDoc());\n    }\n    return bits;\n  }\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetBase#getBits().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSetBase#getBits().mjava","sourceNew":"  /**\n   * Inefficient base implementation.\n   *\n   * @see BitDocSet#getBits\n   */\n  @Override\n  public OpenBitSet getBits() {\n    OpenBitSet bits = new OpenBitSet();\n    for (DocIterator iter = iterator(); iter.hasNext();) {\n      bits.set(iter.nextDoc());\n    }\n    return bits;\n  }\n","sourceOld":"  /**\n   * Inefficient base implementation.\n   *\n   * @see BitDocSet#getBits\n   */\n  public OpenBitSet getBits() {\n    OpenBitSet bits = new OpenBitSet();\n    for (DocIterator iter = iterator(); iter.hasNext();) {\n      bits.set(iter.nextDoc());\n    }\n    return bits;\n  }\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1","date":1392536197,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetBase#getBits().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSetBase#getBits().mjava","sourceNew":"  /**\n   * Return a {@link FixedBitSet} with a bit set for every document in this\n   * {@link DocSet}. The default implementation iterates on all docs and sets\n   * the relevant bits. You should override if you can provide a more efficient\n   * implementation.\n   */\n  protected FixedBitSet getBits() {\n    FixedBitSet bits = new FixedBitSet(64);\n    for (DocIterator iter = iterator(); iter.hasNext();) {\n      int nextDoc = iter.nextDoc();\n      bits = FixedBitSet.ensureCapacity(bits, nextDoc);\n      bits.set(nextDoc);\n    }\n    return bits;\n  }\n\n","sourceOld":"  /**\n   * Inefficient base implementation.\n   *\n   * @see BitDocSet#getBits\n   */\n  @Override\n  public OpenBitSet getBits() {\n    OpenBitSet bits = new OpenBitSet();\n    for (DocIterator iter = iterator(); iter.hasNext();) {\n      bits.set(iter.nextDoc());\n    }\n    return bits;\n  }\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3","date":1485881524,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetBase#getBits().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSetBase#getBits().mjava","sourceNew":"  /**\n   * Return a {@link FixedBitSet} with a bit set for every document in this\n   * {@link DocSet}. The default implementation iterates on all docs and sets\n   * the relevant bits. You should override if you can provide a more efficient\n   * implementation.\n   */\n  protected FixedBitSet getBits() {\n    FixedBitSet bits = new FixedBitSet(size());\n    for (DocIterator iter = iterator(); iter.hasNext();) {\n      int nextDoc = iter.nextDoc();\n      bits = FixedBitSet.ensureCapacity(bits, nextDoc);\n      bits.set(nextDoc);\n    }\n    return bits;\n  }\n\n","sourceOld":"  /**\n   * Return a {@link FixedBitSet} with a bit set for every document in this\n   * {@link DocSet}. The default implementation iterates on all docs and sets\n   * the relevant bits. You should override if you can provide a more efficient\n   * implementation.\n   */\n  protected FixedBitSet getBits() {\n    FixedBitSet bits = new FixedBitSet(64);\n    for (DocIterator iter = iterator(); iter.hasNext();) {\n      int nextDoc = iter.nextDoc();\n      bits = FixedBitSet.ensureCapacity(bits, nextDoc);\n      bits.set(nextDoc);\n    }\n    return bits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetBase#getBits().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSetBase#getBits().mjava","sourceNew":"  /**\n   * Return a {@link FixedBitSet} with a bit set for every document in this\n   * {@link DocSet}. The default implementation iterates on all docs and sets\n   * the relevant bits. You should override if you can provide a more efficient\n   * implementation.\n   */\n  protected FixedBitSet getBits() {\n    FixedBitSet bits = new FixedBitSet(size());\n    for (DocIterator iter = iterator(); iter.hasNext();) {\n      int nextDoc = iter.nextDoc();\n      bits = FixedBitSet.ensureCapacity(bits, nextDoc);\n      bits.set(nextDoc);\n    }\n    return bits;\n  }\n\n","sourceOld":"  /**\n   * Return a {@link FixedBitSet} with a bit set for every document in this\n   * {@link DocSet}. The default implementation iterates on all docs and sets\n   * the relevant bits. You should override if you can provide a more efficient\n   * implementation.\n   */\n  protected FixedBitSet getBits() {\n    FixedBitSet bits = new FixedBitSet(64);\n    for (DocIterator iter = iterator(); iter.hasNext();) {\n      int nextDoc = iter.nextDoc();\n      bits = FixedBitSet.ensureCapacity(bits, nextDoc);\n      bits.set(nextDoc);\n    }\n    return bits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90440a2155c2b9ce30bf8fc29b1c978c58dae1e7","date":1582642100,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/DocSetBase#getBits().mjava","sourceNew":null,"sourceOld":"  /**\n   * Return a {@link FixedBitSet} with a bit set for every document in this\n   * {@link DocSet}. The default implementation iterates on all docs and sets\n   * the relevant bits. You should override if you can provide a more efficient\n   * implementation.\n   */\n  protected FixedBitSet getBits() {\n    FixedBitSet bits = new FixedBitSet(size());\n    for (DocIterator iter = iterator(); iter.hasNext();) {\n      int nextDoc = iter.nextDoc();\n      bits = FixedBitSet.ensureCapacity(bits, nextDoc);\n      bits.set(nextDoc);\n    }\n    return bits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["22e7d2e6a853c3178eccc356ffa07e7ebca55cdd","7530de27b87b961b51f01bd1299b7004d46e8823"],"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1":["7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a69cf7f1b4cac5d5b1363402b565cd535f13e6a1","0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3"],"0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3":["a69cf7f1b4cac5d5b1363402b565cd535f13e6a1"],"22e7d2e6a853c3178eccc356ffa07e7ebca55cdd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"90440a2155c2b9ce30bf8fc29b1c978c58dae1e7":["0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3"],"7530de27b87b961b51f01bd1299b7004d46e8823":["22e7d2e6a853c3178eccc356ffa07e7ebca55cdd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90440a2155c2b9ce30bf8fc29b1c978c58dae1e7"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["22e7d2e6a853c3178eccc356ffa07e7ebca55cdd"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"22e7d2e6a853c3178eccc356ffa07e7ebca55cdd":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","90440a2155c2b9ce30bf8fc29b1c978c58dae1e7"],"90440a2155c2b9ce30bf8fc29b1c978c58dae1e7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a69cf7f1b4cac5d5b1363402b565cd535f13e6a1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}