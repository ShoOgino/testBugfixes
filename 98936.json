{"path":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#setPropWithStandardRequest(Slice,Replica,String).mjava","commits":[{"id":"73fd358e8ec697393d56617f4d9cedaca74dca14","date":1547954439,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#setPropWithStandardRequest(Slice,Replica,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#issuePreferred(String,Replica).mjava","sourceNew":"  void setPropWithStandardRequest(Slice slice, Replica rep, String prop) throws IOException, SolrServerException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString());\n\n    params.set(\"collection\", COLLECTION_NAME);\n    params.set(\"shard\", slice.getName());\n    params.set(\"replica\", rep.getName());\n    params.set(\"property\", prop);\n    params.set(\"property.value\", \"true\");\n    // Test to insure that implicit shardUnique is added for preferredLeader.\n    if (prop.toLowerCase(Locale.ROOT).equals(\"preferredleader\") == false) {\n      params.set(\"shardUnique\", \"true\");\n    }\n\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    cluster.getSolrClient().request(request);\n    String propLC = prop.toLowerCase(Locale.ROOT);\n    waitForState(\"Expecting property '\" + prop + \"'to appear on replica \" + rep.getName(), COLLECTION_NAME,\n        (n, c) -> \"true\".equals(c.getReplica(rep.getName()).getProperty(propLC)));\n\n  }\n\n","sourceOld":"  void issuePreferred(String slice, Replica rep) throws IOException, SolrServerException, InterruptedException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString());\n\n    // Insure we get error returns when omitting required parameters\n\n    params.set(\"collection\", COLLECTION_NAME);\n    params.set(\"shard\", slice);\n    params.set(\"replica\", rep.getName());\n    params.set(\"property\", \"preferredLeader\");\n    params.set(\"property.value\", \"true\");\n\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    cloudClient.request(request);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":1,"author":"Tommaso Teofili","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#setPropWithStandardRequest(Slice,Replica,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#issuePreferred(String,Replica).mjava","sourceNew":"  void setPropWithStandardRequest(Slice slice, Replica rep, String prop) throws IOException, SolrServerException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString());\n\n    params.set(\"collection\", COLLECTION_NAME);\n    params.set(\"shard\", slice.getName());\n    params.set(\"replica\", rep.getName());\n    params.set(\"property\", prop);\n    params.set(\"property.value\", \"true\");\n    // Test to insure that implicit shardUnique is added for preferredLeader.\n    if (prop.toLowerCase(Locale.ROOT).equals(\"preferredleader\") == false) {\n      params.set(\"shardUnique\", \"true\");\n    }\n\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    cluster.getSolrClient().request(request);\n    String propLC = prop.toLowerCase(Locale.ROOT);\n    waitForState(\"Expecting property '\" + prop + \"'to appear on replica \" + rep.getName(), COLLECTION_NAME,\n        (n, c) -> \"true\".equals(c.getReplica(rep.getName()).getProperty(propLC)));\n\n  }\n\n","sourceOld":"  void issuePreferred(String slice, Replica rep) throws IOException, SolrServerException, InterruptedException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString());\n\n    // Insure we get error returns when omitting required parameters\n\n    params.set(\"collection\", COLLECTION_NAME);\n    params.set(\"shard\", slice);\n    params.set(\"replica\", rep.getName());\n    params.set(\"property\", \"preferredLeader\");\n    params.set(\"property.value\", \"true\");\n\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    cloudClient.request(request);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#setPropWithStandardRequest(Slice,Replica,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#setPropWithStandardRequest(Slice,Replica,String).mjava","sourceNew":"  void setPropWithStandardRequest(Slice slice, Replica rep, String prop) throws IOException, SolrServerException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString());\n\n    params.set(\"collection\", COLLECTION_NAME);\n    params.set(\"shard\", slice.getName());\n    params.set(\"replica\", rep.getName());\n    params.set(\"property\", prop);\n    params.set(\"property.value\", \"true\");\n    // Test to insure that implicit shardUnique is added for preferredLeader.\n    if (prop.toLowerCase(Locale.ROOT).equals(\"preferredleader\") == false) {\n      params.set(\"shardUnique\", \"true\");\n    }\n\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    cluster.getSolrClient().request(request);\n    String propLC = prop.toLowerCase(Locale.ROOT);\n    waitForState(\"Expecting property '\" + prop + \"'to appear on replica \" + rep.getName(), COLLECTION_NAME,\n        (n, c) -> \"true\".equals(c.getReplica(rep.getName()).getProperty(propLC)));\n\n  }\n\n","sourceOld":"  void setPropWithStandardRequest(Slice slice, Replica rep, String prop) throws IOException, SolrServerException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString());\n\n    params.set(\"collection\", COLLECTION_NAME);\n    params.set(\"shard\", slice.getName());\n    params.set(\"replica\", rep.getName());\n    params.set(\"property\", prop);\n    params.set(\"property.value\", \"true\");\n    // Test to insure that implicit shardUnique is added for preferredLeader.\n    if (prop.toLowerCase(Locale.ROOT).equals(\"preferredleader\") == false) {\n      params.set(\"shardUnique\", \"true\");\n    }\n\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    cluster.getSolrClient().request(request);\n    String propLC = prop.toLowerCase(Locale.ROOT);\n    waitForState(\"Expecting property '\" + prop + \"'to appear on replica \" + rep.getName(), COLLECTION_NAME,\n        (n, c) -> \"true\".equals(c.getReplica(rep.getName()).getProperty(propLC)));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["73fd358e8ec697393d56617f4d9cedaca74dca14"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","73fd358e8ec697393d56617f4d9cedaca74dca14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"73fd358e8ec697393d56617f4d9cedaca74dca14":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"]},"commit2Childs":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","73fd358e8ec697393d56617f4d9cedaca74dca14"],"73fd358e8ec697393d56617f4d9cedaca74dca14":["aa2585c33d5d66a1c837c312221eb55ddb3c4300","c89f1ef80a9432f4eabaeda9a1e135cd72e60836"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}