{"path":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenNoWriter(boolean,IndexCommit).mjava","commits":[{"id":"8a8259c922a83abc544609227a60d48e5ee93e7e","date":1317679620,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenNoWriter(boolean,IndexCommit).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doReopenNoWriter(boolean,IndexCommit).mjava","sourceNew":"  private synchronized IndexReader doOpenNoWriter(final boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n\n    if (commit == null) {\n      if (hasChanges) {\n        // We have changes, which means we are not readOnly:\n        assert readOnly == false;\n        // and we hold the write lock:\n        assert writeLock != null;\n        // so no other writer holds the write lock, which\n        // means no changes could have been done to the index:\n        assert isCurrent();\n\n        if (openReadOnly) {\n          return clone(openReadOnly);\n        } else {\n          return null;\n        }\n      } else if (isCurrent()) {\n        if (openReadOnly != readOnly) {\n          // Just fallback to clone\n          return clone(openReadOnly);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      if (directory != commit.getDirectory()) {\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      }\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        if (readOnly != openReadOnly) {\n          // Just fallback to clone\n          return clone(openReadOnly);\n        } else {\n          return null;\n        }\n      }\n    }\n\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        final SegmentInfos infos = new SegmentInfos(codecs);\n        infos.read(directory, segmentFileName, codecs);\n        return doOpenIfChanged(infos, false, openReadOnly);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  private synchronized IndexReader doReopenNoWriter(final boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n\n    if (commit == null) {\n      if (hasChanges) {\n        // We have changes, which means we are not readOnly:\n        assert readOnly == false;\n        // and we hold the write lock:\n        assert writeLock != null;\n        // so no other writer holds the write lock, which\n        // means no changes could have been done to the index:\n        assert isCurrent();\n\n        if (openReadOnly) {\n          return clone(openReadOnly);\n        } else {\n          return this;\n        }\n      } else if (isCurrent()) {\n        if (openReadOnly != readOnly) {\n          // Just fallback to clone\n          return clone(openReadOnly);\n        } else {\n          return this;\n        }\n      }\n    } else {\n      if (directory != commit.getDirectory())\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        if (readOnly != openReadOnly) {\n          // Just fallback to clone\n          return clone(openReadOnly);\n        } else {\n          return this;\n        }\n      }\n    }\n\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        final SegmentInfos infos = new SegmentInfos(codecs);\n        infos.read(directory, segmentFileName, codecs);\n        return doReopen(infos, false, openReadOnly);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenNoWriter(boolean,IndexCommit).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenNoWriter(boolean,IndexCommit).mjava","sourceNew":"  private synchronized IndexReader doOpenNoWriter(final boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n\n    if (commit == null) {\n      if (hasChanges) {\n        // We have changes, which means we are not readOnly:\n        assert readOnly == false;\n        // and we hold the write lock:\n        assert writeLock != null;\n        // so no other writer holds the write lock, which\n        // means no changes could have been done to the index:\n        assert isCurrent();\n\n        if (openReadOnly) {\n          return clone(openReadOnly);\n        } else {\n          return null;\n        }\n      } else if (isCurrent()) {\n        if (openReadOnly != readOnly) {\n          // Just fallback to clone\n          return clone(openReadOnly);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      if (directory != commit.getDirectory()) {\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      }\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        if (readOnly != openReadOnly) {\n          // Just fallback to clone\n          return clone(openReadOnly);\n        } else {\n          return null;\n        }\n      }\n    }\n\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        final SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return doOpenIfChanged(infos, false, openReadOnly);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  private synchronized IndexReader doOpenNoWriter(final boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n\n    if (commit == null) {\n      if (hasChanges) {\n        // We have changes, which means we are not readOnly:\n        assert readOnly == false;\n        // and we hold the write lock:\n        assert writeLock != null;\n        // so no other writer holds the write lock, which\n        // means no changes could have been done to the index:\n        assert isCurrent();\n\n        if (openReadOnly) {\n          return clone(openReadOnly);\n        } else {\n          return null;\n        }\n      } else if (isCurrent()) {\n        if (openReadOnly != readOnly) {\n          // Just fallback to clone\n          return clone(openReadOnly);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      if (directory != commit.getDirectory()) {\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      }\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        if (readOnly != openReadOnly) {\n          // Just fallback to clone\n          return clone(openReadOnly);\n        } else {\n          return null;\n        }\n      }\n    }\n\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        final SegmentInfos infos = new SegmentInfos(codecs);\n        infos.read(directory, segmentFileName, codecs);\n        return doOpenIfChanged(infos, false, openReadOnly);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e1f693ce507c40f77e3a92acd16c6b79cdd730e4","date":1323036169,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenNoWriter(boolean,IndexCommit).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenNoWriter(boolean,IndexCommit).mjava","sourceNew":"  private synchronized IndexReader doOpenNoWriter(final boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n\n    if (commit == null) {\n      if (isCurrent()) {\n        return null;\n      }\n    } else {\n      if (directory != commit.getDirectory()) {\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      }\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        return null;\n      }\n    }\n\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        final SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return doOpenIfChanged(infos, false, openReadOnly);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  private synchronized IndexReader doOpenNoWriter(final boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n\n    if (commit == null) {\n      if (hasChanges) {\n        // We have changes, which means we are not readOnly:\n        assert readOnly == false;\n        // and we hold the write lock:\n        assert writeLock != null;\n        // so no other writer holds the write lock, which\n        // means no changes could have been done to the index:\n        assert isCurrent();\n\n        if (openReadOnly) {\n          return clone(openReadOnly);\n        } else {\n          return null;\n        }\n      } else if (isCurrent()) {\n        if (openReadOnly != readOnly) {\n          // Just fallback to clone\n          return clone(openReadOnly);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      if (directory != commit.getDirectory()) {\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      }\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        if (readOnly != openReadOnly) {\n          // Just fallback to clone\n          return clone(openReadOnly);\n        } else {\n          return null;\n        }\n      }\n    }\n\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        final SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return doOpenIfChanged(infos, false, openReadOnly);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"326990249d982376dfa2e6fd97c28f4580df4e7c","date":1323042771,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenNoWriter(IndexCommit).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenNoWriter(boolean,IndexCommit).mjava","sourceNew":"  private synchronized IndexReader doOpenNoWriter(IndexCommit commit) throws CorruptIndexException, IOException {\n\n    if (commit == null) {\n      if (isCurrent()) {\n        return null;\n      }\n    } else {\n      if (directory != commit.getDirectory()) {\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      }\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        return null;\n      }\n    }\n\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        final SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return doOpenIfChanged(infos, false);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  private synchronized IndexReader doOpenNoWriter(final boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n\n    if (commit == null) {\n      if (isCurrent()) {\n        return null;\n      }\n    } else {\n      if (directory != commit.getDirectory()) {\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      }\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        return null;\n      }\n    }\n\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        final SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return doOpenIfChanged(infos, false, openReadOnly);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenNoWriter(IndexCommit).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenNoWriter(boolean,IndexCommit).mjava","sourceNew":"  private synchronized IndexReader doOpenNoWriter(IndexCommit commit) throws CorruptIndexException, IOException {\n\n    if (commit == null) {\n      if (isCurrent()) {\n        return null;\n      }\n    } else {\n      if (directory != commit.getDirectory()) {\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      }\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        return null;\n      }\n    }\n\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        final SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return doOpenIfChanged(infos, false);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  private synchronized IndexReader doOpenNoWriter(final boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n\n    if (commit == null) {\n      if (hasChanges) {\n        // We have changes, which means we are not readOnly:\n        assert readOnly == false;\n        // and we hold the write lock:\n        assert writeLock != null;\n        // so no other writer holds the write lock, which\n        // means no changes could have been done to the index:\n        assert isCurrent();\n\n        if (openReadOnly) {\n          return clone(openReadOnly);\n        } else {\n          return null;\n        }\n      } else if (isCurrent()) {\n        if (openReadOnly != readOnly) {\n          // Just fallback to clone\n          return clone(openReadOnly);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      if (directory != commit.getDirectory()) {\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      }\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        if (readOnly != openReadOnly) {\n          // Just fallback to clone\n          return clone(openReadOnly);\n        } else {\n          return null;\n        }\n      }\n    }\n\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        final SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return doOpenIfChanged(infos, false, openReadOnly);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenNoWriter(IndexCommit).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenNoWriter(boolean,IndexCommit).mjava","sourceNew":"  private synchronized IndexReader doOpenNoWriter(IndexCommit commit) throws CorruptIndexException, IOException {\n\n    if (commit == null) {\n      if (isCurrent()) {\n        return null;\n      }\n    } else {\n      if (directory != commit.getDirectory()) {\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      }\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        return null;\n      }\n    }\n\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        final SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return doOpenIfChanged(infos, false);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  private synchronized IndexReader doOpenNoWriter(final boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n\n    if (commit == null) {\n      if (hasChanges) {\n        // We have changes, which means we are not readOnly:\n        assert readOnly == false;\n        // and we hold the write lock:\n        assert writeLock != null;\n        // so no other writer holds the write lock, which\n        // means no changes could have been done to the index:\n        assert isCurrent();\n\n        if (openReadOnly) {\n          return clone(openReadOnly);\n        } else {\n          return null;\n        }\n      } else if (isCurrent()) {\n        if (openReadOnly != readOnly) {\n          // Just fallback to clone\n          return clone(openReadOnly);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      if (directory != commit.getDirectory()) {\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      }\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        if (readOnly != openReadOnly) {\n          // Just fallback to clone\n          return clone(openReadOnly);\n        } else {\n          return null;\n        }\n      }\n    }\n\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        final SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return doOpenIfChanged(infos, false, openReadOnly);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8a8259c922a83abc544609227a60d48e5ee93e7e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7b91922b55d15444d554721b352861d028eb8278":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"e1f693ce507c40f77e3a92acd16c6b79cdd730e4":["7b91922b55d15444d554721b352861d028eb8278"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["7b91922b55d15444d554721b352861d028eb8278","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["7b91922b55d15444d554721b352861d028eb8278","326990249d982376dfa2e6fd97c28f4580df4e7c"],"326990249d982376dfa2e6fd97c28f4580df4e7c":["e1f693ce507c40f77e3a92acd16c6b79cdd730e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3615ce4a1f785ae1b779244de52c6a7d99227e60"]},"commit2Childs":{"8a8259c922a83abc544609227a60d48e5ee93e7e":["7b91922b55d15444d554721b352861d028eb8278"],"7b91922b55d15444d554721b352861d028eb8278":["e1f693ce507c40f77e3a92acd16c6b79cdd730e4","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"e1f693ce507c40f77e3a92acd16c6b79cdd730e4":["326990249d982376dfa2e6fd97c28f4580df4e7c"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"326990249d982376dfa2e6fd97c28f4580df4e7c":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}