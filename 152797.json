{"path":"lucene/core/src/java/org/apache/lucene/index/ReadersAndLiveDocs#getReaderForMerge(IOContext).mjava","commits":[{"id":"75e4e08ceec867127dcd9913a5ebbc46cf85a28d","date":1379651991,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndLiveDocs#getReaderForMerge(IOContext).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a reader for merge. This method applies field updates if there are\n   * any and marks that this segment is currently merging.\n   */\n  SegmentReader getReaderForMerge(IOContext context) throws IOException {\n    // lock ordering must be IW -> RLD, otherwise could cause deadlocks\n    synchronized (writer) {\n      synchronized (this) {\n        // must execute these two statements as atomic operation, otherwise we\n        // could lose updates if e.g. another thread calls writeLiveDocs in\n        // between, or the updates are applied to the obtained reader, but then\n        // re-applied in IW.commitMergedDeletes (unnecessary work and potential\n        // bugs.\n        isMerging = true;\n        return getReader(true, context);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bae040fd1d5e03e0d8d695a9c25cf4f402e7ffe","date":1381909398,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndLiveDocs#getReaderForMerge(IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndLiveDocs#getReaderForMerge(IOContext).mjava","sourceNew":"  /**\n   * Returns a reader for merge. This method applies field updates if there are\n   * any and marks that this segment is currently merging.\n   */\n  synchronized SegmentReader getReaderForMerge(IOContext context) throws IOException {\n    assert Thread.holdsLock(writer);\n    // must execute these two statements as atomic operation, otherwise we\n    // could lose updates if e.g. another thread calls writeFieldUpdates in\n    // between, or the updates are applied to the obtained reader, but then\n    // re-applied in IW.commitMergedDeletes (unnecessary work and potential\n    // bugs).\n    isMerging = true;\n    return getReader(context);\n  }\n\n","sourceOld":"  /**\n   * Returns a reader for merge. This method applies field updates if there are\n   * any and marks that this segment is currently merging.\n   */\n  SegmentReader getReaderForMerge(IOContext context) throws IOException {\n    // lock ordering must be IW -> RLD, otherwise could cause deadlocks\n    synchronized (writer) {\n      synchronized (this) {\n        // must execute these two statements as atomic operation, otherwise we\n        // could lose updates if e.g. another thread calls writeLiveDocs in\n        // between, or the updates are applied to the obtained reader, but then\n        // re-applied in IW.commitMergedDeletes (unnecessary work and potential\n        // bugs.\n        isMerging = true;\n        return getReader(true, context);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["36d84416fc00253f9e834f8dba14fa89b298e64e","636c73dfa97dd282a3089d4239620475f2633519"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#getReaderForMerge(IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndLiveDocs#getReaderForMerge(IOContext).mjava","sourceNew":"  /**\n   * Returns a reader for merge. This method applies field updates if there are\n   * any and marks that this segment is currently merging.\n   */\n  synchronized SegmentReader getReaderForMerge(IOContext context) throws IOException {\n    assert Thread.holdsLock(writer);\n    // must execute these two statements as atomic operation, otherwise we\n    // could lose updates if e.g. another thread calls writeFieldUpdates in\n    // between, or the updates are applied to the obtained reader, but then\n    // re-applied in IW.commitMergedDeletes (unnecessary work and potential\n    // bugs).\n    isMerging = true;\n    return getReader(context);\n  }\n\n","sourceOld":"  /**\n   * Returns a reader for merge. This method applies field updates if there are\n   * any and marks that this segment is currently merging.\n   */\n  synchronized SegmentReader getReaderForMerge(IOContext context) throws IOException {\n    assert Thread.holdsLock(writer);\n    // must execute these two statements as atomic operation, otherwise we\n    // could lose updates if e.g. another thread calls writeFieldUpdates in\n    // between, or the updates are applied to the obtained reader, but then\n    // re-applied in IW.commitMergedDeletes (unnecessary work and potential\n    // bugs).\n    isMerging = true;\n    return getReader(context);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["1bae040fd1d5e03e0d8d695a9c25cf4f402e7ffe"],"75e4e08ceec867127dcd9913a5ebbc46cf85a28d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1bae040fd1d5e03e0d8d695a9c25cf4f402e7ffe":["75e4e08ceec867127dcd9913a5ebbc46cf85a28d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"75e4e08ceec867127dcd9913a5ebbc46cf85a28d":["1bae040fd1d5e03e0d8d695a9c25cf4f402e7ffe"],"1bae040fd1d5e03e0d8d695a9c25cf4f402e7ffe":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["75e4e08ceec867127dcd9913a5ebbc46cf85a28d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}