{"path":"solr/src/test/org/apache/solr/handler/component/TermsComponentTest#test().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermsComponentTest#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws Exception {\n    SolrCore core = h.getCore();\n    TermsComponent tc = (TermsComponent) core.getSearchComponent(\"termsComp\");\n    assertTrue(\"tc is null and it shouldn't be\", tc != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"lowerfilt\");\n    params.add(TermsParams.TERMS_LOWER, \"a\");\n    params.add(TermsParams.TERMS_UPPER, \"b\");\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(50));\n    SolrRequestHandler handler;\n    SolrQueryResponse rsp;\n    NamedList values;\n    NamedList terms;\n    handler = core.getRequestHandler(\"/terms\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"lowerfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 6, terms.size() == 6);\n    assertTrue(\"aa is null and it shouldn't be\", terms.get(\"aa\") != null);\n    assertTrue(\"aaa is null and it shouldn't be\", terms.get(\"aaa\") != null);\n    assertTrue(\"ab is null and it shouldn't be\", terms.get(\"ab\") != null);\n    assertTrue(\"abb is null and it shouldn't be\", terms.get(\"abb\") != null);\n    assertTrue(\"abc is null and it shouldn't be\", terms.get(\"abc\") != null);\n    assertTrue(\"a is null\", terms.get(\"a\") != null);\n    assertTrue(\"b is not null and it should be\", terms.get(\"b\") == null);\n\n    params.add(TermsParams.TERMS_UPPER_INCLUSIVE, \"true\");\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"lowerfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 7, terms.size() == 7);\n    assertTrue(\"aa is null and it shouldn't be\", terms.get(\"aa\") != null);\n    assertTrue(\"ab is null and it shouldn't be\", terms.get(\"ab\") != null);\n    assertTrue(\"aaa is null and it shouldn't be\", terms.get(\"aaa\") != null);\n    assertTrue(\"abb is null and it shouldn't be\", terms.get(\"abb\") != null);\n    assertTrue(\"abc is null and it shouldn't be\", terms.get(\"abc\") != null);\n    assertTrue(\"b is null and it shouldn't be\", terms.get(\"b\") != null);\n    assertTrue(\"a is null\", terms.get(\"a\") != null);\n    assertTrue(\"baa is not null\", terms.get(\"baa\") == null);\n\n    params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"lowerfilt\");\n    params.add(TermsParams.TERMS_LOWER, \"a\");\n    params.add(TermsParams.TERMS_UPPER, \"b\");\n    params.add(TermsParams.TERMS_RAW, \"true\");  // this should have no effect on a text field\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(2));\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"lowerfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 2, terms.size() == 2);\n    assertTrue(\"aa is null and it shouldn't be\", terms.get(\"a\") != null);\n    assertTrue(\"aaa is null and it shouldn't be\", terms.get(\"aa\") != null);\n    assertTrue(\"abb is not null\", terms.get(\"abb\") == null);\n    assertTrue(\"abc is not null\", terms.get(\"abc\") == null);\n    assertTrue(\"b is null and it shouldn't be\", terms.get(\"b\") == null);\n    assertTrue(\"baa is not null\", terms.get(\"baa\") == null);\n\n    params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"foo_i\");\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"foo_i\");\n    assertEquals(2,terms.get(\"1\"));\n\n    params.add(\"terms.raw\",\"true\");\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"foo_i\");\n    assertTrue(terms.get(\"1\") == null);\n\n    // check something at the end of the index\n    params.set(TermsParams.TERMS_FIELD, \"zzz_i\");\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"zzz_i\");\n    assertTrue(terms.size() == 0);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/handler/component/TermsComponentTest#test().mjava","sourceNew":null,"sourceOld":"  public void test() throws Exception {\n    SolrCore core = h.getCore();\n    TermsComponent tc = (TermsComponent) core.getSearchComponent(\"termsComp\");\n    assertTrue(\"tc is null and it shouldn't be\", tc != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"lowerfilt\");\n    params.add(TermsParams.TERMS_LOWER, \"a\");\n    params.add(TermsParams.TERMS_UPPER, \"b\");\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(50));\n    SolrRequestHandler handler;\n    SolrQueryResponse rsp;\n    NamedList values;\n    NamedList terms;\n    handler = core.getRequestHandler(\"/terms\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"lowerfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 6, terms.size() == 6);\n    assertTrue(\"aa is null and it shouldn't be\", terms.get(\"aa\") != null);\n    assertTrue(\"aaa is null and it shouldn't be\", terms.get(\"aaa\") != null);\n    assertTrue(\"ab is null and it shouldn't be\", terms.get(\"ab\") != null);\n    assertTrue(\"abb is null and it shouldn't be\", terms.get(\"abb\") != null);\n    assertTrue(\"abc is null and it shouldn't be\", terms.get(\"abc\") != null);\n    assertTrue(\"a is null\", terms.get(\"a\") != null);\n    assertTrue(\"b is not null and it should be\", terms.get(\"b\") == null);\n\n    params.add(TermsParams.TERMS_UPPER_INCLUSIVE, \"true\");\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"lowerfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 7, terms.size() == 7);\n    assertTrue(\"aa is null and it shouldn't be\", terms.get(\"aa\") != null);\n    assertTrue(\"ab is null and it shouldn't be\", terms.get(\"ab\") != null);\n    assertTrue(\"aaa is null and it shouldn't be\", terms.get(\"aaa\") != null);\n    assertTrue(\"abb is null and it shouldn't be\", terms.get(\"abb\") != null);\n    assertTrue(\"abc is null and it shouldn't be\", terms.get(\"abc\") != null);\n    assertTrue(\"b is null and it shouldn't be\", terms.get(\"b\") != null);\n    assertTrue(\"a is null\", terms.get(\"a\") != null);\n    assertTrue(\"baa is not null\", terms.get(\"baa\") == null);\n\n    params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"lowerfilt\");\n    params.add(TermsParams.TERMS_LOWER, \"a\");\n    params.add(TermsParams.TERMS_UPPER, \"b\");\n    params.add(TermsParams.TERMS_RAW, \"true\");  // this should have no effect on a text field\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(2));\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"lowerfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 2, terms.size() == 2);\n    assertTrue(\"aa is null and it shouldn't be\", terms.get(\"a\") != null);\n    assertTrue(\"aaa is null and it shouldn't be\", terms.get(\"aa\") != null);\n    assertTrue(\"abb is not null\", terms.get(\"abb\") == null);\n    assertTrue(\"abc is not null\", terms.get(\"abc\") == null);\n    assertTrue(\"b is null and it shouldn't be\", terms.get(\"b\") == null);\n    assertTrue(\"baa is not null\", terms.get(\"baa\") == null);\n\n    params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"foo_i\");\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"foo_i\");\n    assertEquals(2,terms.get(\"1\"));\n\n    params.add(\"terms.raw\",\"true\");\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"foo_i\");\n    assertTrue(terms.get(\"1\") == null);\n\n    // check something at the end of the index\n    params.set(TermsParams.TERMS_FIELD, \"zzz_i\");\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"zzz_i\");\n    assertTrue(terms.size() == 0);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermsComponentTest#test().mjava","pathOld":"src/test/org/apache/solr/handler/component/TermsComponentTest#test().mjava","sourceNew":"  public void test() throws Exception {\n    SolrCore core = h.getCore();\n    TermsComponent tc = (TermsComponent) core.getSearchComponent(\"termsComp\");\n    assertTrue(\"tc is null and it shouldn't be\", tc != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"lowerfilt\");\n    params.add(TermsParams.TERMS_LOWER, \"a\");\n    params.add(TermsParams.TERMS_UPPER, \"b\");\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(50));\n    SolrRequestHandler handler;\n    SolrQueryResponse rsp;\n    NamedList values;\n    NamedList terms;\n    handler = core.getRequestHandler(\"/terms\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"lowerfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 6, terms.size() == 6);\n    assertTrue(\"aa is null and it shouldn't be\", terms.get(\"aa\") != null);\n    assertTrue(\"aaa is null and it shouldn't be\", terms.get(\"aaa\") != null);\n    assertTrue(\"ab is null and it shouldn't be\", terms.get(\"ab\") != null);\n    assertTrue(\"abb is null and it shouldn't be\", terms.get(\"abb\") != null);\n    assertTrue(\"abc is null and it shouldn't be\", terms.get(\"abc\") != null);\n    assertTrue(\"a is null\", terms.get(\"a\") != null);\n    assertTrue(\"b is not null and it should be\", terms.get(\"b\") == null);\n\n    params.add(TermsParams.TERMS_UPPER_INCLUSIVE, \"true\");\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"lowerfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 7, terms.size() == 7);\n    assertTrue(\"aa is null and it shouldn't be\", terms.get(\"aa\") != null);\n    assertTrue(\"ab is null and it shouldn't be\", terms.get(\"ab\") != null);\n    assertTrue(\"aaa is null and it shouldn't be\", terms.get(\"aaa\") != null);\n    assertTrue(\"abb is null and it shouldn't be\", terms.get(\"abb\") != null);\n    assertTrue(\"abc is null and it shouldn't be\", terms.get(\"abc\") != null);\n    assertTrue(\"b is null and it shouldn't be\", terms.get(\"b\") != null);\n    assertTrue(\"a is null\", terms.get(\"a\") != null);\n    assertTrue(\"baa is not null\", terms.get(\"baa\") == null);\n\n    params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"lowerfilt\");\n    params.add(TermsParams.TERMS_LOWER, \"a\");\n    params.add(TermsParams.TERMS_UPPER, \"b\");\n    params.add(TermsParams.TERMS_RAW, \"true\");  // this should have no effect on a text field\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(2));\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"lowerfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 2, terms.size() == 2);\n    assertTrue(\"aa is null and it shouldn't be\", terms.get(\"a\") != null);\n    assertTrue(\"aaa is null and it shouldn't be\", terms.get(\"aa\") != null);\n    assertTrue(\"abb is not null\", terms.get(\"abb\") == null);\n    assertTrue(\"abc is not null\", terms.get(\"abc\") == null);\n    assertTrue(\"b is null and it shouldn't be\", terms.get(\"b\") == null);\n    assertTrue(\"baa is not null\", terms.get(\"baa\") == null);\n\n    params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"foo_i\");\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"foo_i\");\n    assertEquals(2,terms.get(\"1\"));\n\n    params.add(\"terms.raw\",\"true\");\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"foo_i\");\n    assertTrue(terms.get(\"1\") == null);\n\n    // check something at the end of the index\n    params.set(TermsParams.TERMS_FIELD, \"zzz_i\");\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"zzz_i\");\n    assertTrue(terms.size() == 0);\n\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    SolrCore core = h.getCore();\n    TermsComponent tc = (TermsComponent) core.getSearchComponent(\"termsComp\");\n    assertTrue(\"tc is null and it shouldn't be\", tc != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"lowerfilt\");\n    params.add(TermsParams.TERMS_LOWER, \"a\");\n    params.add(TermsParams.TERMS_UPPER, \"b\");\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(50));\n    SolrRequestHandler handler;\n    SolrQueryResponse rsp;\n    NamedList values;\n    NamedList terms;\n    handler = core.getRequestHandler(\"/terms\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"lowerfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 6, terms.size() == 6);\n    assertTrue(\"aa is null and it shouldn't be\", terms.get(\"aa\") != null);\n    assertTrue(\"aaa is null and it shouldn't be\", terms.get(\"aaa\") != null);\n    assertTrue(\"ab is null and it shouldn't be\", terms.get(\"ab\") != null);\n    assertTrue(\"abb is null and it shouldn't be\", terms.get(\"abb\") != null);\n    assertTrue(\"abc is null and it shouldn't be\", terms.get(\"abc\") != null);\n    assertTrue(\"a is null\", terms.get(\"a\") != null);\n    assertTrue(\"b is not null and it should be\", terms.get(\"b\") == null);\n\n    params.add(TermsParams.TERMS_UPPER_INCLUSIVE, \"true\");\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"lowerfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 7, terms.size() == 7);\n    assertTrue(\"aa is null and it shouldn't be\", terms.get(\"aa\") != null);\n    assertTrue(\"ab is null and it shouldn't be\", terms.get(\"ab\") != null);\n    assertTrue(\"aaa is null and it shouldn't be\", terms.get(\"aaa\") != null);\n    assertTrue(\"abb is null and it shouldn't be\", terms.get(\"abb\") != null);\n    assertTrue(\"abc is null and it shouldn't be\", terms.get(\"abc\") != null);\n    assertTrue(\"b is null and it shouldn't be\", terms.get(\"b\") != null);\n    assertTrue(\"a is null\", terms.get(\"a\") != null);\n    assertTrue(\"baa is not null\", terms.get(\"baa\") == null);\n\n    params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"lowerfilt\");\n    params.add(TermsParams.TERMS_LOWER, \"a\");\n    params.add(TermsParams.TERMS_UPPER, \"b\");\n    params.add(TermsParams.TERMS_RAW, \"true\");  // this should have no effect on a text field\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(2));\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"lowerfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 2, terms.size() == 2);\n    assertTrue(\"aa is null and it shouldn't be\", terms.get(\"a\") != null);\n    assertTrue(\"aaa is null and it shouldn't be\", terms.get(\"aa\") != null);\n    assertTrue(\"abb is not null\", terms.get(\"abb\") == null);\n    assertTrue(\"abc is not null\", terms.get(\"abc\") == null);\n    assertTrue(\"b is null and it shouldn't be\", terms.get(\"b\") == null);\n    assertTrue(\"baa is not null\", terms.get(\"baa\") == null);\n\n    params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"foo_i\");\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"foo_i\");\n    assertEquals(2,terms.get(\"1\"));\n\n    params.add(\"terms.raw\",\"true\");\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"foo_i\");\n    assertTrue(terms.get(\"1\") == null);\n\n    // check something at the end of the index\n    params.set(TermsParams.TERMS_FIELD, \"zzz_i\");\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"zzz_i\");\n    assertTrue(terms.size() == 0);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermsComponentTest#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws Exception {\n    SolrCore core = h.getCore();\n    TermsComponent tc = (TermsComponent) core.getSearchComponent(\"termsComp\");\n    assertTrue(\"tc is null and it shouldn't be\", tc != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"lowerfilt\");\n    params.add(TermsParams.TERMS_LOWER, \"a\");\n    params.add(TermsParams.TERMS_UPPER, \"b\");\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(50));\n    SolrRequestHandler handler;\n    SolrQueryResponse rsp;\n    NamedList values;\n    NamedList terms;\n    handler = core.getRequestHandler(\"/terms\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"lowerfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 6, terms.size() == 6);\n    assertTrue(\"aa is null and it shouldn't be\", terms.get(\"aa\") != null);\n    assertTrue(\"aaa is null and it shouldn't be\", terms.get(\"aaa\") != null);\n    assertTrue(\"ab is null and it shouldn't be\", terms.get(\"ab\") != null);\n    assertTrue(\"abb is null and it shouldn't be\", terms.get(\"abb\") != null);\n    assertTrue(\"abc is null and it shouldn't be\", terms.get(\"abc\") != null);\n    assertTrue(\"a is null\", terms.get(\"a\") != null);\n    assertTrue(\"b is not null and it should be\", terms.get(\"b\") == null);\n\n    params.add(TermsParams.TERMS_UPPER_INCLUSIVE, \"true\");\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"lowerfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 7, terms.size() == 7);\n    assertTrue(\"aa is null and it shouldn't be\", terms.get(\"aa\") != null);\n    assertTrue(\"ab is null and it shouldn't be\", terms.get(\"ab\") != null);\n    assertTrue(\"aaa is null and it shouldn't be\", terms.get(\"aaa\") != null);\n    assertTrue(\"abb is null and it shouldn't be\", terms.get(\"abb\") != null);\n    assertTrue(\"abc is null and it shouldn't be\", terms.get(\"abc\") != null);\n    assertTrue(\"b is null and it shouldn't be\", terms.get(\"b\") != null);\n    assertTrue(\"a is null\", terms.get(\"a\") != null);\n    assertTrue(\"baa is not null\", terms.get(\"baa\") == null);\n\n    params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"lowerfilt\");\n    params.add(TermsParams.TERMS_LOWER, \"a\");\n    params.add(TermsParams.TERMS_UPPER, \"b\");\n    params.add(TermsParams.TERMS_RAW, \"true\");  // this should have no effect on a text field\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(2));\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"lowerfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 2, terms.size() == 2);\n    assertTrue(\"aa is null and it shouldn't be\", terms.get(\"a\") != null);\n    assertTrue(\"aaa is null and it shouldn't be\", terms.get(\"aa\") != null);\n    assertTrue(\"abb is not null\", terms.get(\"abb\") == null);\n    assertTrue(\"abc is not null\", terms.get(\"abc\") == null);\n    assertTrue(\"b is null and it shouldn't be\", terms.get(\"b\") == null);\n    assertTrue(\"baa is not null\", terms.get(\"baa\") == null);\n\n    params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"foo_i\");\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"foo_i\");\n    assertEquals(2,terms.get(\"1\"));\n\n    params.add(\"terms.raw\",\"true\");\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"foo_i\");\n    assertTrue(terms.get(\"1\") == null);\n\n    // check something at the end of the index\n    params.set(TermsParams.TERMS_FIELD, \"zzz_i\");\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"zzz_i\");\n    assertTrue(terms.size() == 0);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ef059c3aff15abd4c4963ba0e8beee74f96da3a","date":1269090680,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermsComponentTest#test().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermsComponentTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    SolrCore core = h.getCore();\n    TermsComponent tc = (TermsComponent) core.getSearchComponent(\"termsComp\");\n    assertTrue(\"tc is null and it shouldn't be\", tc != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"lowerfilt\");\n    params.add(TermsParams.TERMS_LOWER, \"a\");\n    params.add(TermsParams.TERMS_UPPER, \"b\");\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(50));\n    SolrRequestHandler handler;\n    SolrQueryResponse rsp;\n    NamedList values;\n    NamedList terms;\n    handler = core.getRequestHandler(\"/terms\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"lowerfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 6, terms.size() == 6);\n    assertTrue(\"aa is null and it shouldn't be\", terms.get(\"aa\") != null);\n    assertTrue(\"aaa is null and it shouldn't be\", terms.get(\"aaa\") != null);\n    assertTrue(\"ab is null and it shouldn't be\", terms.get(\"ab\") != null);\n    assertTrue(\"abb is null and it shouldn't be\", terms.get(\"abb\") != null);\n    assertTrue(\"abc is null and it shouldn't be\", terms.get(\"abc\") != null);\n    assertTrue(\"a is null\", terms.get(\"a\") != null);\n    assertTrue(\"b is not null and it should be\", terms.get(\"b\") == null);\n\n    params.add(TermsParams.TERMS_UPPER_INCLUSIVE, \"true\");\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"lowerfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 7, terms.size() == 7);\n    assertTrue(\"aa is null and it shouldn't be\", terms.get(\"aa\") != null);\n    assertTrue(\"ab is null and it shouldn't be\", terms.get(\"ab\") != null);\n    assertTrue(\"aaa is null and it shouldn't be\", terms.get(\"aaa\") != null);\n    assertTrue(\"abb is null and it shouldn't be\", terms.get(\"abb\") != null);\n    assertTrue(\"abc is null and it shouldn't be\", terms.get(\"abc\") != null);\n    assertTrue(\"b is null and it shouldn't be\", terms.get(\"b\") != null);\n    assertTrue(\"a is null\", terms.get(\"a\") != null);\n    assertTrue(\"baa is not null\", terms.get(\"baa\") == null);\n\n    params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"lowerfilt\");\n    params.add(TermsParams.TERMS_LOWER, \"a\");\n    params.add(TermsParams.TERMS_UPPER, \"b\");\n    params.add(TermsParams.TERMS_RAW, \"true\");  // this should have no effect on a text field\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(2));\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"lowerfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 2, terms.size() == 2);\n    assertTrue(\"aa is null and it shouldn't be\", terms.get(\"a\") != null);\n    assertTrue(\"aaa is null and it shouldn't be\", terms.get(\"aa\") != null);\n    assertTrue(\"abb is not null\", terms.get(\"abb\") == null);\n    assertTrue(\"abc is not null\", terms.get(\"abc\") == null);\n    assertTrue(\"b is null and it shouldn't be\", terms.get(\"b\") == null);\n    assertTrue(\"baa is not null\", terms.get(\"baa\") == null);\n\n    params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"foo_i\");\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"foo_i\");\n    assertEquals(2,terms.get(\"1\"));\n\n    params.add(\"terms.raw\",\"true\");\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"foo_i\");\n    assertTrue(terms.get(\"1\") == null);\n\n    // check something at the end of the index\n    params.set(TermsParams.TERMS_FIELD, \"zzz_i\");\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"zzz_i\");\n    assertTrue(terms.size() == 0);\n\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    SolrCore core = h.getCore();\n    TermsComponent tc = (TermsComponent) core.getSearchComponent(\"termsComp\");\n    assertTrue(\"tc is null and it shouldn't be\", tc != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"lowerfilt\");\n    params.add(TermsParams.TERMS_LOWER, \"a\");\n    params.add(TermsParams.TERMS_UPPER, \"b\");\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(50));\n    SolrRequestHandler handler;\n    SolrQueryResponse rsp;\n    NamedList values;\n    NamedList terms;\n    handler = core.getRequestHandler(\"/terms\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"lowerfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 6, terms.size() == 6);\n    assertTrue(\"aa is null and it shouldn't be\", terms.get(\"aa\") != null);\n    assertTrue(\"aaa is null and it shouldn't be\", terms.get(\"aaa\") != null);\n    assertTrue(\"ab is null and it shouldn't be\", terms.get(\"ab\") != null);\n    assertTrue(\"abb is null and it shouldn't be\", terms.get(\"abb\") != null);\n    assertTrue(\"abc is null and it shouldn't be\", terms.get(\"abc\") != null);\n    assertTrue(\"a is null\", terms.get(\"a\") != null);\n    assertTrue(\"b is not null and it should be\", terms.get(\"b\") == null);\n\n    params.add(TermsParams.TERMS_UPPER_INCLUSIVE, \"true\");\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"lowerfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 7, terms.size() == 7);\n    assertTrue(\"aa is null and it shouldn't be\", terms.get(\"aa\") != null);\n    assertTrue(\"ab is null and it shouldn't be\", terms.get(\"ab\") != null);\n    assertTrue(\"aaa is null and it shouldn't be\", terms.get(\"aaa\") != null);\n    assertTrue(\"abb is null and it shouldn't be\", terms.get(\"abb\") != null);\n    assertTrue(\"abc is null and it shouldn't be\", terms.get(\"abc\") != null);\n    assertTrue(\"b is null and it shouldn't be\", terms.get(\"b\") != null);\n    assertTrue(\"a is null\", terms.get(\"a\") != null);\n    assertTrue(\"baa is not null\", terms.get(\"baa\") == null);\n\n    params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"lowerfilt\");\n    params.add(TermsParams.TERMS_LOWER, \"a\");\n    params.add(TermsParams.TERMS_UPPER, \"b\");\n    params.add(TermsParams.TERMS_RAW, \"true\");  // this should have no effect on a text field\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(2));\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"lowerfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 2, terms.size() == 2);\n    assertTrue(\"aa is null and it shouldn't be\", terms.get(\"a\") != null);\n    assertTrue(\"aaa is null and it shouldn't be\", terms.get(\"aa\") != null);\n    assertTrue(\"abb is not null\", terms.get(\"abb\") == null);\n    assertTrue(\"abc is not null\", terms.get(\"abc\") == null);\n    assertTrue(\"b is null and it shouldn't be\", terms.get(\"b\") == null);\n    assertTrue(\"baa is not null\", terms.get(\"baa\") == null);\n\n    params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"foo_i\");\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"foo_i\");\n    assertEquals(2,terms.get(\"1\"));\n\n    params.add(\"terms.raw\",\"true\");\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"foo_i\");\n    assertTrue(terms.get(\"1\") == null);\n\n    // check something at the end of the index\n    params.set(TermsParams.TERMS_FIELD, \"zzz_i\");\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"zzz_i\");\n    assertTrue(terms.size() == 0);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b52974ba6a0658264b11d7c9b0035d57e5b8ab7","date":1269519249,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermsComponentTest#test().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermsComponentTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n       \"terms.fl\",\"lowerfilt\",\n       \"terms.lower\",\"a\",\n       \"terms.upper\",\"b\")\n       ,\"count(//lst[@name='lowerfilt']/*)=6\"\n       ,\"//int[@name='a'] \"\n       ,\"//int[@name='aa'] \"\n       ,\"//int[@name='aaa'] \"\n       ,\"//int[@name='ab'] \"\n       ,\"//int[@name='abb'] \"\n       ,\"//int[@name='abc'] \"\n    );\n\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n       \"terms.fl\",\"lowerfilt\",\n       \"terms.lower\",\"a\",\n       \"terms.upper\",\"b\",\n       \"terms.raw\",\"true\",    // this should have no effect on a text field\n       \"terms.limit\",\"2\")\n       ,\"count(//lst[@name='lowerfilt']/*)=2\"\n       ,\"//int[@name='a']\"\n       ,\"//int[@name='aa']\"\n    );\n\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n       \"terms.fl\",\"foo_i\")\n       ,\"//int[@name='1'][.='2']\"\n    );\n\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n       \"terms.fl\",\"foo_i\", \"terms.raw\",\"true\")\n       ,\"not(//int[@name='1'][.='2'])\"\n    );\n\n    // check something at the end of the index\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n       \"terms.fl\",\"zzz_i\")\n        ,\"count(//lst[@name='zzz_i']/*)=0\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    SolrCore core = h.getCore();\n    TermsComponent tc = (TermsComponent) core.getSearchComponent(\"termsComp\");\n    assertTrue(\"tc is null and it shouldn't be\", tc != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"lowerfilt\");\n    params.add(TermsParams.TERMS_LOWER, \"a\");\n    params.add(TermsParams.TERMS_UPPER, \"b\");\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(50));\n    SolrRequestHandler handler;\n    SolrQueryResponse rsp;\n    NamedList values;\n    NamedList terms;\n    handler = core.getRequestHandler(\"/terms\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"lowerfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 6, terms.size() == 6);\n    assertTrue(\"aa is null and it shouldn't be\", terms.get(\"aa\") != null);\n    assertTrue(\"aaa is null and it shouldn't be\", terms.get(\"aaa\") != null);\n    assertTrue(\"ab is null and it shouldn't be\", terms.get(\"ab\") != null);\n    assertTrue(\"abb is null and it shouldn't be\", terms.get(\"abb\") != null);\n    assertTrue(\"abc is null and it shouldn't be\", terms.get(\"abc\") != null);\n    assertTrue(\"a is null\", terms.get(\"a\") != null);\n    assertTrue(\"b is not null and it should be\", terms.get(\"b\") == null);\n\n    params.add(TermsParams.TERMS_UPPER_INCLUSIVE, \"true\");\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"lowerfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 7, terms.size() == 7);\n    assertTrue(\"aa is null and it shouldn't be\", terms.get(\"aa\") != null);\n    assertTrue(\"ab is null and it shouldn't be\", terms.get(\"ab\") != null);\n    assertTrue(\"aaa is null and it shouldn't be\", terms.get(\"aaa\") != null);\n    assertTrue(\"abb is null and it shouldn't be\", terms.get(\"abb\") != null);\n    assertTrue(\"abc is null and it shouldn't be\", terms.get(\"abc\") != null);\n    assertTrue(\"b is null and it shouldn't be\", terms.get(\"b\") != null);\n    assertTrue(\"a is null\", terms.get(\"a\") != null);\n    assertTrue(\"baa is not null\", terms.get(\"baa\") == null);\n\n    params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"lowerfilt\");\n    params.add(TermsParams.TERMS_LOWER, \"a\");\n    params.add(TermsParams.TERMS_UPPER, \"b\");\n    params.add(TermsParams.TERMS_RAW, \"true\");  // this should have no effect on a text field\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(2));\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"lowerfilt\");\n    assertTrue(\"terms Size: \" + terms.size() + \" is not: \" + 2, terms.size() == 2);\n    assertTrue(\"aa is null and it shouldn't be\", terms.get(\"a\") != null);\n    assertTrue(\"aaa is null and it shouldn't be\", terms.get(\"aa\") != null);\n    assertTrue(\"abb is not null\", terms.get(\"abb\") == null);\n    assertTrue(\"abc is not null\", terms.get(\"abc\") == null);\n    assertTrue(\"b is null and it shouldn't be\", terms.get(\"b\") == null);\n    assertTrue(\"baa is not null\", terms.get(\"baa\") == null);\n\n    params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, \"foo_i\");\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"foo_i\");\n    assertEquals(2,terms.get(\"1\"));\n\n    params.add(\"terms.raw\",\"true\");\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"foo_i\");\n    assertTrue(terms.get(\"1\") == null);\n\n    // check something at the end of the index\n    params.set(TermsParams.TERMS_FIELD, \"zzz_i\");\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    terms = (NamedList) ((NamedList) values.get(\"terms\")).get(\"zzz_i\");\n    assertTrue(terms.size() == 0);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermsComponentTest#test().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermsComponentTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n       \"terms.fl\",\"lowerfilt\",\n       \"terms.lower\",\"a\",\n       \"terms.upper\",\"b\")\n       ,\"count(//lst[@name='lowerfilt']/*)=6\"\n       ,\"//int[@name='a'] \"\n       ,\"//int[@name='aa'] \"\n       ,\"//int[@name='aaa'] \"\n       ,\"//int[@name='ab'] \"\n       ,\"//int[@name='abb'] \"\n       ,\"//int[@name='abc'] \"\n    );\n\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n       \"terms.fl\",\"lowerfilt\",\n       \"terms.lower\",\"a\",\n       \"terms.upper\",\"b\",\n       \"terms.raw\",\"true\",    // this should have no effect on a text field\n       \"terms.limit\",\"2\")\n       ,\"count(//lst[@name='lowerfilt']/*)=2\"\n       ,\"//int[@name='a']\"\n       ,\"//int[@name='aa']\"\n    );\n\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n       \"terms.fl\",\"foo_i\")\n       ,\"//int[@name='1'][.='2']\"\n    );\n\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n       \"terms.fl\",\"foo_i\", \"terms.raw\",\"true\")\n       ,\"not(//int[@name='1'][.='2'])\"\n    );\n\n    // check something at the end of the index\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n       \"terms.fl\",\"zzz_i\")\n        ,\"count(//lst[@name='zzz_i']/*)=0\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n       \"terms.fl\",\"lowerfilt\",\n       \"terms.lower\",\"a\",\n       \"terms.upper\",\"b\")\n       ,\"count(//lst[@name='lowerfilt']/*)=6\"\n       ,\"//int[@name='a'] \"\n       ,\"//int[@name='aa'] \"\n       ,\"//int[@name='aaa'] \"\n       ,\"//int[@name='ab'] \"\n       ,\"//int[@name='abb'] \"\n       ,\"//int[@name='abc'] \"\n    );\n\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n       \"terms.fl\",\"lowerfilt\",\n       \"terms.lower\",\"a\",\n       \"terms.upper\",\"b\",\n       \"terms.raw\",\"true\",    // this should have no effect on a text field\n       \"terms.limit\",\"2\")\n       ,\"count(//lst[@name='lowerfilt']/*)=2\"\n       ,\"//int[@name='a']\"\n       ,\"//int[@name='aa']\"\n    );\n\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n       \"terms.fl\",\"foo_i\")\n       ,\"//int[@name='1'][.='2']\"\n    );\n\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n       \"terms.fl\",\"foo_i\", \"terms.raw\",\"true\")\n       ,\"not(//int[@name='1'][.='2'])\"\n    );\n\n    // check something at the end of the index\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n       \"terms.fl\",\"zzz_i\")\n        ,\"count(//lst[@name='zzz_i']/*)=0\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermsComponentTest#test().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermsComponentTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n       \"terms.fl\",\"lowerfilt\",\n       \"terms.lower\",\"a\",\n       \"terms.upper\",\"b\")\n       ,\"count(//lst[@name='lowerfilt']/*)=6\"\n       ,\"//int[@name='a'] \"\n       ,\"//int[@name='aa'] \"\n       ,\"//int[@name='aaa'] \"\n       ,\"//int[@name='ab'] \"\n       ,\"//int[@name='abb'] \"\n       ,\"//int[@name='abc'] \"\n    );\n\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n       \"terms.fl\",\"lowerfilt\",\n       \"terms.lower\",\"a\",\n       \"terms.upper\",\"b\",\n       \"terms.raw\",\"true\",    // this should have no effect on a text field\n       \"terms.limit\",\"2\")\n       ,\"count(//lst[@name='lowerfilt']/*)=2\"\n       ,\"//int[@name='a']\"\n       ,\"//int[@name='aa']\"\n    );\n\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n       \"terms.fl\",\"foo_i\")\n       ,\"//int[@name='1'][.='2']\"\n    );\n\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n       \"terms.fl\",\"foo_i\", \"terms.raw\",\"true\")\n       ,\"not(//int[@name='1'][.='2'])\"\n    );\n\n    // check something at the end of the index\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n       \"terms.fl\",\"zzz_i\")\n        ,\"count(//lst[@name='zzz_i']/*)=0\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n       \"terms.fl\",\"lowerfilt\",\n       \"terms.lower\",\"a\",\n       \"terms.upper\",\"b\")\n       ,\"count(//lst[@name='lowerfilt']/*)=6\"\n       ,\"//int[@name='a'] \"\n       ,\"//int[@name='aa'] \"\n       ,\"//int[@name='aaa'] \"\n       ,\"//int[@name='ab'] \"\n       ,\"//int[@name='abb'] \"\n       ,\"//int[@name='abc'] \"\n    );\n\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n       \"terms.fl\",\"lowerfilt\",\n       \"terms.lower\",\"a\",\n       \"terms.upper\",\"b\",\n       \"terms.raw\",\"true\",    // this should have no effect on a text field\n       \"terms.limit\",\"2\")\n       ,\"count(//lst[@name='lowerfilt']/*)=2\"\n       ,\"//int[@name='a']\"\n       ,\"//int[@name='aa']\"\n    );\n\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n       \"terms.fl\",\"foo_i\")\n       ,\"//int[@name='1'][.='2']\"\n    );\n\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n       \"terms.fl\",\"foo_i\", \"terms.raw\",\"true\")\n       ,\"not(//int[@name='1'][.='2'])\"\n    );\n\n    // check something at the end of the index\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n       \"terms.fl\",\"zzz_i\")\n        ,\"count(//lst[@name='zzz_i']/*)=0\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermsComponentTest#test().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermsComponentTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n       \"terms.fl\",\"lowerfilt\",\n       \"terms.lower\",\"a\",\n       \"terms.upper\",\"b\")\n       ,\"count(//lst[@name='lowerfilt']/*)=6\"\n       ,\"//int[@name='a'] \"\n       ,\"//int[@name='aa'] \"\n       ,\"//int[@name='aaa'] \"\n       ,\"//int[@name='ab'] \"\n       ,\"//int[@name='abb'] \"\n       ,\"//int[@name='abc'] \"\n    );\n\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n       \"terms.fl\",\"lowerfilt\",\n       \"terms.lower\",\"a\",\n       \"terms.upper\",\"b\",\n       \"terms.raw\",\"true\",    // this should have no effect on a text field\n       \"terms.limit\",\"2\")\n       ,\"count(//lst[@name='lowerfilt']/*)=2\"\n       ,\"//int[@name='a']\"\n       ,\"//int[@name='aa']\"\n    );\n\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n       \"terms.fl\",\"foo_i\")\n       ,\"//int[@name='1'][.='2']\"\n    );\n\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n       \"terms.fl\",\"foo_i\", \"terms.raw\",\"true\")\n       ,\"not(//int[@name='1'][.='2'])\"\n    );\n\n    // check something at the end of the index\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n       \"terms.fl\",\"zzz_i\")\n        ,\"count(//lst[@name='zzz_i']/*)=0\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n       \"terms.fl\",\"lowerfilt\",\n       \"terms.lower\",\"a\",\n       \"terms.upper\",\"b\")\n       ,\"count(//lst[@name='lowerfilt']/*)=6\"\n       ,\"//int[@name='a'] \"\n       ,\"//int[@name='aa'] \"\n       ,\"//int[@name='aaa'] \"\n       ,\"//int[@name='ab'] \"\n       ,\"//int[@name='abb'] \"\n       ,\"//int[@name='abc'] \"\n    );\n\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n       \"terms.fl\",\"lowerfilt\",\n       \"terms.lower\",\"a\",\n       \"terms.upper\",\"b\",\n       \"terms.raw\",\"true\",    // this should have no effect on a text field\n       \"terms.limit\",\"2\")\n       ,\"count(//lst[@name='lowerfilt']/*)=2\"\n       ,\"//int[@name='a']\"\n       ,\"//int[@name='aa']\"\n    );\n\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n       \"terms.fl\",\"foo_i\")\n       ,\"//int[@name='1'][.='2']\"\n    );\n\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n       \"terms.fl\",\"foo_i\", \"terms.raw\",\"true\")\n       ,\"not(//int[@name='1'][.='2'])\"\n    );\n\n    // check something at the end of the index\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n       \"terms.fl\",\"zzz_i\")\n        ,\"count(//lst[@name='zzz_i']/*)=0\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"7b52974ba6a0658264b11d7c9b0035d57e5b8ab7":["3ef059c3aff15abd4c4963ba0e8beee74f96da3a"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["7b52974ba6a0658264b11d7c9b0035d57e5b8ab7"],"c26f00b574427b55127e869b935845554afde1fa":["7b52974ba6a0658264b11d7c9b0035d57e5b8ab7","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"3ef059c3aff15abd4c4963ba0e8beee74f96da3a":["1da8d55113b689b06716246649de6f62430f15c0"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["7b52974ba6a0658264b11d7c9b0035d57e5b8ab7"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["3ef059c3aff15abd4c4963ba0e8beee74f96da3a"],"7b52974ba6a0658264b11d7c9b0035d57e5b8ab7":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"3ef059c3aff15abd4c4963ba0e8beee74f96da3a":["7b52974ba6a0658264b11d7c9b0035d57e5b8ab7"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}