{"path":"modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#getQueryDOA(String,Analyzer).mjava","commits":[{"id":"b5629050969c1e696c5dc14e8639f3e733e8e33c","date":1313606044,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#getQueryDOA(String,Analyzer).mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#getQueryDOA(String,Analyzer).mjava","sourceNew":"  public Query getQueryDOA(String query, Analyzer a)\n    throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(random, MockTokenizer.SIMPLE, true);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", a);\n    qp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    return qp.parse(query);\n  }\n\n","sourceOld":"  public Query getQueryDOA(String query, Analyzer a)\n    throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(random, MockTokenizer.SIMPLE, true);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", a);\n    qp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    return qp.parse(query);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#getQueryDOA(String,Analyzer).mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#getQueryDOA(String,Analyzer).mjava","sourceNew":"  public Query getQueryDOA(String query, Analyzer a)\n    throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(random, MockTokenizer.SIMPLE, true);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", a);\n    qp.setDefaultOperator(QueryParserBase.AND_OPERATOR);\n    return qp.parse(query);\n  }\n\n","sourceOld":"  public Query getQueryDOA(String query, Analyzer a)\n    throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(random, MockTokenizer.SIMPLE, true);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", a);\n    qp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    return qp.parse(query);\n  }\n\n","bugFix":null,"bugIntro":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#getQueryDOA(String,Analyzer).mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#getQueryDOA(String,Analyzer).mjava","sourceNew":"  public Query getQueryDOA(String query, Analyzer a)\n    throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(random, MockTokenizer.SIMPLE, true);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", a);\n    qp.setDefaultOperator(QueryParserBase.AND_OPERATOR);\n    return qp.parse(query);\n  }\n\n","sourceOld":"  public Query getQueryDOA(String query, Analyzer a)\n    throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(random, MockTokenizer.SIMPLE, true);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", a);\n    qp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    return qp.parse(query);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#getQueryDOA(String,Analyzer).mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#getQueryDOA(String,Analyzer).mjava","sourceNew":"  public Query getQueryDOA(String query, Analyzer a)\n    throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", a);\n    qp.setDefaultOperator(QueryParserBase.AND_OPERATOR);\n    return qp.parse(query);\n  }\n\n","sourceOld":"  public Query getQueryDOA(String query, Analyzer a)\n    throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(random, MockTokenizer.SIMPLE, true);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", a);\n    qp.setDefaultOperator(QueryParserBase.AND_OPERATOR);\n    return qp.parse(query);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#getQueryDOA(String,Analyzer).mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#getQueryDOA(String,Analyzer).mjava","sourceNew":"  public Query getQueryDOA(String query, Analyzer a)\n    throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", a);\n    qp.setDefaultOperator(QueryParserBase.AND_OPERATOR);\n    return qp.parse(query);\n  }\n\n","sourceOld":"  public Query getQueryDOA(String query, Analyzer a)\n    throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", a);\n    qp.setDefaultOperator(QueryParserBase.AND_OPERATOR);\n    return qp.parse(query);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["b5629050969c1e696c5dc14e8639f3e733e8e33c","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["b5629050969c1e696c5dc14e8639f3e733e8e33c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b5629050969c1e696c5dc14e8639f3e733e8e33c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b5629050969c1e696c5dc14e8639f3e733e8e33c"],"b5629050969c1e696c5dc14e8639f3e733e8e33c":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}