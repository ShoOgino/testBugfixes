{"path":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetField#processDefiniteCandidateElement(PivotFacet,PivotFacetValue).mjava","commits":[{"id":"92751ba9273251eab6a2e379ec42a1697a32ff96","date":1407954233,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetField#processDefiniteCandidateElement(PivotFacet,PivotFacetValue).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Adds refinement requests for the value for each shard that has not already contributed \n   * a count for this value.\n   */\n  private void processDefiniteCandidateElement(PivotFacet pf, PivotFacetValue value) {\n    \n    for (int shard = pf.knownShards.nextSetBit(0); \n         0 <= shard; \n         shard = pf.knownShards.nextSetBit(shard+1)) {   \n      if ( ! value.shardHasContributed(shard) ) {\n        if ( // if we're doing index order, we need to refine anything  \n             // (mincount may have excluded from a shard)\n            FacetParams.FACET_SORT_INDEX.equals(facetFieldSort)\n             // if we are doing count order, we need to refine if the limit was hit\n             // (if it not, the shard doesn't have the value or it would have returned already)\n             || numberOfValuesContributedByShardWasLimitedByFacetFieldLimit(shard) ) {\n\n          pf.addRefinement(shard, value);\n        }\n      }\n    }  \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fa16b8f2a7bb28ece5a9fdc471357e89de17bc57","b6785b4fe22e78ff9bb8afd2d475325cfc1e006c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa16b8f2a7bb28ece5a9fdc471357e89de17bc57","date":1423733077,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetField#processDefiniteCandidateElement(PivotFacet,PivotFacetValue).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetField#processDefiniteCandidateElement(PivotFacet,PivotFacetValue).mjava","sourceNew":"  /**\n   * Adds refinement requests for the value for each shard that has not already contributed \n   * a count for this value.\n   */\n  private void processDefiniteCandidateElement(PivotFacet pf, PivotFacetValue value) {\n    \n    for (int shard = pf.knownShards.nextSetBit(0); \n         0 <= shard; \n         shard = pf.knownShards.nextSetBit(shard+1)) {   \n      if ( ! value.shardHasContributed(shard) ) {\n        if ( // if we're doing index order, we need to refine anything  \n             // (mincount may have excluded from a shard)\n            FacetParams.FACET_SORT_INDEX.equals(facetFieldSort)\n             // if we are doing count order, we need to refine if the limit was hit\n             // (if not, the shard doesn't have the value or it would have returned already)\n             || numberOfValuesContributedByShardWasLimitedByFacetFieldLimit(shard) ) {\n\n          pf.addRefinement(shard, value);\n        }\n      }\n    }  \n  }\n\n","sourceOld":"  /**\n   * Adds refinement requests for the value for each shard that has not already contributed \n   * a count for this value.\n   */\n  private void processDefiniteCandidateElement(PivotFacet pf, PivotFacetValue value) {\n    \n    for (int shard = pf.knownShards.nextSetBit(0); \n         0 <= shard; \n         shard = pf.knownShards.nextSetBit(shard+1)) {   \n      if ( ! value.shardHasContributed(shard) ) {\n        if ( // if we're doing index order, we need to refine anything  \n             // (mincount may have excluded from a shard)\n            FacetParams.FACET_SORT_INDEX.equals(facetFieldSort)\n             // if we are doing count order, we need to refine if the limit was hit\n             // (if it not, the shard doesn't have the value or it would have returned already)\n             || numberOfValuesContributedByShardWasLimitedByFacetFieldLimit(shard) ) {\n\n          pf.addRefinement(shard, value);\n        }\n      }\n    }  \n  }\n\n","bugFix":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"bugIntro":["b6785b4fe22e78ff9bb8afd2d475325cfc1e006c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b6785b4fe22e78ff9bb8afd2d475325cfc1e006c","date":1438054340,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetField#processDefiniteCandidateElement(PivotFacet,PivotFacetValue).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetField#processDefiniteCandidateElement(PivotFacet,PivotFacetValue).mjava","sourceNew":"  /**\n   * Adds refinement requests for the value for each shard that has not already contributed \n   * a count for this value.\n   */\n  private void processDefiniteCandidateElement(PivotFacet pf, PivotFacetValue value) {\n    \n    for (int shard = pf.knownShards.nextSetBit(0); \n         0 <= shard; \n         shard = pf.knownShards.nextSetBit(shard+1)) {   \n      if ( ! value.shardHasContributed(shard) ) {\n        if ( // if we're doing index order, we need to refine anything  \n             // (mincount may have excluded from a shard)\n            FacetParams.FACET_SORT_INDEX.equals(facetFieldSort)\n            || (// 'missing' value isn't affected by limit, needs refined if shard didn't provide\n                null == value.getValue() ||\n                // if we are doing count order, we need to refine if the limit was hit\n                // (if not, the shard doesn't have the value or it would have returned already)\n                numberOfValuesContributedByShardWasLimitedByFacetFieldLimit(shard))) {\n          pf.addRefinement(shard, value);\n        }\n      }\n    }  \n  }\n\n","sourceOld":"  /**\n   * Adds refinement requests for the value for each shard that has not already contributed \n   * a count for this value.\n   */\n  private void processDefiniteCandidateElement(PivotFacet pf, PivotFacetValue value) {\n    \n    for (int shard = pf.knownShards.nextSetBit(0); \n         0 <= shard; \n         shard = pf.knownShards.nextSetBit(shard+1)) {   \n      if ( ! value.shardHasContributed(shard) ) {\n        if ( // if we're doing index order, we need to refine anything  \n             // (mincount may have excluded from a shard)\n            FacetParams.FACET_SORT_INDEX.equals(facetFieldSort)\n             // if we are doing count order, we need to refine if the limit was hit\n             // (if not, the shard doesn't have the value or it would have returned already)\n             || numberOfValuesContributedByShardWasLimitedByFacetFieldLimit(shard) ) {\n\n          pf.addRefinement(shard, value);\n        }\n      }\n    }  \n  }\n\n","bugFix":["fa16b8f2a7bb28ece5a9fdc471357e89de17bc57","92751ba9273251eab6a2e379ec42a1697a32ff96"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"92751ba9273251eab6a2e379ec42a1697a32ff96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6785b4fe22e78ff9bb8afd2d475325cfc1e006c":["fa16b8f2a7bb28ece5a9fdc471357e89de17bc57"],"fa16b8f2a7bb28ece5a9fdc471357e89de17bc57":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b6785b4fe22e78ff9bb8afd2d475325cfc1e006c"]},"commit2Childs":{"92751ba9273251eab6a2e379ec42a1697a32ff96":["fa16b8f2a7bb28ece5a9fdc471357e89de17bc57"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"b6785b4fe22e78ff9bb8afd2d475325cfc1e006c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fa16b8f2a7bb28ece5a9fdc471357e89de17bc57":["b6785b4fe22e78ff9bb8afd2d475325cfc1e006c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}