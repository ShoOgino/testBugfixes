{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/ReplicaVariable#checkForRangeOperand(Operand,Object,Clause.ComputedType).mjava","commits":[{"id":"52316373036b9f161a08896e7c9ebf4389790a47","date":1533187246,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/ReplicaVariable#checkForRangeOperand(Operand,Object,Clause.ComputedType).mjava","pathOld":"/dev/null","sourceNew":"  static Operand checkForRangeOperand(Operand expected, Object strVal, Clause.ComputedType computedType) {\n    if (strVal instanceof String) {\n      String s = ((String) strVal).trim();\n      int hyphenIdx = s.indexOf('-');\n      if (hyphenIdx > 0) {\n        if (hyphenIdx == s.length() - 1) {\n          throw new IllegalArgumentException(\"bad range input :\" + expected);\n        }\n        if (expected == Operand.EQUAL) return Operand.RANGE_EQUAL;\n        if (expected == Operand.NOT_EQUAL) return Operand.RANGE_NOT_EQUAL;\n      }\n\n    }\n\n    if (expected == Operand.EQUAL && (computedType != null || !isIntegerEquivalent(strVal))) {\n      return Operand.RANGE_EQUAL;\n    }\n    if (expected == Operand.NOT_EQUAL && (computedType != null || !isIntegerEquivalent(strVal)))\n      return Operand.RANGE_NOT_EQUAL;\n\n    return expected;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb","date":1533364463,"type":5,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/ReplicaVariable#checkForRangeOperand(Operand,Object,ComputedType).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/ReplicaVariable#checkForRangeOperand(Operand,Object,Clause.ComputedType).mjava","sourceNew":"  static Operand checkForRangeOperand(Operand expected, Object strVal, ComputedType computedType) {\n    if (strVal instanceof String) {\n      String s = ((String) strVal).trim();\n      int hyphenIdx = s.indexOf('-');\n      if (hyphenIdx > 0) {\n        if (hyphenIdx == s.length() - 1) {\n          throw new IllegalArgumentException(\"bad range input :\" + expected);\n        }\n        if (expected == Operand.EQUAL) return Operand.RANGE_EQUAL;\n        if (expected == Operand.NOT_EQUAL) return Operand.RANGE_NOT_EQUAL;\n      }\n\n    }\n\n    if (expected == Operand.EQUAL && (computedType != null || !isIntegerEquivalent(strVal))) {\n      return Operand.RANGE_EQUAL;\n    }\n    if (expected == Operand.NOT_EQUAL && (computedType != null || !isIntegerEquivalent(strVal)))\n      return Operand.RANGE_NOT_EQUAL;\n\n    return expected;\n  }\n\n","sourceOld":"  static Operand checkForRangeOperand(Operand expected, Object strVal, Clause.ComputedType computedType) {\n    if (strVal instanceof String) {\n      String s = ((String) strVal).trim();\n      int hyphenIdx = s.indexOf('-');\n      if (hyphenIdx > 0) {\n        if (hyphenIdx == s.length() - 1) {\n          throw new IllegalArgumentException(\"bad range input :\" + expected);\n        }\n        if (expected == Operand.EQUAL) return Operand.RANGE_EQUAL;\n        if (expected == Operand.NOT_EQUAL) return Operand.RANGE_NOT_EQUAL;\n      }\n\n    }\n\n    if (expected == Operand.EQUAL && (computedType != null || !isIntegerEquivalent(strVal))) {\n      return Operand.RANGE_EQUAL;\n    }\n    if (expected == Operand.NOT_EQUAL && (computedType != null || !isIntegerEquivalent(strVal)))\n      return Operand.RANGE_NOT_EQUAL;\n\n    return expected;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb":["52316373036b9f161a08896e7c9ebf4389790a47"],"52316373036b9f161a08896e7c9ebf4389790a47":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["52316373036b9f161a08896e7c9ebf4389790a47"],"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"52316373036b9f161a08896e7c9ebf4389790a47":["cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}