{"path":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","commits":[{"id":"91e069c492cf4895697ef7b81df0ffb9a8bd4b48","date":1382134253,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","pathOld":"/dev/null","sourceNew":"  private void doRetriesIfNeeded() {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<Error>(this.errors);\n    errors.addAll(servers.getErrors());\n    allErrors.addAll(errors);\n    boolean blockUntilFinishedAgain = false;\n    for (Error err : errors) {\n      String oldNodeUrl = err.req.node.getUrl();\n      \n      // if there is a retry url, we want to retry...\n      boolean isRetry = err.req.node.checkRetry();\n      boolean doRetry = false;\n      int rspCode = err.statusCode;\n      \n      if (testing_errorHook != null) Diagnostics.call(testing_errorHook, err.e);\n      \n      // this can happen in certain situations such as shutdown\n      if (isRetry) {\n        if (rspCode == 404 || rspCode == 403 || rspCode == 503\n            || rspCode == 500) {\n          doRetry = true;\n        }\n        \n        // if its an ioexception, lets try again\n        if (err.e instanceof IOException) {\n          doRetry = true;\n        } else if (err.e instanceof SolrServerException) {\n          if (((SolrServerException) err.e).getRootCause() instanceof IOException) {\n            doRetry = true;\n          }\n        }\n      }\n      \n      if (isRetry && err.req.retries < MAX_RETRIES_ON_FORWARD && doRetry) {\n        err.req.retries++;\n\n        SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n            + oldNodeUrl + \" failed - retrying ... \");\n        try {\n          Thread.sleep(500);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          log.warn(null, e);\n        }\n        \n        submit(err.req);\n        blockUntilFinishedAgain = true;\n      }\n    }\n    \n    servers.clearErrors();\n    this.errors.clear();\n    \n    if (blockUntilFinishedAgain) {\n      servers.blockUntilFinished();\n      doRetriesIfNeeded();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["482ca6c86d7073e3c19096bdc74fe0e73da4554a","e483b96a4c951399b8188cbf6a2e8c0d6b95ba6b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7adf9b18b459a0b9db8cab49eb9411d5f136c65d","date":1382993026,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","sourceNew":"  private void doRetriesIfNeeded() {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<Error>(this.errors);\n    errors.addAll(servers.getErrors());\n    allErrors.addAll(errors);\n    boolean blockUntilFinishedAgain = false;\n    for (Error err : errors) {\n      try {\n        String oldNodeUrl = err.req.node.getUrl();\n        \n        // if there is a retry url, we want to retry...\n        boolean isRetry = err.req.node.checkRetry();\n        boolean doRetry = false;\n        int rspCode = err.statusCode;\n        \n        if (testing_errorHook != null) Diagnostics.call(testing_errorHook,\n            err.e);\n        \n        // this can happen in certain situations such as shutdown\n        if (isRetry) {\n          if (rspCode == 404 || rspCode == 403 || rspCode == 503\n              || rspCode == 500) {\n            doRetry = true;\n          }\n          \n          // if its an ioexception, lets try again\n          if (err.e instanceof IOException) {\n            doRetry = true;\n          } else if (err.e instanceof SolrServerException) {\n            if (((SolrServerException) err.e).getRootCause() instanceof IOException) {\n              doRetry = true;\n            }\n          }\n        }\n        \n        if (isRetry && err.req.retries < MAX_RETRIES_ON_FORWARD && doRetry) {\n          err.req.retries++;\n          \n          SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n              + oldNodeUrl + \" failed - retrying ... \");\n          try {\n            Thread.sleep(500);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.warn(null, e);\n          }\n          \n          submit(err.req);\n          blockUntilFinishedAgain = true;\n        }\n      } catch (Exception e) {\n        SolrException.log(log, \"Retry attempt failed\", e);\n      }\n    }\n    \n    servers.clearErrors();\n    this.errors.clear();\n    \n    if (blockUntilFinishedAgain) {\n      servers.blockUntilFinished();\n      doRetriesIfNeeded();\n    }\n  }\n\n","sourceOld":"  private void doRetriesIfNeeded() {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<Error>(this.errors);\n    errors.addAll(servers.getErrors());\n    allErrors.addAll(errors);\n    boolean blockUntilFinishedAgain = false;\n    for (Error err : errors) {\n      String oldNodeUrl = err.req.node.getUrl();\n      \n      // if there is a retry url, we want to retry...\n      boolean isRetry = err.req.node.checkRetry();\n      boolean doRetry = false;\n      int rspCode = err.statusCode;\n      \n      if (testing_errorHook != null) Diagnostics.call(testing_errorHook, err.e);\n      \n      // this can happen in certain situations such as shutdown\n      if (isRetry) {\n        if (rspCode == 404 || rspCode == 403 || rspCode == 503\n            || rspCode == 500) {\n          doRetry = true;\n        }\n        \n        // if its an ioexception, lets try again\n        if (err.e instanceof IOException) {\n          doRetry = true;\n        } else if (err.e instanceof SolrServerException) {\n          if (((SolrServerException) err.e).getRootCause() instanceof IOException) {\n            doRetry = true;\n          }\n        }\n      }\n      \n      if (isRetry && err.req.retries < MAX_RETRIES_ON_FORWARD && doRetry) {\n        err.req.retries++;\n\n        SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n            + oldNodeUrl + \" failed - retrying ... \");\n        try {\n          Thread.sleep(500);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          log.warn(null, e);\n        }\n        \n        submit(err.req);\n        blockUntilFinishedAgain = true;\n      }\n    }\n    \n    servers.clearErrors();\n    this.errors.clear();\n    \n    if (blockUntilFinishedAgain) {\n      servers.blockUntilFinished();\n      doRetriesIfNeeded();\n    }\n  }\n\n","bugFix":null,"bugIntro":["c0cf9c2ec975506bab465b6b2be92cb9bffc84d3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6d5e40574a14e38bb8d289d77669498bce3c7737","date":1383353210,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","sourceNew":"  private void doRetriesIfNeeded() {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<Error>(this.errors);\n    errors.addAll(servers.getErrors());\n\n    boolean blockUntilFinishedAgain = false;\n    for (Error err : errors) {\n      String oldNodeUrl = err.req.node.getUrl();\n      \n      // if there is a retry url, we want to retry...\n      boolean isRetry = err.req.node.checkRetry();\n      boolean doRetry = false;\n      int rspCode = err.statusCode;\n      \n      if (testing_errorHook != null) Diagnostics.call(testing_errorHook, err.e);\n      \n      // this can happen in certain situations such as shutdown\n      if (isRetry) {\n        if (rspCode == 404 || rspCode == 403 || rspCode == 503\n            || rspCode == 500) {\n          doRetry = true;\n        }\n        \n        // if its an ioexception, lets try again\n        if (err.e instanceof IOException) {\n          doRetry = true;\n        } else if (err.e instanceof SolrServerException) {\n          if (((SolrServerException) err.e).getRootCause() instanceof IOException) {\n            doRetry = true;\n          }\n        }\n        if (err.req.retries < MAX_RETRIES_ON_FORWARD && doRetry) {\n          err.req.retries++;\n          \n          SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n              + oldNodeUrl + \" failed - retrying ... retries: \" + err.req.retries);\n          try {\n            Thread.sleep(500);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.warn(null, e);\n          }\n          \n          submit(err.req);\n          blockUntilFinishedAgain = true;\n        } else {\n          allErrors.add(err);\n        }\n      } else {\n        allErrors.add(err);\n      }\n    }\n    \n    servers.clearErrors();\n    this.errors.clear();\n    \n    if (blockUntilFinishedAgain) {\n      servers.blockUntilFinished();\n      doRetriesIfNeeded();\n    }\n  }\n\n","sourceOld":"  private void doRetriesIfNeeded() {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<Error>(this.errors);\n    errors.addAll(servers.getErrors());\n    allErrors.addAll(errors);\n    boolean blockUntilFinishedAgain = false;\n    for (Error err : errors) {\n      try {\n        String oldNodeUrl = err.req.node.getUrl();\n        \n        // if there is a retry url, we want to retry...\n        boolean isRetry = err.req.node.checkRetry();\n        boolean doRetry = false;\n        int rspCode = err.statusCode;\n        \n        if (testing_errorHook != null) Diagnostics.call(testing_errorHook,\n            err.e);\n        \n        // this can happen in certain situations such as shutdown\n        if (isRetry) {\n          if (rspCode == 404 || rspCode == 403 || rspCode == 503\n              || rspCode == 500) {\n            doRetry = true;\n          }\n          \n          // if its an ioexception, lets try again\n          if (err.e instanceof IOException) {\n            doRetry = true;\n          } else if (err.e instanceof SolrServerException) {\n            if (((SolrServerException) err.e).getRootCause() instanceof IOException) {\n              doRetry = true;\n            }\n          }\n        }\n        \n        if (isRetry && err.req.retries < MAX_RETRIES_ON_FORWARD && doRetry) {\n          err.req.retries++;\n          \n          SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n              + oldNodeUrl + \" failed - retrying ... \");\n          try {\n            Thread.sleep(500);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.warn(null, e);\n          }\n          \n          submit(err.req);\n          blockUntilFinishedAgain = true;\n        }\n      } catch (Exception e) {\n        SolrException.log(log, \"Retry attempt failed\", e);\n      }\n    }\n    \n    servers.clearErrors();\n    this.errors.clear();\n    \n    if (blockUntilFinishedAgain) {\n      servers.blockUntilFinished();\n      doRetriesIfNeeded();\n    }\n  }\n\n","bugFix":null,"bugIntro":["c0cf9c2ec975506bab465b6b2be92cb9bffc84d3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3e5ef402099a6d54398ce3ac65c0b7506bbfece5","date":1384830813,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","sourceNew":"  private void doRetriesIfNeeded() {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<Error>(this.errors);\n    errors.addAll(servers.getErrors());\n    List<Error> resubmitList = new ArrayList<Error>();\n\n    for (Error err : errors) {\n      String oldNodeUrl = err.req.node.getUrl();\n      \n      // if there is a retry url, we want to retry...\n      boolean isRetry = err.req.node.checkRetry();\n      boolean doRetry = false;\n      int rspCode = err.statusCode;\n      \n      if (testing_errorHook != null) Diagnostics.call(testing_errorHook, err.e);\n      \n      // this can happen in certain situations such as shutdown\n      if (isRetry) {\n        if (rspCode == 404 || rspCode == 403 || rspCode == 503\n            || rspCode == 500) {\n          doRetry = true;\n        }\n        \n        // if its an ioexception, lets try again\n        if (err.e instanceof IOException) {\n          doRetry = true;\n        } else if (err.e instanceof SolrServerException) {\n          if (((SolrServerException) err.e).getRootCause() instanceof IOException) {\n            doRetry = true;\n          }\n        }\n        if (err.req.retries < MAX_RETRIES_ON_FORWARD && doRetry) {\n          err.req.retries++;\n          \n          SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n              + oldNodeUrl + \" failed - retrying ... retries: \" + err.req.retries);\n          try {\n            Thread.sleep(500);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.warn(null, e);\n          }\n          \n          resubmitList.add(err);\n        } else {\n          allErrors.add(err);\n        }\n      } else {\n        allErrors.add(err);\n      }\n    }\n    \n    servers.clearErrors();\n    this.errors.clear();\n    for (Error err : resubmitList) {\n      submit(err.req);\n    }\n    \n    if (resubmitList.size() > 0) {\n      servers.blockUntilFinished();\n      doRetriesIfNeeded();\n    }\n  }\n\n","sourceOld":"  private void doRetriesIfNeeded() {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<Error>(this.errors);\n    errors.addAll(servers.getErrors());\n\n    boolean blockUntilFinishedAgain = false;\n    for (Error err : errors) {\n      String oldNodeUrl = err.req.node.getUrl();\n      \n      // if there is a retry url, we want to retry...\n      boolean isRetry = err.req.node.checkRetry();\n      boolean doRetry = false;\n      int rspCode = err.statusCode;\n      \n      if (testing_errorHook != null) Diagnostics.call(testing_errorHook, err.e);\n      \n      // this can happen in certain situations such as shutdown\n      if (isRetry) {\n        if (rspCode == 404 || rspCode == 403 || rspCode == 503\n            || rspCode == 500) {\n          doRetry = true;\n        }\n        \n        // if its an ioexception, lets try again\n        if (err.e instanceof IOException) {\n          doRetry = true;\n        } else if (err.e instanceof SolrServerException) {\n          if (((SolrServerException) err.e).getRootCause() instanceof IOException) {\n            doRetry = true;\n          }\n        }\n        if (err.req.retries < MAX_RETRIES_ON_FORWARD && doRetry) {\n          err.req.retries++;\n          \n          SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n              + oldNodeUrl + \" failed - retrying ... retries: \" + err.req.retries);\n          try {\n            Thread.sleep(500);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.warn(null, e);\n          }\n          \n          submit(err.req);\n          blockUntilFinishedAgain = true;\n        } else {\n          allErrors.add(err);\n        }\n      } else {\n        allErrors.add(err);\n      }\n    }\n    \n    servers.clearErrors();\n    this.errors.clear();\n    \n    if (blockUntilFinishedAgain) {\n      servers.blockUntilFinished();\n      doRetriesIfNeeded();\n    }\n  }\n\n","bugFix":null,"bugIntro":["e483b96a4c951399b8188cbf6a2e8c0d6b95ba6b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"99e7358ea6164009218b511839476278da9f44f2","date":1384980283,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","sourceNew":"  private void doRetriesIfNeeded() {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<Error>(this.errors);\n    errors.addAll(servers.getErrors());\n    List<Error> resubmitList = new ArrayList<Error>();\n\n    for (Error err : errors) {\n      try {\n        String oldNodeUrl = err.req.node.getUrl();\n        \n        // if there is a retry url, we want to retry...\n        boolean isRetry = err.req.node.checkRetry();\n        \n        boolean doRetry = false;\n        int rspCode = err.statusCode;\n        \n        if (testing_errorHook != null) Diagnostics.call(testing_errorHook,\n            err.e);\n        \n        // this can happen in certain situations such as shutdown\n        if (isRetry) {\n          if (rspCode == 404 || rspCode == 403 || rspCode == 503\n              || rspCode == 500) {\n            doRetry = true;\n          }\n          \n          // if its an ioexception, lets try again\n          if (err.e instanceof IOException) {\n            doRetry = true;\n          } else if (err.e instanceof SolrServerException) {\n            if (((SolrServerException) err.e).getRootCause() instanceof IOException) {\n              doRetry = true;\n            }\n          }\n          if (err.req.retries < MAX_RETRIES_ON_FORWARD && doRetry) {\n            err.req.retries++;\n            \n            SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n                + oldNodeUrl + \" failed - retrying ... retries: \"\n                + err.req.retries);\n            try {\n              Thread.sleep(500);\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n              log.warn(null, e);\n            }\n            \n            resubmitList.add(err);\n          } else {\n            allErrors.add(err);\n          }\n        } else {\n          allErrors.add(err);\n        }\n      } catch (Exception e) {\n        // continue on\n        log.error(\"Unexpected Error while doing request retries\", e);\n      }\n    }\n    \n    servers.clearErrors();\n    this.errors.clear();\n    for (Error err : resubmitList) {\n      submit(err.req);\n    }\n    \n    if (resubmitList.size() > 0) {\n      servers.blockUntilFinished();\n      doRetriesIfNeeded();\n    }\n  }\n\n","sourceOld":"  private void doRetriesIfNeeded() {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<Error>(this.errors);\n    errors.addAll(servers.getErrors());\n    List<Error> resubmitList = new ArrayList<Error>();\n\n    for (Error err : errors) {\n      String oldNodeUrl = err.req.node.getUrl();\n      \n      // if there is a retry url, we want to retry...\n      boolean isRetry = err.req.node.checkRetry();\n      boolean doRetry = false;\n      int rspCode = err.statusCode;\n      \n      if (testing_errorHook != null) Diagnostics.call(testing_errorHook, err.e);\n      \n      // this can happen in certain situations such as shutdown\n      if (isRetry) {\n        if (rspCode == 404 || rspCode == 403 || rspCode == 503\n            || rspCode == 500) {\n          doRetry = true;\n        }\n        \n        // if its an ioexception, lets try again\n        if (err.e instanceof IOException) {\n          doRetry = true;\n        } else if (err.e instanceof SolrServerException) {\n          if (((SolrServerException) err.e).getRootCause() instanceof IOException) {\n            doRetry = true;\n          }\n        }\n        if (err.req.retries < MAX_RETRIES_ON_FORWARD && doRetry) {\n          err.req.retries++;\n          \n          SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n              + oldNodeUrl + \" failed - retrying ... retries: \" + err.req.retries);\n          try {\n            Thread.sleep(500);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.warn(null, e);\n          }\n          \n          resubmitList.add(err);\n        } else {\n          allErrors.add(err);\n        }\n      } else {\n        allErrors.add(err);\n      }\n    }\n    \n    servers.clearErrors();\n    this.errors.clear();\n    for (Error err : resubmitList) {\n      submit(err.req);\n    }\n    \n    if (resubmitList.size() > 0) {\n      servers.blockUntilFinished();\n      doRetriesIfNeeded();\n    }\n  }\n\n","bugFix":null,"bugIntro":["c0cf9c2ec975506bab465b6b2be92cb9bffc84d3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0491dc45f6b12f57e9c33751e9317a01995556c6","date":1385418725,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","sourceNew":"  private void doRetriesIfNeeded() {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<Error>(this.errors);\n    errors.addAll(servers.getErrors());\n    List<Error> resubmitList = new ArrayList<Error>();\n\n    for (Error err : errors) {\n      try {\n        String oldNodeUrl = err.req.node.getUrl();\n        \n        // if there is a retry url, we want to retry...\n        boolean isRetry = err.req.node.checkRetry();\n        \n        boolean doRetry = false;\n        int rspCode = err.statusCode;\n        \n        if (testing_errorHook != null) Diagnostics.call(testing_errorHook,\n            err.e);\n        \n        // this can happen in certain situations such as shutdown\n        if (isRetry) {\n          if (rspCode == 404 || rspCode == 403 || rspCode == 503) {\n            doRetry = true;\n          }\n          \n          // if its an ioexception, lets try again\n          if (err.e instanceof IOException) {\n            doRetry = true;\n          } else if (err.e instanceof SolrServerException) {\n            if (((SolrServerException) err.e).getRootCause() instanceof IOException) {\n              doRetry = true;\n            }\n          }\n          if (err.req.retries < maxRetriesOnForward && doRetry) {\n            err.req.retries++;\n            \n            SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n                + oldNodeUrl + \" failed - retrying ... retries: \"\n                + err.req.retries);\n            try {\n              Thread.sleep(retryPause);\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n              log.warn(null, e);\n            }\n            \n            resubmitList.add(err);\n          } else {\n            allErrors.add(err);\n          }\n        } else {\n          allErrors.add(err);\n        }\n      } catch (Exception e) {\n        // continue on\n        log.error(\"Unexpected Error while doing request retries\", e);\n      }\n    }\n    \n    servers.clearErrors();\n    this.errors.clear();\n    for (Error err : resubmitList) {\n      submit(err.req);\n    }\n    \n    if (resubmitList.size() > 0) {\n      servers.blockUntilFinished();\n      doRetriesIfNeeded();\n    }\n  }\n\n","sourceOld":"  private void doRetriesIfNeeded() {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<Error>(this.errors);\n    errors.addAll(servers.getErrors());\n    List<Error> resubmitList = new ArrayList<Error>();\n\n    for (Error err : errors) {\n      try {\n        String oldNodeUrl = err.req.node.getUrl();\n        \n        // if there is a retry url, we want to retry...\n        boolean isRetry = err.req.node.checkRetry();\n        \n        boolean doRetry = false;\n        int rspCode = err.statusCode;\n        \n        if (testing_errorHook != null) Diagnostics.call(testing_errorHook,\n            err.e);\n        \n        // this can happen in certain situations such as shutdown\n        if (isRetry) {\n          if (rspCode == 404 || rspCode == 403 || rspCode == 503\n              || rspCode == 500) {\n            doRetry = true;\n          }\n          \n          // if its an ioexception, lets try again\n          if (err.e instanceof IOException) {\n            doRetry = true;\n          } else if (err.e instanceof SolrServerException) {\n            if (((SolrServerException) err.e).getRootCause() instanceof IOException) {\n              doRetry = true;\n            }\n          }\n          if (err.req.retries < MAX_RETRIES_ON_FORWARD && doRetry) {\n            err.req.retries++;\n            \n            SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n                + oldNodeUrl + \" failed - retrying ... retries: \"\n                + err.req.retries);\n            try {\n              Thread.sleep(500);\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n              log.warn(null, e);\n            }\n            \n            resubmitList.add(err);\n          } else {\n            allErrors.add(err);\n          }\n        } else {\n          allErrors.add(err);\n        }\n      } catch (Exception e) {\n        // continue on\n        log.error(\"Unexpected Error while doing request retries\", e);\n      }\n    }\n    \n    servers.clearErrors();\n    this.errors.clear();\n    for (Error err : resubmitList) {\n      submit(err.req);\n    }\n    \n    if (resubmitList.size() > 0) {\n      servers.blockUntilFinished();\n      doRetriesIfNeeded();\n    }\n  }\n\n","bugFix":null,"bugIntro":["c0cf9c2ec975506bab465b6b2be92cb9bffc84d3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6d0939a3d7e30b8aaa693d32eb2342732b9fce14","date":1385423980,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","sourceNew":"  private void doRetriesIfNeeded() {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<Error>(this.errors);\n    errors.addAll(servers.getErrors());\n    List<Error> resubmitList = new ArrayList<Error>();\n\n    for (Error err : errors) {\n      try {\n        String oldNodeUrl = err.req.node.getUrl();\n        \n        // if there is a retry url, we want to retry...\n        boolean isRetry = err.req.node.checkRetry();\n        \n        boolean doRetry = false;\n        int rspCode = err.statusCode;\n        \n        if (testing_errorHook != null) Diagnostics.call(testing_errorHook,\n            err.e);\n        \n        // this can happen in certain situations such as shutdown\n        if (isRetry) {\n          if (rspCode == 404 || rspCode == 403 || rspCode == 503) {\n            doRetry = true;\n          }\n          \n          // if its a connect exception, lets try again\n          if (err.e instanceof ConnectException) {\n            doRetry = true;\n          } else if (err.e instanceof SolrServerException) {\n            if (((SolrServerException) err.e).getRootCause() instanceof ConnectException) {\n              doRetry = true;\n            }\n          } else if (err.e instanceof RemoteSolrException) {\n            Exception cause = (RemoteSolrException) err.e.getCause();\n            if (cause != null && cause instanceof ConnectException) {\n              doRetry = true;\n            }\n          }\n          if (err.req.retries < maxRetriesOnForward && doRetry) {\n            err.req.retries++;\n            \n            SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n                + oldNodeUrl + \" failed - retrying ... retries: \"\n                + err.req.retries);\n            try {\n              Thread.sleep(retryPause);\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n              log.warn(null, e);\n            }\n            \n            resubmitList.add(err);\n          } else {\n            allErrors.add(err);\n          }\n        } else {\n          allErrors.add(err);\n        }\n      } catch (Exception e) {\n        // continue on\n        log.error(\"Unexpected Error while doing request retries\", e);\n      }\n    }\n    \n    servers.clearErrors();\n    this.errors.clear();\n    for (Error err : resubmitList) {\n      submit(err.req);\n    }\n    \n    if (resubmitList.size() > 0) {\n      servers.blockUntilFinished();\n      doRetriesIfNeeded();\n    }\n  }\n\n","sourceOld":"  private void doRetriesIfNeeded() {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<Error>(this.errors);\n    errors.addAll(servers.getErrors());\n    List<Error> resubmitList = new ArrayList<Error>();\n\n    for (Error err : errors) {\n      try {\n        String oldNodeUrl = err.req.node.getUrl();\n        \n        // if there is a retry url, we want to retry...\n        boolean isRetry = err.req.node.checkRetry();\n        \n        boolean doRetry = false;\n        int rspCode = err.statusCode;\n        \n        if (testing_errorHook != null) Diagnostics.call(testing_errorHook,\n            err.e);\n        \n        // this can happen in certain situations such as shutdown\n        if (isRetry) {\n          if (rspCode == 404 || rspCode == 403 || rspCode == 503) {\n            doRetry = true;\n          }\n          \n          // if its an ioexception, lets try again\n          if (err.e instanceof IOException) {\n            doRetry = true;\n          } else if (err.e instanceof SolrServerException) {\n            if (((SolrServerException) err.e).getRootCause() instanceof IOException) {\n              doRetry = true;\n            }\n          }\n          if (err.req.retries < maxRetriesOnForward && doRetry) {\n            err.req.retries++;\n            \n            SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n                + oldNodeUrl + \" failed - retrying ... retries: \"\n                + err.req.retries);\n            try {\n              Thread.sleep(retryPause);\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n              log.warn(null, e);\n            }\n            \n            resubmitList.add(err);\n          } else {\n            allErrors.add(err);\n          }\n        } else {\n          allErrors.add(err);\n        }\n      } catch (Exception e) {\n        // continue on\n        log.error(\"Unexpected Error while doing request retries\", e);\n      }\n    }\n    \n    servers.clearErrors();\n    this.errors.clear();\n    for (Error err : resubmitList) {\n      submit(err.req);\n    }\n    \n    if (resubmitList.size() > 0) {\n      servers.blockUntilFinished();\n      doRetriesIfNeeded();\n    }\n  }\n\n","bugFix":null,"bugIntro":["c0cf9c2ec975506bab465b6b2be92cb9bffc84d3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"68bccf37d3bf3d0924d55ab08d457d8045342a4e","date":1385580262,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","sourceNew":"  private void doRetriesIfNeeded() {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<Error>(this.errors);\n    errors.addAll(servers.getErrors());\n    List<Error> resubmitList = new ArrayList<Error>();\n\n    for (Error err : errors) {\n      try {\n        String oldNodeUrl = err.req.node.getUrl();\n        \n        // if there is a retry url, we want to retry...\n        boolean isRetry = err.req.node.checkRetry();\n        \n        boolean doRetry = false;\n        int rspCode = err.statusCode;\n        \n        if (testing_errorHook != null) Diagnostics.call(testing_errorHook,\n            err.e);\n        \n        // this can happen in certain situations such as shutdown\n        if (isRetry) {\n          if (rspCode == 404 || rspCode == 403 || rspCode == 503) {\n            doRetry = true;\n          }\n          \n          // if its a connect exception, lets try again\n          if (err.e instanceof ConnectException) {\n            doRetry = true;\n          } else if (err.e instanceof SolrServerException) {\n            if (((SolrServerException) err.e).getRootCause() instanceof ConnectException) {\n              doRetry = true;\n            }\n          } else if (err.e instanceof RemoteSolrException) {\n            Exception cause = (RemoteSolrException) err.e.getCause();\n            if (cause != null && cause instanceof ConnectException) {\n              doRetry = true;\n            }\n          }\n          if (err.req.retries < maxRetriesOnForward && doRetry) {\n            err.req.retries++;\n            \n            SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n                + oldNodeUrl + \" failed - retrying ... retries: \"\n                + err.req.retries + \" \" + err.req.cmdString, err.e);\n            try {\n              Thread.sleep(retryPause);\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n              log.warn(null, e);\n            }\n            \n            resubmitList.add(err);\n          } else {\n            allErrors.add(err);\n          }\n        } else {\n          allErrors.add(err);\n        }\n      } catch (Exception e) {\n        // continue on\n        log.error(\"Unexpected Error while doing request retries\", e);\n      }\n    }\n    \n    servers.clearErrors();\n    this.errors.clear();\n    for (Error err : resubmitList) {\n      submit(err.req);\n    }\n    \n    if (resubmitList.size() > 0) {\n      servers.blockUntilFinished();\n      doRetriesIfNeeded();\n    }\n  }\n\n","sourceOld":"  private void doRetriesIfNeeded() {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<Error>(this.errors);\n    errors.addAll(servers.getErrors());\n    List<Error> resubmitList = new ArrayList<Error>();\n\n    for (Error err : errors) {\n      try {\n        String oldNodeUrl = err.req.node.getUrl();\n        \n        // if there is a retry url, we want to retry...\n        boolean isRetry = err.req.node.checkRetry();\n        \n        boolean doRetry = false;\n        int rspCode = err.statusCode;\n        \n        if (testing_errorHook != null) Diagnostics.call(testing_errorHook,\n            err.e);\n        \n        // this can happen in certain situations such as shutdown\n        if (isRetry) {\n          if (rspCode == 404 || rspCode == 403 || rspCode == 503) {\n            doRetry = true;\n          }\n          \n          // if its a connect exception, lets try again\n          if (err.e instanceof ConnectException) {\n            doRetry = true;\n          } else if (err.e instanceof SolrServerException) {\n            if (((SolrServerException) err.e).getRootCause() instanceof ConnectException) {\n              doRetry = true;\n            }\n          } else if (err.e instanceof RemoteSolrException) {\n            Exception cause = (RemoteSolrException) err.e.getCause();\n            if (cause != null && cause instanceof ConnectException) {\n              doRetry = true;\n            }\n          }\n          if (err.req.retries < maxRetriesOnForward && doRetry) {\n            err.req.retries++;\n            \n            SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n                + oldNodeUrl + \" failed - retrying ... retries: \"\n                + err.req.retries);\n            try {\n              Thread.sleep(retryPause);\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n              log.warn(null, e);\n            }\n            \n            resubmitList.add(err);\n          } else {\n            allErrors.add(err);\n          }\n        } else {\n          allErrors.add(err);\n        }\n      } catch (Exception e) {\n        // continue on\n        log.error(\"Unexpected Error while doing request retries\", e);\n      }\n    }\n    \n    servers.clearErrors();\n    this.errors.clear();\n    for (Error err : resubmitList) {\n      submit(err.req);\n    }\n    \n    if (resubmitList.size() > 0) {\n      servers.blockUntilFinished();\n      doRetriesIfNeeded();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ce545e833f5334e245fb71d83c3460ef83c2d5e","date":1385773467,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","sourceNew":"  private void doRetriesIfNeeded() {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<Error>(this.errors);\n    errors.addAll(servers.getErrors());\n    List<Error> resubmitList = new ArrayList<Error>();\n\n    for (Error err : errors) {\n      try {\n        String oldNodeUrl = err.req.node.getUrl();\n        \n        // if there is a retry url, we want to retry...\n        boolean isRetry = err.req.node.checkRetry();\n        \n        boolean doRetry = false;\n        int rspCode = err.statusCode;\n        \n        if (testing_errorHook != null) Diagnostics.call(testing_errorHook,\n            err.e);\n        \n        // this can happen in certain situations such as shutdown\n        if (isRetry) {\n          if (rspCode == 404 || rspCode == 403 || rspCode == 503) {\n            doRetry = true;\n          }\n          \n          // if its a connect exception, lets try again\n          if (err.e instanceof SolrServerException) {\n            if (((SolrServerException) err.e).getRootCause() instanceof ConnectException) {\n              doRetry = true;\n            }\n          }\n          \n          if (err.e instanceof ConnectException) {\n            doRetry = true;\n          }\n          \n          if (err.req.retries < maxRetriesOnForward && doRetry) {\n            err.req.retries++;\n            \n            SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n                + oldNodeUrl + \" failed - retrying ... retries: \"\n                + err.req.retries + \" \" + err.req.cmdString + \" rsp:\" + rspCode, err.e);\n            try {\n              Thread.sleep(retryPause);\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n              log.warn(null, e);\n            }\n            \n            resubmitList.add(err);\n          } else {\n            allErrors.add(err);\n          }\n        } else {\n          allErrors.add(err);\n        }\n      } catch (Exception e) {\n        // continue on\n        log.error(\"Unexpected Error while doing request retries\", e);\n      }\n    }\n    \n    servers.clearErrors();\n    this.errors.clear();\n    for (Error err : resubmitList) {\n      submit(err.req);\n    }\n    \n    if (resubmitList.size() > 0) {\n      servers.blockUntilFinished();\n      doRetriesIfNeeded();\n    }\n  }\n\n","sourceOld":"  private void doRetriesIfNeeded() {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<Error>(this.errors);\n    errors.addAll(servers.getErrors());\n    List<Error> resubmitList = new ArrayList<Error>();\n\n    for (Error err : errors) {\n      try {\n        String oldNodeUrl = err.req.node.getUrl();\n        \n        // if there is a retry url, we want to retry...\n        boolean isRetry = err.req.node.checkRetry();\n        \n        boolean doRetry = false;\n        int rspCode = err.statusCode;\n        \n        if (testing_errorHook != null) Diagnostics.call(testing_errorHook,\n            err.e);\n        \n        // this can happen in certain situations such as shutdown\n        if (isRetry) {\n          if (rspCode == 404 || rspCode == 403 || rspCode == 503) {\n            doRetry = true;\n          }\n          \n          // if its a connect exception, lets try again\n          if (err.e instanceof ConnectException) {\n            doRetry = true;\n          } else if (err.e instanceof SolrServerException) {\n            if (((SolrServerException) err.e).getRootCause() instanceof ConnectException) {\n              doRetry = true;\n            }\n          } else if (err.e instanceof RemoteSolrException) {\n            Exception cause = (RemoteSolrException) err.e.getCause();\n            if (cause != null && cause instanceof ConnectException) {\n              doRetry = true;\n            }\n          }\n          if (err.req.retries < maxRetriesOnForward && doRetry) {\n            err.req.retries++;\n            \n            SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n                + oldNodeUrl + \" failed - retrying ... retries: \"\n                + err.req.retries + \" \" + err.req.cmdString, err.e);\n            try {\n              Thread.sleep(retryPause);\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n              log.warn(null, e);\n            }\n            \n            resubmitList.add(err);\n          } else {\n            allErrors.add(err);\n          }\n        } else {\n          allErrors.add(err);\n        }\n      } catch (Exception e) {\n        // continue on\n        log.error(\"Unexpected Error while doing request retries\", e);\n      }\n    }\n    \n    servers.clearErrors();\n    this.errors.clear();\n    for (Error err : resubmitList) {\n      submit(err.req);\n    }\n    \n    if (resubmitList.size() > 0) {\n      servers.blockUntilFinished();\n      doRetriesIfNeeded();\n    }\n  }\n\n","bugFix":null,"bugIntro":["c0cf9c2ec975506bab465b6b2be92cb9bffc84d3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f3fe387328658a75cc6147c6f4abc4d0ed978cd1","date":1385782467,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","sourceNew":"  private void doRetriesIfNeeded() {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<Error>(this.errors);\n    errors.addAll(servers.getErrors());\n    List<Error> resubmitList = new ArrayList<Error>();\n\n    for (Error err : errors) {\n      try {\n        String oldNodeUrl = err.req.node.getUrl();\n        \n        // if there is a retry url, we want to retry...\n        boolean isRetry = err.req.node.checkRetry();\n        \n        boolean doRetry = false;\n        int rspCode = err.statusCode;\n        \n        if (testing_errorHook != null) Diagnostics.call(testing_errorHook,\n            err.e);\n        \n        // this can happen in certain situations such as shutdown\n        if (isRetry) {\n          if (rspCode == 404 || rspCode == 403 || rspCode == 503) {\n            doRetry = true;\n          }\n          \n          // if its a connect exception, lets try again\n          if (err.e instanceof SolrServerException) {\n            if (((SolrServerException) err.e).getRootCause() instanceof ConnectException) {\n              doRetry = true;\n            }\n          }\n          \n          if (err.e instanceof ConnectException) {\n            doRetry = true;\n          }\n          \n          if (err.req.retries < maxRetriesOnForward && doRetry) {\n            err.req.retries++;\n            \n            SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n                + oldNodeUrl + \" failed - retrying ... retries: \"\n                + err.req.retries + \" \" + err.req.cmdString + \" params:\"\n                + err.req.uReq.getParams() + \" rsp:\" + rspCode, err.e);\n            try {\n              Thread.sleep(retryPause);\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n              log.warn(null, e);\n            }\n            \n            resubmitList.add(err);\n          } else {\n            allErrors.add(err);\n          }\n        } else {\n          allErrors.add(err);\n        }\n      } catch (Exception e) {\n        // continue on\n        log.error(\"Unexpected Error while doing request retries\", e);\n      }\n    }\n    \n    servers.clearErrors();\n    this.errors.clear();\n    for (Error err : resubmitList) {\n      submit(err.req);\n    }\n    \n    if (resubmitList.size() > 0) {\n      servers.blockUntilFinished();\n      doRetriesIfNeeded();\n    }\n  }\n\n","sourceOld":"  private void doRetriesIfNeeded() {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<Error>(this.errors);\n    errors.addAll(servers.getErrors());\n    List<Error> resubmitList = new ArrayList<Error>();\n\n    for (Error err : errors) {\n      try {\n        String oldNodeUrl = err.req.node.getUrl();\n        \n        // if there is a retry url, we want to retry...\n        boolean isRetry = err.req.node.checkRetry();\n        \n        boolean doRetry = false;\n        int rspCode = err.statusCode;\n        \n        if (testing_errorHook != null) Diagnostics.call(testing_errorHook,\n            err.e);\n        \n        // this can happen in certain situations such as shutdown\n        if (isRetry) {\n          if (rspCode == 404 || rspCode == 403 || rspCode == 503) {\n            doRetry = true;\n          }\n          \n          // if its a connect exception, lets try again\n          if (err.e instanceof SolrServerException) {\n            if (((SolrServerException) err.e).getRootCause() instanceof ConnectException) {\n              doRetry = true;\n            }\n          }\n          \n          if (err.e instanceof ConnectException) {\n            doRetry = true;\n          }\n          \n          if (err.req.retries < maxRetriesOnForward && doRetry) {\n            err.req.retries++;\n            \n            SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n                + oldNodeUrl + \" failed - retrying ... retries: \"\n                + err.req.retries + \" \" + err.req.cmdString + \" rsp:\" + rspCode, err.e);\n            try {\n              Thread.sleep(retryPause);\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n              log.warn(null, e);\n            }\n            \n            resubmitList.add(err);\n          } else {\n            allErrors.add(err);\n          }\n        } else {\n          allErrors.add(err);\n        }\n      } catch (Exception e) {\n        // continue on\n        log.error(\"Unexpected Error while doing request retries\", e);\n      }\n    }\n    \n    servers.clearErrors();\n    this.errors.clear();\n    for (Error err : resubmitList) {\n      submit(err.req);\n    }\n    \n    if (resubmitList.size() > 0) {\n      servers.blockUntilFinished();\n      doRetriesIfNeeded();\n    }\n  }\n\n","bugFix":null,"bugIntro":["c0cf9c2ec975506bab465b6b2be92cb9bffc84d3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","sourceNew":"  private void doRetriesIfNeeded() {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<Error>(this.errors);\n    errors.addAll(servers.getErrors());\n    List<Error> resubmitList = new ArrayList<Error>();\n\n    for (Error err : errors) {\n      try {\n        String oldNodeUrl = err.req.node.getUrl();\n        \n        // if there is a retry url, we want to retry...\n        boolean isRetry = err.req.node.checkRetry();\n        \n        boolean doRetry = false;\n        int rspCode = err.statusCode;\n        \n        if (testing_errorHook != null) Diagnostics.call(testing_errorHook,\n            err.e);\n        \n        // this can happen in certain situations such as shutdown\n        if (isRetry) {\n          if (rspCode == 404 || rspCode == 403 || rspCode == 503) {\n            doRetry = true;\n          }\n          \n          // if its a connect exception, lets try again\n          if (err.e instanceof SolrServerException) {\n            if (((SolrServerException) err.e).getRootCause() instanceof ConnectException) {\n              doRetry = true;\n            }\n          }\n          \n          if (err.e instanceof ConnectException) {\n            doRetry = true;\n          }\n          \n          if (err.req.retries < maxRetriesOnForward && doRetry) {\n            err.req.retries++;\n            \n            SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n                + oldNodeUrl + \" failed - retrying ... retries: \"\n                + err.req.retries + \" \" + err.req.cmdString + \" params:\"\n                + err.req.uReq.getParams() + \" rsp:\" + rspCode, err.e);\n            try {\n              Thread.sleep(retryPause);\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n              log.warn(null, e);\n            }\n            \n            resubmitList.add(err);\n          } else {\n            allErrors.add(err);\n          }\n        } else {\n          allErrors.add(err);\n        }\n      } catch (Exception e) {\n        // continue on\n        log.error(\"Unexpected Error while doing request retries\", e);\n      }\n    }\n    \n    servers.clearErrors();\n    this.errors.clear();\n    for (Error err : resubmitList) {\n      submit(err.req);\n    }\n    \n    if (resubmitList.size() > 0) {\n      servers.blockUntilFinished();\n      doRetriesIfNeeded();\n    }\n  }\n\n","sourceOld":"  private void doRetriesIfNeeded() {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<Error>(this.errors);\n    errors.addAll(servers.getErrors());\n\n    boolean blockUntilFinishedAgain = false;\n    for (Error err : errors) {\n      String oldNodeUrl = err.req.node.getUrl();\n      \n      // if there is a retry url, we want to retry...\n      boolean isRetry = err.req.node.checkRetry();\n      boolean doRetry = false;\n      int rspCode = err.statusCode;\n      \n      if (testing_errorHook != null) Diagnostics.call(testing_errorHook, err.e);\n      \n      // this can happen in certain situations such as shutdown\n      if (isRetry) {\n        if (rspCode == 404 || rspCode == 403 || rspCode == 503\n            || rspCode == 500) {\n          doRetry = true;\n        }\n        \n        // if its an ioexception, lets try again\n        if (err.e instanceof IOException) {\n          doRetry = true;\n        } else if (err.e instanceof SolrServerException) {\n          if (((SolrServerException) err.e).getRootCause() instanceof IOException) {\n            doRetry = true;\n          }\n        }\n        if (err.req.retries < MAX_RETRIES_ON_FORWARD && doRetry) {\n          err.req.retries++;\n          \n          SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n              + oldNodeUrl + \" failed - retrying ... retries: \" + err.req.retries);\n          try {\n            Thread.sleep(500);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.warn(null, e);\n          }\n          \n          submit(err.req);\n          blockUntilFinishedAgain = true;\n        } else {\n          allErrors.add(err);\n        }\n      } else {\n        allErrors.add(err);\n      }\n    }\n    \n    servers.clearErrors();\n    this.errors.clear();\n    \n    if (blockUntilFinishedAgain) {\n      servers.blockUntilFinished();\n      doRetriesIfNeeded();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","sourceNew":"  private void doRetriesIfNeeded() {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<>(this.errors);\n    errors.addAll(servers.getErrors());\n    List<Error> resubmitList = new ArrayList<>();\n\n    for (Error err : errors) {\n      try {\n        String oldNodeUrl = err.req.node.getUrl();\n        \n        // if there is a retry url, we want to retry...\n        boolean isRetry = err.req.node.checkRetry();\n        \n        boolean doRetry = false;\n        int rspCode = err.statusCode;\n        \n        if (testing_errorHook != null) Diagnostics.call(testing_errorHook,\n            err.e);\n        \n        // this can happen in certain situations such as shutdown\n        if (isRetry) {\n          if (rspCode == 404 || rspCode == 403 || rspCode == 503) {\n            doRetry = true;\n          }\n          \n          // if its a connect exception, lets try again\n          if (err.e instanceof SolrServerException) {\n            if (((SolrServerException) err.e).getRootCause() instanceof ConnectException) {\n              doRetry = true;\n            }\n          }\n          \n          if (err.e instanceof ConnectException) {\n            doRetry = true;\n          }\n          \n          if (err.req.retries < maxRetriesOnForward && doRetry) {\n            err.req.retries++;\n            \n            SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n                + oldNodeUrl + \" failed - retrying ... retries: \"\n                + err.req.retries + \" \" + err.req.cmdString + \" params:\"\n                + err.req.uReq.getParams() + \" rsp:\" + rspCode, err.e);\n            try {\n              Thread.sleep(retryPause);\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n              log.warn(null, e);\n            }\n            \n            resubmitList.add(err);\n          } else {\n            allErrors.add(err);\n          }\n        } else {\n          allErrors.add(err);\n        }\n      } catch (Exception e) {\n        // continue on\n        log.error(\"Unexpected Error while doing request retries\", e);\n      }\n    }\n    \n    servers.clearErrors();\n    this.errors.clear();\n    for (Error err : resubmitList) {\n      submit(err.req);\n    }\n    \n    if (resubmitList.size() > 0) {\n      servers.blockUntilFinished();\n      doRetriesIfNeeded();\n    }\n  }\n\n","sourceOld":"  private void doRetriesIfNeeded() {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<Error>(this.errors);\n    errors.addAll(servers.getErrors());\n    List<Error> resubmitList = new ArrayList<Error>();\n\n    for (Error err : errors) {\n      try {\n        String oldNodeUrl = err.req.node.getUrl();\n        \n        // if there is a retry url, we want to retry...\n        boolean isRetry = err.req.node.checkRetry();\n        \n        boolean doRetry = false;\n        int rspCode = err.statusCode;\n        \n        if (testing_errorHook != null) Diagnostics.call(testing_errorHook,\n            err.e);\n        \n        // this can happen in certain situations such as shutdown\n        if (isRetry) {\n          if (rspCode == 404 || rspCode == 403 || rspCode == 503) {\n            doRetry = true;\n          }\n          \n          // if its a connect exception, lets try again\n          if (err.e instanceof SolrServerException) {\n            if (((SolrServerException) err.e).getRootCause() instanceof ConnectException) {\n              doRetry = true;\n            }\n          }\n          \n          if (err.e instanceof ConnectException) {\n            doRetry = true;\n          }\n          \n          if (err.req.retries < maxRetriesOnForward && doRetry) {\n            err.req.retries++;\n            \n            SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n                + oldNodeUrl + \" failed - retrying ... retries: \"\n                + err.req.retries + \" \" + err.req.cmdString + \" params:\"\n                + err.req.uReq.getParams() + \" rsp:\" + rspCode, err.e);\n            try {\n              Thread.sleep(retryPause);\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n              log.warn(null, e);\n            }\n            \n            resubmitList.add(err);\n          } else {\n            allErrors.add(err);\n          }\n        } else {\n          allErrors.add(err);\n        }\n      } catch (Exception e) {\n        // continue on\n        log.error(\"Unexpected Error while doing request retries\", e);\n      }\n    }\n    \n    servers.clearErrors();\n    this.errors.clear();\n    for (Error err : resubmitList) {\n      submit(err.req);\n    }\n    \n    if (resubmitList.size() > 0) {\n      servers.blockUntilFinished();\n      doRetriesIfNeeded();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e483b96a4c951399b8188cbf6a2e8c0d6b95ba6b","date":1406573123,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","sourceNew":"  private void doRetriesIfNeeded() {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<>(this.errors);\n    errors.addAll(servers.getErrors());\n    List<Error> resubmitList = new ArrayList<>();\n\n    for (Error err : errors) {\n      try {\n        String oldNodeUrl = err.req.node.getUrl();\n        \n        // if there is a retry url, we want to retry...\n        boolean isRetry = err.req.node.checkRetry();\n        \n        boolean doRetry = false;\n        int rspCode = err.statusCode;\n        \n        if (testing_errorHook != null) Diagnostics.call(testing_errorHook,\n            err.e);\n        \n        // this can happen in certain situations such as shutdown\n        if (isRetry) {\n          if (rspCode == 404 || rspCode == 403 || rspCode == 503) {\n            doRetry = true;\n          }\n          \n          // if its a connect exception, lets try again\n          if (err.e instanceof SolrServerException) {\n            if (((SolrServerException) err.e).getRootCause() instanceof ConnectException) {\n              doRetry = true;\n            }\n          }\n          \n          if (err.e instanceof ConnectException) {\n            doRetry = true;\n          }\n          \n          if (err.req.retries < maxRetriesOnForward && doRetry) {\n            err.req.retries++;\n            \n            SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n                + oldNodeUrl + \" failed - retrying ... retries: \"\n                + err.req.retries + \" \" + err.req.cmdString + \" params:\"\n                + err.req.uReq.getParams() + \" rsp:\" + rspCode, err.e);\n            try {\n              Thread.sleep(retryPause);\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n              log.warn(null, e);\n            }\n            \n            resubmitList.add(err);\n          } else {\n            allErrors.add(err);\n          }\n        } else {\n          allErrors.add(err);\n        }\n      } catch (Exception e) {\n        // continue on\n        log.error(\"Unexpected Error while doing request retries\", e);\n      }\n    }\n    \n    servers.clearErrors();\n    this.errors.clear();\n    for (Error err : resubmitList) {\n      submit(err.req, false);\n    }\n    \n    if (resubmitList.size() > 0) {\n      blockAndDoRetries();\n    }\n  }\n\n","sourceOld":"  private void doRetriesIfNeeded() {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<>(this.errors);\n    errors.addAll(servers.getErrors());\n    List<Error> resubmitList = new ArrayList<>();\n\n    for (Error err : errors) {\n      try {\n        String oldNodeUrl = err.req.node.getUrl();\n        \n        // if there is a retry url, we want to retry...\n        boolean isRetry = err.req.node.checkRetry();\n        \n        boolean doRetry = false;\n        int rspCode = err.statusCode;\n        \n        if (testing_errorHook != null) Diagnostics.call(testing_errorHook,\n            err.e);\n        \n        // this can happen in certain situations such as shutdown\n        if (isRetry) {\n          if (rspCode == 404 || rspCode == 403 || rspCode == 503) {\n            doRetry = true;\n          }\n          \n          // if its a connect exception, lets try again\n          if (err.e instanceof SolrServerException) {\n            if (((SolrServerException) err.e).getRootCause() instanceof ConnectException) {\n              doRetry = true;\n            }\n          }\n          \n          if (err.e instanceof ConnectException) {\n            doRetry = true;\n          }\n          \n          if (err.req.retries < maxRetriesOnForward && doRetry) {\n            err.req.retries++;\n            \n            SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n                + oldNodeUrl + \" failed - retrying ... retries: \"\n                + err.req.retries + \" \" + err.req.cmdString + \" params:\"\n                + err.req.uReq.getParams() + \" rsp:\" + rspCode, err.e);\n            try {\n              Thread.sleep(retryPause);\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n              log.warn(null, e);\n            }\n            \n            resubmitList.add(err);\n          } else {\n            allErrors.add(err);\n          }\n        } else {\n          allErrors.add(err);\n        }\n      } catch (Exception e) {\n        // continue on\n        log.error(\"Unexpected Error while doing request retries\", e);\n      }\n    }\n    \n    servers.clearErrors();\n    this.errors.clear();\n    for (Error err : resubmitList) {\n      submit(err.req);\n    }\n    \n    if (resubmitList.size() > 0) {\n      servers.blockUntilFinished();\n      doRetriesIfNeeded();\n    }\n  }\n\n","bugFix":["91e069c492cf4895697ef7b81df0ffb9a8bd4b48","3e5ef402099a6d54398ce3ac65c0b7506bbfece5"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","sourceNew":"  private void doRetriesIfNeeded() {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<>(this.errors);\n    errors.addAll(servers.getErrors());\n    List<Error> resubmitList = new ArrayList<>();\n\n    for (Error err : errors) {\n      try {\n        String oldNodeUrl = err.req.node.getUrl();\n        \n        // if there is a retry url, we want to retry...\n        boolean isRetry = err.req.node.checkRetry();\n        \n        boolean doRetry = false;\n        int rspCode = err.statusCode;\n        \n        if (testing_errorHook != null) Diagnostics.call(testing_errorHook,\n            err.e);\n        \n        // this can happen in certain situations such as close\n        if (isRetry) {\n          if (rspCode == 404 || rspCode == 403 || rspCode == 503) {\n            doRetry = true;\n          }\n          \n          // if its a connect exception, lets try again\n          if (err.e instanceof SolrServerException) {\n            if (((SolrServerException) err.e).getRootCause() instanceof ConnectException) {\n              doRetry = true;\n            }\n          }\n          \n          if (err.e instanceof ConnectException) {\n            doRetry = true;\n          }\n          \n          if (err.req.retries < maxRetriesOnForward && doRetry) {\n            err.req.retries++;\n            \n            SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n                + oldNodeUrl + \" failed - retrying ... retries: \"\n                + err.req.retries + \" \" + err.req.cmdString + \" params:\"\n                + err.req.uReq.getParams() + \" rsp:\" + rspCode, err.e);\n            try {\n              Thread.sleep(retryPause);\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n              log.warn(null, e);\n            }\n            \n            resubmitList.add(err);\n          } else {\n            allErrors.add(err);\n          }\n        } else {\n          allErrors.add(err);\n        }\n      } catch (Exception e) {\n        // continue on\n        log.error(\"Unexpected Error while doing request retries\", e);\n      }\n    }\n    \n    servers.clearErrors();\n    this.errors.clear();\n    for (Error err : resubmitList) {\n      submit(err.req, false);\n    }\n    \n    if (resubmitList.size() > 0) {\n      blockAndDoRetries();\n    }\n  }\n\n","sourceOld":"  private void doRetriesIfNeeded() {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<>(this.errors);\n    errors.addAll(servers.getErrors());\n    List<Error> resubmitList = new ArrayList<>();\n\n    for (Error err : errors) {\n      try {\n        String oldNodeUrl = err.req.node.getUrl();\n        \n        // if there is a retry url, we want to retry...\n        boolean isRetry = err.req.node.checkRetry();\n        \n        boolean doRetry = false;\n        int rspCode = err.statusCode;\n        \n        if (testing_errorHook != null) Diagnostics.call(testing_errorHook,\n            err.e);\n        \n        // this can happen in certain situations such as shutdown\n        if (isRetry) {\n          if (rspCode == 404 || rspCode == 403 || rspCode == 503) {\n            doRetry = true;\n          }\n          \n          // if its a connect exception, lets try again\n          if (err.e instanceof SolrServerException) {\n            if (((SolrServerException) err.e).getRootCause() instanceof ConnectException) {\n              doRetry = true;\n            }\n          }\n          \n          if (err.e instanceof ConnectException) {\n            doRetry = true;\n          }\n          \n          if (err.req.retries < maxRetriesOnForward && doRetry) {\n            err.req.retries++;\n            \n            SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n                + oldNodeUrl + \" failed - retrying ... retries: \"\n                + err.req.retries + \" \" + err.req.cmdString + \" params:\"\n                + err.req.uReq.getParams() + \" rsp:\" + rspCode, err.e);\n            try {\n              Thread.sleep(retryPause);\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n              log.warn(null, e);\n            }\n            \n            resubmitList.add(err);\n          } else {\n            allErrors.add(err);\n          }\n        } else {\n          allErrors.add(err);\n        }\n      } catch (Exception e) {\n        // continue on\n        log.error(\"Unexpected Error while doing request retries\", e);\n      }\n    }\n    \n    servers.clearErrors();\n    this.errors.clear();\n    for (Error err : resubmitList) {\n      submit(err.req, false);\n    }\n    \n    if (resubmitList.size() > 0) {\n      blockAndDoRetries();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","sourceNew":"  private void doRetriesIfNeeded() {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<>(this.errors);\n    errors.addAll(servers.getErrors());\n    List<Error> resubmitList = new ArrayList<>();\n\n    for (Error err : errors) {\n      try {\n        String oldNodeUrl = err.req.node.getUrl();\n        \n        // if there is a retry url, we want to retry...\n        boolean isRetry = err.req.node.checkRetry();\n        \n        boolean doRetry = false;\n        int rspCode = err.statusCode;\n        \n        if (testing_errorHook != null) Diagnostics.call(testing_errorHook,\n            err.e);\n        \n        // this can happen in certain situations such as close\n        if (isRetry) {\n          if (rspCode == 404 || rspCode == 403 || rspCode == 503) {\n            doRetry = true;\n          }\n          \n          // if it's a connect exception, lets try again\n          if (err.e instanceof SolrServerException) {\n            if (((SolrServerException) err.e).getRootCause() instanceof ConnectException) {\n              doRetry = true;\n            }\n          }\n          \n          if (err.e instanceof ConnectException) {\n            doRetry = true;\n          }\n          \n          if (err.req.retries < maxRetriesOnForward && doRetry) {\n            err.req.retries++;\n            \n            SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n                + oldNodeUrl + \" failed - retrying ... retries: \"\n                + err.req.retries + \" \" + err.req.cmdString + \" params:\"\n                + err.req.uReq.getParams() + \" rsp:\" + rspCode, err.e);\n            try {\n              Thread.sleep(retryPause);\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n              log.warn(null, e);\n            }\n            \n            resubmitList.add(err);\n          } else {\n            allErrors.add(err);\n          }\n        } else {\n          allErrors.add(err);\n        }\n      } catch (Exception e) {\n        // continue on\n        log.error(\"Unexpected Error while doing request retries\", e);\n      }\n    }\n    \n    servers.clearErrors();\n    this.errors.clear();\n    for (Error err : resubmitList) {\n      submit(err.req, false);\n    }\n    \n    if (resubmitList.size() > 0) {\n      blockAndDoRetries();\n    }\n  }\n\n","sourceOld":"  private void doRetriesIfNeeded() {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<>(this.errors);\n    errors.addAll(servers.getErrors());\n    List<Error> resubmitList = new ArrayList<>();\n\n    for (Error err : errors) {\n      try {\n        String oldNodeUrl = err.req.node.getUrl();\n        \n        // if there is a retry url, we want to retry...\n        boolean isRetry = err.req.node.checkRetry();\n        \n        boolean doRetry = false;\n        int rspCode = err.statusCode;\n        \n        if (testing_errorHook != null) Diagnostics.call(testing_errorHook,\n            err.e);\n        \n        // this can happen in certain situations such as close\n        if (isRetry) {\n          if (rspCode == 404 || rspCode == 403 || rspCode == 503) {\n            doRetry = true;\n          }\n          \n          // if its a connect exception, lets try again\n          if (err.e instanceof SolrServerException) {\n            if (((SolrServerException) err.e).getRootCause() instanceof ConnectException) {\n              doRetry = true;\n            }\n          }\n          \n          if (err.e instanceof ConnectException) {\n            doRetry = true;\n          }\n          \n          if (err.req.retries < maxRetriesOnForward && doRetry) {\n            err.req.retries++;\n            \n            SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n                + oldNodeUrl + \" failed - retrying ... retries: \"\n                + err.req.retries + \" \" + err.req.cmdString + \" params:\"\n                + err.req.uReq.getParams() + \" rsp:\" + rspCode, err.e);\n            try {\n              Thread.sleep(retryPause);\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n              log.warn(null, e);\n            }\n            \n            resubmitList.add(err);\n          } else {\n            allErrors.add(err);\n          }\n        } else {\n          allErrors.add(err);\n        }\n      } catch (Exception e) {\n        // continue on\n        log.error(\"Unexpected Error while doing request retries\", e);\n      }\n    }\n    \n    servers.clearErrors();\n    this.errors.clear();\n    for (Error err : resubmitList) {\n      submit(err.req, false);\n    }\n    \n    if (resubmitList.size() > 0) {\n      blockAndDoRetries();\n    }\n  }\n\n","bugFix":null,"bugIntro":["c0cf9c2ec975506bab465b6b2be92cb9bffc84d3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","sourceNew":"  private void doRetriesIfNeeded() {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<>(this.errors);\n    errors.addAll(clients.getErrors());\n    List<Error> resubmitList = new ArrayList<>();\n\n    for (Error err : errors) {\n      try {\n        String oldNodeUrl = err.req.node.getUrl();\n        \n        // if there is a retry url, we want to retry...\n        boolean isRetry = err.req.node.checkRetry();\n        \n        boolean doRetry = false;\n        int rspCode = err.statusCode;\n        \n        if (testing_errorHook != null) Diagnostics.call(testing_errorHook,\n            err.e);\n        \n        // this can happen in certain situations such as close\n        if (isRetry) {\n          if (rspCode == 404 || rspCode == 403 || rspCode == 503) {\n            doRetry = true;\n          }\n          \n          // if it's a connect exception, lets try again\n          if (err.e instanceof SolrServerException) {\n            if (((SolrServerException) err.e).getRootCause() instanceof ConnectException) {\n              doRetry = true;\n            }\n          }\n          \n          if (err.e instanceof ConnectException) {\n            doRetry = true;\n          }\n          \n          if (err.req.retries < maxRetriesOnForward && doRetry) {\n            err.req.retries++;\n            \n            SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n                + oldNodeUrl + \" failed - retrying ... retries: \"\n                + err.req.retries + \" \" + err.req.cmdString + \" params:\"\n                + err.req.uReq.getParams() + \" rsp:\" + rspCode, err.e);\n            try {\n              Thread.sleep(retryPause);\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n              log.warn(null, e);\n            }\n            \n            resubmitList.add(err);\n          } else {\n            allErrors.add(err);\n          }\n        } else {\n          allErrors.add(err);\n        }\n      } catch (Exception e) {\n        // continue on\n        log.error(\"Unexpected Error while doing request retries\", e);\n      }\n    }\n    \n    clients.clearErrors();\n    this.errors.clear();\n    for (Error err : resubmitList) {\n      submit(err.req, false);\n    }\n    \n    if (resubmitList.size() > 0) {\n      blockAndDoRetries();\n    }\n  }\n\n","sourceOld":"  private void doRetriesIfNeeded() {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<>(this.errors);\n    errors.addAll(servers.getErrors());\n    List<Error> resubmitList = new ArrayList<>();\n\n    for (Error err : errors) {\n      try {\n        String oldNodeUrl = err.req.node.getUrl();\n        \n        // if there is a retry url, we want to retry...\n        boolean isRetry = err.req.node.checkRetry();\n        \n        boolean doRetry = false;\n        int rspCode = err.statusCode;\n        \n        if (testing_errorHook != null) Diagnostics.call(testing_errorHook,\n            err.e);\n        \n        // this can happen in certain situations such as close\n        if (isRetry) {\n          if (rspCode == 404 || rspCode == 403 || rspCode == 503) {\n            doRetry = true;\n          }\n          \n          // if it's a connect exception, lets try again\n          if (err.e instanceof SolrServerException) {\n            if (((SolrServerException) err.e).getRootCause() instanceof ConnectException) {\n              doRetry = true;\n            }\n          }\n          \n          if (err.e instanceof ConnectException) {\n            doRetry = true;\n          }\n          \n          if (err.req.retries < maxRetriesOnForward && doRetry) {\n            err.req.retries++;\n            \n            SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n                + oldNodeUrl + \" failed - retrying ... retries: \"\n                + err.req.retries + \" \" + err.req.cmdString + \" params:\"\n                + err.req.uReq.getParams() + \" rsp:\" + rspCode, err.e);\n            try {\n              Thread.sleep(retryPause);\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n              log.warn(null, e);\n            }\n            \n            resubmitList.add(err);\n          } else {\n            allErrors.add(err);\n          }\n        } else {\n          allErrors.add(err);\n        }\n      } catch (Exception e) {\n        // continue on\n        log.error(\"Unexpected Error while doing request retries\", e);\n      }\n    }\n    \n    servers.clearErrors();\n    this.errors.clear();\n    for (Error err : resubmitList) {\n      submit(err.req, false);\n    }\n    \n    if (resubmitList.size() > 0) {\n      blockAndDoRetries();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef","date":1458928975,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","sourceNew":"  private void doRetriesIfNeeded() {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<>(this.errors);\n    errors.addAll(clients.getErrors());\n    List<Error> resubmitList = new ArrayList<>();\n\n    for (Error err : errors) {\n      try {\n        String oldNodeUrl = err.req.node.getUrl();\n        \n        // if there is a retry url, we want to retry...\n        boolean isRetry = err.req.node.checkRetry();\n        \n        boolean doRetry = false;\n        int rspCode = err.statusCode;\n        \n        if (testing_errorHook != null) Diagnostics.call(testing_errorHook,\n            err.e);\n        \n        // this can happen in certain situations such as close\n        if (isRetry) {\n          if (rspCode == 404 || rspCode == 403 || rspCode == 503) {\n            doRetry = true;\n          }\n          \n          // if it's a connect exception, lets try again\n          if (err.e instanceof SolrServerException) {\n            if (((SolrServerException) err.e).getRootCause() instanceof ConnectException) {\n              doRetry = true;\n            }\n          }\n          \n          if (err.e instanceof ConnectException) {\n            doRetry = true;\n          }\n          \n          if (err.req.retries < maxRetriesOnForward && doRetry) {\n            err.req.retries++;\n            \n            SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n                + oldNodeUrl + \" failed - retrying ... retries: \"\n                + err.req.retries + \" \" + err.req.cmd.toString() + \" params:\"\n                + err.req.uReq.getParams() + \" rsp:\" + rspCode, err.e);\n            try {\n              Thread.sleep(retryPause);\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n              log.warn(null, e);\n            }\n            \n            resubmitList.add(err);\n          } else {\n            allErrors.add(err);\n          }\n        } else {\n          allErrors.add(err);\n        }\n      } catch (Exception e) {\n        // continue on\n        log.error(\"Unexpected Error while doing request retries\", e);\n      }\n    }\n    \n    clients.clearErrors();\n    this.errors.clear();\n    for (Error err : resubmitList) {\n      submit(err.req, false);\n    }\n    \n    if (resubmitList.size() > 0) {\n      blockAndDoRetries();\n    }\n  }\n\n","sourceOld":"  private void doRetriesIfNeeded() {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<>(this.errors);\n    errors.addAll(clients.getErrors());\n    List<Error> resubmitList = new ArrayList<>();\n\n    for (Error err : errors) {\n      try {\n        String oldNodeUrl = err.req.node.getUrl();\n        \n        // if there is a retry url, we want to retry...\n        boolean isRetry = err.req.node.checkRetry();\n        \n        boolean doRetry = false;\n        int rspCode = err.statusCode;\n        \n        if (testing_errorHook != null) Diagnostics.call(testing_errorHook,\n            err.e);\n        \n        // this can happen in certain situations such as close\n        if (isRetry) {\n          if (rspCode == 404 || rspCode == 403 || rspCode == 503) {\n            doRetry = true;\n          }\n          \n          // if it's a connect exception, lets try again\n          if (err.e instanceof SolrServerException) {\n            if (((SolrServerException) err.e).getRootCause() instanceof ConnectException) {\n              doRetry = true;\n            }\n          }\n          \n          if (err.e instanceof ConnectException) {\n            doRetry = true;\n          }\n          \n          if (err.req.retries < maxRetriesOnForward && doRetry) {\n            err.req.retries++;\n            \n            SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n                + oldNodeUrl + \" failed - retrying ... retries: \"\n                + err.req.retries + \" \" + err.req.cmdString + \" params:\"\n                + err.req.uReq.getParams() + \" rsp:\" + rspCode, err.e);\n            try {\n              Thread.sleep(retryPause);\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n              log.warn(null, e);\n            }\n            \n            resubmitList.add(err);\n          } else {\n            allErrors.add(err);\n          }\n        } else {\n          allErrors.add(err);\n        }\n      } catch (Exception e) {\n        // continue on\n        log.error(\"Unexpected Error while doing request retries\", e);\n      }\n    }\n    \n    clients.clearErrors();\n    this.errors.clear();\n    for (Error err : resubmitList) {\n      submit(err.req, false);\n    }\n    \n    if (resubmitList.size() > 0) {\n      blockAndDoRetries();\n    }\n  }\n\n","bugFix":null,"bugIntro":["c0cf9c2ec975506bab465b6b2be92cb9bffc84d3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c0cf9c2ec975506bab465b6b2be92cb9bffc84d3","date":1533596209,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","sourceNew":"  private void doRetriesIfNeeded() {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<>(this.errors);\n    errors.addAll(clients.getErrors());\n    List<Error> resubmitList = new ArrayList<>();\n    \n    if (log.isInfoEnabled() && errors.size() > 0) {\n      log.info(\"SolrCmdDistributor found {} errors\", errors.size());\n    }\n    \n    if (log.isDebugEnabled() && errors.size() > 0) {\n      StringBuilder builder = new StringBuilder(\"SolrCmdDistributor found:\");\n      int maxErrorsToShow = 10;\n      for (Error e:errors) {\n        if (maxErrorsToShow-- <= 0) break;\n        builder.append(\"\\n\" + e);\n      }\n      if (errors.size() > 10) {\n        builder.append(\"\\n... and \");\n        builder.append(errors.size() - 10);\n        builder.append(\" more\");\n      }\n      log.debug(builder.toString());\n    }\n\n    for (Error err : errors) {\n      try {\n        String oldNodeUrl = err.req.node.getUrl();\n        \n        /*\n         * if this is a retryable request we may want to retry, depending on the error we received and\n         * the number of times we have already retried\n         */\n        boolean isRetry = err.req.shouldRetry(err);\n        \n        if (testing_errorHook != null) Diagnostics.call(testing_errorHook,\n            err.e);\n        \n        // this can happen in certain situations such as close\n        if (isRetry) {\n          err.req.retries++;\n\n          if (err.req.node instanceof ForwardNode) {\n            SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n                + oldNodeUrl + \" failed - retrying ... retries: \"\n                + err.req.retries + \"/\" + err.req.node.getMaxRetries() + \". \"\n                + err.req.cmd.toString() + \" params:\"\n                + err.req.uReq.getParams() + \" rsp:\" + err.statusCode, err.e);\n          } else {\n            SolrException.log(SolrCmdDistributor.log, \"FROMLEADER request to \"\n                + oldNodeUrl + \" failed - retrying ... retries: \"\n                + err.req.retries + \"/\" + err.req.node.getMaxRetries() + \". \"\n                + err.req.cmd.toString() + \" params:\"\n                + err.req.uReq.getParams() + \" rsp:\" + err.statusCode, err.e);\n          }\n          try {\n            Thread.sleep(retryPause); //TODO: Do we want this wait for every error?\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.warn(null, e);\n          }\n          resubmitList.add(err);\n        } else {\n          allErrors.add(err);\n        }\n      } catch (Exception e) {\n        // continue on\n        log.error(\"Unexpected Error while doing request retries\", e);\n      }\n    }\n    \n    clients.clearErrors();\n    this.errors.clear();\n    for (Error err : resubmitList) {\n      submit(err.req, false);\n    }\n    \n    if (resubmitList.size() > 0) {\n      blockAndDoRetries();\n    }\n  }\n\n","sourceOld":"  private void doRetriesIfNeeded() {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<>(this.errors);\n    errors.addAll(clients.getErrors());\n    List<Error> resubmitList = new ArrayList<>();\n\n    for (Error err : errors) {\n      try {\n        String oldNodeUrl = err.req.node.getUrl();\n        \n        // if there is a retry url, we want to retry...\n        boolean isRetry = err.req.node.checkRetry();\n        \n        boolean doRetry = false;\n        int rspCode = err.statusCode;\n        \n        if (testing_errorHook != null) Diagnostics.call(testing_errorHook,\n            err.e);\n        \n        // this can happen in certain situations such as close\n        if (isRetry) {\n          if (rspCode == 404 || rspCode == 403 || rspCode == 503) {\n            doRetry = true;\n          }\n          \n          // if it's a connect exception, lets try again\n          if (err.e instanceof SolrServerException) {\n            if (((SolrServerException) err.e).getRootCause() instanceof ConnectException) {\n              doRetry = true;\n            }\n          }\n          \n          if (err.e instanceof ConnectException) {\n            doRetry = true;\n          }\n          \n          if (err.req.retries < maxRetriesOnForward && doRetry) {\n            err.req.retries++;\n            \n            SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n                + oldNodeUrl + \" failed - retrying ... retries: \"\n                + err.req.retries + \" \" + err.req.cmd.toString() + \" params:\"\n                + err.req.uReq.getParams() + \" rsp:\" + rspCode, err.e);\n            try {\n              Thread.sleep(retryPause);\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n              log.warn(null, e);\n            }\n            \n            resubmitList.add(err);\n          } else {\n            allErrors.add(err);\n          }\n        } else {\n          allErrors.add(err);\n        }\n      } catch (Exception e) {\n        // continue on\n        log.error(\"Unexpected Error while doing request retries\", e);\n      }\n    }\n    \n    clients.clearErrors();\n    this.errors.clear();\n    for (Error err : resubmitList) {\n      submit(err.req, false);\n    }\n    \n    if (resubmitList.size() > 0) {\n      blockAndDoRetries();\n    }\n  }\n\n","bugFix":["7adf9b18b459a0b9db8cab49eb9411d5f136c65d","f3fe387328658a75cc6147c6f4abc4d0ed978cd1","f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef","0491dc45f6b12f57e9c33751e9317a01995556c6","6d0939a3d7e30b8aaa693d32eb2342732b9fce14","9ce545e833f5334e245fb71d83c3460ef83c2d5e","99e7358ea6164009218b511839476278da9f44f2","6d5e40574a14e38bb8d289d77669498bce3c7737","8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"51f334bcae208e34e4b0444becb75dd8bff6e7c2","date":1536811894,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","sourceNew":"  private void doRetriesIfNeeded() {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<>(this.errors);\n    errors.addAll(clients.getErrors());\n    List<Error> resubmitList = new ArrayList<>();\n    \n    if (log.isInfoEnabled() && errors.size() > 0) {\n      log.info(\"SolrCmdDistributor found {} errors\", errors.size());\n    }\n    \n    if (log.isDebugEnabled() && errors.size() > 0) {\n      StringBuilder builder = new StringBuilder(\"SolrCmdDistributor found:\");\n      int maxErrorsToShow = 10;\n      for (Error e:errors) {\n        if (maxErrorsToShow-- <= 0) break;\n        builder.append(\"\\n\" + e);\n      }\n      if (errors.size() > 10) {\n        builder.append(\"\\n... and \");\n        builder.append(errors.size() - 10);\n        builder.append(\" more\");\n      }\n      log.debug(builder.toString());\n    }\n\n    for (Error err : errors) {\n      try {\n        String oldNodeUrl = err.req.node.getUrl();\n        \n        /*\n         * if this is a retryable request we may want to retry, depending on the error we received and\n         * the number of times we have already retried\n         */\n        boolean isRetry = err.req.shouldRetry(err);\n        \n        if (testing_errorHook != null) Diagnostics.call(testing_errorHook,\n            err.e);\n        \n        // this can happen in certain situations such as close\n        if (isRetry) {\n          err.req.retries++;\n\n          if (err.req.node instanceof ForwardNode) {\n            SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n                + oldNodeUrl + \" failed - retrying ... retries: \"\n                + err.req.retries + \"/\" + err.req.node.getMaxRetries() + \". \"\n                + err.req.cmd.toString() + \" params:\"\n                + err.req.uReq.getParams() + \" rsp:\" + err.statusCode, err.e);\n          } else {\n            SolrException.log(SolrCmdDistributor.log, \"FROMLEADER request to \"\n                + oldNodeUrl + \" failed - retrying ... retries: \"\n                + err.req.retries + \"/\" + err.req.node.getMaxRetries() + \". \"\n                + err.req.cmd.toString() + \" params:\"\n                + err.req.uReq.getParams() + \" rsp:\" + err.statusCode, err.e);\n          }\n          resubmitList.add(err);\n        } else {\n          allErrors.add(err);\n        }\n      } catch (Exception e) {\n        // continue on\n        log.error(\"Unexpected Error while doing request retries\", e);\n      }\n    }\n    \n    if (resubmitList.size() > 0) {\n      // Only backoff once for the full batch\n      try {\n        int backoffTime = retryPause * resubmitList.get(0).req.retries;\n        log.debug(\"Sleeping {}ms before re-submitting {} requests\", backoffTime, resubmitList.size());\n        Thread.sleep(backoffTime);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        log.warn(null, e);\n      }\n    }\n    \n    clients.clearErrors();\n    this.errors.clear();\n    for (Error err : resubmitList) {\n      submit(err.req, false);\n    }\n    \n    if (resubmitList.size() > 0) {\n      blockAndDoRetries();\n    }\n  }\n\n","sourceOld":"  private void doRetriesIfNeeded() {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<>(this.errors);\n    errors.addAll(clients.getErrors());\n    List<Error> resubmitList = new ArrayList<>();\n    \n    if (log.isInfoEnabled() && errors.size() > 0) {\n      log.info(\"SolrCmdDistributor found {} errors\", errors.size());\n    }\n    \n    if (log.isDebugEnabled() && errors.size() > 0) {\n      StringBuilder builder = new StringBuilder(\"SolrCmdDistributor found:\");\n      int maxErrorsToShow = 10;\n      for (Error e:errors) {\n        if (maxErrorsToShow-- <= 0) break;\n        builder.append(\"\\n\" + e);\n      }\n      if (errors.size() > 10) {\n        builder.append(\"\\n... and \");\n        builder.append(errors.size() - 10);\n        builder.append(\" more\");\n      }\n      log.debug(builder.toString());\n    }\n\n    for (Error err : errors) {\n      try {\n        String oldNodeUrl = err.req.node.getUrl();\n        \n        /*\n         * if this is a retryable request we may want to retry, depending on the error we received and\n         * the number of times we have already retried\n         */\n        boolean isRetry = err.req.shouldRetry(err);\n        \n        if (testing_errorHook != null) Diagnostics.call(testing_errorHook,\n            err.e);\n        \n        // this can happen in certain situations such as close\n        if (isRetry) {\n          err.req.retries++;\n\n          if (err.req.node instanceof ForwardNode) {\n            SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n                + oldNodeUrl + \" failed - retrying ... retries: \"\n                + err.req.retries + \"/\" + err.req.node.getMaxRetries() + \". \"\n                + err.req.cmd.toString() + \" params:\"\n                + err.req.uReq.getParams() + \" rsp:\" + err.statusCode, err.e);\n          } else {\n            SolrException.log(SolrCmdDistributor.log, \"FROMLEADER request to \"\n                + oldNodeUrl + \" failed - retrying ... retries: \"\n                + err.req.retries + \"/\" + err.req.node.getMaxRetries() + \". \"\n                + err.req.cmd.toString() + \" params:\"\n                + err.req.uReq.getParams() + \" rsp:\" + err.statusCode, err.e);\n          }\n          try {\n            Thread.sleep(retryPause); //TODO: Do we want this wait for every error?\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.warn(null, e);\n          }\n          resubmitList.add(err);\n        } else {\n          allErrors.add(err);\n        }\n      } catch (Exception e) {\n        // continue on\n        log.error(\"Unexpected Error while doing request retries\", e);\n      }\n    }\n    \n    clients.clearErrors();\n    this.errors.clear();\n    for (Error err : resubmitList) {\n      submit(err.req, false);\n    }\n    \n    if (resubmitList.size() > 0) {\n      blockAndDoRetries();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a7e83c5139756615c366676a30117aab6344f46f","date":1536853390,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","sourceNew":"  private void doRetriesIfNeeded() {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<>(this.errors);\n    errors.addAll(clients.getErrors());\n    List<Error> resubmitList = new ArrayList<>();\n    \n    if (log.isInfoEnabled() && errors.size() > 0) {\n      log.info(\"SolrCmdDistributor found {} errors\", errors.size());\n    }\n    \n    if (log.isDebugEnabled() && errors.size() > 0) {\n      StringBuilder builder = new StringBuilder(\"SolrCmdDistributor found:\");\n      int maxErrorsToShow = 10;\n      for (Error e:errors) {\n        if (maxErrorsToShow-- <= 0) break;\n        builder.append(\"\\n\" + e);\n      }\n      if (errors.size() > 10) {\n        builder.append(\"\\n... and \");\n        builder.append(errors.size() - 10);\n        builder.append(\" more\");\n      }\n      log.debug(builder.toString());\n    }\n\n    for (Error err : errors) {\n      try {\n        String oldNodeUrl = err.req.node.getUrl();\n        \n        /*\n         * if this is a retryable request we may want to retry, depending on the error we received and\n         * the number of times we have already retried\n         */\n        boolean isRetry = err.req.shouldRetry(err);\n        \n        if (testing_errorHook != null) Diagnostics.call(testing_errorHook,\n            err.e);\n        \n        // this can happen in certain situations such as close\n        if (isRetry) {\n          err.req.retries++;\n\n          if (err.req.node instanceof ForwardNode) {\n            SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n                + oldNodeUrl + \" failed - retrying ... retries: \"\n                + err.req.retries + \"/\" + err.req.node.getMaxRetries() + \". \"\n                + err.req.cmd.toString() + \" params:\"\n                + err.req.uReq.getParams() + \" rsp:\" + err.statusCode, err.e);\n          } else {\n            SolrException.log(SolrCmdDistributor.log, \"FROMLEADER request to \"\n                + oldNodeUrl + \" failed - retrying ... retries: \"\n                + err.req.retries + \"/\" + err.req.node.getMaxRetries() + \". \"\n                + err.req.cmd.toString() + \" params:\"\n                + err.req.uReq.getParams() + \" rsp:\" + err.statusCode, err.e);\n          }\n          resubmitList.add(err);\n        } else {\n          allErrors.add(err);\n        }\n      } catch (Exception e) {\n        // continue on\n        log.error(\"Unexpected Error while doing request retries\", e);\n      }\n    }\n    \n    if (resubmitList.size() > 0) {\n      // Only backoff once for the full batch\n      try {\n        int backoffTime = Math.min(retryPause * resubmitList.get(0).req.retries, 2000);\n        log.debug(\"Sleeping {}ms before re-submitting {} requests\", backoffTime, resubmitList.size());\n        Thread.sleep(backoffTime);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        log.warn(null, e);\n      }\n    }\n    \n    clients.clearErrors();\n    this.errors.clear();\n    for (Error err : resubmitList) {\n      submit(err.req, false);\n    }\n    \n    if (resubmitList.size() > 0) {\n      blockAndDoRetries();\n    }\n  }\n\n","sourceOld":"  private void doRetriesIfNeeded() {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<>(this.errors);\n    errors.addAll(clients.getErrors());\n    List<Error> resubmitList = new ArrayList<>();\n    \n    if (log.isInfoEnabled() && errors.size() > 0) {\n      log.info(\"SolrCmdDistributor found {} errors\", errors.size());\n    }\n    \n    if (log.isDebugEnabled() && errors.size() > 0) {\n      StringBuilder builder = new StringBuilder(\"SolrCmdDistributor found:\");\n      int maxErrorsToShow = 10;\n      for (Error e:errors) {\n        if (maxErrorsToShow-- <= 0) break;\n        builder.append(\"\\n\" + e);\n      }\n      if (errors.size() > 10) {\n        builder.append(\"\\n... and \");\n        builder.append(errors.size() - 10);\n        builder.append(\" more\");\n      }\n      log.debug(builder.toString());\n    }\n\n    for (Error err : errors) {\n      try {\n        String oldNodeUrl = err.req.node.getUrl();\n        \n        /*\n         * if this is a retryable request we may want to retry, depending on the error we received and\n         * the number of times we have already retried\n         */\n        boolean isRetry = err.req.shouldRetry(err);\n        \n        if (testing_errorHook != null) Diagnostics.call(testing_errorHook,\n            err.e);\n        \n        // this can happen in certain situations such as close\n        if (isRetry) {\n          err.req.retries++;\n\n          if (err.req.node instanceof ForwardNode) {\n            SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n                + oldNodeUrl + \" failed - retrying ... retries: \"\n                + err.req.retries + \"/\" + err.req.node.getMaxRetries() + \". \"\n                + err.req.cmd.toString() + \" params:\"\n                + err.req.uReq.getParams() + \" rsp:\" + err.statusCode, err.e);\n          } else {\n            SolrException.log(SolrCmdDistributor.log, \"FROMLEADER request to \"\n                + oldNodeUrl + \" failed - retrying ... retries: \"\n                + err.req.retries + \"/\" + err.req.node.getMaxRetries() + \". \"\n                + err.req.cmd.toString() + \" params:\"\n                + err.req.uReq.getParams() + \" rsp:\" + err.statusCode, err.e);\n          }\n          resubmitList.add(err);\n        } else {\n          allErrors.add(err);\n        }\n      } catch (Exception e) {\n        // continue on\n        log.error(\"Unexpected Error while doing request retries\", e);\n      }\n    }\n    \n    if (resubmitList.size() > 0) {\n      // Only backoff once for the full batch\n      try {\n        int backoffTime = retryPause * resubmitList.get(0).req.retries;\n        log.debug(\"Sleeping {}ms before re-submitting {} requests\", backoffTime, resubmitList.size());\n        Thread.sleep(backoffTime);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        log.warn(null, e);\n      }\n    }\n    \n    clients.clearErrors();\n    this.errors.clear();\n    for (Error err : resubmitList) {\n      submit(err.req, false);\n    }\n    \n    if (resubmitList.size() > 0) {\n      blockAndDoRetries();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ea8df0d2af6a4c20dc9fd961ba65a01bb8f4ac97","date":1536896798,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","sourceNew":"  private void doRetriesIfNeeded() {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<>(this.errors);\n    errors.addAll(clients.getErrors());\n    List<Error> resubmitList = new ArrayList<>();\n    \n    if (log.isInfoEnabled() && errors.size() > 0) {\n      log.info(\"SolrCmdDistributor found {} errors\", errors.size());\n    }\n    \n    if (log.isDebugEnabled() && errors.size() > 0) {\n      StringBuilder builder = new StringBuilder(\"SolrCmdDistributor found:\");\n      int maxErrorsToShow = 10;\n      for (Error e:errors) {\n        if (maxErrorsToShow-- <= 0) break;\n        builder.append(\"\\n\" + e);\n      }\n      if (errors.size() > 10) {\n        builder.append(\"\\n... and \");\n        builder.append(errors.size() - 10);\n        builder.append(\" more\");\n      }\n      log.debug(builder.toString());\n    }\n\n    for (Error err : errors) {\n      try {\n        /*\n         * if this is a retryable request we may want to retry, depending on the error we received and\n         * the number of times we have already retried\n         */\n        boolean isRetry = err.req.shouldRetry(err);\n        \n        if (testing_errorHook != null) Diagnostics.call(testing_errorHook,\n            err.e);\n        \n        // this can happen in certain situations such as close\n        if (isRetry) {\n          err.req.retries++;\n          resubmitList.add(err);\n        } else {\n          allErrors.add(err);\n        }\n      } catch (Exception e) {\n        // continue on\n        log.error(\"Unexpected Error while doing request retries\", e);\n      }\n    }\n    \n    if (resubmitList.size() > 0) {\n      // Only backoff once for the full batch\n      try {\n        int backoffTime = Math.min(retryPause * resubmitList.get(0).req.retries, 2000);\n        log.debug(\"Sleeping {}ms before re-submitting {} requests\", backoffTime, resubmitList.size());\n        Thread.sleep(backoffTime);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        log.warn(null, e);\n      }\n    }\n    \n    clients.clearErrors();\n    this.errors.clear();\n    for (Error err : resubmitList) {\n      if (err.req.node instanceof ForwardNode) {\n        SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n            + err.req.node.getUrl() + \" failed - retrying ... retries: \"\n            + err.req.retries + \"/\" + err.req.node.getMaxRetries() + \". \"\n            + err.req.cmd.toString() + \" params:\"\n            + err.req.uReq.getParams() + \" rsp:\" + err.statusCode, err.e);\n      } else {\n        SolrException.log(SolrCmdDistributor.log, \"FROMLEADER request to \"\n            + err.req.node.getUrl() + \" failed - retrying ... retries: \"\n            + err.req.retries + \"/\" + err.req.node.getMaxRetries() + \". \"\n            + err.req.cmd.toString() + \" params:\"\n            + err.req.uReq.getParams() + \" rsp:\" + err.statusCode, err.e);\n      }\n      submit(err.req, false);\n    }\n    \n    if (resubmitList.size() > 0) {\n      blockAndDoRetries();\n    }\n  }\n\n","sourceOld":"  private void doRetriesIfNeeded() {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<>(this.errors);\n    errors.addAll(clients.getErrors());\n    List<Error> resubmitList = new ArrayList<>();\n    \n    if (log.isInfoEnabled() && errors.size() > 0) {\n      log.info(\"SolrCmdDistributor found {} errors\", errors.size());\n    }\n    \n    if (log.isDebugEnabled() && errors.size() > 0) {\n      StringBuilder builder = new StringBuilder(\"SolrCmdDistributor found:\");\n      int maxErrorsToShow = 10;\n      for (Error e:errors) {\n        if (maxErrorsToShow-- <= 0) break;\n        builder.append(\"\\n\" + e);\n      }\n      if (errors.size() > 10) {\n        builder.append(\"\\n... and \");\n        builder.append(errors.size() - 10);\n        builder.append(\" more\");\n      }\n      log.debug(builder.toString());\n    }\n\n    for (Error err : errors) {\n      try {\n        String oldNodeUrl = err.req.node.getUrl();\n        \n        /*\n         * if this is a retryable request we may want to retry, depending on the error we received and\n         * the number of times we have already retried\n         */\n        boolean isRetry = err.req.shouldRetry(err);\n        \n        if (testing_errorHook != null) Diagnostics.call(testing_errorHook,\n            err.e);\n        \n        // this can happen in certain situations such as close\n        if (isRetry) {\n          err.req.retries++;\n\n          if (err.req.node instanceof ForwardNode) {\n            SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n                + oldNodeUrl + \" failed - retrying ... retries: \"\n                + err.req.retries + \"/\" + err.req.node.getMaxRetries() + \". \"\n                + err.req.cmd.toString() + \" params:\"\n                + err.req.uReq.getParams() + \" rsp:\" + err.statusCode, err.e);\n          } else {\n            SolrException.log(SolrCmdDistributor.log, \"FROMLEADER request to \"\n                + oldNodeUrl + \" failed - retrying ... retries: \"\n                + err.req.retries + \"/\" + err.req.node.getMaxRetries() + \". \"\n                + err.req.cmd.toString() + \" params:\"\n                + err.req.uReq.getParams() + \" rsp:\" + err.statusCode, err.e);\n          }\n          resubmitList.add(err);\n        } else {\n          allErrors.add(err);\n        }\n      } catch (Exception e) {\n        // continue on\n        log.error(\"Unexpected Error while doing request retries\", e);\n      }\n    }\n    \n    if (resubmitList.size() > 0) {\n      // Only backoff once for the full batch\n      try {\n        int backoffTime = Math.min(retryPause * resubmitList.get(0).req.retries, 2000);\n        log.debug(\"Sleeping {}ms before re-submitting {} requests\", backoffTime, resubmitList.size());\n        Thread.sleep(backoffTime);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        log.warn(null, e);\n      }\n    }\n    \n    clients.clearErrors();\n    this.errors.clear();\n    for (Error err : resubmitList) {\n      submit(err.req, false);\n    }\n    \n    if (resubmitList.size() > 0) {\n      blockAndDoRetries();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2ffe681f212e5073c69955b4ad22946794c84940","date":1560182863,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","sourceNew":"  private void doRetriesIfNeeded() {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<>(this.errors);\n    errors.addAll(clients.getErrors());\n    List<Error> resubmitList = new ArrayList<>();\n    \n    if (log.isInfoEnabled() && errors.size() > 0) {\n      log.info(\"SolrCmdDistributor found {} errors\", errors.size());\n    }\n    \n    if (log.isDebugEnabled() && errors.size() > 0) {\n      StringBuilder builder = new StringBuilder(\"SolrCmdDistributor found:\");\n      int maxErrorsToShow = 10;\n      for (Error e:errors) {\n        if (maxErrorsToShow-- <= 0) break;\n        builder.append(\"\\n\").append(e);\n      }\n      if (errors.size() > 10) {\n        builder.append(\"\\n... and \");\n        builder.append(errors.size() - 10);\n        builder.append(\" more\");\n      }\n      log.debug(builder.toString());\n    }\n\n    for (Error err : errors) {\n      try {\n        /*\n         * if this is a retryable request we may want to retry, depending on the error we received and\n         * the number of times we have already retried\n         */\n        boolean isRetry = err.req.shouldRetry(err);\n        \n        if (testing_errorHook != null) Diagnostics.call(testing_errorHook,\n            err.e);\n        \n        // this can happen in certain situations such as close\n        if (isRetry) {\n          err.req.retries++;\n          resubmitList.add(err);\n        } else {\n          allErrors.add(err);\n        }\n      } catch (Exception e) {\n        // continue on\n        log.error(\"Unexpected Error while doing request retries\", e);\n      }\n    }\n    \n    if (resubmitList.size() > 0) {\n      // Only backoff once for the full batch\n      try {\n        int backoffTime = Math.min(retryPause * resubmitList.get(0).req.retries, 2000);\n        log.debug(\"Sleeping {}ms before re-submitting {} requests\", backoffTime, resubmitList.size());\n        Thread.sleep(backoffTime);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        log.warn(null, e);\n      }\n    }\n    \n    clients.clearErrors();\n    this.errors.clear();\n    for (Error err : resubmitList) {\n      if (err.req.node instanceof ForwardNode) {\n        SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n            + err.req.node.getUrl() + \" failed - retrying ... retries: \"\n            + err.req.retries + \"/\" + err.req.node.getMaxRetries() + \". \"\n            + err.req.cmd.toString() + \" params:\"\n            + err.req.uReq.getParams() + \" rsp:\" + err.statusCode, err.e);\n      } else {\n        SolrException.log(SolrCmdDistributor.log, \"FROMLEADER request to \"\n            + err.req.node.getUrl() + \" failed - retrying ... retries: \"\n            + err.req.retries + \"/\" + err.req.node.getMaxRetries() + \". \"\n            + err.req.cmd.toString() + \" params:\"\n            + err.req.uReq.getParams() + \" rsp:\" + err.statusCode, err.e);\n      }\n      submit(err.req, false);\n    }\n    \n    if (resubmitList.size() > 0) {\n      blockAndDoRetries();\n    }\n  }\n\n","sourceOld":"  private void doRetriesIfNeeded() {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<>(this.errors);\n    errors.addAll(clients.getErrors());\n    List<Error> resubmitList = new ArrayList<>();\n    \n    if (log.isInfoEnabled() && errors.size() > 0) {\n      log.info(\"SolrCmdDistributor found {} errors\", errors.size());\n    }\n    \n    if (log.isDebugEnabled() && errors.size() > 0) {\n      StringBuilder builder = new StringBuilder(\"SolrCmdDistributor found:\");\n      int maxErrorsToShow = 10;\n      for (Error e:errors) {\n        if (maxErrorsToShow-- <= 0) break;\n        builder.append(\"\\n\" + e);\n      }\n      if (errors.size() > 10) {\n        builder.append(\"\\n... and \");\n        builder.append(errors.size() - 10);\n        builder.append(\" more\");\n      }\n      log.debug(builder.toString());\n    }\n\n    for (Error err : errors) {\n      try {\n        /*\n         * if this is a retryable request we may want to retry, depending on the error we received and\n         * the number of times we have already retried\n         */\n        boolean isRetry = err.req.shouldRetry(err);\n        \n        if (testing_errorHook != null) Diagnostics.call(testing_errorHook,\n            err.e);\n        \n        // this can happen in certain situations such as close\n        if (isRetry) {\n          err.req.retries++;\n          resubmitList.add(err);\n        } else {\n          allErrors.add(err);\n        }\n      } catch (Exception e) {\n        // continue on\n        log.error(\"Unexpected Error while doing request retries\", e);\n      }\n    }\n    \n    if (resubmitList.size() > 0) {\n      // Only backoff once for the full batch\n      try {\n        int backoffTime = Math.min(retryPause * resubmitList.get(0).req.retries, 2000);\n        log.debug(\"Sleeping {}ms before re-submitting {} requests\", backoffTime, resubmitList.size());\n        Thread.sleep(backoffTime);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        log.warn(null, e);\n      }\n    }\n    \n    clients.clearErrors();\n    this.errors.clear();\n    for (Error err : resubmitList) {\n      if (err.req.node instanceof ForwardNode) {\n        SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n            + err.req.node.getUrl() + \" failed - retrying ... retries: \"\n            + err.req.retries + \"/\" + err.req.node.getMaxRetries() + \". \"\n            + err.req.cmd.toString() + \" params:\"\n            + err.req.uReq.getParams() + \" rsp:\" + err.statusCode, err.e);\n      } else {\n        SolrException.log(SolrCmdDistributor.log, \"FROMLEADER request to \"\n            + err.req.node.getUrl() + \" failed - retrying ... retries: \"\n            + err.req.retries + \"/\" + err.req.node.getMaxRetries() + \". \"\n            + err.req.cmd.toString() + \" params:\"\n            + err.req.uReq.getParams() + \" rsp:\" + err.statusCode, err.e);\n      }\n      submit(err.req, false);\n    }\n    \n    if (resubmitList.size() > 0) {\n      blockAndDoRetries();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"482ca6c86d7073e3c19096bdc74fe0e73da4554a","date":1576010743,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","sourceNew":"  private void doRetriesIfNeeded() throws IOException {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<>(this.errors);\n    errors.addAll(clients.getErrors());\n    List<Error> resubmitList = new ArrayList<>();\n    \n    if (log.isInfoEnabled() && errors.size() > 0) {\n      log.info(\"SolrCmdDistributor found {} errors\", errors.size());\n    }\n    \n    if (log.isDebugEnabled() && errors.size() > 0) {\n      StringBuilder builder = new StringBuilder(\"SolrCmdDistributor found:\");\n      int maxErrorsToShow = 10;\n      for (Error e:errors) {\n        if (maxErrorsToShow-- <= 0) break;\n        builder.append(\"\\n\").append(e);\n      }\n      if (errors.size() > 10) {\n        builder.append(\"\\n... and \");\n        builder.append(errors.size() - 10);\n        builder.append(\" more\");\n      }\n      log.debug(builder.toString());\n    }\n\n    for (Error err : errors) {\n      try {\n        /*\n         * if this is a retryable request we may want to retry, depending on the error we received and\n         * the number of times we have already retried\n         */\n        boolean isRetry = err.req.shouldRetry(err);\n        \n        if (testing_errorHook != null) Diagnostics.call(testing_errorHook,\n            err.e);\n        \n        // this can happen in certain situations such as close\n        if (isRetry) {\n          err.req.retries++;\n          resubmitList.add(err);\n        } else {\n          allErrors.add(err);\n        }\n      } catch (Exception e) {\n        // continue on\n        log.error(\"Unexpected Error while doing request retries\", e);\n      }\n    }\n    \n    if (resubmitList.size() > 0) {\n      // Only backoff once for the full batch\n      try {\n        int backoffTime = Math.min(retryPause * resubmitList.get(0).req.retries, 2000);\n        log.debug(\"Sleeping {}ms before re-submitting {} requests\", backoffTime, resubmitList.size());\n        Thread.sleep(backoffTime);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        log.warn(null, e);\n      }\n    }\n    \n    clients.clearErrors();\n    this.errors.clear();\n    for (Error err : resubmitList) {\n      if (err.req.node instanceof ForwardNode) {\n        SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n            + err.req.node.getUrl() + \" failed - retrying ... retries: \"\n            + err.req.retries + \"/\" + err.req.node.getMaxRetries() + \". \"\n            + err.req.cmd.toString() + \" params:\"\n            + err.req.uReq.getParams() + \" rsp:\" + err.statusCode, err.e);\n      } else {\n        SolrException.log(SolrCmdDistributor.log, \"FROMLEADER request to \"\n            + err.req.node.getUrl() + \" failed - retrying ... retries: \"\n            + err.req.retries + \"/\" + err.req.node.getMaxRetries() + \". \"\n            + err.req.cmd.toString() + \" params:\"\n            + err.req.uReq.getParams() + \" rsp:\" + err.statusCode, err.e);\n      }\n      submit(err.req, false);\n    }\n    \n    if (resubmitList.size() > 0) {\n      blockAndDoRetries();\n    }\n  }\n\n","sourceOld":"  private void doRetriesIfNeeded() {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<>(this.errors);\n    errors.addAll(clients.getErrors());\n    List<Error> resubmitList = new ArrayList<>();\n    \n    if (log.isInfoEnabled() && errors.size() > 0) {\n      log.info(\"SolrCmdDistributor found {} errors\", errors.size());\n    }\n    \n    if (log.isDebugEnabled() && errors.size() > 0) {\n      StringBuilder builder = new StringBuilder(\"SolrCmdDistributor found:\");\n      int maxErrorsToShow = 10;\n      for (Error e:errors) {\n        if (maxErrorsToShow-- <= 0) break;\n        builder.append(\"\\n\").append(e);\n      }\n      if (errors.size() > 10) {\n        builder.append(\"\\n... and \");\n        builder.append(errors.size() - 10);\n        builder.append(\" more\");\n      }\n      log.debug(builder.toString());\n    }\n\n    for (Error err : errors) {\n      try {\n        /*\n         * if this is a retryable request we may want to retry, depending on the error we received and\n         * the number of times we have already retried\n         */\n        boolean isRetry = err.req.shouldRetry(err);\n        \n        if (testing_errorHook != null) Diagnostics.call(testing_errorHook,\n            err.e);\n        \n        // this can happen in certain situations such as close\n        if (isRetry) {\n          err.req.retries++;\n          resubmitList.add(err);\n        } else {\n          allErrors.add(err);\n        }\n      } catch (Exception e) {\n        // continue on\n        log.error(\"Unexpected Error while doing request retries\", e);\n      }\n    }\n    \n    if (resubmitList.size() > 0) {\n      // Only backoff once for the full batch\n      try {\n        int backoffTime = Math.min(retryPause * resubmitList.get(0).req.retries, 2000);\n        log.debug(\"Sleeping {}ms before re-submitting {} requests\", backoffTime, resubmitList.size());\n        Thread.sleep(backoffTime);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        log.warn(null, e);\n      }\n    }\n    \n    clients.clearErrors();\n    this.errors.clear();\n    for (Error err : resubmitList) {\n      if (err.req.node instanceof ForwardNode) {\n        SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n            + err.req.node.getUrl() + \" failed - retrying ... retries: \"\n            + err.req.retries + \"/\" + err.req.node.getMaxRetries() + \". \"\n            + err.req.cmd.toString() + \" params:\"\n            + err.req.uReq.getParams() + \" rsp:\" + err.statusCode, err.e);\n      } else {\n        SolrException.log(SolrCmdDistributor.log, \"FROMLEADER request to \"\n            + err.req.node.getUrl() + \" failed - retrying ... retries: \"\n            + err.req.retries + \"/\" + err.req.node.getMaxRetries() + \". \"\n            + err.req.cmd.toString() + \" params:\"\n            + err.req.uReq.getParams() + \" rsp:\" + err.statusCode, err.e);\n      }\n      submit(err.req, false);\n    }\n    \n    if (resubmitList.size() > 0) {\n      blockAndDoRetries();\n    }\n  }\n\n","bugFix":["91e069c492cf4895697ef7b81df0ffb9a8bd4b48"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a229cb50768e988c50a2106bdae3a92154f428bf","date":1576051038,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","sourceNew":"  private void doRetriesIfNeeded() throws IOException {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<>(this.errors);\n    errors.addAll(clients.getErrors());\n    List<Error> resubmitList = new ArrayList<>();\n    \n    if (log.isInfoEnabled() && errors.size() > 0) {\n      log.info(\"SolrCmdDistributor found {} errors\", errors.size());\n    }\n    \n    if (log.isDebugEnabled() && errors.size() > 0) {\n      StringBuilder builder = new StringBuilder(\"SolrCmdDistributor found:\");\n      int maxErrorsToShow = 10;\n      for (Error e:errors) {\n        if (maxErrorsToShow-- <= 0) break;\n        builder.append(\"\\n\").append(e);\n      }\n      if (errors.size() > 10) {\n        builder.append(\"\\n... and \");\n        builder.append(errors.size() - 10);\n        builder.append(\" more\");\n      }\n      log.debug(builder.toString());\n    }\n\n    for (Error err : errors) {\n      try {\n        /*\n         * if this is a retryable request we may want to retry, depending on the error we received and\n         * the number of times we have already retried\n         */\n        boolean isRetry = err.req.shouldRetry(err);\n        \n        if (testing_errorHook != null) Diagnostics.call(testing_errorHook,\n            err.e);\n        \n        // this can happen in certain situations such as close\n        if (isRetry) {\n          err.req.retries++;\n          resubmitList.add(err);\n        } else {\n          allErrors.add(err);\n        }\n      } catch (Exception e) {\n        // continue on\n        log.error(\"Unexpected Error while doing request retries\", e);\n      }\n    }\n    \n    if (resubmitList.size() > 0) {\n      // Only backoff once for the full batch\n      try {\n        int backoffTime = Math.min(retryPause * resubmitList.get(0).req.retries, 2000);\n        log.debug(\"Sleeping {}ms before re-submitting {} requests\", backoffTime, resubmitList.size());\n        Thread.sleep(backoffTime);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        log.warn(null, e);\n      }\n    }\n    \n    clients.clearErrors();\n    this.errors.clear();\n    for (Error err : resubmitList) {\n      if (err.req.node instanceof ForwardNode) {\n        SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n            + err.req.node.getUrl() + \" failed - retrying ... retries: \"\n            + err.req.retries + \"/\" + err.req.node.getMaxRetries() + \". \"\n            + err.req.cmd.toString() + \" params:\"\n            + err.req.uReq.getParams() + \" rsp:\" + err.statusCode, err.e);\n      } else {\n        SolrException.log(SolrCmdDistributor.log, \"FROMLEADER request to \"\n            + err.req.node.getUrl() + \" failed - retrying ... retries: \"\n            + err.req.retries + \"/\" + err.req.node.getMaxRetries() + \". \"\n            + err.req.cmd.toString() + \" params:\"\n            + err.req.uReq.getParams() + \" rsp:\" + err.statusCode, err.e);\n      }\n      submit(err.req, false);\n    }\n    \n    if (resubmitList.size() > 0) {\n      blockAndDoRetries();\n    }\n  }\n\n","sourceOld":"  private void doRetriesIfNeeded() {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<>(this.errors);\n    errors.addAll(clients.getErrors());\n    List<Error> resubmitList = new ArrayList<>();\n    \n    if (log.isInfoEnabled() && errors.size() > 0) {\n      log.info(\"SolrCmdDistributor found {} errors\", errors.size());\n    }\n    \n    if (log.isDebugEnabled() && errors.size() > 0) {\n      StringBuilder builder = new StringBuilder(\"SolrCmdDistributor found:\");\n      int maxErrorsToShow = 10;\n      for (Error e:errors) {\n        if (maxErrorsToShow-- <= 0) break;\n        builder.append(\"\\n\").append(e);\n      }\n      if (errors.size() > 10) {\n        builder.append(\"\\n... and \");\n        builder.append(errors.size() - 10);\n        builder.append(\" more\");\n      }\n      log.debug(builder.toString());\n    }\n\n    for (Error err : errors) {\n      try {\n        /*\n         * if this is a retryable request we may want to retry, depending on the error we received and\n         * the number of times we have already retried\n         */\n        boolean isRetry = err.req.shouldRetry(err);\n        \n        if (testing_errorHook != null) Diagnostics.call(testing_errorHook,\n            err.e);\n        \n        // this can happen in certain situations such as close\n        if (isRetry) {\n          err.req.retries++;\n          resubmitList.add(err);\n        } else {\n          allErrors.add(err);\n        }\n      } catch (Exception e) {\n        // continue on\n        log.error(\"Unexpected Error while doing request retries\", e);\n      }\n    }\n    \n    if (resubmitList.size() > 0) {\n      // Only backoff once for the full batch\n      try {\n        int backoffTime = Math.min(retryPause * resubmitList.get(0).req.retries, 2000);\n        log.debug(\"Sleeping {}ms before re-submitting {} requests\", backoffTime, resubmitList.size());\n        Thread.sleep(backoffTime);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        log.warn(null, e);\n      }\n    }\n    \n    clients.clearErrors();\n    this.errors.clear();\n    for (Error err : resubmitList) {\n      if (err.req.node instanceof ForwardNode) {\n        SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n            + err.req.node.getUrl() + \" failed - retrying ... retries: \"\n            + err.req.retries + \"/\" + err.req.node.getMaxRetries() + \". \"\n            + err.req.cmd.toString() + \" params:\"\n            + err.req.uReq.getParams() + \" rsp:\" + err.statusCode, err.e);\n      } else {\n        SolrException.log(SolrCmdDistributor.log, \"FROMLEADER request to \"\n            + err.req.node.getUrl() + \" failed - retrying ... retries: \"\n            + err.req.retries + \"/\" + err.req.node.getMaxRetries() + \". \"\n            + err.req.cmd.toString() + \" params:\"\n            + err.req.uReq.getParams() + \" rsp:\" + err.statusCode, err.e);\n      }\n      submit(err.req, false);\n    }\n    \n    if (resubmitList.size() > 0) {\n      blockAndDoRetries();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"740d649f013f07efbeb73ca854f106c60166e7c0","date":1587431295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRetriesIfNeeded().mjava","sourceNew":"  private void doRetriesIfNeeded() throws IOException {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<>(this.errors);\n    errors.addAll(clients.getErrors());\n    List<Error> resubmitList = new ArrayList<>();\n    \n    if (log.isInfoEnabled() && errors.size() > 0) {\n      log.info(\"SolrCmdDistributor found {} errors\", errors.size());\n    }\n    \n    if (log.isDebugEnabled() && errors.size() > 0) {\n      StringBuilder builder = new StringBuilder(\"SolrCmdDistributor found:\");\n      int maxErrorsToShow = 10;\n      for (Error e:errors) {\n        if (maxErrorsToShow-- <= 0) break;\n        builder.append(\"\\n\").append(e);\n      }\n      if (errors.size() > 10) {\n        builder.append(\"\\n... and \");\n        builder.append(errors.size() - 10);\n        builder.append(\" more\");\n      }\n      log.debug(\"{}\", builder);\n    }\n\n    for (Error err : errors) {\n      try {\n        /*\n         * if this is a retryable request we may want to retry, depending on the error we received and\n         * the number of times we have already retried\n         */\n        boolean isRetry = err.req.shouldRetry(err);\n        \n        if (testing_errorHook != null) Diagnostics.call(testing_errorHook,\n            err.e);\n        \n        // this can happen in certain situations such as close\n        if (isRetry) {\n          err.req.retries++;\n          resubmitList.add(err);\n        } else {\n          allErrors.add(err);\n        }\n      } catch (Exception e) {\n        // continue on\n        log.error(\"Unexpected Error while doing request retries\", e);\n      }\n    }\n    \n    if (resubmitList.size() > 0) {\n      // Only backoff once for the full batch\n      try {\n        int backoffTime = Math.min(retryPause * resubmitList.get(0).req.retries, 2000);\n        if (log.isDebugEnabled()) {\n          log.debug(\"Sleeping {}ms before re-submitting {} requests\", backoffTime, resubmitList.size());\n        }\n        Thread.sleep(backoffTime);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        log.warn(null, e);\n      }\n    }\n    \n    clients.clearErrors();\n    this.errors.clear();\n    for (Error err : resubmitList) {\n      if (err.req.node instanceof ForwardNode) {\n        SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n            + err.req.node.getUrl() + \" failed - retrying ... retries: \"\n            + err.req.retries + \"/\" + err.req.node.getMaxRetries() + \". \"\n            + err.req.cmd.toString() + \" params:\"\n            + err.req.uReq.getParams() + \" rsp:\" + err.statusCode, err.e);\n      } else {\n        SolrException.log(SolrCmdDistributor.log, \"FROMLEADER request to \"\n            + err.req.node.getUrl() + \" failed - retrying ... retries: \"\n            + err.req.retries + \"/\" + err.req.node.getMaxRetries() + \". \"\n            + err.req.cmd.toString() + \" params:\"\n            + err.req.uReq.getParams() + \" rsp:\" + err.statusCode, err.e);\n      }\n      submit(err.req, false);\n    }\n    \n    if (resubmitList.size() > 0) {\n      blockAndDoRetries();\n    }\n  }\n\n","sourceOld":"  private void doRetriesIfNeeded() throws IOException {\n    // NOTE: retries will be forwards to a single url\n    \n    List<Error> errors = new ArrayList<>(this.errors);\n    errors.addAll(clients.getErrors());\n    List<Error> resubmitList = new ArrayList<>();\n    \n    if (log.isInfoEnabled() && errors.size() > 0) {\n      log.info(\"SolrCmdDistributor found {} errors\", errors.size());\n    }\n    \n    if (log.isDebugEnabled() && errors.size() > 0) {\n      StringBuilder builder = new StringBuilder(\"SolrCmdDistributor found:\");\n      int maxErrorsToShow = 10;\n      for (Error e:errors) {\n        if (maxErrorsToShow-- <= 0) break;\n        builder.append(\"\\n\").append(e);\n      }\n      if (errors.size() > 10) {\n        builder.append(\"\\n... and \");\n        builder.append(errors.size() - 10);\n        builder.append(\" more\");\n      }\n      log.debug(builder.toString());\n    }\n\n    for (Error err : errors) {\n      try {\n        /*\n         * if this is a retryable request we may want to retry, depending on the error we received and\n         * the number of times we have already retried\n         */\n        boolean isRetry = err.req.shouldRetry(err);\n        \n        if (testing_errorHook != null) Diagnostics.call(testing_errorHook,\n            err.e);\n        \n        // this can happen in certain situations such as close\n        if (isRetry) {\n          err.req.retries++;\n          resubmitList.add(err);\n        } else {\n          allErrors.add(err);\n        }\n      } catch (Exception e) {\n        // continue on\n        log.error(\"Unexpected Error while doing request retries\", e);\n      }\n    }\n    \n    if (resubmitList.size() > 0) {\n      // Only backoff once for the full batch\n      try {\n        int backoffTime = Math.min(retryPause * resubmitList.get(0).req.retries, 2000);\n        log.debug(\"Sleeping {}ms before re-submitting {} requests\", backoffTime, resubmitList.size());\n        Thread.sleep(backoffTime);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        log.warn(null, e);\n      }\n    }\n    \n    clients.clearErrors();\n    this.errors.clear();\n    for (Error err : resubmitList) {\n      if (err.req.node instanceof ForwardNode) {\n        SolrException.log(SolrCmdDistributor.log, \"forwarding update to \"\n            + err.req.node.getUrl() + \" failed - retrying ... retries: \"\n            + err.req.retries + \"/\" + err.req.node.getMaxRetries() + \". \"\n            + err.req.cmd.toString() + \" params:\"\n            + err.req.uReq.getParams() + \" rsp:\" + err.statusCode, err.e);\n      } else {\n        SolrException.log(SolrCmdDistributor.log, \"FROMLEADER request to \"\n            + err.req.node.getUrl() + \" failed - retrying ... retries: \"\n            + err.req.retries + \"/\" + err.req.node.getMaxRetries() + \". \"\n            + err.req.cmd.toString() + \" params:\"\n            + err.req.uReq.getParams() + \" rsp:\" + err.statusCode, err.e);\n      }\n      submit(err.req, false);\n    }\n    \n    if (resubmitList.size() > 0) {\n      blockAndDoRetries();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"740d649f013f07efbeb73ca854f106c60166e7c0":["482ca6c86d7073e3c19096bdc74fe0e73da4554a"],"2ffe681f212e5073c69955b4ad22946794c84940":["ea8df0d2af6a4c20dc9fd961ba65a01bb8f4ac97"],"e483b96a4c951399b8188cbf6a2e8c0d6b95ba6b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"91e069c492cf4895697ef7b81df0ffb9a8bd4b48":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bafca15d8e408346a67f4282ad1143b88023893b":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"6d5e40574a14e38bb8d289d77669498bce3c7737":["7adf9b18b459a0b9db8cab49eb9411d5f136c65d"],"c0cf9c2ec975506bab465b6b2be92cb9bffc84d3":["f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef"],"3e5ef402099a6d54398ce3ac65c0b7506bbfece5":["6d5e40574a14e38bb8d289d77669498bce3c7737"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a229cb50768e988c50a2106bdae3a92154f428bf":["2ffe681f212e5073c69955b4ad22946794c84940","482ca6c86d7073e3c19096bdc74fe0e73da4554a"],"9ce545e833f5334e245fb71d83c3460ef83c2d5e":["68bccf37d3bf3d0924d55ab08d457d8045342a4e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6d0939a3d7e30b8aaa693d32eb2342732b9fce14":["0491dc45f6b12f57e9c33751e9317a01995556c6"],"51f334bcae208e34e4b0444becb75dd8bff6e7c2":["c0cf9c2ec975506bab465b6b2be92cb9bffc84d3"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["f3fe387328658a75cc6147c6f4abc4d0ed978cd1"],"482ca6c86d7073e3c19096bdc74fe0e73da4554a":["2ffe681f212e5073c69955b4ad22946794c84940"],"f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef":["bafca15d8e408346a67f4282ad1143b88023893b"],"7adf9b18b459a0b9db8cab49eb9411d5f136c65d":["91e069c492cf4895697ef7b81df0ffb9a8bd4b48"],"a7e83c5139756615c366676a30117aab6344f46f":["51f334bcae208e34e4b0444becb75dd8bff6e7c2"],"0491dc45f6b12f57e9c33751e9317a01995556c6":["99e7358ea6164009218b511839476278da9f44f2"],"ea8df0d2af6a4c20dc9fd961ba65a01bb8f4ac97":["a7e83c5139756615c366676a30117aab6344f46f"],"f3fe387328658a75cc6147c6f4abc4d0ed978cd1":["9ce545e833f5334e245fb71d83c3460ef83c2d5e"],"99e7358ea6164009218b511839476278da9f44f2":["3e5ef402099a6d54398ce3ac65c0b7506bbfece5"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["e483b96a4c951399b8188cbf6a2e8c0d6b95ba6b"],"68bccf37d3bf3d0924d55ab08d457d8045342a4e":["6d0939a3d7e30b8aaa693d32eb2342732b9fce14"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["6d5e40574a14e38bb8d289d77669498bce3c7737","f3fe387328658a75cc6147c6f4abc4d0ed978cd1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["740d649f013f07efbeb73ca854f106c60166e7c0"]},"commit2Childs":{"740d649f013f07efbeb73ca854f106c60166e7c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2ffe681f212e5073c69955b4ad22946794c84940":["a229cb50768e988c50a2106bdae3a92154f428bf","482ca6c86d7073e3c19096bdc74fe0e73da4554a"],"e483b96a4c951399b8188cbf6a2e8c0d6b95ba6b":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"91e069c492cf4895697ef7b81df0ffb9a8bd4b48":["7adf9b18b459a0b9db8cab49eb9411d5f136c65d"],"bafca15d8e408346a67f4282ad1143b88023893b":["f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef"],"6d5e40574a14e38bb8d289d77669498bce3c7737":["3e5ef402099a6d54398ce3ac65c0b7506bbfece5","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"c0cf9c2ec975506bab465b6b2be92cb9bffc84d3":["51f334bcae208e34e4b0444becb75dd8bff6e7c2"],"3e5ef402099a6d54398ce3ac65c0b7506bbfece5":["99e7358ea6164009218b511839476278da9f44f2"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["bafca15d8e408346a67f4282ad1143b88023893b"],"a229cb50768e988c50a2106bdae3a92154f428bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91e069c492cf4895697ef7b81df0ffb9a8bd4b48"],"9ce545e833f5334e245fb71d83c3460ef83c2d5e":["f3fe387328658a75cc6147c6f4abc4d0ed978cd1"],"6d0939a3d7e30b8aaa693d32eb2342732b9fce14":["68bccf37d3bf3d0924d55ab08d457d8045342a4e"],"51f334bcae208e34e4b0444becb75dd8bff6e7c2":["a7e83c5139756615c366676a30117aab6344f46f"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["e483b96a4c951399b8188cbf6a2e8c0d6b95ba6b"],"482ca6c86d7073e3c19096bdc74fe0e73da4554a":["740d649f013f07efbeb73ca854f106c60166e7c0","a229cb50768e988c50a2106bdae3a92154f428bf"],"f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef":["c0cf9c2ec975506bab465b6b2be92cb9bffc84d3"],"7adf9b18b459a0b9db8cab49eb9411d5f136c65d":["6d5e40574a14e38bb8d289d77669498bce3c7737"],"0491dc45f6b12f57e9c33751e9317a01995556c6":["6d0939a3d7e30b8aaa693d32eb2342732b9fce14"],"a7e83c5139756615c366676a30117aab6344f46f":["ea8df0d2af6a4c20dc9fd961ba65a01bb8f4ac97"],"ea8df0d2af6a4c20dc9fd961ba65a01bb8f4ac97":["2ffe681f212e5073c69955b4ad22946794c84940"],"f3fe387328658a75cc6147c6f4abc4d0ed978cd1":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"99e7358ea6164009218b511839476278da9f44f2":["0491dc45f6b12f57e9c33751e9317a01995556c6"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"68bccf37d3bf3d0924d55ab08d457d8045342a4e":["9ce545e833f5334e245fb71d83c3460ef83c2d5e"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a229cb50768e988c50a2106bdae3a92154f428bf","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}