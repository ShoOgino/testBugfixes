{"path":"lucene/core/src/test/org/apache/lucene/document/TestFeatureField#testBasics().mjava","commits":[{"id":"966dd6f2a1942842f7efe2bdcc7537ea6597a290","date":1521543449,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestFeatureField#testBasics().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasics() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig()\n        .setMergePolicy(newLogMergePolicy(random().nextBoolean())));\n    Document doc = new Document();\n    FeatureField pagerank = new FeatureField(\"features\", \"pagerank\", 1);\n    FeatureField urlLength = new FeatureField(\"features\", \"urlLen\", 1);\n    doc.add(pagerank);\n    doc.add(urlLength);\n\n    pagerank.setFeatureValue(10);\n    urlLength.setFeatureValue(1f / 24);\n    writer.addDocument(doc);\n\n    pagerank.setFeatureValue(100);\n    urlLength.setFeatureValue(1f / 20);\n    writer.addDocument(doc);\n\n    writer.addDocument(new Document()); // gap\n\n    pagerank.setFeatureValue(1);\n    urlLength.setFeatureValue(1f / 100);\n    writer.addDocument(doc);\n\n    pagerank.setFeatureValue(42);\n    urlLength.setFeatureValue(1f / 23);\n    writer.addDocument(doc);\n\n    writer.forceMerge(1);\n    DirectoryReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    LeafReaderContext context = reader.leaves().get(0);\n\n    Query q = FeatureField.newLogQuery(\"features\", \"pagerank\", 3f, 4.5f);\n    Weight w = q.createWeight(searcher, ScoreMode.TOP_SCORES, 2);\n    Scorer s = w.scorer(context);\n\n    assertEquals(0, s.iterator().nextDoc());\n    assertEquals((float) (6.0 * Math.log(4.5f + 10)), s.score(), 0f);\n\n    assertEquals(1, s.iterator().nextDoc());\n    assertEquals((float) (6.0 * Math.log(4.5f + 100)), s.score(), 0f);\n\n    assertEquals(3, s.iterator().nextDoc());\n    assertEquals((float) (6.0 * Math.log(4.5f + 1)), s.score(), 0f);\n\n    assertEquals(4, s.iterator().nextDoc());\n    assertEquals((float) (6.0 * Math.log(4.5f + 42)), s.score(), 0f);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, s.iterator().nextDoc());\n\n    q = FeatureField.newSaturationQuery(\"features\", \"pagerank\", 3f, 4.5f);\n    w = q.createWeight(searcher, ScoreMode.TOP_SCORES, 2);\n    s = w.scorer(context);\n\n    assertEquals(0, s.iterator().nextDoc());\n    assertEquals(6f * (1 - 4.5f / (4.5f + 10)), s.score(), 0f);\n\n    assertEquals(1, s.iterator().nextDoc());\n    assertEquals(6f * (1 - 4.5f / (4.5f + 100)), s.score(), 0f);\n\n    assertEquals(3, s.iterator().nextDoc());\n    assertEquals(6f * (1 - 4.5f / (4.5f + 1)), s.score(), 0f);\n\n    assertEquals(4, s.iterator().nextDoc());\n    assertEquals(6f * (1 - 4.5f / (4.5f + 42)), s.score(), 0f);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, s.iterator().nextDoc());\n\n    q = FeatureField.newSigmoidQuery(\"features\", \"pagerank\", 3f, 4.5f, 0.6f);\n    w = q.createWeight(searcher, ScoreMode.TOP_SCORES, 2);\n    s = w.scorer(context);\n    double kPa = Math.pow(4.5f, 0.6f);\n\n    assertEquals(0, s.iterator().nextDoc());\n    assertEquals((float) (6 * (1 - kPa / (kPa + Math.pow(10, 0.6f)))), s.score(), 0f);\n\n    assertEquals(1, s.iterator().nextDoc());\n    assertEquals((float) (6 * (1 - kPa / (kPa + Math.pow(100, 0.6f)))), s.score(), 0f);\n\n    assertEquals(3, s.iterator().nextDoc());\n    assertEquals((float) (6 * (1 - kPa / (kPa + Math.pow(1, 0.6f)))), s.score(), 0f);\n\n    assertEquals(4, s.iterator().nextDoc());\n    assertEquals((float) (6 * (1 - kPa / (kPa + Math.pow(42, 0.6f)))), s.score(), 0f);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, s.iterator().nextDoc());\n\n    q = FeatureField.newSaturationQuery(\"features\", \"urlLen\", 3f, 1f/24);\n    w = q.createWeight(searcher, ScoreMode.TOP_SCORES, 2);\n    s = w.scorer(context);\n\n    assertEquals(0, s.iterator().nextDoc());\n    assertEquals(6f * (1 - (1f/24) / (1f/24 + round(1f/24))), s.score(), 0f);\n\n    assertEquals(1, s.iterator().nextDoc());\n    assertEquals(6f * (1 - 1f/24 / (1f/24 + round(1f/20))), s.score(), 0f);\n\n    assertEquals(3, s.iterator().nextDoc());\n    assertEquals(6f * (1 - 1f/24 / (1f/24 + round(1f/100))), s.score(), 0f);\n\n    assertEquals(4, s.iterator().nextDoc());\n    assertEquals(6f * (1 - 1f/24 / (1f/24 + round(1f/23))), s.score(), 0f);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, s.iterator().nextDoc());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","date":1521731438,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestFeatureField#testBasics().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasics() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig()\n        .setMergePolicy(newLogMergePolicy(random().nextBoolean())));\n    Document doc = new Document();\n    FeatureField pagerank = new FeatureField(\"features\", \"pagerank\", 1);\n    FeatureField urlLength = new FeatureField(\"features\", \"urlLen\", 1);\n    doc.add(pagerank);\n    doc.add(urlLength);\n\n    pagerank.setFeatureValue(10);\n    urlLength.setFeatureValue(1f / 24);\n    writer.addDocument(doc);\n\n    pagerank.setFeatureValue(100);\n    urlLength.setFeatureValue(1f / 20);\n    writer.addDocument(doc);\n\n    writer.addDocument(new Document()); // gap\n\n    pagerank.setFeatureValue(1);\n    urlLength.setFeatureValue(1f / 100);\n    writer.addDocument(doc);\n\n    pagerank.setFeatureValue(42);\n    urlLength.setFeatureValue(1f / 23);\n    writer.addDocument(doc);\n\n    writer.forceMerge(1);\n    DirectoryReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    LeafReaderContext context = reader.leaves().get(0);\n\n    Query q = FeatureField.newLogQuery(\"features\", \"pagerank\", 3f, 4.5f);\n    Weight w = q.createWeight(searcher, ScoreMode.TOP_SCORES, 2);\n    Scorer s = w.scorer(context);\n\n    assertEquals(0, s.iterator().nextDoc());\n    assertEquals((float) (6.0 * Math.log(4.5f + 10)), s.score(), 0f);\n\n    assertEquals(1, s.iterator().nextDoc());\n    assertEquals((float) (6.0 * Math.log(4.5f + 100)), s.score(), 0f);\n\n    assertEquals(3, s.iterator().nextDoc());\n    assertEquals((float) (6.0 * Math.log(4.5f + 1)), s.score(), 0f);\n\n    assertEquals(4, s.iterator().nextDoc());\n    assertEquals((float) (6.0 * Math.log(4.5f + 42)), s.score(), 0f);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, s.iterator().nextDoc());\n\n    q = FeatureField.newSaturationQuery(\"features\", \"pagerank\", 3f, 4.5f);\n    w = q.createWeight(searcher, ScoreMode.TOP_SCORES, 2);\n    s = w.scorer(context);\n\n    assertEquals(0, s.iterator().nextDoc());\n    assertEquals(6f * (1 - 4.5f / (4.5f + 10)), s.score(), 0f);\n\n    assertEquals(1, s.iterator().nextDoc());\n    assertEquals(6f * (1 - 4.5f / (4.5f + 100)), s.score(), 0f);\n\n    assertEquals(3, s.iterator().nextDoc());\n    assertEquals(6f * (1 - 4.5f / (4.5f + 1)), s.score(), 0f);\n\n    assertEquals(4, s.iterator().nextDoc());\n    assertEquals(6f * (1 - 4.5f / (4.5f + 42)), s.score(), 0f);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, s.iterator().nextDoc());\n\n    q = FeatureField.newSigmoidQuery(\"features\", \"pagerank\", 3f, 4.5f, 0.6f);\n    w = q.createWeight(searcher, ScoreMode.TOP_SCORES, 2);\n    s = w.scorer(context);\n    double kPa = Math.pow(4.5f, 0.6f);\n\n    assertEquals(0, s.iterator().nextDoc());\n    assertEquals((float) (6 * (1 - kPa / (kPa + Math.pow(10, 0.6f)))), s.score(), 0f);\n\n    assertEquals(1, s.iterator().nextDoc());\n    assertEquals((float) (6 * (1 - kPa / (kPa + Math.pow(100, 0.6f)))), s.score(), 0f);\n\n    assertEquals(3, s.iterator().nextDoc());\n    assertEquals((float) (6 * (1 - kPa / (kPa + Math.pow(1, 0.6f)))), s.score(), 0f);\n\n    assertEquals(4, s.iterator().nextDoc());\n    assertEquals((float) (6 * (1 - kPa / (kPa + Math.pow(42, 0.6f)))), s.score(), 0f);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, s.iterator().nextDoc());\n\n    q = FeatureField.newSaturationQuery(\"features\", \"urlLen\", 3f, 1f/24);\n    w = q.createWeight(searcher, ScoreMode.TOP_SCORES, 2);\n    s = w.scorer(context);\n\n    assertEquals(0, s.iterator().nextDoc());\n    assertEquals(6f * (1 - (1f/24) / (1f/24 + round(1f/24))), s.score(), 0f);\n\n    assertEquals(1, s.iterator().nextDoc());\n    assertEquals(6f * (1 - 1f/24 / (1f/24 + round(1f/20))), s.score(), 0f);\n\n    assertEquals(3, s.iterator().nextDoc());\n    assertEquals(6f * (1 - 1f/24 / (1f/24 + round(1f/100))), s.score(), 0f);\n\n    assertEquals(4, s.iterator().nextDoc());\n    assertEquals(6f * (1 - 1f/24 / (1f/24 + round(1f/23))), s.score(), 0f);\n\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, s.iterator().nextDoc());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","966dd6f2a1942842f7efe2bdcc7537ea6597a290"],"966dd6f2a1942842f7efe2bdcc7537ea6597a290":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"]},"commit2Childs":{"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"966dd6f2a1942842f7efe2bdcc7537ea6597a290":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","966dd6f2a1942842f7efe2bdcc7537ea6597a290"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}