{"path":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#put(AtomicReader,Entry,Object).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#put(AtomicReader,Entry,Object).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#put(AtomicReader,Entry,Object).mjava","sourceNew":"    /** Sets the key to the value for the provided reader;\n     *  if the key is already set then this doesn't change it. */\n    public void put(AtomicReader reader, Entry key, Object value) {\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        Map<Entry,Object> innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          // First time this reader is using FieldCache\n          innerCache = new HashMap<Entry,Object>();\n          readerCache.put(readerKey, innerCache);\n          wrapper.initReader(reader);\n        }\n        if (innerCache.get(key) == null) {\n          innerCache.put(key, value);\n        } else {\n          // Another thread beat us to it; leave the current\n          // value\n        }\n      }\n    }\n\n","sourceOld":"    /** Sets the key to the value for the provided reader;\n     *  if the key is already set then this doesn't change it. */\n    public void put(AtomicReader reader, Entry key, Object value) {\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        Map<Entry,Object> innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          // First time this reader is using FieldCache\n          innerCache = new HashMap<Entry,Object>();\n          readerCache.put(readerKey, innerCache);\n          wrapper.initReader(reader);\n        }\n        if (innerCache.get(key) == null) {\n          innerCache.put(key, value);\n        } else {\n          // Another thread beat us to it; leave the current\n          // value\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4d374b2bebd0d52acaa61038fbf23068620fba7","date":1353240004,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#put(AtomicReader,CacheKey,Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#put(AtomicReader,Entry,Object).mjava","sourceNew":"    /** Sets the key to the value for the provided reader;\n     *  if the key is already set then this doesn't change it. */\n    public void put(AtomicReader reader, CacheKey key, Object value) {\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        Map<CacheKey,Object> innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          // First time this reader is using FieldCache\n          innerCache = new HashMap<CacheKey,Object>();\n          readerCache.put(readerKey, innerCache);\n          wrapper.initReader(reader);\n        }\n        if (innerCache.get(key) == null) {\n          innerCache.put(key, value);\n        } else {\n          // Another thread beat us to it; leave the current\n          // value\n        }\n      }\n    }\n\n","sourceOld":"    /** Sets the key to the value for the provided reader;\n     *  if the key is already set then this doesn't change it. */\n    public void put(AtomicReader reader, Entry key, Object value) {\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        Map<Entry,Object> innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          // First time this reader is using FieldCache\n          innerCache = new HashMap<Entry,Object>();\n          readerCache.put(readerKey, innerCache);\n          wrapper.initReader(reader);\n        }\n        if (innerCache.get(key) == null) {\n          innerCache.put(key, value);\n        } else {\n          // Another thread beat us to it; leave the current\n          // value\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#put(AtomicReader,Entry,Object).mjava","sourceNew":null,"sourceOld":"    /** Sets the key to the value for the provided reader;\n     *  if the key is already set then this doesn't change it. */\n    public void put(AtomicReader reader, Entry key, Object value) {\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        Map<Entry,Object> innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          // First time this reader is using FieldCache\n          innerCache = new HashMap<Entry,Object>();\n          readerCache.put(readerKey, innerCache);\n          wrapper.initReader(reader);\n        }\n        if (innerCache.get(key) == null) {\n          innerCache.put(key, value);\n        } else {\n          // Another thread beat us to it; leave the current\n          // value\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","a4d374b2bebd0d52acaa61038fbf23068620fba7"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a4d374b2bebd0d52acaa61038fbf23068620fba7":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d4d69c535930b5cce125cff868d40f6373dc27d4","a4d374b2bebd0d52acaa61038fbf23068620fba7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a4d374b2bebd0d52acaa61038fbf23068620fba7":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}