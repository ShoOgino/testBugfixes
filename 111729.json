{"path":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedMergesSizeLimit(SegmentInfos,int,int,IndexWriter).mjava","commits":[{"id":"027bee21e09164c9ee230395405076d1e0034b30","date":1401521821,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedMergesSizeLimit(SegmentInfos,int,int,IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedMergesSizeLimit(SegmentInfos,int,int).mjava","sourceNew":"  /**\n   * Returns the merges necessary to merge the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findForcedMergesSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last, IndexWriter writer) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n    final List<SegmentCommitInfo> segments = infos.asList();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentCommitInfo info = infos.info(start);\n      if (size(info, writer) > maxMergeSizeForForcedMerge || sizeDocs(info, writer) > maxMergeDocs) {\n        if (verbose(writer)) {\n          message(\"findForcedMergesSizeLimit: skip segment=\" + info + \": size is > maxMergeSize (\" + maxMergeSizeForForcedMerge + \") or sizeDocs is > maxMergeDocs (\" + maxMergeDocs + \")\", writer);\n        }\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is merged.\n        if (last - start - 1 > 1 || (start != last - 1 && !isMerged(infos, infos.info(start + 1), writer))) {\n          // there is more than 1 segment to the right of\n          // this one, or a mergeable single segment.\n          spec.add(new OneMerge(segments.subList(start + 1, last)));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(new OneMerge(segments.subList(start, last)));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1\n    // already fully merged\n    if (last > 0 && (++start + 1 < last || !isMerged(infos, infos.info(start), writer))) {\n      spec.add(new OneMerge(segments.subList(start, last)));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","sourceOld":"  /**\n   * Returns the merges necessary to merge the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findForcedMergesSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n    final List<SegmentCommitInfo> segments = infos.asList();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentCommitInfo info = infos.info(start);\n      if (size(info) > maxMergeSizeForForcedMerge || sizeDocs(info) > maxMergeDocs) {\n        if (verbose()) {\n          message(\"findForcedMergesSizeLimit: skip segment=\" + info + \": size is > maxMergeSize (\" + maxMergeSizeForForcedMerge + \") or sizeDocs is > maxMergeDocs (\" + maxMergeDocs + \")\");\n        }\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is merged.\n        if (last - start - 1 > 1 || (start != last - 1 && !isMerged(infos, infos.info(start + 1)))) {\n          // there is more than 1 segment to the right of\n          // this one, or a mergeable single segment.\n          spec.add(new OneMerge(segments.subList(start + 1, last)));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(new OneMerge(segments.subList(start, last)));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1\n    // already fully merged\n    if (last > 0 && (++start + 1 < last || !isMerged(infos, infos.info(start)))) {\n      spec.add(new OneMerge(segments.subList(start, last)));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d28f215464f76024caf026606f8ea51a5319c53","date":1527226629,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedMergesSizeLimit(SegmentInfos,int,MergeContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedMergesSizeLimit(SegmentInfos,int,int,IndexWriter).mjava","sourceNew":"  /**\n   * Returns the merges necessary to merge the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findForcedMergesSizeLimit(\n      SegmentInfos infos, int last, MergeContext mergeContext) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n    final List<SegmentCommitInfo> segments = infos.asList();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentCommitInfo info = infos.info(start);\n      if (size(info, mergeContext) > maxMergeSizeForForcedMerge || sizeDocs(info, mergeContext) > maxMergeDocs) {\n        if (verbose(mergeContext)) {\n          message(\"findForcedMergesSizeLimit: skip segment=\" + info + \": size is > maxMergeSize (\" + maxMergeSizeForForcedMerge + \") or sizeDocs is > maxMergeDocs (\" + maxMergeDocs + \")\", mergeContext);\n        }\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is merged.\n        if (last - start - 1 > 1 || (start != last - 1 && !isMerged(infos, infos.info(start + 1), mergeContext))) {\n          // there is more than 1 segment to the right of\n          // this one, or a mergeable single segment.\n          spec.add(new OneMerge(segments.subList(start + 1, last)));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(new OneMerge(segments.subList(start, last)));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1\n    // already fully merged\n    if (last > 0 && (++start + 1 < last || !isMerged(infos, infos.info(start), mergeContext))) {\n      spec.add(new OneMerge(segments.subList(start, last)));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","sourceOld":"  /**\n   * Returns the merges necessary to merge the index, taking the max merge\n   * size or max merge docs into consideration. This method attempts to respect\n   * the {@code maxNumSegments} parameter, however it might be, due to size\n   * constraints, that more than that number of segments will remain in the\n   * index. Also, this method does not guarantee that exactly {@code\n   * maxNumSegments} will remain, but &lt;= that number.\n   */\n  private MergeSpecification findForcedMergesSizeLimit(\n      SegmentInfos infos, int maxNumSegments, int last, IndexWriter writer) throws IOException {\n    MergeSpecification spec = new MergeSpecification();\n    final List<SegmentCommitInfo> segments = infos.asList();\n\n    int start = last - 1;\n    while (start >= 0) {\n      SegmentCommitInfo info = infos.info(start);\n      if (size(info, writer) > maxMergeSizeForForcedMerge || sizeDocs(info, writer) > maxMergeDocs) {\n        if (verbose(writer)) {\n          message(\"findForcedMergesSizeLimit: skip segment=\" + info + \": size is > maxMergeSize (\" + maxMergeSizeForForcedMerge + \") or sizeDocs is > maxMergeDocs (\" + maxMergeDocs + \")\", writer);\n        }\n        // need to skip that segment + add a merge for the 'right' segments,\n        // unless there is only 1 which is merged.\n        if (last - start - 1 > 1 || (start != last - 1 && !isMerged(infos, infos.info(start + 1), writer))) {\n          // there is more than 1 segment to the right of\n          // this one, or a mergeable single segment.\n          spec.add(new OneMerge(segments.subList(start + 1, last)));\n        }\n        last = start;\n      } else if (last - start == mergeFactor) {\n        // mergeFactor eligible segments were found, add them as a merge.\n        spec.add(new OneMerge(segments.subList(start, last)));\n        last = start;\n      }\n      --start;\n    }\n\n    // Add any left-over segments, unless there is just 1\n    // already fully merged\n    if (last > 0 && (++start + 1 < last || !isMerged(infos, infos.info(start), writer))) {\n      spec.add(new OneMerge(segments.subList(start, last)));\n    }\n\n    return spec.merges.size() == 0 ? null : spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d28f215464f76024caf026606f8ea51a5319c53":["027bee21e09164c9ee230395405076d1e0034b30"],"027bee21e09164c9ee230395405076d1e0034b30":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d28f215464f76024caf026606f8ea51a5319c53"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["027bee21e09164c9ee230395405076d1e0034b30"],"1d28f215464f76024caf026606f8ea51a5319c53":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"027bee21e09164c9ee230395405076d1e0034b30":["1d28f215464f76024caf026606f8ea51a5319c53"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}