{"path":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#crash().mjava","commits":[{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#crash().mjava","pathOld":"/dev/null","sourceNew":"  /** Simulates a crash of OS or machine by overwriting\n   *  unsynced files. */\n  public synchronized void crash() throws IOException {\n    crashed = true;\n    openFiles = new HashMap<String,Integer>();\n    Iterator<String> it = unSyncedFiles.iterator();\n    unSyncedFiles = new HashSet<String>();\n    int count = 0;\n    if (!(delegate instanceof RAMDirectory)) {\n      while(it.hasNext()) {\n        String name = it.next();\n        if (count % 3 == 0) {\n          deleteFile(name, true);\n        } else if (count % 3 == 1) {\n          // Zero out file entirely\n          long length = fileLength(name);\n          byte[] zeroes = new byte[256];\n          long upto = 0;\n          IndexOutput out = delegate.createOutput(name);\n          while(upto < length) {\n            final int limit = (int) Math.min(length-upto, zeroes.length);\n            out.writeBytes(zeroes, 0, limit);\n            upto += limit;\n          }\n          out.close();\n        } else if (count % 3 == 2) {\n          // Truncate the file:\n          IndexOutput out = delegate.createOutput(name);\n          out.setLength(fileLength(name)/2);\n          out.close();\n        }\n        count++;\n      }\n    } else {\n\n      RAMDirectory ramDir = (RAMDirectory) delegate;\n      while(it.hasNext()) {\n        String name = it.next();\n        RAMFile file = ramDir.fileMap.get(name);\n        if (count % 3 == 0) {\n          deleteFile(name, true);\n        } else if (count % 3 == 1) {\n          // Zero out file entirely\n          final int numBuffers = file.numBuffers();\n          for(int i=0;i<numBuffers;i++) {\n            byte[] buffer = file.getBuffer(i);\n            Arrays.fill(buffer, (byte) 0);\n          }\n        } else if (count % 3 == 2) {\n          // Truncate the file:\n          file.setLength(file.getLength()/2);\n        }\n        count++;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71122e5efb3fd9ad29e81a7682dc45a8852bd53c","date":1282667345,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#crash().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#crash().mjava","sourceNew":"  /** Simulates a crash of OS or machine by overwriting\n   *  unsynced files. */\n  public synchronized void crash() throws IOException {\n    crashed = true;\n    openFiles = new HashMap<String,Integer>();\n    Iterator<String> it = unSyncedFiles.iterator();\n    unSyncedFiles = new HashSet<String>();\n    // first force-close all files, so we can corrupt on windows etc.\n    // clone the file map, as these guys want to remove themselves on close.\n    Map<Closeable,Exception> m = new IdentityHashMap<Closeable,Exception>(files);\n    for (Closeable f : m.keySet())\n      try {\n        f.close();\n      } catch (Exception ignored) {}\n    \n    int count = 0;\n    while(it.hasNext()) {\n      String name = it.next();\n      if (count % 3 == 0) {\n        deleteFile(name, true);\n      } else if (count % 3 == 1) {\n        // Zero out file entirely\n        long length = fileLength(name);\n        byte[] zeroes = new byte[256];\n        long upto = 0;\n        IndexOutput out = delegate.createOutput(name);\n        while(upto < length) {\n          final int limit = (int) Math.min(length-upto, zeroes.length);\n          out.writeBytes(zeroes, 0, limit);\n          upto += limit;\n        }\n        out.close();\n      } else if (count % 3 == 2) {\n        // Truncate the file:\n        IndexOutput out = delegate.createOutput(name);\n        out.setLength(fileLength(name)/2);\n        out.close();\n      }\n      count++;\n    }\n  }\n\n","sourceOld":"  /** Simulates a crash of OS or machine by overwriting\n   *  unsynced files. */\n  public synchronized void crash() throws IOException {\n    crashed = true;\n    openFiles = new HashMap<String,Integer>();\n    Iterator<String> it = unSyncedFiles.iterator();\n    unSyncedFiles = new HashSet<String>();\n    int count = 0;\n    if (!(delegate instanceof RAMDirectory)) {\n      while(it.hasNext()) {\n        String name = it.next();\n        if (count % 3 == 0) {\n          deleteFile(name, true);\n        } else if (count % 3 == 1) {\n          // Zero out file entirely\n          long length = fileLength(name);\n          byte[] zeroes = new byte[256];\n          long upto = 0;\n          IndexOutput out = delegate.createOutput(name);\n          while(upto < length) {\n            final int limit = (int) Math.min(length-upto, zeroes.length);\n            out.writeBytes(zeroes, 0, limit);\n            upto += limit;\n          }\n          out.close();\n        } else if (count % 3 == 2) {\n          // Truncate the file:\n          IndexOutput out = delegate.createOutput(name);\n          out.setLength(fileLength(name)/2);\n          out.close();\n        }\n        count++;\n      }\n    } else {\n\n      RAMDirectory ramDir = (RAMDirectory) delegate;\n      while(it.hasNext()) {\n        String name = it.next();\n        RAMFile file = ramDir.fileMap.get(name);\n        if (count % 3 == 0) {\n          deleteFile(name, true);\n        } else if (count % 3 == 1) {\n          // Zero out file entirely\n          final int numBuffers = file.numBuffers();\n          for(int i=0;i<numBuffers;i++) {\n            byte[] buffer = file.getBuffer(i);\n            Arrays.fill(buffer, (byte) 0);\n          }\n        } else if (count % 3 == 2) {\n          // Truncate the file:\n          file.setLength(file.getLength()/2);\n        }\n        count++;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["2a186ae8733084223c22044e935e4ef848a143d1","f592e183306e8e4efabf3e7e08d3e709c9b97dbb","f592e183306e8e4efabf3e7e08d3e709c9b97dbb","f592e183306e8e4efabf3e7e08d3e709c9b97dbb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a186ae8733084223c22044e935e4ef848a143d1","date":1289694819,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#crash().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#crash().mjava","sourceNew":"  /** Simulates a crash of OS or machine by overwriting\n   *  unsynced files. */\n  public synchronized void crash() throws IOException {\n    crashed = true;\n    openFiles = new HashMap<String,Integer>();\n    openFilesForWrite = new HashSet<String>();\n    openFilesDeleted = new HashSet<String>();\n    Iterator<String> it = unSyncedFiles.iterator();\n    unSyncedFiles = new HashSet<String>();\n    // first force-close all files, so we can corrupt on windows etc.\n    // clone the file map, as these guys want to remove themselves on close.\n    Map<Closeable,Exception> m = new IdentityHashMap<Closeable,Exception>(openFileHandles);\n    for (Closeable f : m.keySet())\n      try {\n        f.close();\n      } catch (Exception ignored) {}\n    \n    int count = 0;\n    while(it.hasNext()) {\n      String name = it.next();\n      if (count % 3 == 0) {\n        deleteFile(name, true);\n      } else if (count % 3 == 1) {\n        // Zero out file entirely\n        long length = fileLength(name);\n        byte[] zeroes = new byte[256];\n        long upto = 0;\n        IndexOutput out = delegate.createOutput(name);\n        while(upto < length) {\n          final int limit = (int) Math.min(length-upto, zeroes.length);\n          out.writeBytes(zeroes, 0, limit);\n          upto += limit;\n        }\n        out.close();\n      } else if (count % 3 == 2) {\n        // Truncate the file:\n        IndexOutput out = delegate.createOutput(name);\n        out.setLength(fileLength(name)/2);\n        out.close();\n      }\n      count++;\n    }\n  }\n\n","sourceOld":"  /** Simulates a crash of OS or machine by overwriting\n   *  unsynced files. */\n  public synchronized void crash() throws IOException {\n    crashed = true;\n    openFiles = new HashMap<String,Integer>();\n    Iterator<String> it = unSyncedFiles.iterator();\n    unSyncedFiles = new HashSet<String>();\n    // first force-close all files, so we can corrupt on windows etc.\n    // clone the file map, as these guys want to remove themselves on close.\n    Map<Closeable,Exception> m = new IdentityHashMap<Closeable,Exception>(files);\n    for (Closeable f : m.keySet())\n      try {\n        f.close();\n      } catch (Exception ignored) {}\n    \n    int count = 0;\n    while(it.hasNext()) {\n      String name = it.next();\n      if (count % 3 == 0) {\n        deleteFile(name, true);\n      } else if (count % 3 == 1) {\n        // Zero out file entirely\n        long length = fileLength(name);\n        byte[] zeroes = new byte[256];\n        long upto = 0;\n        IndexOutput out = delegate.createOutput(name);\n        while(upto < length) {\n          final int limit = (int) Math.min(length-upto, zeroes.length);\n          out.writeBytes(zeroes, 0, limit);\n          upto += limit;\n        }\n        out.close();\n      } else if (count % 3 == 2) {\n        // Truncate the file:\n        IndexOutput out = delegate.createOutput(name);\n        out.setLength(fileLength(name)/2);\n        out.close();\n      }\n      count++;\n    }\n  }\n\n","bugFix":["71122e5efb3fd9ad29e81a7682dc45a8852bd53c"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c498d3f8d75170b121f5eda2c6210ac5beb5d411","date":1289726298,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#crash().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#crash().mjava","sourceNew":"  /** Simulates a crash of OS or machine by overwriting\n   *  unsynced files. */\n  public synchronized void crash() throws IOException {\n    crashed = true;\n    openFiles = new HashMap<String,Integer>();\n    openFilesForWrite = new HashSet<String>();\n    openFilesDeleted = new HashSet<String>();\n    Iterator<String> it = unSyncedFiles.iterator();\n    unSyncedFiles = new HashSet<String>();\n    // first force-close all files, so we can corrupt on windows etc.\n    // clone the file map, as these guys want to remove themselves on close.\n    Map<Closeable,Exception> m = new IdentityHashMap<Closeable,Exception>(openFileHandles);\n    for (Closeable f : m.keySet())\n      try {\n        f.close();\n      } catch (Exception ignored) {}\n    \n    int count = 0;\n    while(it.hasNext()) {\n      String name = it.next();\n      if (count % 3 == 0) {\n        deleteFile(name, true);\n      } else if (count % 3 == 1) {\n        // Zero out file entirely\n        long length = fileLength(name);\n        byte[] zeroes = new byte[256];\n        long upto = 0;\n        IndexOutput out = delegate.createOutput(name);\n        while(upto < length) {\n          final int limit = (int) Math.min(length-upto, zeroes.length);\n          out.writeBytes(zeroes, 0, limit);\n          upto += limit;\n        }\n        out.close();\n      } else if (count % 3 == 2) {\n        // Truncate the file:\n        IndexOutput out = delegate.createOutput(name);\n        out.setLength(fileLength(name)/2);\n        out.close();\n      }\n      count++;\n    }\n  }\n\n","sourceOld":"  /** Simulates a crash of OS or machine by overwriting\n   *  unsynced files. */\n  public synchronized void crash() throws IOException {\n    crashed = true;\n    openFiles = new HashMap<String,Integer>();\n    Iterator<String> it = unSyncedFiles.iterator();\n    unSyncedFiles = new HashSet<String>();\n    // first force-close all files, so we can corrupt on windows etc.\n    // clone the file map, as these guys want to remove themselves on close.\n    Map<Closeable,Exception> m = new IdentityHashMap<Closeable,Exception>(files);\n    for (Closeable f : m.keySet())\n      try {\n        f.close();\n      } catch (Exception ignored) {}\n    \n    int count = 0;\n    while(it.hasNext()) {\n      String name = it.next();\n      if (count % 3 == 0) {\n        deleteFile(name, true);\n      } else if (count % 3 == 1) {\n        // Zero out file entirely\n        long length = fileLength(name);\n        byte[] zeroes = new byte[256];\n        long upto = 0;\n        IndexOutput out = delegate.createOutput(name);\n        while(upto < length) {\n          final int limit = (int) Math.min(length-upto, zeroes.length);\n          out.writeBytes(zeroes, 0, limit);\n          upto += limit;\n        }\n        out.close();\n      } else if (count % 3 == 2) {\n        // Truncate the file:\n        IndexOutput out = delegate.createOutput(name);\n        out.setLength(fileLength(name)/2);\n        out.close();\n      }\n      count++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#crash().mjava","pathOld":"/dev/null","sourceNew":"  /** Simulates a crash of OS or machine by overwriting\n   *  unsynced files. */\n  public synchronized void crash() throws IOException {\n    crashed = true;\n    openFiles = new HashMap<String,Integer>();\n    openFilesForWrite = new HashSet<String>();\n    openFilesDeleted = new HashSet<String>();\n    Iterator<String> it = unSyncedFiles.iterator();\n    unSyncedFiles = new HashSet<String>();\n    // first force-close all files, so we can corrupt on windows etc.\n    // clone the file map, as these guys want to remove themselves on close.\n    Map<Closeable,Exception> m = new IdentityHashMap<Closeable,Exception>(openFileHandles);\n    for (Closeable f : m.keySet())\n      try {\n        f.close();\n      } catch (Exception ignored) {}\n    \n    int count = 0;\n    while(it.hasNext()) {\n      String name = it.next();\n      if (count % 3 == 0) {\n        deleteFile(name, true);\n      } else if (count % 3 == 1) {\n        // Zero out file entirely\n        long length = fileLength(name);\n        byte[] zeroes = new byte[256];\n        long upto = 0;\n        IndexOutput out = delegate.createOutput(name);\n        while(upto < length) {\n          final int limit = (int) Math.min(length-upto, zeroes.length);\n          out.writeBytes(zeroes, 0, limit);\n          upto += limit;\n        }\n        out.close();\n      } else if (count % 3 == 2) {\n        // Truncate the file:\n        IndexOutput out = delegate.createOutput(name);\n        out.setLength(fileLength(name)/2);\n        out.close();\n      }\n      count++;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#crash().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#crash().mjava","sourceNew":"  /** Simulates a crash of OS or machine by overwriting\n   *  unsynced files. */\n  public synchronized void crash() throws IOException {\n    crashed = true;\n    openFiles = new HashMap<String,Integer>();\n    openFilesForWrite = new HashSet<String>();\n    openFilesDeleted = new HashSet<String>();\n    Iterator<String> it = unSyncedFiles.iterator();\n    unSyncedFiles = new HashSet<String>();\n    // first force-close all files, so we can corrupt on windows etc.\n    // clone the file map, as these guys want to remove themselves on close.\n    Map<Closeable,Exception> m = new IdentityHashMap<Closeable,Exception>(openFileHandles);\n    for (Closeable f : m.keySet())\n      try {\n        f.close();\n      } catch (Exception ignored) {}\n    \n    int count = 0;\n    while(it.hasNext()) {\n      String name = it.next();\n      if (count % 3 == 0) {\n        deleteFile(name, true);\n      } else if (count % 3 == 1) {\n        // Zero out file entirely\n        long length = fileLength(name);\n        byte[] zeroes = new byte[256];\n        long upto = 0;\n        IndexOutput out = delegate.createOutput(name);\n        while(upto < length) {\n          final int limit = (int) Math.min(length-upto, zeroes.length);\n          out.writeBytes(zeroes, 0, limit);\n          upto += limit;\n        }\n        out.close();\n      } else if (count % 3 == 2) {\n        // Truncate the file:\n        IndexOutput out = delegate.createOutput(name);\n        out.setLength(fileLength(name)/2);\n        out.close();\n      }\n      count++;\n    }\n  }\n\n","sourceOld":"  /** Simulates a crash of OS or machine by overwriting\n   *  unsynced files. */\n  public synchronized void crash() throws IOException {\n    crashed = true;\n    openFiles = new HashMap<String,Integer>();\n    openFilesForWrite = new HashSet<String>();\n    openFilesDeleted = new HashSet<String>();\n    Iterator<String> it = unSyncedFiles.iterator();\n    unSyncedFiles = new HashSet<String>();\n    // first force-close all files, so we can corrupt on windows etc.\n    // clone the file map, as these guys want to remove themselves on close.\n    Map<Closeable,Exception> m = new IdentityHashMap<Closeable,Exception>(openFileHandles);\n    for (Closeable f : m.keySet())\n      try {\n        f.close();\n      } catch (Exception ignored) {}\n    \n    int count = 0;\n    while(it.hasNext()) {\n      String name = it.next();\n      if (count % 3 == 0) {\n        deleteFile(name, true);\n      } else if (count % 3 == 1) {\n        // Zero out file entirely\n        long length = fileLength(name);\n        byte[] zeroes = new byte[256];\n        long upto = 0;\n        IndexOutput out = delegate.createOutput(name);\n        while(upto < length) {\n          final int limit = (int) Math.min(length-upto, zeroes.length);\n          out.writeBytes(zeroes, 0, limit);\n          upto += limit;\n        }\n        out.close();\n      } else if (count % 3 == 2) {\n        // Truncate the file:\n        IndexOutput out = delegate.createOutput(name);\n        out.setLength(fileLength(name)/2);\n        out.close();\n      }\n      count++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#crash().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#crash().mjava","sourceNew":"  /** Simulates a crash of OS or machine by overwriting\n   *  unsynced files. */\n  public synchronized void crash() throws IOException {\n    crashed = true;\n    openFiles = new HashMap<String,Integer>();\n    openFilesForWrite = new HashSet<String>();\n    openFilesDeleted = new HashSet<String>();\n    Iterator<String> it = unSyncedFiles.iterator();\n    unSyncedFiles = new HashSet<String>();\n    // first force-close all files, so we can corrupt on windows etc.\n    // clone the file map, as these guys want to remove themselves on close.\n    Map<Closeable,Exception> m = new IdentityHashMap<Closeable,Exception>(openFileHandles);\n    for (Closeable f : m.keySet())\n      try {\n        f.close();\n      } catch (Exception ignored) {}\n    \n    int count = 0;\n    while(it.hasNext()) {\n      String name = it.next();\n      if (count % 3 == 0) {\n        deleteFile(name, true);\n      } else if (count % 3 == 1) {\n        // Zero out file entirely\n        long length = fileLength(name);\n        byte[] zeroes = new byte[256];\n        long upto = 0;\n        IndexOutput out = delegate.createOutput(name);\n        while(upto < length) {\n          final int limit = (int) Math.min(length-upto, zeroes.length);\n          out.writeBytes(zeroes, 0, limit);\n          upto += limit;\n        }\n        out.close();\n      } else if (count % 3 == 2) {\n        // Truncate the file:\n        IndexOutput out = delegate.createOutput(name);\n        out.setLength(fileLength(name)/2);\n        out.close();\n      }\n      count++;\n    }\n  }\n\n","sourceOld":"  /** Simulates a crash of OS or machine by overwriting\n   *  unsynced files. */\n  public synchronized void crash() throws IOException {\n    crashed = true;\n    openFiles = new HashMap<String,Integer>();\n    openFilesForWrite = new HashSet<String>();\n    openFilesDeleted = new HashSet<String>();\n    Iterator<String> it = unSyncedFiles.iterator();\n    unSyncedFiles = new HashSet<String>();\n    // first force-close all files, so we can corrupt on windows etc.\n    // clone the file map, as these guys want to remove themselves on close.\n    Map<Closeable,Exception> m = new IdentityHashMap<Closeable,Exception>(openFileHandles);\n    for (Closeable f : m.keySet())\n      try {\n        f.close();\n      } catch (Exception ignored) {}\n    \n    int count = 0;\n    while(it.hasNext()) {\n      String name = it.next();\n      if (count % 3 == 0) {\n        deleteFile(name, true);\n      } else if (count % 3 == 1) {\n        // Zero out file entirely\n        long length = fileLength(name);\n        byte[] zeroes = new byte[256];\n        long upto = 0;\n        IndexOutput out = delegate.createOutput(name);\n        while(upto < length) {\n          final int limit = (int) Math.min(length-upto, zeroes.length);\n          out.writeBytes(zeroes, 0, limit);\n          upto += limit;\n        }\n        out.close();\n      } else if (count % 3 == 2) {\n        // Truncate the file:\n        IndexOutput out = delegate.createOutput(name);\n        out.setLength(fileLength(name)/2);\n        out.close();\n      }\n      count++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#crash().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#crash().mjava","sourceNew":"  /** Simulates a crash of OS or machine by overwriting\n   *  unsynced files. */\n  public synchronized void crash() throws IOException {\n    crashed = true;\n    openFiles = new HashMap<String,Integer>();\n    openFilesForWrite = new HashSet<String>();\n    openFilesDeleted = new HashSet<String>();\n    Iterator<String> it = unSyncedFiles.iterator();\n    unSyncedFiles = new HashSet<String>();\n    // first force-close all files, so we can corrupt on windows etc.\n    // clone the file map, as these guys want to remove themselves on close.\n    Map<Closeable,Exception> m = new IdentityHashMap<Closeable,Exception>(openFileHandles);\n    for (Closeable f : m.keySet())\n      try {\n        f.close();\n      } catch (Exception ignored) {}\n    \n    int count = 0;\n    while(it.hasNext()) {\n      String name = it.next();\n      if (count % 3 == 0) {\n        deleteFile(name, true);\n      } else if (count % 3 == 1) {\n        // Zero out file entirely\n        long length = fileLength(name);\n        byte[] zeroes = new byte[256];\n        long upto = 0;\n        IndexOutput out = delegate.createOutput(name);\n        while(upto < length) {\n          final int limit = (int) Math.min(length-upto, zeroes.length);\n          out.writeBytes(zeroes, 0, limit);\n          upto += limit;\n        }\n        out.close();\n      } else if (count % 3 == 2) {\n        // Truncate the file:\n        IndexOutput out = delegate.createOutput(name);\n        out.setLength(fileLength(name)/2);\n        out.close();\n      }\n      count++;\n    }\n  }\n\n","sourceOld":"  /** Simulates a crash of OS or machine by overwriting\n   *  unsynced files. */\n  public synchronized void crash() throws IOException {\n    crashed = true;\n    openFiles = new HashMap<String,Integer>();\n    openFilesForWrite = new HashSet<String>();\n    openFilesDeleted = new HashSet<String>();\n    Iterator<String> it = unSyncedFiles.iterator();\n    unSyncedFiles = new HashSet<String>();\n    // first force-close all files, so we can corrupt on windows etc.\n    // clone the file map, as these guys want to remove themselves on close.\n    Map<Closeable,Exception> m = new IdentityHashMap<Closeable,Exception>(openFileHandles);\n    for (Closeable f : m.keySet())\n      try {\n        f.close();\n      } catch (Exception ignored) {}\n    \n    int count = 0;\n    while(it.hasNext()) {\n      String name = it.next();\n      if (count % 3 == 0) {\n        deleteFile(name, true);\n      } else if (count % 3 == 1) {\n        // Zero out file entirely\n        long length = fileLength(name);\n        byte[] zeroes = new byte[256];\n        long upto = 0;\n        IndexOutput out = delegate.createOutput(name);\n        while(upto < length) {\n          final int limit = (int) Math.min(length-upto, zeroes.length);\n          out.writeBytes(zeroes, 0, limit);\n          upto += limit;\n        }\n        out.close();\n      } else if (count % 3 == 2) {\n        // Truncate the file:\n        IndexOutput out = delegate.createOutput(name);\n        out.setLength(fileLength(name)/2);\n        out.close();\n      }\n      count++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2a186ae8733084223c22044e935e4ef848a143d1":["71122e5efb3fd9ad29e81a7682dc45a8852bd53c"],"c498d3f8d75170b121f5eda2c6210ac5beb5d411":["71122e5efb3fd9ad29e81a7682dc45a8852bd53c","2a186ae8733084223c22044e935e4ef848a143d1"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["c498d3f8d75170b121f5eda2c6210ac5beb5d411","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2a186ae8733084223c22044e935e4ef848a143d1"],"71122e5efb3fd9ad29e81a7682dc45a8852bd53c":["a05409176bd65129d67a785ee70e881e238a9aef"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["2a186ae8733084223c22044e935e4ef848a143d1"]},"commit2Childs":{"2a186ae8733084223c22044e935e4ef848a143d1":["c498d3f8d75170b121f5eda2c6210ac5beb5d411","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"c498d3f8d75170b121f5eda2c6210ac5beb5d411":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a05409176bd65129d67a785ee70e881e238a9aef","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a05409176bd65129d67a785ee70e881e238a9aef":["71122e5efb3fd9ad29e81a7682dc45a8852bd53c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"71122e5efb3fd9ad29e81a7682dc45a8852bd53c":["2a186ae8733084223c22044e935e4ef848a143d1","c498d3f8d75170b121f5eda2c6210ac5beb5d411"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}