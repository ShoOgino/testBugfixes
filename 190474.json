{"path":"src/java/org/apache/lucene/index/SegmentInfos#commit(Directory).mjava","commits":[{"id":"e82780afe6097066eb5befb86e9432f077667e3d","date":1202756169,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#commit(Directory).mjava","pathOld":"/dev/null","sourceNew":"  /** Writes & syncs to the Directory dir, taking care to\n   *  remove the segments file on exception */\n  public final void commit(Directory dir) throws IOException {\n    boolean success = false;\n    try {\n      write(dir);\n      success = true;\n    } finally {\n      if (!success) {\n        // Must carefully compute fileName from \"generation\"\n        // since lastGeneration isn't incremented:\n        final String segmentFileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                             \"\",\n                                                                             generation);\n        dir.deleteFile(segmentFileName);\n      }\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file now includes\n    // checksum at the end, which should catch this case.\n    // So when a reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = getCurrentSegmentFileName();\n    success = false;\n    try {\n      dir.sync(fileName);\n      success = true;\n    } finally {\n      if (!success)\n        dir.deleteFile(fileName);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c5947ccd7ba3770dcba5a0713dbd5496678256d9","3ead7b8e9b4934446f7a00ad0e81e3aa4d587ab6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3ead7b8e9b4934446f7a00ad0e81e3aa4d587ab6","date":1205349797,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#commit(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#commit(Directory).mjava","sourceNew":"  /** Writes & syncs to the Directory dir, taking care to\n   *  remove the segments file on exception */\n  public final void commit(Directory dir) throws IOException {\n    boolean success = false;\n    try {\n      write(dir);\n      success = true;\n    } finally {\n      if (!success) {\n        // Must carefully compute fileName from \"generation\"\n        // since lastGeneration isn't incremented:\n        final String segmentFileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                             \"\",\n                                                                             generation);\n        try {\n          dir.deleteFile(segmentFileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file now includes\n    // checksum at the end, which should catch this case.\n    // So when a reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = getCurrentSegmentFileName();\n    success = false;\n    try {\n      dir.sync(fileName);\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Writes & syncs to the Directory dir, taking care to\n   *  remove the segments file on exception */\n  public final void commit(Directory dir) throws IOException {\n    boolean success = false;\n    try {\n      write(dir);\n      success = true;\n    } finally {\n      if (!success) {\n        // Must carefully compute fileName from \"generation\"\n        // since lastGeneration isn't incremented:\n        final String segmentFileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                             \"\",\n                                                                             generation);\n        dir.deleteFile(segmentFileName);\n      }\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file now includes\n    // checksum at the end, which should catch this case.\n    // So when a reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = getCurrentSegmentFileName();\n    success = false;\n    try {\n      dir.sync(fileName);\n      success = true;\n    } finally {\n      if (!success)\n        dir.deleteFile(fileName);\n    }\n  }\n\n","bugFix":["e82780afe6097066eb5befb86e9432f077667e3d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"455aeff4fef915340c5b19d71d5e147034e83093","date":1210099270,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#commit(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#commit(Directory).mjava","sourceNew":"  /** Writes & syncs to the Directory dir, taking care to\n   *  remove the segments file on exception */\n  public final void commit(Directory dir) throws IOException {\n    prepareCommit(dir);\n    finishCommit(dir);\n  }\n\n","sourceOld":"  /** Writes & syncs to the Directory dir, taking care to\n   *  remove the segments file on exception */\n  public final void commit(Directory dir) throws IOException {\n    boolean success = false;\n    try {\n      write(dir);\n      success = true;\n    } finally {\n      if (!success) {\n        // Must carefully compute fileName from \"generation\"\n        // since lastGeneration isn't incremented:\n        final String segmentFileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                             \"\",\n                                                                             generation);\n        try {\n          dir.deleteFile(segmentFileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file now includes\n    // checksum at the end, which should catch this case.\n    // So when a reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = getCurrentSegmentFileName();\n    success = false;\n    try {\n      dir.sync(fileName);\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f33fc116e28d7704378c9dd333711753bd0c9706","date":1248010179,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#commit(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#commit(Directory).mjava","sourceNew":"  /** Writes & syncs to the Directory dir, taking care to\n   *  remove the segments file on exception */\n  final void commit(Directory dir) throws IOException {\n    prepareCommit(dir);\n    finishCommit(dir);\n  }\n\n","sourceOld":"  /** Writes & syncs to the Directory dir, taking care to\n   *  remove the segments file on exception */\n  public final void commit(Directory dir) throws IOException {\n    prepareCommit(dir);\n    finishCommit(dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#commit(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#commit(Directory).mjava","sourceNew":"  /** Writes & syncs to the Directory dir, taking care to\n   *  remove the segments file on exception */\n  final void commit(Directory dir) throws IOException {\n    prepareCommit(dir);\n    finishCommit(dir);\n  }\n\n","sourceOld":"  /** Writes & syncs to the Directory dir, taking care to\n   *  remove the segments file on exception */\n  final void commit(Directory dir) throws IOException {\n    prepareCommit(dir);\n    finishCommit(dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f33fc116e28d7704378c9dd333711753bd0c9706":["455aeff4fef915340c5b19d71d5e147034e83093"],"3ead7b8e9b4934446f7a00ad0e81e3aa4d587ab6":["e82780afe6097066eb5befb86e9432f077667e3d"],"455aeff4fef915340c5b19d71d5e147034e83093":["3ead7b8e9b4934446f7a00ad0e81e3aa4d587ab6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e82780afe6097066eb5befb86e9432f077667e3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f33fc116e28d7704378c9dd333711753bd0c9706"]},"commit2Childs":{"f33fc116e28d7704378c9dd333711753bd0c9706":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3ead7b8e9b4934446f7a00ad0e81e3aa4d587ab6":["455aeff4fef915340c5b19d71d5e147034e83093"],"455aeff4fef915340c5b19d71d5e147034e83093":["f33fc116e28d7704378c9dd333711753bd0c9706"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e82780afe6097066eb5befb86e9432f077667e3d"],"e82780afe6097066eb5befb86e9432f077667e3d":["3ead7b8e9b4934446f7a00ad0e81e3aa4d587ab6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}