{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#equals(Object).mjava","commits":[{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#equals(Object).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if (!(obj instanceof FacetLabel)) {\n      return false;\n    }\n    \n    FacetLabel other = (FacetLabel) obj;\n    if (length != other.length) {\n      return false; // not same length, cannot be equal\n    }\n    \n    // CategoryPaths are more likely to differ at the last components, so start\n    // from last-first\n    for (int i = length - 1; i >= 0; i--) {\n      if (!components[i].equals(other.components[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (!(obj instanceof CategoryPath)) {\n      return false;\n    }\n    \n    CategoryPath other = (CategoryPath) obj;\n    if (length != other.length) {\n      return false; // not same length, cannot be equal\n    }\n    \n    // CategoryPaths are more likely to differ at the last components, so start\n    // from last-first\n    for (int i = length - 1; i >= 0; i--) {\n      if (!components[i].equals(other.components[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#equals(Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if (!(obj instanceof FacetLabel)) {\n      return false;\n    }\n    \n    FacetLabel other = (FacetLabel) obj;\n    if (length != other.length) {\n      return false; // not same length, cannot be equal\n    }\n    \n    // CategoryPaths are more likely to differ at the last components, so start\n    // from last-first\n    for (int i = length - 1; i >= 0; i--) {\n      if (!components[i].equals(other.components[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}