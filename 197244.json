{"path":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromZooKeeper(SolrQueryRequest,SolrQueryResponse,CoreContainer).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromZooKeeper(SolrQueryRequest,SolrQueryResponse,CoreContainer).mjava","pathOld":"/dev/null","sourceNew":"  private void showFromZooKeeper(SolrQueryRequest req, SolrQueryResponse rsp,\n      CoreContainer coreContainer) throws KeeperException,\n      InterruptedException, UnsupportedEncodingException {\n    String adminFile = null;\n    SolrCore core = req.getCore();\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n    final ZkSolrResourceLoader loader = (ZkSolrResourceLoader) core\n        .getResourceLoader();\n    String confPath = loader.getCollectionZkPath();\n    \n    String fname = req.getParams().get(\"file\", null);\n    if (fname == null) {\n      adminFile = confPath;\n    } else {\n      fname = fname.replace('\\\\', '/'); // normalize slashes\n      if (hiddenFiles.contains(fname.toUpperCase(Locale.ENGLISH))) {\n        throw new SolrException(ErrorCode.FORBIDDEN, \"Can not access: \" + fname);\n      }\n      if (fname.indexOf(\"..\") >= 0) {\n        throw new SolrException(ErrorCode.FORBIDDEN, \"Invalid path: \" + fname);\n      }\n      adminFile = confPath + \"/\" + fname;\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if (!zkClient.exists(adminFile, true)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Can not find: \"\n          + adminFile);\n    }\n    \n    // Show a directory listing\n    List<String> children = zkClient.getChildren(adminFile, null, true);\n    if (children.size() > 0) {\n      \n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for (String f : children) {\n        if (hiddenFiles.contains(f.toUpperCase(Locale.ENGLISH))) {\n          continue; // don't show 'hidden' files\n        }\n        if (f.startsWith(\".\")) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add(f, fileInfo);\n        List<String> fchildren = zkClient.getChildren(adminFile, null, true);\n        if (fchildren.size() > 0) {\n          fileInfo.add(\"directory\", true);\n        } else {\n          // TODO? content type\n          fileInfo.add(\"size\", f.length());\n        }\n        // TODO: ?\n        // fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add(\"files\", files);\n    } else {\n      // Include the file contents\n      // The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n      params.set(CommonParams.WT, \"raw\");\n      req.setParams(params);\n      \n      ContentStreamBase content = new ContentStreamBase.StringStream(\n          new String(zkClient.getData(adminFile, null, null, true), \"UTF-8\"));\n      content.setContentType(req.getParams().get(USE_CONTENT_TYPE));\n      \n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["096d8770ecc7af747320979ed1e4ff71d3237b8f","174cf555ccf6aeb63c765897000c8214a84fe4f1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromZooKeeper(SolrQueryRequest,SolrQueryResponse,CoreContainer).mjava","pathOld":"/dev/null","sourceNew":"  private void showFromZooKeeper(SolrQueryRequest req, SolrQueryResponse rsp,\n      CoreContainer coreContainer) throws KeeperException,\n      InterruptedException, UnsupportedEncodingException {\n    String adminFile = null;\n    SolrCore core = req.getCore();\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n    final ZkSolrResourceLoader loader = (ZkSolrResourceLoader) core\n        .getResourceLoader();\n    String confPath = loader.getCollectionZkPath();\n    \n    String fname = req.getParams().get(\"file\", null);\n    if (fname == null) {\n      adminFile = confPath;\n    } else {\n      fname = fname.replace('\\\\', '/'); // normalize slashes\n      if (hiddenFiles.contains(fname.toUpperCase(Locale.ENGLISH))) {\n        throw new SolrException(ErrorCode.FORBIDDEN, \"Can not access: \" + fname);\n      }\n      if (fname.indexOf(\"..\") >= 0) {\n        throw new SolrException(ErrorCode.FORBIDDEN, \"Invalid path: \" + fname);\n      }\n      adminFile = confPath + \"/\" + fname;\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if (!zkClient.exists(adminFile, true)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Can not find: \"\n          + adminFile);\n    }\n    \n    // Show a directory listing\n    List<String> children = zkClient.getChildren(adminFile, null, true);\n    if (children.size() > 0) {\n      \n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for (String f : children) {\n        if (hiddenFiles.contains(f.toUpperCase(Locale.ENGLISH))) {\n          continue; // don't show 'hidden' files\n        }\n        if (f.startsWith(\".\")) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add(f, fileInfo);\n        List<String> fchildren = zkClient.getChildren(adminFile, null, true);\n        if (fchildren.size() > 0) {\n          fileInfo.add(\"directory\", true);\n        } else {\n          // TODO? content type\n          fileInfo.add(\"size\", f.length());\n        }\n        // TODO: ?\n        // fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add(\"files\", files);\n    } else {\n      // Include the file contents\n      // The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n      params.set(CommonParams.WT, \"raw\");\n      req.setParams(params);\n      \n      ContentStreamBase content = new ContentStreamBase.StringStream(\n          new String(zkClient.getData(adminFile, null, null, true), \"UTF-8\"));\n      content.setContentType(req.getParams().get(USE_CONTENT_TYPE));\n      \n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromZooKeeper(SolrQueryRequest,SolrQueryResponse,CoreContainer).mjava","pathOld":"/dev/null","sourceNew":"  private void showFromZooKeeper(SolrQueryRequest req, SolrQueryResponse rsp,\n      CoreContainer coreContainer) throws KeeperException,\n      InterruptedException, UnsupportedEncodingException {\n    String adminFile = null;\n    SolrCore core = req.getCore();\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n    final ZkSolrResourceLoader loader = (ZkSolrResourceLoader) core\n        .getResourceLoader();\n    String confPath = loader.getCollectionZkPath();\n    \n    String fname = req.getParams().get(\"file\", null);\n    if (fname == null) {\n      adminFile = confPath;\n    } else {\n      fname = fname.replace('\\\\', '/'); // normalize slashes\n      if (hiddenFiles.contains(fname.toUpperCase(Locale.ENGLISH))) {\n        throw new SolrException(ErrorCode.FORBIDDEN, \"Can not access: \" + fname);\n      }\n      if (fname.indexOf(\"..\") >= 0) {\n        throw new SolrException(ErrorCode.FORBIDDEN, \"Invalid path: \" + fname);\n      }\n      adminFile = confPath + \"/\" + fname;\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if (!zkClient.exists(adminFile, true)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Can not find: \"\n          + adminFile);\n    }\n    \n    // Show a directory listing\n    List<String> children = zkClient.getChildren(adminFile, null, true);\n    if (children.size() > 0) {\n      \n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for (String f : children) {\n        if (hiddenFiles.contains(f.toUpperCase(Locale.ENGLISH))) {\n          continue; // don't show 'hidden' files\n        }\n        if (f.startsWith(\".\")) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add(f, fileInfo);\n        List<String> fchildren = zkClient.getChildren(adminFile, null, true);\n        if (fchildren.size() > 0) {\n          fileInfo.add(\"directory\", true);\n        } else {\n          // TODO? content type\n          fileInfo.add(\"size\", f.length());\n        }\n        // TODO: ?\n        // fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add(\"files\", files);\n    } else {\n      // Include the file contents\n      // The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n      params.set(CommonParams.WT, \"raw\");\n      req.setParams(params);\n      \n      ContentStreamBase content = new ContentStreamBase.StringStream(\n          new String(zkClient.getData(adminFile, null, null, true), \"UTF-8\"));\n      content.setContentType(req.getParams().get(USE_CONTENT_TYPE));\n      \n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279c7cd47f17e1e8b674a3741ff5f040bc680be","date":1341675760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromZooKeeper(SolrQueryRequest,SolrQueryResponse,CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromZooKeeper(SolrQueryRequest,SolrQueryResponse,CoreContainer).mjava","sourceNew":"  private void showFromZooKeeper(SolrQueryRequest req, SolrQueryResponse rsp,\n      CoreContainer coreContainer) throws KeeperException,\n      InterruptedException, UnsupportedEncodingException {\n    String adminFile = null;\n    SolrCore core = req.getCore();\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n    final ZkSolrResourceLoader loader = (ZkSolrResourceLoader) core\n        .getResourceLoader();\n    String confPath = loader.getCollectionZkPath();\n    \n    String fname = req.getParams().get(\"file\", null);\n    if (fname == null) {\n      adminFile = confPath;\n    } else {\n      fname = fname.replace('\\\\', '/'); // normalize slashes\n      if (hiddenFiles.contains(fname.toUpperCase(Locale.ROOT))) {\n        throw new SolrException(ErrorCode.FORBIDDEN, \"Can not access: \" + fname);\n      }\n      if (fname.indexOf(\"..\") >= 0) {\n        throw new SolrException(ErrorCode.FORBIDDEN, \"Invalid path: \" + fname);\n      }\n      adminFile = confPath + \"/\" + fname;\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if (!zkClient.exists(adminFile, true)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Can not find: \"\n          + adminFile);\n    }\n    \n    // Show a directory listing\n    List<String> children = zkClient.getChildren(adminFile, null, true);\n    if (children.size() > 0) {\n      \n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for (String f : children) {\n        if (hiddenFiles.contains(f.toUpperCase(Locale.ROOT))) {\n          continue; // don't show 'hidden' files\n        }\n        if (f.startsWith(\".\")) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add(f, fileInfo);\n        List<String> fchildren = zkClient.getChildren(adminFile, null, true);\n        if (fchildren.size() > 0) {\n          fileInfo.add(\"directory\", true);\n        } else {\n          // TODO? content type\n          fileInfo.add(\"size\", f.length());\n        }\n        // TODO: ?\n        // fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add(\"files\", files);\n    } else {\n      // Include the file contents\n      // The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n      params.set(CommonParams.WT, \"raw\");\n      req.setParams(params);\n      \n      ContentStreamBase content = new ContentStreamBase.StringStream(\n          new String(zkClient.getData(adminFile, null, null, true), \"UTF-8\"));\n      content.setContentType(req.getParams().get(USE_CONTENT_TYPE));\n      \n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  private void showFromZooKeeper(SolrQueryRequest req, SolrQueryResponse rsp,\n      CoreContainer coreContainer) throws KeeperException,\n      InterruptedException, UnsupportedEncodingException {\n    String adminFile = null;\n    SolrCore core = req.getCore();\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n    final ZkSolrResourceLoader loader = (ZkSolrResourceLoader) core\n        .getResourceLoader();\n    String confPath = loader.getCollectionZkPath();\n    \n    String fname = req.getParams().get(\"file\", null);\n    if (fname == null) {\n      adminFile = confPath;\n    } else {\n      fname = fname.replace('\\\\', '/'); // normalize slashes\n      if (hiddenFiles.contains(fname.toUpperCase(Locale.ENGLISH))) {\n        throw new SolrException(ErrorCode.FORBIDDEN, \"Can not access: \" + fname);\n      }\n      if (fname.indexOf(\"..\") >= 0) {\n        throw new SolrException(ErrorCode.FORBIDDEN, \"Invalid path: \" + fname);\n      }\n      adminFile = confPath + \"/\" + fname;\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if (!zkClient.exists(adminFile, true)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Can not find: \"\n          + adminFile);\n    }\n    \n    // Show a directory listing\n    List<String> children = zkClient.getChildren(adminFile, null, true);\n    if (children.size() > 0) {\n      \n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for (String f : children) {\n        if (hiddenFiles.contains(f.toUpperCase(Locale.ENGLISH))) {\n          continue; // don't show 'hidden' files\n        }\n        if (f.startsWith(\".\")) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add(f, fileInfo);\n        List<String> fchildren = zkClient.getChildren(adminFile, null, true);\n        if (fchildren.size() > 0) {\n          fileInfo.add(\"directory\", true);\n        } else {\n          // TODO? content type\n          fileInfo.add(\"size\", f.length());\n        }\n        // TODO: ?\n        // fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add(\"files\", files);\n    } else {\n      // Include the file contents\n      // The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n      params.set(CommonParams.WT, \"raw\");\n      req.setParams(params);\n      \n      ContentStreamBase content = new ContentStreamBase.StringStream(\n          new String(zkClient.getData(adminFile, null, null, true), \"UTF-8\"));\n      content.setContentType(req.getParams().get(USE_CONTENT_TYPE));\n      \n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromZooKeeper(SolrQueryRequest,SolrQueryResponse,CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromZooKeeper(SolrQueryRequest,SolrQueryResponse,CoreContainer).mjava","sourceNew":"  private void showFromZooKeeper(SolrQueryRequest req, SolrQueryResponse rsp,\n      CoreContainer coreContainer) throws KeeperException,\n      InterruptedException, UnsupportedEncodingException {\n    String adminFile = null;\n    SolrCore core = req.getCore();\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n    final ZkSolrResourceLoader loader = (ZkSolrResourceLoader) core\n        .getResourceLoader();\n    String confPath = loader.getCollectionZkPath();\n    \n    String fname = req.getParams().get(\"file\", null);\n    if (fname == null) {\n      adminFile = confPath;\n    } else {\n      fname = fname.replace('\\\\', '/'); // normalize slashes\n      if (hiddenFiles.contains(fname.toUpperCase(Locale.ROOT))) {\n        throw new SolrException(ErrorCode.FORBIDDEN, \"Can not access: \" + fname);\n      }\n      if (fname.indexOf(\"..\") >= 0) {\n        throw new SolrException(ErrorCode.FORBIDDEN, \"Invalid path: \" + fname);\n      }\n      adminFile = confPath + \"/\" + fname;\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if (!zkClient.exists(adminFile, true)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Can not find: \"\n          + adminFile);\n    }\n    \n    // Show a directory listing\n    List<String> children = zkClient.getChildren(adminFile, null, true);\n    if (children.size() > 0) {\n      \n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for (String f : children) {\n        if (hiddenFiles.contains(f.toUpperCase(Locale.ROOT))) {\n          continue; // don't show 'hidden' files\n        }\n        if (f.startsWith(\".\")) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add(f, fileInfo);\n        List<String> fchildren = zkClient.getChildren(adminFile, null, true);\n        if (fchildren.size() > 0) {\n          fileInfo.add(\"directory\", true);\n        } else {\n          // TODO? content type\n          fileInfo.add(\"size\", f.length());\n        }\n        // TODO: ?\n        // fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add(\"files\", files);\n    } else {\n      // Include the file contents\n      // The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n      params.set(CommonParams.WT, \"raw\");\n      req.setParams(params);\n      \n      ContentStreamBase content = new ContentStreamBase.StringStream(\n          new String(zkClient.getData(adminFile, null, null, true), \"UTF-8\"));\n      content.setContentType(req.getParams().get(USE_CONTENT_TYPE));\n      \n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  private void showFromZooKeeper(SolrQueryRequest req, SolrQueryResponse rsp,\n      CoreContainer coreContainer) throws KeeperException,\n      InterruptedException, UnsupportedEncodingException {\n    String adminFile = null;\n    SolrCore core = req.getCore();\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n    final ZkSolrResourceLoader loader = (ZkSolrResourceLoader) core\n        .getResourceLoader();\n    String confPath = loader.getCollectionZkPath();\n    \n    String fname = req.getParams().get(\"file\", null);\n    if (fname == null) {\n      adminFile = confPath;\n    } else {\n      fname = fname.replace('\\\\', '/'); // normalize slashes\n      if (hiddenFiles.contains(fname.toUpperCase(Locale.ENGLISH))) {\n        throw new SolrException(ErrorCode.FORBIDDEN, \"Can not access: \" + fname);\n      }\n      if (fname.indexOf(\"..\") >= 0) {\n        throw new SolrException(ErrorCode.FORBIDDEN, \"Invalid path: \" + fname);\n      }\n      adminFile = confPath + \"/\" + fname;\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if (!zkClient.exists(adminFile, true)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Can not find: \"\n          + adminFile);\n    }\n    \n    // Show a directory listing\n    List<String> children = zkClient.getChildren(adminFile, null, true);\n    if (children.size() > 0) {\n      \n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for (String f : children) {\n        if (hiddenFiles.contains(f.toUpperCase(Locale.ENGLISH))) {\n          continue; // don't show 'hidden' files\n        }\n        if (f.startsWith(\".\")) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add(f, fileInfo);\n        List<String> fchildren = zkClient.getChildren(adminFile, null, true);\n        if (fchildren.size() > 0) {\n          fileInfo.add(\"directory\", true);\n        } else {\n          // TODO? content type\n          fileInfo.add(\"size\", f.length());\n        }\n        // TODO: ?\n        // fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add(\"files\", files);\n    } else {\n      // Include the file contents\n      // The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n      params.set(CommonParams.WT, \"raw\");\n      req.setParams(params);\n      \n      ContentStreamBase content = new ContentStreamBase.StringStream(\n          new String(zkClient.getData(adminFile, null, null, true), \"UTF-8\"));\n      content.setContentType(req.getParams().get(USE_CONTENT_TYPE));\n      \n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromZooKeeper(SolrQueryRequest,SolrQueryResponse,CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromZooKeeper(SolrQueryRequest,SolrQueryResponse,CoreContainer).mjava","sourceNew":"  private void showFromZooKeeper(SolrQueryRequest req, SolrQueryResponse rsp,\n      CoreContainer coreContainer) throws KeeperException,\n      InterruptedException, UnsupportedEncodingException {\n    String adminFile = null;\n    SolrCore core = req.getCore();\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n    final ZkSolrResourceLoader loader = (ZkSolrResourceLoader) core\n        .getResourceLoader();\n    String confPath = loader.getCollectionZkPath();\n    \n    String fname = req.getParams().get(\"file\", null);\n    if (fname == null) {\n      adminFile = confPath;\n    } else {\n      fname = fname.replace('\\\\', '/'); // normalize slashes\n      if (hiddenFiles.contains(fname.toUpperCase(Locale.ROOT))) {\n        throw new SolrException(ErrorCode.FORBIDDEN, \"Can not access: \" + fname);\n      }\n      if (fname.indexOf(\"..\") >= 0) {\n        throw new SolrException(ErrorCode.FORBIDDEN, \"Invalid path: \" + fname);\n      }\n      adminFile = confPath + \"/\" + fname;\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if (!zkClient.exists(adminFile, true)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Can not find: \"\n          + adminFile);\n    }\n    \n    // Show a directory listing\n    List<String> children = zkClient.getChildren(adminFile, null, true);\n    if (children.size() > 0) {\n      \n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for (String f : children) {\n        if (hiddenFiles.contains(f.toUpperCase(Locale.ROOT))) {\n          continue; // don't show 'hidden' files\n        }\n        if (f.startsWith(\".\")) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add(f, fileInfo);\n        List<String> fchildren = zkClient.getChildren(adminFile, null, true);\n        if (fchildren.size() > 0) {\n          fileInfo.add(\"directory\", true);\n        } else {\n          // TODO? content type\n          fileInfo.add(\"size\", f.length());\n        }\n        // TODO: ?\n        // fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add(\"files\", files);\n    } else {\n      // Include the file contents\n      // The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n      params.set(CommonParams.WT, \"raw\");\n      req.setParams(params);\n      \n      ContentStreamBase content = new ContentStreamBase.StringStream(\n          new String(zkClient.getData(adminFile, null, null, true), \"UTF-8\"));\n      content.setContentType(req.getParams().get(USE_CONTENT_TYPE));\n      \n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  private void showFromZooKeeper(SolrQueryRequest req, SolrQueryResponse rsp,\n      CoreContainer coreContainer) throws KeeperException,\n      InterruptedException, UnsupportedEncodingException {\n    String adminFile = null;\n    SolrCore core = req.getCore();\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n    final ZkSolrResourceLoader loader = (ZkSolrResourceLoader) core\n        .getResourceLoader();\n    String confPath = loader.getCollectionZkPath();\n    \n    String fname = req.getParams().get(\"file\", null);\n    if (fname == null) {\n      adminFile = confPath;\n    } else {\n      fname = fname.replace('\\\\', '/'); // normalize slashes\n      if (hiddenFiles.contains(fname.toUpperCase(Locale.ENGLISH))) {\n        throw new SolrException(ErrorCode.FORBIDDEN, \"Can not access: \" + fname);\n      }\n      if (fname.indexOf(\"..\") >= 0) {\n        throw new SolrException(ErrorCode.FORBIDDEN, \"Invalid path: \" + fname);\n      }\n      adminFile = confPath + \"/\" + fname;\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if (!zkClient.exists(adminFile, true)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Can not find: \"\n          + adminFile);\n    }\n    \n    // Show a directory listing\n    List<String> children = zkClient.getChildren(adminFile, null, true);\n    if (children.size() > 0) {\n      \n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for (String f : children) {\n        if (hiddenFiles.contains(f.toUpperCase(Locale.ENGLISH))) {\n          continue; // don't show 'hidden' files\n        }\n        if (f.startsWith(\".\")) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add(f, fileInfo);\n        List<String> fchildren = zkClient.getChildren(adminFile, null, true);\n        if (fchildren.size() > 0) {\n          fileInfo.add(\"directory\", true);\n        } else {\n          // TODO? content type\n          fileInfo.add(\"size\", f.length());\n        }\n        // TODO: ?\n        // fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add(\"files\", files);\n    } else {\n      // Include the file contents\n      // The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n      params.set(CommonParams.WT, \"raw\");\n      req.setParams(params);\n      \n      ContentStreamBase content = new ContentStreamBase.StringStream(\n          new String(zkClient.getData(adminFile, null, null, true), \"UTF-8\"));\n      content.setContentType(req.getParams().get(USE_CONTENT_TYPE));\n      \n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromZooKeeper(SolrQueryRequest,SolrQueryResponse,CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromZooKeeper(SolrQueryRequest,SolrQueryResponse,CoreContainer).mjava","sourceNew":"  private void showFromZooKeeper(SolrQueryRequest req, SolrQueryResponse rsp,\n      CoreContainer coreContainer) throws KeeperException,\n      InterruptedException, UnsupportedEncodingException {\n    String adminFile = null;\n    SolrCore core = req.getCore();\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n    final ZkSolrResourceLoader loader = (ZkSolrResourceLoader) core\n        .getResourceLoader();\n    String confPath = loader.getCollectionZkPath();\n    \n    String fname = req.getParams().get(\"file\", null);\n    if (fname == null) {\n      adminFile = confPath;\n    } else {\n      fname = fname.replace('\\\\', '/'); // normalize slashes\n      if (hiddenFiles.contains(fname.toUpperCase(Locale.ROOT))) {\n        throw new SolrException(ErrorCode.FORBIDDEN, \"Can not access: \" + fname);\n      }\n      if (fname.indexOf(\"..\") >= 0) {\n        throw new SolrException(ErrorCode.FORBIDDEN, \"Invalid path: \" + fname);\n      }\n      adminFile = confPath + \"/\" + fname;\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if (!zkClient.exists(adminFile, true)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Can not find: \"\n          + adminFile);\n    }\n    \n    // Show a directory listing\n    List<String> children = zkClient.getChildren(adminFile, null, true);\n    if (children.size() > 0) {\n      \n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for (String f : children) {\n        if (hiddenFiles.contains(f.toUpperCase(Locale.ROOT))) {\n          continue; // don't show 'hidden' files\n        }\n        if (f.startsWith(\".\")) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add(f, fileInfo);\n        List<String> fchildren = zkClient.getChildren(adminFile, null, true);\n        if (fchildren.size() > 0) {\n          fileInfo.add(\"directory\", true);\n        } else {\n          // TODO? content type\n          fileInfo.add(\"size\", f.length());\n        }\n        // TODO: ?\n        // fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add(\"files\", files);\n    } else {\n      // Include the file contents\n      // The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n      params.set(CommonParams.WT, \"raw\");\n      req.setParams(params);\n      \n      ContentStreamBase content = new ContentStreamBase.StringStream(\n          new String(zkClient.getData(adminFile, null, null, true), \"UTF-8\"));\n      content.setContentType(req.getParams().get(USE_CONTENT_TYPE));\n      \n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  private void showFromZooKeeper(SolrQueryRequest req, SolrQueryResponse rsp,\n      CoreContainer coreContainer) throws KeeperException,\n      InterruptedException, UnsupportedEncodingException {\n    String adminFile = null;\n    SolrCore core = req.getCore();\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n    final ZkSolrResourceLoader loader = (ZkSolrResourceLoader) core\n        .getResourceLoader();\n    String confPath = loader.getCollectionZkPath();\n    \n    String fname = req.getParams().get(\"file\", null);\n    if (fname == null) {\n      adminFile = confPath;\n    } else {\n      fname = fname.replace('\\\\', '/'); // normalize slashes\n      if (hiddenFiles.contains(fname.toUpperCase(Locale.ENGLISH))) {\n        throw new SolrException(ErrorCode.FORBIDDEN, \"Can not access: \" + fname);\n      }\n      if (fname.indexOf(\"..\") >= 0) {\n        throw new SolrException(ErrorCode.FORBIDDEN, \"Invalid path: \" + fname);\n      }\n      adminFile = confPath + \"/\" + fname;\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if (!zkClient.exists(adminFile, true)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Can not find: \"\n          + adminFile);\n    }\n    \n    // Show a directory listing\n    List<String> children = zkClient.getChildren(adminFile, null, true);\n    if (children.size() > 0) {\n      \n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for (String f : children) {\n        if (hiddenFiles.contains(f.toUpperCase(Locale.ENGLISH))) {\n          continue; // don't show 'hidden' files\n        }\n        if (f.startsWith(\".\")) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add(f, fileInfo);\n        List<String> fchildren = zkClient.getChildren(adminFile, null, true);\n        if (fchildren.size() > 0) {\n          fileInfo.add(\"directory\", true);\n        } else {\n          // TODO? content type\n          fileInfo.add(\"size\", f.length());\n        }\n        // TODO: ?\n        // fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add(\"files\", files);\n    } else {\n      // Include the file contents\n      // The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n      params.set(CommonParams.WT, \"raw\");\n      req.setParams(params);\n      \n      ContentStreamBase content = new ContentStreamBase.StringStream(\n          new String(zkClient.getData(adminFile, null, null, true), \"UTF-8\"));\n      content.setContentType(req.getParams().get(USE_CONTENT_TYPE));\n      \n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85c5f7950a9f47dafe948ee5fce0bb1e0bcdd148","date":1343514038,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromZooKeeper(SolrQueryRequest,SolrQueryResponse,CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromZooKeeper(SolrQueryRequest,SolrQueryResponse,CoreContainer).mjava","sourceNew":"  private void showFromZooKeeper(SolrQueryRequest req, SolrQueryResponse rsp,\n      CoreContainer coreContainer) throws KeeperException,\n      InterruptedException, UnsupportedEncodingException {\n    String adminFile = null;\n    SolrCore core = req.getCore();\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n    final ZkSolrResourceLoader loader = (ZkSolrResourceLoader) core\n        .getResourceLoader();\n    String confPath = loader.getCollectionZkPath();\n    \n    String fname = req.getParams().get(\"file\", null);\n    if (fname == null) {\n      adminFile = confPath;\n    } else {\n      fname = fname.replace('\\\\', '/'); // normalize slashes\n      if (hiddenFiles.contains(fname.toUpperCase(Locale.ROOT))) {\n        throw new SolrException(ErrorCode.FORBIDDEN, \"Can not access: \" + fname);\n      }\n      if (fname.indexOf(\"..\") >= 0) {\n        throw new SolrException(ErrorCode.FORBIDDEN, \"Invalid path: \" + fname);\n      }\n      if (fname.startsWith(\"/\")) { // Only files relative to conf are valid\n        fname = fname.substring(1);\n      }\n      adminFile = confPath + \"/\" + fname;\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if (!zkClient.exists(adminFile, true)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Can not find: \"\n          + adminFile);\n    }\n    \n    // Show a directory listing\n    List<String> children = zkClient.getChildren(adminFile, null, true);\n    if (children.size() > 0) {\n      \n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for (String f : children) {\n        if (hiddenFiles.contains(f.toUpperCase(Locale.ROOT))) {\n          continue; // don't show 'hidden' files\n        }\n        if (f.startsWith(\".\")) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add(f, fileInfo);\n        List<String> fchildren = zkClient.getChildren(adminFile, null, true);\n        if (fchildren.size() > 0) {\n          fileInfo.add(\"directory\", true);\n        } else {\n          // TODO? content type\n          fileInfo.add(\"size\", f.length());\n        }\n        // TODO: ?\n        // fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add(\"files\", files);\n    } else {\n      // Include the file contents\n      // The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n      params.set(CommonParams.WT, \"raw\");\n      req.setParams(params);\n      \n      ContentStreamBase content = new ContentStreamBase.StringStream(\n          new String(zkClient.getData(adminFile, null, null, true), \"UTF-8\"));\n      content.setContentType(req.getParams().get(USE_CONTENT_TYPE));\n      \n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  private void showFromZooKeeper(SolrQueryRequest req, SolrQueryResponse rsp,\n      CoreContainer coreContainer) throws KeeperException,\n      InterruptedException, UnsupportedEncodingException {\n    String adminFile = null;\n    SolrCore core = req.getCore();\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n    final ZkSolrResourceLoader loader = (ZkSolrResourceLoader) core\n        .getResourceLoader();\n    String confPath = loader.getCollectionZkPath();\n    \n    String fname = req.getParams().get(\"file\", null);\n    if (fname == null) {\n      adminFile = confPath;\n    } else {\n      fname = fname.replace('\\\\', '/'); // normalize slashes\n      if (hiddenFiles.contains(fname.toUpperCase(Locale.ROOT))) {\n        throw new SolrException(ErrorCode.FORBIDDEN, \"Can not access: \" + fname);\n      }\n      if (fname.indexOf(\"..\") >= 0) {\n        throw new SolrException(ErrorCode.FORBIDDEN, \"Invalid path: \" + fname);\n      }\n      adminFile = confPath + \"/\" + fname;\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if (!zkClient.exists(adminFile, true)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Can not find: \"\n          + adminFile);\n    }\n    \n    // Show a directory listing\n    List<String> children = zkClient.getChildren(adminFile, null, true);\n    if (children.size() > 0) {\n      \n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for (String f : children) {\n        if (hiddenFiles.contains(f.toUpperCase(Locale.ROOT))) {\n          continue; // don't show 'hidden' files\n        }\n        if (f.startsWith(\".\")) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add(f, fileInfo);\n        List<String> fchildren = zkClient.getChildren(adminFile, null, true);\n        if (fchildren.size() > 0) {\n          fileInfo.add(\"directory\", true);\n        } else {\n          // TODO? content type\n          fileInfo.add(\"size\", f.length());\n        }\n        // TODO: ?\n        // fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add(\"files\", files);\n    } else {\n      // Include the file contents\n      // The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n      params.set(CommonParams.WT, \"raw\");\n      req.setParams(params);\n      \n      ContentStreamBase content = new ContentStreamBase.StringStream(\n          new String(zkClient.getData(adminFile, null, null, true), \"UTF-8\"));\n      content.setContentType(req.getParams().get(USE_CONTENT_TYPE));\n      \n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromZooKeeper(SolrQueryRequest,SolrQueryResponse,CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromZooKeeper(SolrQueryRequest,SolrQueryResponse,CoreContainer).mjava","sourceNew":"  private void showFromZooKeeper(SolrQueryRequest req, SolrQueryResponse rsp,\n      CoreContainer coreContainer) throws KeeperException,\n      InterruptedException, UnsupportedEncodingException {\n    String adminFile = null;\n    SolrCore core = req.getCore();\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n    final ZkSolrResourceLoader loader = (ZkSolrResourceLoader) core\n        .getResourceLoader();\n    String confPath = loader.getCollectionZkPath();\n    \n    String fname = req.getParams().get(\"file\", null);\n    if (fname == null) {\n      adminFile = confPath;\n    } else {\n      fname = fname.replace('\\\\', '/'); // normalize slashes\n      if (hiddenFiles.contains(fname.toUpperCase(Locale.ROOT))) {\n        throw new SolrException(ErrorCode.FORBIDDEN, \"Can not access: \" + fname);\n      }\n      if (fname.indexOf(\"..\") >= 0) {\n        throw new SolrException(ErrorCode.FORBIDDEN, \"Invalid path: \" + fname);\n      }\n      if (fname.startsWith(\"/\")) { // Only files relative to conf are valid\n        fname = fname.substring(1);\n      }\n      adminFile = confPath + \"/\" + fname;\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if (!zkClient.exists(adminFile, true)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Can not find: \"\n          + adminFile);\n    }\n    \n    // Show a directory listing\n    List<String> children = zkClient.getChildren(adminFile, null, true);\n    if (children.size() > 0) {\n      \n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for (String f : children) {\n        if (hiddenFiles.contains(f.toUpperCase(Locale.ROOT))) {\n          continue; // don't show 'hidden' files\n        }\n        if (f.startsWith(\".\")) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add(f, fileInfo);\n        List<String> fchildren = zkClient.getChildren(adminFile, null, true);\n        if (fchildren.size() > 0) {\n          fileInfo.add(\"directory\", true);\n        } else {\n          // TODO? content type\n          fileInfo.add(\"size\", f.length());\n        }\n        // TODO: ?\n        // fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add(\"files\", files);\n    } else {\n      // Include the file contents\n      // The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n      params.set(CommonParams.WT, \"raw\");\n      req.setParams(params);\n      \n      ContentStreamBase content = new ContentStreamBase.StringStream(\n          new String(zkClient.getData(adminFile, null, null, true), \"UTF-8\"));\n      content.setContentType(req.getParams().get(USE_CONTENT_TYPE));\n      \n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  private void showFromZooKeeper(SolrQueryRequest req, SolrQueryResponse rsp,\n      CoreContainer coreContainer) throws KeeperException,\n      InterruptedException, UnsupportedEncodingException {\n    String adminFile = null;\n    SolrCore core = req.getCore();\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n    final ZkSolrResourceLoader loader = (ZkSolrResourceLoader) core\n        .getResourceLoader();\n    String confPath = loader.getCollectionZkPath();\n    \n    String fname = req.getParams().get(\"file\", null);\n    if (fname == null) {\n      adminFile = confPath;\n    } else {\n      fname = fname.replace('\\\\', '/'); // normalize slashes\n      if (hiddenFiles.contains(fname.toUpperCase(Locale.ROOT))) {\n        throw new SolrException(ErrorCode.FORBIDDEN, \"Can not access: \" + fname);\n      }\n      if (fname.indexOf(\"..\") >= 0) {\n        throw new SolrException(ErrorCode.FORBIDDEN, \"Invalid path: \" + fname);\n      }\n      adminFile = confPath + \"/\" + fname;\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if (!zkClient.exists(adminFile, true)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Can not find: \"\n          + adminFile);\n    }\n    \n    // Show a directory listing\n    List<String> children = zkClient.getChildren(adminFile, null, true);\n    if (children.size() > 0) {\n      \n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for (String f : children) {\n        if (hiddenFiles.contains(f.toUpperCase(Locale.ROOT))) {\n          continue; // don't show 'hidden' files\n        }\n        if (f.startsWith(\".\")) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add(f, fileInfo);\n        List<String> fchildren = zkClient.getChildren(adminFile, null, true);\n        if (fchildren.size() > 0) {\n          fileInfo.add(\"directory\", true);\n        } else {\n          // TODO? content type\n          fileInfo.add(\"size\", f.length());\n        }\n        // TODO: ?\n        // fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add(\"files\", files);\n    } else {\n      // Include the file contents\n      // The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n      params.set(CommonParams.WT, \"raw\");\n      req.setParams(params);\n      \n      ContentStreamBase content = new ContentStreamBase.StringStream(\n          new String(zkClient.getData(adminFile, null, null, true), \"UTF-8\"));\n      content.setContentType(req.getParams().get(USE_CONTENT_TYPE));\n      \n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromZooKeeper(SolrQueryRequest,SolrQueryResponse,CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromZooKeeper(SolrQueryRequest,SolrQueryResponse,CoreContainer).mjava","sourceNew":"  private void showFromZooKeeper(SolrQueryRequest req, SolrQueryResponse rsp,\n      CoreContainer coreContainer) throws KeeperException,\n      InterruptedException, UnsupportedEncodingException {\n    String adminFile = null;\n    SolrCore core = req.getCore();\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n    final ZkSolrResourceLoader loader = (ZkSolrResourceLoader) core\n        .getResourceLoader();\n    String confPath = loader.getCollectionZkPath();\n    \n    String fname = req.getParams().get(\"file\", null);\n    if (fname == null) {\n      adminFile = confPath;\n    } else {\n      fname = fname.replace('\\\\', '/'); // normalize slashes\n      if (hiddenFiles.contains(fname.toUpperCase(Locale.ROOT))) {\n        throw new SolrException(ErrorCode.FORBIDDEN, \"Can not access: \" + fname);\n      }\n      if (fname.indexOf(\"..\") >= 0) {\n        throw new SolrException(ErrorCode.FORBIDDEN, \"Invalid path: \" + fname);\n      }\n      if (fname.startsWith(\"/\")) { // Only files relative to conf are valid\n        fname = fname.substring(1);\n      }\n      adminFile = confPath + \"/\" + fname;\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if (!zkClient.exists(adminFile, true)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Can not find: \"\n          + adminFile);\n    }\n    \n    // Show a directory listing\n    List<String> children = zkClient.getChildren(adminFile, null, true);\n    if (children.size() > 0) {\n      \n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for (String f : children) {\n        if (hiddenFiles.contains(f.toUpperCase(Locale.ROOT))) {\n          continue; // don't show 'hidden' files\n        }\n        if (f.startsWith(\".\")) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add(f, fileInfo);\n        List<String> fchildren = zkClient.getChildren(adminFile, null, true);\n        if (fchildren.size() > 0) {\n          fileInfo.add(\"directory\", true);\n        } else {\n          // TODO? content type\n          fileInfo.add(\"size\", f.length());\n        }\n        // TODO: ?\n        // fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add(\"files\", files);\n    } else {\n      // Include the file contents\n      // The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n      params.set(CommonParams.WT, \"raw\");\n      req.setParams(params);\n      \n      ContentStreamBase content = new ContentStreamBase.StringStream(\n          new String(zkClient.getData(adminFile, null, null, true), \"UTF-8\"));\n      content.setContentType(req.getParams().get(USE_CONTENT_TYPE));\n      \n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  private void showFromZooKeeper(SolrQueryRequest req, SolrQueryResponse rsp,\n      CoreContainer coreContainer) throws KeeperException,\n      InterruptedException, UnsupportedEncodingException {\n    String adminFile = null;\n    SolrCore core = req.getCore();\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n    final ZkSolrResourceLoader loader = (ZkSolrResourceLoader) core\n        .getResourceLoader();\n    String confPath = loader.getCollectionZkPath();\n    \n    String fname = req.getParams().get(\"file\", null);\n    if (fname == null) {\n      adminFile = confPath;\n    } else {\n      fname = fname.replace('\\\\', '/'); // normalize slashes\n      if (hiddenFiles.contains(fname.toUpperCase(Locale.ROOT))) {\n        throw new SolrException(ErrorCode.FORBIDDEN, \"Can not access: \" + fname);\n      }\n      if (fname.indexOf(\"..\") >= 0) {\n        throw new SolrException(ErrorCode.FORBIDDEN, \"Invalid path: \" + fname);\n      }\n      adminFile = confPath + \"/\" + fname;\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if (!zkClient.exists(adminFile, true)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Can not find: \"\n          + adminFile);\n    }\n    \n    // Show a directory listing\n    List<String> children = zkClient.getChildren(adminFile, null, true);\n    if (children.size() > 0) {\n      \n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for (String f : children) {\n        if (hiddenFiles.contains(f.toUpperCase(Locale.ROOT))) {\n          continue; // don't show 'hidden' files\n        }\n        if (f.startsWith(\".\")) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add(f, fileInfo);\n        List<String> fchildren = zkClient.getChildren(adminFile, null, true);\n        if (fchildren.size() > 0) {\n          fileInfo.add(\"directory\", true);\n        } else {\n          // TODO? content type\n          fileInfo.add(\"size\", f.length());\n        }\n        // TODO: ?\n        // fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add(\"files\", files);\n    } else {\n      // Include the file contents\n      // The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n      params.set(CommonParams.WT, \"raw\");\n      req.setParams(params);\n      \n      ContentStreamBase content = new ContentStreamBase.StringStream(\n          new String(zkClient.getData(adminFile, null, null, true), \"UTF-8\"));\n      content.setContentType(req.getParams().get(USE_CONTENT_TYPE));\n      \n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe2a178a9ebfcc61e832755cd47b30712b308e91","date":1352137170,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromZooKeeper(SolrQueryRequest,SolrQueryResponse,CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromZooKeeper(SolrQueryRequest,SolrQueryResponse,CoreContainer).mjava","sourceNew":"  private void showFromZooKeeper(SolrQueryRequest req, SolrQueryResponse rsp,\n      CoreContainer coreContainer) throws KeeperException,\n      InterruptedException, UnsupportedEncodingException {\n    String adminFile = null;\n    SolrCore core = req.getCore();\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n    final ZkSolrResourceLoader loader = (ZkSolrResourceLoader) core\n        .getResourceLoader();\n    String confPath = loader.getCollectionZkPath();\n    \n    String fname = req.getParams().get(\"file\", null);\n    if (fname == null) {\n      adminFile = confPath;\n    } else {\n      fname = fname.replace('\\\\', '/'); // normalize slashes\n      if (hiddenFiles.contains(fname.toUpperCase(Locale.ROOT))) {\n        rsp.setException(new SolrException(ErrorCode.FORBIDDEN, \"Can not access: \" + fname));\n        return;\n      }\n      if (fname.indexOf(\"..\") >= 0) {\n        rsp.setException(new SolrException(ErrorCode.FORBIDDEN, \"Invalid path: \" + fname));\n        return;\n      }\n      if (fname.startsWith(\"/\")) { // Only files relative to conf are valid\n        fname = fname.substring(1);\n      }\n      adminFile = confPath + \"/\" + fname;\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if (!zkClient.exists(adminFile, true)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Can not find: \"\n          + adminFile);\n    }\n    \n    // Show a directory listing\n    List<String> children = zkClient.getChildren(adminFile, null, true);\n    if (children.size() > 0) {\n      \n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for (String f : children) {\n        if (hiddenFiles.contains(f.toUpperCase(Locale.ROOT))) {\n          continue; // don't show 'hidden' files\n        }\n        if (f.startsWith(\".\")) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add(f, fileInfo);\n        List<String> fchildren = zkClient.getChildren(adminFile, null, true);\n        if (fchildren.size() > 0) {\n          fileInfo.add(\"directory\", true);\n        } else {\n          // TODO? content type\n          fileInfo.add(\"size\", f.length());\n        }\n        // TODO: ?\n        // fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add(\"files\", files);\n    } else {\n      // Include the file contents\n      // The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n      params.set(CommonParams.WT, \"raw\");\n      req.setParams(params);\n      \n      ContentStreamBase content = new ContentStreamBase.StringStream(\n          new String(zkClient.getData(adminFile, null, null, true), \"UTF-8\"));\n      content.setContentType(req.getParams().get(USE_CONTENT_TYPE));\n      \n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  private void showFromZooKeeper(SolrQueryRequest req, SolrQueryResponse rsp,\n      CoreContainer coreContainer) throws KeeperException,\n      InterruptedException, UnsupportedEncodingException {\n    String adminFile = null;\n    SolrCore core = req.getCore();\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n    final ZkSolrResourceLoader loader = (ZkSolrResourceLoader) core\n        .getResourceLoader();\n    String confPath = loader.getCollectionZkPath();\n    \n    String fname = req.getParams().get(\"file\", null);\n    if (fname == null) {\n      adminFile = confPath;\n    } else {\n      fname = fname.replace('\\\\', '/'); // normalize slashes\n      if (hiddenFiles.contains(fname.toUpperCase(Locale.ROOT))) {\n        throw new SolrException(ErrorCode.FORBIDDEN, \"Can not access: \" + fname);\n      }\n      if (fname.indexOf(\"..\") >= 0) {\n        throw new SolrException(ErrorCode.FORBIDDEN, \"Invalid path: \" + fname);\n      }\n      if (fname.startsWith(\"/\")) { // Only files relative to conf are valid\n        fname = fname.substring(1);\n      }\n      adminFile = confPath + \"/\" + fname;\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if (!zkClient.exists(adminFile, true)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Can not find: \"\n          + adminFile);\n    }\n    \n    // Show a directory listing\n    List<String> children = zkClient.getChildren(adminFile, null, true);\n    if (children.size() > 0) {\n      \n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for (String f : children) {\n        if (hiddenFiles.contains(f.toUpperCase(Locale.ROOT))) {\n          continue; // don't show 'hidden' files\n        }\n        if (f.startsWith(\".\")) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add(f, fileInfo);\n        List<String> fchildren = zkClient.getChildren(adminFile, null, true);\n        if (fchildren.size() > 0) {\n          fileInfo.add(\"directory\", true);\n        } else {\n          // TODO? content type\n          fileInfo.add(\"size\", f.length());\n        }\n        // TODO: ?\n        // fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add(\"files\", files);\n    } else {\n      // Include the file contents\n      // The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n      params.set(CommonParams.WT, \"raw\");\n      req.setParams(params);\n      \n      ContentStreamBase content = new ContentStreamBase.StringStream(\n          new String(zkClient.getData(adminFile, null, null, true), \"UTF-8\"));\n      content.setContentType(req.getParams().get(USE_CONTENT_TYPE));\n      \n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd45d359393ce293fc33bb4770a2fa8582298ee4","date":1356134855,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromZooKeeper(SolrQueryRequest,SolrQueryResponse,CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromZooKeeper(SolrQueryRequest,SolrQueryResponse,CoreContainer).mjava","sourceNew":"  private void showFromZooKeeper(SolrQueryRequest req, SolrQueryResponse rsp,\n      CoreContainer coreContainer) throws KeeperException,\n      InterruptedException, UnsupportedEncodingException {\n    String adminFile = null;\n    SolrCore core = req.getCore();\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n    final ZkSolrResourceLoader loader = (ZkSolrResourceLoader) core\n        .getResourceLoader();\n    String confPath = loader.getCollectionZkPath();\n    \n    String fname = req.getParams().get(\"file\", null);\n    if (fname == null) {\n      adminFile = confPath;\n    } else {\n      fname = fname.replace('\\\\', '/'); // normalize slashes\n      if (hiddenFiles.contains(fname.toUpperCase(Locale.ROOT))) {\n        rsp.setException(new SolrException(ErrorCode.FORBIDDEN, \"Can not access: \" + fname));\n        return;\n      }\n      if (fname.indexOf(\"..\") >= 0) {\n        rsp.setException(new SolrException(ErrorCode.FORBIDDEN, \"Invalid path: \" + fname));\n        return;\n      }\n      if (fname.startsWith(\"/\")) { // Only files relative to conf are valid\n        fname = fname.substring(1);\n      }\n      adminFile = confPath + \"/\" + fname;\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if (!zkClient.exists(adminFile, true)) {\n      rsp.setException(new SolrException(ErrorCode.NOT_FOUND, \"Can not find: \"\n                                         + adminFile));\n      return;\n    }\n    \n    // Show a directory listing\n    List<String> children = zkClient.getChildren(adminFile, null, true);\n    if (children.size() > 0) {\n      \n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for (String f : children) {\n        if (hiddenFiles.contains(f.toUpperCase(Locale.ROOT))) {\n          continue; // don't show 'hidden' files\n        }\n        if (f.startsWith(\".\")) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add(f, fileInfo);\n        List<String> fchildren = zkClient.getChildren(adminFile, null, true);\n        if (fchildren.size() > 0) {\n          fileInfo.add(\"directory\", true);\n        } else {\n          // TODO? content type\n          fileInfo.add(\"size\", f.length());\n        }\n        // TODO: ?\n        // fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add(\"files\", files);\n    } else {\n      // Include the file contents\n      // The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n      params.set(CommonParams.WT, \"raw\");\n      req.setParams(params);\n      \n      ContentStreamBase content = new ContentStreamBase.StringStream(\n          new String(zkClient.getData(adminFile, null, null, true), \"UTF-8\"));\n      content.setContentType(req.getParams().get(USE_CONTENT_TYPE));\n      \n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  private void showFromZooKeeper(SolrQueryRequest req, SolrQueryResponse rsp,\n      CoreContainer coreContainer) throws KeeperException,\n      InterruptedException, UnsupportedEncodingException {\n    String adminFile = null;\n    SolrCore core = req.getCore();\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n    final ZkSolrResourceLoader loader = (ZkSolrResourceLoader) core\n        .getResourceLoader();\n    String confPath = loader.getCollectionZkPath();\n    \n    String fname = req.getParams().get(\"file\", null);\n    if (fname == null) {\n      adminFile = confPath;\n    } else {\n      fname = fname.replace('\\\\', '/'); // normalize slashes\n      if (hiddenFiles.contains(fname.toUpperCase(Locale.ROOT))) {\n        rsp.setException(new SolrException(ErrorCode.FORBIDDEN, \"Can not access: \" + fname));\n        return;\n      }\n      if (fname.indexOf(\"..\") >= 0) {\n        rsp.setException(new SolrException(ErrorCode.FORBIDDEN, \"Invalid path: \" + fname));\n        return;\n      }\n      if (fname.startsWith(\"/\")) { // Only files relative to conf are valid\n        fname = fname.substring(1);\n      }\n      adminFile = confPath + \"/\" + fname;\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if (!zkClient.exists(adminFile, true)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Can not find: \"\n          + adminFile);\n    }\n    \n    // Show a directory listing\n    List<String> children = zkClient.getChildren(adminFile, null, true);\n    if (children.size() > 0) {\n      \n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for (String f : children) {\n        if (hiddenFiles.contains(f.toUpperCase(Locale.ROOT))) {\n          continue; // don't show 'hidden' files\n        }\n        if (f.startsWith(\".\")) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add(f, fileInfo);\n        List<String> fchildren = zkClient.getChildren(adminFile, null, true);\n        if (fchildren.size() > 0) {\n          fileInfo.add(\"directory\", true);\n        } else {\n          // TODO? content type\n          fileInfo.add(\"size\", f.length());\n        }\n        // TODO: ?\n        // fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add(\"files\", files);\n    } else {\n      // Include the file contents\n      // The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n      params.set(CommonParams.WT, \"raw\");\n      req.setParams(params);\n      \n      ContentStreamBase content = new ContentStreamBase.StringStream(\n          new String(zkClient.getData(adminFile, null, null, true), \"UTF-8\"));\n      content.setContentType(req.getParams().get(USE_CONTENT_TYPE));\n      \n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromZooKeeper(SolrQueryRequest,SolrQueryResponse,CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromZooKeeper(SolrQueryRequest,SolrQueryResponse,CoreContainer).mjava","sourceNew":"  private void showFromZooKeeper(SolrQueryRequest req, SolrQueryResponse rsp,\n      CoreContainer coreContainer) throws KeeperException,\n      InterruptedException, UnsupportedEncodingException {\n    String adminFile = null;\n    SolrCore core = req.getCore();\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n    final ZkSolrResourceLoader loader = (ZkSolrResourceLoader) core\n        .getResourceLoader();\n    String confPath = loader.getCollectionZkPath();\n    \n    String fname = req.getParams().get(\"file\", null);\n    if (fname == null) {\n      adminFile = confPath;\n    } else {\n      fname = fname.replace('\\\\', '/'); // normalize slashes\n      if (hiddenFiles.contains(fname.toUpperCase(Locale.ROOT))) {\n        rsp.setException(new SolrException(ErrorCode.FORBIDDEN, \"Can not access: \" + fname));\n        return;\n      }\n      if (fname.indexOf(\"..\") >= 0) {\n        rsp.setException(new SolrException(ErrorCode.FORBIDDEN, \"Invalid path: \" + fname));\n        return;\n      }\n      if (fname.startsWith(\"/\")) { // Only files relative to conf are valid\n        fname = fname.substring(1);\n      }\n      adminFile = confPath + \"/\" + fname;\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if (!zkClient.exists(adminFile, true)) {\n      rsp.setException(new SolrException(ErrorCode.NOT_FOUND, \"Can not find: \"\n                                         + adminFile));\n      return;\n    }\n    \n    // Show a directory listing\n    List<String> children = zkClient.getChildren(adminFile, null, true);\n    if (children.size() > 0) {\n      \n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for (String f : children) {\n        if (hiddenFiles.contains(f.toUpperCase(Locale.ROOT))) {\n          continue; // don't show 'hidden' files\n        }\n        if (f.startsWith(\".\")) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add(f, fileInfo);\n        List<String> fchildren = zkClient.getChildren(adminFile, null, true);\n        if (fchildren.size() > 0) {\n          fileInfo.add(\"directory\", true);\n        } else {\n          // TODO? content type\n          fileInfo.add(\"size\", f.length());\n        }\n        // TODO: ?\n        // fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add(\"files\", files);\n    } else {\n      // Include the file contents\n      // The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n      params.set(CommonParams.WT, \"raw\");\n      req.setParams(params);\n      \n      ContentStreamBase content = new ContentStreamBase.StringStream(\n          new String(zkClient.getData(adminFile, null, null, true), \"UTF-8\"));\n      content.setContentType(req.getParams().get(USE_CONTENT_TYPE));\n      \n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  private void showFromZooKeeper(SolrQueryRequest req, SolrQueryResponse rsp,\n      CoreContainer coreContainer) throws KeeperException,\n      InterruptedException, UnsupportedEncodingException {\n    String adminFile = null;\n    SolrCore core = req.getCore();\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n    final ZkSolrResourceLoader loader = (ZkSolrResourceLoader) core\n        .getResourceLoader();\n    String confPath = loader.getCollectionZkPath();\n    \n    String fname = req.getParams().get(\"file\", null);\n    if (fname == null) {\n      adminFile = confPath;\n    } else {\n      fname = fname.replace('\\\\', '/'); // normalize slashes\n      if (hiddenFiles.contains(fname.toUpperCase(Locale.ROOT))) {\n        rsp.setException(new SolrException(ErrorCode.FORBIDDEN, \"Can not access: \" + fname));\n        return;\n      }\n      if (fname.indexOf(\"..\") >= 0) {\n        rsp.setException(new SolrException(ErrorCode.FORBIDDEN, \"Invalid path: \" + fname));\n        return;\n      }\n      if (fname.startsWith(\"/\")) { // Only files relative to conf are valid\n        fname = fname.substring(1);\n      }\n      adminFile = confPath + \"/\" + fname;\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if (!zkClient.exists(adminFile, true)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Can not find: \"\n          + adminFile);\n    }\n    \n    // Show a directory listing\n    List<String> children = zkClient.getChildren(adminFile, null, true);\n    if (children.size() > 0) {\n      \n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for (String f : children) {\n        if (hiddenFiles.contains(f.toUpperCase(Locale.ROOT))) {\n          continue; // don't show 'hidden' files\n        }\n        if (f.startsWith(\".\")) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add(f, fileInfo);\n        List<String> fchildren = zkClient.getChildren(adminFile, null, true);\n        if (fchildren.size() > 0) {\n          fileInfo.add(\"directory\", true);\n        } else {\n          // TODO? content type\n          fileInfo.add(\"size\", f.length());\n        }\n        // TODO: ?\n        // fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add(\"files\", files);\n    } else {\n      // Include the file contents\n      // The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n      params.set(CommonParams.WT, \"raw\");\n      req.setParams(params);\n      \n      ContentStreamBase content = new ContentStreamBase.StringStream(\n          new String(zkClient.getData(adminFile, null, null, true), \"UTF-8\"));\n      content.setContentType(req.getParams().get(USE_CONTENT_TYPE));\n      \n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"096d8770ecc7af747320979ed1e4ff71d3237b8f","date":1368405025,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromZooKeeper(SolrQueryRequest,SolrQueryResponse,CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromZooKeeper(SolrQueryRequest,SolrQueryResponse,CoreContainer).mjava","sourceNew":"  private void showFromZooKeeper(SolrQueryRequest req, SolrQueryResponse rsp,\n      CoreContainer coreContainer) throws KeeperException,\n      InterruptedException, UnsupportedEncodingException {\n    String adminFile = null;\n    SolrCore core = req.getCore();\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n    final ZkSolrResourceLoader loader = (ZkSolrResourceLoader) core\n        .getResourceLoader();\n    String confPath = loader.getCollectionZkPath();\n    \n    String fname = req.getParams().get(\"file\", null);\n    if (fname == null) {\n      adminFile = confPath;\n    } else {\n      fname = fname.replace('\\\\', '/'); // normalize slashes\n      if (hiddenFiles.contains(fname.toUpperCase(Locale.ROOT))) {\n        rsp.setException(new SolrException(ErrorCode.FORBIDDEN, \"Can not access: \" + fname));\n        return;\n      }\n      if (fname.indexOf(\"..\") >= 0) {\n        rsp.setException(new SolrException(ErrorCode.FORBIDDEN, \"Invalid path: \" + fname));\n        return;\n      }\n      if (fname.startsWith(\"/\")) { // Only files relative to conf are valid\n        fname = fname.substring(1);\n      }\n      adminFile = confPath + \"/\" + fname;\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if (!zkClient.exists(adminFile, true)) {\n      rsp.setException(new SolrException(ErrorCode.NOT_FOUND, \"Can not find: \"\n                                         + adminFile));\n      return;\n    }\n    \n    // Show a directory listing\n    List<String> children = zkClient.getChildren(adminFile, null, true);\n    if (children.size() > 0) {\n      \n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for (String f : children) {\n        if (hiddenFiles.contains(f.toUpperCase(Locale.ROOT))) {\n          continue; // don't show 'hidden' files\n        }\n        if (f.startsWith(\".\")) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add(f, fileInfo);\n        List<String> fchildren = zkClient.getChildren(adminFile, null, true);\n        if (fchildren.size() > 0) {\n          fileInfo.add(\"directory\", true);\n        } else {\n          // TODO? content type\n          fileInfo.add(\"size\", f.length());\n        }\n        // TODO: ?\n        // fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add(\"files\", files);\n    } else {\n      // Include the file contents\n      // The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n      params.set(CommonParams.WT, \"raw\");\n      req.setParams(params);\n      ContentStreamBase content = new ContentStreamBase.ByteArrayStream(zkClient.getData(adminFile, null, null, true), adminFile);\n      content.setContentType(req.getParams().get(USE_CONTENT_TYPE));\n      \n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  private void showFromZooKeeper(SolrQueryRequest req, SolrQueryResponse rsp,\n      CoreContainer coreContainer) throws KeeperException,\n      InterruptedException, UnsupportedEncodingException {\n    String adminFile = null;\n    SolrCore core = req.getCore();\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n    final ZkSolrResourceLoader loader = (ZkSolrResourceLoader) core\n        .getResourceLoader();\n    String confPath = loader.getCollectionZkPath();\n    \n    String fname = req.getParams().get(\"file\", null);\n    if (fname == null) {\n      adminFile = confPath;\n    } else {\n      fname = fname.replace('\\\\', '/'); // normalize slashes\n      if (hiddenFiles.contains(fname.toUpperCase(Locale.ROOT))) {\n        rsp.setException(new SolrException(ErrorCode.FORBIDDEN, \"Can not access: \" + fname));\n        return;\n      }\n      if (fname.indexOf(\"..\") >= 0) {\n        rsp.setException(new SolrException(ErrorCode.FORBIDDEN, \"Invalid path: \" + fname));\n        return;\n      }\n      if (fname.startsWith(\"/\")) { // Only files relative to conf are valid\n        fname = fname.substring(1);\n      }\n      adminFile = confPath + \"/\" + fname;\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if (!zkClient.exists(adminFile, true)) {\n      rsp.setException(new SolrException(ErrorCode.NOT_FOUND, \"Can not find: \"\n                                         + adminFile));\n      return;\n    }\n    \n    // Show a directory listing\n    List<String> children = zkClient.getChildren(adminFile, null, true);\n    if (children.size() > 0) {\n      \n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for (String f : children) {\n        if (hiddenFiles.contains(f.toUpperCase(Locale.ROOT))) {\n          continue; // don't show 'hidden' files\n        }\n        if (f.startsWith(\".\")) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add(f, fileInfo);\n        List<String> fchildren = zkClient.getChildren(adminFile, null, true);\n        if (fchildren.size() > 0) {\n          fileInfo.add(\"directory\", true);\n        } else {\n          // TODO? content type\n          fileInfo.add(\"size\", f.length());\n        }\n        // TODO: ?\n        // fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add(\"files\", files);\n    } else {\n      // Include the file contents\n      // The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n      params.set(CommonParams.WT, \"raw\");\n      req.setParams(params);\n      \n      ContentStreamBase content = new ContentStreamBase.StringStream(\n          new String(zkClient.getData(adminFile, null, null, true), \"UTF-8\"));\n      content.setContentType(req.getParams().get(USE_CONTENT_TYPE));\n      \n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"94df854a0d36420ddbf7a4a21330bd00c2354017","date":1384538000,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromZooKeeper(SolrQueryRequest,SolrQueryResponse,CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromZooKeeper(SolrQueryRequest,SolrQueryResponse,CoreContainer).mjava","sourceNew":"  // Get a list of files from ZooKeeper for from the path in the file= parameter.\n  private void showFromZooKeeper(SolrQueryRequest req, SolrQueryResponse rsp,\n      CoreContainer coreContainer) throws KeeperException,\n      InterruptedException, UnsupportedEncodingException {\n\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n\n    String adminFile = getAdminFileFromZooKeeper(req, rsp, zkClient);\n\n    if (adminFile == null) {\n      return;\n    }\n\n    // Show a directory listing\n    List<String> children = zkClient.getChildren(adminFile, null, true);\n    if (children.size() > 0) {\n      \n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for (String f : children) {\n        if (isHiddenFile(rsp, f)) {\n          continue;\n        }\n\n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add(f, fileInfo);\n        List<String> fchildren = zkClient.getChildren(adminFile, null, true);\n        if (fchildren.size() > 0) {\n          fileInfo.add(\"directory\", true);\n        } else {\n          // TODO? content type\n          fileInfo.add(\"size\", f.length());\n        }\n        // TODO: ?\n        // fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add(\"files\", files);\n    } else {\n      // Include the file contents\n      // The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n      params.set(CommonParams.WT, \"raw\");\n      req.setParams(params);\n      ContentStreamBase content = new ContentStreamBase.ByteArrayStream(zkClient.getData(adminFile, null, null, true), adminFile);\n      content.setContentType(req.getParams().get(USE_CONTENT_TYPE));\n      \n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  private void showFromZooKeeper(SolrQueryRequest req, SolrQueryResponse rsp,\n      CoreContainer coreContainer) throws KeeperException,\n      InterruptedException, UnsupportedEncodingException {\n    String adminFile = null;\n    SolrCore core = req.getCore();\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n    final ZkSolrResourceLoader loader = (ZkSolrResourceLoader) core\n        .getResourceLoader();\n    String confPath = loader.getCollectionZkPath();\n    \n    String fname = req.getParams().get(\"file\", null);\n    if (fname == null) {\n      adminFile = confPath;\n    } else {\n      fname = fname.replace('\\\\', '/'); // normalize slashes\n      if (hiddenFiles.contains(fname.toUpperCase(Locale.ROOT))) {\n        rsp.setException(new SolrException(ErrorCode.FORBIDDEN, \"Can not access: \" + fname));\n        return;\n      }\n      if (fname.indexOf(\"..\") >= 0) {\n        rsp.setException(new SolrException(ErrorCode.FORBIDDEN, \"Invalid path: \" + fname));\n        return;\n      }\n      if (fname.startsWith(\"/\")) { // Only files relative to conf are valid\n        fname = fname.substring(1);\n      }\n      adminFile = confPath + \"/\" + fname;\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if (!zkClient.exists(adminFile, true)) {\n      rsp.setException(new SolrException(ErrorCode.NOT_FOUND, \"Can not find: \"\n                                         + adminFile));\n      return;\n    }\n    \n    // Show a directory listing\n    List<String> children = zkClient.getChildren(adminFile, null, true);\n    if (children.size() > 0) {\n      \n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for (String f : children) {\n        if (hiddenFiles.contains(f.toUpperCase(Locale.ROOT))) {\n          continue; // don't show 'hidden' files\n        }\n        if (f.startsWith(\".\")) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add(f, fileInfo);\n        List<String> fchildren = zkClient.getChildren(adminFile, null, true);\n        if (fchildren.size() > 0) {\n          fileInfo.add(\"directory\", true);\n        } else {\n          // TODO? content type\n          fileInfo.add(\"size\", f.length());\n        }\n        // TODO: ?\n        // fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add(\"files\", files);\n    } else {\n      // Include the file contents\n      // The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n      params.set(CommonParams.WT, \"raw\");\n      req.setParams(params);\n      ContentStreamBase content = new ContentStreamBase.ByteArrayStream(zkClient.getData(adminFile, null, null, true), adminFile);\n      content.setContentType(req.getParams().get(USE_CONTENT_TYPE));\n      \n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"174cf555ccf6aeb63c765897000c8214a84fe4f1","date":1384563221,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromZooKeeper(SolrQueryRequest,SolrQueryResponse,CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromZooKeeper(SolrQueryRequest,SolrQueryResponse,CoreContainer).mjava","sourceNew":"  // Get a list of files from ZooKeeper for from the path in the file= parameter.\n  private void showFromZooKeeper(SolrQueryRequest req, SolrQueryResponse rsp,\n      CoreContainer coreContainer) throws KeeperException,\n      InterruptedException, UnsupportedEncodingException {\n\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n\n    String adminFile = getAdminFileFromZooKeeper(req, rsp, zkClient);\n\n    if (adminFile == null) {\n      return;\n    }\n\n    // Show a directory listing\n    List<String> children = zkClient.getChildren(adminFile, null, true);\n    if (children.size() > 0) {\n      \n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for (String f : children) {\n        if (isHiddenFile(rsp, f)) {\n          continue;\n        }\n\n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add(f, fileInfo);\n        List<String> fchildren = zkClient.getChildren(adminFile + \"/\" + f, null, true);\n        if (fchildren.size() > 0) {\n          fileInfo.add(\"directory\", true);\n        } else {\n          // TODO? content type\n          fileInfo.add(\"size\", f.length());\n        }\n        // TODO: ?\n        // fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add(\"files\", files);\n    } else {\n      // Include the file contents\n      // The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n      params.set(CommonParams.WT, \"raw\");\n      req.setParams(params);\n      ContentStreamBase content = new ContentStreamBase.ByteArrayStream(zkClient.getData(adminFile, null, null, true), adminFile);\n      content.setContentType(req.getParams().get(USE_CONTENT_TYPE));\n      \n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  // Get a list of files from ZooKeeper for from the path in the file= parameter.\n  private void showFromZooKeeper(SolrQueryRequest req, SolrQueryResponse rsp,\n      CoreContainer coreContainer) throws KeeperException,\n      InterruptedException, UnsupportedEncodingException {\n\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n\n    String adminFile = getAdminFileFromZooKeeper(req, rsp, zkClient);\n\n    if (adminFile == null) {\n      return;\n    }\n\n    // Show a directory listing\n    List<String> children = zkClient.getChildren(adminFile, null, true);\n    if (children.size() > 0) {\n      \n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for (String f : children) {\n        if (isHiddenFile(rsp, f)) {\n          continue;\n        }\n\n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add(f, fileInfo);\n        List<String> fchildren = zkClient.getChildren(adminFile, null, true);\n        if (fchildren.size() > 0) {\n          fileInfo.add(\"directory\", true);\n        } else {\n          // TODO? content type\n          fileInfo.add(\"size\", f.length());\n        }\n        // TODO: ?\n        // fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add(\"files\", files);\n    } else {\n      // Include the file contents\n      // The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n      params.set(CommonParams.WT, \"raw\");\n      req.setParams(params);\n      ContentStreamBase content = new ContentStreamBase.ByteArrayStream(zkClient.getData(adminFile, null, null, true), adminFile);\n      content.setContentType(req.getParams().get(USE_CONTENT_TYPE));\n      \n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11bf766bfc5fc48f7099fd6d555b16d5ad4478f9","date":1384729182,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromZooKeeper(SolrQueryRequest,SolrQueryResponse,CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromZooKeeper(SolrQueryRequest,SolrQueryResponse,CoreContainer).mjava","sourceNew":"  // Get a list of files from ZooKeeper for from the path in the file= parameter.\n  private void showFromZooKeeper(SolrQueryRequest req, SolrQueryResponse rsp,\n      CoreContainer coreContainer) throws KeeperException,\n      InterruptedException, UnsupportedEncodingException {\n\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n\n    String adminFile = getAdminFileFromZooKeeper(req, rsp, zkClient);\n\n    if (adminFile == null) {\n      return;\n    }\n\n    // Show a directory listing\n    List<String> children = zkClient.getChildren(adminFile, null, true);\n    if (children.size() > 0) {\n      \n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for (String f : children) {\n        if (isHiddenFile(req, rsp, f, false)) {\n          continue;\n        }\n\n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add(f, fileInfo);\n        List<String> fchildren = zkClient.getChildren(adminFile + \"/\" + f, null, true);\n        if (fchildren.size() > 0) {\n          fileInfo.add(\"directory\", true);\n        } else {\n          // TODO? content type\n          fileInfo.add(\"size\", f.length());\n        }\n        // TODO: ?\n        // fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add(\"files\", files);\n    } else {\n      // Include the file contents\n      // The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n      params.set(CommonParams.WT, \"raw\");\n      req.setParams(params);\n      ContentStreamBase content = new ContentStreamBase.ByteArrayStream(zkClient.getData(adminFile, null, null, true), adminFile);\n      content.setContentType(req.getParams().get(USE_CONTENT_TYPE));\n      \n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  // Get a list of files from ZooKeeper for from the path in the file= parameter.\n  private void showFromZooKeeper(SolrQueryRequest req, SolrQueryResponse rsp,\n      CoreContainer coreContainer) throws KeeperException,\n      InterruptedException, UnsupportedEncodingException {\n\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n\n    String adminFile = getAdminFileFromZooKeeper(req, rsp, zkClient);\n\n    if (adminFile == null) {\n      return;\n    }\n\n    // Show a directory listing\n    List<String> children = zkClient.getChildren(adminFile, null, true);\n    if (children.size() > 0) {\n      \n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for (String f : children) {\n        if (isHiddenFile(rsp, f)) {\n          continue;\n        }\n\n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add(f, fileInfo);\n        List<String> fchildren = zkClient.getChildren(adminFile + \"/\" + f, null, true);\n        if (fchildren.size() > 0) {\n          fileInfo.add(\"directory\", true);\n        } else {\n          // TODO? content type\n          fileInfo.add(\"size\", f.length());\n        }\n        // TODO: ?\n        // fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add(\"files\", files);\n    } else {\n      // Include the file contents\n      // The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n      params.set(CommonParams.WT, \"raw\");\n      req.setParams(params);\n      ContentStreamBase content = new ContentStreamBase.ByteArrayStream(zkClient.getData(adminFile, null, null, true), adminFile);\n      content.setContentType(req.getParams().get(USE_CONTENT_TYPE));\n      \n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7455ee5c847b2ee7e44656e4218141f62dacb572","date":1386032125,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromZooKeeper(SolrQueryRequest,SolrQueryResponse,CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromZooKeeper(SolrQueryRequest,SolrQueryResponse,CoreContainer).mjava","sourceNew":"  // Get a list of files from ZooKeeper for from the path in the file= parameter.\n  private void showFromZooKeeper(SolrQueryRequest req, SolrQueryResponse rsp,\n      CoreContainer coreContainer) throws KeeperException,\n      InterruptedException, UnsupportedEncodingException {\n\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n\n    String adminFile = getAdminFileFromZooKeeper(req, rsp, zkClient, hiddenFiles);\n\n    if (adminFile == null) {\n      return;\n    }\n\n    // Show a directory listing\n    List<String> children = zkClient.getChildren(adminFile, null, true);\n    if (children.size() > 0) {\n      \n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for (String f : children) {\n        if (isHiddenFile(req, rsp, f, false, hiddenFiles)) {\n          continue;\n        }\n\n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add(f, fileInfo);\n        List<String> fchildren = zkClient.getChildren(adminFile + \"/\" + f, null, true);\n        if (fchildren.size() > 0) {\n          fileInfo.add(\"directory\", true);\n        } else {\n          // TODO? content type\n          fileInfo.add(\"size\", f.length());\n        }\n        // TODO: ?\n        // fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add(\"files\", files);\n    } else {\n      // Include the file contents\n      // The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n      params.set(CommonParams.WT, \"raw\");\n      req.setParams(params);\n      ContentStreamBase content = new ContentStreamBase.ByteArrayStream(zkClient.getData(adminFile, null, null, true), adminFile);\n      content.setContentType(req.getParams().get(USE_CONTENT_TYPE));\n      \n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  // Get a list of files from ZooKeeper for from the path in the file= parameter.\n  private void showFromZooKeeper(SolrQueryRequest req, SolrQueryResponse rsp,\n      CoreContainer coreContainer) throws KeeperException,\n      InterruptedException, UnsupportedEncodingException {\n\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n\n    String adminFile = getAdminFileFromZooKeeper(req, rsp, zkClient);\n\n    if (adminFile == null) {\n      return;\n    }\n\n    // Show a directory listing\n    List<String> children = zkClient.getChildren(adminFile, null, true);\n    if (children.size() > 0) {\n      \n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for (String f : children) {\n        if (isHiddenFile(req, rsp, f, false)) {\n          continue;\n        }\n\n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add(f, fileInfo);\n        List<String> fchildren = zkClient.getChildren(adminFile + \"/\" + f, null, true);\n        if (fchildren.size() > 0) {\n          fileInfo.add(\"directory\", true);\n        } else {\n          // TODO? content type\n          fileInfo.add(\"size\", f.length());\n        }\n        // TODO: ?\n        // fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add(\"files\", files);\n    } else {\n      // Include the file contents\n      // The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n      params.set(CommonParams.WT, \"raw\");\n      req.setParams(params);\n      ContentStreamBase content = new ContentStreamBase.ByteArrayStream(zkClient.getData(adminFile, null, null, true), adminFile);\n      content.setContentType(req.getParams().get(USE_CONTENT_TYPE));\n      \n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromZooKeeper(SolrQueryRequest,SolrQueryResponse,CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromZooKeeper(SolrQueryRequest,SolrQueryResponse,CoreContainer).mjava","sourceNew":"  // Get a list of files from ZooKeeper for from the path in the file= parameter.\n  private void showFromZooKeeper(SolrQueryRequest req, SolrQueryResponse rsp,\n      CoreContainer coreContainer) throws KeeperException,\n      InterruptedException, UnsupportedEncodingException {\n\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n\n    String adminFile = getAdminFileFromZooKeeper(req, rsp, zkClient, hiddenFiles);\n\n    if (adminFile == null) {\n      return;\n    }\n\n    // Show a directory listing\n    List<String> children = zkClient.getChildren(adminFile, null, true);\n    if (children.size() > 0) {\n      \n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for (String f : children) {\n        if (isHiddenFile(req, rsp, f, false, hiddenFiles)) {\n          continue;\n        }\n\n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add(f, fileInfo);\n        List<String> fchildren = zkClient.getChildren(adminFile + \"/\" + f, null, true);\n        if (fchildren.size() > 0) {\n          fileInfo.add(\"directory\", true);\n        } else {\n          // TODO? content type\n          fileInfo.add(\"size\", f.length());\n        }\n        // TODO: ?\n        // fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add(\"files\", files);\n    } else {\n      // Include the file contents\n      // The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n      params.set(CommonParams.WT, \"raw\");\n      req.setParams(params);\n      ContentStreamBase content = new ContentStreamBase.ByteArrayStream(zkClient.getData(adminFile, null, null, true), adminFile);\n      content.setContentType(req.getParams().get(USE_CONTENT_TYPE));\n      \n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  private void showFromZooKeeper(SolrQueryRequest req, SolrQueryResponse rsp,\n      CoreContainer coreContainer) throws KeeperException,\n      InterruptedException, UnsupportedEncodingException {\n    String adminFile = null;\n    SolrCore core = req.getCore();\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n    final ZkSolrResourceLoader loader = (ZkSolrResourceLoader) core\n        .getResourceLoader();\n    String confPath = loader.getCollectionZkPath();\n    \n    String fname = req.getParams().get(\"file\", null);\n    if (fname == null) {\n      adminFile = confPath;\n    } else {\n      fname = fname.replace('\\\\', '/'); // normalize slashes\n      if (hiddenFiles.contains(fname.toUpperCase(Locale.ROOT))) {\n        rsp.setException(new SolrException(ErrorCode.FORBIDDEN, \"Can not access: \" + fname));\n        return;\n      }\n      if (fname.indexOf(\"..\") >= 0) {\n        rsp.setException(new SolrException(ErrorCode.FORBIDDEN, \"Invalid path: \" + fname));\n        return;\n      }\n      if (fname.startsWith(\"/\")) { // Only files relative to conf are valid\n        fname = fname.substring(1);\n      }\n      adminFile = confPath + \"/\" + fname;\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if (!zkClient.exists(adminFile, true)) {\n      rsp.setException(new SolrException(ErrorCode.NOT_FOUND, \"Can not find: \"\n                                         + adminFile));\n      return;\n    }\n    \n    // Show a directory listing\n    List<String> children = zkClient.getChildren(adminFile, null, true);\n    if (children.size() > 0) {\n      \n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for (String f : children) {\n        if (hiddenFiles.contains(f.toUpperCase(Locale.ROOT))) {\n          continue; // don't show 'hidden' files\n        }\n        if (f.startsWith(\".\")) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add(f, fileInfo);\n        List<String> fchildren = zkClient.getChildren(adminFile, null, true);\n        if (fchildren.size() > 0) {\n          fileInfo.add(\"directory\", true);\n        } else {\n          // TODO? content type\n          fileInfo.add(\"size\", f.length());\n        }\n        // TODO: ?\n        // fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add(\"files\", files);\n    } else {\n      // Include the file contents\n      // The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n      params.set(CommonParams.WT, \"raw\");\n      req.setParams(params);\n      ContentStreamBase content = new ContentStreamBase.ByteArrayStream(zkClient.getData(adminFile, null, null, true), adminFile);\n      content.setContentType(req.getParams().get(USE_CONTENT_TYPE));\n      \n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromZooKeeper(SolrQueryRequest,SolrQueryResponse,CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#showFromZooKeeper(SolrQueryRequest,SolrQueryResponse,CoreContainer).mjava","sourceNew":"  // Get a list of files from ZooKeeper for from the path in the file= parameter.\n  private void showFromZooKeeper(SolrQueryRequest req, SolrQueryResponse rsp,\n      CoreContainer coreContainer) throws KeeperException,\n      InterruptedException, UnsupportedEncodingException {\n\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n\n    String adminFile = getAdminFileFromZooKeeper(req, rsp, zkClient, hiddenFiles);\n\n    if (adminFile == null) {\n      return;\n    }\n\n    // Show a directory listing\n    List<String> children = zkClient.getChildren(adminFile, null, true);\n    if (children.size() > 0) {\n      \n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<>();\n      for (String f : children) {\n        if (isHiddenFile(req, rsp, f, false, hiddenFiles)) {\n          continue;\n        }\n\n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<>();\n        files.add(f, fileInfo);\n        List<String> fchildren = zkClient.getChildren(adminFile + \"/\" + f, null, true);\n        if (fchildren.size() > 0) {\n          fileInfo.add(\"directory\", true);\n        } else {\n          // TODO? content type\n          fileInfo.add(\"size\", f.length());\n        }\n        // TODO: ?\n        // fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add(\"files\", files);\n    } else {\n      // Include the file contents\n      // The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n      params.set(CommonParams.WT, \"raw\");\n      req.setParams(params);\n      ContentStreamBase content = new ContentStreamBase.ByteArrayStream(zkClient.getData(adminFile, null, null, true), adminFile);\n      content.setContentType(req.getParams().get(USE_CONTENT_TYPE));\n      \n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  // Get a list of files from ZooKeeper for from the path in the file= parameter.\n  private void showFromZooKeeper(SolrQueryRequest req, SolrQueryResponse rsp,\n      CoreContainer coreContainer) throws KeeperException,\n      InterruptedException, UnsupportedEncodingException {\n\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n\n    String adminFile = getAdminFileFromZooKeeper(req, rsp, zkClient, hiddenFiles);\n\n    if (adminFile == null) {\n      return;\n    }\n\n    // Show a directory listing\n    List<String> children = zkClient.getChildren(adminFile, null, true);\n    if (children.size() > 0) {\n      \n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for (String f : children) {\n        if (isHiddenFile(req, rsp, f, false, hiddenFiles)) {\n          continue;\n        }\n\n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add(f, fileInfo);\n        List<String> fchildren = zkClient.getChildren(adminFile + \"/\" + f, null, true);\n        if (fchildren.size() > 0) {\n          fileInfo.add(\"directory\", true);\n        } else {\n          // TODO? content type\n          fileInfo.add(\"size\", f.length());\n        }\n        // TODO: ?\n        // fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add(\"files\", files);\n    } else {\n      // Include the file contents\n      // The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());\n      params.set(CommonParams.WT, \"raw\");\n      req.setParams(params);\n      ContentStreamBase content = new ContentStreamBase.ByteArrayStream(zkClient.getData(adminFile, null, null, true), adminFile);\n      content.setContentType(req.getParams().get(USE_CONTENT_TYPE));\n      \n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["fe2a178a9ebfcc61e832755cd47b30712b308e91","fd45d359393ce293fc33bb4770a2fa8582298ee4"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7455ee5c847b2ee7e44656e4218141f62dacb572"],"94df854a0d36420ddbf7a4a21330bd00c2354017":["096d8770ecc7af747320979ed1e4ff71d3237b8f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"7455ee5c847b2ee7e44656e4218141f62dacb572":["11bf766bfc5fc48f7099fd6d555b16d5ad4478f9"],"fd45d359393ce293fc33bb4770a2fa8582298ee4":["fe2a178a9ebfcc61e832755cd47b30712b308e91"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2acf500f78aa12b92e371fd89c719291986b6b90":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","9279c7cd47f17e1e8b674a3741ff5f040bc680be"],"174cf555ccf6aeb63c765897000c8214a84fe4f1":["94df854a0d36420ddbf7a4a21330bd00c2354017"],"46d8ada1fff8d18cb197c38c7983225162599948":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","2acf500f78aa12b92e371fd89c719291986b6b90"],"11bf766bfc5fc48f7099fd6d555b16d5ad4478f9":["174cf555ccf6aeb63c765897000c8214a84fe4f1"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"fe2a178a9ebfcc61e832755cd47b30712b308e91":["85c5f7950a9f47dafe948ee5fce0bb1e0bcdd148"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","2acf500f78aa12b92e371fd89c719291986b6b90"],"096d8770ecc7af747320979ed1e4ff71d3237b8f":["fd45d359393ce293fc33bb4770a2fa8582298ee4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["fe33227f6805edab2036cbb80645cc4e2d1fa424","85c5f7950a9f47dafe948ee5fce0bb1e0bcdd148"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["46d8ada1fff8d18cb197c38c7983225162599948","85c5f7950a9f47dafe948ee5fce0bb1e0bcdd148"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["096d8770ecc7af747320979ed1e4ff71d3237b8f","7455ee5c847b2ee7e44656e4218141f62dacb572"],"85c5f7950a9f47dafe948ee5fce0bb1e0bcdd148":["2acf500f78aa12b92e371fd89c719291986b6b90"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"94df854a0d36420ddbf7a4a21330bd00c2354017":["174cf555ccf6aeb63c765897000c8214a84fe4f1"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"fd45d359393ce293fc33bb4770a2fa8582298ee4":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","096d8770ecc7af747320979ed1e4ff71d3237b8f"],"7455ee5c847b2ee7e44656e4218141f62dacb572":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424","85c5f7950a9f47dafe948ee5fce0bb1e0bcdd148"],"174cf555ccf6aeb63c765897000c8214a84fe4f1":["11bf766bfc5fc48f7099fd6d555b16d5ad4478f9"],"46d8ada1fff8d18cb197c38c7983225162599948":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"11bf766bfc5fc48f7099fd6d555b16d5ad4478f9":["7455ee5c847b2ee7e44656e4218141f62dacb572"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"fe2a178a9ebfcc61e832755cd47b30712b308e91":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fd45d359393ce293fc33bb4770a2fa8582298ee4"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"096d8770ecc7af747320979ed1e4ff71d3237b8f":["94df854a0d36420ddbf7a4a21330bd00c2354017","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","9279c7cd47f17e1e8b674a3741ff5f040bc680be","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948","0d22ac6a4146774c1bc8400160fc0b6150294e92","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"85c5f7950a9f47dafe948ee5fce0bb1e0bcdd148":["fe2a178a9ebfcc61e832755cd47b30712b308e91","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}