{"path":"solr/core/src/test/org/apache/solr/cloud/LeaderTragicEventTest#testOtherReplicasAreNotActive().mjava","commits":[{"id":"1257989f08e6750eeab73e5e9f7847fc48b04a1a","date":1531102463,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderTragicEventTest#testOtherReplicasAreNotActive().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testOtherReplicasAreNotActive() throws Exception {\n    int numReplicas = random().nextInt(2) + 1;\n    // won't do anything if leader is the only one active replica in the shard\n    CollectionAdminRequest\n        .createCollection(COLLECTION, \"config\", 1, numReplicas)\n        .process(cluster.getSolrClient());\n    ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), COLLECTION, 120000);\n\n    JettySolrRunner otherReplicaJetty = null;\n    if (numReplicas == 2) {\n      Slice shard = getCollectionState(COLLECTION).getSlice(\"shard1\");\n      otherReplicaJetty = cluster.getReplicaJetty(getNonLeader(shard));\n      otherReplicaJetty.stop();\n      waitForState(\"Timeout waiting for replica get down\", COLLECTION, (liveNodes, collectionState) -> getNonLeader(collectionState.getSlice(\"shard1\")).getState() != Replica.State.ACTIVE);\n    }\n\n    Replica oldLeader = corruptLeader(new ArrayList<>());\n\n    //TODO better way to test this\n    Thread.sleep(5000);\n    Replica leader = getCollectionState(COLLECTION).getSlice(\"shard1\").getLeader();\n    assertEquals(leader.getName(), oldLeader.getName());\n\n    if (otherReplicaJetty != null) {\n      // won't be able to do anything here, since this replica can't recovery from the leader\n      otherReplicaJetty.start();\n    }\n\n    CollectionAdminRequest.deleteCollection(COLLECTION).process(cluster.getSolrClient());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderTragicEventTest#testOtherReplicasAreNotActive().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testOtherReplicasAreNotActive() throws Exception {\n    int numReplicas = random().nextInt(2) + 1;\n    // won't do anything if leader is the only one active replica in the shard\n    CollectionAdminRequest\n        .createCollection(COLLECTION, \"config\", 1, numReplicas)\n        .process(cluster.getSolrClient());\n    ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), COLLECTION, 120000);\n\n    JettySolrRunner otherReplicaJetty = null;\n    if (numReplicas == 2) {\n      Slice shard = getCollectionState(COLLECTION).getSlice(\"shard1\");\n      otherReplicaJetty = cluster.getReplicaJetty(getNonLeader(shard));\n      otherReplicaJetty.stop();\n      waitForState(\"Timeout waiting for replica get down\", COLLECTION, (liveNodes, collectionState) -> getNonLeader(collectionState.getSlice(\"shard1\")).getState() != Replica.State.ACTIVE);\n    }\n\n    Replica oldLeader = corruptLeader(new ArrayList<>());\n\n    //TODO better way to test this\n    Thread.sleep(5000);\n    Replica leader = getCollectionState(COLLECTION).getSlice(\"shard1\").getLeader();\n    assertEquals(leader.getName(), oldLeader.getName());\n\n    if (otherReplicaJetty != null) {\n      // won't be able to do anything here, since this replica can't recovery from the leader\n      otherReplicaJetty.start();\n    }\n\n    CollectionAdminRequest.deleteCollection(COLLECTION).process(cluster.getSolrClient());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc37eb63edc0a1db0d74e5f531a60b987f98f327","date":1531827749,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderTragicEventTest#testOtherReplicasAreNotActive().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderTragicEventTest#testOtherReplicasAreNotActive().mjava","sourceNew":"  @Test\n  public void testOtherReplicasAreNotActive() throws Exception {\n    final String collection = \"collection2\";\n    cluster.getSolrClient().setDefaultCollection(collection);\n    int numReplicas = random().nextInt(2) + 1;\n    // won't do anything if leader is the only one active replica in the shard\n    CollectionAdminRequest\n        .createCollection(collection, \"config\", 1, numReplicas)\n        .process(cluster.getSolrClient());\n    ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), collection, 120000);\n\n    try {\n      JettySolrRunner otherReplicaJetty = null;\n      if (numReplicas == 2) {\n        Slice shard = getCollectionState(collection).getSlice(\"shard1\");\n        otherReplicaJetty = cluster.getReplicaJetty(getNonLeader(shard));\n        log.info(\"Stop jetty node : {} state:{}\", otherReplicaJetty.getBaseUrl(), getCollectionState(collection));\n        otherReplicaJetty.stop();\n        waitForState(\"Timeout waiting for replica get down\", collection, (liveNodes, collectionState) -> getNonLeader(collectionState.getSlice(\"shard1\")).getState() != Replica.State.ACTIVE);\n      }\n\n      Replica oldLeader = corruptLeader(collection, new ArrayList<>());\n\n      //TODO better way to test this\n      Thread.sleep(5000);\n      Replica leader = getCollectionState(collection).getSlice(\"shard1\").getLeader();\n      assertEquals(leader.getName(), oldLeader.getName());\n\n      if (otherReplicaJetty != null) {\n        // won't be able to do anything here, since this replica can't recovery from the leader\n        otherReplicaJetty.start();\n      }\n    } finally {\n      CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOtherReplicasAreNotActive() throws Exception {\n    int numReplicas = random().nextInt(2) + 1;\n    // won't do anything if leader is the only one active replica in the shard\n    CollectionAdminRequest\n        .createCollection(COLLECTION, \"config\", 1, numReplicas)\n        .process(cluster.getSolrClient());\n    ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), COLLECTION, 120000);\n\n    JettySolrRunner otherReplicaJetty = null;\n    if (numReplicas == 2) {\n      Slice shard = getCollectionState(COLLECTION).getSlice(\"shard1\");\n      otherReplicaJetty = cluster.getReplicaJetty(getNonLeader(shard));\n      otherReplicaJetty.stop();\n      waitForState(\"Timeout waiting for replica get down\", COLLECTION, (liveNodes, collectionState) -> getNonLeader(collectionState.getSlice(\"shard1\")).getState() != Replica.State.ACTIVE);\n    }\n\n    Replica oldLeader = corruptLeader(new ArrayList<>());\n\n    //TODO better way to test this\n    Thread.sleep(5000);\n    Replica leader = getCollectionState(COLLECTION).getSlice(\"shard1\").getLeader();\n    assertEquals(leader.getName(), oldLeader.getName());\n\n    if (otherReplicaJetty != null) {\n      // won't be able to do anything here, since this replica can't recovery from the leader\n      otherReplicaJetty.start();\n    }\n\n    CollectionAdminRequest.deleteCollection(COLLECTION).process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderTragicEventTest#testOtherReplicasAreNotActive().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testOtherReplicasAreNotActive() throws Exception {\n    final String collection = \"collection2\";\n    cluster.getSolrClient().setDefaultCollection(collection);\n    int numReplicas = random().nextInt(2) + 1;\n    // won't do anything if leader is the only one active replica in the shard\n    CollectionAdminRequest\n        .createCollection(collection, \"config\", 1, numReplicas)\n        .process(cluster.getSolrClient());\n    ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), collection, 120000);\n\n    try {\n      JettySolrRunner otherReplicaJetty = null;\n      if (numReplicas == 2) {\n        Slice shard = getCollectionState(collection).getSlice(\"shard1\");\n        otherReplicaJetty = cluster.getReplicaJetty(getNonLeader(shard));\n        log.info(\"Stop jetty node : {} state:{}\", otherReplicaJetty.getBaseUrl(), getCollectionState(collection));\n        otherReplicaJetty.stop();\n        waitForState(\"Timeout waiting for replica get down\", collection, (liveNodes, collectionState) -> getNonLeader(collectionState.getSlice(\"shard1\")).getState() != Replica.State.ACTIVE);\n      }\n\n      Replica oldLeader = corruptLeader(collection, new ArrayList<>());\n\n      //TODO better way to test this\n      Thread.sleep(5000);\n      Replica leader = getCollectionState(collection).getSlice(\"shard1\").getLeader();\n      assertEquals(leader.getName(), oldLeader.getName());\n\n      if (otherReplicaJetty != null) {\n        // won't be able to do anything here, since this replica can't recovery from the leader\n        otherReplicaJetty.start();\n      }\n    } finally {\n      CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f06a8a2335c4e2aa74b60394e6f06f6f9bcc719","date":1533082421,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderTragicEventTest#testOtherReplicasAreNotActive().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderTragicEventTest#testOtherReplicasAreNotActive().mjava","sourceNew":"  @Test\n  public void testOtherReplicasAreNotActive() throws Exception {\n    final String collection = \"collection2\";\n    cluster.getSolrClient().setDefaultCollection(collection);\n    int numReplicas = random().nextInt(2) + 1;\n    // won't do anything if leader is the only one active replica in the shard\n    CollectionAdminRequest\n        .createCollection(collection, \"config\", 1, numReplicas)\n        .process(cluster.getSolrClient());\n    ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), collection, 120000);\n\n    try {\n      JettySolrRunner otherReplicaJetty = null;\n      if (numReplicas == 2) {\n        Slice shard = getCollectionState(collection).getSlice(\"shard1\");\n        otherReplicaJetty = cluster.getReplicaJetty(getNonLeader(shard));\n        log.info(\"Stop jetty node : {} state:{}\", otherReplicaJetty.getBaseUrl(), getCollectionState(collection));\n        otherReplicaJetty.stop();\n        waitForState(\"Timeout waiting for replica get down\", collection, (liveNodes, collectionState) -> getNonLeader(collectionState.getSlice(\"shard1\")).getState() != Replica.State.ACTIVE);\n      }\n\n      Replica oldLeader = corruptLeader(collection, new ArrayList<>());\n\n      if (otherReplicaJetty != null) {\n        otherReplicaJetty.start();\n      }\n      //TODO better way to test this\n      Thread.sleep(2000);\n      Replica leader = getCollectionState(collection).getSlice(\"shard1\").getLeader();\n      assertEquals(leader.getName(), oldLeader.getName());\n    } finally {\n      CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOtherReplicasAreNotActive() throws Exception {\n    final String collection = \"collection2\";\n    cluster.getSolrClient().setDefaultCollection(collection);\n    int numReplicas = random().nextInt(2) + 1;\n    // won't do anything if leader is the only one active replica in the shard\n    CollectionAdminRequest\n        .createCollection(collection, \"config\", 1, numReplicas)\n        .process(cluster.getSolrClient());\n    ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), collection, 120000);\n\n    try {\n      JettySolrRunner otherReplicaJetty = null;\n      if (numReplicas == 2) {\n        Slice shard = getCollectionState(collection).getSlice(\"shard1\");\n        otherReplicaJetty = cluster.getReplicaJetty(getNonLeader(shard));\n        log.info(\"Stop jetty node : {} state:{}\", otherReplicaJetty.getBaseUrl(), getCollectionState(collection));\n        otherReplicaJetty.stop();\n        waitForState(\"Timeout waiting for replica get down\", collection, (liveNodes, collectionState) -> getNonLeader(collectionState.getSlice(\"shard1\")).getState() != Replica.State.ACTIVE);\n      }\n\n      Replica oldLeader = corruptLeader(collection, new ArrayList<>());\n\n      //TODO better way to test this\n      Thread.sleep(5000);\n      Replica leader = getCollectionState(collection).getSlice(\"shard1\").getLeader();\n      assertEquals(leader.getName(), oldLeader.getName());\n\n      if (otherReplicaJetty != null) {\n        // won't be able to do anything here, since this replica can't recovery from the leader\n        otherReplicaJetty.start();\n      }\n    } finally {\n      CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderTragicEventTest#testOtherReplicasAreNotActive().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderTragicEventTest#testOtherReplicasAreNotActive().mjava","sourceNew":"  @Test\n  public void testOtherReplicasAreNotActive() throws Exception {\n    final String collection = \"collection2\";\n    cluster.getSolrClient().setDefaultCollection(collection);\n    int numReplicas = random().nextInt(2) + 1;\n    // won't do anything if leader is the only one active replica in the shard\n    CollectionAdminRequest\n        .createCollection(collection, \"config\", 1, numReplicas)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(collection, 1, numReplicas);\n\n    try {\n      JettySolrRunner otherReplicaJetty = null;\n      if (numReplicas == 2) {\n        Slice shard = getCollectionState(collection).getSlice(\"shard1\");\n        otherReplicaJetty = cluster.getReplicaJetty(getNonLeader(shard));\n        log.info(\"Stop jetty node : {} state:{}\", otherReplicaJetty.getBaseUrl(), getCollectionState(collection));\n        otherReplicaJetty.stop();\n        cluster.waitForJettyToStop(otherReplicaJetty);\n        waitForState(\"Timeout waiting for replica get down\", collection, (liveNodes, collectionState) -> getNonLeader(collectionState.getSlice(\"shard1\")).getState() != Replica.State.ACTIVE);\n      }\n\n      Replica oldLeader = corruptLeader(collection, new ArrayList<>());\n\n      if (otherReplicaJetty != null) {\n        otherReplicaJetty.start();\n        cluster.waitForNode(otherReplicaJetty, 30);\n      }\n\n      Replica leader = getCollectionState(collection).getSlice(\"shard1\").getLeader();\n      assertEquals(leader.getName(), oldLeader.getName());\n    } finally {\n      CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOtherReplicasAreNotActive() throws Exception {\n    final String collection = \"collection2\";\n    cluster.getSolrClient().setDefaultCollection(collection);\n    int numReplicas = random().nextInt(2) + 1;\n    // won't do anything if leader is the only one active replica in the shard\n    CollectionAdminRequest\n        .createCollection(collection, \"config\", 1, numReplicas)\n        .process(cluster.getSolrClient());\n    ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), collection, 120000);\n\n    try {\n      JettySolrRunner otherReplicaJetty = null;\n      if (numReplicas == 2) {\n        Slice shard = getCollectionState(collection).getSlice(\"shard1\");\n        otherReplicaJetty = cluster.getReplicaJetty(getNonLeader(shard));\n        log.info(\"Stop jetty node : {} state:{}\", otherReplicaJetty.getBaseUrl(), getCollectionState(collection));\n        otherReplicaJetty.stop();\n        waitForState(\"Timeout waiting for replica get down\", collection, (liveNodes, collectionState) -> getNonLeader(collectionState.getSlice(\"shard1\")).getState() != Replica.State.ACTIVE);\n      }\n\n      Replica oldLeader = corruptLeader(collection, new ArrayList<>());\n\n      if (otherReplicaJetty != null) {\n        otherReplicaJetty.start();\n      }\n      //TODO better way to test this\n      Thread.sleep(2000);\n      Replica leader = getCollectionState(collection).getSlice(\"shard1\").getLeader();\n      assertEquals(leader.getName(), oldLeader.getName());\n    } finally {\n      CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n    }\n  }\n\n","bugFix":["2f06a8a2335c4e2aa74b60394e6f06f6f9bcc719","fc37eb63edc0a1db0d74e5f531a60b987f98f327"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderTragicEventTest#testOtherReplicasAreNotActive().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderTragicEventTest#testOtherReplicasAreNotActive().mjava","sourceNew":"  @Test\n  public void testOtherReplicasAreNotActive() throws Exception {\n    final String collection = \"collection2\";\n    cluster.getSolrClient().setDefaultCollection(collection);\n    int numReplicas = random().nextInt(2) + 1;\n    // won't do anything if leader is the only one active replica in the shard\n    CollectionAdminRequest\n        .createCollection(collection, \"config\", 1, numReplicas)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(collection, 1, numReplicas);\n\n    try {\n      JettySolrRunner otherReplicaJetty = null;\n      if (numReplicas == 2) {\n        Slice shard = getCollectionState(collection).getSlice(\"shard1\");\n        otherReplicaJetty = cluster.getReplicaJetty(getNonLeader(shard));\n        if (log.isInfoEnabled()) {\n          log.info(\"Stop jetty node : {} state:{}\", otherReplicaJetty.getBaseUrl(), getCollectionState(collection));\n        }\n        otherReplicaJetty.stop();\n        cluster.waitForJettyToStop(otherReplicaJetty);\n        waitForState(\"Timeout waiting for replica get down\", collection, (liveNodes, collectionState) -> getNonLeader(collectionState.getSlice(\"shard1\")).getState() != Replica.State.ACTIVE);\n      }\n\n      Replica oldLeader = corruptLeader(collection, new ArrayList<>());\n\n      if (otherReplicaJetty != null) {\n        otherReplicaJetty.start();\n        cluster.waitForNode(otherReplicaJetty, 30);\n      }\n\n      Replica leader = getCollectionState(collection).getSlice(\"shard1\").getLeader();\n      assertEquals(leader.getName(), oldLeader.getName());\n    } finally {\n      CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOtherReplicasAreNotActive() throws Exception {\n    final String collection = \"collection2\";\n    cluster.getSolrClient().setDefaultCollection(collection);\n    int numReplicas = random().nextInt(2) + 1;\n    // won't do anything if leader is the only one active replica in the shard\n    CollectionAdminRequest\n        .createCollection(collection, \"config\", 1, numReplicas)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(collection, 1, numReplicas);\n\n    try {\n      JettySolrRunner otherReplicaJetty = null;\n      if (numReplicas == 2) {\n        Slice shard = getCollectionState(collection).getSlice(\"shard1\");\n        otherReplicaJetty = cluster.getReplicaJetty(getNonLeader(shard));\n        log.info(\"Stop jetty node : {} state:{}\", otherReplicaJetty.getBaseUrl(), getCollectionState(collection));\n        otherReplicaJetty.stop();\n        cluster.waitForJettyToStop(otherReplicaJetty);\n        waitForState(\"Timeout waiting for replica get down\", collection, (liveNodes, collectionState) -> getNonLeader(collectionState.getSlice(\"shard1\")).getState() != Replica.State.ACTIVE);\n      }\n\n      Replica oldLeader = corruptLeader(collection, new ArrayList<>());\n\n      if (otherReplicaJetty != null) {\n        otherReplicaJetty.start();\n        cluster.waitForNode(otherReplicaJetty, 30);\n      }\n\n      Replica leader = getCollectionState(collection).getSlice(\"shard1\").getLeader();\n      assertEquals(leader.getName(), oldLeader.getName());\n    } finally {\n      CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1257989f08e6750eeab73e5e9f7847fc48b04a1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fc37eb63edc0a1db0d74e5f531a60b987f98f327"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["2f06a8a2335c4e2aa74b60394e6f06f6f9bcc719"],"fc37eb63edc0a1db0d74e5f531a60b987f98f327":["1257989f08e6750eeab73e5e9f7847fc48b04a1a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2f06a8a2335c4e2aa74b60394e6f06f6f9bcc719":["fc37eb63edc0a1db0d74e5f531a60b987f98f327"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1257989f08e6750eeab73e5e9f7847fc48b04a1a"]},"commit2Childs":{"1257989f08e6750eeab73e5e9f7847fc48b04a1a":["fc37eb63edc0a1db0d74e5f531a60b987f98f327","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"fc37eb63edc0a1db0d74e5f531a60b987f98f327":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","2f06a8a2335c4e2aa74b60394e6f06f6f9bcc719"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1257989f08e6750eeab73e5e9f7847fc48b04a1a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"2f06a8a2335c4e2aa74b60394e6f06f6f9bcc719":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}