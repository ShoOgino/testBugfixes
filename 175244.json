{"path":"solr/core/src/java/org/apache/solr/search/Filter#createWeight(IndexSearcher,ScoreMode,float).mjava","commits":[{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Filter#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Filter#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer scorer = scorer(context);\n        final boolean match = (scorer != null && scorer.iterator().advance(doc) == doc);\n        if (match) {\n          assert scorer.score() == 0f;\n          return Explanation.match(0f, \"Match on id \" + doc);\n        } else {\n          return Explanation.match(0f, \"No match on id \" + doc);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final DocIdSet set = getDocIdSet(context, null);\n        if (set == null) {\n          return null;\n        }\n        if (applyLazily && set.bits() != null) {\n          final Bits bits = set.bits();\n          final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return bits.get(approximation.docID());\n            }\n\n            @Override\n            public float matchCost() {\n              return 10; // TODO use cost of bits.get()\n            }\n          };\n          return new ConstantScoreScorer(this, 0f, twoPhase);\n        }\n        final DocIdSetIterator iterator = set.iterator();\n        if (iterator == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, 0f, iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return false;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer scorer = scorer(context);\n        final boolean match = (scorer != null && scorer.iterator().advance(doc) == doc);\n        if (match) {\n          assert scorer.score() == 0f;\n          return Explanation.match(0f, \"Match on id \" + doc);\n        } else {\n          return Explanation.match(0f, \"No match on id \" + doc);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final DocIdSet set = getDocIdSet(context, null);\n        if (set == null) {\n          return null;\n        }\n        if (applyLazily && set.bits() != null) {\n          final Bits bits = set.bits();\n          final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return bits.get(approximation.docID());\n            }\n\n            @Override\n            public float matchCost() {\n              return 10; // TODO use cost of bits.get()\n            }\n          };\n          return new ConstantScoreScorer(this, 0f, twoPhase);\n        }\n        final DocIdSetIterator iterator = set.iterator();\n        if (iterator == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, 0f, iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return false;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Filter#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Filter#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer scorer = scorer(context);\n        final boolean match = (scorer != null && scorer.iterator().advance(doc) == doc);\n        if (match) {\n          assert scorer.score() == 0f;\n          return Explanation.match(0f, \"Match on id \" + doc);\n        } else {\n          return Explanation.match(0f, \"No match on id \" + doc);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final DocIdSet set = getDocIdSet(context, null);\n        if (set == null) {\n          return null;\n        }\n        if (applyLazily && set.bits() != null) {\n          final Bits bits = set.bits();\n          final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return bits.get(approximation.docID());\n            }\n\n            @Override\n            public float matchCost() {\n              return 10; // TODO use cost of bits.get()\n            }\n          };\n          return new ConstantScoreScorer(this, 0f, twoPhase);\n        }\n        final DocIdSetIterator iterator = set.iterator();\n        if (iterator == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, 0f, iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return false;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer scorer = scorer(context);\n        final boolean match = (scorer != null && scorer.iterator().advance(doc) == doc);\n        if (match) {\n          assert scorer.score() == 0f;\n          return Explanation.match(0f, \"Match on id \" + doc);\n        } else {\n          return Explanation.match(0f, \"No match on id \" + doc);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final DocIdSet set = getDocIdSet(context, null);\n        if (set == null) {\n          return null;\n        }\n        if (applyLazily && set.bits() != null) {\n          final Bits bits = set.bits();\n          final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return bits.get(approximation.docID());\n            }\n\n            @Override\n            public float matchCost() {\n              return 10; // TODO use cost of bits.get()\n            }\n          };\n          return new ConstantScoreScorer(this, 0f, twoPhase);\n        }\n        final DocIdSetIterator iterator = set.iterator();\n        if (iterator == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, 0f, iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return false;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3","date":1536316907,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Filter#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Filter#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer scorer = scorer(context);\n        final boolean match = (scorer != null && scorer.iterator().advance(doc) == doc);\n        if (match) {\n          assert scorer.score() == 0f;\n          return Explanation.match(0f, \"Match on id \" + doc);\n        } else {\n          return Explanation.match(0f, \"No match on id \" + doc);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final DocIdSet set = getDocIdSet(context, null);\n        if (set == null) {\n          return null;\n        }\n        if (applyLazily && set.bits() != null) {\n          final Bits bits = set.bits();\n          final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return bits.get(approximation.docID());\n            }\n\n            @Override\n            public float matchCost() {\n              return 10; // TODO use cost of bits.get()\n            }\n          };\n          return new ConstantScoreScorer(this, 0f, twoPhase);\n        }\n        final DocIdSetIterator iterator = set.iterator();\n        if (iterator == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, 0f, iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return false;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer scorer = scorer(context);\n        final boolean match = (scorer != null && scorer.iterator().advance(doc) == doc);\n        if (match) {\n          assert scorer.score() == 0f;\n          return Explanation.match(0f, \"Match on id \" + doc);\n        } else {\n          return Explanation.match(0f, \"No match on id \" + doc);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final DocIdSet set = getDocIdSet(context, null);\n        if (set == null) {\n          return null;\n        }\n        if (applyLazily && set.bits() != null) {\n          final Bits bits = set.bits();\n          final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return bits.get(approximation.docID());\n            }\n\n            @Override\n            public float matchCost() {\n              return 10; // TODO use cost of bits.get()\n            }\n          };\n          return new ConstantScoreScorer(this, 0f, twoPhase);\n        }\n        final DocIdSetIterator iterator = set.iterator();\n        if (iterator == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, 0f, iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return false;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c226b0eeb8b028f572020f459851a663a2c064e","date":1542377651,"type":3,"author":"Christophe Bismuth","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Filter#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Filter#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer scorer = scorer(context);\n        final boolean match = (scorer != null && scorer.iterator().advance(doc) == doc);\n        if (match) {\n          assert scorer.score() == 0f;\n          return Explanation.match(0f, \"Match on id \" + doc);\n        } else {\n          return Explanation.match(0f, \"No match on id \" + doc);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final DocIdSet set = getDocIdSet(context, null);\n        if (set == null) {\n          return null;\n        }\n        if (applyLazily && set.bits() != null) {\n          final Bits bits = set.bits();\n          final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return bits.get(approximation.docID());\n            }\n\n            @Override\n            public float matchCost() {\n              return 10; // TODO use cost of bits.get()\n            }\n          };\n          return new ConstantScoreScorer(this, 0f, scoreMode, twoPhase);\n        }\n        final DocIdSetIterator iterator = set.iterator();\n        if (iterator == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, 0f, scoreMode, iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return false;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer scorer = scorer(context);\n        final boolean match = (scorer != null && scorer.iterator().advance(doc) == doc);\n        if (match) {\n          assert scorer.score() == 0f;\n          return Explanation.match(0f, \"Match on id \" + doc);\n        } else {\n          return Explanation.match(0f, \"No match on id \" + doc);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final DocIdSet set = getDocIdSet(context, null);\n        if (set == null) {\n          return null;\n        }\n        if (applyLazily && set.bits() != null) {\n          final Bits bits = set.bits();\n          final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return bits.get(approximation.docID());\n            }\n\n            @Override\n            public float matchCost() {\n              return 10; // TODO use cost of bits.get()\n            }\n          };\n          return new ConstantScoreScorer(this, 0f, twoPhase);\n        }\n        final DocIdSetIterator iterator = set.iterator();\n        if (iterator == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, 0f, iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return false;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7","date":1552575873,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Filter#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Filter#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) {\n    return new Weight(this) {\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer scorer = scorer(context);\n        final boolean match = (scorer != null && scorer.iterator().advance(doc) == doc);\n        if (match) {\n          assert scorer.score() == 0f;\n          return Explanation.match(0f, \"Match on id \" + doc);\n        } else {\n          return Explanation.match(0f, \"No match on id \" + doc);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final DocIdSet set = getDocIdSet(context, null);\n        if (set == null) {\n          return null;\n        }\n        if (applyLazily && set.bits() != null) {\n          final Bits bits = set.bits();\n          final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return bits.get(approximation.docID());\n            }\n\n            @Override\n            public float matchCost() {\n              return 10; // TODO use cost of bits.get()\n            }\n          };\n          return new ConstantScoreScorer(this, 0f, scoreMode, twoPhase);\n        }\n        final DocIdSetIterator iterator = set.iterator();\n        if (iterator == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, 0f, scoreMode, iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return false;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) {\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer scorer = scorer(context);\n        final boolean match = (scorer != null && scorer.iterator().advance(doc) == doc);\n        if (match) {\n          assert scorer.score() == 0f;\n          return Explanation.match(0f, \"Match on id \" + doc);\n        } else {\n          return Explanation.match(0f, \"No match on id \" + doc);\n        }\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final DocIdSet set = getDocIdSet(context, null);\n        if (set == null) {\n          return null;\n        }\n        if (applyLazily && set.bits() != null) {\n          final Bits bits = set.bits();\n          final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return bits.get(approximation.docID());\n            }\n\n            @Override\n            public float matchCost() {\n              return 10; // TODO use cost of bits.get()\n            }\n          };\n          return new ConstantScoreScorer(this, 0f, scoreMode, twoPhase);\n        }\n        final DocIdSetIterator iterator = set.iterator();\n        if (iterator == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, 0f, scoreMode, iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return false;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9c226b0eeb8b028f572020f459851a663a2c064e":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["9c226b0eeb8b028f572020f459851a663a2c064e"],"417142ff08fda9cf0b72d5133e63097a166c6458":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["9c226b0eeb8b028f572020f459851a663a2c064e"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"9c226b0eeb8b028f572020f459851a663a2c064e":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"417142ff08fda9cf0b72d5133e63097a166c6458":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}