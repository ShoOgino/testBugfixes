{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveReplica(String,String).mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveReplica(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Remove replica.\n   * @param nodeId node id\n   * @param coreNodeName coreNodeName\n   */\n  public void simRemoveReplica(String nodeId, String coreNodeName) throws Exception {\n    List<ReplicaInfo> replicas = nodeReplicaMap.computeIfAbsent(nodeId, n -> new ArrayList<>());\n    lock.lock();\n    try {\n      for (int i = 0; i < replicas.size(); i++) {\n        if (coreNodeName.equals(replicas.get(i).getName())) {\n          ReplicaInfo ri = replicas.remove(i);\n          collectionsStatesRef.set(null);\n\n          opDelay(ri.getCollection(), CollectionParams.CollectionAction.DELETEREPLICA.name());\n\n          // update the number of cores in node values, if node is live\n          if (liveNodes.contains(nodeId)) {\n            Integer cores = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.CORES);\n            if (cores == null || cores == 0) {\n              throw new Exception(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.CORES, cores - 1);\n            Integer disk = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.DISK);\n            if (disk == null || disk == 0) {\n              throw new Exception(\"Unexpected value of 'freedisk' (\" + disk + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.DISK, disk + 10);\n          }\n          LOG.trace(\"-- simRemoveReplica {}\", ri);\n          cloudManager.submit(new LeaderElection(Collections.singleton(ri.getCollection()), true));\n          return;\n        }\n      }\n      throw new Exception(\"Replica \" + coreNodeName + \" not found on node \" + nodeId);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7cf5ebf4183939c15e55353b64c57a5182671639"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a4422b331d00607258b0ed3e43934306e67764aa","date":1513943901,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveReplica(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveReplica(String,String).mjava","sourceNew":"  /**\n   * Remove replica.\n   * @param nodeId node id\n   * @param coreNodeName coreNodeName\n   */\n  public void simRemoveReplica(String nodeId, String coreNodeName) throws Exception {\n    List<ReplicaInfo> replicas = nodeReplicaMap.computeIfAbsent(nodeId, n -> new ArrayList<>());\n    lock.lock();\n    try {\n      for (int i = 0; i < replicas.size(); i++) {\n        if (coreNodeName.equals(replicas.get(i).getName())) {\n          ReplicaInfo ri = replicas.remove(i);\n          collectionsStatesRef.set(null);\n\n          opDelay(ri.getCollection(), CollectionParams.CollectionAction.DELETEREPLICA.name());\n\n          // update the number of cores in node values, if node is live\n          if (liveNodes.contains(nodeId)) {\n            Integer cores = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.CORES);\n            if (cores == null || cores == 0) {\n              throw new Exception(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.CORES, cores - 1);\n            Integer disk = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.DISK);\n            if (disk == null || disk == 0) {\n              throw new Exception(\"Unexpected value of 'freedisk' (\" + disk + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.DISK, disk + 10);\n          }\n          LOG.trace(\"-- simRemoveReplica {}\", ri);\n          simRunLeaderElection(Collections.singleton(ri.getCollection()), true);\n          return;\n        }\n      }\n      throw new Exception(\"Replica \" + coreNodeName + \" not found on node \" + nodeId);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove replica.\n   * @param nodeId node id\n   * @param coreNodeName coreNodeName\n   */\n  public void simRemoveReplica(String nodeId, String coreNodeName) throws Exception {\n    List<ReplicaInfo> replicas = nodeReplicaMap.computeIfAbsent(nodeId, n -> new ArrayList<>());\n    lock.lock();\n    try {\n      for (int i = 0; i < replicas.size(); i++) {\n        if (coreNodeName.equals(replicas.get(i).getName())) {\n          ReplicaInfo ri = replicas.remove(i);\n          collectionsStatesRef.set(null);\n\n          opDelay(ri.getCollection(), CollectionParams.CollectionAction.DELETEREPLICA.name());\n\n          // update the number of cores in node values, if node is live\n          if (liveNodes.contains(nodeId)) {\n            Integer cores = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.CORES);\n            if (cores == null || cores == 0) {\n              throw new Exception(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.CORES, cores - 1);\n            Integer disk = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.DISK);\n            if (disk == null || disk == 0) {\n              throw new Exception(\"Unexpected value of 'freedisk' (\" + disk + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.DISK, disk + 10);\n          }\n          LOG.trace(\"-- simRemoveReplica {}\", ri);\n          cloudManager.submit(new LeaderElection(Collections.singleton(ri.getCollection()), true));\n          return;\n        }\n      }\n      throw new Exception(\"Replica \" + coreNodeName + \" not found on node \" + nodeId);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7cf5ebf4183939c15e55353b64c57a5182671639","date":1516815713,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveReplica(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveReplica(String,String).mjava","sourceNew":"  /**\n   * Remove replica.\n   * @param nodeId node id\n   * @param coreNodeName coreNodeName\n   */\n  public void simRemoveReplica(String nodeId, String coreNodeName) throws Exception {\n    List<ReplicaInfo> replicas = nodeReplicaMap.computeIfAbsent(nodeId, n -> new ArrayList<>());\n    lock.lock();\n    try {\n      for (int i = 0; i < replicas.size(); i++) {\n        if (coreNodeName.equals(replicas.get(i).getName())) {\n          ReplicaInfo ri = replicas.remove(i);\n          collectionsStatesRef.set(null);\n\n          opDelay(ri.getCollection(), CollectionParams.CollectionAction.DELETEREPLICA.name());\n\n          // update the number of cores in node values, if node is live\n          if (liveNodes.contains(nodeId)) {\n            Integer cores = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.CORES);\n            if (cores == null || cores == 0) {\n              throw new Exception(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.CORES, cores - 1);\n            Integer disk = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.DISK);\n            if (disk == null || disk == 0) {\n              throw new Exception(\"Unexpected value of 'freedisk' (\" + disk + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.DISK, disk + 1);\n          }\n          LOG.trace(\"-- simRemoveReplica {}\", ri);\n          simRunLeaderElection(Collections.singleton(ri.getCollection()), true);\n          return;\n        }\n      }\n      throw new Exception(\"Replica \" + coreNodeName + \" not found on node \" + nodeId);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove replica.\n   * @param nodeId node id\n   * @param coreNodeName coreNodeName\n   */\n  public void simRemoveReplica(String nodeId, String coreNodeName) throws Exception {\n    List<ReplicaInfo> replicas = nodeReplicaMap.computeIfAbsent(nodeId, n -> new ArrayList<>());\n    lock.lock();\n    try {\n      for (int i = 0; i < replicas.size(); i++) {\n        if (coreNodeName.equals(replicas.get(i).getName())) {\n          ReplicaInfo ri = replicas.remove(i);\n          collectionsStatesRef.set(null);\n\n          opDelay(ri.getCollection(), CollectionParams.CollectionAction.DELETEREPLICA.name());\n\n          // update the number of cores in node values, if node is live\n          if (liveNodes.contains(nodeId)) {\n            Integer cores = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.CORES);\n            if (cores == null || cores == 0) {\n              throw new Exception(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.CORES, cores - 1);\n            Integer disk = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.DISK);\n            if (disk == null || disk == 0) {\n              throw new Exception(\"Unexpected value of 'freedisk' (\" + disk + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.DISK, disk + 10);\n          }\n          LOG.trace(\"-- simRemoveReplica {}\", ri);\n          simRunLeaderElection(Collections.singleton(ri.getCollection()), true);\n          return;\n        }\n      }\n      throw new Exception(\"Replica \" + coreNodeName + \" not found on node \" + nodeId);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441","date":1516881857,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveReplica(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveReplica(String,String).mjava","sourceNew":"  /**\n   * Remove replica.\n   * @param nodeId node id\n   * @param coreNodeName coreNodeName\n   */\n  public void simRemoveReplica(String nodeId, String coreNodeName) throws Exception {\n    List<ReplicaInfo> replicas = nodeReplicaMap.computeIfAbsent(nodeId, n -> new ArrayList<>());\n    lock.lock();\n    try {\n      for (int i = 0; i < replicas.size(); i++) {\n        if (coreNodeName.equals(replicas.get(i).getName())) {\n          ReplicaInfo ri = replicas.remove(i);\n          collectionsStatesRef.set(null);\n\n          opDelay(ri.getCollection(), CollectionParams.CollectionAction.DELETEREPLICA.name());\n\n          // update the number of cores in node values, if node is live\n          if (liveNodes.contains(nodeId)) {\n            Integer cores = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.CORES);\n            if (cores == null || cores == 0) {\n              throw new Exception(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.CORES, cores - 1);\n            Integer disk = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.DISK);\n            if (disk == null || disk == 0) {\n              throw new Exception(\"Unexpected value of 'freedisk' (\" + disk + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.DISK, disk + 1);\n          }\n          LOG.trace(\"-- simRemoveReplica {}\", ri);\n          simRunLeaderElection(Collections.singleton(ri.getCollection()), true);\n          return;\n        }\n      }\n      throw new Exception(\"Replica \" + coreNodeName + \" not found on node \" + nodeId);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove replica.\n   * @param nodeId node id\n   * @param coreNodeName coreNodeName\n   */\n  public void simRemoveReplica(String nodeId, String coreNodeName) throws Exception {\n    List<ReplicaInfo> replicas = nodeReplicaMap.computeIfAbsent(nodeId, n -> new ArrayList<>());\n    lock.lock();\n    try {\n      for (int i = 0; i < replicas.size(); i++) {\n        if (coreNodeName.equals(replicas.get(i).getName())) {\n          ReplicaInfo ri = replicas.remove(i);\n          collectionsStatesRef.set(null);\n\n          opDelay(ri.getCollection(), CollectionParams.CollectionAction.DELETEREPLICA.name());\n\n          // update the number of cores in node values, if node is live\n          if (liveNodes.contains(nodeId)) {\n            Integer cores = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.CORES);\n            if (cores == null || cores == 0) {\n              throw new Exception(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.CORES, cores - 1);\n            Integer disk = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.DISK);\n            if (disk == null || disk == 0) {\n              throw new Exception(\"Unexpected value of 'freedisk' (\" + disk + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.DISK, disk + 10);\n          }\n          LOG.trace(\"-- simRemoveReplica {}\", ri);\n          simRunLeaderElection(Collections.singleton(ri.getCollection()), true);\n          return;\n        }\n      }\n      throw new Exception(\"Replica \" + coreNodeName + \" not found on node \" + nodeId);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1","date":1523453934,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveReplica(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveReplica(String,String).mjava","sourceNew":"  /**\n   * Remove replica.\n   * @param nodeId node id\n   * @param coreNodeName coreNodeName\n   */\n  public void simRemoveReplica(String nodeId, String coreNodeName) throws Exception {\n    List<ReplicaInfo> replicas = nodeReplicaMap.computeIfAbsent(nodeId, n -> new ArrayList<>());\n    lock.lockInterruptibly();\n    try {\n      for (int i = 0; i < replicas.size(); i++) {\n        if (coreNodeName.equals(replicas.get(i).getName())) {\n          ReplicaInfo ri = replicas.remove(i);\n          collectionsStatesRef.set(null);\n\n          opDelay(ri.getCollection(), CollectionParams.CollectionAction.DELETEREPLICA.name());\n\n          // update the number of cores in node values, if node is live\n          if (liveNodes.contains(nodeId)) {\n            Integer cores = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.CORES);\n            if (cores == null || cores == 0) {\n              throw new Exception(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.CORES, cores - 1);\n            Integer disk = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.DISK);\n            if (disk == null || disk == 0) {\n              throw new Exception(\"Unexpected value of 'freedisk' (\" + disk + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.DISK, disk + 1);\n          }\n          LOG.trace(\"-- simRemoveReplica {}\", ri);\n          simRunLeaderElection(Collections.singleton(ri.getCollection()), true);\n          return;\n        }\n      }\n      throw new Exception(\"Replica \" + coreNodeName + \" not found on node \" + nodeId);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove replica.\n   * @param nodeId node id\n   * @param coreNodeName coreNodeName\n   */\n  public void simRemoveReplica(String nodeId, String coreNodeName) throws Exception {\n    List<ReplicaInfo> replicas = nodeReplicaMap.computeIfAbsent(nodeId, n -> new ArrayList<>());\n    lock.lock();\n    try {\n      for (int i = 0; i < replicas.size(); i++) {\n        if (coreNodeName.equals(replicas.get(i).getName())) {\n          ReplicaInfo ri = replicas.remove(i);\n          collectionsStatesRef.set(null);\n\n          opDelay(ri.getCollection(), CollectionParams.CollectionAction.DELETEREPLICA.name());\n\n          // update the number of cores in node values, if node is live\n          if (liveNodes.contains(nodeId)) {\n            Integer cores = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.CORES);\n            if (cores == null || cores == 0) {\n              throw new Exception(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.CORES, cores - 1);\n            Integer disk = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.DISK);\n            if (disk == null || disk == 0) {\n              throw new Exception(\"Unexpected value of 'freedisk' (\" + disk + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.DISK, disk + 1);\n          }\n          LOG.trace(\"-- simRemoveReplica {}\", ri);\n          simRunLeaderElection(Collections.singleton(ri.getCollection()), true);\n          return;\n        }\n      }\n      throw new Exception(\"Replica \" + coreNodeName + \" not found on node \" + nodeId);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveReplica(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveReplica(String,String).mjava","sourceNew":"  /**\n   * Remove replica.\n   * @param nodeId node id\n   * @param coreNodeName coreNodeName\n   */\n  public void simRemoveReplica(String nodeId, String coreNodeName) throws Exception {\n    List<ReplicaInfo> replicas = nodeReplicaMap.computeIfAbsent(nodeId, n -> new ArrayList<>());\n    lock.lockInterruptibly();\n    try {\n      for (int i = 0; i < replicas.size(); i++) {\n        if (coreNodeName.equals(replicas.get(i).getName())) {\n          ReplicaInfo ri = replicas.remove(i);\n          collectionsStatesRef.set(null);\n\n          opDelay(ri.getCollection(), CollectionParams.CollectionAction.DELETEREPLICA.name());\n\n          // update the number of cores in node values, if node is live\n          if (liveNodes.contains(nodeId)) {\n            Integer cores = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.CORES);\n            if (cores == null || cores == 0) {\n              throw new Exception(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.CORES, cores - 1);\n            Integer disk = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.DISK);\n            if (disk == null || disk == 0) {\n              throw new Exception(\"Unexpected value of 'freedisk' (\" + disk + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.DISK, disk + 1);\n          }\n          LOG.trace(\"-- simRemoveReplica {}\", ri);\n          simRunLeaderElection(Collections.singleton(ri.getCollection()), true);\n          return;\n        }\n      }\n      throw new Exception(\"Replica \" + coreNodeName + \" not found on node \" + nodeId);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove replica.\n   * @param nodeId node id\n   * @param coreNodeName coreNodeName\n   */\n  public void simRemoveReplica(String nodeId, String coreNodeName) throws Exception {\n    List<ReplicaInfo> replicas = nodeReplicaMap.computeIfAbsent(nodeId, n -> new ArrayList<>());\n    lock.lock();\n    try {\n      for (int i = 0; i < replicas.size(); i++) {\n        if (coreNodeName.equals(replicas.get(i).getName())) {\n          ReplicaInfo ri = replicas.remove(i);\n          collectionsStatesRef.set(null);\n\n          opDelay(ri.getCollection(), CollectionParams.CollectionAction.DELETEREPLICA.name());\n\n          // update the number of cores in node values, if node is live\n          if (liveNodes.contains(nodeId)) {\n            Integer cores = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.CORES);\n            if (cores == null || cores == 0) {\n              throw new Exception(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.CORES, cores - 1);\n            Integer disk = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.DISK);\n            if (disk == null || disk == 0) {\n              throw new Exception(\"Unexpected value of 'freedisk' (\" + disk + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.DISK, disk + 1);\n          }\n          LOG.trace(\"-- simRemoveReplica {}\", ri);\n          simRunLeaderElection(Collections.singleton(ri.getCollection()), true);\n          return;\n        }\n      }\n      throw new Exception(\"Replica \" + coreNodeName + \" not found on node \" + nodeId);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad60b6945c360ff89899d716d9cdec8dd674e2a0","date":1528114819,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveReplica(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveReplica(String,String).mjava","sourceNew":"  /**\n   * Remove replica.\n   * @param nodeId node id\n   * @param coreNodeName coreNodeName\n   */\n  public void simRemoveReplica(String nodeId, String coreNodeName) throws Exception {\n    lock.lockInterruptibly();\n    List<ReplicaInfo> replicas = nodeReplicaMap.computeIfAbsent(nodeId, n -> new ArrayList<>());\n    try {\n      for (int i = 0; i < replicas.size(); i++) {\n        if (coreNodeName.equals(replicas.get(i).getName())) {\n          ReplicaInfo ri = replicas.remove(i);\n          collectionsStatesRef.set(null);\n\n          opDelay(ri.getCollection(), CollectionParams.CollectionAction.DELETEREPLICA.name());\n\n          // update the number of cores in node values, if node is live\n          if (liveNodes.contains(nodeId)) {\n            Integer cores = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.CORES);\n            if (cores == null || cores == 0) {\n              throw new Exception(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.CORES, cores - 1);\n            Integer disk = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.DISK);\n            if (disk == null || disk == 0) {\n              throw new Exception(\"Unexpected value of 'freedisk' (\" + disk + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.DISK, disk + 1);\n          }\n          LOG.trace(\"-- simRemoveReplica {}\", ri);\n          simRunLeaderElection(Collections.singleton(ri.getCollection()), true);\n          return;\n        }\n      }\n      throw new Exception(\"Replica \" + coreNodeName + \" not found on node \" + nodeId);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove replica.\n   * @param nodeId node id\n   * @param coreNodeName coreNodeName\n   */\n  public void simRemoveReplica(String nodeId, String coreNodeName) throws Exception {\n    List<ReplicaInfo> replicas = nodeReplicaMap.computeIfAbsent(nodeId, n -> new ArrayList<>());\n    lock.lockInterruptibly();\n    try {\n      for (int i = 0; i < replicas.size(); i++) {\n        if (coreNodeName.equals(replicas.get(i).getName())) {\n          ReplicaInfo ri = replicas.remove(i);\n          collectionsStatesRef.set(null);\n\n          opDelay(ri.getCollection(), CollectionParams.CollectionAction.DELETEREPLICA.name());\n\n          // update the number of cores in node values, if node is live\n          if (liveNodes.contains(nodeId)) {\n            Integer cores = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.CORES);\n            if (cores == null || cores == 0) {\n              throw new Exception(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.CORES, cores - 1);\n            Integer disk = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.DISK);\n            if (disk == null || disk == 0) {\n              throw new Exception(\"Unexpected value of 'freedisk' (\" + disk + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.DISK, disk + 1);\n          }\n          LOG.trace(\"-- simRemoveReplica {}\", ri);\n          simRunLeaderElection(Collections.singleton(ri.getCollection()), true);\n          return;\n        }\n      }\n      throw new Exception(\"Replica \" + coreNodeName + \" not found on node \" + nodeId);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveReplica(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveReplica(String,String).mjava","sourceNew":"  /**\n   * Remove replica.\n   * @param nodeId node id\n   * @param coreNodeName coreNodeName\n   */\n  public void simRemoveReplica(String nodeId, String coreNodeName) throws Exception {\n    lock.lockInterruptibly();\n    List<ReplicaInfo> replicas = nodeReplicaMap.computeIfAbsent(nodeId, n -> new ArrayList<>());\n    try {\n      for (int i = 0; i < replicas.size(); i++) {\n        if (coreNodeName.equals(replicas.get(i).getName())) {\n          ReplicaInfo ri = replicas.remove(i);\n          collectionsStatesRef.set(null);\n\n          opDelay(ri.getCollection(), CollectionParams.CollectionAction.DELETEREPLICA.name());\n\n          // update the number of cores in node values, if node is live\n          if (liveNodes.contains(nodeId)) {\n            Integer cores = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.CORES);\n            if (cores == null || cores == 0) {\n              throw new Exception(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.CORES, cores - 1);\n            Integer disk = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.DISK);\n            if (disk == null || disk == 0) {\n              throw new Exception(\"Unexpected value of 'freedisk' (\" + disk + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.DISK, disk + 1);\n          }\n          LOG.trace(\"-- simRemoveReplica {}\", ri);\n          simRunLeaderElection(Collections.singleton(ri.getCollection()), true);\n          return;\n        }\n      }\n      throw new Exception(\"Replica \" + coreNodeName + \" not found on node \" + nodeId);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove replica.\n   * @param nodeId node id\n   * @param coreNodeName coreNodeName\n   */\n  public void simRemoveReplica(String nodeId, String coreNodeName) throws Exception {\n    List<ReplicaInfo> replicas = nodeReplicaMap.computeIfAbsent(nodeId, n -> new ArrayList<>());\n    lock.lockInterruptibly();\n    try {\n      for (int i = 0; i < replicas.size(); i++) {\n        if (coreNodeName.equals(replicas.get(i).getName())) {\n          ReplicaInfo ri = replicas.remove(i);\n          collectionsStatesRef.set(null);\n\n          opDelay(ri.getCollection(), CollectionParams.CollectionAction.DELETEREPLICA.name());\n\n          // update the number of cores in node values, if node is live\n          if (liveNodes.contains(nodeId)) {\n            Integer cores = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.CORES);\n            if (cores == null || cores == 0) {\n              throw new Exception(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.CORES, cores - 1);\n            Integer disk = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.DISK);\n            if (disk == null || disk == 0) {\n              throw new Exception(\"Unexpected value of 'freedisk' (\" + disk + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.DISK, disk + 1);\n          }\n          LOG.trace(\"-- simRemoveReplica {}\", ri);\n          simRunLeaderElection(Collections.singleton(ri.getCollection()), true);\n          return;\n        }\n      }\n      throw new Exception(\"Replica \" + coreNodeName + \" not found on node \" + nodeId);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveReplica(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveReplica(String,String).mjava","sourceNew":"  /**\n   * Remove replica.\n   * @param nodeId node id\n   * @param coreNodeName coreNodeName\n   */\n  public void simRemoveReplica(String nodeId, String coreNodeName) throws Exception {\n    lock.lockInterruptibly();\n    List<ReplicaInfo> replicas = nodeReplicaMap.computeIfAbsent(nodeId, n -> new ArrayList<>());\n    try {\n      for (int i = 0; i < replicas.size(); i++) {\n        if (coreNodeName.equals(replicas.get(i).getName())) {\n          ReplicaInfo ri = replicas.remove(i);\n          collectionsStatesRef.set(null);\n\n          opDelay(ri.getCollection(), CollectionParams.CollectionAction.DELETEREPLICA.name());\n\n          // update the number of cores in node values, if node is live\n          if (liveNodes.contains(nodeId)) {\n            Integer cores = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.CORES);\n            if (cores == null || cores == 0) {\n              throw new Exception(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.CORES, cores - 1);\n            Integer disk = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.DISK);\n            if (disk == null || disk == 0) {\n              throw new Exception(\"Unexpected value of 'freedisk' (\" + disk + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.DISK, disk + 1);\n          }\n          LOG.trace(\"-- simRemoveReplica {}\", ri);\n          simRunLeaderElection(Collections.singleton(ri.getCollection()), true);\n          return;\n        }\n      }\n      throw new Exception(\"Replica \" + coreNodeName + \" not found on node \" + nodeId);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove replica.\n   * @param nodeId node id\n   * @param coreNodeName coreNodeName\n   */\n  public void simRemoveReplica(String nodeId, String coreNodeName) throws Exception {\n    List<ReplicaInfo> replicas = nodeReplicaMap.computeIfAbsent(nodeId, n -> new ArrayList<>());\n    lock.lockInterruptibly();\n    try {\n      for (int i = 0; i < replicas.size(); i++) {\n        if (coreNodeName.equals(replicas.get(i).getName())) {\n          ReplicaInfo ri = replicas.remove(i);\n          collectionsStatesRef.set(null);\n\n          opDelay(ri.getCollection(), CollectionParams.CollectionAction.DELETEREPLICA.name());\n\n          // update the number of cores in node values, if node is live\n          if (liveNodes.contains(nodeId)) {\n            Integer cores = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.CORES);\n            if (cores == null || cores == 0) {\n              throw new Exception(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.CORES, cores - 1);\n            Integer disk = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.DISK);\n            if (disk == null || disk == 0) {\n              throw new Exception(\"Unexpected value of 'freedisk' (\" + disk + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.DISK, disk + 1);\n          }\n          LOG.trace(\"-- simRemoveReplica {}\", ri);\n          simRunLeaderElection(Collections.singleton(ri.getCollection()), true);\n          return;\n        }\n      }\n      throw new Exception(\"Replica \" + coreNodeName + \" not found on node \" + nodeId);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"042b92cf48996255bedb0c3c4bf772d7e06e4dea","date":1534272102,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveReplica(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveReplica(String,String).mjava","sourceNew":"  /**\n   * Remove replica.\n   * @param nodeId node id\n   * @param coreNodeName coreNodeName\n   */\n  public void simRemoveReplica(String nodeId, String coreNodeName) throws Exception {\n    ensureNotClosed();\n    lock.lockInterruptibly();\n    List<ReplicaInfo> replicas = nodeReplicaMap.computeIfAbsent(nodeId, n -> new ArrayList<>());\n    try {\n      for (int i = 0; i < replicas.size(); i++) {\n        if (coreNodeName.equals(replicas.get(i).getName())) {\n          ReplicaInfo ri = replicas.remove(i);\n          collectionsStatesRef.set(null);\n\n          opDelay(ri.getCollection(), CollectionParams.CollectionAction.DELETEREPLICA.name());\n\n          // update the number of cores in node values, if node is live\n          if (liveNodes.contains(nodeId)) {\n            Integer cores = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.CORES);\n            if (cores == null || cores == 0) {\n              throw new Exception(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.CORES, cores - 1);\n            Integer disk = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.DISK);\n            if (disk == null || disk == 0) {\n              throw new Exception(\"Unexpected value of 'freedisk' (\" + disk + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.DISK, disk + 1);\n          }\n          LOG.trace(\"-- simRemoveReplica {}\", ri);\n          simRunLeaderElection(Collections.singleton(ri.getCollection()), true);\n          return;\n        }\n      }\n      throw new Exception(\"Replica \" + coreNodeName + \" not found on node \" + nodeId);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove replica.\n   * @param nodeId node id\n   * @param coreNodeName coreNodeName\n   */\n  public void simRemoveReplica(String nodeId, String coreNodeName) throws Exception {\n    lock.lockInterruptibly();\n    List<ReplicaInfo> replicas = nodeReplicaMap.computeIfAbsent(nodeId, n -> new ArrayList<>());\n    try {\n      for (int i = 0; i < replicas.size(); i++) {\n        if (coreNodeName.equals(replicas.get(i).getName())) {\n          ReplicaInfo ri = replicas.remove(i);\n          collectionsStatesRef.set(null);\n\n          opDelay(ri.getCollection(), CollectionParams.CollectionAction.DELETEREPLICA.name());\n\n          // update the number of cores in node values, if node is live\n          if (liveNodes.contains(nodeId)) {\n            Integer cores = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.CORES);\n            if (cores == null || cores == 0) {\n              throw new Exception(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.CORES, cores - 1);\n            Integer disk = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.DISK);\n            if (disk == null || disk == 0) {\n              throw new Exception(\"Unexpected value of 'freedisk' (\" + disk + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.DISK, disk + 1);\n          }\n          LOG.trace(\"-- simRemoveReplica {}\", ri);\n          simRunLeaderElection(Collections.singleton(ri.getCollection()), true);\n          return;\n        }\n      }\n      throw new Exception(\"Replica \" + coreNodeName + \" not found on node \" + nodeId);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveReplica(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveReplica(String,String).mjava","sourceNew":"  /**\n   * Remove replica.\n   * @param nodeId node id\n   * @param coreNodeName coreNodeName\n   */\n  public void simRemoveReplica(String nodeId, String coreNodeName) throws Exception {\n    ensureNotClosed();\n    lock.lockInterruptibly();\n    List<ReplicaInfo> replicas = nodeReplicaMap.computeIfAbsent(nodeId, n -> new ArrayList<>());\n    try {\n      for (int i = 0; i < replicas.size(); i++) {\n        if (coreNodeName.equals(replicas.get(i).getName())) {\n          ReplicaInfo ri = replicas.remove(i);\n          collectionsStatesRef.set(null);\n\n          opDelay(ri.getCollection(), CollectionParams.CollectionAction.DELETEREPLICA.name());\n\n          // update the number of cores in node values, if node is live\n          if (liveNodes.contains(nodeId)) {\n            Integer cores = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.CORES);\n            if (cores == null || cores == 0) {\n              throw new Exception(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.CORES, cores - 1);\n            Integer disk = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.DISK);\n            if (disk == null || disk == 0) {\n              throw new Exception(\"Unexpected value of 'freedisk' (\" + disk + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.DISK, disk + 1);\n          }\n          log.trace(\"-- simRemoveReplica {}\", ri);\n          simRunLeaderElection(Collections.singleton(ri.getCollection()), true);\n          return;\n        }\n      }\n      throw new Exception(\"Replica \" + coreNodeName + \" not found on node \" + nodeId);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove replica.\n   * @param nodeId node id\n   * @param coreNodeName coreNodeName\n   */\n  public void simRemoveReplica(String nodeId, String coreNodeName) throws Exception {\n    ensureNotClosed();\n    lock.lockInterruptibly();\n    List<ReplicaInfo> replicas = nodeReplicaMap.computeIfAbsent(nodeId, n -> new ArrayList<>());\n    try {\n      for (int i = 0; i < replicas.size(); i++) {\n        if (coreNodeName.equals(replicas.get(i).getName())) {\n          ReplicaInfo ri = replicas.remove(i);\n          collectionsStatesRef.set(null);\n\n          opDelay(ri.getCollection(), CollectionParams.CollectionAction.DELETEREPLICA.name());\n\n          // update the number of cores in node values, if node is live\n          if (liveNodes.contains(nodeId)) {\n            Integer cores = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.CORES);\n            if (cores == null || cores == 0) {\n              throw new Exception(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.CORES, cores - 1);\n            Integer disk = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.DISK);\n            if (disk == null || disk == 0) {\n              throw new Exception(\"Unexpected value of 'freedisk' (\" + disk + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.DISK, disk + 1);\n          }\n          LOG.trace(\"-- simRemoveReplica {}\", ri);\n          simRunLeaderElection(Collections.singleton(ri.getCollection()), true);\n          return;\n        }\n      }\n      throw new Exception(\"Replica \" + coreNodeName + \" not found on node \" + nodeId);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc18bc8ea2e2c1e308757ff50671c774438e9f3e","date":1538052583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveReplica(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveReplica(String,String).mjava","sourceNew":"  /**\n   * Remove replica.\n   * @param nodeId node id\n   * @param coreNodeName coreNodeName\n   */\n  public void simRemoveReplica(String nodeId, String coreNodeName) throws Exception {\n    ensureNotClosed();\n    lock.lockInterruptibly();\n    List<ReplicaInfo> replicas = nodeReplicaMap.computeIfAbsent(nodeId, n -> new ArrayList<>());\n    try {\n      for (int i = 0; i < replicas.size(); i++) {\n        if (coreNodeName.equals(replicas.get(i).getName())) {\n          ReplicaInfo ri = replicas.remove(i);\n          colShardReplicaMap.computeIfAbsent(ri.getCollection(), c -> new ConcurrentHashMap<>())\n              .computeIfAbsent(ri.getShard(), s -> new ArrayList<>())\n              .remove(ri);\n          collectionsStatesRef.set(null);\n\n          opDelay(ri.getCollection(), CollectionParams.CollectionAction.DELETEREPLICA.name());\n\n          // update the number of cores in node values, if node is live\n          if (liveNodes.contains(nodeId)) {\n            Integer cores = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.CORES);\n            if (cores == null || cores == 0) {\n              throw new Exception(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.CORES, cores - 1);\n            Integer disk = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.DISK);\n            if (disk == null || disk == 0) {\n              throw new Exception(\"Unexpected value of 'freedisk' (\" + disk + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.DISK, disk + 1);\n          }\n          log.trace(\"-- simRemoveReplica {}\", ri);\n          simRunLeaderElection(Collections.singleton(ri.getCollection()), true);\n          return;\n        }\n      }\n      throw new Exception(\"Replica \" + coreNodeName + \" not found on node \" + nodeId);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove replica.\n   * @param nodeId node id\n   * @param coreNodeName coreNodeName\n   */\n  public void simRemoveReplica(String nodeId, String coreNodeName) throws Exception {\n    ensureNotClosed();\n    lock.lockInterruptibly();\n    List<ReplicaInfo> replicas = nodeReplicaMap.computeIfAbsent(nodeId, n -> new ArrayList<>());\n    try {\n      for (int i = 0; i < replicas.size(); i++) {\n        if (coreNodeName.equals(replicas.get(i).getName())) {\n          ReplicaInfo ri = replicas.remove(i);\n          collectionsStatesRef.set(null);\n\n          opDelay(ri.getCollection(), CollectionParams.CollectionAction.DELETEREPLICA.name());\n\n          // update the number of cores in node values, if node is live\n          if (liveNodes.contains(nodeId)) {\n            Integer cores = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.CORES);\n            if (cores == null || cores == 0) {\n              throw new Exception(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.CORES, cores - 1);\n            Integer disk = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.DISK);\n            if (disk == null || disk == 0) {\n              throw new Exception(\"Unexpected value of 'freedisk' (\" + disk + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.DISK, disk + 1);\n          }\n          log.trace(\"-- simRemoveReplica {}\", ri);\n          simRunLeaderElection(Collections.singleton(ri.getCollection()), true);\n          return;\n        }\n      }\n      throw new Exception(\"Replica \" + coreNodeName + \" not found on node \" + nodeId);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66b87d86427dfa19b2ef36b66de83aa9655cea33","date":1552627668,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveReplica(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveReplica(String,String).mjava","sourceNew":"  /**\n   * Remove replica.\n   * @param nodeId node id\n   * @param coreNodeName coreNodeName\n   */\n  public void simRemoveReplica(String nodeId, String coreNodeName) throws Exception {\n    ensureNotClosed();\n    \n    lock.lockInterruptibly();\n    try {\n      final List<ReplicaInfo> replicas = nodeReplicaMap.computeIfAbsent\n        (nodeId, Utils.NEW_SYNCHRONIZED_ARRAYLIST_FUN);\n      synchronized (replicas) {\n        for (int i = 0; i < replicas.size(); i++) {\n          if (coreNodeName.equals(replicas.get(i).getName())) {\n            ReplicaInfo ri = replicas.remove(i);\n            colShardReplicaMap.computeIfAbsent(ri.getCollection(), c -> new ConcurrentHashMap<>())\n              .computeIfAbsent(ri.getShard(), s -> new ArrayList<>())\n              .remove(ri);\n            collectionsStatesRef.set(null);\n\n            opDelay(ri.getCollection(), CollectionParams.CollectionAction.DELETEREPLICA.name());\n\n            // update the number of cores in node values, if node is live\n            if (liveNodes.contains(nodeId)) {\n              Integer cores = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.CORES);\n              if (cores == null || cores == 0) {\n                throw new Exception(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + nodeId);\n              }\n              cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.CORES, cores - 1);\n              Integer disk = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.DISK);\n              if (disk == null || disk == 0) {\n                throw new Exception(\"Unexpected value of 'freedisk' (\" + disk + \") on node: \" + nodeId);\n              }\n              cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.DISK, disk + 1);\n            }\n            log.trace(\"-- simRemoveReplica {}\", ri);\n            simRunLeaderElection(ri.getCollection(), ri.getShard(), true);\n                                 \n            return;\n          }\n        }\n      }\n      throw new Exception(\"Replica \" + coreNodeName + \" not found on node \" + nodeId);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove replica.\n   * @param nodeId node id\n   * @param coreNodeName coreNodeName\n   */\n  public void simRemoveReplica(String nodeId, String coreNodeName) throws Exception {\n    ensureNotClosed();\n    lock.lockInterruptibly();\n    List<ReplicaInfo> replicas = nodeReplicaMap.computeIfAbsent(nodeId, n -> new ArrayList<>());\n    try {\n      for (int i = 0; i < replicas.size(); i++) {\n        if (coreNodeName.equals(replicas.get(i).getName())) {\n          ReplicaInfo ri = replicas.remove(i);\n          colShardReplicaMap.computeIfAbsent(ri.getCollection(), c -> new ConcurrentHashMap<>())\n              .computeIfAbsent(ri.getShard(), s -> new ArrayList<>())\n              .remove(ri);\n          collectionsStatesRef.set(null);\n\n          opDelay(ri.getCollection(), CollectionParams.CollectionAction.DELETEREPLICA.name());\n\n          // update the number of cores in node values, if node is live\n          if (liveNodes.contains(nodeId)) {\n            Integer cores = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.CORES);\n            if (cores == null || cores == 0) {\n              throw new Exception(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.CORES, cores - 1);\n            Integer disk = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.DISK);\n            if (disk == null || disk == 0) {\n              throw new Exception(\"Unexpected value of 'freedisk' (\" + disk + \") on node: \" + nodeId);\n            }\n            cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.DISK, disk + 1);\n          }\n          log.trace(\"-- simRemoveReplica {}\", ri);\n          simRunLeaderElection(Collections.singleton(ri.getCollection()), true);\n          return;\n        }\n      }\n      throw new Exception(\"Replica \" + coreNodeName + \" not found on node \" + nodeId);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveReplica(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveReplica(String,String).mjava","sourceNew":"  /**\n   * Remove replica.\n   * @param nodeId node id\n   * @param coreNodeName coreNodeName\n   */\n  public void simRemoveReplica(String nodeId, String coreNodeName) throws Exception {\n    ensureNotClosed();\n    \n    lock.lockInterruptibly();\n    try {\n      final List<ReplicaInfo> replicas = nodeReplicaMap.computeIfAbsent\n        (nodeId, Utils.NEW_SYNCHRONIZED_ARRAYLIST_FUN);\n      synchronized (replicas) {\n        for (int i = 0; i < replicas.size(); i++) {\n          if (coreNodeName.equals(replicas.get(i).getName())) {\n            ReplicaInfo ri = replicas.remove(i);\n            colShardReplicaMap.computeIfAbsent(ri.getCollection(), c -> new ConcurrentHashMap<>())\n              .computeIfAbsent(ri.getShard(), s -> new ArrayList<>())\n              .remove(ri);\n            collectionsStatesRef.set(null);\n\n            opDelay(ri.getCollection(), CollectionParams.CollectionAction.DELETEREPLICA.name());\n\n            // update the number of cores in node values, if node is live\n            if (liveNodes.contains(nodeId)) {\n              Integer cores = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.CORES);\n              if (cores == null || cores == 0) {\n                throw new Exception(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + nodeId);\n              }\n              cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.CORES, cores - 1);\n              Number disk = (Number)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.DISK);\n              if (disk == null || disk.doubleValue() == 0.0) {\n                throw new Exception(\"Unexpected value of 'freedisk' (\" + disk + \") on node: \" + nodeId);\n              }\n              if (ri.getVariable(Type.CORE_IDX.metricsAttribute) == null) {\n                throw new RuntimeException(\"Missing replica size: \" + ri);\n              }\n              long replicaSize = ((Number)ri.getVariable(Type.CORE_IDX.metricsAttribute)).longValue();\n              Number replicaSizeGB = (Number)Type.CORE_IDX.convertVal(replicaSize);\n              cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.DISK, disk.doubleValue() + replicaSizeGB.doubleValue());\n            }\n            log.trace(\"-- simRemoveReplica {}\", ri);\n            simRunLeaderElection(ri.getCollection(), ri.getShard(), true);\n                                 \n            return;\n          }\n        }\n      }\n      throw new Exception(\"Replica \" + coreNodeName + \" not found on node \" + nodeId);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove replica.\n   * @param nodeId node id\n   * @param coreNodeName coreNodeName\n   */\n  public void simRemoveReplica(String nodeId, String coreNodeName) throws Exception {\n    ensureNotClosed();\n    \n    lock.lockInterruptibly();\n    try {\n      final List<ReplicaInfo> replicas = nodeReplicaMap.computeIfAbsent\n        (nodeId, Utils.NEW_SYNCHRONIZED_ARRAYLIST_FUN);\n      synchronized (replicas) {\n        for (int i = 0; i < replicas.size(); i++) {\n          if (coreNodeName.equals(replicas.get(i).getName())) {\n            ReplicaInfo ri = replicas.remove(i);\n            colShardReplicaMap.computeIfAbsent(ri.getCollection(), c -> new ConcurrentHashMap<>())\n              .computeIfAbsent(ri.getShard(), s -> new ArrayList<>())\n              .remove(ri);\n            collectionsStatesRef.set(null);\n\n            opDelay(ri.getCollection(), CollectionParams.CollectionAction.DELETEREPLICA.name());\n\n            // update the number of cores in node values, if node is live\n            if (liveNodes.contains(nodeId)) {\n              Integer cores = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.CORES);\n              if (cores == null || cores == 0) {\n                throw new Exception(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + nodeId);\n              }\n              cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.CORES, cores - 1);\n              Integer disk = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.DISK);\n              if (disk == null || disk == 0) {\n                throw new Exception(\"Unexpected value of 'freedisk' (\" + disk + \") on node: \" + nodeId);\n              }\n              cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.DISK, disk + 1);\n            }\n            log.trace(\"-- simRemoveReplica {}\", ri);\n            simRunLeaderElection(ri.getCollection(), ri.getShard(), true);\n                                 \n            return;\n          }\n        }\n      }\n      throw new Exception(\"Replica \" + coreNodeName + \" not found on node \" + nodeId);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc18bc8ea2e2c1e308757ff50671c774438e9f3e":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"7cf5ebf4183939c15e55353b64c57a5182671639":["a4422b331d00607258b0ed3e43934306e67764aa"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441","ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1"],"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441":["a4422b331d00607258b0ed3e43934306e67764aa","7cf5ebf4183939c15e55353b64c57a5182671639"],"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["ad60b6945c360ff89899d716d9cdec8dd674e2a0"],"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"],"66b87d86427dfa19b2ef36b66de83aa9655cea33":["fc18bc8ea2e2c1e308757ff50671c774438e9f3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["43345f1452f9510f8aaadae6156fe0c834e7d957","ad60b6945c360ff89899d716d9cdec8dd674e2a0"],"a4422b331d00607258b0ed3e43934306e67764aa":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["66b87d86427dfa19b2ef36b66de83aa9655cea33"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ad60b6945c360ff89899d716d9cdec8dd674e2a0":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"f592209545c71895260367152601e9200399776d":["43345f1452f9510f8aaadae6156fe0c834e7d957","ad60b6945c360ff89899d716d9cdec8dd674e2a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"]},"commit2Childs":{"fc18bc8ea2e2c1e308757ff50671c774438e9f3e":["66b87d86427dfa19b2ef36b66de83aa9655cea33"],"7cf5ebf4183939c15e55353b64c57a5182671639":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["b70042a8a492f7054d480ccdd2be9796510d4327","ad60b6945c360ff89899d716d9cdec8dd674e2a0","f592209545c71895260367152601e9200399776d"],"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441":["43345f1452f9510f8aaadae6156fe0c834e7d957","ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1"],"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"66b87d86427dfa19b2ef36b66de83aa9655cea33":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"a4422b331d00607258b0ed3e43934306e67764aa":["7cf5ebf4183939c15e55353b64c57a5182671639","43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a4422b331d00607258b0ed3e43934306e67764aa"],"ad60b6945c360ff89899d716d9cdec8dd674e2a0":["042b92cf48996255bedb0c3c4bf772d7e06e4dea","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"f592209545c71895260367152601e9200399776d":[],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["fc18bc8ea2e2c1e308757ff50671c774438e9f3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}