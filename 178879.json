{"path":"contrib/fast-vector-highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMap1Phrase().mjava","commits":[{"id":"d64148a458eb3ddf4d1bb1f1753cb9af194e1707","date":1247144811,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/fast-vector-highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMap1Phrase().mjava","pathOld":"/dev/null","sourceNew":"  public void testQueryPhraseMap1Phrase() throws Exception {\n    Query query = pqF( \"a\", \"b\" );\n    \n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Map<String, QueryPhraseMap> map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    QueryPhraseMap qpm = map.get( F );\n    assertEquals( 1, qpm.subMap.size() );\n    assertNotNull( qpm.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm2 = qpm.subMap.get( \"a\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"b\" ) );\n    QueryPhraseMap qpm3 = qpm2.subMap.get( \"b\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n    \n    // phraseHighlight = true, fieldMatch = false\n    fq = new FieldQuery( query, true, false );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( F ) );\n    assertNotNull( map.get( null ) );\n    qpm = map.get( null );\n    assertEquals( 1, qpm.subMap.size() );\n    assertNotNull( qpm.subMap.get( \"a\" ) );\n    qpm2 = qpm.subMap.get( \"a\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"b\" ) );\n    qpm3 = qpm2.subMap.get( \"b\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n    \n    // phraseHighlight = false, fieldMatch = true\n    fq = new FieldQuery( query, false, true );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    qpm = map.get( F );\n    assertEquals( 2, qpm.subMap.size() );\n    assertNotNull( qpm.subMap.get( \"a\" ) );\n    qpm2 = qpm.subMap.get( \"a\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"b\" ) );\n    qpm3 = qpm2.subMap.get( \"b\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    assertNotNull( qpm.subMap.get( \"b\" ) );\n    qpm2 = qpm.subMap.get( \"b\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    \n    // phraseHighlight = false, fieldMatch = false\n    fq = new FieldQuery( query, false, false );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( F ) );\n    assertNotNull( map.get( null ) );\n    qpm = map.get( null );\n    assertEquals( 2, qpm.subMap.size() );\n    assertNotNull( qpm.subMap.get( \"a\" ) );\n    qpm2 = qpm.subMap.get( \"a\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"b\" ) );\n    qpm3 = qpm2.subMap.get( \"b\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    assertNotNull( qpm.subMap.get( \"b\" ) );\n    qpm2 = qpm.subMap.get( \"b\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n\n    // boost != 1\n    query = pqF( 2, \"a\", \"b\" );\n    // phraseHighlight = false, fieldMatch = false\n    fq = new FieldQuery( query, false, false );\n    map = fq.rootMaps;\n    qpm = map.get( null );\n    qpm2 = qpm.subMap.get( \"a\" );\n    assertEquals( 2F, qpm2.boost );\n    qpm3 = qpm2.subMap.get( \"b\" );\n    assertEquals( 2F, qpm3.boost );\n    qpm2 = qpm.subMap.get( \"b\" );\n    assertEquals( 2F, qpm2.boost );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/fast-vector-highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMap1Phrase().mjava","pathOld":"contrib/fast-vector-highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMap1Phrase().mjava","sourceNew":"  public void testQueryPhraseMap1Phrase() throws Exception {\n    Query query = pqF( \"a\", \"b\" );\n    \n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Map<String, QueryPhraseMap> map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    QueryPhraseMap qpm = map.get( F );\n    assertEquals( 1, qpm.subMap.size() );\n    assertNotNull( qpm.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm2 = qpm.subMap.get( \"a\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"b\" ) );\n    QueryPhraseMap qpm3 = qpm2.subMap.get( \"b\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n    \n    // phraseHighlight = true, fieldMatch = false\n    fq = new FieldQuery( query, true, false );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( F ) );\n    assertNotNull( map.get( null ) );\n    qpm = map.get( null );\n    assertEquals( 1, qpm.subMap.size() );\n    assertNotNull( qpm.subMap.get( \"a\" ) );\n    qpm2 = qpm.subMap.get( \"a\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"b\" ) );\n    qpm3 = qpm2.subMap.get( \"b\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n    \n    // phraseHighlight = false, fieldMatch = true\n    fq = new FieldQuery( query, false, true );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    qpm = map.get( F );\n    assertEquals( 2, qpm.subMap.size() );\n    assertNotNull( qpm.subMap.get( \"a\" ) );\n    qpm2 = qpm.subMap.get( \"a\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"b\" ) );\n    qpm3 = qpm2.subMap.get( \"b\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    assertNotNull( qpm.subMap.get( \"b\" ) );\n    qpm2 = qpm.subMap.get( \"b\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    \n    // phraseHighlight = false, fieldMatch = false\n    fq = new FieldQuery( query, false, false );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( F ) );\n    assertNotNull( map.get( null ) );\n    qpm = map.get( null );\n    assertEquals( 2, qpm.subMap.size() );\n    assertNotNull( qpm.subMap.get( \"a\" ) );\n    qpm2 = qpm.subMap.get( \"a\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"b\" ) );\n    qpm3 = qpm2.subMap.get( \"b\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    assertNotNull( qpm.subMap.get( \"b\" ) );\n    qpm2 = qpm.subMap.get( \"b\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n\n    // boost != 1\n    query = pqF( 2, \"a\", \"b\" );\n    // phraseHighlight = false, fieldMatch = false\n    fq = new FieldQuery( query, false, false );\n    map = fq.rootMaps;\n    qpm = map.get( null );\n    qpm2 = qpm.subMap.get( \"a\" );\n    assertEquals( 2F, qpm2.boost );\n    qpm3 = qpm2.subMap.get( \"b\" );\n    assertEquals( 2F, qpm3.boost );\n    qpm2 = qpm.subMap.get( \"b\" );\n    assertEquals( 2F, qpm2.boost );\n  }\n\n","sourceOld":"  public void testQueryPhraseMap1Phrase() throws Exception {\n    Query query = pqF( \"a\", \"b\" );\n    \n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Map<String, QueryPhraseMap> map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    QueryPhraseMap qpm = map.get( F );\n    assertEquals( 1, qpm.subMap.size() );\n    assertNotNull( qpm.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm2 = qpm.subMap.get( \"a\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"b\" ) );\n    QueryPhraseMap qpm3 = qpm2.subMap.get( \"b\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n    \n    // phraseHighlight = true, fieldMatch = false\n    fq = new FieldQuery( query, true, false );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( F ) );\n    assertNotNull( map.get( null ) );\n    qpm = map.get( null );\n    assertEquals( 1, qpm.subMap.size() );\n    assertNotNull( qpm.subMap.get( \"a\" ) );\n    qpm2 = qpm.subMap.get( \"a\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"b\" ) );\n    qpm3 = qpm2.subMap.get( \"b\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n    \n    // phraseHighlight = false, fieldMatch = true\n    fq = new FieldQuery( query, false, true );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    qpm = map.get( F );\n    assertEquals( 2, qpm.subMap.size() );\n    assertNotNull( qpm.subMap.get( \"a\" ) );\n    qpm2 = qpm.subMap.get( \"a\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"b\" ) );\n    qpm3 = qpm2.subMap.get( \"b\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    assertNotNull( qpm.subMap.get( \"b\" ) );\n    qpm2 = qpm.subMap.get( \"b\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    \n    // phraseHighlight = false, fieldMatch = false\n    fq = new FieldQuery( query, false, false );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( F ) );\n    assertNotNull( map.get( null ) );\n    qpm = map.get( null );\n    assertEquals( 2, qpm.subMap.size() );\n    assertNotNull( qpm.subMap.get( \"a\" ) );\n    qpm2 = qpm.subMap.get( \"a\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"b\" ) );\n    qpm3 = qpm2.subMap.get( \"b\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    assertNotNull( qpm.subMap.get( \"b\" ) );\n    qpm2 = qpm.subMap.get( \"b\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n\n    // boost != 1\n    query = pqF( 2, \"a\", \"b\" );\n    // phraseHighlight = false, fieldMatch = false\n    fq = new FieldQuery( query, false, false );\n    map = fq.rootMaps;\n    qpm = map.get( null );\n    qpm2 = qpm.subMap.get( \"a\" );\n    assertEquals( 2F, qpm2.boost );\n    qpm3 = qpm2.subMap.get( \"b\" );\n    assertEquals( 2F, qpm3.boost );\n    qpm2 = qpm.subMap.get( \"b\" );\n    assertEquals( 2F, qpm2.boost );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d64148a458eb3ddf4d1bb1f1753cb9af194e1707":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d64148a458eb3ddf4d1bb1f1753cb9af194e1707"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d64148a458eb3ddf4d1bb1f1753cb9af194e1707"],"d64148a458eb3ddf4d1bb1f1753cb9af194e1707":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}