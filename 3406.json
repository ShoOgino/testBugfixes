{"path":"lucene/core/src/java/org/apache/lucene/index/SlowCodecReaderWrapper#dimensionalValuesToReader(DimensionalValues).mjava","commits":[{"id":"ca792c26af46bd6c4a08d81117c60440cf6a7e3d","date":1445938295,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SlowCodecReaderWrapper#dimensionalValuesToReader(DimensionalValues).mjava","pathOld":"/dev/null","sourceNew":"  private static DimensionalReader dimensionalValuesToReader(DimensionalValues values) {\n    return new DimensionalReader() {\n      @Override\n      public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n        values.intersect(fieldName, visitor);\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n        // We already checkIntegrity the entire reader up front\n      }\n\n      @Override\n      public void close() {\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eee4175312c41f89aa23427f9e4edfc00deeaac","date":1446373190,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SlowCodecReaderWrapper#dimensionalValuesToReader(DimensionalValues).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SlowCodecReaderWrapper#dimensionalValuesToReader(DimensionalValues).mjava","sourceNew":"  private static DimensionalReader dimensionalValuesToReader(DimensionalValues values) {\n    if (values == null) {\n      return null;\n    }\n    return new DimensionalReader() {\n      @Override\n      public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n        values.intersect(fieldName, visitor);\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n        // We already checkIntegrity the entire reader up front\n      }\n\n      @Override\n      public void close() {\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n    };\n  }\n\n","sourceOld":"  private static DimensionalReader dimensionalValuesToReader(DimensionalValues values) {\n    return new DimensionalReader() {\n      @Override\n      public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n        values.intersect(fieldName, visitor);\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n        // We already checkIntegrity the entire reader up front\n      }\n\n      @Override\n      public void close() {\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecf331f9d7bdd234863d2df2bb5c1f019979422f","date":1452250335,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SlowCodecReaderWrapper#dimensionalValuesToReader(DimensionalValues).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SlowCodecReaderWrapper#dimensionalValuesToReader(DimensionalValues).mjava","sourceNew":"  private static DimensionalReader dimensionalValuesToReader(DimensionalValues values) {\n    if (values == null) {\n      return null;\n    }\n    return new DimensionalReader() {\n      @Override\n      public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n        values.intersect(fieldName, visitor);\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n        // We already checkIntegrity the entire reader up front\n      }\n\n      @Override\n      public void close() {\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n\n      @Override\n      public byte[] getMinPackedValue(String fieldName) throws IOException {\n        return values.getMinPackedValue(fieldName);\n      }\n\n      @Override\n      public byte[] getMaxPackedValue(String fieldName) throws IOException {\n        return values.getMaxPackedValue(fieldName);\n      }\n\n      @Override\n      public int getNumDimensions(String fieldName) throws IOException {\n        return values.getNumDimensions(fieldName);\n      }\n\n      @Override\n      public int getBytesPerDimension(String fieldName) throws IOException {\n        return values.getBytesPerDimension(fieldName);\n      }\n    };\n  }\n\n","sourceOld":"  private static DimensionalReader dimensionalValuesToReader(DimensionalValues values) {\n    if (values == null) {\n      return null;\n    }\n    return new DimensionalReader() {\n      @Override\n      public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n        values.intersect(fieldName, visitor);\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n        // We already checkIntegrity the entire reader up front\n      }\n\n      @Override\n      public void close() {\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SlowCodecReaderWrapper#pointValuesToReader(PointValues).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SlowCodecReaderWrapper#dimensionalValuesToReader(DimensionalValues).mjava","sourceNew":"  private static PointReader pointValuesToReader(PointValues values) {\n    if (values == null) {\n      return null;\n    }\n    return new PointReader() {\n      @Override\n      public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n        values.intersect(fieldName, visitor);\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n        // We already checkIntegrity the entire reader up front\n      }\n\n      @Override\n      public void close() {\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n\n      @Override\n      public byte[] getMinPackedValue(String fieldName) throws IOException {\n        return values.getMinPackedValue(fieldName);\n      }\n\n      @Override\n      public byte[] getMaxPackedValue(String fieldName) throws IOException {\n        return values.getMaxPackedValue(fieldName);\n      }\n\n      @Override\n      public int getNumDimensions(String fieldName) throws IOException {\n        return values.getNumDimensions(fieldName);\n      }\n\n      @Override\n      public int getBytesPerDimension(String fieldName) throws IOException {\n        return values.getBytesPerDimension(fieldName);\n      }\n    };\n  }\n\n","sourceOld":"  private static DimensionalReader dimensionalValuesToReader(DimensionalValues values) {\n    if (values == null) {\n      return null;\n    }\n    return new DimensionalReader() {\n      @Override\n      public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n        values.intersect(fieldName, visitor);\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n        // We already checkIntegrity the entire reader up front\n      }\n\n      @Override\n      public void close() {\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n\n      @Override\n      public byte[] getMinPackedValue(String fieldName) throws IOException {\n        return values.getMinPackedValue(fieldName);\n      }\n\n      @Override\n      public byte[] getMaxPackedValue(String fieldName) throws IOException {\n        return values.getMaxPackedValue(fieldName);\n      }\n\n      @Override\n      public int getNumDimensions(String fieldName) throws IOException {\n        return values.getNumDimensions(fieldName);\n      }\n\n      @Override\n      public int getBytesPerDimension(String fieldName) throws IOException {\n        return values.getBytesPerDimension(fieldName);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["4522ffca5a1f420c6a02198c9332d7c596a30ca5"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["ecf331f9d7bdd234863d2df2bb5c1f019979422f"],"ecf331f9d7bdd234863d2df2bb5c1f019979422f":["1eee4175312c41f89aa23427f9e4edfc00deeaac"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1eee4175312c41f89aa23427f9e4edfc00deeaac":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ecf331f9d7bdd234863d2df2bb5c1f019979422f":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["1eee4175312c41f89aa23427f9e4edfc00deeaac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"1eee4175312c41f89aa23427f9e4edfc00deeaac":["ecf331f9d7bdd234863d2df2bb5c1f019979422f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}