{"path":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","pathOld":"src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n    writer.optimize();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store, true).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n    writer.optimize();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store, true).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n    writer.optimize();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store, true).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n    writer.optimize();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store, true).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), store, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    new IndexSearcher(reader).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n    writer.optimize();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store, true).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), store, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    new IndexSearcher(reader).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n    writer.optimize();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store, true).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15bbd254c1506df5299c4df8c148262c7bd6301e","date":1279913113,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), store);\n\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    new IndexSearcher(reader).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), store, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    new IndexSearcher(reader).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), store);\n\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    new IndexSearcher(reader).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), store, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    new IndexSearcher(reader).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), store);\n\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    new IndexSearcher(reader).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), store, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    new IndexSearcher(reader).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    MockRAMDirectory store = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), store);\n\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    new IndexSearcher(reader).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), store);\n\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    new IndexSearcher(reader).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    Random random = newRandom();\n    MockRAMDirectory store = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    new IndexSearcher(reader).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    MockRAMDirectory store = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), store);\n\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    new IndexSearcher(reader).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    Random random = newRandom();\n    Directory store = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    new IndexSearcher(reader).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    Random random = newRandom();\n    MockRAMDirectory store = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    new IndexSearcher(reader).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    new IndexSearcher(reader).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    Random random = newRandom();\n    Directory store = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    new IndexSearcher(reader).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    new IndexSearcher(reader).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    new IndexSearcher(reader).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    new IndexSearcher(reader).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), store);\n\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    new IndexSearcher(reader).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"323f871ffe96b871d8c534a614be60751bb023c2","date":1294820532,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    new IndexSearcher(reader).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    new IndexSearcher(reader).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    new IndexSearcher(reader).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    new IndexSearcher(reader).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    new IndexSearcher(reader).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    new IndexSearcher(reader).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    newSearcher(reader).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    new IndexSearcher(reader).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    newSearcher(reader).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    new IndexSearcher(reader).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    newSearcher(reader).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store);\n\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    new IndexSearcher(reader).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e5948db9a07144112d2f08f28ca2e3cd880348","date":1301759232,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    newSearcher(reader).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    newSearcher(reader).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    newSearcher(reader).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    newSearcher(reader).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    newSearcher(reader).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    newSearcher(reader).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    newSearcher(reader).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    newSearcher(reader).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    newSearcher(reader).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    newSearcher(reader).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    newSearcher(reader).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    newSearcher(reader).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    Field f1 = newField(\"field\", \"word\", TextField.TYPE_STORED);\n    Field f2 = newField(\"field\", \"word\", TextField.TYPE_STORED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    newSearcher(reader).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 2; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    Fieldable f1 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = newField(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    newSearcher(reader).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"60e3b31201fd9bb5d73884faa5a38c63ea9239f2","date":1315756041,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    Field f1 = newField(\"field\", \"word\", TextField.TYPE_STORED);\n    Field f2 = newField(\"field\", \"word\", TextField.TYPE_STORED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 2; i++) {\n      if (VERBOSE) {\n        System.out.println(searcher.explain(new TermQuery(new Term(\"field\", \"word\")), i));\n      }\n      assertTrue(\"score: \" + scores[i] + \" should be > lastScore: \" + lastScore, scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    Field f1 = newField(\"field\", \"word\", TextField.TYPE_STORED);\n    Field f2 = newField(\"field\", \"word\", TextField.TYPE_STORED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    newSearcher(reader).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 2; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    Field f1 = newField(\"field\", \"word\", TextField.TYPE_STORED);\n    Field f2 = newField(\"field\", \"word\", TextField.TYPE_STORED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 2; i++) {\n      if (VERBOSE) {\n        System.out.println(searcher.explain(new TermQuery(new Term(\"field\", \"word\")), i));\n      }\n      assertTrue(\"score: \" + scores[i] + \" should be > lastScore: \" + lastScore, scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    Field f1 = newField(\"field\", \"word\", TextField.TYPE_STORED);\n    Field f2 = newField(\"field\", \"word\", TextField.TYPE_STORED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 2; i++) {\n      if (VERBOSE) {\n        System.out.println(searcher.explain(new TermQuery(new Term(\"field\", \"word\")), i));\n      }\n      assertTrue(\"score: \" + scores[i] + \" should be > lastScore: \" + lastScore, scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["c084e47df29de3330311d69dabf515ceaa989512"],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","132903c28af3aa6f67284b78de91c0f0a99488c2"],"c19f985e36a65cc969e8e564fe337a0d41512075":["323f871ffe96b871d8c534a614be60751bb023c2"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"c084e47df29de3330311d69dabf515ceaa989512":["d572389229127c297dd1fa5ce4758e1cec41e799"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["01e5948db9a07144112d2f08f28ca2e3cd880348"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["132903c28af3aa6f67284b78de91c0f0a99488c2","790e1fde4caa765b3faaad3fbcd25c6973450336"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","790e1fde4caa765b3faaad3fbcd25c6973450336"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","4b103252dee6afa1b6d7a622c773d178788eb85a"],"323f871ffe96b871d8c534a614be60751bb023c2":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["c084e47df29de3330311d69dabf515ceaa989512","15bbd254c1506df5299c4df8c148262c7bd6301e"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":["d572389229127c297dd1fa5ce4758e1cec41e799","c084e47df29de3330311d69dabf515ceaa989512"],"962d04139994fce5193143ef35615499a9a96d78":["45669a651c970812a680841b97a77cce06af559f","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["c19f985e36a65cc969e8e564fe337a0d41512075"],"a3776dccca01c11e7046323cfad46a3b4a471233":["790e1fde4caa765b3faaad3fbcd25c6973450336","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","323f871ffe96b871d8c534a614be60751bb023c2"],"45669a651c970812a680841b97a77cce06af559f":["bde51b089eb7f86171eb3406e38a274743f9b7ac","01e5948db9a07144112d2f08f28ca2e3cd880348"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","29ef99d61cda9641b6250bf9567329a6e65f901d","323f871ffe96b871d8c534a614be60751bb023c2"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"c19f985e36a65cc969e8e564fe337a0d41512075":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["f2c5f0cb44df114db4228c8f77861714b5cabaea","45669a651c970812a680841b97a77cce06af559f"],"c084e47df29de3330311d69dabf515ceaa989512":["15bbd254c1506df5299c4df8c148262c7bd6301e","4b103252dee6afa1b6d7a622c773d178788eb85a","5f4e87790277826a2aea119328600dfb07761f32"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["1509f151d7692d84fae414b2b799ac06ba60fcb4","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["45669a651c970812a680841b97a77cce06af559f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"323f871ffe96b871d8c534a614be60751bb023c2":["c19f985e36a65cc969e8e564fe337a0d41512075","868da859b43505d9d2a023bfeae6dd0c795f5295"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","3242a09f703274d3b9283f2064a1a33064b53a1b"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["c084e47df29de3330311d69dabf515ceaa989512","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"962d04139994fce5193143ef35615499a9a96d78":[],"790e1fde4caa765b3faaad3fbcd25c6973450336":["01e5948db9a07144112d2f08f28ca2e3cd880348","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"45669a651c970812a680841b97a77cce06af559f":["962d04139994fce5193143ef35615499a9a96d78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}