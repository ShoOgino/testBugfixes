{"path":"contrib/fast-vector-highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testNoExpand().mjava","commits":[{"id":"d64148a458eb3ddf4d1bb1f1753cb9af194e1707","date":1247144811,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/fast-vector-highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testNoExpand().mjava","pathOld":"/dev/null","sourceNew":"  public void testNoExpand() throws Exception {\n    Query dummy = pqF( \"DUMMY\" );\n    FieldQuery fq = new FieldQuery( dummy, true, true );\n\n    // \"a b\",\"c d\" => \"a b\",\"c d\"\n    Set<Query> flatQueries = new HashSet<Query>();\n    flatQueries.add( pqF( \"a\", \"b\" ) );\n    flatQueries.add( pqF( \"c\", \"d\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        pqF( \"a\", \"b\" ), pqF( \"c\", \"d\" ) );\n\n    // \"a\",\"a b\" => \"a\", \"a b\"\n    flatQueries = new HashSet<Query>();\n    flatQueries.add( tq( \"a\" ) );\n    flatQueries.add( pqF( \"a\", \"b\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        tq( \"a\" ), pqF( \"a\", \"b\" ) );\n\n    // \"a b\",\"b\" => \"a b\", \"b\"\n    flatQueries = new HashSet<Query>();\n    flatQueries.add( pqF( \"a\", \"b\" ) );\n    flatQueries.add( tq( \"b\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        pqF( \"a\", \"b\" ), tq( \"b\" ) );\n\n    // \"a b c\",\"b c\" => \"a b c\",\"b c\"\n    flatQueries = new HashSet<Query>();\n    flatQueries.add( pqF( \"a\", \"b\", \"c\" ) );\n    flatQueries.add( pqF( \"b\", \"c\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        pqF( \"a\", \"b\", \"c\" ), pqF( \"b\", \"c\" ) );\n\n    // \"a b\",\"a b c\" => \"a b\",\"a b c\"\n    flatQueries = new HashSet<Query>();\n    flatQueries.add( pqF( \"a\", \"b\" ) );\n    flatQueries.add( pqF( \"a\", \"b\", \"c\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        pqF( \"a\", \"b\" ), pqF( \"a\", \"b\", \"c\" ) );\n\n    // \"a b c\",\"b d e\" => \"a b c\",\"b d e\"\n    flatQueries = new HashSet<Query>();\n    flatQueries.add( pqF( \"a\", \"b\", \"c\" ) );\n    flatQueries.add( pqF( \"b\", \"d\", \"e\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        pqF( \"a\", \"b\", \"c\" ), pqF( \"b\", \"d\", \"e\" ) );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/fast-vector-highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testNoExpand().mjava","pathOld":"contrib/fast-vector-highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testNoExpand().mjava","sourceNew":"  public void testNoExpand() throws Exception {\n    Query dummy = pqF( \"DUMMY\" );\n    FieldQuery fq = new FieldQuery( dummy, true, true );\n\n    // \"a b\",\"c d\" => \"a b\",\"c d\"\n    Set<Query> flatQueries = new HashSet<Query>();\n    flatQueries.add( pqF( \"a\", \"b\" ) );\n    flatQueries.add( pqF( \"c\", \"d\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        pqF( \"a\", \"b\" ), pqF( \"c\", \"d\" ) );\n\n    // \"a\",\"a b\" => \"a\", \"a b\"\n    flatQueries = new HashSet<Query>();\n    flatQueries.add( tq( \"a\" ) );\n    flatQueries.add( pqF( \"a\", \"b\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        tq( \"a\" ), pqF( \"a\", \"b\" ) );\n\n    // \"a b\",\"b\" => \"a b\", \"b\"\n    flatQueries = new HashSet<Query>();\n    flatQueries.add( pqF( \"a\", \"b\" ) );\n    flatQueries.add( tq( \"b\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        pqF( \"a\", \"b\" ), tq( \"b\" ) );\n\n    // \"a b c\",\"b c\" => \"a b c\",\"b c\"\n    flatQueries = new HashSet<Query>();\n    flatQueries.add( pqF( \"a\", \"b\", \"c\" ) );\n    flatQueries.add( pqF( \"b\", \"c\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        pqF( \"a\", \"b\", \"c\" ), pqF( \"b\", \"c\" ) );\n\n    // \"a b\",\"a b c\" => \"a b\",\"a b c\"\n    flatQueries = new HashSet<Query>();\n    flatQueries.add( pqF( \"a\", \"b\" ) );\n    flatQueries.add( pqF( \"a\", \"b\", \"c\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        pqF( \"a\", \"b\" ), pqF( \"a\", \"b\", \"c\" ) );\n\n    // \"a b c\",\"b d e\" => \"a b c\",\"b d e\"\n    flatQueries = new HashSet<Query>();\n    flatQueries.add( pqF( \"a\", \"b\", \"c\" ) );\n    flatQueries.add( pqF( \"b\", \"d\", \"e\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        pqF( \"a\", \"b\", \"c\" ), pqF( \"b\", \"d\", \"e\" ) );\n  }\n\n","sourceOld":"  public void testNoExpand() throws Exception {\n    Query dummy = pqF( \"DUMMY\" );\n    FieldQuery fq = new FieldQuery( dummy, true, true );\n\n    // \"a b\",\"c d\" => \"a b\",\"c d\"\n    Set<Query> flatQueries = new HashSet<Query>();\n    flatQueries.add( pqF( \"a\", \"b\" ) );\n    flatQueries.add( pqF( \"c\", \"d\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        pqF( \"a\", \"b\" ), pqF( \"c\", \"d\" ) );\n\n    // \"a\",\"a b\" => \"a\", \"a b\"\n    flatQueries = new HashSet<Query>();\n    flatQueries.add( tq( \"a\" ) );\n    flatQueries.add( pqF( \"a\", \"b\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        tq( \"a\" ), pqF( \"a\", \"b\" ) );\n\n    // \"a b\",\"b\" => \"a b\", \"b\"\n    flatQueries = new HashSet<Query>();\n    flatQueries.add( pqF( \"a\", \"b\" ) );\n    flatQueries.add( tq( \"b\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        pqF( \"a\", \"b\" ), tq( \"b\" ) );\n\n    // \"a b c\",\"b c\" => \"a b c\",\"b c\"\n    flatQueries = new HashSet<Query>();\n    flatQueries.add( pqF( \"a\", \"b\", \"c\" ) );\n    flatQueries.add( pqF( \"b\", \"c\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        pqF( \"a\", \"b\", \"c\" ), pqF( \"b\", \"c\" ) );\n\n    // \"a b\",\"a b c\" => \"a b\",\"a b c\"\n    flatQueries = new HashSet<Query>();\n    flatQueries.add( pqF( \"a\", \"b\" ) );\n    flatQueries.add( pqF( \"a\", \"b\", \"c\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        pqF( \"a\", \"b\" ), pqF( \"a\", \"b\", \"c\" ) );\n\n    // \"a b c\",\"b d e\" => \"a b c\",\"b d e\"\n    flatQueries = new HashSet<Query>();\n    flatQueries.add( pqF( \"a\", \"b\", \"c\" ) );\n    flatQueries.add( pqF( \"b\", \"d\", \"e\" ) );\n    assertCollectionQueries( fq.expand( flatQueries ),\n        pqF( \"a\", \"b\", \"c\" ), pqF( \"b\", \"d\", \"e\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d64148a458eb3ddf4d1bb1f1753cb9af194e1707":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d64148a458eb3ddf4d1bb1f1753cb9af194e1707"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d64148a458eb3ddf4d1bb1f1753cb9af194e1707"],"d64148a458eb3ddf4d1bb1f1753cb9af194e1707":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}