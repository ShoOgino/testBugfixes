{"path":"backwards/src/java/org/apache/lucene/search/ReqOptSumScorer#score().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/search/ReqOptSumScorer#score().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the score of the current document matching the query.\n   * Initially invalid, until {@link #next()} is called the first time.\n   * @return The score of the required scorer, eventually increased by the score\n   * of the optional scorer when it also matches the current document.\n   */\n  @Override\n  public float score() throws IOException {\n    int curDoc = reqScorer.docID();\n    float reqScore = reqScorer.score();\n    if (optScorer == null) {\n      return reqScore;\n    }\n    \n    int optScorerDoc = optScorer.docID();\n    if (optScorerDoc < curDoc && (optScorerDoc = optScorer.advance(curDoc)) == NO_MORE_DOCS) {\n      optScorer = null;\n      return reqScore;\n    }\n    \n    return optScorerDoc == curDoc ? reqScore + optScorer.score() : reqScore;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/ReqOptSumScorer#score().mjava","pathOld":"backwards/src/java/org/apache/lucene/search/ReqOptSumScorer#score().mjava","sourceNew":"  /** Returns the score of the current document matching the query.\n   * Initially invalid, until {@link #next()} is called the first time.\n   * @return The score of the required scorer, eventually increased by the score\n   * of the optional scorer when it also matches the current document.\n   */\n  @Override\n  public float score() throws IOException {\n    int curDoc = reqScorer.docID();\n    float reqScore = reqScorer.score();\n    if (optScorer == null) {\n      return reqScore;\n    }\n    \n    int optScorerDoc = optScorer.docID();\n    if (optScorerDoc < curDoc && (optScorerDoc = optScorer.advance(curDoc)) == NO_MORE_DOCS) {\n      optScorer = null;\n      return reqScore;\n    }\n    \n    return optScorerDoc == curDoc ? reqScore + optScorer.score() : reqScore;\n  }\n\n","sourceOld":"  /** Returns the score of the current document matching the query.\n   * Initially invalid, until {@link #next()} is called the first time.\n   * @return The score of the required scorer, eventually increased by the score\n   * of the optional scorer when it also matches the current document.\n   */\n  @Override\n  public float score() throws IOException {\n    int curDoc = reqScorer.docID();\n    float reqScore = reqScorer.score();\n    if (optScorer == null) {\n      return reqScore;\n    }\n    \n    int optScorerDoc = optScorer.docID();\n    if (optScorerDoc < curDoc && (optScorerDoc = optScorer.advance(curDoc)) == NO_MORE_DOCS) {\n      optScorer = null;\n      return reqScore;\n    }\n    \n    return optScorerDoc == curDoc ? reqScore + optScorer.score() : reqScore;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}