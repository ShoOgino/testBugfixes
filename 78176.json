{"path":"src/java/org/apache/solr/schema/FieldProperties#parseProperties(Map[String,String],boolean).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/FieldProperties#parseProperties(Map[String,String],boolean).mjava","pathOld":"/dev/null","sourceNew":"  /***\n  static int normalize(int properties) {\n    int p = properties;\n    if (on(p,TOKENIZED) && off(p,INDEXED)) {\n      throw new RuntimeException(\"field must be indexed to be tokenized.\");\n    }\n\n    if (on(p,STORE_TERMPOSITIONS)) p|=STORE_TERMVECTORS;\n    if (on(p,STORE_TERMOFFSETS)) p|=STORE_TERMVECTORS;\n    if (on(p,STORE_TERMOFFSETS) && off(p,INDEXED)) {\n      throw new RuntimeException(\"field must be indexed to store term vectors.\");\n    }\n\n    if (on(p,OMIT_NORMS) && off(p,INDEXED)) {\n      throw new RuntimeException(\"field must be indexed for norms to be omitted.\");\n    }\n\n    if (on(p,SORT_MISSING_FIRST) && on(p,SORT_MISSING_LAST)) {\n      throw new RuntimeException(\"conflicting options sortMissingFirst,sortMissingLast.\");\n    }\n\n    if ((on(p,SORT_MISSING_FIRST) || on(p,SORT_MISSING_LAST)) && off(p,INDEXED)) {\n      throw new RuntimeException(\"field must be indexed to be sorted.\");\n    }\n\n    if ((on(p,BINARY) || on(p,COMPRESSED)) && off(p,STORED)) {\n      throw new RuntimeException(\"field must be stored for compressed or binary options.\");\n    }\n\n    return p;\n  }\n  ***/\n\n\n  static int parseProperties(Map<String,String> properties, boolean which) {\n    int props = 0;\n    for (String prop : properties.keySet()) {\n      if (propertyMap.get(prop)==null) continue;\n      String val = properties.get(prop);\n      if (Boolean.parseBoolean(val) == which) {\n        props |= propertyNameToInt(prop);\n      }\n    }\n    return props;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4d2d6165083df7d20631bef187dea110b53e5f1","date":1242995342,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/FieldProperties#parseProperties(Map[String,String],boolean).mjava","pathOld":"src/java/org/apache/solr/schema/FieldProperties#parseProperties(Map[String,String],boolean).mjava","sourceNew":"  /***\n  static int normalize(int properties) {\n    int p = properties;\n    if (on(p,TOKENIZED) && off(p,INDEXED)) {\n      throw new RuntimeException(\"field must be indexed to be tokenized.\");\n    }\n\n    if (on(p,STORE_TERMPOSITIONS)) p|=STORE_TERMVECTORS;\n    if (on(p,STORE_TERMOFFSETS)) p|=STORE_TERMVECTORS;\n    if (on(p,STORE_TERMOFFSETS) && off(p,INDEXED)) {\n      throw new RuntimeException(\"field must be indexed to store term vectors.\");\n    }\n\n    if (on(p,OMIT_NORMS) && off(p,INDEXED)) {\n      throw new RuntimeException(\"field must be indexed for norms to be omitted.\");\n    }\n\n    if (on(p,SORT_MISSING_FIRST) && on(p,SORT_MISSING_LAST)) {\n      throw new RuntimeException(\"conflicting options sortMissingFirst,sortMissingLast.\");\n    }\n\n    if ((on(p,SORT_MISSING_FIRST) || on(p,SORT_MISSING_LAST)) && off(p,INDEXED)) {\n      throw new RuntimeException(\"field must be indexed to be sorted.\");\n    }\n\n    if ((on(p,BINARY) || on(p,COMPRESSED)) && off(p,STORED)) {\n      throw new RuntimeException(\"field must be stored for compressed or binary options.\");\n    }\n\n    return p;\n  }\n  ***/\n\n\n  static int parseProperties(Map<String,String> properties, boolean which) {\n    int props = 0;\n    for (Map.Entry<String, String> entry : properties.entrySet()) {\n      String val = entry.getValue();\n      if(val == null) continue;\n      if (Boolean.parseBoolean(val) == which) {\n        props |= propertyNameToInt(entry.getKey());\n      }\n    }\n    return props;\n  }\n\n","sourceOld":"  /***\n  static int normalize(int properties) {\n    int p = properties;\n    if (on(p,TOKENIZED) && off(p,INDEXED)) {\n      throw new RuntimeException(\"field must be indexed to be tokenized.\");\n    }\n\n    if (on(p,STORE_TERMPOSITIONS)) p|=STORE_TERMVECTORS;\n    if (on(p,STORE_TERMOFFSETS)) p|=STORE_TERMVECTORS;\n    if (on(p,STORE_TERMOFFSETS) && off(p,INDEXED)) {\n      throw new RuntimeException(\"field must be indexed to store term vectors.\");\n    }\n\n    if (on(p,OMIT_NORMS) && off(p,INDEXED)) {\n      throw new RuntimeException(\"field must be indexed for norms to be omitted.\");\n    }\n\n    if (on(p,SORT_MISSING_FIRST) && on(p,SORT_MISSING_LAST)) {\n      throw new RuntimeException(\"conflicting options sortMissingFirst,sortMissingLast.\");\n    }\n\n    if ((on(p,SORT_MISSING_FIRST) || on(p,SORT_MISSING_LAST)) && off(p,INDEXED)) {\n      throw new RuntimeException(\"field must be indexed to be sorted.\");\n    }\n\n    if ((on(p,BINARY) || on(p,COMPRESSED)) && off(p,STORED)) {\n      throw new RuntimeException(\"field must be stored for compressed or binary options.\");\n    }\n\n    return p;\n  }\n  ***/\n\n\n  static int parseProperties(Map<String,String> properties, boolean which) {\n    int props = 0;\n    for (String prop : properties.keySet()) {\n      if (propertyMap.get(prop)==null) continue;\n      String val = properties.get(prop);\n      if (Boolean.parseBoolean(val) == which) {\n        props |= propertyNameToInt(prop);\n      }\n    }\n    return props;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8073e3ae3236f6dd8d188299af38b8262a6e0356","date":1263254583,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/FieldProperties#parseProperties(Map[String,String],boolean).mjava","pathOld":"src/java/org/apache/solr/schema/FieldProperties#parseProperties(Map[String,String],boolean).mjava","sourceNew":"  static int parseProperties(Map<String,String> properties, boolean which) {\n    int props = 0;\n    for (Map.Entry<String, String> entry : properties.entrySet()) {\n      String val = entry.getValue();\n      if(val == null) continue;\n      if (Boolean.parseBoolean(val) == which) {\n        props |= propertyNameToInt(entry.getKey());\n      }\n    }\n    return props;\n  }\n\n","sourceOld":"  /***\n  static int normalize(int properties) {\n    int p = properties;\n    if (on(p,TOKENIZED) && off(p,INDEXED)) {\n      throw new RuntimeException(\"field must be indexed to be tokenized.\");\n    }\n\n    if (on(p,STORE_TERMPOSITIONS)) p|=STORE_TERMVECTORS;\n    if (on(p,STORE_TERMOFFSETS)) p|=STORE_TERMVECTORS;\n    if (on(p,STORE_TERMOFFSETS) && off(p,INDEXED)) {\n      throw new RuntimeException(\"field must be indexed to store term vectors.\");\n    }\n\n    if (on(p,OMIT_NORMS) && off(p,INDEXED)) {\n      throw new RuntimeException(\"field must be indexed for norms to be omitted.\");\n    }\n\n    if (on(p,SORT_MISSING_FIRST) && on(p,SORT_MISSING_LAST)) {\n      throw new RuntimeException(\"conflicting options sortMissingFirst,sortMissingLast.\");\n    }\n\n    if ((on(p,SORT_MISSING_FIRST) || on(p,SORT_MISSING_LAST)) && off(p,INDEXED)) {\n      throw new RuntimeException(\"field must be indexed to be sorted.\");\n    }\n\n    if ((on(p,BINARY) || on(p,COMPRESSED)) && off(p,STORED)) {\n      throw new RuntimeException(\"field must be stored for compressed or binary options.\");\n    }\n\n    return p;\n  }\n  ***/\n\n\n  static int parseProperties(Map<String,String> properties, boolean which) {\n    int props = 0;\n    for (Map.Entry<String, String> entry : properties.entrySet()) {\n      String val = entry.getValue();\n      if(val == null) continue;\n      if (Boolean.parseBoolean(val) == which) {\n        props |= propertyNameToInt(entry.getKey());\n      }\n    }\n    return props;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/FieldProperties#parseProperties(Map[String,String],boolean).mjava","pathOld":"src/java/org/apache/solr/schema/FieldProperties#parseProperties(Map[String,String],boolean).mjava","sourceNew":"  static int parseProperties(Map<String,String> properties, boolean which) {\n    int props = 0;\n    for (Map.Entry<String, String> entry : properties.entrySet()) {\n      String val = entry.getValue();\n      if(val == null) continue;\n      if (Boolean.parseBoolean(val) == which) {\n        props |= propertyNameToInt(entry.getKey());\n      }\n    }\n    return props;\n  }\n\n","sourceOld":"  static int parseProperties(Map<String,String> properties, boolean which) {\n    int props = 0;\n    for (Map.Entry<String, String> entry : properties.entrySet()) {\n      String val = entry.getValue();\n      if(val == null) continue;\n      if (Boolean.parseBoolean(val) == which) {\n        props |= propertyNameToInt(entry.getKey());\n      }\n    }\n    return props;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a4d2d6165083df7d20631bef187dea110b53e5f1":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["8073e3ae3236f6dd8d188299af38b8262a6e0356"],"8073e3ae3236f6dd8d188299af38b8262a6e0356":["a4d2d6165083df7d20631bef187dea110b53e5f1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a4d2d6165083df7d20631bef187dea110b53e5f1":["8073e3ae3236f6dd8d188299af38b8262a6e0356"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["a4d2d6165083df7d20631bef187dea110b53e5f1"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"8073e3ae3236f6dd8d188299af38b8262a6e0356":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}