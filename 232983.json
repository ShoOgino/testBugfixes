{"path":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazySearch().mjava","commits":[{"id":"b374d78db8148ec6796fdf37148b33897ab40a8c","date":1351606544,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazySearch().mjava","pathOld":"/dev/null","sourceNew":"  // This is a little weak. I'm not sure how to test that lazy core2 is loaded automagically. The getCore\n  // will, of course, load it.\n  @Test\n  public void testLazySearch() throws Exception {\n    try {\n      // Make sure Lazy2 isn't loaded.\n      checkNotInCores(\"collectionLazy2\");\n      SolrCore core2 = cores.getCore(\"collectionLazy2\");\n\n      addLazy(core2, \"id\", \"0\");\n      addLazy(core2, \"id\", \"1\", \"v_t\", \"Hello Dude\");\n      addLazy(core2, \"id\", \"2\", \"v_t\", \"Hello Yonik\");\n      addLazy(core2, \"id\", \"3\", \"v_s\", \"{!literal}\");\n      addLazy(core2, \"id\", \"4\", \"v_s\", \"other stuff\");\n      addLazy(core2, \"id\", \"5\", \"v_f\", \"3.14159\");\n      addLazy(core2, \"id\", \"6\", \"v_f\", \"8983\");\n\n      SolrQueryRequest req = makeReq(core2);\n      CommitUpdateCommand cmtCmd = new CommitUpdateCommand(req, false);\n      core2.getUpdateHandler().commit(cmtCmd);\n\n      RefCounted<SolrIndexSearcher> holder = core2.getSearcher();\n      SolrIndexSearcher searcher = holder.get();\n\n      // Just get a couple of searches to work!\n      assertQ(\"test prefix query\",\n          makeReq(core2, \"q\", \"{!prefix f=v_t}hel\")\n          , \"//result[@numFound='2']\"\n      );\n\n      assertQ(\"test raw query\",\n          makeReq(core2, \"q\", \"{!raw f=v_t}hello\")\n          , \"//result[@numFound='2']\"\n      );\n\n      // Now just insure that the normal searching on \"collection1\" finds _0_ on the same query that found _2_ above.\n      // Use of makeReq above and req below is tricky, very tricky.\n      assertQ(\"test raw query\",\n          req(\"q\", \"{!raw f=v_t}hello\")\n          , \"//result[@numFound='0']\"\n      );\n\n      // no analysis is done, so these should match nothing\n      assertQ(\"test raw query\",\n          makeReq(core2, \"q\", \"{!raw f=v_t}Hello\")\n          , \"//result[@numFound='0']\"\n      );\n      assertQ(\"test raw query\",\n          makeReq(core2, \"q\", \"{!raw f=v_f}1.5\")\n          , \"//result[@numFound='0']\"\n      );\n\n      checkInCores(\"collectionLazy2\");\n\n      searcher.close();\n      core2.close();\n    } finally {\n      cores.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be","83fbfcaab6a6cd5daf32752c0c35f0e0c15380e0","8d9daa29108c4330a5533a5cddaa9a95e7eb3061","f09a2a554f375a6ae3218e5eac14a1d1fb336dc7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f09a2a554f375a6ae3218e5eac14a1d1fb336dc7","date":1354804202,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazySearch().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazySearch().mjava","sourceNew":"  // This is a little weak. I'm not sure how to test that lazy core2 is loaded automagically. The getCore\n  // will, of course, load it.\n  @Test\n  public void testLazySearch() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // Make sure Lazy2 isn't loaded.\n      checkNotInCores(cc, \"collectionLazy2\");\n      SolrCore core2 = cc.getCore(\"collectionLazy2\");\n\n      addLazy(core2, \"id\", \"0\");\n      addLazy(core2, \"id\", \"1\", \"v_t\", \"Hello Dude\");\n      addLazy(core2, \"id\", \"2\", \"v_t\", \"Hello Yonik\");\n      addLazy(core2, \"id\", \"3\", \"v_s\", \"{!literal}\");\n      addLazy(core2, \"id\", \"4\", \"v_s\", \"other stuff\");\n      addLazy(core2, \"id\", \"5\", \"v_f\", \"3.14159\");\n      addLazy(core2, \"id\", \"6\", \"v_f\", \"8983\");\n\n      SolrQueryRequest req = makeReq(core2);\n      CommitUpdateCommand cmtCmd = new CommitUpdateCommand(req, false);\n      core2.getUpdateHandler().commit(cmtCmd);\n\n      RefCounted<SolrIndexSearcher> holder = core2.getSearcher();\n      SolrIndexSearcher searcher = holder.get();\n\n      // Just get a couple of searches to work!\n      assertQ(\"test prefix query\",\n          makeReq(core2, \"q\", \"{!prefix f=v_t}hel\")\n          , \"//result[@numFound='2']\"\n      );\n\n      assertQ(\"test raw query\",\n          makeReq(core2, \"q\", \"{!raw f=v_t}hello\")\n          , \"//result[@numFound='2']\"\n      );\n\n      // Now just insure that the normal searching on \"collection1\" finds _0_ on the same query that found _2_ above.\n      // Use of makeReq above and req below is tricky, very tricky.\n      assertQ(\"test raw query\",\n          req(\"q\", \"{!raw f=v_t}hello\")\n          , \"//result[@numFound='0']\"\n      );\n\n      // no analysis is done, so these should match nothing\n      assertQ(\"test raw query\",\n          makeReq(core2, \"q\", \"{!raw f=v_t}Hello\")\n          , \"//result[@numFound='0']\"\n      );\n      assertQ(\"test raw query\",\n          makeReq(core2, \"q\", \"{!raw f=v_f}1.5\")\n          , \"//result[@numFound='0']\"\n      );\n\n      checkInCores(cc, \"collectionLazy2\");\n\n      searcher.close();\n      core2.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // This is a little weak. I'm not sure how to test that lazy core2 is loaded automagically. The getCore\n  // will, of course, load it.\n  @Test\n  public void testLazySearch() throws Exception {\n    try {\n      // Make sure Lazy2 isn't loaded.\n      checkNotInCores(\"collectionLazy2\");\n      SolrCore core2 = cores.getCore(\"collectionLazy2\");\n\n      addLazy(core2, \"id\", \"0\");\n      addLazy(core2, \"id\", \"1\", \"v_t\", \"Hello Dude\");\n      addLazy(core2, \"id\", \"2\", \"v_t\", \"Hello Yonik\");\n      addLazy(core2, \"id\", \"3\", \"v_s\", \"{!literal}\");\n      addLazy(core2, \"id\", \"4\", \"v_s\", \"other stuff\");\n      addLazy(core2, \"id\", \"5\", \"v_f\", \"3.14159\");\n      addLazy(core2, \"id\", \"6\", \"v_f\", \"8983\");\n\n      SolrQueryRequest req = makeReq(core2);\n      CommitUpdateCommand cmtCmd = new CommitUpdateCommand(req, false);\n      core2.getUpdateHandler().commit(cmtCmd);\n\n      RefCounted<SolrIndexSearcher> holder = core2.getSearcher();\n      SolrIndexSearcher searcher = holder.get();\n\n      // Just get a couple of searches to work!\n      assertQ(\"test prefix query\",\n          makeReq(core2, \"q\", \"{!prefix f=v_t}hel\")\n          , \"//result[@numFound='2']\"\n      );\n\n      assertQ(\"test raw query\",\n          makeReq(core2, \"q\", \"{!raw f=v_t}hello\")\n          , \"//result[@numFound='2']\"\n      );\n\n      // Now just insure that the normal searching on \"collection1\" finds _0_ on the same query that found _2_ above.\n      // Use of makeReq above and req below is tricky, very tricky.\n      assertQ(\"test raw query\",\n          req(\"q\", \"{!raw f=v_t}hello\")\n          , \"//result[@numFound='0']\"\n      );\n\n      // no analysis is done, so these should match nothing\n      assertQ(\"test raw query\",\n          makeReq(core2, \"q\", \"{!raw f=v_t}Hello\")\n          , \"//result[@numFound='0']\"\n      );\n      assertQ(\"test raw query\",\n          makeReq(core2, \"q\", \"{!raw f=v_f}1.5\")\n          , \"//result[@numFound='0']\"\n      );\n\n      checkInCores(\"collectionLazy2\");\n\n      searcher.close();\n      core2.close();\n    } finally {\n      cores.shutdown();\n    }\n  }\n\n","bugFix":["b374d78db8148ec6796fdf37148b33897ab40a8c"],"bugIntro":["8d9daa29108c4330a5533a5cddaa9a95e7eb3061"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazySearch().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazySearch().mjava","sourceNew":"  // This is a little weak. I'm not sure how to test that lazy core2 is loaded automagically. The getCore\n  // will, of course, load it.\n  @Test\n  public void testLazySearch() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // Make sure Lazy2 isn't loaded.\n      checkNotInCores(cc, \"collectionLazy2\");\n      SolrCore core2 = cc.getCore(\"collectionLazy2\");\n\n      addLazy(core2, \"id\", \"0\");\n      addLazy(core2, \"id\", \"1\", \"v_t\", \"Hello Dude\");\n      addLazy(core2, \"id\", \"2\", \"v_t\", \"Hello Yonik\");\n      addLazy(core2, \"id\", \"3\", \"v_s\", \"{!literal}\");\n      addLazy(core2, \"id\", \"4\", \"v_s\", \"other stuff\");\n      addLazy(core2, \"id\", \"5\", \"v_f\", \"3.14159\");\n      addLazy(core2, \"id\", \"6\", \"v_f\", \"8983\");\n\n      SolrQueryRequest req = makeReq(core2);\n      CommitUpdateCommand cmtCmd = new CommitUpdateCommand(req, false);\n      core2.getUpdateHandler().commit(cmtCmd);\n\n      RefCounted<SolrIndexSearcher> holder = core2.getSearcher();\n      SolrIndexSearcher searcher = holder.get();\n\n      // Just get a couple of searches to work!\n      assertQ(\"test prefix query\",\n          makeReq(core2, \"q\", \"{!prefix f=v_t}hel\")\n          , \"//result[@numFound='2']\"\n      );\n\n      assertQ(\"test raw query\",\n          makeReq(core2, \"q\", \"{!raw f=v_t}hello\")\n          , \"//result[@numFound='2']\"\n      );\n\n      // Now just insure that the normal searching on \"collection1\" finds _0_ on the same query that found _2_ above.\n      // Use of makeReq above and req below is tricky, very tricky.\n      assertQ(\"test raw query\",\n          req(\"q\", \"{!raw f=v_t}hello\")\n          , \"//result[@numFound='0']\"\n      );\n\n      // no analysis is done, so these should match nothing\n      assertQ(\"test raw query\",\n          makeReq(core2, \"q\", \"{!raw f=v_t}Hello\")\n          , \"//result[@numFound='0']\"\n      );\n      assertQ(\"test raw query\",\n          makeReq(core2, \"q\", \"{!raw f=v_f}1.5\")\n          , \"//result[@numFound='0']\"\n      );\n\n      checkInCores(cc, \"collectionLazy2\");\n\n      searcher.close();\n      core2.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // This is a little weak. I'm not sure how to test that lazy core2 is loaded automagically. The getCore\n  // will, of course, load it.\n  @Test\n  public void testLazySearch() throws Exception {\n    try {\n      // Make sure Lazy2 isn't loaded.\n      checkNotInCores(\"collectionLazy2\");\n      SolrCore core2 = cores.getCore(\"collectionLazy2\");\n\n      addLazy(core2, \"id\", \"0\");\n      addLazy(core2, \"id\", \"1\", \"v_t\", \"Hello Dude\");\n      addLazy(core2, \"id\", \"2\", \"v_t\", \"Hello Yonik\");\n      addLazy(core2, \"id\", \"3\", \"v_s\", \"{!literal}\");\n      addLazy(core2, \"id\", \"4\", \"v_s\", \"other stuff\");\n      addLazy(core2, \"id\", \"5\", \"v_f\", \"3.14159\");\n      addLazy(core2, \"id\", \"6\", \"v_f\", \"8983\");\n\n      SolrQueryRequest req = makeReq(core2);\n      CommitUpdateCommand cmtCmd = new CommitUpdateCommand(req, false);\n      core2.getUpdateHandler().commit(cmtCmd);\n\n      RefCounted<SolrIndexSearcher> holder = core2.getSearcher();\n      SolrIndexSearcher searcher = holder.get();\n\n      // Just get a couple of searches to work!\n      assertQ(\"test prefix query\",\n          makeReq(core2, \"q\", \"{!prefix f=v_t}hel\")\n          , \"//result[@numFound='2']\"\n      );\n\n      assertQ(\"test raw query\",\n          makeReq(core2, \"q\", \"{!raw f=v_t}hello\")\n          , \"//result[@numFound='2']\"\n      );\n\n      // Now just insure that the normal searching on \"collection1\" finds _0_ on the same query that found _2_ above.\n      // Use of makeReq above and req below is tricky, very tricky.\n      assertQ(\"test raw query\",\n          req(\"q\", \"{!raw f=v_t}hello\")\n          , \"//result[@numFound='0']\"\n      );\n\n      // no analysis is done, so these should match nothing\n      assertQ(\"test raw query\",\n          makeReq(core2, \"q\", \"{!raw f=v_t}Hello\")\n          , \"//result[@numFound='0']\"\n      );\n      assertQ(\"test raw query\",\n          makeReq(core2, \"q\", \"{!raw f=v_f}1.5\")\n          , \"//result[@numFound='0']\"\n      );\n\n      checkInCores(\"collectionLazy2\");\n\n      searcher.close();\n      core2.close();\n    } finally {\n      cores.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8d9daa29108c4330a5533a5cddaa9a95e7eb3061","date":1355669188,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazySearch().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazySearch().mjava","sourceNew":"  // This is a little weak. I'm not sure how to test that lazy core2 is loaded automagically. The getCore\n  // will, of course, load it.\n  @Test\n  public void testLazySearch() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // Make sure Lazy4 isn't loaded. Should be loaded on the get\n      checkNotInCores(cc, \"collectionLazy4\");\n      SolrCore core4 = cc.getCore(\"collectionLazy4\");\n\n      addLazy(core4, \"id\", \"0\");\n      addLazy(core4, \"id\", \"1\", \"v_t\", \"Hello Dude\");\n      addLazy(core4, \"id\", \"2\", \"v_t\", \"Hello Yonik\");\n      addLazy(core4, \"id\", \"3\", \"v_s\", \"{!literal}\");\n      addLazy(core4, \"id\", \"4\", \"v_s\", \"other stuff\");\n      addLazy(core4, \"id\", \"5\", \"v_f\", \"3.14159\");\n      addLazy(core4, \"id\", \"6\", \"v_f\", \"8983\");\n\n      SolrQueryRequest req = makeReq(core4);\n      CommitUpdateCommand cmtCmd = new CommitUpdateCommand(req, false);\n      core4.getUpdateHandler().commit(cmtCmd);\n\n      RefCounted<SolrIndexSearcher> holder = core4.getSearcher();\n      SolrIndexSearcher searcher = holder.get();\n\n      // Just get a couple of searches to work!\n      assertQ(\"test prefix query\",\n          makeReq(core4, \"q\", \"{!prefix f=v_t}hel\")\n          , \"//result[@numFound='2']\"\n      );\n\n      assertQ(\"test raw query\",\n          makeReq(core4, \"q\", \"{!raw f=v_t}hello\")\n          , \"//result[@numFound='2']\"\n      );\n\n      // Now just insure that the normal searching on \"collection1\" finds _0_ on the same query that found _2_ above.\n      // Use of makeReq above and req below is tricky, very tricky.\n      assertQ(\"test raw query\",\n          req(\"q\", \"{!raw f=v_t}hello\")\n          , \"//result[@numFound='0']\"\n      );\n\n      // no analysis is done, so these should match nothing\n      assertQ(\"test raw query\",\n          makeReq(core4, \"q\", \"{!raw f=v_t}Hello\")\n          , \"//result[@numFound='0']\"\n      );\n      assertQ(\"test raw query\",\n          makeReq(core4, \"q\", \"{!raw f=v_f}1.5\")\n          , \"//result[@numFound='0']\"\n      );\n\n      checkInCores(cc, \"collectionLazy4\");\n\n      searcher.close();\n      core4.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // This is a little weak. I'm not sure how to test that lazy core2 is loaded automagically. The getCore\n  // will, of course, load it.\n  @Test\n  public void testLazySearch() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // Make sure Lazy2 isn't loaded.\n      checkNotInCores(cc, \"collectionLazy2\");\n      SolrCore core2 = cc.getCore(\"collectionLazy2\");\n\n      addLazy(core2, \"id\", \"0\");\n      addLazy(core2, \"id\", \"1\", \"v_t\", \"Hello Dude\");\n      addLazy(core2, \"id\", \"2\", \"v_t\", \"Hello Yonik\");\n      addLazy(core2, \"id\", \"3\", \"v_s\", \"{!literal}\");\n      addLazy(core2, \"id\", \"4\", \"v_s\", \"other stuff\");\n      addLazy(core2, \"id\", \"5\", \"v_f\", \"3.14159\");\n      addLazy(core2, \"id\", \"6\", \"v_f\", \"8983\");\n\n      SolrQueryRequest req = makeReq(core2);\n      CommitUpdateCommand cmtCmd = new CommitUpdateCommand(req, false);\n      core2.getUpdateHandler().commit(cmtCmd);\n\n      RefCounted<SolrIndexSearcher> holder = core2.getSearcher();\n      SolrIndexSearcher searcher = holder.get();\n\n      // Just get a couple of searches to work!\n      assertQ(\"test prefix query\",\n          makeReq(core2, \"q\", \"{!prefix f=v_t}hel\")\n          , \"//result[@numFound='2']\"\n      );\n\n      assertQ(\"test raw query\",\n          makeReq(core2, \"q\", \"{!raw f=v_t}hello\")\n          , \"//result[@numFound='2']\"\n      );\n\n      // Now just insure that the normal searching on \"collection1\" finds _0_ on the same query that found _2_ above.\n      // Use of makeReq above and req below is tricky, very tricky.\n      assertQ(\"test raw query\",\n          req(\"q\", \"{!raw f=v_t}hello\")\n          , \"//result[@numFound='0']\"\n      );\n\n      // no analysis is done, so these should match nothing\n      assertQ(\"test raw query\",\n          makeReq(core2, \"q\", \"{!raw f=v_t}Hello\")\n          , \"//result[@numFound='0']\"\n      );\n      assertQ(\"test raw query\",\n          makeReq(core2, \"q\", \"{!raw f=v_f}1.5\")\n          , \"//result[@numFound='0']\"\n      );\n\n      checkInCores(cc, \"collectionLazy2\");\n\n      searcher.close();\n      core2.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":["b374d78db8148ec6796fdf37148b33897ab40a8c","f09a2a554f375a6ae3218e5eac14a1d1fb336dc7"],"bugIntro":["83fbfcaab6a6cd5daf32752c0c35f0e0c15380e0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazySearch().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazySearch().mjava","sourceNew":"  // This is a little weak. I'm not sure how to test that lazy core2 is loaded automagically. The getCore\n  // will, of course, load it.\n  @Test\n  public void testLazySearch() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // Make sure Lazy4 isn't loaded. Should be loaded on the get\n      checkNotInCores(cc, \"collectionLazy4\");\n      SolrCore core4 = cc.getCore(\"collectionLazy4\");\n\n      addLazy(core4, \"id\", \"0\");\n      addLazy(core4, \"id\", \"1\", \"v_t\", \"Hello Dude\");\n      addLazy(core4, \"id\", \"2\", \"v_t\", \"Hello Yonik\");\n      addLazy(core4, \"id\", \"3\", \"v_s\", \"{!literal}\");\n      addLazy(core4, \"id\", \"4\", \"v_s\", \"other stuff\");\n      addLazy(core4, \"id\", \"5\", \"v_f\", \"3.14159\");\n      addLazy(core4, \"id\", \"6\", \"v_f\", \"8983\");\n\n      SolrQueryRequest req = makeReq(core4);\n      CommitUpdateCommand cmtCmd = new CommitUpdateCommand(req, false);\n      core4.getUpdateHandler().commit(cmtCmd);\n\n      RefCounted<SolrIndexSearcher> holder = core4.getSearcher();\n      SolrIndexSearcher searcher = holder.get();\n\n      // Just get a couple of searches to work!\n      assertQ(\"test prefix query\",\n          makeReq(core4, \"q\", \"{!prefix f=v_t}hel\")\n          , \"//result[@numFound='2']\"\n      );\n\n      assertQ(\"test raw query\",\n          makeReq(core4, \"q\", \"{!raw f=v_t}hello\")\n          , \"//result[@numFound='2']\"\n      );\n\n      // Now just insure that the normal searching on \"collection1\" finds _0_ on the same query that found _2_ above.\n      // Use of makeReq above and req below is tricky, very tricky.\n      assertQ(\"test raw query\",\n          req(\"q\", \"{!raw f=v_t}hello\")\n          , \"//result[@numFound='0']\"\n      );\n\n      // no analysis is done, so these should match nothing\n      assertQ(\"test raw query\",\n          makeReq(core4, \"q\", \"{!raw f=v_t}Hello\")\n          , \"//result[@numFound='0']\"\n      );\n      assertQ(\"test raw query\",\n          makeReq(core4, \"q\", \"{!raw f=v_f}1.5\")\n          , \"//result[@numFound='0']\"\n      );\n\n      checkInCores(cc, \"collectionLazy4\");\n\n      searcher.close();\n      core4.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // This is a little weak. I'm not sure how to test that lazy core2 is loaded automagically. The getCore\n  // will, of course, load it.\n  @Test\n  public void testLazySearch() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // Make sure Lazy2 isn't loaded.\n      checkNotInCores(cc, \"collectionLazy2\");\n      SolrCore core2 = cc.getCore(\"collectionLazy2\");\n\n      addLazy(core2, \"id\", \"0\");\n      addLazy(core2, \"id\", \"1\", \"v_t\", \"Hello Dude\");\n      addLazy(core2, \"id\", \"2\", \"v_t\", \"Hello Yonik\");\n      addLazy(core2, \"id\", \"3\", \"v_s\", \"{!literal}\");\n      addLazy(core2, \"id\", \"4\", \"v_s\", \"other stuff\");\n      addLazy(core2, \"id\", \"5\", \"v_f\", \"3.14159\");\n      addLazy(core2, \"id\", \"6\", \"v_f\", \"8983\");\n\n      SolrQueryRequest req = makeReq(core2);\n      CommitUpdateCommand cmtCmd = new CommitUpdateCommand(req, false);\n      core2.getUpdateHandler().commit(cmtCmd);\n\n      RefCounted<SolrIndexSearcher> holder = core2.getSearcher();\n      SolrIndexSearcher searcher = holder.get();\n\n      // Just get a couple of searches to work!\n      assertQ(\"test prefix query\",\n          makeReq(core2, \"q\", \"{!prefix f=v_t}hel\")\n          , \"//result[@numFound='2']\"\n      );\n\n      assertQ(\"test raw query\",\n          makeReq(core2, \"q\", \"{!raw f=v_t}hello\")\n          , \"//result[@numFound='2']\"\n      );\n\n      // Now just insure that the normal searching on \"collection1\" finds _0_ on the same query that found _2_ above.\n      // Use of makeReq above and req below is tricky, very tricky.\n      assertQ(\"test raw query\",\n          req(\"q\", \"{!raw f=v_t}hello\")\n          , \"//result[@numFound='0']\"\n      );\n\n      // no analysis is done, so these should match nothing\n      assertQ(\"test raw query\",\n          makeReq(core2, \"q\", \"{!raw f=v_t}Hello\")\n          , \"//result[@numFound='0']\"\n      );\n      assertQ(\"test raw query\",\n          makeReq(core2, \"q\", \"{!raw f=v_f}1.5\")\n          , \"//result[@numFound='0']\"\n      );\n\n      checkInCores(cc, \"collectionLazy2\");\n\n      searcher.close();\n      core2.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a837c064b67fa63a9394136e31218b908cdcf783","date":1362186072,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazySearch().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazySearch().mjava","sourceNew":"  // This is a little weak. I'm not sure how to test that lazy core2 is loaded automagically. The getCore\n  // will, of course, load it.\n  @Test\n  public void testLazySearch() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // Make sure Lazy4 isn't loaded. Should be loaded on the get\n      checkNotInCores(cc, \"collectionLazy4\");\n      SolrCore core4 = cc.getCore(\"collectionLazy4\");\n\n      addLazy(core4, \"id\", \"0\");\n      addLazy(core4, \"id\", \"1\", \"v_t\", \"Hello Dude\");\n      addLazy(core4, \"id\", \"2\", \"v_t\", \"Hello Yonik\");\n      addLazy(core4, \"id\", \"3\", \"v_s\", \"{!literal}\");\n      addLazy(core4, \"id\", \"4\", \"v_s\", \"other stuff\");\n      addLazy(core4, \"id\", \"5\", \"v_f\", \"3.14159\");\n      addLazy(core4, \"id\", \"6\", \"v_f\", \"8983\");\n\n      SolrQueryRequest req = makeReq(core4);\n      CommitUpdateCommand cmtCmd = new CommitUpdateCommand(req, false);\n      core4.getUpdateHandler().commit(cmtCmd);\n\n      RefCounted<SolrIndexSearcher> holder = core4.getSearcher();\n      SolrIndexSearcher searcher = holder.get();\n\n      // Just get a couple of searches to work!\n      assertQ(\"test prefix query\",\n          makeReq(core4, \"q\", \"{!prefix f=v_t}hel\", \"wt\", \"xml\")\n          , \"//result[@numFound='2']\"\n      );\n\n      assertQ(\"test raw query\",\n          makeReq(core4, \"q\", \"{!raw f=v_t}hello\", \"wt\", \"xml\")\n          , \"//result[@numFound='2']\"\n      );\n\n      // Now just insure that the normal searching on \"collection1\" finds _0_ on the same query that found _2_ above.\n      // Use of makeReq above and req below is tricky, very tricky.\n      assertQ(\"test raw query\",\n          req(\"q\", \"{!raw f=v_t}hello\", \"wt\", \"xml\")\n          , \"//result[@numFound='0']\"\n      );\n\n      // no analysis is done, so these should match nothing\n      assertQ(\"test raw query\",\n          makeReq(core4, \"q\", \"{!raw f=v_t}Hello\", \"wt\", \"xml\")\n          , \"//result[@numFound='0']\"\n      );\n      assertQ(\"test raw query\",\n          makeReq(core4, \"q\", \"{!raw f=v_f}1.5\", \"wt\", \"xml\")\n          , \"//result[@numFound='0']\"\n      );\n\n      checkInCores(cc, \"collectionLazy4\");\n\n      searcher.close();\n      core4.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // This is a little weak. I'm not sure how to test that lazy core2 is loaded automagically. The getCore\n  // will, of course, load it.\n  @Test\n  public void testLazySearch() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // Make sure Lazy4 isn't loaded. Should be loaded on the get\n      checkNotInCores(cc, \"collectionLazy4\");\n      SolrCore core4 = cc.getCore(\"collectionLazy4\");\n\n      addLazy(core4, \"id\", \"0\");\n      addLazy(core4, \"id\", \"1\", \"v_t\", \"Hello Dude\");\n      addLazy(core4, \"id\", \"2\", \"v_t\", \"Hello Yonik\");\n      addLazy(core4, \"id\", \"3\", \"v_s\", \"{!literal}\");\n      addLazy(core4, \"id\", \"4\", \"v_s\", \"other stuff\");\n      addLazy(core4, \"id\", \"5\", \"v_f\", \"3.14159\");\n      addLazy(core4, \"id\", \"6\", \"v_f\", \"8983\");\n\n      SolrQueryRequest req = makeReq(core4);\n      CommitUpdateCommand cmtCmd = new CommitUpdateCommand(req, false);\n      core4.getUpdateHandler().commit(cmtCmd);\n\n      RefCounted<SolrIndexSearcher> holder = core4.getSearcher();\n      SolrIndexSearcher searcher = holder.get();\n\n      // Just get a couple of searches to work!\n      assertQ(\"test prefix query\",\n          makeReq(core4, \"q\", \"{!prefix f=v_t}hel\")\n          , \"//result[@numFound='2']\"\n      );\n\n      assertQ(\"test raw query\",\n          makeReq(core4, \"q\", \"{!raw f=v_t}hello\")\n          , \"//result[@numFound='2']\"\n      );\n\n      // Now just insure that the normal searching on \"collection1\" finds _0_ on the same query that found _2_ above.\n      // Use of makeReq above and req below is tricky, very tricky.\n      assertQ(\"test raw query\",\n          req(\"q\", \"{!raw f=v_t}hello\")\n          , \"//result[@numFound='0']\"\n      );\n\n      // no analysis is done, so these should match nothing\n      assertQ(\"test raw query\",\n          makeReq(core4, \"q\", \"{!raw f=v_t}Hello\")\n          , \"//result[@numFound='0']\"\n      );\n      assertQ(\"test raw query\",\n          makeReq(core4, \"q\", \"{!raw f=v_f}1.5\")\n          , \"//result[@numFound='0']\"\n      );\n\n      checkInCores(cc, \"collectionLazy4\");\n\n      searcher.close();\n      core4.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["83fbfcaab6a6cd5daf32752c0c35f0e0c15380e0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0cf46558b3f7708ed3a21e174b9e11cd30e26be","date":1365551184,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazySearch().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazySearch().mjava","sourceNew":"  @Test\n  public void testLazySearch() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // Make sure Lazy4 isn't loaded. Should be loaded on the get\n      checkNotInCores(cc, \"collectionLazy4\");\n      SolrCore core4 = cc.getCore(\"collectionLazy4\");\n\n      addLazy(core4, \"id\", \"0\");\n      addLazy(core4, \"id\", \"1\", \"v_t\", \"Hello Dude\");\n      addLazy(core4, \"id\", \"2\", \"v_t\", \"Hello Yonik\");\n      addLazy(core4, \"id\", \"3\", \"v_s\", \"{!literal}\");\n      addLazy(core4, \"id\", \"4\", \"v_s\", \"other stuff\");\n      addLazy(core4, \"id\", \"5\", \"v_f\", \"3.14159\");\n      addLazy(core4, \"id\", \"6\", \"v_f\", \"8983\");\n\n      SolrQueryRequest req = makeReq(core4);\n      CommitUpdateCommand cmtCmd = new CommitUpdateCommand(req, false);\n      core4.getUpdateHandler().commit(cmtCmd);\n\n      RefCounted<SolrIndexSearcher> holder = core4.getSearcher();\n      SolrIndexSearcher searcher = holder.get();\n\n      // Just get a couple of searches to work!\n      assertQ(\"test prefix query\",\n          makeReq(core4, \"q\", \"{!prefix f=v_t}hel\", \"wt\", \"xml\")\n          , \"//result[@numFound='2']\"\n      );\n\n      assertQ(\"test raw query\",\n          makeReq(core4, \"q\", \"{!raw f=v_t}hello\", \"wt\", \"xml\")\n          , \"//result[@numFound='2']\"\n      );\n\n      // Now just insure that the normal searching on \"collection1\" finds _0_ on the same query that found _2_ above.\n      // Use of makeReq above and req below is tricky, very tricky.\n      assertQ(\"test raw query\",\n          req(\"q\", \"{!raw f=v_t}hello\", \"wt\", \"xml\")\n          , \"//result[@numFound='0']\"\n      );\n\n      // no analysis is done, so these should match nothing\n      assertQ(\"test raw query\",\n          makeReq(core4, \"q\", \"{!raw f=v_t}Hello\", \"wt\", \"xml\")\n          , \"//result[@numFound='0']\"\n      );\n      assertQ(\"test raw query\",\n          makeReq(core4, \"q\", \"{!raw f=v_f}1.5\", \"wt\", \"xml\")\n          , \"//result[@numFound='0']\"\n      );\n\n      checkInCores(cc, \"collectionLazy4\");\n\n      searcher.close();\n      core4.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // This is a little weak. I'm not sure how to test that lazy core2 is loaded automagically. The getCore\n  // will, of course, load it.\n  @Test\n  public void testLazySearch() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // Make sure Lazy4 isn't loaded. Should be loaded on the get\n      checkNotInCores(cc, \"collectionLazy4\");\n      SolrCore core4 = cc.getCore(\"collectionLazy4\");\n\n      addLazy(core4, \"id\", \"0\");\n      addLazy(core4, \"id\", \"1\", \"v_t\", \"Hello Dude\");\n      addLazy(core4, \"id\", \"2\", \"v_t\", \"Hello Yonik\");\n      addLazy(core4, \"id\", \"3\", \"v_s\", \"{!literal}\");\n      addLazy(core4, \"id\", \"4\", \"v_s\", \"other stuff\");\n      addLazy(core4, \"id\", \"5\", \"v_f\", \"3.14159\");\n      addLazy(core4, \"id\", \"6\", \"v_f\", \"8983\");\n\n      SolrQueryRequest req = makeReq(core4);\n      CommitUpdateCommand cmtCmd = new CommitUpdateCommand(req, false);\n      core4.getUpdateHandler().commit(cmtCmd);\n\n      RefCounted<SolrIndexSearcher> holder = core4.getSearcher();\n      SolrIndexSearcher searcher = holder.get();\n\n      // Just get a couple of searches to work!\n      assertQ(\"test prefix query\",\n          makeReq(core4, \"q\", \"{!prefix f=v_t}hel\", \"wt\", \"xml\")\n          , \"//result[@numFound='2']\"\n      );\n\n      assertQ(\"test raw query\",\n          makeReq(core4, \"q\", \"{!raw f=v_t}hello\", \"wt\", \"xml\")\n          , \"//result[@numFound='2']\"\n      );\n\n      // Now just insure that the normal searching on \"collection1\" finds _0_ on the same query that found _2_ above.\n      // Use of makeReq above and req below is tricky, very tricky.\n      assertQ(\"test raw query\",\n          req(\"q\", \"{!raw f=v_t}hello\", \"wt\", \"xml\")\n          , \"//result[@numFound='0']\"\n      );\n\n      // no analysis is done, so these should match nothing\n      assertQ(\"test raw query\",\n          makeReq(core4, \"q\", \"{!raw f=v_t}Hello\", \"wt\", \"xml\")\n          , \"//result[@numFound='0']\"\n      );\n      assertQ(\"test raw query\",\n          makeReq(core4, \"q\", \"{!raw f=v_f}1.5\", \"wt\", \"xml\")\n          , \"//result[@numFound='0']\"\n      );\n\n      checkInCores(cc, \"collectionLazy4\");\n\n      searcher.close();\n      core4.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":["b374d78db8148ec6796fdf37148b33897ab40a8c"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"83fbfcaab6a6cd5daf32752c0c35f0e0c15380e0","date":1377955248,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazySearch().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazySearch().mjava","sourceNew":"  @Test\n  public void testLazySearch() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // Make sure Lazy4 isn't loaded. Should be loaded on the get\n      checkNotInCores(cc, \"collectionLazy4\");\n      SolrCore core4 = cc.getCore(\"collectionLazy4\");\n\n      checkSearch(core4);\n\n      // Now just insure that the normal searching on \"collection1\" finds _0_ on the same query that found _2_ above.\n      // Use of makeReq above and req below is tricky, very tricky.\n      assertQ(\"test raw query\",\n          req(\"q\", \"{!raw f=v_t}hello\", \"wt\", \"xml\")\n          , \"//result[@numFound='0']\"\n      );\n\n      checkInCores(cc, \"collectionLazy4\");\n\n      core4.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLazySearch() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // Make sure Lazy4 isn't loaded. Should be loaded on the get\n      checkNotInCores(cc, \"collectionLazy4\");\n      SolrCore core4 = cc.getCore(\"collectionLazy4\");\n\n      addLazy(core4, \"id\", \"0\");\n      addLazy(core4, \"id\", \"1\", \"v_t\", \"Hello Dude\");\n      addLazy(core4, \"id\", \"2\", \"v_t\", \"Hello Yonik\");\n      addLazy(core4, \"id\", \"3\", \"v_s\", \"{!literal}\");\n      addLazy(core4, \"id\", \"4\", \"v_s\", \"other stuff\");\n      addLazy(core4, \"id\", \"5\", \"v_f\", \"3.14159\");\n      addLazy(core4, \"id\", \"6\", \"v_f\", \"8983\");\n\n      SolrQueryRequest req = makeReq(core4);\n      CommitUpdateCommand cmtCmd = new CommitUpdateCommand(req, false);\n      core4.getUpdateHandler().commit(cmtCmd);\n\n      RefCounted<SolrIndexSearcher> holder = core4.getSearcher();\n      SolrIndexSearcher searcher = holder.get();\n\n      // Just get a couple of searches to work!\n      assertQ(\"test prefix query\",\n          makeReq(core4, \"q\", \"{!prefix f=v_t}hel\", \"wt\", \"xml\")\n          , \"//result[@numFound='2']\"\n      );\n\n      assertQ(\"test raw query\",\n          makeReq(core4, \"q\", \"{!raw f=v_t}hello\", \"wt\", \"xml\")\n          , \"//result[@numFound='2']\"\n      );\n\n      // Now just insure that the normal searching on \"collection1\" finds _0_ on the same query that found _2_ above.\n      // Use of makeReq above and req below is tricky, very tricky.\n      assertQ(\"test raw query\",\n          req(\"q\", \"{!raw f=v_t}hello\", \"wt\", \"xml\")\n          , \"//result[@numFound='0']\"\n      );\n\n      // no analysis is done, so these should match nothing\n      assertQ(\"test raw query\",\n          makeReq(core4, \"q\", \"{!raw f=v_t}Hello\", \"wt\", \"xml\")\n          , \"//result[@numFound='0']\"\n      );\n      assertQ(\"test raw query\",\n          makeReq(core4, \"q\", \"{!raw f=v_f}1.5\", \"wt\", \"xml\")\n          , \"//result[@numFound='0']\"\n      );\n\n      checkInCores(cc, \"collectionLazy4\");\n\n      searcher.close();\n      core4.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":["b374d78db8148ec6796fdf37148b33897ab40a8c","a837c064b67fa63a9394136e31218b908cdcf783","8d9daa29108c4330a5533a5cddaa9a95e7eb3061"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazySearch().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazySearch().mjava","sourceNew":"  @Test\n  public void testLazySearch() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // Make sure Lazy4 isn't loaded. Should be loaded on the get\n      checkNotInCores(cc, \"collectionLazy4\");\n      SolrCore core4 = cc.getCore(\"collectionLazy4\");\n\n      checkSearch(core4);\n\n      // Now just insure that the normal searching on \"collection1\" finds _0_ on the same query that found _2_ above.\n      // Use of makeReq above and req below is tricky, very tricky.\n      SolrCore collection1 = cc.getCore(\"collection1\");\n      assertQ(\"test raw query\",\n          makeReq(collection1, \"q\", \"{!raw f=v_t}hello\", \"wt\", \"xml\")\n          , \"//result[@numFound='0']\"\n      );\n\n      checkInCores(cc, \"collectionLazy4\");\n\n      core4.close();\n      collection1.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLazySearch() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // Make sure Lazy4 isn't loaded. Should be loaded on the get\n      checkNotInCores(cc, \"collectionLazy4\");\n      SolrCore core4 = cc.getCore(\"collectionLazy4\");\n\n      checkSearch(core4);\n\n      // Now just insure that the normal searching on \"collection1\" finds _0_ on the same query that found _2_ above.\n      // Use of makeReq above and req below is tricky, very tricky.\n      assertQ(\"test raw query\",\n          req(\"q\", \"{!raw f=v_t}hello\", \"wt\", \"xml\")\n          , \"//result[@numFound='0']\"\n      );\n\n      checkInCores(cc, \"collectionLazy4\");\n\n      core4.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","date":1448892165,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazySearch().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazySearch().mjava","sourceNew":"  @Test\n  public void testLazySearch() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // Make sure Lazy4 isn't loaded. Should be loaded on the get\n      checkNotInCores(cc, \"collection4\");\n      SolrCore core4 = cc.getCore(\"collection4\");\n\n      checkSearch(core4);\n\n      // Now just insure that the normal searching on \"collection1\" finds _0_ on the same query that found _2_ above.\n      // Use of makeReq above and req below is tricky, very tricky.\n      SolrCore collection1 = cc.getCore(\"collection1\");\n      assertQ(\"test raw query\",\n          makeReq(collection1, \"q\", \"{!raw f=v_t}hello\", \"wt\", \"xml\")\n          , \"//result[@numFound='0']\"\n      );\n\n      checkInCores(cc, \"collection4\");\n\n      core4.close();\n      collection1.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLazySearch() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // Make sure Lazy4 isn't loaded. Should be loaded on the get\n      checkNotInCores(cc, \"collectionLazy4\");\n      SolrCore core4 = cc.getCore(\"collectionLazy4\");\n\n      checkSearch(core4);\n\n      // Now just insure that the normal searching on \"collection1\" finds _0_ on the same query that found _2_ above.\n      // Use of makeReq above and req below is tricky, very tricky.\n      SolrCore collection1 = cc.getCore(\"collection1\");\n      assertQ(\"test raw query\",\n          makeReq(collection1, \"q\", \"{!raw f=v_t}hello\", \"wt\", \"xml\")\n          , \"//result[@numFound='0']\"\n      );\n\n      checkInCores(cc, \"collectionLazy4\");\n\n      core4.close();\n      collection1.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9435d55e3ea95c5d94406d3affc36f9505b6a736","date":1491251232,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazySearch().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazySearch().mjava","sourceNew":"  @Test\n  public void testLazySearch() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // Make sure Lazy4 isn't loaded. Should be loaded on the get\n      checkNotInCores(cc, \"collection4\");\n      SolrCore core4 = cc.getCore(\"collection4\");\n\n      checkSearch(core4);\n\n      // Now just insure that the normal searching on \"collection1\" finds _0_ on the same query that found _2_ above.\n      // Use of makeReq above and req below is tricky, very tricky.\n      SolrCore collection1 = cc.getCore(\"collection1\");\n      assertQ(\"test raw query\",\n          makeReq(collection1, \"q\", \"{!raw f=v_t}hello\", \"wt\", \"xml\")\n          , \"//result[@numFound='0']\"\n      );\n\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection4\", \"collection5\");\n\n      core4.close();\n      collection1.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLazySearch() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // Make sure Lazy4 isn't loaded. Should be loaded on the get\n      checkNotInCores(cc, \"collection4\");\n      SolrCore core4 = cc.getCore(\"collection4\");\n\n      checkSearch(core4);\n\n      // Now just insure that the normal searching on \"collection1\" finds _0_ on the same query that found _2_ above.\n      // Use of makeReq above and req below is tricky, very tricky.\n      SolrCore collection1 = cc.getCore(\"collection1\");\n      assertQ(\"test raw query\",\n          makeReq(collection1, \"q\", \"{!raw f=v_t}hello\", \"wt\", \"xml\")\n          , \"//result[@numFound='0']\"\n      );\n\n      checkInCores(cc, \"collection4\");\n\n      core4.close();\n      collection1.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b6a4b585aed7660a589375f6a09b90efd29c961","date":1491296430,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazySearch().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazySearch().mjava","sourceNew":"  @Test\n  public void testLazySearch() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // Make sure Lazy4 isn't loaded. Should be loaded on the get\n      checkNotInCores(cc, \"collection4\");\n      SolrCore core4 = cc.getCore(\"collection4\");\n\n      checkSearch(core4);\n\n      // Now just insure that the normal searching on \"collection1\" finds _0_ on the same query that found _2_ above.\n      // Use of makeReq above and req below is tricky, very tricky.\n      SolrCore collection1 = cc.getCore(\"collection1\");\n      assertQ(\"test raw query\",\n          makeReq(collection1, \"q\", \"{!raw f=v_t}hello\", \"wt\", \"xml\")\n          , \"//result[@numFound='0']\"\n      );\n\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection4\", \"collection5\");\n\n      core4.close();\n      collection1.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLazySearch() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // Make sure Lazy4 isn't loaded. Should be loaded on the get\n      checkNotInCores(cc, \"collection4\");\n      SolrCore core4 = cc.getCore(\"collection4\");\n\n      checkSearch(core4);\n\n      // Now just insure that the normal searching on \"collection1\" finds _0_ on the same query that found _2_ above.\n      // Use of makeReq above and req below is tricky, very tricky.\n      SolrCore collection1 = cc.getCore(\"collection1\");\n      assertQ(\"test raw query\",\n          makeReq(collection1, \"q\", \"{!raw f=v_t}hello\", \"wt\", \"xml\")\n          , \"//result[@numFound='0']\"\n      );\n\n      checkInCores(cc, \"collection4\");\n\n      core4.close();\n      collection1.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7871f9c286dce2a9370bcf517a3e7d12e3bd9602","date":1498708934,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazySearch().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazySearch().mjava","sourceNew":"  @Test\n  public void testLazySearch() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // Make sure Lazy4 isn't loaded. Should be loaded on the get\n      checkNotInCores(cc, Arrays.asList(\"collection4\"));\n      SolrCore core4 = cc.getCore(\"collection4\");\n\n      checkSearch(core4);\n\n      // Now just insure that the normal searching on \"collection1\" finds _0_ on the same query that found _2_ above.\n      // Use of makeReq above and req below is tricky, very tricky.\n      SolrCore collection1 = cc.getCore(\"collection1\");\n      assertQ(\"test raw query\",\n          makeReq(collection1, \"q\", \"{!raw f=v_t}hello\", \"wt\", \"xml\")\n          , \"//result[@numFound='0']\"\n      );\n\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection4\", \"collection5\");\n\n      core4.close();\n      collection1.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLazySearch() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // Make sure Lazy4 isn't loaded. Should be loaded on the get\n      checkNotInCores(cc, \"collection4\");\n      SolrCore core4 = cc.getCore(\"collection4\");\n\n      checkSearch(core4);\n\n      // Now just insure that the normal searching on \"collection1\" finds _0_ on the same query that found _2_ above.\n      // Use of makeReq above and req below is tricky, very tricky.\n      SolrCore collection1 = cc.getCore(\"collection1\");\n      assertQ(\"test raw query\",\n          makeReq(collection1, \"q\", \"{!raw f=v_t}hello\", \"wt\", \"xml\")\n          , \"//result[@numFound='0']\"\n      );\n\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection4\", \"collection5\");\n\n      core4.close();\n      collection1.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazySearch().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazySearch().mjava","sourceNew":"  @Test\n  public void testLazySearch() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // Make sure Lazy4 isn't loaded. Should be loaded on the get\n      checkNotInCores(cc, Arrays.asList(\"collection4\"));\n      SolrCore core4 = cc.getCore(\"collection4\");\n\n      checkSearch(core4);\n\n      // Now just insure that the normal searching on \"collection1\" finds _0_ on the same query that found _2_ above.\n      // Use of makeReq above and req below is tricky, very tricky.\n      SolrCore collection1 = cc.getCore(\"collection1\");\n      assertQ(\"test raw query\",\n          makeReq(collection1, \"q\", \"{!raw f=v_t}hello\", \"wt\", \"xml\")\n          , \"//result[@numFound='0']\"\n      );\n\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection4\", \"collection5\");\n\n      core4.close();\n      collection1.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLazySearch() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // Make sure Lazy4 isn't loaded. Should be loaded on the get\n      checkNotInCores(cc, \"collection4\");\n      SolrCore core4 = cc.getCore(\"collection4\");\n\n      checkSearch(core4);\n\n      // Now just insure that the normal searching on \"collection1\" finds _0_ on the same query that found _2_ above.\n      // Use of makeReq above and req below is tricky, very tricky.\n      SolrCore collection1 = cc.getCore(\"collection1\");\n      assertQ(\"test raw query\",\n          makeReq(collection1, \"q\", \"{!raw f=v_t}hello\", \"wt\", \"xml\")\n          , \"//result[@numFound='0']\"\n      );\n\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection4\", \"collection5\");\n\n      core4.close();\n      collection1.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazySearch().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#testLazySearch().mjava","sourceNew":"  @Test\n  public void testLazySearch() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // Make sure Lazy4 isn't loaded. Should be loaded on the get\n      checkNotInCores(cc, Arrays.asList(\"collection4\"));\n      SolrCore core4 = cc.getCore(\"collection4\");\n\n      checkSearch(core4);\n\n      // Now just insure that the normal searching on \"collection1\" finds _0_ on the same query that found _2_ above.\n      // Use of makeReq above and req below is tricky, very tricky.\n      SolrCore collection1 = cc.getCore(\"collection1\");\n      assertQ(\"test raw query\",\n          makeReq(collection1, \"q\", \"{!raw f=v_t}hello\", \"wt\", \"xml\")\n          , \"//result[@numFound='0']\"\n      );\n\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection4\", \"collection5\");\n\n      core4.close();\n      collection1.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLazySearch() throws Exception {\n    CoreContainer cc = init();\n    try {\n      // Make sure Lazy4 isn't loaded. Should be loaded on the get\n      checkNotInCores(cc, \"collection4\");\n      SolrCore core4 = cc.getCore(\"collection4\");\n\n      checkSearch(core4);\n\n      // Now just insure that the normal searching on \"collection1\" finds _0_ on the same query that found _2_ above.\n      // Use of makeReq above and req below is tricky, very tricky.\n      SolrCore collection1 = cc.getCore(\"collection1\");\n      assertQ(\"test raw query\",\n          makeReq(collection1, \"q\", \"{!raw f=v_t}hello\", \"wt\", \"xml\")\n          , \"//result[@numFound='0']\"\n      );\n\n      checkInCores(cc, \"collection1\", \"collection2\", \"collection4\", \"collection5\");\n\n      core4.close();\n      collection1.close();\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","8d9daa29108c4330a5533a5cddaa9a95e7eb3061"],"9435d55e3ea95c5d94406d3affc36f9505b6a736":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"a0cf46558b3f7708ed3a21e174b9e11cd30e26be":["a837c064b67fa63a9394136e31218b908cdcf783"],"83fbfcaab6a6cd5daf32752c0c35f0e0c15380e0":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"407687e67faf6e1f02a211ca078d8e3eed631027":["b374d78db8148ec6796fdf37148b33897ab40a8c","f09a2a554f375a6ae3218e5eac14a1d1fb336dc7"],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["9435d55e3ea95c5d94406d3affc36f9505b6a736"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["83fbfcaab6a6cd5daf32752c0c35f0e0c15380e0"],"30c8e5574b55d57947e989443dfde611646530ee":["8b6a4b585aed7660a589375f6a09b90efd29c961","28288370235ed02234a64753cdbf0c6ec096304a"],"8b6a4b585aed7660a589375f6a09b90efd29c961":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"28288370235ed02234a64753cdbf0c6ec096304a":["9435d55e3ea95c5d94406d3affc36f9505b6a736","7871f9c286dce2a9370bcf517a3e7d12e3bd9602"],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"8d9daa29108c4330a5533a5cddaa9a95e7eb3061":["f09a2a554f375a6ae3218e5eac14a1d1fb336dc7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b374d78db8148ec6796fdf37148b33897ab40a8c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a837c064b67fa63a9394136e31218b908cdcf783":["8d9daa29108c4330a5533a5cddaa9a95e7eb3061"],"f09a2a554f375a6ae3218e5eac14a1d1fb336dc7":["b374d78db8148ec6796fdf37148b33897ab40a8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"9435d55e3ea95c5d94406d3affc36f9505b6a736":["7871f9c286dce2a9370bcf517a3e7d12e3bd9602","28288370235ed02234a64753cdbf0c6ec096304a"],"a0cf46558b3f7708ed3a21e174b9e11cd30e26be":["83fbfcaab6a6cd5daf32752c0c35f0e0c15380e0"],"83fbfcaab6a6cd5daf32752c0c35f0e0c15380e0":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["28288370235ed02234a64753cdbf0c6ec096304a"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"30c8e5574b55d57947e989443dfde611646530ee":[],"8b6a4b585aed7660a589375f6a09b90efd29c961":["30c8e5574b55d57947e989443dfde611646530ee"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["9435d55e3ea95c5d94406d3affc36f9505b6a736","8b6a4b585aed7660a589375f6a09b90efd29c961"],"8d9daa29108c4330a5533a5cddaa9a95e7eb3061":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a837c064b67fa63a9394136e31218b908cdcf783"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b374d78db8148ec6796fdf37148b33897ab40a8c"],"b374d78db8148ec6796fdf37148b33897ab40a8c":["407687e67faf6e1f02a211ca078d8e3eed631027","f09a2a554f375a6ae3218e5eac14a1d1fb336dc7"],"a837c064b67fa63a9394136e31218b908cdcf783":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"f09a2a554f375a6ae3218e5eac14a1d1fb336dc7":["407687e67faf6e1f02a211ca078d8e3eed631027","8d9daa29108c4330a5533a5cddaa9a95e7eb3061"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}