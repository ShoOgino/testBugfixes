{"path":"lucene/src/test-framework/org/apache/lucene/index/MockRandomMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","commits":[{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/MockRandomMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/MockRandomMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","sourceNew":"  @Override\n  public MergeSpecification findMergesForOptimize(\n      SegmentInfos segmentInfos, int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize)\n    throws CorruptIndexException, IOException {\n\n    //System.out.println(\"MRMP: findMergesForOptimize sis=\" + segmentInfos);\n    MergeSpecification mergeSpec = null;\n    if (segmentInfos.size() > 1 || (segmentInfos.size() == 1 && segmentInfos.info(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      SegmentInfos segmentInfos2 = new SegmentInfos();\n      segmentInfos2.addAll(segmentInfos);\n      Collections.shuffle(segmentInfos2, random);\n      int upto = 0;\n      while(upto < segmentInfos.size()) {\n        int max = Math.min(10, segmentInfos.size()-upto);\n        int inc = max <= 2 ? max : _TestUtil.nextInt(random, 2, max);\n        mergeSpec.add(new OneMerge(segmentInfos2.range(upto, upto+inc)));\n        upto += inc;\n      }\n    }\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesForOptimize(\n      SegmentInfos segmentInfos, int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize)\n    throws CorruptIndexException, IOException {\n\n    //System.out.println(\"MRMP: findMergesForOptimize sis=\" + segmentInfos);\n    MergeSpecification mergeSpec = null;\n    if (segmentInfos.size() > 1 || (segmentInfos.size() == 1 && segmentInfos.info(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      SegmentInfos segmentInfos2 = new SegmentInfos();\n      segmentInfos2.addAll(segmentInfos);\n      Collections.shuffle(segmentInfos2, random);\n      int upto = 0;\n      while(upto < segmentInfos.size()) {\n        int max = Math.min(10, segmentInfos.size()-upto);\n        int inc = max <= 2 ? max : _TestUtil.nextInt(random, 2, max);\n        mergeSpec.add(new OneMerge(segmentInfos2.range(upto, upto+inc)));\n        upto += inc;\n      }\n    }\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/MockRandomMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public MergeSpecification findMergesForOptimize(\n      SegmentInfos segmentInfos, int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize)\n    throws CorruptIndexException, IOException {\n\n    //System.out.println(\"MRMP: findMergesForOptimize sis=\" + segmentInfos);\n    MergeSpecification mergeSpec = null;\n    if (segmentInfos.size() > 1 || (segmentInfos.size() == 1 && segmentInfos.info(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      SegmentInfos segmentInfos2 = new SegmentInfos();\n      segmentInfos2.addAll(segmentInfos);\n      Collections.shuffle(segmentInfos2, random);\n      int upto = 0;\n      while(upto < segmentInfos.size()) {\n        int max = Math.min(10, segmentInfos.size()-upto);\n        int inc = max <= 2 ? max : _TestUtil.nextInt(random, 2, max);\n        mergeSpec.add(new OneMerge(segmentInfos2.range(upto, upto+inc)));\n        upto += inc;\n      }\n    }\n    return mergeSpec;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/MockRandomMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public MergeSpecification findMergesForOptimize(\n      SegmentInfos segmentInfos, int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize)\n    throws CorruptIndexException, IOException {\n\n    //System.out.println(\"MRMP: findMergesForOptimize sis=\" + segmentInfos);\n    MergeSpecification mergeSpec = null;\n    if (segmentInfos.size() > 1 || (segmentInfos.size() == 1 && segmentInfos.info(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      SegmentInfos segmentInfos2 = new SegmentInfos();\n      segmentInfos2.addAll(segmentInfos);\n      Collections.shuffle(segmentInfos2, random);\n      int upto = 0;\n      while(upto < segmentInfos.size()) {\n        int max = Math.min(10, segmentInfos.size()-upto);\n        int inc = max <= 2 ? max : _TestUtil.nextInt(random, 2, max);\n        mergeSpec.add(new OneMerge(segmentInfos2.range(upto, upto+inc)));\n        upto += inc;\n      }\n    }\n    return mergeSpec;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f9de0e14b6cea7b32a86ec19999587bfbb023f8","date":1304954253,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/MockRandomMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/MockRandomMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","sourceNew":"  @Override\n  public MergeSpecification findMergesForOptimize(\n      SegmentInfos segmentInfos, int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize)\n    throws CorruptIndexException, IOException {\n\n    final SegmentInfos eligibleSegments = new SegmentInfos();\n    for(SegmentInfo info : segmentInfos) {\n      if (segmentsToOptimize.contains(info)) {\n        eligibleSegments.add(info);\n      }\n    }\n\n    //System.out.println(\"MRMP: findMergesForOptimize sis=\" + segmentInfos + \" eligible=\" + eligibleSegments);\n    MergeSpecification mergeSpec = null;\n    if (eligibleSegments.size() > 1 || (eligibleSegments.size() == 1 && eligibleSegments.get(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      // Already shuffled having come out of a set but\n      // shuffle again for good measure:\n      Collections.shuffle(eligibleSegments, random);\n      int upto = 0;\n      while(upto < eligibleSegments.size()) {\n        int max = Math.min(10, eligibleSegments.size()-upto);\n        int inc = max <= 2 ? max : _TestUtil.nextInt(random, 2, max);\n        mergeSpec.add(new OneMerge(eligibleSegments.range(upto, upto+inc)));\n        upto += inc;\n      }\n    }\n\n    if (mergeSpec != null) {\n      for(OneMerge merge : mergeSpec.merges) {\n        for(SegmentInfo info : merge.segments) {\n          assert segmentsToOptimize.contains(info);\n        }\n      }\n    }\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesForOptimize(\n      SegmentInfos segmentInfos, int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize)\n    throws CorruptIndexException, IOException {\n\n    //System.out.println(\"MRMP: findMergesForOptimize sis=\" + segmentInfos);\n    MergeSpecification mergeSpec = null;\n    if (segmentInfos.size() > 1 || (segmentInfos.size() == 1 && segmentInfos.info(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      SegmentInfos segmentInfos2 = new SegmentInfos();\n      segmentInfos2.addAll(segmentInfos);\n      Collections.shuffle(segmentInfos2, random);\n      int upto = 0;\n      while(upto < segmentInfos.size()) {\n        int max = Math.min(10, segmentInfos.size()-upto);\n        int inc = max <= 2 ? max : _TestUtil.nextInt(random, 2, max);\n        mergeSpec.add(new OneMerge(segmentInfos2.range(upto, upto+inc)));\n        upto += inc;\n      }\n    }\n    return mergeSpec;\n  }\n\n","bugFix":["3e2234d6cf76d3960fbc62f9c1ba2d13ebe43472","c19f985e36a65cc969e8e564fe337a0d41512075"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5270fb4f55a1b77663dda53cb8090c083f0a23b3","date":1305050821,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/MockRandomMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/MockRandomMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","sourceNew":"  @Override\n  public MergeSpecification findMergesForOptimize(\n      SegmentInfos segmentInfos, int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize)\n    throws CorruptIndexException, IOException {\n\n    final List<SegmentInfo> eligibleSegments = new ArrayList<SegmentInfo>();\n    for(SegmentInfo info : segmentInfos) {\n      if (segmentsToOptimize.contains(info)) {\n        eligibleSegments.add(info);\n      }\n    }\n\n    //System.out.println(\"MRMP: findMergesForOptimize sis=\" + segmentInfos + \" eligible=\" + eligibleSegments);\n    MergeSpecification mergeSpec = null;\n    if (eligibleSegments.size() > 1 || (eligibleSegments.size() == 1 && eligibleSegments.get(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      // Already shuffled having come out of a set but\n      // shuffle again for good measure:\n      Collections.shuffle(eligibleSegments, random);\n      int upto = 0;\n      while(upto < eligibleSegments.size()) {\n        int max = Math.min(10, eligibleSegments.size()-upto);\n        int inc = max <= 2 ? max : _TestUtil.nextInt(random, 2, max);\n        mergeSpec.add(new OneMerge(eligibleSegments.subList(upto, upto+inc)));\n        upto += inc;\n      }\n    }\n\n    if (mergeSpec != null) {\n      for(OneMerge merge : mergeSpec.merges) {\n        for(SegmentInfo info : merge.segments) {\n          assert segmentsToOptimize.contains(info);\n        }\n      }\n    }\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesForOptimize(\n      SegmentInfos segmentInfos, int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize)\n    throws CorruptIndexException, IOException {\n\n    final SegmentInfos eligibleSegments = new SegmentInfos();\n    for(SegmentInfo info : segmentInfos) {\n      if (segmentsToOptimize.contains(info)) {\n        eligibleSegments.add(info);\n      }\n    }\n\n    //System.out.println(\"MRMP: findMergesForOptimize sis=\" + segmentInfos + \" eligible=\" + eligibleSegments);\n    MergeSpecification mergeSpec = null;\n    if (eligibleSegments.size() > 1 || (eligibleSegments.size() == 1 && eligibleSegments.get(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      // Already shuffled having come out of a set but\n      // shuffle again for good measure:\n      Collections.shuffle(eligibleSegments, random);\n      int upto = 0;\n      while(upto < eligibleSegments.size()) {\n        int max = Math.min(10, eligibleSegments.size()-upto);\n        int inc = max <= 2 ? max : _TestUtil.nextInt(random, 2, max);\n        mergeSpec.add(new OneMerge(eligibleSegments.range(upto, upto+inc)));\n        upto += inc;\n      }\n    }\n\n    if (mergeSpec != null) {\n      for(OneMerge merge : mergeSpec.merges) {\n        for(SegmentInfo info : merge.segments) {\n          assert segmentsToOptimize.contains(info);\n        }\n      }\n    }\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/MockRandomMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/MockRandomMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","sourceNew":"  @Override\n  public MergeSpecification findMergesForOptimize(\n      SegmentInfos segmentInfos, int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize)\n    throws CorruptIndexException, IOException {\n\n    final List<SegmentInfo> eligibleSegments = new ArrayList<SegmentInfo>();\n    for(SegmentInfo info : segmentInfos) {\n      if (segmentsToOptimize.contains(info)) {\n        eligibleSegments.add(info);\n      }\n    }\n\n    //System.out.println(\"MRMP: findMergesForOptimize sis=\" + segmentInfos + \" eligible=\" + eligibleSegments);\n    MergeSpecification mergeSpec = null;\n    if (eligibleSegments.size() > 1 || (eligibleSegments.size() == 1 && eligibleSegments.get(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      // Already shuffled having come out of a set but\n      // shuffle again for good measure:\n      Collections.shuffle(eligibleSegments, random);\n      int upto = 0;\n      while(upto < eligibleSegments.size()) {\n        int max = Math.min(10, eligibleSegments.size()-upto);\n        int inc = max <= 2 ? max : _TestUtil.nextInt(random, 2, max);\n        mergeSpec.add(new OneMerge(eligibleSegments.subList(upto, upto+inc)));\n        upto += inc;\n      }\n    }\n\n    if (mergeSpec != null) {\n      for(OneMerge merge : mergeSpec.merges) {\n        for(SegmentInfo info : merge.segments) {\n          assert segmentsToOptimize.contains(info);\n        }\n      }\n    }\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesForOptimize(\n      SegmentInfos segmentInfos, int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize)\n    throws CorruptIndexException, IOException {\n\n    //System.out.println(\"MRMP: findMergesForOptimize sis=\" + segmentInfos);\n    MergeSpecification mergeSpec = null;\n    if (segmentInfos.size() > 1 || (segmentInfos.size() == 1 && segmentInfos.info(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      SegmentInfos segmentInfos2 = new SegmentInfos();\n      segmentInfos2.addAll(segmentInfos);\n      Collections.shuffle(segmentInfos2, random);\n      int upto = 0;\n      while(upto < segmentInfos.size()) {\n        int max = Math.min(10, segmentInfos.size()-upto);\n        int inc = max <= 2 ? max : _TestUtil.nextInt(random, 2, max);\n        mergeSpec.add(new OneMerge(segmentInfos2.range(upto, upto+inc)));\n        upto += inc;\n      }\n    }\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/MockRandomMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/MockRandomMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","sourceNew":"  @Override\n  public MergeSpecification findMergesForOptimize(\n      SegmentInfos segmentInfos, int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize)\n    throws CorruptIndexException, IOException {\n\n    final List<SegmentInfo> eligibleSegments = new ArrayList<SegmentInfo>();\n    for(SegmentInfo info : segmentInfos) {\n      if (segmentsToOptimize.contains(info)) {\n        eligibleSegments.add(info);\n      }\n    }\n\n    //System.out.println(\"MRMP: findMergesForOptimize sis=\" + segmentInfos + \" eligible=\" + eligibleSegments);\n    MergeSpecification mergeSpec = null;\n    if (eligibleSegments.size() > 1 || (eligibleSegments.size() == 1 && eligibleSegments.get(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      // Already shuffled having come out of a set but\n      // shuffle again for good measure:\n      Collections.shuffle(eligibleSegments, random);\n      int upto = 0;\n      while(upto < eligibleSegments.size()) {\n        int max = Math.min(10, eligibleSegments.size()-upto);\n        int inc = max <= 2 ? max : _TestUtil.nextInt(random, 2, max);\n        mergeSpec.add(new OneMerge(eligibleSegments.subList(upto, upto+inc)));\n        upto += inc;\n      }\n    }\n\n    if (mergeSpec != null) {\n      for(OneMerge merge : mergeSpec.merges) {\n        for(SegmentInfo info : merge.segments) {\n          assert segmentsToOptimize.contains(info);\n        }\n      }\n    }\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesForOptimize(\n      SegmentInfos segmentInfos, int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize)\n    throws CorruptIndexException, IOException {\n\n    //System.out.println(\"MRMP: findMergesForOptimize sis=\" + segmentInfos);\n    MergeSpecification mergeSpec = null;\n    if (segmentInfos.size() > 1 || (segmentInfos.size() == 1 && segmentInfos.info(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      SegmentInfos segmentInfos2 = new SegmentInfos();\n      segmentInfos2.addAll(segmentInfos);\n      Collections.shuffle(segmentInfos2, random);\n      int upto = 0;\n      while(upto < segmentInfos.size()) {\n        int max = Math.min(10, segmentInfos.size()-upto);\n        int inc = max <= 2 ? max : _TestUtil.nextInt(random, 2, max);\n        mergeSpec.add(new OneMerge(segmentInfos2.range(upto, upto+inc)));\n        upto += inc;\n      }\n    }\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09b6beb7329eb1b75a38c94b1c5ab4e840743c59","date":1308413204,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/MockRandomMergePolicy#findMergesForOptimize(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/MockRandomMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","sourceNew":"  @Override\n  public MergeSpecification findMergesForOptimize(\n       SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfo,Boolean> segmentsToOptimize)\n    throws CorruptIndexException, IOException {\n\n    final List<SegmentInfo> eligibleSegments = new ArrayList<SegmentInfo>();\n    for(SegmentInfo info : segmentInfos) {\n      if (segmentsToOptimize.containsKey(info)) {\n        eligibleSegments.add(info);\n      }\n    }\n\n    //System.out.println(\"MRMP: findMergesForOptimize sis=\" + segmentInfos + \" eligible=\" + eligibleSegments);\n    MergeSpecification mergeSpec = null;\n    if (eligibleSegments.size() > 1 || (eligibleSegments.size() == 1 && eligibleSegments.get(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      // Already shuffled having come out of a set but\n      // shuffle again for good measure:\n      Collections.shuffle(eligibleSegments, random);\n      int upto = 0;\n      while(upto < eligibleSegments.size()) {\n        int max = Math.min(10, eligibleSegments.size()-upto);\n        int inc = max <= 2 ? max : _TestUtil.nextInt(random, 2, max);\n        mergeSpec.add(new OneMerge(eligibleSegments.subList(upto, upto+inc)));\n        upto += inc;\n      }\n    }\n\n    if (mergeSpec != null) {\n      for(OneMerge merge : mergeSpec.merges) {\n        for(SegmentInfo info : merge.segments) {\n          assert segmentsToOptimize.containsKey(info);\n        }\n      }\n    }\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesForOptimize(\n      SegmentInfos segmentInfos, int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize)\n    throws CorruptIndexException, IOException {\n\n    final List<SegmentInfo> eligibleSegments = new ArrayList<SegmentInfo>();\n    for(SegmentInfo info : segmentInfos) {\n      if (segmentsToOptimize.contains(info)) {\n        eligibleSegments.add(info);\n      }\n    }\n\n    //System.out.println(\"MRMP: findMergesForOptimize sis=\" + segmentInfos + \" eligible=\" + eligibleSegments);\n    MergeSpecification mergeSpec = null;\n    if (eligibleSegments.size() > 1 || (eligibleSegments.size() == 1 && eligibleSegments.get(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      // Already shuffled having come out of a set but\n      // shuffle again for good measure:\n      Collections.shuffle(eligibleSegments, random);\n      int upto = 0;\n      while(upto < eligibleSegments.size()) {\n        int max = Math.min(10, eligibleSegments.size()-upto);\n        int inc = max <= 2 ? max : _TestUtil.nextInt(random, 2, max);\n        mergeSpec.add(new OneMerge(eligibleSegments.subList(upto, upto+inc)));\n        upto += inc;\n      }\n    }\n\n    if (mergeSpec != null) {\n      for(OneMerge merge : mergeSpec.merges) {\n        for(SegmentInfo info : merge.segments) {\n          assert segmentsToOptimize.contains(info);\n        }\n      }\n    }\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","date":1308439813,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/MockRandomMergePolicy#findMergesForOptimize(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/MockRandomMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","sourceNew":"  @Override\n  public MergeSpecification findMergesForOptimize(\n       SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfo,Boolean> segmentsToOptimize)\n    throws CorruptIndexException, IOException {\n\n    final List<SegmentInfo> eligibleSegments = new ArrayList<SegmentInfo>();\n    for(SegmentInfo info : segmentInfos) {\n      if (segmentsToOptimize.containsKey(info)) {\n        eligibleSegments.add(info);\n      }\n    }\n\n    //System.out.println(\"MRMP: findMergesForOptimize sis=\" + segmentInfos + \" eligible=\" + eligibleSegments);\n    MergeSpecification mergeSpec = null;\n    if (eligibleSegments.size() > 1 || (eligibleSegments.size() == 1 && eligibleSegments.get(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      // Already shuffled having come out of a set but\n      // shuffle again for good measure:\n      Collections.shuffle(eligibleSegments, random);\n      int upto = 0;\n      while(upto < eligibleSegments.size()) {\n        int max = Math.min(10, eligibleSegments.size()-upto);\n        int inc = max <= 2 ? max : _TestUtil.nextInt(random, 2, max);\n        mergeSpec.add(new OneMerge(eligibleSegments.subList(upto, upto+inc)));\n        upto += inc;\n      }\n    }\n\n    if (mergeSpec != null) {\n      for(OneMerge merge : mergeSpec.merges) {\n        for(SegmentInfo info : merge.segments) {\n          assert segmentsToOptimize.containsKey(info);\n        }\n      }\n    }\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesForOptimize(\n      SegmentInfos segmentInfos, int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize)\n    throws CorruptIndexException, IOException {\n\n    final List<SegmentInfo> eligibleSegments = new ArrayList<SegmentInfo>();\n    for(SegmentInfo info : segmentInfos) {\n      if (segmentsToOptimize.contains(info)) {\n        eligibleSegments.add(info);\n      }\n    }\n\n    //System.out.println(\"MRMP: findMergesForOptimize sis=\" + segmentInfos + \" eligible=\" + eligibleSegments);\n    MergeSpecification mergeSpec = null;\n    if (eligibleSegments.size() > 1 || (eligibleSegments.size() == 1 && eligibleSegments.get(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      // Already shuffled having come out of a set but\n      // shuffle again for good measure:\n      Collections.shuffle(eligibleSegments, random);\n      int upto = 0;\n      while(upto < eligibleSegments.size()) {\n        int max = Math.min(10, eligibleSegments.size()-upto);\n        int inc = max <= 2 ? max : _TestUtil.nextInt(random, 2, max);\n        mergeSpec.add(new OneMerge(eligibleSegments.subList(upto, upto+inc)));\n        upto += inc;\n      }\n    }\n\n    if (mergeSpec != null) {\n      for(OneMerge merge : mergeSpec.merges) {\n        for(SegmentInfo info : merge.segments) {\n          assert segmentsToOptimize.contains(info);\n        }\n      }\n    }\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":["a3776dccca01c11e7046323cfad46a3b4a471233","09b6beb7329eb1b75a38c94b1c5ab4e840743c59"],"a3776dccca01c11e7046323cfad46a3b4a471233":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","5270fb4f55a1b77663dda53cb8090c083f0a23b3"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["29ef99d61cda9641b6250bf9567329a6e65f901d","5270fb4f55a1b77663dda53cb8090c083f0a23b3"],"8f9de0e14b6cea7b32a86ec19999587bfbb023f8":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"5270fb4f55a1b77663dda53cb8090c083f0a23b3":["8f9de0e14b6cea7b32a86ec19999587bfbb023f8"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09b6beb7329eb1b75a38c94b1c5ab4e840743c59"],"09b6beb7329eb1b75a38c94b1c5ab4e840743c59":["5270fb4f55a1b77663dda53cb8090c083f0a23b3"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"8f9de0e14b6cea7b32a86ec19999587bfbb023f8":["5270fb4f55a1b77663dda53cb8090c083f0a23b3"],"5270fb4f55a1b77663dda53cb8090c083f0a23b3":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","09b6beb7329eb1b75a38c94b1c5ab4e840743c59"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"09b6beb7329eb1b75a38c94b1c5ab4e840743c59":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","8f9de0e14b6cea7b32a86ec19999587bfbb023f8","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}