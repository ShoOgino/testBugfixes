{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter.OneDimensionBKDWriter#add(byte[],int).mjava","commits":[{"id":"9fc0d60683b47b5d922124c31f57c8b34734f9e6","date":1480846684,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter.OneDimensionBKDWriter#add(byte[],int).mjava","pathOld":"/dev/null","sourceNew":"    void add(byte[] packedValue, int docID) throws IOException {\n      assert valueInOrder(valueCount + leafCount,\n          0, lastPackedValue, packedValue, 0, docID, lastDocID);\n\n      System.arraycopy(packedValue, 0, leafValues, leafCount * packedBytesLength, packedBytesLength);\n      leafDocs[leafCount] = docID;\n      docsSeen.set(docID);\n      leafCount++;\n\n      if (valueCount > totalPointCount) {\n        throw new IllegalStateException(\"totalPointCount=\" + totalPointCount + \" was passed when we were created, but we just hit \" + pointCount + \" values\");\n      }\n\n      if (leafCount == maxPointsInLeafNode) {\n        // We write a block once we hit exactly the max count ... this is different from\n        // when we flush a new segment, where we write between max/2 and max per leaf block,\n        // so merged segments will behave differently from newly flushed segments:\n        writeLeafBlock();\n        leafCount = 0;\n      }\n\n      assert (lastDocID = docID) >= 0; // only assign when asserts are enabled\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter.OneDimensionBKDWriter#add(byte[],int).mjava","pathOld":"/dev/null","sourceNew":"    void add(byte[] packedValue, int docID) throws IOException {\n      assert valueInOrder(valueCount + leafCount,\n          0, lastPackedValue, packedValue, 0, docID, lastDocID);\n\n      System.arraycopy(packedValue, 0, leafValues, leafCount * packedBytesLength, packedBytesLength);\n      leafDocs[leafCount] = docID;\n      docsSeen.set(docID);\n      leafCount++;\n\n      if (valueCount > totalPointCount) {\n        throw new IllegalStateException(\"totalPointCount=\" + totalPointCount + \" was passed when we were created, but we just hit \" + pointCount + \" values\");\n      }\n\n      if (leafCount == maxPointsInLeafNode) {\n        // We write a block once we hit exactly the max count ... this is different from\n        // when we flush a new segment, where we write between max/2 and max per leaf block,\n        // so merged segments will behave differently from newly flushed segments:\n        writeLeafBlock();\n        leafCount = 0;\n      }\n\n      assert (lastDocID = docID) >= 0; // only assign when asserts are enabled\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter.OneDimensionBKDWriter#add(byte[],int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter.OneDimensionBKDWriter#add(byte[],int).mjava","sourceNew":"    void add(byte[] packedValue, int docID) throws IOException {\n      assert valueInOrder(valueCount + leafCount,\n          0, lastPackedValue, packedValue, 0, docID, lastDocID);\n\n      System.arraycopy(packedValue, 0, leafValues, leafCount * config.packedBytesLength, config.packedBytesLength);\n      leafDocs[leafCount] = docID;\n      docsSeen.set(docID);\n      leafCount++;\n\n      if (valueCount > totalPointCount) {\n        throw new IllegalStateException(\"totalPointCount=\" + totalPointCount + \" was passed when we were created, but we just hit \" + pointCount + \" values\");\n      }\n\n      if (leafCount == config.maxPointsInLeafNode) {\n        // We write a block once we hit exactly the max count ... this is different from\n        // when we flush a new segment, where we write between max/2 and max per leaf block,\n        // so merged segments will behave differently from newly flushed segments:\n        writeLeafBlock();\n        leafCount = 0;\n      }\n\n      assert (lastDocID = docID) >= 0; // only assign when asserts are enabled\n    }\n\n","sourceOld":"    void add(byte[] packedValue, int docID) throws IOException {\n      assert valueInOrder(valueCount + leafCount,\n          0, lastPackedValue, packedValue, 0, docID, lastDocID);\n\n      System.arraycopy(packedValue, 0, leafValues, leafCount * packedBytesLength, packedBytesLength);\n      leafDocs[leafCount] = docID;\n      docsSeen.set(docID);\n      leafCount++;\n\n      if (valueCount > totalPointCount) {\n        throw new IllegalStateException(\"totalPointCount=\" + totalPointCount + \" was passed when we were created, but we just hit \" + pointCount + \" values\");\n      }\n\n      if (leafCount == maxPointsInLeafNode) {\n        // We write a block once we hit exactly the max count ... this is different from\n        // when we flush a new segment, where we write between max/2 and max per leaf block,\n        // so merged segments will behave differently from newly flushed segments:\n        writeLeafBlock();\n        leafCount = 0;\n      }\n\n      assert (lastDocID = docID) >= 0; // only assign when asserts are enabled\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9","9856095f7afb5a607bf5e65077615ed91273508c"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","9856095f7afb5a607bf5e65077615ed91273508c"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}