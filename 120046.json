{"path":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadIndexFiles(boolean,Directory,Directory,String,String,long).mjava","commits":[{"id":"98fea9928eee12529633d73f52989154dd3dea1f","date":1521122475,"type":1,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadIndexFiles(boolean,Directory,Directory,String,String,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadIndexFiles(boolean,Directory,Directory,long).mjava","sourceNew":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex is it a fresh index copy\n   * @param indexDir                 the indexDir to be merged to\n   * @param tmpIndexDir              the directory to which files need to be downloaded to\n   * @param indexDirPath             the path of indexDir\n   * @param latestGeneration         the version number\n   *\n   * @return number of bytes downloaded\n   */\n  private long downloadIndexFiles(boolean downloadCompleteIndex, Directory indexDir, Directory tmpIndexDir,\n                                  String indexDirPath, String tmpIndexDirPath, long latestGeneration)\n      throws Exception {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Download files to dir: \" + Arrays.asList(indexDir.listAll()));\n    }\n    long bytesDownloaded = 0;\n    long bytesSkippedCopying = 0;\n    boolean doDifferentialCopy = (indexDir instanceof FSDirectory ||\n        (indexDir instanceof FilterDirectory && FilterDirectory.unwrap(indexDir) instanceof FSDirectory))\n        && (tmpIndexDir instanceof FSDirectory ||\n        (tmpIndexDir instanceof FilterDirectory && FilterDirectory.unwrap(tmpIndexDir) instanceof FSDirectory));\n\n    for (Map<String,Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      long size = (Long) file.get(SIZE);\n      CompareResult compareResult = compareFile(indexDir, filename, size, (Long) file.get(CHECKSUM));\n      boolean alwaysDownload = filesToAlwaysDownloadIfNoChecksums(filename, size, compareResult);\n      LOG.debug(\"Downloading file={} size={} checksum={} alwaysDownload={}\", filename, size, file.get(CHECKSUM), alwaysDownload);\n      if (!compareResult.equal || downloadCompleteIndex || alwaysDownload) {\n        if (downloadCompleteIndex && doDifferentialCopy && compareResult.equal && compareResult.checkSummed) {\n          File localFile = new File(indexDirPath, filename);\n          LOG.info(\"Don't need to download this file. Local file's path is: {}, checksum is: {}\",\n              localFile.getAbsolutePath(), file.get(CHECKSUM));\n          // A hard link here should survive the eventual directory move, and should be more space efficient as\n          // compared to a file copy. TODO: Maybe we could do a move safely here?\n          Files.createLink(new File(tmpIndexDirPath, filename).toPath(), localFile.toPath());\n          bytesSkippedCopying += localFile.length();\n        } else {\n          dirFileFetcher = new DirectoryFileFetcher(tmpIndexDir, file,\n              (String) file.get(NAME), FILE, latestGeneration);\n          currentFile = file;\n          dirFileFetcher.fetchFile();\n          bytesDownloaded += dirFileFetcher.getBytesDownloaded();\n        }\n        filesDownloaded.add(new HashMap<>(file));\n      } else {\n        LOG.info(\"Skipping download for {} because it already exists\", file.get(NAME));\n      }\n    }\n    LOG.info(\"Bytes downloaded: {}, Bytes skipped downloading: {}\", bytesDownloaded, bytesSkippedCopying);\n    return bytesDownloaded;\n  }\n\n","sourceOld":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex is it a fresh index copy\n   * @param tmpIndexDir              the directory to which files need to be downloadeed to\n   * @param indexDir                 the indexDir to be merged to\n   * @param latestGeneration         the version number\n   *\n   * @return number of bytes downloaded\n   */\n  private long downloadIndexFiles(boolean downloadCompleteIndex, Directory indexDir, Directory tmpIndexDir, long latestGeneration)\n      throws Exception {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Download files to dir: \" + Arrays.asList(indexDir.listAll()));\n    }\n    long bytesDownloaded = 0;\n    for (Map<String,Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      long size = (Long) file.get(SIZE);\n      CompareResult compareResult = compareFile(indexDir, filename, size, (Long) file.get(CHECKSUM));\n      boolean alwaysDownload = filesToAlwaysDownloadIfNoChecksums(filename, size, compareResult);\n      LOG.debug(\"Downloading file={} size={} checksum={} alwaysDownload={}\", filename, size, file.get(CHECKSUM), alwaysDownload);\n      if (!compareResult.equal || downloadCompleteIndex || alwaysDownload) {\n        dirFileFetcher = new DirectoryFileFetcher(tmpIndexDir, file,\n            (String) file.get(NAME), FILE, latestGeneration);\n        currentFile = file;\n        dirFileFetcher.fetchFile();\n        bytesDownloaded += dirFileFetcher.getBytesDownloaded();\n        filesDownloaded.add(new HashMap<>(file));\n      } else {\n        LOG.info(\"Skipping download for \" + file.get(NAME)\n            + \" because it already exists\");\n      }\n    }\n    return bytesDownloaded;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fbedb5b874734816233a1fd61607151e368c6c8","date":1523942316,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadIndexFiles(boolean,Directory,Directory,String,String,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadIndexFiles(boolean,Directory,Directory,String,String,long).mjava","sourceNew":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex is it a fresh index copy\n   * @param indexDir                 the indexDir to be merged to\n   * @param tmpIndexDir              the directory to which files need to be downloaded to\n   * @param indexDirPath             the path of indexDir\n   * @param latestGeneration         the version number\n   *\n   * @return number of bytes downloaded\n   */\n  private long downloadIndexFiles(boolean downloadCompleteIndex, Directory indexDir, Directory tmpIndexDir,\n                                  String indexDirPath, String tmpIndexDirPath, long latestGeneration)\n      throws Exception {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Download files to dir: \" + Arrays.asList(indexDir.listAll()));\n    }\n    long bytesDownloaded = 0;\n    long bytesSkippedCopying = 0;\n    boolean doDifferentialCopy = (indexDir instanceof FSDirectory ||\n        (indexDir instanceof FilterDirectory && FilterDirectory.unwrap(indexDir) instanceof FSDirectory))\n        && (tmpIndexDir instanceof FSDirectory ||\n        (tmpIndexDir instanceof FilterDirectory && FilterDirectory.unwrap(tmpIndexDir) instanceof FSDirectory));\n\n    for (Map<String,Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      long size = (Long) file.get(SIZE);\n      CompareResult compareResult = compareFile(indexDir, filename, size, (Long) file.get(CHECKSUM));\n      boolean alwaysDownload = filesToAlwaysDownloadIfNoChecksums(filename, size, compareResult);\n      LOG.debug(\"Downloading file={} size={} checksum={} alwaysDownload={}\", filename, size, file.get(CHECKSUM), alwaysDownload);\n      if (!compareResult.equal || downloadCompleteIndex || alwaysDownload) {\n        File localFile = new File(indexDirPath, filename);\n        if (downloadCompleteIndex && doDifferentialCopy && compareResult.equal && compareResult.checkSummed\n            && localFile.exists()) {\n          LOG.info(\"Don't need to download this file. Local file's path is: {}, checksum is: {}\",\n              localFile.getAbsolutePath(), file.get(CHECKSUM));\n          // A hard link here should survive the eventual directory move, and should be more space efficient as\n          // compared to a file copy. TODO: Maybe we could do a move safely here?\n          Files.createLink(new File(tmpIndexDirPath, filename).toPath(), localFile.toPath());\n          bytesSkippedCopying += localFile.length();\n        } else {\n          dirFileFetcher = new DirectoryFileFetcher(tmpIndexDir, file,\n              (String) file.get(NAME), FILE, latestGeneration);\n          currentFile = file;\n          dirFileFetcher.fetchFile();\n          bytesDownloaded += dirFileFetcher.getBytesDownloaded();\n        }\n        filesDownloaded.add(new HashMap<>(file));\n      } else {\n        LOG.info(\"Skipping download for {} because it already exists\", file.get(NAME));\n      }\n    }\n    LOG.info(\"Bytes downloaded: {}, Bytes skipped downloading: {}\", bytesDownloaded, bytesSkippedCopying);\n    return bytesDownloaded;\n  }\n\n","sourceOld":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex is it a fresh index copy\n   * @param indexDir                 the indexDir to be merged to\n   * @param tmpIndexDir              the directory to which files need to be downloaded to\n   * @param indexDirPath             the path of indexDir\n   * @param latestGeneration         the version number\n   *\n   * @return number of bytes downloaded\n   */\n  private long downloadIndexFiles(boolean downloadCompleteIndex, Directory indexDir, Directory tmpIndexDir,\n                                  String indexDirPath, String tmpIndexDirPath, long latestGeneration)\n      throws Exception {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Download files to dir: \" + Arrays.asList(indexDir.listAll()));\n    }\n    long bytesDownloaded = 0;\n    long bytesSkippedCopying = 0;\n    boolean doDifferentialCopy = (indexDir instanceof FSDirectory ||\n        (indexDir instanceof FilterDirectory && FilterDirectory.unwrap(indexDir) instanceof FSDirectory))\n        && (tmpIndexDir instanceof FSDirectory ||\n        (tmpIndexDir instanceof FilterDirectory && FilterDirectory.unwrap(tmpIndexDir) instanceof FSDirectory));\n\n    for (Map<String,Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      long size = (Long) file.get(SIZE);\n      CompareResult compareResult = compareFile(indexDir, filename, size, (Long) file.get(CHECKSUM));\n      boolean alwaysDownload = filesToAlwaysDownloadIfNoChecksums(filename, size, compareResult);\n      LOG.debug(\"Downloading file={} size={} checksum={} alwaysDownload={}\", filename, size, file.get(CHECKSUM), alwaysDownload);\n      if (!compareResult.equal || downloadCompleteIndex || alwaysDownload) {\n        if (downloadCompleteIndex && doDifferentialCopy && compareResult.equal && compareResult.checkSummed) {\n          File localFile = new File(indexDirPath, filename);\n          LOG.info(\"Don't need to download this file. Local file's path is: {}, checksum is: {}\",\n              localFile.getAbsolutePath(), file.get(CHECKSUM));\n          // A hard link here should survive the eventual directory move, and should be more space efficient as\n          // compared to a file copy. TODO: Maybe we could do a move safely here?\n          Files.createLink(new File(tmpIndexDirPath, filename).toPath(), localFile.toPath());\n          bytesSkippedCopying += localFile.length();\n        } else {\n          dirFileFetcher = new DirectoryFileFetcher(tmpIndexDir, file,\n              (String) file.get(NAME), FILE, latestGeneration);\n          currentFile = file;\n          dirFileFetcher.fetchFile();\n          bytesDownloaded += dirFileFetcher.getBytesDownloaded();\n        }\n        filesDownloaded.add(new HashMap<>(file));\n      } else {\n        LOG.info(\"Skipping download for {} because it already exists\", file.get(NAME));\n      }\n    }\n    LOG.info(\"Bytes downloaded: {}, Bytes skipped downloading: {}\", bytesDownloaded, bytesSkippedCopying);\n    return bytesDownloaded;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadIndexFiles(boolean,Directory,Directory,String,String,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadIndexFiles(boolean,Directory,Directory,String,String,long).mjava","sourceNew":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex is it a fresh index copy\n   * @param indexDir                 the indexDir to be merged to\n   * @param tmpIndexDir              the directory to which files need to be downloaded to\n   * @param indexDirPath             the path of indexDir\n   * @param latestGeneration         the version number\n   *\n   * @return number of bytes downloaded\n   */\n  private long downloadIndexFiles(boolean downloadCompleteIndex, Directory indexDir, Directory tmpIndexDir,\n                                  String indexDirPath, String tmpIndexDirPath, long latestGeneration)\n      throws Exception {\n    if (log.isDebugEnabled()) {\n      log.debug(\"Download files to dir: \" + Arrays.asList(indexDir.listAll()));\n    }\n    long bytesDownloaded = 0;\n    long bytesSkippedCopying = 0;\n    boolean doDifferentialCopy = (indexDir instanceof FSDirectory ||\n        (indexDir instanceof FilterDirectory && FilterDirectory.unwrap(indexDir) instanceof FSDirectory))\n        && (tmpIndexDir instanceof FSDirectory ||\n        (tmpIndexDir instanceof FilterDirectory && FilterDirectory.unwrap(tmpIndexDir) instanceof FSDirectory));\n\n    for (Map<String,Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      long size = (Long) file.get(SIZE);\n      CompareResult compareResult = compareFile(indexDir, filename, size, (Long) file.get(CHECKSUM));\n      boolean alwaysDownload = filesToAlwaysDownloadIfNoChecksums(filename, size, compareResult);\n      log.debug(\"Downloading file={} size={} checksum={} alwaysDownload={}\", filename, size, file.get(CHECKSUM), alwaysDownload);\n      if (!compareResult.equal || downloadCompleteIndex || alwaysDownload) {\n        File localFile = new File(indexDirPath, filename);\n        if (downloadCompleteIndex && doDifferentialCopy && compareResult.equal && compareResult.checkSummed\n            && localFile.exists()) {\n          log.info(\"Don't need to download this file. Local file's path is: {}, checksum is: {}\",\n              localFile.getAbsolutePath(), file.get(CHECKSUM));\n          // A hard link here should survive the eventual directory move, and should be more space efficient as\n          // compared to a file copy. TODO: Maybe we could do a move safely here?\n          Files.createLink(new File(tmpIndexDirPath, filename).toPath(), localFile.toPath());\n          bytesSkippedCopying += localFile.length();\n        } else {\n          dirFileFetcher = new DirectoryFileFetcher(tmpIndexDir, file,\n              (String) file.get(NAME), FILE, latestGeneration);\n          currentFile = file;\n          dirFileFetcher.fetchFile();\n          bytesDownloaded += dirFileFetcher.getBytesDownloaded();\n        }\n        filesDownloaded.add(new HashMap<>(file));\n      } else {\n        log.info(\"Skipping download for {} because it already exists\", file.get(NAME));\n      }\n    }\n    log.info(\"Bytes downloaded: {}, Bytes skipped downloading: {}\", bytesDownloaded, bytesSkippedCopying);\n    return bytesDownloaded;\n  }\n\n","sourceOld":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex is it a fresh index copy\n   * @param indexDir                 the indexDir to be merged to\n   * @param tmpIndexDir              the directory to which files need to be downloaded to\n   * @param indexDirPath             the path of indexDir\n   * @param latestGeneration         the version number\n   *\n   * @return number of bytes downloaded\n   */\n  private long downloadIndexFiles(boolean downloadCompleteIndex, Directory indexDir, Directory tmpIndexDir,\n                                  String indexDirPath, String tmpIndexDirPath, long latestGeneration)\n      throws Exception {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Download files to dir: \" + Arrays.asList(indexDir.listAll()));\n    }\n    long bytesDownloaded = 0;\n    long bytesSkippedCopying = 0;\n    boolean doDifferentialCopy = (indexDir instanceof FSDirectory ||\n        (indexDir instanceof FilterDirectory && FilterDirectory.unwrap(indexDir) instanceof FSDirectory))\n        && (tmpIndexDir instanceof FSDirectory ||\n        (tmpIndexDir instanceof FilterDirectory && FilterDirectory.unwrap(tmpIndexDir) instanceof FSDirectory));\n\n    for (Map<String,Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      long size = (Long) file.get(SIZE);\n      CompareResult compareResult = compareFile(indexDir, filename, size, (Long) file.get(CHECKSUM));\n      boolean alwaysDownload = filesToAlwaysDownloadIfNoChecksums(filename, size, compareResult);\n      LOG.debug(\"Downloading file={} size={} checksum={} alwaysDownload={}\", filename, size, file.get(CHECKSUM), alwaysDownload);\n      if (!compareResult.equal || downloadCompleteIndex || alwaysDownload) {\n        File localFile = new File(indexDirPath, filename);\n        if (downloadCompleteIndex && doDifferentialCopy && compareResult.equal && compareResult.checkSummed\n            && localFile.exists()) {\n          LOG.info(\"Don't need to download this file. Local file's path is: {}, checksum is: {}\",\n              localFile.getAbsolutePath(), file.get(CHECKSUM));\n          // A hard link here should survive the eventual directory move, and should be more space efficient as\n          // compared to a file copy. TODO: Maybe we could do a move safely here?\n          Files.createLink(new File(tmpIndexDirPath, filename).toPath(), localFile.toPath());\n          bytesSkippedCopying += localFile.length();\n        } else {\n          dirFileFetcher = new DirectoryFileFetcher(tmpIndexDir, file,\n              (String) file.get(NAME), FILE, latestGeneration);\n          currentFile = file;\n          dirFileFetcher.fetchFile();\n          bytesDownloaded += dirFileFetcher.getBytesDownloaded();\n        }\n        filesDownloaded.add(new HashMap<>(file));\n      } else {\n        LOG.info(\"Skipping download for {} because it already exists\", file.get(NAME));\n      }\n    }\n    LOG.info(\"Bytes downloaded: {}, Bytes skipped downloading: {}\", bytesDownloaded, bytesSkippedCopying);\n    return bytesDownloaded;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"425c2986e128f9e4aadd629cdf3b04e7aacb7c80","date":1536202585,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadIndexFiles(boolean,Directory,Directory,String,String,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadIndexFiles(boolean,Directory,Directory,String,String,long).mjava","sourceNew":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex is it a fresh index copy\n   * @param indexDir                 the indexDir to be merged to\n   * @param tmpIndexDir              the directory to which files need to be downloaded to\n   * @param indexDirPath             the path of indexDir\n   * @param latestGeneration         the version number\n   *\n   * @return number of bytes downloaded\n   */\n  private long downloadIndexFiles(boolean downloadCompleteIndex, Directory indexDir, Directory tmpIndexDir,\n                                  String indexDirPath, String tmpIndexDirPath, long latestGeneration)\n      throws Exception {\n    if (log.isDebugEnabled()) {\n      log.debug(\"Download files to dir: \" + Arrays.asList(indexDir.listAll()));\n    }\n    long bytesDownloaded = 0;\n    long bytesSkippedCopying = 0;\n    boolean doDifferentialCopy = (indexDir instanceof FSDirectory ||\n        (indexDir instanceof FilterDirectory && FilterDirectory.unwrap(indexDir) instanceof FSDirectory))\n        && (tmpIndexDir instanceof FSDirectory ||\n        (tmpIndexDir instanceof FilterDirectory && FilterDirectory.unwrap(tmpIndexDir) instanceof FSDirectory));\n\n    for (Map<String,Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      long size = (Long) file.get(SIZE);\n      CompareResult compareResult = compareFile(indexDir, filename, size, (Long) file.get(CHECKSUM));\n      boolean alwaysDownload = filesToAlwaysDownloadIfNoChecksums(filename, size, compareResult);\n      log.debug(\"Downloading file={} size={} checksum={} alwaysDownload={}\", filename, size, file.get(CHECKSUM), alwaysDownload);\n      if (!compareResult.equal || downloadCompleteIndex || alwaysDownload) {\n        File localFile = new File(indexDirPath, filename);\n        if (downloadCompleteIndex && doDifferentialCopy && compareResult.equal && compareResult.checkSummed\n            && localFile.exists()) {\n          log.info(\"Don't need to download this file. Local file's path is: {}, checksum is: {}\",\n              localFile.getAbsolutePath(), file.get(CHECKSUM));\n          // A hard link here should survive the eventual directory move, and should be more space efficient as\n          // compared to a file copy. TODO: Maybe we could do a move safely here?\n          Files.createLink(new File(tmpIndexDirPath, filename).toPath(), localFile.toPath());\n          bytesSkippedCopying += localFile.length();\n        } else {\n          dirFileFetcher = new DirectoryFileFetcher(tmpIndexDir, file,\n              (String) file.get(NAME), FILE, latestGeneration);\n          currentFile = file;\n          dirFileFetcher.fetchFile();\n          bytesDownloaded += dirFileFetcher.getBytesDownloaded();\n        }\n        filesDownloaded.add(new HashMap<>(file));\n      } else {\n        log.debug(\"Skipping download for {} because it already exists\", file.get(NAME));\n      }\n    }\n    log.info(\"Bytes downloaded: {}, Bytes skipped downloading: {}\", bytesDownloaded, bytesSkippedCopying);\n    return bytesDownloaded;\n  }\n\n","sourceOld":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex is it a fresh index copy\n   * @param indexDir                 the indexDir to be merged to\n   * @param tmpIndexDir              the directory to which files need to be downloaded to\n   * @param indexDirPath             the path of indexDir\n   * @param latestGeneration         the version number\n   *\n   * @return number of bytes downloaded\n   */\n  private long downloadIndexFiles(boolean downloadCompleteIndex, Directory indexDir, Directory tmpIndexDir,\n                                  String indexDirPath, String tmpIndexDirPath, long latestGeneration)\n      throws Exception {\n    if (log.isDebugEnabled()) {\n      log.debug(\"Download files to dir: \" + Arrays.asList(indexDir.listAll()));\n    }\n    long bytesDownloaded = 0;\n    long bytesSkippedCopying = 0;\n    boolean doDifferentialCopy = (indexDir instanceof FSDirectory ||\n        (indexDir instanceof FilterDirectory && FilterDirectory.unwrap(indexDir) instanceof FSDirectory))\n        && (tmpIndexDir instanceof FSDirectory ||\n        (tmpIndexDir instanceof FilterDirectory && FilterDirectory.unwrap(tmpIndexDir) instanceof FSDirectory));\n\n    for (Map<String,Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      long size = (Long) file.get(SIZE);\n      CompareResult compareResult = compareFile(indexDir, filename, size, (Long) file.get(CHECKSUM));\n      boolean alwaysDownload = filesToAlwaysDownloadIfNoChecksums(filename, size, compareResult);\n      log.debug(\"Downloading file={} size={} checksum={} alwaysDownload={}\", filename, size, file.get(CHECKSUM), alwaysDownload);\n      if (!compareResult.equal || downloadCompleteIndex || alwaysDownload) {\n        File localFile = new File(indexDirPath, filename);\n        if (downloadCompleteIndex && doDifferentialCopy && compareResult.equal && compareResult.checkSummed\n            && localFile.exists()) {\n          log.info(\"Don't need to download this file. Local file's path is: {}, checksum is: {}\",\n              localFile.getAbsolutePath(), file.get(CHECKSUM));\n          // A hard link here should survive the eventual directory move, and should be more space efficient as\n          // compared to a file copy. TODO: Maybe we could do a move safely here?\n          Files.createLink(new File(tmpIndexDirPath, filename).toPath(), localFile.toPath());\n          bytesSkippedCopying += localFile.length();\n        } else {\n          dirFileFetcher = new DirectoryFileFetcher(tmpIndexDir, file,\n              (String) file.get(NAME), FILE, latestGeneration);\n          currentFile = file;\n          dirFileFetcher.fetchFile();\n          bytesDownloaded += dirFileFetcher.getBytesDownloaded();\n        }\n        filesDownloaded.add(new HashMap<>(file));\n      } else {\n        log.info(\"Skipping download for {} because it already exists\", file.get(NAME));\n      }\n    }\n    log.info(\"Bytes downloaded: {}, Bytes skipped downloading: {}\", bytesDownloaded, bytesSkippedCopying);\n    return bytesDownloaded;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81d505b8f51b856e1b7e9dd377f5050c337b797a","date":1549455307,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadIndexFiles(boolean,Directory,Directory,String,String,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadIndexFiles(boolean,Directory,Directory,String,String,long).mjava","sourceNew":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex is it a fresh index copy\n   * @param indexDir                 the indexDir to be merged to\n   * @param tmpIndexDir              the directory to which files need to be downloaded to\n   * @param indexDirPath             the path of indexDir\n   * @param latestGeneration         the version number\n   *\n   * @return number of bytes downloaded\n   */\n  private long downloadIndexFiles(boolean downloadCompleteIndex, Directory indexDir, Directory tmpIndexDir,\n                                  String indexDirPath, String tmpIndexDirPath, long latestGeneration)\n      throws Exception {\n    if (log.isDebugEnabled()) {\n      log.debug(\"Download files to dir: \" + Arrays.asList(indexDir.listAll()));\n    }\n    long bytesDownloaded = 0;\n    long bytesSkippedCopying = 0;\n    boolean doDifferentialCopy = (indexDir instanceof FSDirectory ||\n        (indexDir instanceof FilterDirectory && FilterDirectory.unwrap(indexDir) instanceof FSDirectory))\n        && (tmpIndexDir instanceof FSDirectory ||\n        (tmpIndexDir instanceof FilterDirectory && FilterDirectory.unwrap(tmpIndexDir) instanceof FSDirectory));\n\n\n    long totalSpaceRequired = 0;\n    for (Map<String, Object> file : filesToDownload) {\n      long size = (Long) file.get(SIZE);\n      totalSpaceRequired += size;\n    }\n\n    log.info(\"tmpIndexDir_type  : \" + tmpIndexDir.getClass() + \" , \" + FilterDirectory.unwrap(tmpIndexDir));\n    long usableSpace = usableDiskSpaceProvider.apply(tmpIndexDirPath);\n    if (getApproxTotalSpaceReqd(totalSpaceRequired) > usableSpace) {\n      deleteFilesInAdvance(indexDir, indexDirPath, totalSpaceRequired, usableSpace);\n    }\n\n    for (Map<String,Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      long size = (Long) file.get(SIZE);\n      CompareResult compareResult = compareFile(indexDir, filename, size, (Long) file.get(CHECKSUM));\n      boolean alwaysDownload = filesToAlwaysDownloadIfNoChecksums(filename, size, compareResult);\n      log.debug(\"Downloading file={} size={} checksum={} alwaysDownload={}\", filename, size, file.get(CHECKSUM), alwaysDownload);\n      if (!compareResult.equal || downloadCompleteIndex || alwaysDownload) {\n        File localFile = new File(indexDirPath, filename);\n        if (downloadCompleteIndex && doDifferentialCopy && compareResult.equal && compareResult.checkSummed\n            && localFile.exists()) {\n          log.info(\"Don't need to download this file. Local file's path is: {}, checksum is: {}\",\n              localFile.getAbsolutePath(), file.get(CHECKSUM));\n          // A hard link here should survive the eventual directory move, and should be more space efficient as\n          // compared to a file copy. TODO: Maybe we could do a move safely here?\n          Files.createLink(new File(tmpIndexDirPath, filename).toPath(), localFile.toPath());\n          bytesSkippedCopying += localFile.length();\n        } else {\n          dirFileFetcher = new DirectoryFileFetcher(tmpIndexDir, file,\n              (String) file.get(NAME), FILE, latestGeneration);\n          currentFile = file;\n          dirFileFetcher.fetchFile();\n          bytesDownloaded += dirFileFetcher.getBytesDownloaded();\n        }\n        filesDownloaded.add(new HashMap<>(file));\n      } else {\n        log.debug(\"Skipping download for {} because it already exists\", file.get(NAME));\n      }\n    }\n    log.info(\"Bytes downloaded: {}, Bytes skipped downloading: {}\", bytesDownloaded, bytesSkippedCopying);\n    return bytesDownloaded;\n  }\n\n","sourceOld":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex is it a fresh index copy\n   * @param indexDir                 the indexDir to be merged to\n   * @param tmpIndexDir              the directory to which files need to be downloaded to\n   * @param indexDirPath             the path of indexDir\n   * @param latestGeneration         the version number\n   *\n   * @return number of bytes downloaded\n   */\n  private long downloadIndexFiles(boolean downloadCompleteIndex, Directory indexDir, Directory tmpIndexDir,\n                                  String indexDirPath, String tmpIndexDirPath, long latestGeneration)\n      throws Exception {\n    if (log.isDebugEnabled()) {\n      log.debug(\"Download files to dir: \" + Arrays.asList(indexDir.listAll()));\n    }\n    long bytesDownloaded = 0;\n    long bytesSkippedCopying = 0;\n    boolean doDifferentialCopy = (indexDir instanceof FSDirectory ||\n        (indexDir instanceof FilterDirectory && FilterDirectory.unwrap(indexDir) instanceof FSDirectory))\n        && (tmpIndexDir instanceof FSDirectory ||\n        (tmpIndexDir instanceof FilterDirectory && FilterDirectory.unwrap(tmpIndexDir) instanceof FSDirectory));\n\n    for (Map<String,Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      long size = (Long) file.get(SIZE);\n      CompareResult compareResult = compareFile(indexDir, filename, size, (Long) file.get(CHECKSUM));\n      boolean alwaysDownload = filesToAlwaysDownloadIfNoChecksums(filename, size, compareResult);\n      log.debug(\"Downloading file={} size={} checksum={} alwaysDownload={}\", filename, size, file.get(CHECKSUM), alwaysDownload);\n      if (!compareResult.equal || downloadCompleteIndex || alwaysDownload) {\n        File localFile = new File(indexDirPath, filename);\n        if (downloadCompleteIndex && doDifferentialCopy && compareResult.equal && compareResult.checkSummed\n            && localFile.exists()) {\n          log.info(\"Don't need to download this file. Local file's path is: {}, checksum is: {}\",\n              localFile.getAbsolutePath(), file.get(CHECKSUM));\n          // A hard link here should survive the eventual directory move, and should be more space efficient as\n          // compared to a file copy. TODO: Maybe we could do a move safely here?\n          Files.createLink(new File(tmpIndexDirPath, filename).toPath(), localFile.toPath());\n          bytesSkippedCopying += localFile.length();\n        } else {\n          dirFileFetcher = new DirectoryFileFetcher(tmpIndexDir, file,\n              (String) file.get(NAME), FILE, latestGeneration);\n          currentFile = file;\n          dirFileFetcher.fetchFile();\n          bytesDownloaded += dirFileFetcher.getBytesDownloaded();\n        }\n        filesDownloaded.add(new HashMap<>(file));\n      } else {\n        log.debug(\"Skipping download for {} because it already exists\", file.get(NAME));\n      }\n    }\n    log.info(\"Bytes downloaded: {}, Bytes skipped downloading: {}\", bytesDownloaded, bytesSkippedCopying);\n    return bytesDownloaded;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadIndexFiles(boolean,Directory,Directory,String,String,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadIndexFiles(boolean,Directory,Directory,String,String,long).mjava","sourceNew":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex is it a fresh index copy\n   * @param indexDir                 the indexDir to be merged to\n   * @param tmpIndexDir              the directory to which files need to be downloaded to\n   * @param indexDirPath             the path of indexDir\n   * @param latestGeneration         the version number\n   *\n   * @return number of bytes downloaded\n   */\n  private long downloadIndexFiles(boolean downloadCompleteIndex, Directory indexDir, Directory tmpIndexDir,\n                                  String indexDirPath, String tmpIndexDirPath, long latestGeneration)\n      throws Exception {\n    if (log.isDebugEnabled()) {\n      log.debug(\"Download files to dir: {}\", Arrays.asList(indexDir.listAll()));\n    }\n    long bytesDownloaded = 0;\n    long bytesSkippedCopying = 0;\n    boolean doDifferentialCopy = (indexDir instanceof FSDirectory ||\n        (indexDir instanceof FilterDirectory && FilterDirectory.unwrap(indexDir) instanceof FSDirectory))\n        && (tmpIndexDir instanceof FSDirectory ||\n        (tmpIndexDir instanceof FilterDirectory && FilterDirectory.unwrap(tmpIndexDir) instanceof FSDirectory));\n\n\n    long totalSpaceRequired = 0;\n    for (Map<String, Object> file : filesToDownload) {\n      long size = (Long) file.get(SIZE);\n      totalSpaceRequired += size;\n    }\n\n    if (log.isInfoEnabled()) {\n      log.info(\"tmpIndexDir_type  : {} , {}\", tmpIndexDir.getClass(), FilterDirectory.unwrap(tmpIndexDir));\n    }\n    long usableSpace = usableDiskSpaceProvider.apply(tmpIndexDirPath);\n    if (getApproxTotalSpaceReqd(totalSpaceRequired) > usableSpace) {\n      deleteFilesInAdvance(indexDir, indexDirPath, totalSpaceRequired, usableSpace);\n    }\n\n    for (Map<String,Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      long size = (Long) file.get(SIZE);\n      CompareResult compareResult = compareFile(indexDir, filename, size, (Long) file.get(CHECKSUM));\n      boolean alwaysDownload = filesToAlwaysDownloadIfNoChecksums(filename, size, compareResult);\n      if (log.isDebugEnabled()) {\n        log.debug(\"Downloading file={} size={} checksum={} alwaysDownload={}\", filename, size, file.get(CHECKSUM), alwaysDownload);\n      }\n      if (!compareResult.equal || downloadCompleteIndex || alwaysDownload) {\n        File localFile = new File(indexDirPath, filename);\n        if (downloadCompleteIndex && doDifferentialCopy && compareResult.equal && compareResult.checkSummed\n            && localFile.exists()) {\n          if (log.isInfoEnabled()) {\n            log.info(\"Don't need to download this file. Local file's path is: {}, checksum is: {}\",\n                localFile.getAbsolutePath(), file.get(CHECKSUM));\n          }\n          // A hard link here should survive the eventual directory move, and should be more space efficient as\n          // compared to a file copy. TODO: Maybe we could do a move safely here?\n          Files.createLink(new File(tmpIndexDirPath, filename).toPath(), localFile.toPath());\n          bytesSkippedCopying += localFile.length();\n        } else {\n          dirFileFetcher = new DirectoryFileFetcher(tmpIndexDir, file,\n              (String) file.get(NAME), FILE, latestGeneration);\n          currentFile = file;\n          dirFileFetcher.fetchFile();\n          bytesDownloaded += dirFileFetcher.getBytesDownloaded();\n        }\n        filesDownloaded.add(new HashMap<>(file));\n      } else {\n        if (log.isDebugEnabled()) {\n          log.debug(\"Skipping download for {} because it already exists\", file.get(NAME));\n        }\n      }\n    }\n    log.info(\"Bytes downloaded: {}, Bytes skipped downloading: {}\", bytesDownloaded, bytesSkippedCopying);\n    return bytesDownloaded;\n  }\n\n","sourceOld":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex is it a fresh index copy\n   * @param indexDir                 the indexDir to be merged to\n   * @param tmpIndexDir              the directory to which files need to be downloaded to\n   * @param indexDirPath             the path of indexDir\n   * @param latestGeneration         the version number\n   *\n   * @return number of bytes downloaded\n   */\n  private long downloadIndexFiles(boolean downloadCompleteIndex, Directory indexDir, Directory tmpIndexDir,\n                                  String indexDirPath, String tmpIndexDirPath, long latestGeneration)\n      throws Exception {\n    if (log.isDebugEnabled()) {\n      log.debug(\"Download files to dir: \" + Arrays.asList(indexDir.listAll()));\n    }\n    long bytesDownloaded = 0;\n    long bytesSkippedCopying = 0;\n    boolean doDifferentialCopy = (indexDir instanceof FSDirectory ||\n        (indexDir instanceof FilterDirectory && FilterDirectory.unwrap(indexDir) instanceof FSDirectory))\n        && (tmpIndexDir instanceof FSDirectory ||\n        (tmpIndexDir instanceof FilterDirectory && FilterDirectory.unwrap(tmpIndexDir) instanceof FSDirectory));\n\n\n    long totalSpaceRequired = 0;\n    for (Map<String, Object> file : filesToDownload) {\n      long size = (Long) file.get(SIZE);\n      totalSpaceRequired += size;\n    }\n\n    log.info(\"tmpIndexDir_type  : \" + tmpIndexDir.getClass() + \" , \" + FilterDirectory.unwrap(tmpIndexDir));\n    long usableSpace = usableDiskSpaceProvider.apply(tmpIndexDirPath);\n    if (getApproxTotalSpaceReqd(totalSpaceRequired) > usableSpace) {\n      deleteFilesInAdvance(indexDir, indexDirPath, totalSpaceRequired, usableSpace);\n    }\n\n    for (Map<String,Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      long size = (Long) file.get(SIZE);\n      CompareResult compareResult = compareFile(indexDir, filename, size, (Long) file.get(CHECKSUM));\n      boolean alwaysDownload = filesToAlwaysDownloadIfNoChecksums(filename, size, compareResult);\n      log.debug(\"Downloading file={} size={} checksum={} alwaysDownload={}\", filename, size, file.get(CHECKSUM), alwaysDownload);\n      if (!compareResult.equal || downloadCompleteIndex || alwaysDownload) {\n        File localFile = new File(indexDirPath, filename);\n        if (downloadCompleteIndex && doDifferentialCopy && compareResult.equal && compareResult.checkSummed\n            && localFile.exists()) {\n          log.info(\"Don't need to download this file. Local file's path is: {}, checksum is: {}\",\n              localFile.getAbsolutePath(), file.get(CHECKSUM));\n          // A hard link here should survive the eventual directory move, and should be more space efficient as\n          // compared to a file copy. TODO: Maybe we could do a move safely here?\n          Files.createLink(new File(tmpIndexDirPath, filename).toPath(), localFile.toPath());\n          bytesSkippedCopying += localFile.length();\n        } else {\n          dirFileFetcher = new DirectoryFileFetcher(tmpIndexDir, file,\n              (String) file.get(NAME), FILE, latestGeneration);\n          currentFile = file;\n          dirFileFetcher.fetchFile();\n          bytesDownloaded += dirFileFetcher.getBytesDownloaded();\n        }\n        filesDownloaded.add(new HashMap<>(file));\n      } else {\n        log.debug(\"Skipping download for {} because it already exists\", file.get(NAME));\n      }\n    }\n    log.info(\"Bytes downloaded: {}, Bytes skipped downloading: {}\", bytesDownloaded, bytesSkippedCopying);\n    return bytesDownloaded;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"425c2986e128f9e4aadd629cdf3b04e7aacb7c80":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"8fbedb5b874734816233a1fd61607151e368c6c8":["98fea9928eee12529633d73f52989154dd3dea1f"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["81d505b8f51b856e1b7e9dd377f5050c337b797a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"81d505b8f51b856e1b7e9dd377f5050c337b797a":["425c2986e128f9e4aadd629cdf3b04e7aacb7c80"],"98fea9928eee12529633d73f52989154dd3dea1f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["8fbedb5b874734816233a1fd61607151e368c6c8"]},"commit2Childs":{"425c2986e128f9e4aadd629cdf3b04e7aacb7c80":["81d505b8f51b856e1b7e9dd377f5050c337b797a"],"8fbedb5b874734816233a1fd61607151e368c6c8":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["98fea9928eee12529633d73f52989154dd3dea1f"],"81d505b8f51b856e1b7e9dd377f5050c337b797a":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"98fea9928eee12529633d73f52989154dd3dea1f":["8fbedb5b874734816233a1fd61607151e368c6c8"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["425c2986e128f9e4aadd629cdf3b04e7aacb7c80"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}