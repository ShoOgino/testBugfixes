{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#createAggregator(boolean,FacetArrays,IndexReader,TaxonomyReader).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#createAggregator(boolean,FacetArrays,IndexReader,TaxonomyReader).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#createAggregator(boolean,FacetArrays,IndexReader,TaxonomyReader).mjava","sourceNew":"  /**\n   * Create an aggregator for this facet request. Aggregator action depends on\n   * request definition. For a count request, it will usually increment the\n   * count for that facet.\n   * \n   * @param useComplements\n   *          whether the complements optimization is being used for current\n   *          computation.\n   * @param arrays\n   *          provider for facet arrays in use for current computation.\n   * @param indexReader\n   *          index reader in effect.\n   * @param taxonomy\n   *          reader of taxonomy in effect.\n   * @throws IOException\n   */\n  public abstract Aggregator createAggregator(boolean useComplements,\n      FacetArrays arrays, IndexReader indexReader,\n      TaxonomyReader taxonomy) throws IOException;\n\n","sourceOld":"  /**\n   * Create an aggregator for this facet request. Aggregator action depends on\n   * request definition. For a count request, it will usually increment the\n   * count for that facet.\n   * \n   * @param useComplements\n   *          whether the complements optimization is being used for current\n   *          computation.\n   * @param arrays\n   *          provider for facet arrays in use for current computation.\n   * @param indexReader\n   *          index reader in effect.\n   * @param taxonomy\n   *          reader of taxonomy in effect.\n   * @throws IOException\n   */\n  public abstract Aggregator createAggregator(boolean useComplements,\n      FacetArrays arrays, IndexReader indexReader,\n      TaxonomyReader taxonomy) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#createAggregator(boolean,FacetArrays,IndexReader,TaxonomyReader).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#createAggregator(boolean,FacetArrays,IndexReader,TaxonomyReader).mjava","sourceNew":"  /**\n   * Create an aggregator for this facet request. Aggregator action depends on\n   * request definition. For a count request, it will usually increment the\n   * count for that facet.\n   * \n   * @param useComplements\n   *          whether the complements optimization is being used for current\n   *          computation.\n   * @param arrays\n   *          provider for facet arrays in use for current computation.\n   * @param indexReader\n   *          index reader in effect.\n   * @param taxonomy\n   *          reader of taxonomy in effect.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract Aggregator createAggregator(boolean useComplements,\n      FacetArrays arrays, IndexReader indexReader,\n      TaxonomyReader taxonomy) throws IOException;\n\n","sourceOld":"  /**\n   * Create an aggregator for this facet request. Aggregator action depends on\n   * request definition. For a count request, it will usually increment the\n   * count for that facet.\n   * \n   * @param useComplements\n   *          whether the complements optimization is being used for current\n   *          computation.\n   * @param arrays\n   *          provider for facet arrays in use for current computation.\n   * @param indexReader\n   *          index reader in effect.\n   * @param taxonomy\n   *          reader of taxonomy in effect.\n   * @throws IOException\n   */\n  public abstract Aggregator createAggregator(boolean useComplements,\n      FacetArrays arrays, IndexReader indexReader,\n      TaxonomyReader taxonomy) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42f51b3ab4258ff4623227b0db011b8bb83db5c7","date":1358164991,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#createAggregator(boolean,FacetArrays,TaxonomyReader).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#createAggregator(boolean,FacetArrays,IndexReader,TaxonomyReader).mjava","sourceNew":"  /**\n   * Create an aggregator for this facet request. Aggregator action depends on\n   * request definition. For a count request, it will usually increment the\n   * count for that facet.\n   * \n   * @param useComplements\n   *          whether the complements optimization is being used for current\n   *          computation.\n   * @param arrays\n   *          provider for facet arrays in use for current computation.\n   * @param taxonomy\n   *          reader of taxonomy in effect.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract Aggregator createAggregator(boolean useComplements, FacetArrays arrays, TaxonomyReader taxonomy) \n      throws IOException;\n\n","sourceOld":"  /**\n   * Create an aggregator for this facet request. Aggregator action depends on\n   * request definition. For a count request, it will usually increment the\n   * count for that facet.\n   * \n   * @param useComplements\n   *          whether the complements optimization is being used for current\n   *          computation.\n   * @param arrays\n   *          provider for facet arrays in use for current computation.\n   * @param indexReader\n   *          index reader in effect.\n   * @param taxonomy\n   *          reader of taxonomy in effect.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract Aggregator createAggregator(boolean useComplements,\n      FacetArrays arrays, IndexReader indexReader,\n      TaxonomyReader taxonomy) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#createAggregator(boolean,FacetArrays,TaxonomyReader).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#createAggregator(boolean,FacetArrays,IndexReader,TaxonomyReader).mjava","sourceNew":"  /**\n   * Create an aggregator for this facet request. Aggregator action depends on\n   * request definition. For a count request, it will usually increment the\n   * count for that facet.\n   * \n   * @param useComplements\n   *          whether the complements optimization is being used for current\n   *          computation.\n   * @param arrays\n   *          provider for facet arrays in use for current computation.\n   * @param taxonomy\n   *          reader of taxonomy in effect.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract Aggregator createAggregator(boolean useComplements, FacetArrays arrays, TaxonomyReader taxonomy) \n      throws IOException;\n\n","sourceOld":"  /**\n   * Create an aggregator for this facet request. Aggregator action depends on\n   * request definition. For a count request, it will usually increment the\n   * count for that facet.\n   * \n   * @param useComplements\n   *          whether the complements optimization is being used for current\n   *          computation.\n   * @param arrays\n   *          provider for facet arrays in use for current computation.\n   * @param indexReader\n   *          index reader in effect.\n   * @param taxonomy\n   *          reader of taxonomy in effect.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract Aggregator createAggregator(boolean useComplements,\n      FacetArrays arrays, IndexReader indexReader,\n      TaxonomyReader taxonomy) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"42f51b3ab4258ff4623227b0db011b8bb83db5c7":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["42f51b3ab4258ff4623227b0db011b8bb83db5c7"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["42f51b3ab4258ff4623227b0db011b8bb83db5c7","8917bfede3b4ca30f4305c1e391e9218959cd723"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"42f51b3ab4258ff4623227b0db011b8bb83db5c7":["8917bfede3b4ca30f4305c1e391e9218959cd723","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8917bfede3b4ca30f4305c1e391e9218959cd723","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}