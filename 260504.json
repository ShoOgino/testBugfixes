{"path":"lucene/src/java/org/apache/lucene/index/values/Floats.FloatsWriter#initDataOut().mjava","commits":[{"id":"d99ebe8731bf50d5cb230be452816572bdfd7037","date":1309162035,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Floats.FloatsWriter#initDataOut().mjava","pathOld":"/dev/null","sourceNew":"    final void initDataOut() throws IOException {\n      assert datOut == null;\n      datOut = dir.createOutput(IndexFileNames.segmentFileName(id, \"\",\n          Writer.DATA_EXTENSION));\n      boolean success = false;\n      try {\n        CodecUtil.writeHeader(datOut, CODEC_NAME, VERSION_CURRENT);\n        assert datOut.getFilePointer() == CodecUtil.headerLength(CODEC_NAME);\n        datOut.writeByte(this.precision);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(true, datOut);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Floats.FloatsWriter#initDataOut().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#IntsWriter(Directory,String,AtomicLong).mjava","sourceNew":"    final void initDataOut() throws IOException {\n      assert datOut == null;\n      datOut = dir.createOutput(IndexFileNames.segmentFileName(id, \"\",\n          Writer.DATA_EXTENSION));\n      boolean success = false;\n      try {\n        CodecUtil.writeHeader(datOut, CODEC_NAME, VERSION_CURRENT);\n        assert datOut.getFilePointer() == CodecUtil.headerLength(CODEC_NAME);\n        datOut.writeByte(this.precision);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(true, datOut);\n        }\n      }\n    }\n\n","sourceOld":"    protected IntsWriter(Directory dir, String id, AtomicLong bytesUsed)\n        throws IOException {\n      super(bytesUsed);\n      datOut = dir.createOutput(IndexFileNames.segmentFileName(id, \"\",\n          DATA_EXTENSION));\n      boolean success = false;\n      try {\n        CodecUtil.writeHeader(datOut, CODEC_NAME, VERSION_CURRENT);\n        this.id = id;\n        docToValue = new long[1];\n        bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_LONG); // TODO the\n                                                               // bitset\n                                                               // needs memory\n                                                               // too\n        success = true;\n      } finally {\n        if (!success) {\n          datOut.close();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Floats.FloatsWriter#initDataOut().mjava","pathOld":"/dev/null","sourceNew":"    final void initDataOut() throws IOException {\n      assert datOut == null;\n      datOut = dir.createOutput(IndexFileNames.segmentFileName(id, \"\",\n          Writer.DATA_EXTENSION), context);\n      boolean success = false;\n      try {\n        CodecUtil.writeHeader(datOut, CODEC_NAME, VERSION_CURRENT);\n        assert datOut.getFilePointer() == CodecUtil.headerLength(CODEC_NAME);\n        datOut.writeByte(this.precision);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(true, datOut);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Floats.FloatsWriter#initDataOut().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Floats.FloatsWriter#initDataOut().mjava","sourceNew":"    final void initDataOut() throws IOException {\n      assert datOut == null;\n      datOut = dir.createOutput(IndexFileNames.segmentFileName(id, \"\",\n          Writer.DATA_EXTENSION), context);\n      boolean success = false;\n      try {\n        CodecUtil.writeHeader(datOut, CODEC_NAME, VERSION_CURRENT);\n        assert datOut.getFilePointer() == CodecUtil.headerLength(CODEC_NAME);\n        datOut.writeByte(this.precision);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(true, datOut);\n        }\n      }\n    }\n\n","sourceOld":"    final void initDataOut() throws IOException {\n      assert datOut == null;\n      datOut = dir.createOutput(IndexFileNames.segmentFileName(id, \"\",\n          Writer.DATA_EXTENSION));\n      boolean success = false;\n      try {\n        CodecUtil.writeHeader(datOut, CODEC_NAME, VERSION_CURRENT);\n        assert datOut.getFilePointer() == CodecUtil.headerLength(CODEC_NAME);\n        datOut.writeByte(this.precision);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(true, datOut);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Floats.FloatsWriter#initDataOut().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Floats.FloatsWriter#initDataOut().mjava","sourceNew":"    final void initDataOut() throws IOException {\n      assert datOut == null;\n      datOut = dir.createOutput(IndexFileNames.segmentFileName(id, \"\",\n          Writer.DATA_EXTENSION), context);\n      boolean success = false;\n      try {\n        CodecUtil.writeHeader(datOut, CODEC_NAME, VERSION_CURRENT);\n        assert datOut.getFilePointer() == CodecUtil.headerLength(CODEC_NAME);\n        datOut.writeByte(this.precision);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(true, datOut);\n        }\n      }\n    }\n\n","sourceOld":"    final void initDataOut() throws IOException {\n      assert datOut == null;\n      datOut = dir.createOutput(IndexFileNames.segmentFileName(id, \"\",\n          Writer.DATA_EXTENSION));\n      boolean success = false;\n      try {\n        CodecUtil.writeHeader(datOut, CODEC_NAME, VERSION_CURRENT);\n        assert datOut.getFilePointer() == CodecUtil.headerLength(CODEC_NAME);\n        datOut.writeByte(this.precision);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(true, datOut);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24230fe54121f9be9d85f2c2067536296785e421","date":1314462346,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Floats.FloatsWriter#initDataOut().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Floats.FloatsWriter#initDataOut().mjava","sourceNew":"    final void initDataOut() throws IOException {\n      assert datOut == null;\n      datOut = dir.createOutput(IndexFileNames.segmentFileName(id, \"\",\n          Writer.DATA_EXTENSION), context);\n      boolean success = false;\n      try {\n        CodecUtil.writeHeader(datOut, CODEC_NAME, VERSION_CURRENT);\n        assert datOut.getFilePointer() == CodecUtil.headerLength(CODEC_NAME);\n        datOut.writeByte(this.precision);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(datOut);\n        }\n      }\n    }\n\n","sourceOld":"    final void initDataOut() throws IOException {\n      assert datOut == null;\n      datOut = dir.createOutput(IndexFileNames.segmentFileName(id, \"\",\n          Writer.DATA_EXTENSION), context);\n      boolean success = false;\n      try {\n        CodecUtil.writeHeader(datOut, CODEC_NAME, VERSION_CURRENT);\n        assert datOut.getFilePointer() == CodecUtil.headerLength(CODEC_NAME);\n        datOut.writeByte(this.precision);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(true, datOut);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85eb75e0c0203e44dcf686f35876cf6080f3a671","date":1317221550,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/values/Floats.FloatsWriter#initDataOut().mjava","sourceNew":null,"sourceOld":"    final void initDataOut() throws IOException {\n      assert datOut == null;\n      datOut = dir.createOutput(IndexFileNames.segmentFileName(id, \"\",\n          Writer.DATA_EXTENSION), context);\n      boolean success = false;\n      try {\n        CodecUtil.writeHeader(datOut, CODEC_NAME, VERSION_CURRENT);\n        assert datOut.getFilePointer() == CodecUtil.headerLength(CODEC_NAME);\n        datOut.writeByte(this.precision);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(datOut);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24230fe54121f9be9d85f2c2067536296785e421":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"85eb75e0c0203e44dcf686f35876cf6080f3a671":["24230fe54121f9be9d85f2c2067536296785e421"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d99ebe8731bf50d5cb230be452816572bdfd7037":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["2553b00f699380c64959ccb27991289aae87be2e","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["d99ebe8731bf50d5cb230be452816572bdfd7037","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"2553b00f699380c64959ccb27991289aae87be2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d99ebe8731bf50d5cb230be452816572bdfd7037"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d99ebe8731bf50d5cb230be452816572bdfd7037"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85eb75e0c0203e44dcf686f35876cf6080f3a671"]},"commit2Childs":{"24230fe54121f9be9d85f2c2067536296785e421":["85eb75e0c0203e44dcf686f35876cf6080f3a671"],"85eb75e0c0203e44dcf686f35876cf6080f3a671":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d99ebe8731bf50d5cb230be452816572bdfd7037","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"d99ebe8731bf50d5cb230be452816572bdfd7037":["ddc4c914be86e34b54f70023f45a60fa7f04e929","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["24230fe54121f9be9d85f2c2067536296785e421","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"2553b00f699380c64959ccb27991289aae87be2e":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}