{"path":"solr/core/src/java/org/apache/solr/internal/csv/ExtendedBufferedReader#skipUntil(char).mjava","commits":[{"id":"80931fa1f3b04650bde7b20e61b02063a7093ced","date":1333130683,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/internal/csv/ExtendedBufferedReader#skipUntil(char).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Skips all chars in the input until (but excluding) the given char\n   * \n   * @param c\n   * @return\n   * @throws IllegalArgumentException\n   * @throws IOException\n   */\n  public long skipUntil(char c) throws IllegalArgumentException, IOException {\n    if (lookaheadChar == UNDEFINED) {\n      lookaheadChar = super.read();   \n    }\n    long counter = 0;\n    while (lookaheadChar != c && lookaheadChar != END_OF_STREAM) {\n      if (lookaheadChar == '\\n') {\n        lineCounter++;\n      } \n      lookaheadChar = super.read();\n      counter++;\n    }\n    return counter;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb9a3b0a64fd15a9661c12e0040dcaad2484261b","date":1344862624,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/internal/csv/ExtendedBufferedReader#skipUntil(char).mjava","pathOld":"solr/core/src/java/org/apache/solr/internal/csv/ExtendedBufferedReader#skipUntil(char).mjava","sourceNew":"  /**\n   * Skips all chars in the input until (but excluding) the given char\n   * \n   * @param c\n   * @return counter\n   * @throws IllegalArgumentException\n   * @throws IOException\n   */\n  public long skipUntil(char c) throws IllegalArgumentException, IOException {\n    if (lookaheadChar == UNDEFINED) {\n      lookaheadChar = super.read();   \n    }\n    long counter = 0;\n    while (lookaheadChar != c && lookaheadChar != END_OF_STREAM) {\n      if (lookaheadChar == '\\n') {\n        lineCounter++;\n      } \n      lookaheadChar = super.read();\n      counter++;\n    }\n    return counter;\n  }\n\n","sourceOld":"  /**\n   * Skips all chars in the input until (but excluding) the given char\n   * \n   * @param c\n   * @return\n   * @throws IllegalArgumentException\n   * @throws IOException\n   */\n  public long skipUntil(char c) throws IllegalArgumentException, IOException {\n    if (lookaheadChar == UNDEFINED) {\n      lookaheadChar = super.read();   \n    }\n    long counter = 0;\n    while (lookaheadChar != c && lookaheadChar != END_OF_STREAM) {\n      if (lookaheadChar == '\\n') {\n        lineCounter++;\n      } \n      lookaheadChar = super.read();\n      counter++;\n    }\n    return counter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/internal/csv/ExtendedBufferedReader#skipUntil(char).mjava","pathOld":"solr/core/src/java/org/apache/solr/internal/csv/ExtendedBufferedReader#skipUntil(char).mjava","sourceNew":"  /**\n   * Skips all chars in the input until (but excluding) the given char\n   * \n   * @param c\n   * @return counter\n   * @throws IllegalArgumentException\n   * @throws IOException\n   */\n  public long skipUntil(char c) throws IllegalArgumentException, IOException {\n    if (lookaheadChar == UNDEFINED) {\n      lookaheadChar = super.read();   \n    }\n    long counter = 0;\n    while (lookaheadChar != c && lookaheadChar != END_OF_STREAM) {\n      if (lookaheadChar == '\\n') {\n        lineCounter++;\n      } \n      lookaheadChar = super.read();\n      counter++;\n    }\n    return counter;\n  }\n\n","sourceOld":"  /**\n   * Skips all chars in the input until (but excluding) the given char\n   * \n   * @param c\n   * @return\n   * @throws IllegalArgumentException\n   * @throws IOException\n   */\n  public long skipUntil(char c) throws IllegalArgumentException, IOException {\n    if (lookaheadChar == UNDEFINED) {\n      lookaheadChar = super.read();   \n    }\n    long counter = 0;\n    while (lookaheadChar != c && lookaheadChar != END_OF_STREAM) {\n      if (lookaheadChar == '\\n') {\n        lineCounter++;\n      } \n      lookaheadChar = super.read();\n      counter++;\n    }\n    return counter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/internal/csv/ExtendedBufferedReader#skipUntil(char).mjava","pathOld":"solr/core/src/java/org/apache/solr/internal/csv/ExtendedBufferedReader#skipUntil(char).mjava","sourceNew":"  /**\n   * Skips all chars in the input until (but excluding) the given char\n   * \n   * @param c\n   * @return counter\n   * @throws IllegalArgumentException\n   * @throws IOException\n   */\n  public long skipUntil(char c) throws IllegalArgumentException, IOException {\n    if (lookaheadChar == UNDEFINED) {\n      lookaheadChar = super.read();   \n    }\n    long counter = 0;\n    while (lookaheadChar != c && lookaheadChar != END_OF_STREAM) {\n      if (lookaheadChar == '\\n') {\n        lineCounter++;\n      } \n      lookaheadChar = super.read();\n      counter++;\n    }\n    return counter;\n  }\n\n","sourceOld":"  /**\n   * Skips all chars in the input until (but excluding) the given char\n   * \n   * @param c\n   * @return\n   * @throws IllegalArgumentException\n   * @throws IOException\n   */\n  public long skipUntil(char c) throws IllegalArgumentException, IOException {\n    if (lookaheadChar == UNDEFINED) {\n      lookaheadChar = super.read();   \n    }\n    long counter = 0;\n    while (lookaheadChar != c && lookaheadChar != END_OF_STREAM) {\n      if (lookaheadChar == '\\n') {\n        lineCounter++;\n      } \n      lookaheadChar = super.read();\n      counter++;\n    }\n    return counter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/internal/csv/ExtendedBufferedReader#skipUntil(char).mjava","pathOld":"solr/core/src/java/org/apache/solr/internal/csv/ExtendedBufferedReader#skipUntil(char).mjava","sourceNew":"  /**\n   * Skips all chars in the input until (but excluding) the given char\n   * \n   * @return counter\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public long skipUntil(char c) throws IllegalArgumentException, IOException {\n    if (lookaheadChar == UNDEFINED) {\n      lookaheadChar = super.read();   \n    }\n    long counter = 0;\n    while (lookaheadChar != c && lookaheadChar != END_OF_STREAM) {\n      if (lookaheadChar == '\\n') {\n        lineCounter++;\n      } \n      lookaheadChar = super.read();\n      counter++;\n    }\n    return counter;\n  }\n\n","sourceOld":"  /**\n   * Skips all chars in the input until (but excluding) the given char\n   * \n   * @param c\n   * @return counter\n   * @throws IllegalArgumentException\n   * @throws IOException\n   */\n  public long skipUntil(char c) throws IllegalArgumentException, IOException {\n    if (lookaheadChar == UNDEFINED) {\n      lookaheadChar = super.read();   \n    }\n    long counter = 0;\n    while (lookaheadChar != c && lookaheadChar != END_OF_STREAM) {\n      if (lookaheadChar == '\\n') {\n        lineCounter++;\n      } \n      lookaheadChar = super.read();\n      counter++;\n    }\n    return counter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["cb9a3b0a64fd15a9661c12e0040dcaad2484261b"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["80931fa1f3b04650bde7b20e61b02063a7093ced","cb9a3b0a64fd15a9661c12e0040dcaad2484261b"],"cb9a3b0a64fd15a9661c12e0040dcaad2484261b":["80931fa1f3b04650bde7b20e61b02063a7093ced"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80931fa1f3b04650bde7b20e61b02063a7093ced":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["80931fa1f3b04650bde7b20e61b02063a7093ced","cb9a3b0a64fd15a9661c12e0040dcaad2484261b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"cb9a3b0a64fd15a9661c12e0040dcaad2484261b":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","b05c56a41b733e02a189c48895922b5bd8c7f3d1","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["80931fa1f3b04650bde7b20e61b02063a7093ced"],"80931fa1f3b04650bde7b20e61b02063a7093ced":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","cb9a3b0a64fd15a9661c12e0040dcaad2484261b","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}