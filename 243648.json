{"path":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected boolean handleMergeAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    SolrParams params = req.getParams();\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.getCore(cname);\n    SolrQueryRequest wrappedReq = null;\n\n    SolrCore[] sourceCores = null;\n    RefCounted<SolrIndexSearcher>[] searchers = null;\n    // stores readers created from indexDir param values\n    IndexReader[] readersToBeClosed = null;\n    if (core != null) {\n      try {\n        String[] dirNames = params.getParams(CoreAdminParams.INDEX_DIR);\n        if (dirNames == null || dirNames.length == 0) {\n          String[] sources = params.getParams(\"srcCore\");\n          if (sources == null || sources.length == 0)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                \"At least one indexDir or srcCore must be specified\");\n\n          sourceCores = new SolrCore[sources.length];\n          for (int i = 0; i < sources.length; i++) {\n            String source = sources[i];\n            SolrCore srcCore = coreContainer.getCore(source);\n            if (srcCore == null)\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Core: \" + source + \" does not exist\");\n            sourceCores[i] = srcCore;\n          }\n        } else  {\n          readersToBeClosed = new IndexReader[dirNames.length];\n          DirectoryFactory dirFactory = core.getDirectoryFactory();\n          for (int i = 0; i < dirNames.length; i++) {\n            readersToBeClosed[i] = IndexReader.open(dirFactory.open(dirNames[i]), true);\n          }\n        }\n\n        IndexReader[] readers = null;\n        if (readersToBeClosed != null)  {\n          readers = readersToBeClosed;\n        } else {\n          readers = new IndexReader[sourceCores.length];\n          searchers = new RefCounted[sourceCores.length];\n          for (int i = 0; i < sourceCores.length; i++) {\n            SolrCore solrCore = sourceCores[i];\n            // record the searchers so that we can decref\n            searchers[i] = solrCore.getSearcher();\n            readers[i] = searchers[i].get().getIndexReader();\n          }\n        }\n\n        UpdateRequestProcessorChain processorChain =\n                core.getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        wrappedReq = new LocalSolrQueryRequest(core, req.getParams());\n        UpdateRequestProcessor processor =\n                processorChain.createProcessor(wrappedReq, rsp);\n        processor.processMergeIndexes(new MergeIndexesCommand(readers, req));\n      } finally {\n        if (searchers != null) {\n          for (RefCounted<SolrIndexSearcher> searcher : searchers) {\n            if (searcher != null) searcher.decref();\n          }\n        }\n        if (sourceCores != null) {\n          for (SolrCore solrCore : sourceCores) {\n            if (solrCore != null) solrCore.close();\n          }\n        }\n        if (readersToBeClosed != null) IOUtils.closeSafely(true, readersToBeClosed);\n        if (wrappedReq != null) wrappedReq.close();\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n  }\n\n","sourceOld":"  protected boolean handleMergeAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    SolrParams params = req.getParams();\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.getCore(cname);\n    SolrQueryRequest wrappedReq = null;\n\n    SolrCore[] sourceCores = null;\n    RefCounted<SolrIndexSearcher>[] searchers = null;\n    // stores readers created from indexDir param values\n    IndexReader[] readersToBeClosed = null;\n    if (core != null) {\n      try {\n        String[] dirNames = params.getParams(CoreAdminParams.INDEX_DIR);\n        if (dirNames == null || dirNames.length == 0) {\n          String[] sources = params.getParams(\"srcCore\");\n          if (sources == null || sources.length == 0)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                \"At least one indexDir or srcCore must be specified\");\n\n          sourceCores = new SolrCore[sources.length];\n          for (int i = 0; i < sources.length; i++) {\n            String source = sources[i];\n            SolrCore srcCore = coreContainer.getCore(source);\n            if (srcCore == null)\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Core: \" + source + \" does not exist\");\n            sourceCores[i] = srcCore;\n          }\n        } else  {\n          readersToBeClosed = new IndexReader[dirNames.length];\n          DirectoryFactory dirFactory = core.getDirectoryFactory();\n          for (int i = 0; i < dirNames.length; i++) {\n            readersToBeClosed[i] = IndexReader.open(dirFactory.open(dirNames[i]), true);\n          }\n        }\n\n        IndexReader[] readers = null;\n        if (readersToBeClosed != null)  {\n          readers = readersToBeClosed;\n        } else {\n          readers = new IndexReader[sourceCores.length];\n          searchers = new RefCounted[sourceCores.length];\n          for (int i = 0; i < sourceCores.length; i++) {\n            SolrCore solrCore = sourceCores[i];\n            // record the searchers so that we can decref\n            searchers[i] = solrCore.getSearcher();\n            readers[i] = searchers[i].get().getIndexReader();\n          }\n        }\n\n        UpdateRequestProcessorChain processorChain =\n                core.getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        wrappedReq = new LocalSolrQueryRequest(core, req.getParams());\n        UpdateRequestProcessor processor =\n                processorChain.createProcessor(wrappedReq, rsp);\n        processor.processMergeIndexes(new MergeIndexesCommand(readers, req));\n      } finally {\n        if (searchers != null) {\n          for (RefCounted<SolrIndexSearcher> searcher : searchers) {\n            if (searcher != null) searcher.decref();\n          }\n        }\n        if (sourceCores != null) {\n          for (SolrCore solrCore : sourceCores) {\n            if (solrCore != null) solrCore.close();\n          }\n        }\n        if (readersToBeClosed != null) IOUtils.closeSafely(true, readersToBeClosed);\n        if (wrappedReq != null) wrappedReq.close();\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected boolean handleMergeAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    SolrParams params = req.getParams();\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.getCore(cname);\n    SolrQueryRequest wrappedReq = null;\n\n    SolrCore[] sourceCores = null;\n    RefCounted<SolrIndexSearcher>[] searchers = null;\n    // stores readers created from indexDir param values\n    IndexReader[] readersToBeClosed = null;\n    if (core != null) {\n      try {\n        String[] dirNames = params.getParams(CoreAdminParams.INDEX_DIR);\n        if (dirNames == null || dirNames.length == 0) {\n          String[] sources = params.getParams(\"srcCore\");\n          if (sources == null || sources.length == 0)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                \"At least one indexDir or srcCore must be specified\");\n\n          sourceCores = new SolrCore[sources.length];\n          for (int i = 0; i < sources.length; i++) {\n            String source = sources[i];\n            SolrCore srcCore = coreContainer.getCore(source);\n            if (srcCore == null)\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Core: \" + source + \" does not exist\");\n            sourceCores[i] = srcCore;\n          }\n        } else  {\n          readersToBeClosed = new IndexReader[dirNames.length];\n          DirectoryFactory dirFactory = core.getDirectoryFactory();\n          for (int i = 0; i < dirNames.length; i++) {\n            readersToBeClosed[i] = IndexReader.open(dirFactory.open(dirNames[i]), true);\n          }\n        }\n\n        IndexReader[] readers = null;\n        if (readersToBeClosed != null)  {\n          readers = readersToBeClosed;\n        } else {\n          readers = new IndexReader[sourceCores.length];\n          searchers = new RefCounted[sourceCores.length];\n          for (int i = 0; i < sourceCores.length; i++) {\n            SolrCore solrCore = sourceCores[i];\n            // record the searchers so that we can decref\n            searchers[i] = solrCore.getSearcher();\n            readers[i] = searchers[i].get().getIndexReader();\n          }\n        }\n\n        UpdateRequestProcessorChain processorChain =\n                core.getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        wrappedReq = new LocalSolrQueryRequest(core, req.getParams());\n        UpdateRequestProcessor processor =\n                processorChain.createProcessor(wrappedReq, rsp);\n        processor.processMergeIndexes(new MergeIndexesCommand(readers, req));\n      } finally {\n        if (searchers != null) {\n          for (RefCounted<SolrIndexSearcher> searcher : searchers) {\n            if (searcher != null) searcher.decref();\n          }\n        }\n        if (sourceCores != null) {\n          for (SolrCore solrCore : sourceCores) {\n            if (solrCore != null) solrCore.close();\n          }\n        }\n        if (readersToBeClosed != null) IOUtils.closeSafely(true, readersToBeClosed);\n        if (wrappedReq != null) wrappedReq.close();\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n  }\n\n","sourceOld":"  protected boolean handleMergeAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    SolrParams params = req.getParams();\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.getCore(cname);\n    SolrQueryRequest wrappedReq = null;\n\n    SolrCore[] sourceCores = null;\n    RefCounted<SolrIndexSearcher>[] searchers = null;\n    // stores readers created from indexDir param values\n    IndexReader[] readersToBeClosed = null;\n    if (core != null) {\n      try {\n        String[] dirNames = params.getParams(CoreAdminParams.INDEX_DIR);\n        if (dirNames == null || dirNames.length == 0) {\n          String[] sources = params.getParams(\"srcCore\");\n          if (sources == null || sources.length == 0)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                \"At least one indexDir or srcCore must be specified\");\n\n          sourceCores = new SolrCore[sources.length];\n          for (int i = 0; i < sources.length; i++) {\n            String source = sources[i];\n            SolrCore srcCore = coreContainer.getCore(source);\n            if (srcCore == null)\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Core: \" + source + \" does not exist\");\n            sourceCores[i] = srcCore;\n          }\n        } else  {\n          readersToBeClosed = new IndexReader[dirNames.length];\n          DirectoryFactory dirFactory = core.getDirectoryFactory();\n          for (int i = 0; i < dirNames.length; i++) {\n            readersToBeClosed[i] = IndexReader.open(dirFactory.open(dirNames[i]), true);\n          }\n        }\n\n        IndexReader[] readers = null;\n        if (readersToBeClosed != null)  {\n          readers = readersToBeClosed;\n        } else {\n          readers = new IndexReader[sourceCores.length];\n          searchers = new RefCounted[sourceCores.length];\n          for (int i = 0; i < sourceCores.length; i++) {\n            SolrCore solrCore = sourceCores[i];\n            // record the searchers so that we can decref\n            searchers[i] = solrCore.getSearcher();\n            readers[i] = searchers[i].get().getIndexReader();\n          }\n        }\n\n        UpdateRequestProcessorChain processorChain =\n                core.getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        wrappedReq = new LocalSolrQueryRequest(core, req.getParams());\n        UpdateRequestProcessor processor =\n                processorChain.createProcessor(wrappedReq, rsp);\n        processor.processMergeIndexes(new MergeIndexesCommand(readers, req));\n      } finally {\n        if (searchers != null) {\n          for (RefCounted<SolrIndexSearcher> searcher : searchers) {\n            if (searcher != null) searcher.decref();\n          }\n        }\n        if (sourceCores != null) {\n          for (SolrCore solrCore : sourceCores) {\n            if (solrCore != null) solrCore.close();\n          }\n        }\n        if (readersToBeClosed != null) IOUtils.closeSafely(true, readersToBeClosed);\n        if (wrappedReq != null) wrappedReq.close();\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected boolean handleMergeAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    SolrParams params = req.getParams();\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.getCore(cname);\n    SolrQueryRequest wrappedReq = null;\n\n    SolrCore[] sourceCores = null;\n    RefCounted<SolrIndexSearcher>[] searchers = null;\n    // stores readers created from indexDir param values\n    IndexReader[] readersToBeClosed = null;\n    if (core != null) {\n      try {\n        String[] dirNames = params.getParams(CoreAdminParams.INDEX_DIR);\n        if (dirNames == null || dirNames.length == 0) {\n          String[] sources = params.getParams(\"srcCore\");\n          if (sources == null || sources.length == 0)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                \"At least one indexDir or srcCore must be specified\");\n\n          sourceCores = new SolrCore[sources.length];\n          for (int i = 0; i < sources.length; i++) {\n            String source = sources[i];\n            SolrCore srcCore = coreContainer.getCore(source);\n            if (srcCore == null)\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Core: \" + source + \" does not exist\");\n            sourceCores[i] = srcCore;\n          }\n        } else  {\n          readersToBeClosed = new IndexReader[dirNames.length];\n          DirectoryFactory dirFactory = core.getDirectoryFactory();\n          for (int i = 0; i < dirNames.length; i++) {\n            readersToBeClosed[i] = IndexReader.open(dirFactory.open(dirNames[i]), true);\n          }\n        }\n\n        IndexReader[] readers = null;\n        if (readersToBeClosed != null)  {\n          readers = readersToBeClosed;\n        } else {\n          readers = new IndexReader[sourceCores.length];\n          searchers = new RefCounted[sourceCores.length];\n          for (int i = 0; i < sourceCores.length; i++) {\n            SolrCore solrCore = sourceCores[i];\n            // record the searchers so that we can decref\n            searchers[i] = solrCore.getSearcher();\n            readers[i] = searchers[i].get().getIndexReader();\n          }\n        }\n\n        UpdateRequestProcessorChain processorChain =\n                core.getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        wrappedReq = new LocalSolrQueryRequest(core, req.getParams());\n        UpdateRequestProcessor processor =\n                processorChain.createProcessor(wrappedReq, rsp);\n        processor.processMergeIndexes(new MergeIndexesCommand(readers, req));\n      } finally {\n        if (searchers != null) {\n          for (RefCounted<SolrIndexSearcher> searcher : searchers) {\n            if (searcher != null) searcher.decref();\n          }\n        }\n        if (sourceCores != null) {\n          for (SolrCore solrCore : sourceCores) {\n            if (solrCore != null) solrCore.close();\n          }\n        }\n        if (readersToBeClosed != null) IOUtils.closeSafely(true, readersToBeClosed);\n        if (wrappedReq != null) wrappedReq.close();\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n  }\n\n","sourceOld":"  protected boolean handleMergeAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    SolrParams params = req.getParams();\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.getCore(cname);\n    SolrQueryRequest wrappedReq = null;\n\n    SolrCore[] sourceCores = null;\n    RefCounted<SolrIndexSearcher>[] searchers = null;\n    // stores readers created from indexDir param values\n    IndexReader[] readersToBeClosed = null;\n    if (core != null) {\n      try {\n        String[] dirNames = params.getParams(CoreAdminParams.INDEX_DIR);\n        if (dirNames == null || dirNames.length == 0) {\n          String[] sources = params.getParams(\"srcCore\");\n          if (sources == null || sources.length == 0)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                \"At least one indexDir or srcCore must be specified\");\n\n          sourceCores = new SolrCore[sources.length];\n          for (int i = 0; i < sources.length; i++) {\n            String source = sources[i];\n            SolrCore srcCore = coreContainer.getCore(source);\n            if (srcCore == null)\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Core: \" + source + \" does not exist\");\n            sourceCores[i] = srcCore;\n          }\n        } else  {\n          readersToBeClosed = new IndexReader[dirNames.length];\n          DirectoryFactory dirFactory = core.getDirectoryFactory();\n          for (int i = 0; i < dirNames.length; i++) {\n            readersToBeClosed[i] = IndexReader.open(dirFactory.open(dirNames[i]), true);\n          }\n        }\n\n        IndexReader[] readers = null;\n        if (readersToBeClosed != null)  {\n          readers = readersToBeClosed;\n        } else {\n          readers = new IndexReader[sourceCores.length];\n          searchers = new RefCounted[sourceCores.length];\n          for (int i = 0; i < sourceCores.length; i++) {\n            SolrCore solrCore = sourceCores[i];\n            // record the searchers so that we can decref\n            searchers[i] = solrCore.getSearcher();\n            readers[i] = searchers[i].get().getIndexReader();\n          }\n        }\n\n        UpdateRequestProcessorChain processorChain =\n                core.getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        wrappedReq = new LocalSolrQueryRequest(core, req.getParams());\n        UpdateRequestProcessor processor =\n                processorChain.createProcessor(wrappedReq, rsp);\n        processor.processMergeIndexes(new MergeIndexesCommand(readers, req));\n      } finally {\n        if (searchers != null) {\n          for (RefCounted<SolrIndexSearcher> searcher : searchers) {\n            if (searcher != null) searcher.decref();\n          }\n        }\n        if (sourceCores != null) {\n          for (SolrCore solrCore : sourceCores) {\n            if (solrCore != null) solrCore.close();\n          }\n        }\n        if (readersToBeClosed != null) IOUtils.closeSafely(true, readersToBeClosed);\n        if (wrappedReq != null) wrappedReq.close();\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e22ffe8cc51a892ae103df018822d7873e901c2a","date":1313696790,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected boolean handleMergeAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    SolrParams params = req.getParams();\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.getCore(cname);\n    SolrQueryRequest wrappedReq = null;\n\n    SolrCore[] sourceCores = null;\n    RefCounted<SolrIndexSearcher>[] searchers = null;\n    // stores readers created from indexDir param values\n    IndexReader[] readersToBeClosed = null;\n    Directory[] dirsToBeReleased = null;\n    if (core != null) {\n      try {\n        String[] dirNames = params.getParams(CoreAdminParams.INDEX_DIR);\n        if (dirNames == null || dirNames.length == 0) {\n          String[] sources = params.getParams(\"srcCore\");\n          if (sources == null || sources.length == 0)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                \"At least one indexDir or srcCore must be specified\");\n\n          sourceCores = new SolrCore[sources.length];\n          for (int i = 0; i < sources.length; i++) {\n            String source = sources[i];\n            SolrCore srcCore = coreContainer.getCore(source);\n            if (srcCore == null)\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Core: \" + source + \" does not exist\");\n            sourceCores[i] = srcCore;\n          }\n        } else  {\n          readersToBeClosed = new IndexReader[dirNames.length];\n          dirsToBeReleased = new Directory[dirNames.length];\n          DirectoryFactory dirFactory = core.getDirectoryFactory();\n          for (int i = 0; i < dirNames.length; i++) {\n            Directory dir = dirFactory.get(dirNames[i], core.getSolrConfig().mainIndexConfig.lockType);\n            dirsToBeReleased[i] = dir;\n            readersToBeClosed[i] = IndexReader.open(dir, true);\n          }\n        }\n\n        IndexReader[] readers = null;\n        if (readersToBeClosed != null)  {\n          readers = readersToBeClosed;\n        } else {\n          readers = new IndexReader[sourceCores.length];\n          searchers = new RefCounted[sourceCores.length];\n          for (int i = 0; i < sourceCores.length; i++) {\n            SolrCore solrCore = sourceCores[i];\n            // record the searchers so that we can decref\n            searchers[i] = solrCore.getSearcher();\n            readers[i] = searchers[i].get().getIndexReader();\n          }\n        }\n\n        UpdateRequestProcessorChain processorChain =\n                core.getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        wrappedReq = new LocalSolrQueryRequest(core, req.getParams());\n        UpdateRequestProcessor processor =\n                processorChain.createProcessor(wrappedReq, rsp);\n        processor.processMergeIndexes(new MergeIndexesCommand(readers, req));\n      } finally {\n        if (searchers != null) {\n          for (RefCounted<SolrIndexSearcher> searcher : searchers) {\n            if (searcher != null) searcher.decref();\n          }\n        }\n        if (sourceCores != null) {\n          for (SolrCore solrCore : sourceCores) {\n            if (solrCore != null) solrCore.close();\n          }\n        }\n        if (readersToBeClosed != null) IOUtils.closeSafely(true, readersToBeClosed);\n        if (dirsToBeReleased != null) {\n          for (Directory dir : dirsToBeReleased) {\n            DirectoryFactory dirFactory = core.getDirectoryFactory();\n            dirFactory.release(dir);\n          }\n        }\n        if (wrappedReq != null) wrappedReq.close();\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n  }\n\n","sourceOld":"  protected boolean handleMergeAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    SolrParams params = req.getParams();\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.getCore(cname);\n    SolrQueryRequest wrappedReq = null;\n\n    SolrCore[] sourceCores = null;\n    RefCounted<SolrIndexSearcher>[] searchers = null;\n    // stores readers created from indexDir param values\n    IndexReader[] readersToBeClosed = null;\n    if (core != null) {\n      try {\n        String[] dirNames = params.getParams(CoreAdminParams.INDEX_DIR);\n        if (dirNames == null || dirNames.length == 0) {\n          String[] sources = params.getParams(\"srcCore\");\n          if (sources == null || sources.length == 0)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                \"At least one indexDir or srcCore must be specified\");\n\n          sourceCores = new SolrCore[sources.length];\n          for (int i = 0; i < sources.length; i++) {\n            String source = sources[i];\n            SolrCore srcCore = coreContainer.getCore(source);\n            if (srcCore == null)\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Core: \" + source + \" does not exist\");\n            sourceCores[i] = srcCore;\n          }\n        } else  {\n          readersToBeClosed = new IndexReader[dirNames.length];\n          DirectoryFactory dirFactory = core.getDirectoryFactory();\n          for (int i = 0; i < dirNames.length; i++) {\n            readersToBeClosed[i] = IndexReader.open(dirFactory.open(dirNames[i]), true);\n          }\n        }\n\n        IndexReader[] readers = null;\n        if (readersToBeClosed != null)  {\n          readers = readersToBeClosed;\n        } else {\n          readers = new IndexReader[sourceCores.length];\n          searchers = new RefCounted[sourceCores.length];\n          for (int i = 0; i < sourceCores.length; i++) {\n            SolrCore solrCore = sourceCores[i];\n            // record the searchers so that we can decref\n            searchers[i] = solrCore.getSearcher();\n            readers[i] = searchers[i].get().getIndexReader();\n          }\n        }\n\n        UpdateRequestProcessorChain processorChain =\n                core.getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        wrappedReq = new LocalSolrQueryRequest(core, req.getParams());\n        UpdateRequestProcessor processor =\n                processorChain.createProcessor(wrappedReq, rsp);\n        processor.processMergeIndexes(new MergeIndexesCommand(readers, req));\n      } finally {\n        if (searchers != null) {\n          for (RefCounted<SolrIndexSearcher> searcher : searchers) {\n            if (searcher != null) searcher.decref();\n          }\n        }\n        if (sourceCores != null) {\n          for (SolrCore solrCore : sourceCores) {\n            if (solrCore != null) solrCore.close();\n          }\n        }\n        if (readersToBeClosed != null) IOUtils.closeSafely(true, readersToBeClosed);\n        if (wrappedReq != null) wrappedReq.close();\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n  }\n\n","bugFix":["0a3f35d651410616f5a600589b0096c31f88f9a6"],"bugIntro":["cf4e1373c1497f3587ee815b1bddda10850a0f37"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"24230fe54121f9be9d85f2c2067536296785e421","date":1314462346,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected boolean handleMergeAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    SolrParams params = req.getParams();\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.getCore(cname);\n    SolrQueryRequest wrappedReq = null;\n\n    SolrCore[] sourceCores = null;\n    RefCounted<SolrIndexSearcher>[] searchers = null;\n    // stores readers created from indexDir param values\n    IndexReader[] readersToBeClosed = null;\n    Directory[] dirsToBeReleased = null;\n    if (core != null) {\n      try {\n        String[] dirNames = params.getParams(CoreAdminParams.INDEX_DIR);\n        if (dirNames == null || dirNames.length == 0) {\n          String[] sources = params.getParams(\"srcCore\");\n          if (sources == null || sources.length == 0)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                \"At least one indexDir or srcCore must be specified\");\n\n          sourceCores = new SolrCore[sources.length];\n          for (int i = 0; i < sources.length; i++) {\n            String source = sources[i];\n            SolrCore srcCore = coreContainer.getCore(source);\n            if (srcCore == null)\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Core: \" + source + \" does not exist\");\n            sourceCores[i] = srcCore;\n          }\n        } else  {\n          readersToBeClosed = new IndexReader[dirNames.length];\n          dirsToBeReleased = new Directory[dirNames.length];\n          DirectoryFactory dirFactory = core.getDirectoryFactory();\n          for (int i = 0; i < dirNames.length; i++) {\n            Directory dir = dirFactory.get(dirNames[i], core.getSolrConfig().mainIndexConfig.lockType);\n            dirsToBeReleased[i] = dir;\n            readersToBeClosed[i] = IndexReader.open(dir, true);\n          }\n        }\n\n        IndexReader[] readers = null;\n        if (readersToBeClosed != null)  {\n          readers = readersToBeClosed;\n        } else {\n          readers = new IndexReader[sourceCores.length];\n          searchers = new RefCounted[sourceCores.length];\n          for (int i = 0; i < sourceCores.length; i++) {\n            SolrCore solrCore = sourceCores[i];\n            // record the searchers so that we can decref\n            searchers[i] = solrCore.getSearcher();\n            readers[i] = searchers[i].get().getIndexReader();\n          }\n        }\n\n        UpdateRequestProcessorChain processorChain =\n                core.getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        wrappedReq = new LocalSolrQueryRequest(core, req.getParams());\n        UpdateRequestProcessor processor =\n                processorChain.createProcessor(wrappedReq, rsp);\n        processor.processMergeIndexes(new MergeIndexesCommand(readers, req));\n      } finally {\n        if (searchers != null) {\n          for (RefCounted<SolrIndexSearcher> searcher : searchers) {\n            if (searcher != null) searcher.decref();\n          }\n        }\n        if (sourceCores != null) {\n          for (SolrCore solrCore : sourceCores) {\n            if (solrCore != null) solrCore.close();\n          }\n        }\n        if (readersToBeClosed != null) IOUtils.closeWhileHandlingException(readersToBeClosed);\n        if (dirsToBeReleased != null) {\n          for (Directory dir : dirsToBeReleased) {\n            DirectoryFactory dirFactory = core.getDirectoryFactory();\n            dirFactory.release(dir);\n          }\n        }\n        if (wrappedReq != null) wrappedReq.close();\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n  }\n\n","sourceOld":"  protected boolean handleMergeAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    SolrParams params = req.getParams();\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.getCore(cname);\n    SolrQueryRequest wrappedReq = null;\n\n    SolrCore[] sourceCores = null;\n    RefCounted<SolrIndexSearcher>[] searchers = null;\n    // stores readers created from indexDir param values\n    IndexReader[] readersToBeClosed = null;\n    Directory[] dirsToBeReleased = null;\n    if (core != null) {\n      try {\n        String[] dirNames = params.getParams(CoreAdminParams.INDEX_DIR);\n        if (dirNames == null || dirNames.length == 0) {\n          String[] sources = params.getParams(\"srcCore\");\n          if (sources == null || sources.length == 0)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                \"At least one indexDir or srcCore must be specified\");\n\n          sourceCores = new SolrCore[sources.length];\n          for (int i = 0; i < sources.length; i++) {\n            String source = sources[i];\n            SolrCore srcCore = coreContainer.getCore(source);\n            if (srcCore == null)\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Core: \" + source + \" does not exist\");\n            sourceCores[i] = srcCore;\n          }\n        } else  {\n          readersToBeClosed = new IndexReader[dirNames.length];\n          dirsToBeReleased = new Directory[dirNames.length];\n          DirectoryFactory dirFactory = core.getDirectoryFactory();\n          for (int i = 0; i < dirNames.length; i++) {\n            Directory dir = dirFactory.get(dirNames[i], core.getSolrConfig().mainIndexConfig.lockType);\n            dirsToBeReleased[i] = dir;\n            readersToBeClosed[i] = IndexReader.open(dir, true);\n          }\n        }\n\n        IndexReader[] readers = null;\n        if (readersToBeClosed != null)  {\n          readers = readersToBeClosed;\n        } else {\n          readers = new IndexReader[sourceCores.length];\n          searchers = new RefCounted[sourceCores.length];\n          for (int i = 0; i < sourceCores.length; i++) {\n            SolrCore solrCore = sourceCores[i];\n            // record the searchers so that we can decref\n            searchers[i] = solrCore.getSearcher();\n            readers[i] = searchers[i].get().getIndexReader();\n          }\n        }\n\n        UpdateRequestProcessorChain processorChain =\n                core.getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        wrappedReq = new LocalSolrQueryRequest(core, req.getParams());\n        UpdateRequestProcessor processor =\n                processorChain.createProcessor(wrappedReq, rsp);\n        processor.processMergeIndexes(new MergeIndexesCommand(readers, req));\n      } finally {\n        if (searchers != null) {\n          for (RefCounted<SolrIndexSearcher> searcher : searchers) {\n            if (searcher != null) searcher.decref();\n          }\n        }\n        if (sourceCores != null) {\n          for (SolrCore solrCore : sourceCores) {\n            if (solrCore != null) solrCore.close();\n          }\n        }\n        if (readersToBeClosed != null) IOUtils.closeSafely(true, readersToBeClosed);\n        if (dirsToBeReleased != null) {\n          for (Directory dir : dirsToBeReleased) {\n            DirectoryFactory dirFactory = core.getDirectoryFactory();\n            dirFactory.release(dir);\n          }\n        }\n        if (wrappedReq != null) wrappedReq.close();\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n  }\n\n","bugFix":null,"bugIntro":["cf4e1373c1497f3587ee815b1bddda10850a0f37"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38cf2ff411b3f7342febd22163907bafb5342a6f","date":1316126478,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected boolean handleMergeAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    SolrParams params = req.getParams();\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.getCore(cname);\n    SolrQueryRequest wrappedReq = null;\n\n    SolrCore[] sourceCores = null;\n    RefCounted<SolrIndexSearcher>[] searchers = null;\n    // stores readers created from indexDir param values\n    IndexReader[] readersToBeClosed = null;\n    Directory[] dirsToBeReleased = null;\n    if (core != null) {\n      try {\n        String[] dirNames = params.getParams(CoreAdminParams.INDEX_DIR);\n        if (dirNames == null || dirNames.length == 0) {\n          String[] sources = params.getParams(\"srcCore\");\n          if (sources == null || sources.length == 0)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                \"At least one indexDir or srcCore must be specified\");\n\n          sourceCores = new SolrCore[sources.length];\n          for (int i = 0; i < sources.length; i++) {\n            String source = sources[i];\n            SolrCore srcCore = coreContainer.getCore(source);\n            if (srcCore == null)\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Core: \" + source + \" does not exist\");\n            sourceCores[i] = srcCore;\n          }\n        } else  {\n          readersToBeClosed = new IndexReader[dirNames.length];\n          dirsToBeReleased = new Directory[dirNames.length];\n          DirectoryFactory dirFactory = core.getDirectoryFactory();\n          for (int i = 0; i < dirNames.length; i++) {\n            Directory dir = dirFactory.get(dirNames[i], core.getSolrConfig().mainIndexConfig.lockType);\n            dirsToBeReleased[i] = dir;\n            readersToBeClosed[i] = IndexReader.open(dir, true);\n          }\n        }\n\n        IndexReader[] readers = null;\n        if (readersToBeClosed != null)  {\n          readers = readersToBeClosed;\n        } else {\n          readers = new IndexReader[sourceCores.length];\n          searchers = new RefCounted[sourceCores.length];\n          for (int i = 0; i < sourceCores.length; i++) {\n            SolrCore solrCore = sourceCores[i];\n            // record the searchers so that we can decref\n            searchers[i] = solrCore.getSearcher();\n            readers[i] = searchers[i].get().getIndexReader();\n          }\n        }\n\n        UpdateRequestProcessorChain processorChain =\n                core.getUpdateProcessingChain(SolrPluginUtils.resolveUpdateChainParam(params, log));\n        wrappedReq = new LocalSolrQueryRequest(core, req.getParams());\n        UpdateRequestProcessor processor =\n                processorChain.createProcessor(wrappedReq, rsp);\n        processor.processMergeIndexes(new MergeIndexesCommand(readers, req));\n      } finally {\n        if (searchers != null) {\n          for (RefCounted<SolrIndexSearcher> searcher : searchers) {\n            if (searcher != null) searcher.decref();\n          }\n        }\n        if (sourceCores != null) {\n          for (SolrCore solrCore : sourceCores) {\n            if (solrCore != null) solrCore.close();\n          }\n        }\n        if (readersToBeClosed != null) IOUtils.closeWhileHandlingException(readersToBeClosed);\n        if (dirsToBeReleased != null) {\n          for (Directory dir : dirsToBeReleased) {\n            DirectoryFactory dirFactory = core.getDirectoryFactory();\n            dirFactory.release(dir);\n          }\n        }\n        if (wrappedReq != null) wrappedReq.close();\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n  }\n\n","sourceOld":"  protected boolean handleMergeAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    SolrParams params = req.getParams();\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.getCore(cname);\n    SolrQueryRequest wrappedReq = null;\n\n    SolrCore[] sourceCores = null;\n    RefCounted<SolrIndexSearcher>[] searchers = null;\n    // stores readers created from indexDir param values\n    IndexReader[] readersToBeClosed = null;\n    Directory[] dirsToBeReleased = null;\n    if (core != null) {\n      try {\n        String[] dirNames = params.getParams(CoreAdminParams.INDEX_DIR);\n        if (dirNames == null || dirNames.length == 0) {\n          String[] sources = params.getParams(\"srcCore\");\n          if (sources == null || sources.length == 0)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                \"At least one indexDir or srcCore must be specified\");\n\n          sourceCores = new SolrCore[sources.length];\n          for (int i = 0; i < sources.length; i++) {\n            String source = sources[i];\n            SolrCore srcCore = coreContainer.getCore(source);\n            if (srcCore == null)\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Core: \" + source + \" does not exist\");\n            sourceCores[i] = srcCore;\n          }\n        } else  {\n          readersToBeClosed = new IndexReader[dirNames.length];\n          dirsToBeReleased = new Directory[dirNames.length];\n          DirectoryFactory dirFactory = core.getDirectoryFactory();\n          for (int i = 0; i < dirNames.length; i++) {\n            Directory dir = dirFactory.get(dirNames[i], core.getSolrConfig().mainIndexConfig.lockType);\n            dirsToBeReleased[i] = dir;\n            readersToBeClosed[i] = IndexReader.open(dir, true);\n          }\n        }\n\n        IndexReader[] readers = null;\n        if (readersToBeClosed != null)  {\n          readers = readersToBeClosed;\n        } else {\n          readers = new IndexReader[sourceCores.length];\n          searchers = new RefCounted[sourceCores.length];\n          for (int i = 0; i < sourceCores.length; i++) {\n            SolrCore solrCore = sourceCores[i];\n            // record the searchers so that we can decref\n            searchers[i] = solrCore.getSearcher();\n            readers[i] = searchers[i].get().getIndexReader();\n          }\n        }\n\n        UpdateRequestProcessorChain processorChain =\n                core.getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        wrappedReq = new LocalSolrQueryRequest(core, req.getParams());\n        UpdateRequestProcessor processor =\n                processorChain.createProcessor(wrappedReq, rsp);\n        processor.processMergeIndexes(new MergeIndexesCommand(readers, req));\n      } finally {\n        if (searchers != null) {\n          for (RefCounted<SolrIndexSearcher> searcher : searchers) {\n            if (searcher != null) searcher.decref();\n          }\n        }\n        if (sourceCores != null) {\n          for (SolrCore solrCore : sourceCores) {\n            if (solrCore != null) solrCore.close();\n          }\n        }\n        if (readersToBeClosed != null) IOUtils.closeWhileHandlingException(readersToBeClosed);\n        if (dirsToBeReleased != null) {\n          for (Directory dir : dirsToBeReleased) {\n            DirectoryFactory dirFactory = core.getDirectoryFactory();\n            dirFactory.release(dir);\n          }\n        }\n        if (wrappedReq != null) wrappedReq.close();\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n  }\n\n","bugFix":["64cae353de680169c133e0a9f4debee071ad3241"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected boolean handleMergeAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    SolrParams params = req.getParams();\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.getCore(cname);\n    SolrQueryRequest wrappedReq = null;\n\n    SolrCore[] sourceCores = null;\n    RefCounted<SolrIndexSearcher>[] searchers = null;\n    // stores readers created from indexDir param values\n    IndexReader[] readersToBeClosed = null;\n    Directory[] dirsToBeReleased = null;\n    if (core != null) {\n      try {\n        String[] dirNames = params.getParams(CoreAdminParams.INDEX_DIR);\n        if (dirNames == null || dirNames.length == 0) {\n          String[] sources = params.getParams(\"srcCore\");\n          if (sources == null || sources.length == 0)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                \"At least one indexDir or srcCore must be specified\");\n\n          sourceCores = new SolrCore[sources.length];\n          for (int i = 0; i < sources.length; i++) {\n            String source = sources[i];\n            SolrCore srcCore = coreContainer.getCore(source);\n            if (srcCore == null)\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Core: \" + source + \" does not exist\");\n            sourceCores[i] = srcCore;\n          }\n        } else  {\n          readersToBeClosed = new IndexReader[dirNames.length];\n          dirsToBeReleased = new Directory[dirNames.length];\n          DirectoryFactory dirFactory = core.getDirectoryFactory();\n          for (int i = 0; i < dirNames.length; i++) {\n            Directory dir = dirFactory.get(dirNames[i], core.getSolrConfig().mainIndexConfig.lockType);\n            dirsToBeReleased[i] = dir;\n            // TODO: why doesn't this use the IR factory? what is going on here?\n            readersToBeClosed[i] = IndexReader.open(dir, true);\n          }\n        }\n\n        IndexReader[] readers = null;\n        if (readersToBeClosed != null)  {\n          readers = readersToBeClosed;\n        } else {\n          readers = new IndexReader[sourceCores.length];\n          searchers = new RefCounted[sourceCores.length];\n          for (int i = 0; i < sourceCores.length; i++) {\n            SolrCore solrCore = sourceCores[i];\n            // record the searchers so that we can decref\n            searchers[i] = solrCore.getSearcher();\n            readers[i] = searchers[i].get().getIndexReader();\n          }\n        }\n\n        UpdateRequestProcessorChain processorChain =\n                core.getUpdateProcessingChain(SolrPluginUtils.resolveUpdateChainParam(params, log));\n        wrappedReq = new LocalSolrQueryRequest(core, req.getParams());\n        UpdateRequestProcessor processor =\n                processorChain.createProcessor(wrappedReq, rsp);\n        processor.processMergeIndexes(new MergeIndexesCommand(readers, req));\n      } finally {\n        if (searchers != null) {\n          for (RefCounted<SolrIndexSearcher> searcher : searchers) {\n            if (searcher != null) searcher.decref();\n          }\n        }\n        if (sourceCores != null) {\n          for (SolrCore solrCore : sourceCores) {\n            if (solrCore != null) solrCore.close();\n          }\n        }\n        if (readersToBeClosed != null) IOUtils.closeWhileHandlingException(readersToBeClosed);\n        if (dirsToBeReleased != null) {\n          for (Directory dir : dirsToBeReleased) {\n            DirectoryFactory dirFactory = core.getDirectoryFactory();\n            dirFactory.release(dir);\n          }\n        }\n        if (wrappedReq != null) wrappedReq.close();\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n  }\n\n","sourceOld":"  protected boolean handleMergeAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    SolrParams params = req.getParams();\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.getCore(cname);\n    SolrQueryRequest wrappedReq = null;\n\n    SolrCore[] sourceCores = null;\n    RefCounted<SolrIndexSearcher>[] searchers = null;\n    // stores readers created from indexDir param values\n    IndexReader[] readersToBeClosed = null;\n    Directory[] dirsToBeReleased = null;\n    if (core != null) {\n      try {\n        String[] dirNames = params.getParams(CoreAdminParams.INDEX_DIR);\n        if (dirNames == null || dirNames.length == 0) {\n          String[] sources = params.getParams(\"srcCore\");\n          if (sources == null || sources.length == 0)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                \"At least one indexDir or srcCore must be specified\");\n\n          sourceCores = new SolrCore[sources.length];\n          for (int i = 0; i < sources.length; i++) {\n            String source = sources[i];\n            SolrCore srcCore = coreContainer.getCore(source);\n            if (srcCore == null)\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Core: \" + source + \" does not exist\");\n            sourceCores[i] = srcCore;\n          }\n        } else  {\n          readersToBeClosed = new IndexReader[dirNames.length];\n          dirsToBeReleased = new Directory[dirNames.length];\n          DirectoryFactory dirFactory = core.getDirectoryFactory();\n          for (int i = 0; i < dirNames.length; i++) {\n            Directory dir = dirFactory.get(dirNames[i], core.getSolrConfig().mainIndexConfig.lockType);\n            dirsToBeReleased[i] = dir;\n            readersToBeClosed[i] = IndexReader.open(dir, true);\n          }\n        }\n\n        IndexReader[] readers = null;\n        if (readersToBeClosed != null)  {\n          readers = readersToBeClosed;\n        } else {\n          readers = new IndexReader[sourceCores.length];\n          searchers = new RefCounted[sourceCores.length];\n          for (int i = 0; i < sourceCores.length; i++) {\n            SolrCore solrCore = sourceCores[i];\n            // record the searchers so that we can decref\n            searchers[i] = solrCore.getSearcher();\n            readers[i] = searchers[i].get().getIndexReader();\n          }\n        }\n\n        UpdateRequestProcessorChain processorChain =\n                core.getUpdateProcessingChain(SolrPluginUtils.resolveUpdateChainParam(params, log));\n        wrappedReq = new LocalSolrQueryRequest(core, req.getParams());\n        UpdateRequestProcessor processor =\n                processorChain.createProcessor(wrappedReq, rsp);\n        processor.processMergeIndexes(new MergeIndexesCommand(readers, req));\n      } finally {\n        if (searchers != null) {\n          for (RefCounted<SolrIndexSearcher> searcher : searchers) {\n            if (searcher != null) searcher.decref();\n          }\n        }\n        if (sourceCores != null) {\n          for (SolrCore solrCore : sourceCores) {\n            if (solrCore != null) solrCore.close();\n          }\n        }\n        if (readersToBeClosed != null) IOUtils.closeWhileHandlingException(readersToBeClosed);\n        if (dirsToBeReleased != null) {\n          for (Directory dir : dirsToBeReleased) {\n            DirectoryFactory dirFactory = core.getDirectoryFactory();\n            dirFactory.release(dir);\n          }\n        }\n        if (wrappedReq != null) wrappedReq.close();\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected boolean handleMergeAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    SolrParams params = req.getParams();\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.getCore(cname);\n    SolrQueryRequest wrappedReq = null;\n\n    SolrCore[] sourceCores = null;\n    RefCounted<SolrIndexSearcher>[] searchers = null;\n    // stores readers created from indexDir param values\n    IndexReader[] readersToBeClosed = null;\n    Directory[] dirsToBeReleased = null;\n    if (core != null) {\n      try {\n        String[] dirNames = params.getParams(CoreAdminParams.INDEX_DIR);\n        if (dirNames == null || dirNames.length == 0) {\n          String[] sources = params.getParams(\"srcCore\");\n          if (sources == null || sources.length == 0)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                \"At least one indexDir or srcCore must be specified\");\n\n          sourceCores = new SolrCore[sources.length];\n          for (int i = 0; i < sources.length; i++) {\n            String source = sources[i];\n            SolrCore srcCore = coreContainer.getCore(source);\n            if (srcCore == null)\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Core: \" + source + \" does not exist\");\n            sourceCores[i] = srcCore;\n          }\n        } else  {\n          readersToBeClosed = new IndexReader[dirNames.length];\n          dirsToBeReleased = new Directory[dirNames.length];\n          DirectoryFactory dirFactory = core.getDirectoryFactory();\n          for (int i = 0; i < dirNames.length; i++) {\n            Directory dir = dirFactory.get(dirNames[i], core.getSolrConfig().mainIndexConfig.lockType);\n            dirsToBeReleased[i] = dir;\n            // TODO: why doesn't this use the IR factory? what is going on here?\n            readersToBeClosed[i] = IndexReader.open(dir);\n          }\n        }\n\n        IndexReader[] readers = null;\n        if (readersToBeClosed != null)  {\n          readers = readersToBeClosed;\n        } else {\n          readers = new IndexReader[sourceCores.length];\n          searchers = new RefCounted[sourceCores.length];\n          for (int i = 0; i < sourceCores.length; i++) {\n            SolrCore solrCore = sourceCores[i];\n            // record the searchers so that we can decref\n            searchers[i] = solrCore.getSearcher();\n            readers[i] = searchers[i].get().getIndexReader();\n          }\n        }\n\n        UpdateRequestProcessorChain processorChain =\n                core.getUpdateProcessingChain(SolrPluginUtils.resolveUpdateChainParam(params, log));\n        wrappedReq = new LocalSolrQueryRequest(core, req.getParams());\n        UpdateRequestProcessor processor =\n                processorChain.createProcessor(wrappedReq, rsp);\n        processor.processMergeIndexes(new MergeIndexesCommand(readers, req));\n      } finally {\n        if (searchers != null) {\n          for (RefCounted<SolrIndexSearcher> searcher : searchers) {\n            if (searcher != null) searcher.decref();\n          }\n        }\n        if (sourceCores != null) {\n          for (SolrCore solrCore : sourceCores) {\n            if (solrCore != null) solrCore.close();\n          }\n        }\n        if (readersToBeClosed != null) IOUtils.closeWhileHandlingException(readersToBeClosed);\n        if (dirsToBeReleased != null) {\n          for (Directory dir : dirsToBeReleased) {\n            DirectoryFactory dirFactory = core.getDirectoryFactory();\n            dirFactory.release(dir);\n          }\n        }\n        if (wrappedReq != null) wrappedReq.close();\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n  }\n\n","sourceOld":"  protected boolean handleMergeAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    SolrParams params = req.getParams();\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.getCore(cname);\n    SolrQueryRequest wrappedReq = null;\n\n    SolrCore[] sourceCores = null;\n    RefCounted<SolrIndexSearcher>[] searchers = null;\n    // stores readers created from indexDir param values\n    IndexReader[] readersToBeClosed = null;\n    Directory[] dirsToBeReleased = null;\n    if (core != null) {\n      try {\n        String[] dirNames = params.getParams(CoreAdminParams.INDEX_DIR);\n        if (dirNames == null || dirNames.length == 0) {\n          String[] sources = params.getParams(\"srcCore\");\n          if (sources == null || sources.length == 0)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                \"At least one indexDir or srcCore must be specified\");\n\n          sourceCores = new SolrCore[sources.length];\n          for (int i = 0; i < sources.length; i++) {\n            String source = sources[i];\n            SolrCore srcCore = coreContainer.getCore(source);\n            if (srcCore == null)\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Core: \" + source + \" does not exist\");\n            sourceCores[i] = srcCore;\n          }\n        } else  {\n          readersToBeClosed = new IndexReader[dirNames.length];\n          dirsToBeReleased = new Directory[dirNames.length];\n          DirectoryFactory dirFactory = core.getDirectoryFactory();\n          for (int i = 0; i < dirNames.length; i++) {\n            Directory dir = dirFactory.get(dirNames[i], core.getSolrConfig().mainIndexConfig.lockType);\n            dirsToBeReleased[i] = dir;\n            // TODO: why doesn't this use the IR factory? what is going on here?\n            readersToBeClosed[i] = IndexReader.open(dir, true);\n          }\n        }\n\n        IndexReader[] readers = null;\n        if (readersToBeClosed != null)  {\n          readers = readersToBeClosed;\n        } else {\n          readers = new IndexReader[sourceCores.length];\n          searchers = new RefCounted[sourceCores.length];\n          for (int i = 0; i < sourceCores.length; i++) {\n            SolrCore solrCore = sourceCores[i];\n            // record the searchers so that we can decref\n            searchers[i] = solrCore.getSearcher();\n            readers[i] = searchers[i].get().getIndexReader();\n          }\n        }\n\n        UpdateRequestProcessorChain processorChain =\n                core.getUpdateProcessingChain(SolrPluginUtils.resolveUpdateChainParam(params, log));\n        wrappedReq = new LocalSolrQueryRequest(core, req.getParams());\n        UpdateRequestProcessor processor =\n                processorChain.createProcessor(wrappedReq, rsp);\n        processor.processMergeIndexes(new MergeIndexesCommand(readers, req));\n      } finally {\n        if (searchers != null) {\n          for (RefCounted<SolrIndexSearcher> searcher : searchers) {\n            if (searcher != null) searcher.decref();\n          }\n        }\n        if (sourceCores != null) {\n          for (SolrCore solrCore : sourceCores) {\n            if (solrCore != null) solrCore.close();\n          }\n        }\n        if (readersToBeClosed != null) IOUtils.closeWhileHandlingException(readersToBeClosed);\n        if (dirsToBeReleased != null) {\n          for (Directory dir : dirsToBeReleased) {\n            DirectoryFactory dirFactory = core.getDirectoryFactory();\n            dirFactory.release(dir);\n          }\n        }\n        if (wrappedReq != null) wrappedReq.close();\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected boolean handleMergeAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    SolrParams params = req.getParams();\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.getCore(cname);\n    SolrQueryRequest wrappedReq = null;\n\n    SolrCore[] sourceCores = null;\n    RefCounted<SolrIndexSearcher>[] searchers = null;\n    // stores readers created from indexDir param values\n    IndexReader[] readersToBeClosed = null;\n    Directory[] dirsToBeReleased = null;\n    if (core != null) {\n      try {\n        String[] dirNames = params.getParams(CoreAdminParams.INDEX_DIR);\n        if (dirNames == null || dirNames.length == 0) {\n          String[] sources = params.getParams(\"srcCore\");\n          if (sources == null || sources.length == 0)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                \"At least one indexDir or srcCore must be specified\");\n\n          sourceCores = new SolrCore[sources.length];\n          for (int i = 0; i < sources.length; i++) {\n            String source = sources[i];\n            SolrCore srcCore = coreContainer.getCore(source);\n            if (srcCore == null)\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Core: \" + source + \" does not exist\");\n            sourceCores[i] = srcCore;\n          }\n        } else  {\n          readersToBeClosed = new IndexReader[dirNames.length];\n          dirsToBeReleased = new Directory[dirNames.length];\n          DirectoryFactory dirFactory = core.getDirectoryFactory();\n          for (int i = 0; i < dirNames.length; i++) {\n            Directory dir = dirFactory.get(dirNames[i], core.getSolrConfig().mainIndexConfig.lockType);\n            dirsToBeReleased[i] = dir;\n            // TODO: why doesn't this use the IR factory? what is going on here?\n            readersToBeClosed[i] = IndexReader.open(dir);\n          }\n        }\n\n        IndexReader[] readers = null;\n        if (readersToBeClosed != null)  {\n          readers = readersToBeClosed;\n        } else {\n          readers = new IndexReader[sourceCores.length];\n          searchers = new RefCounted[sourceCores.length];\n          for (int i = 0; i < sourceCores.length; i++) {\n            SolrCore solrCore = sourceCores[i];\n            // record the searchers so that we can decref\n            searchers[i] = solrCore.getSearcher();\n            readers[i] = searchers[i].get().getIndexReader();\n          }\n        }\n\n        UpdateRequestProcessorChain processorChain =\n                core.getUpdateProcessingChain(SolrPluginUtils.resolveUpdateChainParam(params, log));\n        wrappedReq = new LocalSolrQueryRequest(core, req.getParams());\n        UpdateRequestProcessor processor =\n                processorChain.createProcessor(wrappedReq, rsp);\n        processor.processMergeIndexes(new MergeIndexesCommand(readers, req));\n      } finally {\n        if (searchers != null) {\n          for (RefCounted<SolrIndexSearcher> searcher : searchers) {\n            if (searcher != null) searcher.decref();\n          }\n        }\n        if (sourceCores != null) {\n          for (SolrCore solrCore : sourceCores) {\n            if (solrCore != null) solrCore.close();\n          }\n        }\n        if (readersToBeClosed != null) IOUtils.closeWhileHandlingException(readersToBeClosed);\n        if (dirsToBeReleased != null) {\n          for (Directory dir : dirsToBeReleased) {\n            DirectoryFactory dirFactory = core.getDirectoryFactory();\n            dirFactory.release(dir);\n          }\n        }\n        if (wrappedReq != null) wrappedReq.close();\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n  }\n\n","sourceOld":"  protected boolean handleMergeAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    SolrParams params = req.getParams();\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.getCore(cname);\n    SolrQueryRequest wrappedReq = null;\n\n    SolrCore[] sourceCores = null;\n    RefCounted<SolrIndexSearcher>[] searchers = null;\n    // stores readers created from indexDir param values\n    IndexReader[] readersToBeClosed = null;\n    Directory[] dirsToBeReleased = null;\n    if (core != null) {\n      try {\n        String[] dirNames = params.getParams(CoreAdminParams.INDEX_DIR);\n        if (dirNames == null || dirNames.length == 0) {\n          String[] sources = params.getParams(\"srcCore\");\n          if (sources == null || sources.length == 0)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                \"At least one indexDir or srcCore must be specified\");\n\n          sourceCores = new SolrCore[sources.length];\n          for (int i = 0; i < sources.length; i++) {\n            String source = sources[i];\n            SolrCore srcCore = coreContainer.getCore(source);\n            if (srcCore == null)\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Core: \" + source + \" does not exist\");\n            sourceCores[i] = srcCore;\n          }\n        } else  {\n          readersToBeClosed = new IndexReader[dirNames.length];\n          dirsToBeReleased = new Directory[dirNames.length];\n          DirectoryFactory dirFactory = core.getDirectoryFactory();\n          for (int i = 0; i < dirNames.length; i++) {\n            Directory dir = dirFactory.get(dirNames[i], core.getSolrConfig().mainIndexConfig.lockType);\n            dirsToBeReleased[i] = dir;\n            // TODO: why doesn't this use the IR factory? what is going on here?\n            readersToBeClosed[i] = IndexReader.open(dir, true);\n          }\n        }\n\n        IndexReader[] readers = null;\n        if (readersToBeClosed != null)  {\n          readers = readersToBeClosed;\n        } else {\n          readers = new IndexReader[sourceCores.length];\n          searchers = new RefCounted[sourceCores.length];\n          for (int i = 0; i < sourceCores.length; i++) {\n            SolrCore solrCore = sourceCores[i];\n            // record the searchers so that we can decref\n            searchers[i] = solrCore.getSearcher();\n            readers[i] = searchers[i].get().getIndexReader();\n          }\n        }\n\n        UpdateRequestProcessorChain processorChain =\n                core.getUpdateProcessingChain(SolrPluginUtils.resolveUpdateChainParam(params, log));\n        wrappedReq = new LocalSolrQueryRequest(core, req.getParams());\n        UpdateRequestProcessor processor =\n                processorChain.createProcessor(wrappedReq, rsp);\n        processor.processMergeIndexes(new MergeIndexesCommand(readers, req));\n      } finally {\n        if (searchers != null) {\n          for (RefCounted<SolrIndexSearcher> searcher : searchers) {\n            if (searcher != null) searcher.decref();\n          }\n        }\n        if (sourceCores != null) {\n          for (SolrCore solrCore : sourceCores) {\n            if (solrCore != null) solrCore.close();\n          }\n        }\n        if (readersToBeClosed != null) IOUtils.closeWhileHandlingException(readersToBeClosed);\n        if (dirsToBeReleased != null) {\n          for (Directory dir : dirsToBeReleased) {\n            DirectoryFactory dirFactory = core.getDirectoryFactory();\n            dirFactory.release(dir);\n          }\n        }\n        if (wrappedReq != null) wrappedReq.close();\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected boolean handleMergeAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    SolrParams params = req.getParams();\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.getCore(cname);\n    SolrQueryRequest wrappedReq = null;\n\n    SolrCore[] sourceCores = null;\n    RefCounted<SolrIndexSearcher>[] searchers = null;\n    // stores readers created from indexDir param values\n    IndexReader[] readersToBeClosed = null;\n    Directory[] dirsToBeReleased = null;\n    if (core != null) {\n      try {\n        String[] dirNames = params.getParams(CoreAdminParams.INDEX_DIR);\n        if (dirNames == null || dirNames.length == 0) {\n          String[] sources = params.getParams(\"srcCore\");\n          if (sources == null || sources.length == 0)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                \"At least one indexDir or srcCore must be specified\");\n\n          sourceCores = new SolrCore[sources.length];\n          for (int i = 0; i < sources.length; i++) {\n            String source = sources[i];\n            SolrCore srcCore = coreContainer.getCore(source);\n            if (srcCore == null)\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Core: \" + source + \" does not exist\");\n            sourceCores[i] = srcCore;\n          }\n        } else  {\n          readersToBeClosed = new IndexReader[dirNames.length];\n          dirsToBeReleased = new Directory[dirNames.length];\n          DirectoryFactory dirFactory = core.getDirectoryFactory();\n          for (int i = 0; i < dirNames.length; i++) {\n            Directory dir = dirFactory.get(dirNames[i], core.getSolrConfig().mainIndexConfig.lockType);\n            dirsToBeReleased[i] = dir;\n            // TODO: why doesn't this use the IR factory? what is going on here?\n            readersToBeClosed[i] = IndexReader.open(dir);\n          }\n        }\n\n        IndexReader[] readers = null;\n        if (readersToBeClosed != null)  {\n          readers = readersToBeClosed;\n        } else {\n          readers = new IndexReader[sourceCores.length];\n          searchers = new RefCounted[sourceCores.length];\n          for (int i = 0; i < sourceCores.length; i++) {\n            SolrCore solrCore = sourceCores[i];\n            // record the searchers so that we can decref\n            searchers[i] = solrCore.getSearcher();\n            readers[i] = searchers[i].get().getIndexReader();\n          }\n        }\n\n        UpdateRequestProcessorChain processorChain =\n                core.getUpdateProcessingChain(SolrPluginUtils.resolveUpdateChainParam(params, log));\n        wrappedReq = new LocalSolrQueryRequest(core, req.getParams());\n        UpdateRequestProcessor processor =\n                processorChain.createProcessor(wrappedReq, rsp);\n        processor.processMergeIndexes(new MergeIndexesCommand(readers, req));\n      } finally {\n        if (searchers != null) {\n          for (RefCounted<SolrIndexSearcher> searcher : searchers) {\n            if (searcher != null) searcher.decref();\n          }\n        }\n        if (sourceCores != null) {\n          for (SolrCore solrCore : sourceCores) {\n            if (solrCore != null) solrCore.close();\n          }\n        }\n        if (readersToBeClosed != null) IOUtils.closeWhileHandlingException(readersToBeClosed);\n        if (dirsToBeReleased != null) {\n          for (Directory dir : dirsToBeReleased) {\n            DirectoryFactory dirFactory = core.getDirectoryFactory();\n            dirFactory.release(dir);\n          }\n        }\n        if (wrappedReq != null) wrappedReq.close();\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n  }\n\n","sourceOld":"  protected boolean handleMergeAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    SolrParams params = req.getParams();\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.getCore(cname);\n    SolrQueryRequest wrappedReq = null;\n\n    SolrCore[] sourceCores = null;\n    RefCounted<SolrIndexSearcher>[] searchers = null;\n    // stores readers created from indexDir param values\n    IndexReader[] readersToBeClosed = null;\n    Directory[] dirsToBeReleased = null;\n    if (core != null) {\n      try {\n        String[] dirNames = params.getParams(CoreAdminParams.INDEX_DIR);\n        if (dirNames == null || dirNames.length == 0) {\n          String[] sources = params.getParams(\"srcCore\");\n          if (sources == null || sources.length == 0)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                \"At least one indexDir or srcCore must be specified\");\n\n          sourceCores = new SolrCore[sources.length];\n          for (int i = 0; i < sources.length; i++) {\n            String source = sources[i];\n            SolrCore srcCore = coreContainer.getCore(source);\n            if (srcCore == null)\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Core: \" + source + \" does not exist\");\n            sourceCores[i] = srcCore;\n          }\n        } else  {\n          readersToBeClosed = new IndexReader[dirNames.length];\n          dirsToBeReleased = new Directory[dirNames.length];\n          DirectoryFactory dirFactory = core.getDirectoryFactory();\n          for (int i = 0; i < dirNames.length; i++) {\n            Directory dir = dirFactory.get(dirNames[i], core.getSolrConfig().mainIndexConfig.lockType);\n            dirsToBeReleased[i] = dir;\n            // TODO: why doesn't this use the IR factory? what is going on here?\n            readersToBeClosed[i] = IndexReader.open(dir, true);\n          }\n        }\n\n        IndexReader[] readers = null;\n        if (readersToBeClosed != null)  {\n          readers = readersToBeClosed;\n        } else {\n          readers = new IndexReader[sourceCores.length];\n          searchers = new RefCounted[sourceCores.length];\n          for (int i = 0; i < sourceCores.length; i++) {\n            SolrCore solrCore = sourceCores[i];\n            // record the searchers so that we can decref\n            searchers[i] = solrCore.getSearcher();\n            readers[i] = searchers[i].get().getIndexReader();\n          }\n        }\n\n        UpdateRequestProcessorChain processorChain =\n                core.getUpdateProcessingChain(SolrPluginUtils.resolveUpdateChainParam(params, log));\n        wrappedReq = new LocalSolrQueryRequest(core, req.getParams());\n        UpdateRequestProcessor processor =\n                processorChain.createProcessor(wrappedReq, rsp);\n        processor.processMergeIndexes(new MergeIndexesCommand(readers, req));\n      } finally {\n        if (searchers != null) {\n          for (RefCounted<SolrIndexSearcher> searcher : searchers) {\n            if (searcher != null) searcher.decref();\n          }\n        }\n        if (sourceCores != null) {\n          for (SolrCore solrCore : sourceCores) {\n            if (solrCore != null) solrCore.close();\n          }\n        }\n        if (readersToBeClosed != null) IOUtils.closeWhileHandlingException(readersToBeClosed);\n        if (dirsToBeReleased != null) {\n          for (Directory dir : dirsToBeReleased) {\n            DirectoryFactory dirFactory = core.getDirectoryFactory();\n            dirFactory.release(dir);\n          }\n        }\n        if (wrappedReq != null) wrappedReq.close();\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3a7218407032c06bc1d6c57edf979e7788f5def","date":1326793293,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected boolean handleMergeAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    SolrParams params = req.getParams();\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.getCore(cname);\n    SolrQueryRequest wrappedReq = null;\n\n    SolrCore[] sourceCores = null;\n    RefCounted<SolrIndexSearcher>[] searchers = null;\n    // stores readers created from indexDir param values\n    IndexReader[] readersToBeClosed = null;\n    Directory[] dirsToBeReleased = null;\n    if (core != null) {\n      try {\n        String[] dirNames = params.getParams(CoreAdminParams.INDEX_DIR);\n        if (dirNames == null || dirNames.length == 0) {\n          String[] sources = params.getParams(\"srcCore\");\n          if (sources == null || sources.length == 0)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                \"At least one indexDir or srcCore must be specified\");\n\n          sourceCores = new SolrCore[sources.length];\n          for (int i = 0; i < sources.length; i++) {\n            String source = sources[i];\n            SolrCore srcCore = coreContainer.getCore(source);\n            if (srcCore == null)\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Core: \" + source + \" does not exist\");\n            sourceCores[i] = srcCore;\n          }\n        } else  {\n          readersToBeClosed = new IndexReader[dirNames.length];\n          dirsToBeReleased = new Directory[dirNames.length];\n          DirectoryFactory dirFactory = core.getDirectoryFactory();\n          for (int i = 0; i < dirNames.length; i++) {\n            Directory dir = dirFactory.get(dirNames[i], core.getSolrConfig().mainIndexConfig.lockType);\n            dirsToBeReleased[i] = dir;\n            // TODO: why doesn't this use the IR factory? what is going on here?\n            readersToBeClosed[i] = IndexReader.open(dir);\n          }\n        }\n\n        IndexReader[] readers = null;\n        if (readersToBeClosed != null)  {\n          readers = readersToBeClosed;\n        } else {\n          readers = new IndexReader[sourceCores.length];\n          searchers = new RefCounted[sourceCores.length];\n          for (int i = 0; i < sourceCores.length; i++) {\n            SolrCore solrCore = sourceCores[i];\n            // record the searchers so that we can decref\n            searchers[i] = solrCore.getSearcher();\n            readers[i] = searchers[i].get().getIndexReader();\n          }\n        }\n\n        UpdateRequestProcessorChain processorChain =\n                core.getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        wrappedReq = new LocalSolrQueryRequest(core, req.getParams());\n        UpdateRequestProcessor processor =\n                processorChain.createProcessor(wrappedReq, rsp);\n        processor.processMergeIndexes(new MergeIndexesCommand(readers, req));\n      } finally {\n        if (searchers != null) {\n          for (RefCounted<SolrIndexSearcher> searcher : searchers) {\n            if (searcher != null) searcher.decref();\n          }\n        }\n        if (sourceCores != null) {\n          for (SolrCore solrCore : sourceCores) {\n            if (solrCore != null) solrCore.close();\n          }\n        }\n        if (readersToBeClosed != null) IOUtils.closeWhileHandlingException(readersToBeClosed);\n        if (dirsToBeReleased != null) {\n          for (Directory dir : dirsToBeReleased) {\n            DirectoryFactory dirFactory = core.getDirectoryFactory();\n            dirFactory.release(dir);\n          }\n        }\n        if (wrappedReq != null) wrappedReq.close();\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n  }\n\n","sourceOld":"  protected boolean handleMergeAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    SolrParams params = req.getParams();\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.getCore(cname);\n    SolrQueryRequest wrappedReq = null;\n\n    SolrCore[] sourceCores = null;\n    RefCounted<SolrIndexSearcher>[] searchers = null;\n    // stores readers created from indexDir param values\n    IndexReader[] readersToBeClosed = null;\n    Directory[] dirsToBeReleased = null;\n    if (core != null) {\n      try {\n        String[] dirNames = params.getParams(CoreAdminParams.INDEX_DIR);\n        if (dirNames == null || dirNames.length == 0) {\n          String[] sources = params.getParams(\"srcCore\");\n          if (sources == null || sources.length == 0)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                \"At least one indexDir or srcCore must be specified\");\n\n          sourceCores = new SolrCore[sources.length];\n          for (int i = 0; i < sources.length; i++) {\n            String source = sources[i];\n            SolrCore srcCore = coreContainer.getCore(source);\n            if (srcCore == null)\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Core: \" + source + \" does not exist\");\n            sourceCores[i] = srcCore;\n          }\n        } else  {\n          readersToBeClosed = new IndexReader[dirNames.length];\n          dirsToBeReleased = new Directory[dirNames.length];\n          DirectoryFactory dirFactory = core.getDirectoryFactory();\n          for (int i = 0; i < dirNames.length; i++) {\n            Directory dir = dirFactory.get(dirNames[i], core.getSolrConfig().mainIndexConfig.lockType);\n            dirsToBeReleased[i] = dir;\n            // TODO: why doesn't this use the IR factory? what is going on here?\n            readersToBeClosed[i] = IndexReader.open(dir);\n          }\n        }\n\n        IndexReader[] readers = null;\n        if (readersToBeClosed != null)  {\n          readers = readersToBeClosed;\n        } else {\n          readers = new IndexReader[sourceCores.length];\n          searchers = new RefCounted[sourceCores.length];\n          for (int i = 0; i < sourceCores.length; i++) {\n            SolrCore solrCore = sourceCores[i];\n            // record the searchers so that we can decref\n            searchers[i] = solrCore.getSearcher();\n            readers[i] = searchers[i].get().getIndexReader();\n          }\n        }\n\n        UpdateRequestProcessorChain processorChain =\n                core.getUpdateProcessingChain(SolrPluginUtils.resolveUpdateChainParam(params, log));\n        wrappedReq = new LocalSolrQueryRequest(core, req.getParams());\n        UpdateRequestProcessor processor =\n                processorChain.createProcessor(wrappedReq, rsp);\n        processor.processMergeIndexes(new MergeIndexesCommand(readers, req));\n      } finally {\n        if (searchers != null) {\n          for (RefCounted<SolrIndexSearcher> searcher : searchers) {\n            if (searcher != null) searcher.decref();\n          }\n        }\n        if (sourceCores != null) {\n          for (SolrCore solrCore : sourceCores) {\n            if (solrCore != null) solrCore.close();\n          }\n        }\n        if (readersToBeClosed != null) IOUtils.closeWhileHandlingException(readersToBeClosed);\n        if (dirsToBeReleased != null) {\n          for (Directory dir : dirsToBeReleased) {\n            DirectoryFactory dirFactory = core.getDirectoryFactory();\n            dirFactory.release(dir);\n          }\n        }\n        if (wrappedReq != null) wrappedReq.close();\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"96d207426bd26fa5c1014e26d21d87603aea68b7","date":1327944562,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected boolean handleMergeAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    SolrParams params = req.getParams();\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.getCore(cname);\n    SolrQueryRequest wrappedReq = null;\n\n    SolrCore[] sourceCores = null;\n    RefCounted<SolrIndexSearcher>[] searchers = null;\n    // stores readers created from indexDir param values\n    DirectoryReader[] readersToBeClosed = null;\n    Directory[] dirsToBeReleased = null;\n    if (core != null) {\n      try {\n        String[] dirNames = params.getParams(CoreAdminParams.INDEX_DIR);\n        if (dirNames == null || dirNames.length == 0) {\n          String[] sources = params.getParams(\"srcCore\");\n          if (sources == null || sources.length == 0)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                \"At least one indexDir or srcCore must be specified\");\n\n          sourceCores = new SolrCore[sources.length];\n          for (int i = 0; i < sources.length; i++) {\n            String source = sources[i];\n            SolrCore srcCore = coreContainer.getCore(source);\n            if (srcCore == null)\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Core: \" + source + \" does not exist\");\n            sourceCores[i] = srcCore;\n          }\n        } else  {\n          readersToBeClosed = new DirectoryReader[dirNames.length];\n          dirsToBeReleased = new Directory[dirNames.length];\n          DirectoryFactory dirFactory = core.getDirectoryFactory();\n          for (int i = 0; i < dirNames.length; i++) {\n            Directory dir = dirFactory.get(dirNames[i], core.getSolrConfig().mainIndexConfig.lockType);\n            dirsToBeReleased[i] = dir;\n            // TODO: why doesn't this use the IR factory? what is going on here?\n            readersToBeClosed[i] = DirectoryReader.open(dir);\n          }\n        }\n\n        DirectoryReader[] readers = null;\n        if (readersToBeClosed != null)  {\n          readers = readersToBeClosed;\n        } else {\n          readers = new DirectoryReader[sourceCores.length];\n          searchers = new RefCounted[sourceCores.length];\n          for (int i = 0; i < sourceCores.length; i++) {\n            SolrCore solrCore = sourceCores[i];\n            // record the searchers so that we can decref\n            searchers[i] = solrCore.getSearcher();\n            readers[i] = searchers[i].get().getIndexReader();\n          }\n        }\n\n        UpdateRequestProcessorChain processorChain =\n                core.getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        wrappedReq = new LocalSolrQueryRequest(core, req.getParams());\n        UpdateRequestProcessor processor =\n                processorChain.createProcessor(wrappedReq, rsp);\n        processor.processMergeIndexes(new MergeIndexesCommand(readers, req));\n      } finally {\n        if (searchers != null) {\n          for (RefCounted<SolrIndexSearcher> searcher : searchers) {\n            if (searcher != null) searcher.decref();\n          }\n        }\n        if (sourceCores != null) {\n          for (SolrCore solrCore : sourceCores) {\n            if (solrCore != null) solrCore.close();\n          }\n        }\n        if (readersToBeClosed != null) IOUtils.closeWhileHandlingException(readersToBeClosed);\n        if (dirsToBeReleased != null) {\n          for (Directory dir : dirsToBeReleased) {\n            DirectoryFactory dirFactory = core.getDirectoryFactory();\n            dirFactory.release(dir);\n          }\n        }\n        if (wrappedReq != null) wrappedReq.close();\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n  }\n\n","sourceOld":"  protected boolean handleMergeAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    SolrParams params = req.getParams();\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.getCore(cname);\n    SolrQueryRequest wrappedReq = null;\n\n    SolrCore[] sourceCores = null;\n    RefCounted<SolrIndexSearcher>[] searchers = null;\n    // stores readers created from indexDir param values\n    IndexReader[] readersToBeClosed = null;\n    Directory[] dirsToBeReleased = null;\n    if (core != null) {\n      try {\n        String[] dirNames = params.getParams(CoreAdminParams.INDEX_DIR);\n        if (dirNames == null || dirNames.length == 0) {\n          String[] sources = params.getParams(\"srcCore\");\n          if (sources == null || sources.length == 0)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                \"At least one indexDir or srcCore must be specified\");\n\n          sourceCores = new SolrCore[sources.length];\n          for (int i = 0; i < sources.length; i++) {\n            String source = sources[i];\n            SolrCore srcCore = coreContainer.getCore(source);\n            if (srcCore == null)\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Core: \" + source + \" does not exist\");\n            sourceCores[i] = srcCore;\n          }\n        } else  {\n          readersToBeClosed = new IndexReader[dirNames.length];\n          dirsToBeReleased = new Directory[dirNames.length];\n          DirectoryFactory dirFactory = core.getDirectoryFactory();\n          for (int i = 0; i < dirNames.length; i++) {\n            Directory dir = dirFactory.get(dirNames[i], core.getSolrConfig().mainIndexConfig.lockType);\n            dirsToBeReleased[i] = dir;\n            // TODO: why doesn't this use the IR factory? what is going on here?\n            readersToBeClosed[i] = IndexReader.open(dir);\n          }\n        }\n\n        IndexReader[] readers = null;\n        if (readersToBeClosed != null)  {\n          readers = readersToBeClosed;\n        } else {\n          readers = new IndexReader[sourceCores.length];\n          searchers = new RefCounted[sourceCores.length];\n          for (int i = 0; i < sourceCores.length; i++) {\n            SolrCore solrCore = sourceCores[i];\n            // record the searchers so that we can decref\n            searchers[i] = solrCore.getSearcher();\n            readers[i] = searchers[i].get().getIndexReader();\n          }\n        }\n\n        UpdateRequestProcessorChain processorChain =\n                core.getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        wrappedReq = new LocalSolrQueryRequest(core, req.getParams());\n        UpdateRequestProcessor processor =\n                processorChain.createProcessor(wrappedReq, rsp);\n        processor.processMergeIndexes(new MergeIndexesCommand(readers, req));\n      } finally {\n        if (searchers != null) {\n          for (RefCounted<SolrIndexSearcher> searcher : searchers) {\n            if (searcher != null) searcher.decref();\n          }\n        }\n        if (sourceCores != null) {\n          for (SolrCore solrCore : sourceCores) {\n            if (solrCore != null) solrCore.close();\n          }\n        }\n        if (readersToBeClosed != null) IOUtils.closeWhileHandlingException(readersToBeClosed);\n        if (dirsToBeReleased != null) {\n          for (Directory dir : dirsToBeReleased) {\n            DirectoryFactory dirFactory = core.getDirectoryFactory();\n            dirFactory.release(dir);\n          }\n        }\n        if (wrappedReq != null) wrappedReq.close();\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n  }\n\n","bugFix":null,"bugIntro":["cf4e1373c1497f3587ee815b1bddda10850a0f37"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected boolean handleMergeAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    SolrParams params = req.getParams();\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.getCore(cname);\n    SolrQueryRequest wrappedReq = null;\n\n    SolrCore[] sourceCores = null;\n    RefCounted<SolrIndexSearcher>[] searchers = null;\n    // stores readers created from indexDir param values\n    DirectoryReader[] readersToBeClosed = null;\n    Directory[] dirsToBeReleased = null;\n    if (core != null) {\n      try {\n        String[] dirNames = params.getParams(CoreAdminParams.INDEX_DIR);\n        if (dirNames == null || dirNames.length == 0) {\n          String[] sources = params.getParams(\"srcCore\");\n          if (sources == null || sources.length == 0)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                \"At least one indexDir or srcCore must be specified\");\n\n          sourceCores = new SolrCore[sources.length];\n          for (int i = 0; i < sources.length; i++) {\n            String source = sources[i];\n            SolrCore srcCore = coreContainer.getCore(source);\n            if (srcCore == null)\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Core: \" + source + \" does not exist\");\n            sourceCores[i] = srcCore;\n          }\n        } else  {\n          readersToBeClosed = new DirectoryReader[dirNames.length];\n          dirsToBeReleased = new Directory[dirNames.length];\n          DirectoryFactory dirFactory = core.getDirectoryFactory();\n          for (int i = 0; i < dirNames.length; i++) {\n            Directory dir = dirFactory.get(dirNames[i], core.getSolrConfig().mainIndexConfig.lockType);\n            dirsToBeReleased[i] = dir;\n            // TODO: why doesn't this use the IR factory? what is going on here?\n            readersToBeClosed[i] = DirectoryReader.open(dir);\n          }\n        }\n\n        DirectoryReader[] readers = null;\n        if (readersToBeClosed != null)  {\n          readers = readersToBeClosed;\n        } else {\n          readers = new DirectoryReader[sourceCores.length];\n          searchers = new RefCounted[sourceCores.length];\n          for (int i = 0; i < sourceCores.length; i++) {\n            SolrCore solrCore = sourceCores[i];\n            // record the searchers so that we can decref\n            searchers[i] = solrCore.getSearcher();\n            readers[i] = searchers[i].get().getIndexReader();\n          }\n        }\n\n        UpdateRequestProcessorChain processorChain =\n                core.getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        wrappedReq = new LocalSolrQueryRequest(core, req.getParams());\n        UpdateRequestProcessor processor =\n                processorChain.createProcessor(wrappedReq, rsp);\n        processor.processMergeIndexes(new MergeIndexesCommand(readers, req));\n      } finally {\n        if (searchers != null) {\n          for (RefCounted<SolrIndexSearcher> searcher : searchers) {\n            if (searcher != null) searcher.decref();\n          }\n        }\n        if (sourceCores != null) {\n          for (SolrCore solrCore : sourceCores) {\n            if (solrCore != null) solrCore.close();\n          }\n        }\n        if (readersToBeClosed != null) IOUtils.closeWhileHandlingException(readersToBeClosed);\n        if (dirsToBeReleased != null) {\n          for (Directory dir : dirsToBeReleased) {\n            DirectoryFactory dirFactory = core.getDirectoryFactory();\n            dirFactory.release(dir);\n          }\n        }\n        if (wrappedReq != null) wrappedReq.close();\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n  }\n\n","sourceOld":"  protected boolean handleMergeAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    SolrParams params = req.getParams();\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.getCore(cname);\n    SolrQueryRequest wrappedReq = null;\n\n    SolrCore[] sourceCores = null;\n    RefCounted<SolrIndexSearcher>[] searchers = null;\n    // stores readers created from indexDir param values\n    IndexReader[] readersToBeClosed = null;\n    Directory[] dirsToBeReleased = null;\n    if (core != null) {\n      try {\n        String[] dirNames = params.getParams(CoreAdminParams.INDEX_DIR);\n        if (dirNames == null || dirNames.length == 0) {\n          String[] sources = params.getParams(\"srcCore\");\n          if (sources == null || sources.length == 0)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                \"At least one indexDir or srcCore must be specified\");\n\n          sourceCores = new SolrCore[sources.length];\n          for (int i = 0; i < sources.length; i++) {\n            String source = sources[i];\n            SolrCore srcCore = coreContainer.getCore(source);\n            if (srcCore == null)\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Core: \" + source + \" does not exist\");\n            sourceCores[i] = srcCore;\n          }\n        } else  {\n          readersToBeClosed = new IndexReader[dirNames.length];\n          dirsToBeReleased = new Directory[dirNames.length];\n          DirectoryFactory dirFactory = core.getDirectoryFactory();\n          for (int i = 0; i < dirNames.length; i++) {\n            Directory dir = dirFactory.get(dirNames[i], core.getSolrConfig().mainIndexConfig.lockType);\n            dirsToBeReleased[i] = dir;\n            // TODO: why doesn't this use the IR factory? what is going on here?\n            readersToBeClosed[i] = IndexReader.open(dir);\n          }\n        }\n\n        IndexReader[] readers = null;\n        if (readersToBeClosed != null)  {\n          readers = readersToBeClosed;\n        } else {\n          readers = new IndexReader[sourceCores.length];\n          searchers = new RefCounted[sourceCores.length];\n          for (int i = 0; i < sourceCores.length; i++) {\n            SolrCore solrCore = sourceCores[i];\n            // record the searchers so that we can decref\n            searchers[i] = solrCore.getSearcher();\n            readers[i] = searchers[i].get().getIndexReader();\n          }\n        }\n\n        UpdateRequestProcessorChain processorChain =\n                core.getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        wrappedReq = new LocalSolrQueryRequest(core, req.getParams());\n        UpdateRequestProcessor processor =\n                processorChain.createProcessor(wrappedReq, rsp);\n        processor.processMergeIndexes(new MergeIndexesCommand(readers, req));\n      } finally {\n        if (searchers != null) {\n          for (RefCounted<SolrIndexSearcher> searcher : searchers) {\n            if (searcher != null) searcher.decref();\n          }\n        }\n        if (sourceCores != null) {\n          for (SolrCore solrCore : sourceCores) {\n            if (solrCore != null) solrCore.close();\n          }\n        }\n        if (readersToBeClosed != null) IOUtils.closeWhileHandlingException(readersToBeClosed);\n        if (dirsToBeReleased != null) {\n          for (Directory dir : dirsToBeReleased) {\n            DirectoryFactory dirFactory = core.getDirectoryFactory();\n            dirFactory.release(dir);\n          }\n        }\n        if (wrappedReq != null) wrappedReq.close();\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4a5469a71486c4c1e313c7fcb08188d7111195c2","date":1333407337,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected boolean handleMergeAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    SolrParams params = req.getParams();\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.getCore(cname);\n    SolrQueryRequest wrappedReq = null;\n\n    SolrCore[] sourceCores = null;\n    RefCounted<SolrIndexSearcher>[] searchers = null;\n    // stores readers created from indexDir param values\n    DirectoryReader[] readersToBeClosed = null;\n    Directory[] dirsToBeReleased = null;\n    if (core != null) {\n      try {\n        String[] dirNames = params.getParams(CoreAdminParams.INDEX_DIR);\n        if (dirNames == null || dirNames.length == 0) {\n          String[] sources = params.getParams(\"srcCore\");\n          if (sources == null || sources.length == 0)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                \"At least one indexDir or srcCore must be specified\");\n\n          sourceCores = new SolrCore[sources.length];\n          for (int i = 0; i < sources.length; i++) {\n            String source = sources[i];\n            SolrCore srcCore = coreContainer.getCore(source);\n            if (srcCore == null)\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Core: \" + source + \" does not exist\");\n            sourceCores[i] = srcCore;\n          }\n        } else  {\n          readersToBeClosed = new DirectoryReader[dirNames.length];\n          dirsToBeReleased = new Directory[dirNames.length];\n          DirectoryFactory dirFactory = core.getDirectoryFactory();\n          for (int i = 0; i < dirNames.length; i++) {\n            Directory dir = dirFactory.get(dirNames[i], core.getSolrConfig().indexConfig.lockType);\n            dirsToBeReleased[i] = dir;\n            // TODO: why doesn't this use the IR factory? what is going on here?\n            readersToBeClosed[i] = DirectoryReader.open(dir);\n          }\n        }\n\n        DirectoryReader[] readers = null;\n        if (readersToBeClosed != null)  {\n          readers = readersToBeClosed;\n        } else {\n          readers = new DirectoryReader[sourceCores.length];\n          searchers = new RefCounted[sourceCores.length];\n          for (int i = 0; i < sourceCores.length; i++) {\n            SolrCore solrCore = sourceCores[i];\n            // record the searchers so that we can decref\n            searchers[i] = solrCore.getSearcher();\n            readers[i] = searchers[i].get().getIndexReader();\n          }\n        }\n\n        UpdateRequestProcessorChain processorChain =\n                core.getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        wrappedReq = new LocalSolrQueryRequest(core, req.getParams());\n        UpdateRequestProcessor processor =\n                processorChain.createProcessor(wrappedReq, rsp);\n        processor.processMergeIndexes(new MergeIndexesCommand(readers, req));\n      } finally {\n        if (searchers != null) {\n          for (RefCounted<SolrIndexSearcher> searcher : searchers) {\n            if (searcher != null) searcher.decref();\n          }\n        }\n        if (sourceCores != null) {\n          for (SolrCore solrCore : sourceCores) {\n            if (solrCore != null) solrCore.close();\n          }\n        }\n        if (readersToBeClosed != null) IOUtils.closeWhileHandlingException(readersToBeClosed);\n        if (dirsToBeReleased != null) {\n          for (Directory dir : dirsToBeReleased) {\n            DirectoryFactory dirFactory = core.getDirectoryFactory();\n            dirFactory.release(dir);\n          }\n        }\n        if (wrappedReq != null) wrappedReq.close();\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n  }\n\n","sourceOld":"  protected boolean handleMergeAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    SolrParams params = req.getParams();\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.getCore(cname);\n    SolrQueryRequest wrappedReq = null;\n\n    SolrCore[] sourceCores = null;\n    RefCounted<SolrIndexSearcher>[] searchers = null;\n    // stores readers created from indexDir param values\n    DirectoryReader[] readersToBeClosed = null;\n    Directory[] dirsToBeReleased = null;\n    if (core != null) {\n      try {\n        String[] dirNames = params.getParams(CoreAdminParams.INDEX_DIR);\n        if (dirNames == null || dirNames.length == 0) {\n          String[] sources = params.getParams(\"srcCore\");\n          if (sources == null || sources.length == 0)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                \"At least one indexDir or srcCore must be specified\");\n\n          sourceCores = new SolrCore[sources.length];\n          for (int i = 0; i < sources.length; i++) {\n            String source = sources[i];\n            SolrCore srcCore = coreContainer.getCore(source);\n            if (srcCore == null)\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Core: \" + source + \" does not exist\");\n            sourceCores[i] = srcCore;\n          }\n        } else  {\n          readersToBeClosed = new DirectoryReader[dirNames.length];\n          dirsToBeReleased = new Directory[dirNames.length];\n          DirectoryFactory dirFactory = core.getDirectoryFactory();\n          for (int i = 0; i < dirNames.length; i++) {\n            Directory dir = dirFactory.get(dirNames[i], core.getSolrConfig().mainIndexConfig.lockType);\n            dirsToBeReleased[i] = dir;\n            // TODO: why doesn't this use the IR factory? what is going on here?\n            readersToBeClosed[i] = DirectoryReader.open(dir);\n          }\n        }\n\n        DirectoryReader[] readers = null;\n        if (readersToBeClosed != null)  {\n          readers = readersToBeClosed;\n        } else {\n          readers = new DirectoryReader[sourceCores.length];\n          searchers = new RefCounted[sourceCores.length];\n          for (int i = 0; i < sourceCores.length; i++) {\n            SolrCore solrCore = sourceCores[i];\n            // record the searchers so that we can decref\n            searchers[i] = solrCore.getSearcher();\n            readers[i] = searchers[i].get().getIndexReader();\n          }\n        }\n\n        UpdateRequestProcessorChain processorChain =\n                core.getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        wrappedReq = new LocalSolrQueryRequest(core, req.getParams());\n        UpdateRequestProcessor processor =\n                processorChain.createProcessor(wrappedReq, rsp);\n        processor.processMergeIndexes(new MergeIndexesCommand(readers, req));\n      } finally {\n        if (searchers != null) {\n          for (RefCounted<SolrIndexSearcher> searcher : searchers) {\n            if (searcher != null) searcher.decref();\n          }\n        }\n        if (sourceCores != null) {\n          for (SolrCore solrCore : sourceCores) {\n            if (solrCore != null) solrCore.close();\n          }\n        }\n        if (readersToBeClosed != null) IOUtils.closeWhileHandlingException(readersToBeClosed);\n        if (dirsToBeReleased != null) {\n          for (Directory dir : dirsToBeReleased) {\n            DirectoryFactory dirFactory = core.getDirectoryFactory();\n            dirFactory.release(dir);\n          }\n        }\n        if (wrappedReq != null) wrappedReq.close();\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674","date":1358098706,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected boolean handleMergeAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    SolrParams params = req.getParams();\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.getCore(cname);\n    SolrQueryRequest wrappedReq = null;\n\n    SolrCore[] sourceCores = null;\n    RefCounted<SolrIndexSearcher>[] searchers = null;\n    // stores readers created from indexDir param values\n    DirectoryReader[] readersToBeClosed = null;\n    Directory[] dirsToBeReleased = null;\n    if (core != null) {\n      try {\n        String[] dirNames = params.getParams(CoreAdminParams.INDEX_DIR);\n        if (dirNames == null || dirNames.length == 0) {\n          String[] sources = params.getParams(\"srcCore\");\n          if (sources == null || sources.length == 0)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                \"At least one indexDir or srcCore must be specified\");\n\n          sourceCores = new SolrCore[sources.length];\n          for (int i = 0; i < sources.length; i++) {\n            String source = sources[i];\n            SolrCore srcCore = coreContainer.getCore(source);\n            if (srcCore == null)\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Core: \" + source + \" does not exist\");\n            sourceCores[i] = srcCore;\n          }\n        } else  {\n          readersToBeClosed = new DirectoryReader[dirNames.length];\n          dirsToBeReleased = new Directory[dirNames.length];\n          DirectoryFactory dirFactory = core.getDirectoryFactory();\n          for (int i = 0; i < dirNames.length; i++) {\n            Directory dir = dirFactory.get(dirNames[i], DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n            dirsToBeReleased[i] = dir;\n            // TODO: why doesn't this use the IR factory? what is going on here?\n            readersToBeClosed[i] = DirectoryReader.open(dir);\n          }\n        }\n\n        DirectoryReader[] readers = null;\n        if (readersToBeClosed != null)  {\n          readers = readersToBeClosed;\n        } else {\n          readers = new DirectoryReader[sourceCores.length];\n          searchers = new RefCounted[sourceCores.length];\n          for (int i = 0; i < sourceCores.length; i++) {\n            SolrCore solrCore = sourceCores[i];\n            // record the searchers so that we can decref\n            searchers[i] = solrCore.getSearcher();\n            readers[i] = searchers[i].get().getIndexReader();\n          }\n        }\n\n        UpdateRequestProcessorChain processorChain =\n                core.getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        wrappedReq = new LocalSolrQueryRequest(core, req.getParams());\n        UpdateRequestProcessor processor =\n                processorChain.createProcessor(wrappedReq, rsp);\n        processor.processMergeIndexes(new MergeIndexesCommand(readers, req));\n      } finally {\n        if (searchers != null) {\n          for (RefCounted<SolrIndexSearcher> searcher : searchers) {\n            if (searcher != null) searcher.decref();\n          }\n        }\n        if (sourceCores != null) {\n          for (SolrCore solrCore : sourceCores) {\n            if (solrCore != null) solrCore.close();\n          }\n        }\n        if (readersToBeClosed != null) IOUtils.closeWhileHandlingException(readersToBeClosed);\n        if (dirsToBeReleased != null) {\n          for (Directory dir : dirsToBeReleased) {\n            DirectoryFactory dirFactory = core.getDirectoryFactory();\n            dirFactory.release(dir);\n          }\n        }\n        if (wrappedReq != null) wrappedReq.close();\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n  }\n\n","sourceOld":"  protected boolean handleMergeAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    SolrParams params = req.getParams();\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.getCore(cname);\n    SolrQueryRequest wrappedReq = null;\n\n    SolrCore[] sourceCores = null;\n    RefCounted<SolrIndexSearcher>[] searchers = null;\n    // stores readers created from indexDir param values\n    DirectoryReader[] readersToBeClosed = null;\n    Directory[] dirsToBeReleased = null;\n    if (core != null) {\n      try {\n        String[] dirNames = params.getParams(CoreAdminParams.INDEX_DIR);\n        if (dirNames == null || dirNames.length == 0) {\n          String[] sources = params.getParams(\"srcCore\");\n          if (sources == null || sources.length == 0)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                \"At least one indexDir or srcCore must be specified\");\n\n          sourceCores = new SolrCore[sources.length];\n          for (int i = 0; i < sources.length; i++) {\n            String source = sources[i];\n            SolrCore srcCore = coreContainer.getCore(source);\n            if (srcCore == null)\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Core: \" + source + \" does not exist\");\n            sourceCores[i] = srcCore;\n          }\n        } else  {\n          readersToBeClosed = new DirectoryReader[dirNames.length];\n          dirsToBeReleased = new Directory[dirNames.length];\n          DirectoryFactory dirFactory = core.getDirectoryFactory();\n          for (int i = 0; i < dirNames.length; i++) {\n            Directory dir = dirFactory.get(dirNames[i], core.getSolrConfig().indexConfig.lockType);\n            dirsToBeReleased[i] = dir;\n            // TODO: why doesn't this use the IR factory? what is going on here?\n            readersToBeClosed[i] = DirectoryReader.open(dir);\n          }\n        }\n\n        DirectoryReader[] readers = null;\n        if (readersToBeClosed != null)  {\n          readers = readersToBeClosed;\n        } else {\n          readers = new DirectoryReader[sourceCores.length];\n          searchers = new RefCounted[sourceCores.length];\n          for (int i = 0; i < sourceCores.length; i++) {\n            SolrCore solrCore = sourceCores[i];\n            // record the searchers so that we can decref\n            searchers[i] = solrCore.getSearcher();\n            readers[i] = searchers[i].get().getIndexReader();\n          }\n        }\n\n        UpdateRequestProcessorChain processorChain =\n                core.getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        wrappedReq = new LocalSolrQueryRequest(core, req.getParams());\n        UpdateRequestProcessor processor =\n                processorChain.createProcessor(wrappedReq, rsp);\n        processor.processMergeIndexes(new MergeIndexesCommand(readers, req));\n      } finally {\n        if (searchers != null) {\n          for (RefCounted<SolrIndexSearcher> searcher : searchers) {\n            if (searcher != null) searcher.decref();\n          }\n        }\n        if (sourceCores != null) {\n          for (SolrCore solrCore : sourceCores) {\n            if (solrCore != null) solrCore.close();\n          }\n        }\n        if (readersToBeClosed != null) IOUtils.closeWhileHandlingException(readersToBeClosed);\n        if (dirsToBeReleased != null) {\n          for (Directory dir : dirsToBeReleased) {\n            DirectoryFactory dirFactory = core.getDirectoryFactory();\n            dirFactory.release(dir);\n          }\n        }\n        if (wrappedReq != null) wrappedReq.close();\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected boolean handleMergeAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    SolrParams params = req.getParams();\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.getCore(cname);\n    SolrQueryRequest wrappedReq = null;\n\n    SolrCore[] sourceCores = null;\n    RefCounted<SolrIndexSearcher>[] searchers = null;\n    // stores readers created from indexDir param values\n    DirectoryReader[] readersToBeClosed = null;\n    Directory[] dirsToBeReleased = null;\n    if (core != null) {\n      try {\n        String[] dirNames = params.getParams(CoreAdminParams.INDEX_DIR);\n        if (dirNames == null || dirNames.length == 0) {\n          String[] sources = params.getParams(\"srcCore\");\n          if (sources == null || sources.length == 0)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                \"At least one indexDir or srcCore must be specified\");\n\n          sourceCores = new SolrCore[sources.length];\n          for (int i = 0; i < sources.length; i++) {\n            String source = sources[i];\n            SolrCore srcCore = coreContainer.getCore(source);\n            if (srcCore == null)\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Core: \" + source + \" does not exist\");\n            sourceCores[i] = srcCore;\n          }\n        } else  {\n          readersToBeClosed = new DirectoryReader[dirNames.length];\n          dirsToBeReleased = new Directory[dirNames.length];\n          DirectoryFactory dirFactory = core.getDirectoryFactory();\n          for (int i = 0; i < dirNames.length; i++) {\n            Directory dir = dirFactory.get(dirNames[i], DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n            dirsToBeReleased[i] = dir;\n            // TODO: why doesn't this use the IR factory? what is going on here?\n            readersToBeClosed[i] = DirectoryReader.open(dir);\n          }\n        }\n\n        DirectoryReader[] readers = null;\n        if (readersToBeClosed != null)  {\n          readers = readersToBeClosed;\n        } else {\n          readers = new DirectoryReader[sourceCores.length];\n          searchers = new RefCounted[sourceCores.length];\n          for (int i = 0; i < sourceCores.length; i++) {\n            SolrCore solrCore = sourceCores[i];\n            // record the searchers so that we can decref\n            searchers[i] = solrCore.getSearcher();\n            readers[i] = searchers[i].get().getIndexReader();\n          }\n        }\n\n        UpdateRequestProcessorChain processorChain =\n                core.getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        wrappedReq = new LocalSolrQueryRequest(core, req.getParams());\n        UpdateRequestProcessor processor =\n                processorChain.createProcessor(wrappedReq, rsp);\n        processor.processMergeIndexes(new MergeIndexesCommand(readers, req));\n      } finally {\n        if (searchers != null) {\n          for (RefCounted<SolrIndexSearcher> searcher : searchers) {\n            if (searcher != null) searcher.decref();\n          }\n        }\n        if (sourceCores != null) {\n          for (SolrCore solrCore : sourceCores) {\n            if (solrCore != null) solrCore.close();\n          }\n        }\n        if (readersToBeClosed != null) IOUtils.closeWhileHandlingException(readersToBeClosed);\n        if (dirsToBeReleased != null) {\n          for (Directory dir : dirsToBeReleased) {\n            DirectoryFactory dirFactory = core.getDirectoryFactory();\n            dirFactory.release(dir);\n          }\n        }\n        if (wrappedReq != null) wrappedReq.close();\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n  }\n\n","sourceOld":"  protected boolean handleMergeAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    SolrParams params = req.getParams();\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.getCore(cname);\n    SolrQueryRequest wrappedReq = null;\n\n    SolrCore[] sourceCores = null;\n    RefCounted<SolrIndexSearcher>[] searchers = null;\n    // stores readers created from indexDir param values\n    DirectoryReader[] readersToBeClosed = null;\n    Directory[] dirsToBeReleased = null;\n    if (core != null) {\n      try {\n        String[] dirNames = params.getParams(CoreAdminParams.INDEX_DIR);\n        if (dirNames == null || dirNames.length == 0) {\n          String[] sources = params.getParams(\"srcCore\");\n          if (sources == null || sources.length == 0)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                \"At least one indexDir or srcCore must be specified\");\n\n          sourceCores = new SolrCore[sources.length];\n          for (int i = 0; i < sources.length; i++) {\n            String source = sources[i];\n            SolrCore srcCore = coreContainer.getCore(source);\n            if (srcCore == null)\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Core: \" + source + \" does not exist\");\n            sourceCores[i] = srcCore;\n          }\n        } else  {\n          readersToBeClosed = new DirectoryReader[dirNames.length];\n          dirsToBeReleased = new Directory[dirNames.length];\n          DirectoryFactory dirFactory = core.getDirectoryFactory();\n          for (int i = 0; i < dirNames.length; i++) {\n            Directory dir = dirFactory.get(dirNames[i], core.getSolrConfig().indexConfig.lockType);\n            dirsToBeReleased[i] = dir;\n            // TODO: why doesn't this use the IR factory? what is going on here?\n            readersToBeClosed[i] = DirectoryReader.open(dir);\n          }\n        }\n\n        DirectoryReader[] readers = null;\n        if (readersToBeClosed != null)  {\n          readers = readersToBeClosed;\n        } else {\n          readers = new DirectoryReader[sourceCores.length];\n          searchers = new RefCounted[sourceCores.length];\n          for (int i = 0; i < sourceCores.length; i++) {\n            SolrCore solrCore = sourceCores[i];\n            // record the searchers so that we can decref\n            searchers[i] = solrCore.getSearcher();\n            readers[i] = searchers[i].get().getIndexReader();\n          }\n        }\n\n        UpdateRequestProcessorChain processorChain =\n                core.getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        wrappedReq = new LocalSolrQueryRequest(core, req.getParams());\n        UpdateRequestProcessor processor =\n                processorChain.createProcessor(wrappedReq, rsp);\n        processor.processMergeIndexes(new MergeIndexesCommand(readers, req));\n      } finally {\n        if (searchers != null) {\n          for (RefCounted<SolrIndexSearcher> searcher : searchers) {\n            if (searcher != null) searcher.decref();\n          }\n        }\n        if (sourceCores != null) {\n          for (SolrCore solrCore : sourceCores) {\n            if (solrCore != null) solrCore.close();\n          }\n        }\n        if (readersToBeClosed != null) IOUtils.closeWhileHandlingException(readersToBeClosed);\n        if (dirsToBeReleased != null) {\n          for (Directory dir : dirsToBeReleased) {\n            DirectoryFactory dirFactory = core.getDirectoryFactory();\n            dirFactory.release(dir);\n          }\n        }\n        if (wrappedReq != null) wrappedReq.close();\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e764e9a107f93be9fa3c922bc6a197b3eec387e","date":1373560501,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void handleMergeAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    SolrParams params = req.getParams();\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.getCore(cname);\n    SolrQueryRequest wrappedReq = null;\n\n    SolrCore[] sourceCores = null;\n    RefCounted<SolrIndexSearcher>[] searchers = null;\n    // stores readers created from indexDir param values\n    DirectoryReader[] readersToBeClosed = null;\n    Directory[] dirsToBeReleased = null;\n    if (core != null) {\n      try {\n        String[] dirNames = params.getParams(CoreAdminParams.INDEX_DIR);\n        if (dirNames == null || dirNames.length == 0) {\n          String[] sources = params.getParams(\"srcCore\");\n          if (sources == null || sources.length == 0)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                \"At least one indexDir or srcCore must be specified\");\n\n          sourceCores = new SolrCore[sources.length];\n          for (int i = 0; i < sources.length; i++) {\n            String source = sources[i];\n            SolrCore srcCore = coreContainer.getCore(source);\n            if (srcCore == null)\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Core: \" + source + \" does not exist\");\n            sourceCores[i] = srcCore;\n          }\n        } else  {\n          readersToBeClosed = new DirectoryReader[dirNames.length];\n          dirsToBeReleased = new Directory[dirNames.length];\n          DirectoryFactory dirFactory = core.getDirectoryFactory();\n          for (int i = 0; i < dirNames.length; i++) {\n            Directory dir = dirFactory.get(dirNames[i], DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n            dirsToBeReleased[i] = dir;\n            // TODO: why doesn't this use the IR factory? what is going on here?\n            readersToBeClosed[i] = DirectoryReader.open(dir);\n          }\n        }\n\n        DirectoryReader[] readers = null;\n        if (readersToBeClosed != null)  {\n          readers = readersToBeClosed;\n        } else {\n          readers = new DirectoryReader[sourceCores.length];\n          searchers = new RefCounted[sourceCores.length];\n          for (int i = 0; i < sourceCores.length; i++) {\n            SolrCore solrCore = sourceCores[i];\n            // record the searchers so that we can decref\n            searchers[i] = solrCore.getSearcher();\n            readers[i] = searchers[i].get().getIndexReader();\n          }\n        }\n\n        UpdateRequestProcessorChain processorChain =\n                core.getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        wrappedReq = new LocalSolrQueryRequest(core, req.getParams());\n        UpdateRequestProcessor processor =\n                processorChain.createProcessor(wrappedReq, rsp);\n        processor.processMergeIndexes(new MergeIndexesCommand(readers, req));\n      } finally {\n        if (searchers != null) {\n          for (RefCounted<SolrIndexSearcher> searcher : searchers) {\n            if (searcher != null) searcher.decref();\n          }\n        }\n        if (sourceCores != null) {\n          for (SolrCore solrCore : sourceCores) {\n            if (solrCore != null) solrCore.close();\n          }\n        }\n        if (readersToBeClosed != null) IOUtils.closeWhileHandlingException(readersToBeClosed);\n        if (dirsToBeReleased != null) {\n          for (Directory dir : dirsToBeReleased) {\n            DirectoryFactory dirFactory = core.getDirectoryFactory();\n            dirFactory.release(dir);\n          }\n        }\n        if (wrappedReq != null) wrappedReq.close();\n        core.close();\n      }\n    }\n  }\n\n","sourceOld":"  protected boolean handleMergeAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    SolrParams params = req.getParams();\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.getCore(cname);\n    SolrQueryRequest wrappedReq = null;\n\n    SolrCore[] sourceCores = null;\n    RefCounted<SolrIndexSearcher>[] searchers = null;\n    // stores readers created from indexDir param values\n    DirectoryReader[] readersToBeClosed = null;\n    Directory[] dirsToBeReleased = null;\n    if (core != null) {\n      try {\n        String[] dirNames = params.getParams(CoreAdminParams.INDEX_DIR);\n        if (dirNames == null || dirNames.length == 0) {\n          String[] sources = params.getParams(\"srcCore\");\n          if (sources == null || sources.length == 0)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                \"At least one indexDir or srcCore must be specified\");\n\n          sourceCores = new SolrCore[sources.length];\n          for (int i = 0; i < sources.length; i++) {\n            String source = sources[i];\n            SolrCore srcCore = coreContainer.getCore(source);\n            if (srcCore == null)\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Core: \" + source + \" does not exist\");\n            sourceCores[i] = srcCore;\n          }\n        } else  {\n          readersToBeClosed = new DirectoryReader[dirNames.length];\n          dirsToBeReleased = new Directory[dirNames.length];\n          DirectoryFactory dirFactory = core.getDirectoryFactory();\n          for (int i = 0; i < dirNames.length; i++) {\n            Directory dir = dirFactory.get(dirNames[i], DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n            dirsToBeReleased[i] = dir;\n            // TODO: why doesn't this use the IR factory? what is going on here?\n            readersToBeClosed[i] = DirectoryReader.open(dir);\n          }\n        }\n\n        DirectoryReader[] readers = null;\n        if (readersToBeClosed != null)  {\n          readers = readersToBeClosed;\n        } else {\n          readers = new DirectoryReader[sourceCores.length];\n          searchers = new RefCounted[sourceCores.length];\n          for (int i = 0; i < sourceCores.length; i++) {\n            SolrCore solrCore = sourceCores[i];\n            // record the searchers so that we can decref\n            searchers[i] = solrCore.getSearcher();\n            readers[i] = searchers[i].get().getIndexReader();\n          }\n        }\n\n        UpdateRequestProcessorChain processorChain =\n                core.getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        wrappedReq = new LocalSolrQueryRequest(core, req.getParams());\n        UpdateRequestProcessor processor =\n                processorChain.createProcessor(wrappedReq, rsp);\n        processor.processMergeIndexes(new MergeIndexesCommand(readers, req));\n      } finally {\n        if (searchers != null) {\n          for (RefCounted<SolrIndexSearcher> searcher : searchers) {\n            if (searcher != null) searcher.decref();\n          }\n        }\n        if (sourceCores != null) {\n          for (SolrCore solrCore : sourceCores) {\n            if (solrCore != null) solrCore.close();\n          }\n        }\n        if (readersToBeClosed != null) IOUtils.closeWhileHandlingException(readersToBeClosed);\n        if (dirsToBeReleased != null) {\n          for (Directory dir : dirsToBeReleased) {\n            DirectoryFactory dirFactory = core.getDirectoryFactory();\n            dirFactory.release(dir);\n          }\n        }\n        if (wrappedReq != null) wrappedReq.close();\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n  }\n\n","bugFix":null,"bugIntro":["cf4e1373c1497f3587ee815b1bddda10850a0f37"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void handleMergeAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    SolrParams params = req.getParams();\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.getCore(cname);\n    SolrQueryRequest wrappedReq = null;\n\n    SolrCore[] sourceCores = null;\n    RefCounted<SolrIndexSearcher>[] searchers = null;\n    // stores readers created from indexDir param values\n    DirectoryReader[] readersToBeClosed = null;\n    Directory[] dirsToBeReleased = null;\n    if (core != null) {\n      try {\n        String[] dirNames = params.getParams(CoreAdminParams.INDEX_DIR);\n        if (dirNames == null || dirNames.length == 0) {\n          String[] sources = params.getParams(\"srcCore\");\n          if (sources == null || sources.length == 0)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                \"At least one indexDir or srcCore must be specified\");\n\n          sourceCores = new SolrCore[sources.length];\n          for (int i = 0; i < sources.length; i++) {\n            String source = sources[i];\n            SolrCore srcCore = coreContainer.getCore(source);\n            if (srcCore == null)\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Core: \" + source + \" does not exist\");\n            sourceCores[i] = srcCore;\n          }\n        } else  {\n          readersToBeClosed = new DirectoryReader[dirNames.length];\n          dirsToBeReleased = new Directory[dirNames.length];\n          DirectoryFactory dirFactory = core.getDirectoryFactory();\n          for (int i = 0; i < dirNames.length; i++) {\n            Directory dir = dirFactory.get(dirNames[i], DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n            dirsToBeReleased[i] = dir;\n            // TODO: why doesn't this use the IR factory? what is going on here?\n            readersToBeClosed[i] = DirectoryReader.open(dir);\n          }\n        }\n\n        DirectoryReader[] readers = null;\n        if (readersToBeClosed != null)  {\n          readers = readersToBeClosed;\n        } else {\n          readers = new DirectoryReader[sourceCores.length];\n          searchers = new RefCounted[sourceCores.length];\n          for (int i = 0; i < sourceCores.length; i++) {\n            SolrCore solrCore = sourceCores[i];\n            // record the searchers so that we can decref\n            searchers[i] = solrCore.getSearcher();\n            readers[i] = searchers[i].get().getIndexReader();\n          }\n        }\n\n        UpdateRequestProcessorChain processorChain =\n                core.getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        wrappedReq = new LocalSolrQueryRequest(core, req.getParams());\n        UpdateRequestProcessor processor =\n                processorChain.createProcessor(wrappedReq, rsp);\n        processor.processMergeIndexes(new MergeIndexesCommand(readers, req));\n      } finally {\n        if (searchers != null) {\n          for (RefCounted<SolrIndexSearcher> searcher : searchers) {\n            if (searcher != null) searcher.decref();\n          }\n        }\n        if (sourceCores != null) {\n          for (SolrCore solrCore : sourceCores) {\n            if (solrCore != null) solrCore.close();\n          }\n        }\n        if (readersToBeClosed != null) IOUtils.closeWhileHandlingException(readersToBeClosed);\n        if (dirsToBeReleased != null) {\n          for (Directory dir : dirsToBeReleased) {\n            DirectoryFactory dirFactory = core.getDirectoryFactory();\n            dirFactory.release(dir);\n          }\n        }\n        if (wrappedReq != null) wrappedReq.close();\n        core.close();\n      }\n    }\n  }\n\n","sourceOld":"  protected boolean handleMergeAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    SolrParams params = req.getParams();\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.getCore(cname);\n    SolrQueryRequest wrappedReq = null;\n\n    SolrCore[] sourceCores = null;\n    RefCounted<SolrIndexSearcher>[] searchers = null;\n    // stores readers created from indexDir param values\n    DirectoryReader[] readersToBeClosed = null;\n    Directory[] dirsToBeReleased = null;\n    if (core != null) {\n      try {\n        String[] dirNames = params.getParams(CoreAdminParams.INDEX_DIR);\n        if (dirNames == null || dirNames.length == 0) {\n          String[] sources = params.getParams(\"srcCore\");\n          if (sources == null || sources.length == 0)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                \"At least one indexDir or srcCore must be specified\");\n\n          sourceCores = new SolrCore[sources.length];\n          for (int i = 0; i < sources.length; i++) {\n            String source = sources[i];\n            SolrCore srcCore = coreContainer.getCore(source);\n            if (srcCore == null)\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Core: \" + source + \" does not exist\");\n            sourceCores[i] = srcCore;\n          }\n        } else  {\n          readersToBeClosed = new DirectoryReader[dirNames.length];\n          dirsToBeReleased = new Directory[dirNames.length];\n          DirectoryFactory dirFactory = core.getDirectoryFactory();\n          for (int i = 0; i < dirNames.length; i++) {\n            Directory dir = dirFactory.get(dirNames[i], DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n            dirsToBeReleased[i] = dir;\n            // TODO: why doesn't this use the IR factory? what is going on here?\n            readersToBeClosed[i] = DirectoryReader.open(dir);\n          }\n        }\n\n        DirectoryReader[] readers = null;\n        if (readersToBeClosed != null)  {\n          readers = readersToBeClosed;\n        } else {\n          readers = new DirectoryReader[sourceCores.length];\n          searchers = new RefCounted[sourceCores.length];\n          for (int i = 0; i < sourceCores.length; i++) {\n            SolrCore solrCore = sourceCores[i];\n            // record the searchers so that we can decref\n            searchers[i] = solrCore.getSearcher();\n            readers[i] = searchers[i].get().getIndexReader();\n          }\n        }\n\n        UpdateRequestProcessorChain processorChain =\n                core.getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        wrappedReq = new LocalSolrQueryRequest(core, req.getParams());\n        UpdateRequestProcessor processor =\n                processorChain.createProcessor(wrappedReq, rsp);\n        processor.processMergeIndexes(new MergeIndexesCommand(readers, req));\n      } finally {\n        if (searchers != null) {\n          for (RefCounted<SolrIndexSearcher> searcher : searchers) {\n            if (searcher != null) searcher.decref();\n          }\n        }\n        if (sourceCores != null) {\n          for (SolrCore solrCore : sourceCores) {\n            if (solrCore != null) solrCore.close();\n          }\n        }\n        if (readersToBeClosed != null) IOUtils.closeWhileHandlingException(readersToBeClosed);\n        if (dirsToBeReleased != null) {\n          for (Directory dir : dirsToBeReleased) {\n            DirectoryFactory dirFactory = core.getDirectoryFactory();\n            dirFactory.release(dir);\n          }\n        }\n        if (wrappedReq != null) wrappedReq.close();\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cf4e1373c1497f3587ee815b1bddda10850a0f37","date":1375195916,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void handleMergeAction(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.getCore(cname);\n    SolrQueryRequest wrappedReq = null;\n\n    List<SolrCore> sourceCores = Lists.newArrayList();\n    List<RefCounted<SolrIndexSearcher>> searchers = Lists.newArrayList();\n    // stores readers created from indexDir param values\n    List<DirectoryReader> readersToBeClosed = Lists.newArrayList();\n    List<Directory> dirsToBeReleased = Lists.newArrayList();\n    if (core != null) {\n      try {\n        String[] dirNames = params.getParams(CoreAdminParams.INDEX_DIR);\n        if (dirNames == null || dirNames.length == 0) {\n          String[] sources = params.getParams(\"srcCore\");\n          if (sources == null || sources.length == 0)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                \"At least one indexDir or srcCore must be specified\");\n\n          for (int i = 0; i < sources.length; i++) {\n            String source = sources[i];\n            SolrCore srcCore = coreContainer.getCore(source);\n            if (srcCore == null)\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Core: \" + source + \" does not exist\");\n            sourceCores.add(srcCore);\n          }\n        } else  {\n          DirectoryFactory dirFactory = core.getDirectoryFactory();\n          for (int i = 0; i < dirNames.length; i++) {\n            Directory dir = dirFactory.get(dirNames[i], DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n            dirsToBeReleased.add(dir);\n            // TODO: why doesn't this use the IR factory? what is going on here?\n            readersToBeClosed.add(DirectoryReader.open(dir));\n          }\n        }\n\n        List<DirectoryReader> readers = null;\n        if (readersToBeClosed.size() > 0)  {\n          readers = readersToBeClosed;\n        } else {\n          readers = Lists.newArrayList();\n          for (SolrCore solrCore: sourceCores) {\n            // record the searchers so that we can decref\n            RefCounted<SolrIndexSearcher> searcher = solrCore.getSearcher();\n            searchers.add(searcher);\n            readers.add(searcher.get().getIndexReader());\n          }\n        }\n\n        UpdateRequestProcessorChain processorChain =\n                core.getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        wrappedReq = new LocalSolrQueryRequest(core, req.getParams());\n        UpdateRequestProcessor processor =\n                processorChain.createProcessor(wrappedReq, rsp);\n        processor.processMergeIndexes(new MergeIndexesCommand(readers, req));\n      } catch (Exception e) {\n        // log and rethrow so that if the finally fails we don't lose the original problem\n        log.error(\"ERROR executing merge:\", e);\n        throw e;\n      } finally {\n        for (RefCounted<SolrIndexSearcher> searcher : searchers) {\n          if (searcher != null) searcher.decref();\n        }\n        for (SolrCore solrCore : sourceCores) {\n          if (solrCore != null) solrCore.close();\n        }\n        IOUtils.closeWhileHandlingException(readersToBeClosed);\n        for (Directory dir : dirsToBeReleased) {\n          DirectoryFactory dirFactory = core.getDirectoryFactory();\n          dirFactory.release(dir);\n        }\n        if (wrappedReq != null) wrappedReq.close();\n        core.close();\n      }\n    }\n  }\n\n","sourceOld":"  protected void handleMergeAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    SolrParams params = req.getParams();\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.getCore(cname);\n    SolrQueryRequest wrappedReq = null;\n\n    SolrCore[] sourceCores = null;\n    RefCounted<SolrIndexSearcher>[] searchers = null;\n    // stores readers created from indexDir param values\n    DirectoryReader[] readersToBeClosed = null;\n    Directory[] dirsToBeReleased = null;\n    if (core != null) {\n      try {\n        String[] dirNames = params.getParams(CoreAdminParams.INDEX_DIR);\n        if (dirNames == null || dirNames.length == 0) {\n          String[] sources = params.getParams(\"srcCore\");\n          if (sources == null || sources.length == 0)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                \"At least one indexDir or srcCore must be specified\");\n\n          sourceCores = new SolrCore[sources.length];\n          for (int i = 0; i < sources.length; i++) {\n            String source = sources[i];\n            SolrCore srcCore = coreContainer.getCore(source);\n            if (srcCore == null)\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Core: \" + source + \" does not exist\");\n            sourceCores[i] = srcCore;\n          }\n        } else  {\n          readersToBeClosed = new DirectoryReader[dirNames.length];\n          dirsToBeReleased = new Directory[dirNames.length];\n          DirectoryFactory dirFactory = core.getDirectoryFactory();\n          for (int i = 0; i < dirNames.length; i++) {\n            Directory dir = dirFactory.get(dirNames[i], DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n            dirsToBeReleased[i] = dir;\n            // TODO: why doesn't this use the IR factory? what is going on here?\n            readersToBeClosed[i] = DirectoryReader.open(dir);\n          }\n        }\n\n        DirectoryReader[] readers = null;\n        if (readersToBeClosed != null)  {\n          readers = readersToBeClosed;\n        } else {\n          readers = new DirectoryReader[sourceCores.length];\n          searchers = new RefCounted[sourceCores.length];\n          for (int i = 0; i < sourceCores.length; i++) {\n            SolrCore solrCore = sourceCores[i];\n            // record the searchers so that we can decref\n            searchers[i] = solrCore.getSearcher();\n            readers[i] = searchers[i].get().getIndexReader();\n          }\n        }\n\n        UpdateRequestProcessorChain processorChain =\n                core.getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        wrappedReq = new LocalSolrQueryRequest(core, req.getParams());\n        UpdateRequestProcessor processor =\n                processorChain.createProcessor(wrappedReq, rsp);\n        processor.processMergeIndexes(new MergeIndexesCommand(readers, req));\n      } finally {\n        if (searchers != null) {\n          for (RefCounted<SolrIndexSearcher> searcher : searchers) {\n            if (searcher != null) searcher.decref();\n          }\n        }\n        if (sourceCores != null) {\n          for (SolrCore solrCore : sourceCores) {\n            if (solrCore != null) solrCore.close();\n          }\n        }\n        if (readersToBeClosed != null) IOUtils.closeWhileHandlingException(readersToBeClosed);\n        if (dirsToBeReleased != null) {\n          for (Directory dir : dirsToBeReleased) {\n            DirectoryFactory dirFactory = core.getDirectoryFactory();\n            dirFactory.release(dir);\n          }\n        }\n        if (wrappedReq != null) wrappedReq.close();\n        core.close();\n      }\n    }\n  }\n\n","bugFix":["e22ffe8cc51a892ae103df018822d7873e901c2a","6e764e9a107f93be9fa3c922bc6a197b3eec387e","0a3f35d651410616f5a600589b0096c31f88f9a6","96d207426bd26fa5c1014e26d21d87603aea68b7","24230fe54121f9be9d85f2c2067536296785e421"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void handleMergeAction(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.getCore(cname);\n    SolrQueryRequest wrappedReq = null;\n\n    List<SolrCore> sourceCores = Lists.newArrayList();\n    List<RefCounted<SolrIndexSearcher>> searchers = Lists.newArrayList();\n    // stores readers created from indexDir param values\n    List<DirectoryReader> readersToBeClosed = Lists.newArrayList();\n    List<Directory> dirsToBeReleased = Lists.newArrayList();\n    if (core != null) {\n      try {\n        String[] dirNames = params.getParams(CoreAdminParams.INDEX_DIR);\n        if (dirNames == null || dirNames.length == 0) {\n          String[] sources = params.getParams(\"srcCore\");\n          if (sources == null || sources.length == 0)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                \"At least one indexDir or srcCore must be specified\");\n\n          for (int i = 0; i < sources.length; i++) {\n            String source = sources[i];\n            SolrCore srcCore = coreContainer.getCore(source);\n            if (srcCore == null)\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Core: \" + source + \" does not exist\");\n            sourceCores.add(srcCore);\n          }\n        } else  {\n          DirectoryFactory dirFactory = core.getDirectoryFactory();\n          for (int i = 0; i < dirNames.length; i++) {\n            Directory dir = dirFactory.get(dirNames[i], DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n            dirsToBeReleased.add(dir);\n            // TODO: why doesn't this use the IR factory? what is going on here?\n            readersToBeClosed.add(DirectoryReader.open(dir));\n          }\n        }\n\n        List<DirectoryReader> readers = null;\n        if (readersToBeClosed.size() > 0)  {\n          readers = readersToBeClosed;\n        } else {\n          readers = Lists.newArrayList();\n          for (SolrCore solrCore: sourceCores) {\n            // record the searchers so that we can decref\n            RefCounted<SolrIndexSearcher> searcher = solrCore.getSearcher();\n            searchers.add(searcher);\n            readers.add(searcher.get().getIndexReader());\n          }\n        }\n\n        UpdateRequestProcessorChain processorChain =\n                core.getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        wrappedReq = new LocalSolrQueryRequest(core, req.getParams());\n        UpdateRequestProcessor processor =\n                processorChain.createProcessor(wrappedReq, rsp);\n        processor.processMergeIndexes(new MergeIndexesCommand(readers, req));\n      } catch (Exception e) {\n        // log and rethrow so that if the finally fails we don't lose the original problem\n        log.error(\"ERROR executing merge:\", e);\n        throw e;\n      } finally {\n        for (RefCounted<SolrIndexSearcher> searcher : searchers) {\n          if (searcher != null) searcher.decref();\n        }\n        for (SolrCore solrCore : sourceCores) {\n          if (solrCore != null) solrCore.close();\n        }\n        IOUtils.closeWhileHandlingException(readersToBeClosed);\n        for (Directory dir : dirsToBeReleased) {\n          DirectoryFactory dirFactory = core.getDirectoryFactory();\n          dirFactory.release(dir);\n        }\n        if (wrappedReq != null) wrappedReq.close();\n        core.close();\n      }\n    }\n  }\n\n","sourceOld":"  protected void handleMergeAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    SolrParams params = req.getParams();\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.getCore(cname);\n    SolrQueryRequest wrappedReq = null;\n\n    SolrCore[] sourceCores = null;\n    RefCounted<SolrIndexSearcher>[] searchers = null;\n    // stores readers created from indexDir param values\n    DirectoryReader[] readersToBeClosed = null;\n    Directory[] dirsToBeReleased = null;\n    if (core != null) {\n      try {\n        String[] dirNames = params.getParams(CoreAdminParams.INDEX_DIR);\n        if (dirNames == null || dirNames.length == 0) {\n          String[] sources = params.getParams(\"srcCore\");\n          if (sources == null || sources.length == 0)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                \"At least one indexDir or srcCore must be specified\");\n\n          sourceCores = new SolrCore[sources.length];\n          for (int i = 0; i < sources.length; i++) {\n            String source = sources[i];\n            SolrCore srcCore = coreContainer.getCore(source);\n            if (srcCore == null)\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Core: \" + source + \" does not exist\");\n            sourceCores[i] = srcCore;\n          }\n        } else  {\n          readersToBeClosed = new DirectoryReader[dirNames.length];\n          dirsToBeReleased = new Directory[dirNames.length];\n          DirectoryFactory dirFactory = core.getDirectoryFactory();\n          for (int i = 0; i < dirNames.length; i++) {\n            Directory dir = dirFactory.get(dirNames[i], DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n            dirsToBeReleased[i] = dir;\n            // TODO: why doesn't this use the IR factory? what is going on here?\n            readersToBeClosed[i] = DirectoryReader.open(dir);\n          }\n        }\n\n        DirectoryReader[] readers = null;\n        if (readersToBeClosed != null)  {\n          readers = readersToBeClosed;\n        } else {\n          readers = new DirectoryReader[sourceCores.length];\n          searchers = new RefCounted[sourceCores.length];\n          for (int i = 0; i < sourceCores.length; i++) {\n            SolrCore solrCore = sourceCores[i];\n            // record the searchers so that we can decref\n            searchers[i] = solrCore.getSearcher();\n            readers[i] = searchers[i].get().getIndexReader();\n          }\n        }\n\n        UpdateRequestProcessorChain processorChain =\n                core.getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        wrappedReq = new LocalSolrQueryRequest(core, req.getParams());\n        UpdateRequestProcessor processor =\n                processorChain.createProcessor(wrappedReq, rsp);\n        processor.processMergeIndexes(new MergeIndexesCommand(readers, req));\n      } finally {\n        if (searchers != null) {\n          for (RefCounted<SolrIndexSearcher> searcher : searchers) {\n            if (searcher != null) searcher.decref();\n          }\n        }\n        if (sourceCores != null) {\n          for (SolrCore solrCore : sourceCores) {\n            if (solrCore != null) solrCore.close();\n          }\n        }\n        if (readersToBeClosed != null) IOUtils.closeWhileHandlingException(readersToBeClosed);\n        if (dirsToBeReleased != null) {\n          for (Directory dir : dirsToBeReleased) {\n            DirectoryFactory dirFactory = core.getDirectoryFactory();\n            dirFactory.release(dir);\n          }\n        }\n        if (wrappedReq != null) wrappedReq.close();\n        core.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa0876236f0bd8be403747120d248bdd42b75a96","date":1451844229,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleMergeAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  protected void handleMergeAction(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    String cname = params.required().get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.getCore(cname);\n    SolrQueryRequest wrappedReq = null;\n\n    List<SolrCore> sourceCores = Lists.newArrayList();\n    List<RefCounted<SolrIndexSearcher>> searchers = Lists.newArrayList();\n    // stores readers created from indexDir param values\n    List<DirectoryReader> readersToBeClosed = Lists.newArrayList();\n    List<Directory> dirsToBeReleased = Lists.newArrayList();\n    if (core != null) {\n      try {\n        String[] dirNames = params.getParams(CoreAdminParams.INDEX_DIR);\n        if (dirNames == null || dirNames.length == 0) {\n          String[] sources = params.getParams(\"srcCore\");\n          if (sources == null || sources.length == 0)\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                \"At least one indexDir or srcCore must be specified\");\n\n          for (int i = 0; i < sources.length; i++) {\n            String source = sources[i];\n            SolrCore srcCore = coreContainer.getCore(source);\n            if (srcCore == null)\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"Core: \" + source + \" does not exist\");\n            sourceCores.add(srcCore);\n          }\n        } else  {\n          DirectoryFactory dirFactory = core.getDirectoryFactory();\n          for (int i = 0; i < dirNames.length; i++) {\n            Directory dir = dirFactory.get(dirNames[i], DirContext.DEFAULT, core.getSolrConfig().indexConfig.lockType);\n            dirsToBeReleased.add(dir);\n            // TODO: why doesn't this use the IR factory? what is going on here?\n            readersToBeClosed.add(DirectoryReader.open(dir));\n          }\n        }\n\n        List<DirectoryReader> readers = null;\n        if (readersToBeClosed.size() > 0)  {\n          readers = readersToBeClosed;\n        } else {\n          readers = Lists.newArrayList();\n          for (SolrCore solrCore: sourceCores) {\n            // record the searchers so that we can decref\n            RefCounted<SolrIndexSearcher> searcher = solrCore.getSearcher();\n            searchers.add(searcher);\n            readers.add(searcher.get().getIndexReader());\n          }\n        }\n\n        UpdateRequestProcessorChain processorChain =\n                core.getUpdateProcessingChain(params.get(UpdateParams.UPDATE_CHAIN));\n        wrappedReq = new LocalSolrQueryRequest(core, req.getParams());\n        UpdateRequestProcessor processor =\n                processorChain.createProcessor(wrappedReq, rsp);\n        processor.processMergeIndexes(new MergeIndexesCommand(readers, req));\n      } catch (Exception e) {\n        // log and rethrow so that if the finally fails we don't lose the original problem\n        log.error(\"ERROR executing merge:\", e);\n        throw e;\n      } finally {\n        for (RefCounted<SolrIndexSearcher> searcher : searchers) {\n          if (searcher != null) searcher.decref();\n        }\n        for (SolrCore solrCore : sourceCores) {\n          if (solrCore != null) solrCore.close();\n        }\n        IOUtils.closeWhileHandlingException(readersToBeClosed);\n        for (Directory dir : dirsToBeReleased) {\n          DirectoryFactory dirFactory = core.getDirectoryFactory();\n          dirFactory.release(dir);\n        }\n        if (wrappedReq != null) wrappedReq.close();\n        core.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24230fe54121f9be9d85f2c2067536296785e421":["e22ffe8cc51a892ae103df018822d7873e901c2a"],"38cf2ff411b3f7342febd22163907bafb5342a6f":["24230fe54121f9be9d85f2c2067536296785e421"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cf4e1373c1497f3587ee815b1bddda10850a0f37"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["7b91922b55d15444d554721b352861d028eb8278","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["4a5469a71486c4c1e313c7fcb08188d7111195c2","1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"],"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674":["4a5469a71486c4c1e313c7fcb08188d7111195c2"],"96d207426bd26fa5c1014e26d21d87603aea68b7":["f3a7218407032c06bc1d6c57edf979e7788f5def"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["7b91922b55d15444d554721b352861d028eb8278"],"fa0876236f0bd8be403747120d248bdd42b75a96":["cf4e1373c1497f3587ee815b1bddda10850a0f37"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["f3a7218407032c06bc1d6c57edf979e7788f5def","96d207426bd26fa5c1014e26d21d87603aea68b7"],"7b91922b55d15444d554721b352861d028eb8278":["38cf2ff411b3f7342febd22163907bafb5342a6f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cf4e1373c1497f3587ee815b1bddda10850a0f37":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"4a5469a71486c4c1e313c7fcb08188d7111195c2":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["7b91922b55d15444d554721b352861d028eb8278","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"],"e22ffe8cc51a892ae103df018822d7873e901c2a":["c26f00b574427b55127e869b935845554afde1fa"],"f3a7218407032c06bc1d6c57edf979e7788f5def":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa0876236f0bd8be403747120d248bdd42b75a96"]},"commit2Childs":{"24230fe54121f9be9d85f2c2067536296785e421":["38cf2ff411b3f7342febd22163907bafb5342a6f"],"38cf2ff411b3f7342febd22163907bafb5342a6f":["7b91922b55d15444d554721b352861d028eb8278"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"c26f00b574427b55127e869b935845554afde1fa":["e22ffe8cc51a892ae103df018822d7873e901c2a"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674":["37a0f60745e53927c4c876cfe5b5a58170f0646c","8917bfede3b4ca30f4305c1e391e9218959cd723","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"96d207426bd26fa5c1014e26d21d87603aea68b7":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"fa0876236f0bd8be403747120d248bdd42b75a96":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["4a5469a71486c4c1e313c7fcb08188d7111195c2"],"7b91922b55d15444d554721b352861d028eb8278":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"cf4e1373c1497f3587ee815b1bddda10850a0f37":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","fa0876236f0bd8be403747120d248bdd42b75a96"],"4a5469a71486c4c1e313c7fcb08188d7111195c2":["8917bfede3b4ca30f4305c1e391e9218959cd723","1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","f3a7218407032c06bc1d6c57edf979e7788f5def"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cf4e1373c1497f3587ee815b1bddda10850a0f37"],"e22ffe8cc51a892ae103df018822d7873e901c2a":["24230fe54121f9be9d85f2c2067536296785e421"],"f3a7218407032c06bc1d6c57edf979e7788f5def":["96d207426bd26fa5c1014e26d21d87603aea68b7","5cab9a86bd67202d20b6adc463008c8e982b070a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","8917bfede3b4ca30f4305c1e391e9218959cd723","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}