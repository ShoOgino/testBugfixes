{"path":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockReaderWrapper#read(char[],int,int).mjava","commits":[{"id":"c46b5eed1428b2cecc6851b67142702486279f89","date":1332284557,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockReaderWrapper#read(char[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int read(char[] cbuf, int off, int len) throws IOException {\n    if (throwExcNext || (excAtChar != -1 && readSoFar >= excAtChar)) {\n      throw new RuntimeException(\"fake exception now!\");\n    }\n    final int read;\n    final int realLen;\n    if (len == 1) {\n      realLen = 1;\n    } else {\n      // Spoon-feed: intentionally maybe return less than\n      // the consumer asked for\n      realLen = _TestUtil.nextInt(random, 1, len);\n    }\n    if (excAtChar != -1) {\n      final int left = excAtChar - readSoFar;\n      assert left != 0;\n      read = in.read(cbuf, off, Math.min(realLen, left));\n      assert read != -1;\n      readSoFar += read;\n    } else {\n      read = in.read(cbuf, off, realLen);\n    }\n    return read;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockReaderWrapper#read(char[],int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockReaderWrapper#read(char[],int,int).mjava","sourceNew":"  @Override\n  public int read(char[] cbuf, int off, int len) throws IOException {\n    if (throwExcNext || (excAtChar != -1 && readSoFar >= excAtChar)) {\n      throw new RuntimeException(\"fake exception now!\");\n    }\n    final int read;\n    final int realLen;\n    if (len == 1) {\n      realLen = 1;\n    } else {\n      // Spoon-feed: intentionally maybe return less than\n      // the consumer asked for\n      realLen = TestUtil.nextInt(random, 1, len);\n    }\n    if (excAtChar != -1) {\n      final int left = excAtChar - readSoFar;\n      assert left != 0;\n      read = in.read(cbuf, off, Math.min(realLen, left));\n      assert read != -1;\n      readSoFar += read;\n    } else {\n      read = in.read(cbuf, off, realLen);\n    }\n    return read;\n  }\n\n","sourceOld":"  @Override\n  public int read(char[] cbuf, int off, int len) throws IOException {\n    if (throwExcNext || (excAtChar != -1 && readSoFar >= excAtChar)) {\n      throw new RuntimeException(\"fake exception now!\");\n    }\n    final int read;\n    final int realLen;\n    if (len == 1) {\n      realLen = 1;\n    } else {\n      // Spoon-feed: intentionally maybe return less than\n      // the consumer asked for\n      realLen = _TestUtil.nextInt(random, 1, len);\n    }\n    if (excAtChar != -1) {\n      final int left = excAtChar - readSoFar;\n      assert left != 0;\n      read = in.read(cbuf, off, Math.min(realLen, left));\n      assert read != -1;\n      readSoFar += read;\n    } else {\n      read = in.read(cbuf, off, realLen);\n    }\n    return read;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6613659748fe4411a7dcf85266e55db1f95f7315":["c46b5eed1428b2cecc6851b67142702486279f89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c46b5eed1428b2cecc6851b67142702486279f89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6613659748fe4411a7dcf85266e55db1f95f7315"]},"commit2Childs":{"6613659748fe4411a7dcf85266e55db1f95f7315":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c46b5eed1428b2cecc6851b67142702486279f89"],"c46b5eed1428b2cecc6851b67142702486279f89":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}