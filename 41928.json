{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.ClientSnitchCtx#getZkJson(String).mjava","commits":[{"id":"86fff6c123a5a1d38adb665dd045347219798da9","date":1493623721,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.ClientSnitchCtx#getZkJson(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ClientDataProvider.ClientSnitchCtx#getZkJson(String).mjava","sourceNew":"    public Map getZkJson(String path) {\n      try {\n        byte[] data = zkClientClusterStateProvider.getZkStateReader().getZkClient().getData(path, null, new Stat(), true);\n        if (data == null) return null;\n        return (Map) Utils.fromJSON(data);\n      } catch (Exception e) {\n        log.warn(\"Unable to read from ZK path : \" + path, e);\n        return null;\n      }\n    }\n\n","sourceOld":"    public Map getZkJson(String path) {\n      try {\n        byte[] data = zkClientClusterStateProvider.getZkStateReader().getZkClient().getData(path, null, new Stat(), true);\n        if (data == null) return null;\n        return (Map) Utils.fromJSON(data);\n      } catch (Exception e) {\n        log.warn(\"Unable to read from ZK path : \" + path, e);\n        return null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.ClientSnitchCtx#getZkJson(String).mjava","pathOld":"/dev/null","sourceNew":"    public Map getZkJson(String path) {\n      try {\n        byte[] data = zkClientClusterStateProvider.getZkStateReader().getZkClient().getData(path, null, new Stat(), true);\n        if (data == null) return null;\n        return (Map) Utils.fromJSON(data);\n      } catch (Exception e) {\n        log.warn(\"Unable to read from ZK path : \" + path, e);\n        return null;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4328dc3f7309b4c82d12f9e9420a487a1b9945dd","date":1496650286,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.ClientSnitchCtx#getZkJson(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.ClientSnitchCtx#getZkJson(String).mjava","sourceNew":"    @Override\n    public Map getZkJson(String path) throws KeeperException, InterruptedException {\n      return Utils.getJson(zkClientClusterStateProvider.getZkStateReader().getZkClient(), path, true);\n    }\n\n","sourceOld":"    public Map getZkJson(String path) {\n      try {\n        byte[] data = zkClientClusterStateProvider.getZkStateReader().getZkClient().getData(path, null, new Stat(), true);\n        if (data == null) return null;\n        return (Map) Utils.fromJSON(data);\n      } catch (Exception e) {\n        log.warn(\"Unable to read from ZK path : \" + path, e);\n        return null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.ClientSnitchCtx#getZkJson(String).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Map getZkJson(String path) throws KeeperException, InterruptedException {\n      return Utils.getJson(zkClientClusterStateProvider.getZkStateReader().getZkClient(), path, true);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.ClientSnitchCtx#getZkJson(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.ClientSnitchCtx#getZkJson(String).mjava","sourceNew":"    @Override\n    public Map getZkJson(String path) throws KeeperException, InterruptedException {\n      return Utils.getJson(zkClientClusterStateProvider.getZkStateReader().getZkClient(), path, true);\n    }\n\n","sourceOld":"    public Map getZkJson(String path) {\n      try {\n        byte[] data = zkClientClusterStateProvider.getZkStateReader().getZkClient().getData(path, null, new Stat(), true);\n        if (data == null) return null;\n        return (Map) Utils.fromJSON(data);\n      } catch (Exception e) {\n        log.warn(\"Unable to read from ZK path : \" + path, e);\n        return null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.ClientSnitchCtx#getZkJson(String).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Map getZkJson(String path) throws KeeperException, InterruptedException {\n      return Utils.getJson(zkClientClusterStateProvider.getZkStateReader().getZkClient(), path, true);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.ClientSnitchCtx#getZkJson(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.ClientSnitchCtx#getZkJson(String).mjava","sourceNew":"    @Override\n    public Map getZkJson(String path) throws KeeperException, InterruptedException {\n      return Utils.getJson(zkClientClusterStateProvider.getZkStateReader().getZkClient(), path, true);\n    }\n\n","sourceOld":"    @Override\n    public Map getZkJson(String path) throws KeeperException, InterruptedException {\n      return Utils.getJson(zkClientClusterStateProvider.getZkStateReader().getZkClient(), path, true);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["86fff6c123a5a1d38adb665dd045347219798da9","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4328dc3f7309b4c82d12f9e9420a487a1b9945dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a513b6a92751e54c76fb5447948c9e7d437163a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["28288370235ed02234a64753cdbf0c6ec096304a"],"86fff6c123a5a1d38adb665dd045347219798da9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"4328dc3f7309b4c82d12f9e9420a487a1b9945dd":["a513b6a92751e54c76fb5447948c9e7d437163a7"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7","86fff6c123a5a1d38adb665dd045347219798da9","28288370235ed02234a64753cdbf0c6ec096304a"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["4328dc3f7309b4c82d12f9e9420a487a1b9945dd"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"86fff6c123a5a1d38adb665dd045347219798da9":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"28288370235ed02234a64753cdbf0c6ec096304a":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"4328dc3f7309b4c82d12f9e9420a487a1b9945dd":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}