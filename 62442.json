{"path":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#walkFromHere(File,CoreContainer).mjava","commits":[{"id":"9818efa55563ddfecdecafbdd43f4bee9f252e7d","date":1364853872,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#walkFromHere(File,CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrProperties#walkFromHere(File,CoreContainer).mjava","sourceNew":"  // Basic recursive tree walking, looking for \"core.properties\" files. Once one is found, we'll stop going any\n  // deeper in the tree.\n  //\n  // @param file - the directory we're to either read the properties file from or recurse into.\n  private void walkFromHere(File file, CoreContainer container) throws IOException {\n    log.info(\"Looking for cores in \" + file.getAbsolutePath());\n    for (File childFile : file.listFiles()) {\n      // This is a little tricky, we are asking if core.properties exists in a child directory of the directory passed\n      // in. In other words we're looking for core.properties in the grandchild directories of the parameter passed\n      // in. That allows us to gracefully top recursing deep but continue looking wide.\n      File propFile = new File(childFile, CORE_PROP_FILE);\n      if (propFile.exists()) { // Stop looking after processing this file!\n        log.info(\"Discovered properties file {}, adding to cores\", propFile.getAbsolutePath());\n        Properties propsOrig = new Properties();\n        InputStream is = new FileInputStream(propFile);\n        try {\n          propsOrig.load(is);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n\n        Properties props = new Properties();\n        for (String prop : propsOrig.stringPropertyNames()) {\n          props.put(prop, PropertiesUtil.substituteProperty(propsOrig.getProperty(prop), null));\n        }\n\n        if (props.getProperty(CoreDescriptor.CORE_INSTDIR) == null) {\n          props.setProperty(CoreDescriptor.CORE_INSTDIR, childFile.getPath());\n        }\n\n        if (props.getProperty(CoreDescriptor.CORE_NAME) == null) {\n          // Should default to this directory\n          props.setProperty(CoreDescriptor.CORE_NAME, childFile.getName());\n        }\n        CoreDescriptor desc = new CoreDescriptor(container, props);\n        CoreDescriptorPlus plus = new CoreDescriptorPlus(propFile.getAbsolutePath(), desc, propsOrig);\n        coreDescriptorPlusMap.put(desc.getName(), plus);\n        continue; // Go on to the sibling directory\n      }\n      if (childFile.isDirectory()) {\n        walkFromHere(childFile, container);\n      }\n    }\n  }\n\n","sourceOld":"  // Basic recursive tree walking, looking for \"core.properties\" files. Once one is found, we'll stop going any\n  // deeper in the tree.\n  //\n  // @param file - the directory we're to either read the properties file from or recurse into.\n  private void walkFromHere(File file, CoreContainer container) throws IOException {\n    log.info(\"Looking for cores in \" + file.getAbsolutePath());\n    for (File childFile : file.listFiles()) {\n      // This is a little tricky, we are asking if core.properties exists in a child directory of the directory passed\n      // in. In other words we're looking for core.properties in the grandchild directories of the parameter passed\n      // in. That allows us to gracefully top recursing deep but continue looking wide.\n      File propFile = new File(childFile, CORE_PROP_FILE);\n      if (propFile.exists()) { // Stop looking after processing this file!\n        log.info(\"Discovered properties file {}, adding to cores\", propFile.getAbsolutePath());\n        Properties propsOrig = new Properties();\n        InputStream is = new FileInputStream(propFile);\n        try {\n          propsOrig.load(is);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n\n        Properties props = new Properties();\n        for (String prop : propsOrig.stringPropertyNames()) {\n          props.put(prop, PropertiesUtil.substituteProperty(propsOrig.getProperty(prop), null));\n        }\n\n        if (props.getProperty(CoreDescriptor.CORE_INSTDIR) == null) {\n          props.setProperty(CoreDescriptor.CORE_INSTDIR, childFile.getPath());\n        }\n\n        if (props.getProperty(CoreDescriptor.CORE_NAME) == null) {\n          // Should default to this directory\n          props.setProperty(CoreDescriptor.CORE_NAME, childFile.getName());\n        }\n        CoreDescriptor desc = new CoreDescriptor(container, props);\n        CoreDescriptorPlus plus = new CoreDescriptorPlus(propFile.getAbsolutePath(), desc, propsOrig);\n        coreDescriptorPlusMap.put(desc.getName(), plus);\n        continue; // Go on to the sibling directory\n      }\n      if (childFile.isDirectory()) {\n        walkFromHere(childFile, container);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0cf46558b3f7708ed3a21e174b9e11cd30e26be","date":1365551184,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#walkFromHere(File,CoreContainer,Map[String,CoreDescriptorPlus]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#walkFromHere(File,CoreContainer).mjava","sourceNew":"  // Basic recursive tree walking, looking for \"core.properties\" files. Once one is found, we'll stop going any\n  // deeper in the tree.\n  //\n  // @param file - the directory we're to either read the properties file from or recurse into.\n  private void walkFromHere(File file, CoreContainer container, Map<String, CoreDescriptorPlus> checkMap) throws IOException {\n    log.info(\"Looking for cores in \" + file.getAbsolutePath());\n    for (File childFile : file.listFiles()) {\n      // This is a little tricky, we are asking if core.properties exists in a child directory of the directory passed\n      // in. In other words we're looking for core.properties in the grandchild directories of the parameter passed\n      // in. That allows us to gracefully top recursing deep but continue looking wide.\n      File propFile = new File(childFile, CORE_PROP_FILE);\n      if (propFile.exists()) { // Stop looking after processing this file!\n        log.info(\"Discovered properties file {}, adding to cores\", propFile.getAbsolutePath());\n        Properties propsOrig = new Properties();\n        InputStream is = new FileInputStream(propFile);\n        try {\n          propsOrig.load(is);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n\n        Properties props = new Properties();\n        for (String prop : propsOrig.stringPropertyNames()) {\n          props.put(prop, PropertiesUtil.substituteProperty(propsOrig.getProperty(prop), null));\n        }\n\n        if (props.getProperty(CoreDescriptor.CORE_INSTDIR) == null) {\n          props.setProperty(CoreDescriptor.CORE_INSTDIR, childFile.getPath());\n        }\n\n        if (props.getProperty(CoreDescriptor.CORE_NAME) == null) {\n          // Should default to this directory\n          props.setProperty(CoreDescriptor.CORE_NAME, childFile.getName());\n        }\n        CoreDescriptor desc = new CoreDescriptor(container, props);\n        CoreDescriptorPlus plus = new CoreDescriptorPlus(propFile.getAbsolutePath(), desc, propsOrig);\n        CoreDescriptorPlus check = coreDescriptorPlusMap.get(desc.getName());\n        if (check == null) { // It's bad to have two cores with the same name\n          coreDescriptorPlusMap.put(desc.getName(), plus);\n        } else {\n          String msg = String.format(Locale.ROOT, \"More than one core defined for core named %s, paths are '%s' and '%s' \",\n              desc.getName(), check.getFilePath(), plus.getFilePath());\n          log.error(msg);\n          badCores.put(desc.getName(), msg);\n        }\n        check = coreDescriptorPlusMap.get(plus.getCoreDescriptor().getDataDir());\n        if (check == null) {\n          coreDescriptorPlusMap.put(desc.getName(), plus);\n        } else {\n          String msg = String.format(Locale.ROOT, \"More than one core points to data dir %s. They are in %s and %s\",\n              plus.getCoreDescriptor().getDataDir(), plus.getFilePath(), check.getFilePath());\n          log.error(msg);\n          badCores.put(plus.getCoreDescriptor().getName(), msg);\n        }\n\n        continue; // Go on to the sibling directory\n      }\n      if (childFile.isDirectory()) {\n        walkFromHere(childFile, container, checkMap);\n      }\n    }\n  }\n\n","sourceOld":"  // Basic recursive tree walking, looking for \"core.properties\" files. Once one is found, we'll stop going any\n  // deeper in the tree.\n  //\n  // @param file - the directory we're to either read the properties file from or recurse into.\n  private void walkFromHere(File file, CoreContainer container) throws IOException {\n    log.info(\"Looking for cores in \" + file.getAbsolutePath());\n    for (File childFile : file.listFiles()) {\n      // This is a little tricky, we are asking if core.properties exists in a child directory of the directory passed\n      // in. In other words we're looking for core.properties in the grandchild directories of the parameter passed\n      // in. That allows us to gracefully top recursing deep but continue looking wide.\n      File propFile = new File(childFile, CORE_PROP_FILE);\n      if (propFile.exists()) { // Stop looking after processing this file!\n        log.info(\"Discovered properties file {}, adding to cores\", propFile.getAbsolutePath());\n        Properties propsOrig = new Properties();\n        InputStream is = new FileInputStream(propFile);\n        try {\n          propsOrig.load(is);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n\n        Properties props = new Properties();\n        for (String prop : propsOrig.stringPropertyNames()) {\n          props.put(prop, PropertiesUtil.substituteProperty(propsOrig.getProperty(prop), null));\n        }\n\n        if (props.getProperty(CoreDescriptor.CORE_INSTDIR) == null) {\n          props.setProperty(CoreDescriptor.CORE_INSTDIR, childFile.getPath());\n        }\n\n        if (props.getProperty(CoreDescriptor.CORE_NAME) == null) {\n          // Should default to this directory\n          props.setProperty(CoreDescriptor.CORE_NAME, childFile.getName());\n        }\n        CoreDescriptor desc = new CoreDescriptor(container, props);\n        CoreDescriptorPlus plus = new CoreDescriptorPlus(propFile.getAbsolutePath(), desc, propsOrig);\n        coreDescriptorPlusMap.put(desc.getName(), plus);\n        continue; // Go on to the sibling directory\n      }\n      if (childFile.isDirectory()) {\n        walkFromHere(childFile, container);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0cf46558b3f7708ed3a21e174b9e11cd30e26be":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"],"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"]},"commit2Childs":{"a0cf46558b3f7708ed3a21e174b9e11cd30e26be":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}