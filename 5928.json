{"path":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked#decode(byte[],int,long[],int,int).mjava","commits":[{"id":"58d488e3fd72dfc95fa76fcb24f58e90c343323c","date":1346235723,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked#decode(byte[],int,long[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void decode(byte[] blocks, int blocksOffset, long[] values,\n      int valuesOffset, int iterations) {\n    int blockBitsLeft = 8;\n    int valueBitsLeft = bitsPerValue;\n    long nextValue = 0;\n    for (int end = valuesOffset + iterations * valueCount; valuesOffset < end; ) {\n      if (valueBitsLeft > blockBitsLeft) {\n        nextValue |= (blocks[blocksOffset++] & ((1L << blockBitsLeft) - 1)) << (valueBitsLeft - blockBitsLeft);\n        valueBitsLeft -= blockBitsLeft;\n        blockBitsLeft = 8;\n      } else {\n        nextValue |= ((blocks[blocksOffset] & 0xFFL) >>> (blockBitsLeft - valueBitsLeft)) & ((1L << valueBitsLeft) - 1);\n        values[valuesOffset++] = nextValue;\n        nextValue = 0;\n        blockBitsLeft -= valueBitsLeft;\n        valueBitsLeft = bitsPerValue;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked#decode(byte[],int,long[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void decode(byte[] blocks, int blocksOffset, long[] values,\n      int valuesOffset, int iterations) {\n    int blockBitsLeft = 8;\n    int valueBitsLeft = bitsPerValue;\n    long nextValue = 0;\n    for (int end = valuesOffset + iterations * valueCount; valuesOffset < end; ) {\n      if (valueBitsLeft > blockBitsLeft) {\n        nextValue |= (blocks[blocksOffset++] & ((1L << blockBitsLeft) - 1)) << (valueBitsLeft - blockBitsLeft);\n        valueBitsLeft -= blockBitsLeft;\n        blockBitsLeft = 8;\n      } else {\n        nextValue |= ((blocks[blocksOffset] & 0xFFL) >>> (blockBitsLeft - valueBitsLeft)) & ((1L << valueBitsLeft) - 1);\n        values[valuesOffset++] = nextValue;\n        nextValue = 0;\n        blockBitsLeft -= valueBitsLeft;\n        valueBitsLeft = bitsPerValue;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e29d4d91327929d477b701d3ef2f5b3457d26ec5","date":1359465689,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked#decode(byte[],int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked#decode(byte[],int,long[],int,int).mjava","sourceNew":"  @Override\n  public void decode(byte[] blocks, int blocksOffset, long[] values,\n      int valuesOffset, int iterations) {\n    long nextValue = 0L;\n    int bitsLeft = bitsPerValue;\n    for (int i = 0; i < iterations * byteBlockCount; ++i) {\n      final long bytes = blocks[blocksOffset++] & 0xFFL;\n      if (bitsLeft > 8) {\n        // just buffer\n        bitsLeft -= 8;\n        nextValue |= bytes << bitsLeft;\n      } else {\n        // flush\n        int bits = 8 - bitsLeft;\n        values[valuesOffset++] = nextValue | (bytes >>> bits);\n        while (bits >= bitsPerValue) {\n          bits -= bitsPerValue;\n          values[valuesOffset++] = (bytes >>> bits) & mask;\n        }\n        // then buffer\n        bitsLeft = bitsPerValue - bits;\n        nextValue = (bytes & ((1L << bits) - 1)) << bitsLeft;\n      }\n    }\n    assert bitsLeft == bitsPerValue;\n  }\n\n","sourceOld":"  @Override\n  public void decode(byte[] blocks, int blocksOffset, long[] values,\n      int valuesOffset, int iterations) {\n    int blockBitsLeft = 8;\n    int valueBitsLeft = bitsPerValue;\n    long nextValue = 0;\n    for (int end = valuesOffset + iterations * valueCount; valuesOffset < end; ) {\n      if (valueBitsLeft > blockBitsLeft) {\n        nextValue |= (blocks[blocksOffset++] & ((1L << blockBitsLeft) - 1)) << (valueBitsLeft - blockBitsLeft);\n        valueBitsLeft -= blockBitsLeft;\n        blockBitsLeft = 8;\n      } else {\n        nextValue |= ((blocks[blocksOffset] & 0xFFL) >>> (blockBitsLeft - valueBitsLeft)) & ((1L << valueBitsLeft) - 1);\n        values[valuesOffset++] = nextValue;\n        nextValue = 0;\n        blockBitsLeft -= valueBitsLeft;\n        valueBitsLeft = bitsPerValue;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de522d9303bd67c8473a269a1319125d1f3700e0","date":1359477856,"type":3,"author":"Adrien Grand","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked#decode(byte[],int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked#decode(byte[],int,long[],int,int).mjava","sourceNew":"  @Override\n  public void decode(byte[] blocks, int blocksOffset, long[] values,\n      int valuesOffset, int iterations) {\n    long nextValue = 0L;\n    int bitsLeft = bitsPerValue;\n    for (int i = 0; i < iterations * byteBlockCount; ++i) {\n      final long bytes = blocks[blocksOffset++] & 0xFFL;\n      if (bitsLeft > 8) {\n        // just buffer\n        bitsLeft -= 8;\n        nextValue |= bytes << bitsLeft;\n      } else {\n        // flush\n        int bits = 8 - bitsLeft;\n        values[valuesOffset++] = nextValue | (bytes >>> bits);\n        while (bits >= bitsPerValue) {\n          bits -= bitsPerValue;\n          values[valuesOffset++] = (bytes >>> bits) & mask;\n        }\n        // then buffer\n        bitsLeft = bitsPerValue - bits;\n        nextValue = (bytes & ((1L << bits) - 1)) << bitsLeft;\n      }\n    }\n    assert bitsLeft == bitsPerValue;\n  }\n\n","sourceOld":"  @Override\n  public void decode(byte[] blocks, int blocksOffset, long[] values,\n      int valuesOffset, int iterations) {\n    int blockBitsLeft = 8;\n    int valueBitsLeft = bitsPerValue;\n    long nextValue = 0;\n    for (int end = valuesOffset + iterations * valueCount; valuesOffset < end; ) {\n      if (valueBitsLeft > blockBitsLeft) {\n        nextValue |= (blocks[blocksOffset++] & ((1L << blockBitsLeft) - 1)) << (valueBitsLeft - blockBitsLeft);\n        valueBitsLeft -= blockBitsLeft;\n        blockBitsLeft = 8;\n      } else {\n        nextValue |= ((blocks[blocksOffset] & 0xFFL) >>> (blockBitsLeft - valueBitsLeft)) & ((1L << valueBitsLeft) - 1);\n        values[valuesOffset++] = nextValue;\n        nextValue = 0;\n        blockBitsLeft -= valueBitsLeft;\n        valueBitsLeft = bitsPerValue;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e29d4d91327929d477b701d3ef2f5b3457d26ec5":["58d488e3fd72dfc95fa76fcb24f58e90c343323c"],"58d488e3fd72dfc95fa76fcb24f58e90c343323c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05a14b2611ead08655a2b2bdc61632eb31316e57":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","58d488e3fd72dfc95fa76fcb24f58e90c343323c"],"de522d9303bd67c8473a269a1319125d1f3700e0":["58d488e3fd72dfc95fa76fcb24f58e90c343323c","e29d4d91327929d477b701d3ef2f5b3457d26ec5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e29d4d91327929d477b701d3ef2f5b3457d26ec5"]},"commit2Childs":{"e29d4d91327929d477b701d3ef2f5b3457d26ec5":["de522d9303bd67c8473a269a1319125d1f3700e0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"58d488e3fd72dfc95fa76fcb24f58e90c343323c":["e29d4d91327929d477b701d3ef2f5b3457d26ec5","05a14b2611ead08655a2b2bdc61632eb31316e57","de522d9303bd67c8473a269a1319125d1f3700e0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58d488e3fd72dfc95fa76fcb24f58e90c343323c","05a14b2611ead08655a2b2bdc61632eb31316e57"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"de522d9303bd67c8473a269a1319125d1f3700e0":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["05a14b2611ead08655a2b2bdc61632eb31316e57","de522d9303bd67c8473a269a1319125d1f3700e0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}