{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetParser[FacetRequest]#parseCommonParams(Object).mjava","commits":[{"id":"faf1236ae092482293a7e0659e347d172185ef6f","date":1430314113,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetParser[FacetRequest]#parseCommonParams(Object).mjava","pathOld":"/dev/null","sourceNew":"  protected void parseCommonParams(Object o) {\n    if (o instanceof Map) {\n      Map<String,Object> m = (Map<String,Object>)o;\n      facet.excludeTags = getStringList(m, \"excludeTags\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e47fba8dd946896c408eb448f6199f5a9f0da2d","date":1434234768,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetParser[FacetRequest]#parseCommonParams(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetParser[FacetRequest]#parseCommonParams(Object).mjava","sourceNew":"  protected void parseCommonParams(Object o) {\n    if (o instanceof Map) {\n      Map<String,Object> m = (Map<String,Object>)o;\n      List<String> excludeTags = getStringList(m, \"excludeTags\");\n      if (excludeTags != null) {\n        getDomain().excludeTags = excludeTags;\n      }\n\n      Map<String,Object> domainMap = (Map<String,Object>) m.get(\"domain\");\n      if (domainMap != null) {\n        excludeTags = getStringList(m, \"excludeTags\");\n        if (excludeTags != null) {\n          getDomain().excludeTags = excludeTags;\n        }\n\n        String blockParent = (String)domainMap.get(\"blockParent\");\n        String blockChildren = (String)domainMap.get(\"blockChildren\");\n\n        if (blockParent != null) {\n          getDomain().toParent = true;\n          getDomain().parents = blockParent;\n        } else if (blockChildren != null) {\n          getDomain().toChildren = true;\n          getDomain().parents = blockChildren;\n        }\n\n      }\n\n    }\n  }\n\n","sourceOld":"  protected void parseCommonParams(Object o) {\n    if (o instanceof Map) {\n      Map<String,Object> m = (Map<String,Object>)o;\n      facet.excludeTags = getStringList(m, \"excludeTags\");\n    }\n  }\n\n","bugFix":null,"bugIntro":["7b1d051754280a80767860394a9332464df2623b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b1d051754280a80767860394a9332464df2623b","date":1448481068,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetParser[FacetRequest]#parseCommonParams(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetParser[FacetRequest]#parseCommonParams(Object).mjava","sourceNew":"  protected void parseCommonParams(Object o) {\n    if (o instanceof Map) {\n      Map<String,Object> m = (Map<String,Object>)o;\n      List<String> excludeTags = getStringList(m, \"excludeTags\");\n      if (excludeTags != null) {\n        getDomain().excludeTags = excludeTags;\n      }\n\n      Map<String,Object> domainMap = (Map<String,Object>) m.get(\"domain\");\n      if (domainMap != null) {\n        excludeTags = getStringList(domainMap, \"excludeTags\");\n        if (excludeTags != null) {\n          getDomain().excludeTags = excludeTags;\n        }\n\n        String blockParent = (String)domainMap.get(\"blockParent\");\n        String blockChildren = (String)domainMap.get(\"blockChildren\");\n\n        if (blockParent != null) {\n          getDomain().toParent = true;\n          getDomain().parents = blockParent;\n        } else if (blockChildren != null) {\n          getDomain().toChildren = true;\n          getDomain().parents = blockChildren;\n        }\n\n      }\n\n    }\n  }\n\n","sourceOld":"  protected void parseCommonParams(Object o) {\n    if (o instanceof Map) {\n      Map<String,Object> m = (Map<String,Object>)o;\n      List<String> excludeTags = getStringList(m, \"excludeTags\");\n      if (excludeTags != null) {\n        getDomain().excludeTags = excludeTags;\n      }\n\n      Map<String,Object> domainMap = (Map<String,Object>) m.get(\"domain\");\n      if (domainMap != null) {\n        excludeTags = getStringList(m, \"excludeTags\");\n        if (excludeTags != null) {\n          getDomain().excludeTags = excludeTags;\n        }\n\n        String blockParent = (String)domainMap.get(\"blockParent\");\n        String blockChildren = (String)domainMap.get(\"blockChildren\");\n\n        if (blockParent != null) {\n          getDomain().toParent = true;\n          getDomain().parents = blockParent;\n        } else if (blockChildren != null) {\n          getDomain().toChildren = true;\n          getDomain().parents = blockChildren;\n        }\n\n      }\n\n    }\n  }\n\n","bugFix":["9e47fba8dd946896c408eb448f6199f5a9f0da2d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23dfab8006bb57825127140eeff51baa06028cf7","date":1477767259,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetParser[FacetRequest]#parseCommonParams(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetParser[FacetRequest]#parseCommonParams(Object).mjava","sourceNew":"  protected void parseCommonParams(Object o) {\n    if (o instanceof Map) {\n      Map<String,Object> m = (Map<String,Object>)o;\n      List<String> excludeTags = getStringList(m, \"excludeTags\");\n      if (excludeTags != null) {\n        getDomain().excludeTags = excludeTags;\n      }\n\n      Map<String,Object> domainMap = (Map<String,Object>) m.get(\"domain\");\n      if (domainMap != null) {\n        excludeTags = getStringList(domainMap, \"excludeTags\");\n        if (excludeTags != null) {\n          getDomain().excludeTags = excludeTags;\n        }\n\n        String blockParent = (String)domainMap.get(\"blockParent\");\n        String blockChildren = (String)domainMap.get(\"blockChildren\");\n\n        if (blockParent != null) {\n          getDomain().toParent = true;\n          getDomain().parents = blockParent;\n        } else if (blockChildren != null) {\n          getDomain().toChildren = true;\n          getDomain().parents = blockChildren;\n        }\n\n      }\n\n      Object filterOrList = m.get(\"filter\");\n      if (filterOrList != null) {\n        if (filterOrList instanceof List) {\n          facet.filters = (List<Object>)filterOrList;\n        } else {\n          facet.filters = new ArrayList<>(1);\n          facet.filters.add(filterOrList);\n        }\n      }\n\n    }\n  }\n\n","sourceOld":"  protected void parseCommonParams(Object o) {\n    if (o instanceof Map) {\n      Map<String,Object> m = (Map<String,Object>)o;\n      List<String> excludeTags = getStringList(m, \"excludeTags\");\n      if (excludeTags != null) {\n        getDomain().excludeTags = excludeTags;\n      }\n\n      Map<String,Object> domainMap = (Map<String,Object>) m.get(\"domain\");\n      if (domainMap != null) {\n        excludeTags = getStringList(domainMap, \"excludeTags\");\n        if (excludeTags != null) {\n          getDomain().excludeTags = excludeTags;\n        }\n\n        String blockParent = (String)domainMap.get(\"blockParent\");\n        String blockChildren = (String)domainMap.get(\"blockChildren\");\n\n        if (blockParent != null) {\n          getDomain().toParent = true;\n          getDomain().parents = blockParent;\n        } else if (blockChildren != null) {\n          getDomain().toChildren = true;\n          getDomain().parents = blockChildren;\n        }\n\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"320888923ec13b91f53082558f01f4c9960dd226","date":1477926871,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetParser[FacetRequest]#parseCommonParams(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetParser[FacetRequest]#parseCommonParams(Object).mjava","sourceNew":"  protected void parseCommonParams(Object o) {\n    if (o instanceof Map) {\n      Map<String,Object> m = (Map<String,Object>)o;\n      List<String> excludeTags = getStringList(m, \"excludeTags\");\n      if (excludeTags != null) {\n        getDomain().excludeTags = excludeTags;\n      }\n\n      Map<String,Object> domainMap = (Map<String,Object>) m.get(\"domain\");\n      if (domainMap != null) {\n        excludeTags = getStringList(domainMap, \"excludeTags\");\n        if (excludeTags != null) {\n          getDomain().excludeTags = excludeTags;\n        }\n\n        String blockParent = (String)domainMap.get(\"blockParent\");\n        String blockChildren = (String)domainMap.get(\"blockChildren\");\n\n        if (blockParent != null) {\n          getDomain().toParent = true;\n          getDomain().parents = blockParent;\n        } else if (blockChildren != null) {\n          getDomain().toChildren = true;\n          getDomain().parents = blockChildren;\n        }\n\n      }\n\n      Object filterOrList = m.get(\"filter\");\n      if (filterOrList != null) {\n        if (filterOrList instanceof List) {\n          facet.filters = (List<Object>)filterOrList;\n        } else {\n          facet.filters = new ArrayList<>(1);\n          facet.filters.add(filterOrList);\n        }\n      }\n\n    }\n  }\n\n","sourceOld":"  protected void parseCommonParams(Object o) {\n    if (o instanceof Map) {\n      Map<String,Object> m = (Map<String,Object>)o;\n      List<String> excludeTags = getStringList(m, \"excludeTags\");\n      if (excludeTags != null) {\n        getDomain().excludeTags = excludeTags;\n      }\n\n      Map<String,Object> domainMap = (Map<String,Object>) m.get(\"domain\");\n      if (domainMap != null) {\n        excludeTags = getStringList(domainMap, \"excludeTags\");\n        if (excludeTags != null) {\n          getDomain().excludeTags = excludeTags;\n        }\n\n        String blockParent = (String)domainMap.get(\"blockParent\");\n        String blockChildren = (String)domainMap.get(\"blockChildren\");\n\n        if (blockParent != null) {\n          getDomain().toParent = true;\n          getDomain().parents = blockParent;\n        } else if (blockChildren != null) {\n          getDomain().toChildren = true;\n          getDomain().parents = blockChildren;\n        }\n\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d12e7f5233d4a77959b66fda90df286dace8a9a0","date":1478016064,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetParser[FacetRequest]#parseCommonParams(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetParser[FacetRequest]#parseCommonParams(Object).mjava","sourceNew":"  protected void parseCommonParams(Object o) {\n    if (o instanceof Map) {\n      Map<String,Object> m = (Map<String,Object>)o;\n      List<String> excludeTags = getStringList(m, \"excludeTags\");\n      if (excludeTags != null) {\n        getDomain().excludeTags = excludeTags;\n      }\n\n      Map<String,Object> domainMap = (Map<String,Object>) m.get(\"domain\");\n      if (domainMap != null) {\n        FacetRequest.Domain domain = getDomain();\n\n        excludeTags = getStringList(domainMap, \"excludeTags\");\n        if (excludeTags != null) {\n          domain.excludeTags = excludeTags;\n        }\n\n        String blockParent = (String)domainMap.get(\"blockParent\");\n        String blockChildren = (String)domainMap.get(\"blockChildren\");\n\n        if (blockParent != null) {\n          domain.toParent = true;\n          domain.parents = blockParent;\n        } else if (blockChildren != null) {\n          domain.toChildren = true;\n          domain.parents = blockChildren;\n        }\n\n        Object filterOrList = domainMap.get(\"filter\");\n        if (filterOrList != null) {\n          assert domain.filters == null;\n          if (filterOrList instanceof List) {\n            domain.filters = (List<Object>)filterOrList;\n          } else {\n            domain.filters = new ArrayList<>(1);\n            domain.filters.add(filterOrList);\n          }\n        }\n\n\n      } // end \"domain\"\n\n\n    }\n  }\n\n","sourceOld":"  protected void parseCommonParams(Object o) {\n    if (o instanceof Map) {\n      Map<String,Object> m = (Map<String,Object>)o;\n      List<String> excludeTags = getStringList(m, \"excludeTags\");\n      if (excludeTags != null) {\n        getDomain().excludeTags = excludeTags;\n      }\n\n      Map<String,Object> domainMap = (Map<String,Object>) m.get(\"domain\");\n      if (domainMap != null) {\n        excludeTags = getStringList(domainMap, \"excludeTags\");\n        if (excludeTags != null) {\n          getDomain().excludeTags = excludeTags;\n        }\n\n        String blockParent = (String)domainMap.get(\"blockParent\");\n        String blockChildren = (String)domainMap.get(\"blockChildren\");\n\n        if (blockParent != null) {\n          getDomain().toParent = true;\n          getDomain().parents = blockParent;\n        } else if (blockChildren != null) {\n          getDomain().toChildren = true;\n          getDomain().parents = blockChildren;\n        }\n\n      }\n\n      Object filterOrList = m.get(\"filter\");\n      if (filterOrList != null) {\n        if (filterOrList instanceof List) {\n          facet.filters = (List<Object>)filterOrList;\n        } else {\n          facet.filters = new ArrayList<>(1);\n          facet.filters.add(filterOrList);\n        }\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetParser[FacetRequest]#parseCommonParams(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetParser[FacetRequest]#parseCommonParams(Object).mjava","sourceNew":"  protected void parseCommonParams(Object o) {\n    if (o instanceof Map) {\n      Map<String,Object> m = (Map<String,Object>)o;\n      List<String> excludeTags = getStringList(m, \"excludeTags\");\n      if (excludeTags != null) {\n        getDomain().excludeTags = excludeTags;\n      }\n\n      Map<String,Object> domainMap = (Map<String,Object>) m.get(\"domain\");\n      if (domainMap != null) {\n        FacetRequest.Domain domain = getDomain();\n\n        excludeTags = getStringList(domainMap, \"excludeTags\");\n        if (excludeTags != null) {\n          domain.excludeTags = excludeTags;\n        }\n\n        String blockParent = (String)domainMap.get(\"blockParent\");\n        String blockChildren = (String)domainMap.get(\"blockChildren\");\n\n        if (blockParent != null) {\n          domain.toParent = true;\n          domain.parents = blockParent;\n        } else if (blockChildren != null) {\n          domain.toChildren = true;\n          domain.parents = blockChildren;\n        }\n\n        Object filterOrList = domainMap.get(\"filter\");\n        if (filterOrList != null) {\n          assert domain.filters == null;\n          if (filterOrList instanceof List) {\n            domain.filters = (List<Object>)filterOrList;\n          } else {\n            domain.filters = new ArrayList<>(1);\n            domain.filters.add(filterOrList);\n          }\n        }\n\n\n      } // end \"domain\"\n\n\n    }\n  }\n\n","sourceOld":"  protected void parseCommonParams(Object o) {\n    if (o instanceof Map) {\n      Map<String,Object> m = (Map<String,Object>)o;\n      List<String> excludeTags = getStringList(m, \"excludeTags\");\n      if (excludeTags != null) {\n        getDomain().excludeTags = excludeTags;\n      }\n\n      Map<String,Object> domainMap = (Map<String,Object>) m.get(\"domain\");\n      if (domainMap != null) {\n        excludeTags = getStringList(domainMap, \"excludeTags\");\n        if (excludeTags != null) {\n          getDomain().excludeTags = excludeTags;\n        }\n\n        String blockParent = (String)domainMap.get(\"blockParent\");\n        String blockChildren = (String)domainMap.get(\"blockChildren\");\n\n        if (blockParent != null) {\n          getDomain().toParent = true;\n          getDomain().parents = blockParent;\n        } else if (blockChildren != null) {\n          getDomain().toChildren = true;\n          getDomain().parents = blockChildren;\n        }\n\n      }\n\n      Object filterOrList = m.get(\"filter\");\n      if (filterOrList != null) {\n        if (filterOrList instanceof List) {\n          facet.filters = (List<Object>)filterOrList;\n        } else {\n          facet.filters = new ArrayList<>(1);\n          facet.filters.add(filterOrList);\n        }\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1b26212116cd764dfc34c7f93ecaa718ec27ef3","date":1493832602,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetParser[FacetRequest]#parseCommonParams(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetParser[FacetRequest]#parseCommonParams(Object).mjava","sourceNew":"  protected void parseCommonParams(Object o) {\n    if (o instanceof Map) {\n      Map<String,Object> m = (Map<String,Object>)o;\n      List<String> excludeTags = getStringList(m, \"excludeTags\");\n      if (excludeTags != null) {\n        getDomain().excludeTags = excludeTags;\n      }\n\n      Map<String,Object> domainMap = (Map<String,Object>) m.get(\"domain\");\n      if (domainMap != null) {\n        FacetRequest.Domain domain = getDomain();\n\n        excludeTags = getStringList(domainMap, \"excludeTags\");\n        if (excludeTags != null) {\n          domain.excludeTags = excludeTags;\n        }\n\n        String blockParent = (String)domainMap.get(\"blockParent\");\n        String blockChildren = (String)domainMap.get(\"blockChildren\");\n\n        if (blockParent != null) {\n          domain.toParent = true;\n          domain.parents = blockParent;\n        } else if (blockChildren != null) {\n          domain.toChildren = true;\n          domain.parents = blockChildren;\n        }\n          \n        FacetRequest.Domain.JoinField.createJoinField(domain, domainMap);\n\n        Object filterOrList = domainMap.get(\"filter\");\n        if (filterOrList != null) {\n          assert domain.filters == null;\n          if (filterOrList instanceof List) {\n            domain.filters = (List<Object>)filterOrList;\n          } else {\n            domain.filters = new ArrayList<>(1);\n            domain.filters.add(filterOrList);\n          }\n        }\n\n\n      } // end \"domain\"\n\n\n    }\n  }\n\n","sourceOld":"  protected void parseCommonParams(Object o) {\n    if (o instanceof Map) {\n      Map<String,Object> m = (Map<String,Object>)o;\n      List<String> excludeTags = getStringList(m, \"excludeTags\");\n      if (excludeTags != null) {\n        getDomain().excludeTags = excludeTags;\n      }\n\n      Map<String,Object> domainMap = (Map<String,Object>) m.get(\"domain\");\n      if (domainMap != null) {\n        FacetRequest.Domain domain = getDomain();\n\n        excludeTags = getStringList(domainMap, \"excludeTags\");\n        if (excludeTags != null) {\n          domain.excludeTags = excludeTags;\n        }\n\n        String blockParent = (String)domainMap.get(\"blockParent\");\n        String blockChildren = (String)domainMap.get(\"blockChildren\");\n\n        if (blockParent != null) {\n          domain.toParent = true;\n          domain.parents = blockParent;\n        } else if (blockChildren != null) {\n          domain.toChildren = true;\n          domain.parents = blockChildren;\n        }\n\n        Object filterOrList = domainMap.get(\"filter\");\n        if (filterOrList != null) {\n          assert domain.filters == null;\n          if (filterOrList instanceof List) {\n            domain.filters = (List<Object>)filterOrList;\n          } else {\n            domain.filters = new ArrayList<>(1);\n            domain.filters.add(filterOrList);\n          }\n        }\n\n\n      } // end \"domain\"\n\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetParser[FacetRequest]#parseCommonParams(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetParser[FacetRequest]#parseCommonParams(Object).mjava","sourceNew":"  protected void parseCommonParams(Object o) {\n    if (o instanceof Map) {\n      Map<String,Object> m = (Map<String,Object>)o;\n      List<String> excludeTags = getStringList(m, \"excludeTags\");\n      if (excludeTags != null) {\n        getDomain().excludeTags = excludeTags;\n      }\n\n      Map<String,Object> domainMap = (Map<String,Object>) m.get(\"domain\");\n      if (domainMap != null) {\n        FacetRequest.Domain domain = getDomain();\n\n        excludeTags = getStringList(domainMap, \"excludeTags\");\n        if (excludeTags != null) {\n          domain.excludeTags = excludeTags;\n        }\n\n        String blockParent = (String)domainMap.get(\"blockParent\");\n        String blockChildren = (String)domainMap.get(\"blockChildren\");\n\n        if (blockParent != null) {\n          domain.toParent = true;\n          domain.parents = blockParent;\n        } else if (blockChildren != null) {\n          domain.toChildren = true;\n          domain.parents = blockChildren;\n        }\n          \n        FacetRequest.Domain.JoinField.createJoinField(domain, domainMap);\n\n        Object filterOrList = domainMap.get(\"filter\");\n        if (filterOrList != null) {\n          assert domain.filters == null;\n          if (filterOrList instanceof List) {\n            domain.filters = (List<Object>)filterOrList;\n          } else {\n            domain.filters = new ArrayList<>(1);\n            domain.filters.add(filterOrList);\n          }\n        }\n\n\n      } // end \"domain\"\n\n\n    }\n  }\n\n","sourceOld":"  protected void parseCommonParams(Object o) {\n    if (o instanceof Map) {\n      Map<String,Object> m = (Map<String,Object>)o;\n      List<String> excludeTags = getStringList(m, \"excludeTags\");\n      if (excludeTags != null) {\n        getDomain().excludeTags = excludeTags;\n      }\n\n      Map<String,Object> domainMap = (Map<String,Object>) m.get(\"domain\");\n      if (domainMap != null) {\n        FacetRequest.Domain domain = getDomain();\n\n        excludeTags = getStringList(domainMap, \"excludeTags\");\n        if (excludeTags != null) {\n          domain.excludeTags = excludeTags;\n        }\n\n        String blockParent = (String)domainMap.get(\"blockParent\");\n        String blockChildren = (String)domainMap.get(\"blockChildren\");\n\n        if (blockParent != null) {\n          domain.toParent = true;\n          domain.parents = blockParent;\n        } else if (blockChildren != null) {\n          domain.toChildren = true;\n          domain.parents = blockChildren;\n        }\n\n        Object filterOrList = domainMap.get(\"filter\");\n        if (filterOrList != null) {\n          assert domain.filters == null;\n          if (filterOrList instanceof List) {\n            domain.filters = (List<Object>)filterOrList;\n          } else {\n            domain.filters = new ArrayList<>(1);\n            domain.filters.add(filterOrList);\n          }\n        }\n\n\n      } // end \"domain\"\n\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c705a0d590cf911e7c942df49563ca2ea176e22","date":1526916174,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetParser[FacetRequest]#parseCommonParams(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetParser[FacetRequest]#parseCommonParams(Object).mjava","sourceNew":"  protected void parseCommonParams(Object o) {\n    if (o instanceof Map) {\n      Map<String,Object> m = (Map<String,Object>)o;\n      List<String> excludeTags = getStringList(m, \"excludeTags\");\n      if (excludeTags != null) {\n        getDomain().excludeTags = excludeTags;\n      }\n\n      Map<String,Object> domainMap = (Map<String,Object>) m.get(\"domain\");\n      if (domainMap != null) {\n        FacetRequest.Domain domain = getDomain();\n\n        excludeTags = getStringList(domainMap, \"excludeTags\");\n        if (excludeTags != null) {\n          domain.excludeTags = excludeTags;\n        }\n\n        if (domainMap.containsKey(\"query\")) {\n          domain.explicitQueries = parseJSONQueryStruct(domainMap.get(\"query\"));\n          if (null == domain.explicitQueries) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"'query' domain can not be null or empty\");\n          } else if (null != domain.excludeTags) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"'query' domain can not be combined with 'excludeTags'\");\n          }\n        }\n        \n        String blockParent = (String)domainMap.get(\"blockParent\");\n        String blockChildren = (String)domainMap.get(\"blockChildren\");\n\n        if (blockParent != null) {\n          domain.toParent = true;\n          domain.parents = blockParent;\n        } else if (blockChildren != null) {\n          domain.toChildren = true;\n          domain.parents = blockChildren;\n        }\n          \n        FacetRequest.Domain.JoinField.createJoinField(domain, domainMap);\n\n        Object filterOrList = domainMap.get(\"filter\");\n        if (filterOrList != null) {\n          assert domain.filters == null;\n          domain.filters = parseJSONQueryStruct(filterOrList);\n        }\n\n      } // end \"domain\"\n    }\n  }\n\n","sourceOld":"  protected void parseCommonParams(Object o) {\n    if (o instanceof Map) {\n      Map<String,Object> m = (Map<String,Object>)o;\n      List<String> excludeTags = getStringList(m, \"excludeTags\");\n      if (excludeTags != null) {\n        getDomain().excludeTags = excludeTags;\n      }\n\n      Map<String,Object> domainMap = (Map<String,Object>) m.get(\"domain\");\n      if (domainMap != null) {\n        FacetRequest.Domain domain = getDomain();\n\n        excludeTags = getStringList(domainMap, \"excludeTags\");\n        if (excludeTags != null) {\n          domain.excludeTags = excludeTags;\n        }\n\n        String blockParent = (String)domainMap.get(\"blockParent\");\n        String blockChildren = (String)domainMap.get(\"blockChildren\");\n\n        if (blockParent != null) {\n          domain.toParent = true;\n          domain.parents = blockParent;\n        } else if (blockChildren != null) {\n          domain.toChildren = true;\n          domain.parents = blockChildren;\n        }\n          \n        FacetRequest.Domain.JoinField.createJoinField(domain, domainMap);\n\n        Object filterOrList = domainMap.get(\"filter\");\n        if (filterOrList != null) {\n          assert domain.filters == null;\n          if (filterOrList instanceof List) {\n            domain.filters = (List<Object>)filterOrList;\n          } else {\n            domain.filters = new ArrayList<>(1);\n            domain.filters.add(filterOrList);\n          }\n        }\n\n\n      } // end \"domain\"\n\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bcd6a2cefce164763af175ff1accaf232439e8e","date":1527469335,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetParser[FacetRequest]#parseCommonParams(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetParser[FacetRequest]#parseCommonParams(Object).mjava","sourceNew":"  protected void parseCommonParams(Object o) {\n    if (o instanceof Map) {\n      Map<String,Object> m = (Map<String,Object>)o;\n      List<String> excludeTags = getStringList(m, \"excludeTags\");\n      if (excludeTags != null) {\n        getDomain().excludeTags = excludeTags;\n      }\n\n      Map<String,Object> domainMap = (Map<String,Object>) m.get(\"domain\");\n      if (domainMap != null) {\n        FacetRequest.Domain domain = getDomain();\n\n        excludeTags = getStringList(domainMap, \"excludeTags\");\n        if (excludeTags != null) {\n          domain.excludeTags = excludeTags;\n        }\n\n        if (domainMap.containsKey(\"query\")) {\n          domain.explicitQueries = parseJSONQueryStruct(domainMap.get(\"query\"));\n          if (null == domain.explicitQueries) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"'query' domain can not be null or empty\");\n          } else if (null != domain.excludeTags) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"'query' domain can not be combined with 'excludeTags'\");\n          }\n        }\n        \n        String blockParent = (String)domainMap.get(\"blockParent\");\n        String blockChildren = (String)domainMap.get(\"blockChildren\");\n\n        if (blockParent != null) {\n          domain.toParent = true;\n          domain.parents = blockParent;\n        } else if (blockChildren != null) {\n          domain.toChildren = true;\n          domain.parents = blockChildren;\n        }\n          \n        FacetRequest.Domain.JoinField.createJoinField(domain, domainMap);\n        FacetRequest.Domain.GraphField.createGraphField(domain, domainMap);\n\n        Object filterOrList = domainMap.get(\"filter\");\n        if (filterOrList != null) {\n          assert domain.filters == null;\n          domain.filters = parseJSONQueryStruct(filterOrList);\n        }\n\n      } // end \"domain\"\n    }\n  }\n\n","sourceOld":"  protected void parseCommonParams(Object o) {\n    if (o instanceof Map) {\n      Map<String,Object> m = (Map<String,Object>)o;\n      List<String> excludeTags = getStringList(m, \"excludeTags\");\n      if (excludeTags != null) {\n        getDomain().excludeTags = excludeTags;\n      }\n\n      Map<String,Object> domainMap = (Map<String,Object>) m.get(\"domain\");\n      if (domainMap != null) {\n        FacetRequest.Domain domain = getDomain();\n\n        excludeTags = getStringList(domainMap, \"excludeTags\");\n        if (excludeTags != null) {\n          domain.excludeTags = excludeTags;\n        }\n\n        if (domainMap.containsKey(\"query\")) {\n          domain.explicitQueries = parseJSONQueryStruct(domainMap.get(\"query\"));\n          if (null == domain.explicitQueries) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"'query' domain can not be null or empty\");\n          } else if (null != domain.excludeTags) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"'query' domain can not be combined with 'excludeTags'\");\n          }\n        }\n        \n        String blockParent = (String)domainMap.get(\"blockParent\");\n        String blockChildren = (String)domainMap.get(\"blockChildren\");\n\n        if (blockParent != null) {\n          domain.toParent = true;\n          domain.parents = blockParent;\n        } else if (blockChildren != null) {\n          domain.toChildren = true;\n          domain.parents = blockChildren;\n        }\n          \n        FacetRequest.Domain.JoinField.createJoinField(domain, domainMap);\n\n        Object filterOrList = domainMap.get(\"filter\");\n        if (filterOrList != null) {\n          assert domain.filters == null;\n          domain.filters = parseJSONQueryStruct(filterOrList);\n        }\n\n      } // end \"domain\"\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1918d03541b875664e27eae44b6b157da044f0b8","date":1549745850,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetParser[FacetRequest]#parseCommonParams(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetParser[FacetRequest]#parseCommonParams(Object).mjava","sourceNew":"  protected void parseCommonParams(Object o) {\n    if (o instanceof Map) {\n      Map<String,Object> m = (Map<String,Object>)o;\n      List<String> excludeTags = getStringList(m, \"excludeTags\");\n      if (excludeTags != null) {\n        getDomain().excludeTags = excludeTags;\n      }\n\n      Object domainObj =  m.get(\"domain\");\n      if (domainObj instanceof Map) {\n        Map<String, Object> domainMap = (Map<String, Object>)domainObj;\n        FacetRequest.Domain domain = getDomain();\n\n        excludeTags = getStringList(domainMap, \"excludeTags\");\n        if (excludeTags != null) {\n          domain.excludeTags = excludeTags;\n        }\n\n        if (domainMap.containsKey(\"query\")) {\n          domain.explicitQueries = parseJSONQueryStruct(domainMap.get(\"query\"));\n          if (null == domain.explicitQueries) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"'query' domain can not be null or empty\");\n          } else if (null != domain.excludeTags) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"'query' domain can not be combined with 'excludeTags'\");\n          }\n        }\n\n        String blockParent = getString(domainMap, \"blockParent\", null);\n        String blockChildren = getString(domainMap, \"blockChildren\", null);\n\n        if (blockParent != null) {\n          domain.toParent = true;\n          domain.parents = blockParent;\n        } else if (blockChildren != null) {\n          domain.toChildren = true;\n          domain.parents = blockChildren;\n        }\n          \n        FacetRequest.Domain.JoinField.createJoinField(domain, domainMap);\n        FacetRequest.Domain.GraphField.createGraphField(domain, domainMap);\n\n        Object filterOrList = domainMap.get(\"filter\");\n        if (filterOrList != null) {\n          assert domain.filters == null;\n          domain.filters = parseJSONQueryStruct(filterOrList);\n        }\n\n      } else if (domainObj != null) {\n        throw err(\"Expected Map for 'domain', received \" + domainObj.getClass().getSimpleName() + \"=\" + domainObj);\n      }\n    }\n  }\n\n","sourceOld":"  protected void parseCommonParams(Object o) {\n    if (o instanceof Map) {\n      Map<String,Object> m = (Map<String,Object>)o;\n      List<String> excludeTags = getStringList(m, \"excludeTags\");\n      if (excludeTags != null) {\n        getDomain().excludeTags = excludeTags;\n      }\n\n      Map<String,Object> domainMap = (Map<String,Object>) m.get(\"domain\");\n      if (domainMap != null) {\n        FacetRequest.Domain domain = getDomain();\n\n        excludeTags = getStringList(domainMap, \"excludeTags\");\n        if (excludeTags != null) {\n          domain.excludeTags = excludeTags;\n        }\n\n        if (domainMap.containsKey(\"query\")) {\n          domain.explicitQueries = parseJSONQueryStruct(domainMap.get(\"query\"));\n          if (null == domain.explicitQueries) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"'query' domain can not be null or empty\");\n          } else if (null != domain.excludeTags) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"'query' domain can not be combined with 'excludeTags'\");\n          }\n        }\n        \n        String blockParent = (String)domainMap.get(\"blockParent\");\n        String blockChildren = (String)domainMap.get(\"blockChildren\");\n\n        if (blockParent != null) {\n          domain.toParent = true;\n          domain.parents = blockParent;\n        } else if (blockChildren != null) {\n          domain.toChildren = true;\n          domain.parents = blockChildren;\n        }\n          \n        FacetRequest.Domain.JoinField.createJoinField(domain, domainMap);\n        FacetRequest.Domain.GraphField.createGraphField(domain, domainMap);\n\n        Object filterOrList = domainMap.get(\"filter\");\n        if (filterOrList != null) {\n          assert domain.filters == null;\n          domain.filters = parseJSONQueryStruct(filterOrList);\n        }\n\n      } // end \"domain\"\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"248f6ecc900c3a5633fd5ca6f564ea8b717720da","date":1588863846,"type":4,"author":"Mike Drob","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetParser[FacetRequest]#parseCommonParams(Object).mjava","sourceNew":null,"sourceOld":"  protected void parseCommonParams(Object o) {\n    if (o instanceof Map) {\n      Map<String,Object> m = (Map<String,Object>)o;\n      List<String> excludeTags = getStringList(m, \"excludeTags\");\n      if (excludeTags != null) {\n        getDomain().excludeTags = excludeTags;\n      }\n\n      Object domainObj =  m.get(\"domain\");\n      if (domainObj instanceof Map) {\n        Map<String, Object> domainMap = (Map<String, Object>)domainObj;\n        FacetRequest.Domain domain = getDomain();\n\n        excludeTags = getStringList(domainMap, \"excludeTags\");\n        if (excludeTags != null) {\n          domain.excludeTags = excludeTags;\n        }\n\n        if (domainMap.containsKey(\"query\")) {\n          domain.explicitQueries = parseJSONQueryStruct(domainMap.get(\"query\"));\n          if (null == domain.explicitQueries) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"'query' domain can not be null or empty\");\n          } else if (null != domain.excludeTags) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                                    \"'query' domain can not be combined with 'excludeTags'\");\n          }\n        }\n\n        String blockParent = getString(domainMap, \"blockParent\", null);\n        String blockChildren = getString(domainMap, \"blockChildren\", null);\n\n        if (blockParent != null) {\n          domain.toParent = true;\n          domain.parents = blockParent;\n        } else if (blockChildren != null) {\n          domain.toChildren = true;\n          domain.parents = blockChildren;\n        }\n          \n        FacetRequest.Domain.JoinField.createJoinField(domain, domainMap);\n        FacetRequest.Domain.GraphField.createGraphField(domain, domainMap);\n\n        Object filterOrList = domainMap.get(\"filter\");\n        if (filterOrList != null) {\n          assert domain.filters == null;\n          domain.filters = parseJSONQueryStruct(filterOrList);\n        }\n\n      } else if (domainObj != null) {\n        throw err(\"Expected Map for 'domain', received \" + domainObj.getClass().getSimpleName() + \"=\" + domainObj);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1b26212116cd764dfc34c7f93ecaa718ec27ef3":["d12e7f5233d4a77959b66fda90df286dace8a9a0"],"7b1d051754280a80767860394a9332464df2623b":["9e47fba8dd946896c408eb448f6199f5a9f0da2d"],"2bcd6a2cefce164763af175ff1accaf232439e8e":["2c705a0d590cf911e7c942df49563ca2ea176e22"],"9e47fba8dd946896c408eb448f6199f5a9f0da2d":["faf1236ae092482293a7e0659e347d172185ef6f"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["320888923ec13b91f53082558f01f4c9960dd226","d12e7f5233d4a77959b66fda90df286dace8a9a0"],"23dfab8006bb57825127140eeff51baa06028cf7":["7b1d051754280a80767860394a9332464df2623b"],"d12e7f5233d4a77959b66fda90df286dace8a9a0":["23dfab8006bb57825127140eeff51baa06028cf7"],"320888923ec13b91f53082558f01f4c9960dd226":["7b1d051754280a80767860394a9332464df2623b","23dfab8006bb57825127140eeff51baa06028cf7"],"faf1236ae092482293a7e0659e347d172185ef6f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2c705a0d590cf911e7c942df49563ca2ea176e22":["b1b26212116cd764dfc34c7f93ecaa718ec27ef3"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["d12e7f5233d4a77959b66fda90df286dace8a9a0","b1b26212116cd764dfc34c7f93ecaa718ec27ef3"],"1918d03541b875664e27eae44b6b157da044f0b8":["2bcd6a2cefce164763af175ff1accaf232439e8e"],"248f6ecc900c3a5633fd5ca6f564ea8b717720da":["1918d03541b875664e27eae44b6b157da044f0b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["248f6ecc900c3a5633fd5ca6f564ea8b717720da"]},"commit2Childs":{"b1b26212116cd764dfc34c7f93ecaa718ec27ef3":["2c705a0d590cf911e7c942df49563ca2ea176e22","e9017cf144952056066919f1ebc7897ff9bd71b1"],"7b1d051754280a80767860394a9332464df2623b":["23dfab8006bb57825127140eeff51baa06028cf7","320888923ec13b91f53082558f01f4c9960dd226"],"9e47fba8dd946896c408eb448f6199f5a9f0da2d":["7b1d051754280a80767860394a9332464df2623b"],"2bcd6a2cefce164763af175ff1accaf232439e8e":["1918d03541b875664e27eae44b6b157da044f0b8"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":[],"23dfab8006bb57825127140eeff51baa06028cf7":["d12e7f5233d4a77959b66fda90df286dace8a9a0","320888923ec13b91f53082558f01f4c9960dd226"],"d12e7f5233d4a77959b66fda90df286dace8a9a0":["b1b26212116cd764dfc34c7f93ecaa718ec27ef3","9720b151fde2073f4e401450f4574e5f31c2d0ff","e9017cf144952056066919f1ebc7897ff9bd71b1"],"320888923ec13b91f53082558f01f4c9960dd226":["9720b151fde2073f4e401450f4574e5f31c2d0ff"],"faf1236ae092482293a7e0659e347d172185ef6f":["9e47fba8dd946896c408eb448f6199f5a9f0da2d"],"2c705a0d590cf911e7c942df49563ca2ea176e22":["2bcd6a2cefce164763af175ff1accaf232439e8e"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"1918d03541b875664e27eae44b6b157da044f0b8":["248f6ecc900c3a5633fd5ca6f564ea8b717720da"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["faf1236ae092482293a7e0659e347d172185ef6f"],"248f6ecc900c3a5633fd5ca6f564ea8b717720da":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9720b151fde2073f4e401450f4574e5f31c2d0ff","e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}