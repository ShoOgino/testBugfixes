{"path":"src/java/org/apache/lucene/index/SegmentReader.Norm#clone().mjava","commits":[{"id":"6db660b56f04fdb2853d25cdee8ee0d36559a521","date":1233313968,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader.Norm#clone().mjava","pathOld":"/dev/null","sourceNew":"    // Returns a copy of this Norm instance that shares\n    // IndexInput & bytes with the original one\n    public synchronized Object clone() {\n      assert refCount > 0 && (origNorm == null || origNorm.refCount > 0);\n        \n      Norm clone;\n      try {\n        clone = (Norm) super.clone();\n      } catch (CloneNotSupportedException cnse) {\n        // Cannot happen\n        throw new RuntimeException(\"unexpected CloneNotSupportedException\", cnse);\n      }\n      clone.refCount = 1;\n\n      if (bytes != null) {\n        assert bytesRef != null;\n        assert origNorm == null;\n\n        // Clone holds a reference to my bytes:\n        clone.bytesRef.incRef();\n      } else {\n        assert bytesRef == null;\n        if (origNorm == null) {\n          // I become the origNorm for the clone:\n          clone.origNorm = this;\n        }\n        clone.origNorm.incRef();\n      }\n\n      // Only the origNorm will actually readBytes from in:\n      clone.in = null;\n\n      return clone;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader.Norm#clone().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader.Norm#clone().mjava","sourceNew":"    // Returns a copy of this Norm instance that shares\n    // IndexInput & bytes with the original one\n    @Override\n    public synchronized Object clone() {\n      assert refCount > 0 && (origNorm == null || origNorm.refCount > 0);\n        \n      Norm clone;\n      try {\n        clone = (Norm) super.clone();\n      } catch (CloneNotSupportedException cnse) {\n        // Cannot happen\n        throw new RuntimeException(\"unexpected CloneNotSupportedException\", cnse);\n      }\n      clone.refCount = 1;\n\n      if (bytes != null) {\n        assert bytesRef != null;\n        assert origNorm == null;\n\n        // Clone holds a reference to my bytes:\n        clone.bytesRef.incRef();\n      } else {\n        assert bytesRef == null;\n        if (origNorm == null) {\n          // I become the origNorm for the clone:\n          clone.origNorm = this;\n        }\n        clone.origNorm.incRef();\n      }\n\n      // Only the origNorm will actually readBytes from in:\n      clone.in = null;\n\n      return clone;\n    }\n\n","sourceOld":"    // Returns a copy of this Norm instance that shares\n    // IndexInput & bytes with the original one\n    public synchronized Object clone() {\n      assert refCount > 0 && (origNorm == null || origNorm.refCount > 0);\n        \n      Norm clone;\n      try {\n        clone = (Norm) super.clone();\n      } catch (CloneNotSupportedException cnse) {\n        // Cannot happen\n        throw new RuntimeException(\"unexpected CloneNotSupportedException\", cnse);\n      }\n      clone.refCount = 1;\n\n      if (bytes != null) {\n        assert bytesRef != null;\n        assert origNorm == null;\n\n        // Clone holds a reference to my bytes:\n        clone.bytesRef.incRef();\n      } else {\n        assert bytesRef == null;\n        if (origNorm == null) {\n          // I become the origNorm for the clone:\n          clone.origNorm = this;\n        }\n        clone.origNorm.incRef();\n      }\n\n      // Only the origNorm will actually readBytes from in:\n      clone.in = null;\n\n      return clone;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8514024f885b40613b5ec91876ce5e9d2167d89","date":1260313529,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader.Norm#clone().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader.Norm#clone().mjava","sourceNew":"    // Returns a copy of this Norm instance that shares\n    // IndexInput & bytes with the original one\n    @Override\n    public synchronized Object clone() {\n      assert refCount > 0 && (origNorm == null || origNorm.refCount > 0);\n        \n      Norm clone;\n      try {\n        clone = (Norm) super.clone();\n      } catch (CloneNotSupportedException cnse) {\n        // Cannot happen\n        throw new RuntimeException(\"unexpected CloneNotSupportedException\", cnse);\n      }\n      clone.refCount = 1;\n\n      if (bytes != null) {\n        assert bytesRef != null;\n        assert origNorm == null;\n\n        // Clone holds a reference to my bytes:\n        clone.bytesRef.incrementAndGet();\n      } else {\n        assert bytesRef == null;\n        if (origNorm == null) {\n          // I become the origNorm for the clone:\n          clone.origNorm = this;\n        }\n        clone.origNorm.incRef();\n      }\n\n      // Only the origNorm will actually readBytes from in:\n      clone.in = null;\n\n      return clone;\n    }\n\n","sourceOld":"    // Returns a copy of this Norm instance that shares\n    // IndexInput & bytes with the original one\n    @Override\n    public synchronized Object clone() {\n      assert refCount > 0 && (origNorm == null || origNorm.refCount > 0);\n        \n      Norm clone;\n      try {\n        clone = (Norm) super.clone();\n      } catch (CloneNotSupportedException cnse) {\n        // Cannot happen\n        throw new RuntimeException(\"unexpected CloneNotSupportedException\", cnse);\n      }\n      clone.refCount = 1;\n\n      if (bytes != null) {\n        assert bytesRef != null;\n        assert origNorm == null;\n\n        // Clone holds a reference to my bytes:\n        clone.bytesRef.incRef();\n      } else {\n        assert bytesRef == null;\n        if (origNorm == null) {\n          // I become the origNorm for the clone:\n          clone.origNorm = this;\n        }\n        clone.origNorm.incRef();\n      }\n\n      // Only the origNorm will actually readBytes from in:\n      clone.in = null;\n\n      return clone;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader.Norm#clone().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader.Norm#clone().mjava","sourceNew":"    // Returns a copy of this Norm instance that shares\n    // IndexInput & bytes with the original one\n    @Override\n    public synchronized Object clone() {\n      assert refCount > 0 && (origNorm == null || origNorm.refCount > 0);\n        \n      Norm clone;\n      try {\n        clone = (Norm) super.clone();\n      } catch (CloneNotSupportedException cnse) {\n        // Cannot happen\n        throw new RuntimeException(\"unexpected CloneNotSupportedException\", cnse);\n      }\n      clone.refCount = 1;\n\n      if (bytes != null) {\n        assert bytesRef != null;\n        assert origNorm == null;\n\n        // Clone holds a reference to my bytes:\n        clone.bytesRef.incrementAndGet();\n      } else {\n        assert bytesRef == null;\n        if (origNorm == null) {\n          // I become the origNorm for the clone:\n          clone.origNorm = this;\n        }\n        clone.origNorm.incRef();\n      }\n\n      // Only the origNorm will actually readBytes from in:\n      clone.in = null;\n\n      return clone;\n    }\n\n","sourceOld":"    // Returns a copy of this Norm instance that shares\n    // IndexInput & bytes with the original one\n    @Override\n    public synchronized Object clone() {\n      assert refCount > 0 && (origNorm == null || origNorm.refCount > 0);\n        \n      Norm clone;\n      try {\n        clone = (Norm) super.clone();\n      } catch (CloneNotSupportedException cnse) {\n        // Cannot happen\n        throw new RuntimeException(\"unexpected CloneNotSupportedException\", cnse);\n      }\n      clone.refCount = 1;\n\n      if (bytes != null) {\n        assert bytesRef != null;\n        assert origNorm == null;\n\n        // Clone holds a reference to my bytes:\n        clone.bytesRef.incrementAndGet();\n      } else {\n        assert bytesRef == null;\n        if (origNorm == null) {\n          // I become the origNorm for the clone:\n          clone.origNorm = this;\n        }\n        clone.origNorm.incRef();\n      }\n\n      // Only the origNorm will actually readBytes from in:\n      clone.in = null;\n\n      return clone;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8a9e385641d717e641408d8fbbc62be8fc766357":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d8514024f885b40613b5ec91876ce5e9d2167d89":["8a9e385641d717e641408d8fbbc62be8fc766357"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d8514024f885b40613b5ec91876ce5e9d2167d89"]},"commit2Childs":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["8a9e385641d717e641408d8fbbc62be8fc766357"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"8a9e385641d717e641408d8fbbc62be8fc766357":["d8514024f885b40613b5ec91876ce5e9d2167d89"],"d8514024f885b40613b5ec91876ce5e9d2167d89":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}