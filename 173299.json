{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#buildAutomaton(BytesRefSorter).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#buildAutomaton(BytesRefSorter).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#buildAutomaton(BytesRefSorter).mjava","sourceNew":"  /**\n   * Builds the final automaton from a list of entries.\n   */\n  private FST<Object> buildAutomaton(BytesRefSorter sorter) throws IOException {\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = new Builder<Object>(\n        FST.INPUT_TYPE.BYTE1, 0, 0, true, true, \n        shareMaxTailLength, outputs, null, false);\n    \n    BytesRef scratch = new BytesRef();\n    BytesRef entry;\n    final IntsRef scratchIntsRef = new IntsRef();\n    int count = 0;\n    BytesRefIterator iter = sorter.iterator();\n    while((entry = iter.next()) != null) {\n      count++;\n      if (scratch.compareTo(entry) != 0) {\n        builder.add(Util.toIntsRef(entry, scratchIntsRef), empty);\n        scratch.copyBytes(entry);\n      }\n    }\n    \n    return count == 0 ? null : builder.finish();\n  }\n\n","sourceOld":"  /**\n   * Builds the final automaton from a list of entries.\n   */\n  private FST<Object> buildAutomaton(BytesRefSorter sorter) throws IOException {\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = new Builder<Object>(\n        FST.INPUT_TYPE.BYTE1, 0, 0, true, true, \n        shareMaxTailLength, outputs, null, false);\n    \n    BytesRef scratch = new BytesRef();\n    BytesRef entry;\n    final IntsRef scratchIntsRef = new IntsRef();\n    int count = 0;\n    BytesRefIterator iter = sorter.iterator();\n    while((entry = iter.next()) != null) {\n      count++;\n      if (scratch.compareTo(entry) != 0) {\n        builder.add(Util.toIntsRef(entry, scratchIntsRef), empty);\n        scratch.copyBytes(entry);\n      }\n    }\n    \n    return count == 0 ? null : builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb8af2aec0a8574cf50cad6939d4475179595eca","date":1357675799,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#buildAutomaton(BytesRefSorter).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#buildAutomaton(BytesRefSorter).mjava","sourceNew":"  /**\n   * Builds the final automaton from a list of entries.\n   */\n  private FST<Object> buildAutomaton(BytesRefSorter sorter) throws IOException {\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = new Builder<Object>(\n        FST.INPUT_TYPE.BYTE1, 0, 0, true, true, \n        shareMaxTailLength, outputs, null, false, true);\n    \n    BytesRef scratch = new BytesRef();\n    BytesRef entry;\n    final IntsRef scratchIntsRef = new IntsRef();\n    int count = 0;\n    BytesRefIterator iter = sorter.iterator();\n    while((entry = iter.next()) != null) {\n      count++;\n      if (scratch.compareTo(entry) != 0) {\n        builder.add(Util.toIntsRef(entry, scratchIntsRef), empty);\n        scratch.copyBytes(entry);\n      }\n    }\n    \n    return count == 0 ? null : builder.finish();\n  }\n\n","sourceOld":"  /**\n   * Builds the final automaton from a list of entries.\n   */\n  private FST<Object> buildAutomaton(BytesRefSorter sorter) throws IOException {\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = new Builder<Object>(\n        FST.INPUT_TYPE.BYTE1, 0, 0, true, true, \n        shareMaxTailLength, outputs, null, false);\n    \n    BytesRef scratch = new BytesRef();\n    BytesRef entry;\n    final IntsRef scratchIntsRef = new IntsRef();\n    int count = 0;\n    BytesRefIterator iter = sorter.iterator();\n    while((entry = iter.next()) != null) {\n      count++;\n      if (scratch.compareTo(entry) != 0) {\n        builder.add(Util.toIntsRef(entry, scratchIntsRef), empty);\n        scratch.copyBytes(entry);\n      }\n    }\n    \n    return count == 0 ? null : builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#buildAutomaton(BytesRefSorter).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#buildAutomaton(BytesRefSorter).mjava","sourceNew":"  /**\n   * Builds the final automaton from a list of entries.\n   */\n  private FST<Object> buildAutomaton(BytesRefSorter sorter) throws IOException {\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = new Builder<Object>(\n        FST.INPUT_TYPE.BYTE1, 0, 0, true, true, \n        shareMaxTailLength, outputs, null, false, true);\n    \n    BytesRef scratch = new BytesRef();\n    BytesRef entry;\n    final IntsRef scratchIntsRef = new IntsRef();\n    int count = 0;\n    BytesRefIterator iter = sorter.iterator();\n    while((entry = iter.next()) != null) {\n      count++;\n      if (scratch.compareTo(entry) != 0) {\n        builder.add(Util.toIntsRef(entry, scratchIntsRef), empty);\n        scratch.copyBytes(entry);\n      }\n    }\n    \n    return count == 0 ? null : builder.finish();\n  }\n\n","sourceOld":"  /**\n   * Builds the final automaton from a list of entries.\n   */\n  private FST<Object> buildAutomaton(BytesRefSorter sorter) throws IOException {\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = new Builder<Object>(\n        FST.INPUT_TYPE.BYTE1, 0, 0, true, true, \n        shareMaxTailLength, outputs, null, false);\n    \n    BytesRef scratch = new BytesRef();\n    BytesRef entry;\n    final IntsRef scratchIntsRef = new IntsRef();\n    int count = 0;\n    BytesRefIterator iter = sorter.iterator();\n    while((entry = iter.next()) != null) {\n      count++;\n      if (scratch.compareTo(entry) != 0) {\n        builder.add(Util.toIntsRef(entry, scratchIntsRef), empty);\n        scratch.copyBytes(entry);\n      }\n    }\n    \n    return count == 0 ? null : builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0","date":1358188277,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#buildAutomaton(BytesRefSorter).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#buildAutomaton(BytesRefSorter).mjava","sourceNew":"  /**\n   * Builds the final automaton from a list of entries.\n   */\n  private FST<Object> buildAutomaton(BytesRefSorter sorter) throws IOException {\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = new Builder<Object>(\n        FST.INPUT_TYPE.BYTE1, 0, 0, true, true, \n        shareMaxTailLength, outputs, null, false, \n        PackedInts.DEFAULT, true, 15);\n    \n    BytesRef scratch = new BytesRef();\n    BytesRef entry;\n    final IntsRef scratchIntsRef = new IntsRef();\n    int count = 0;\n    BytesRefIterator iter = sorter.iterator();\n    while((entry = iter.next()) != null) {\n      count++;\n      if (scratch.compareTo(entry) != 0) {\n        builder.add(Util.toIntsRef(entry, scratchIntsRef), empty);\n        scratch.copyBytes(entry);\n      }\n    }\n    \n    return count == 0 ? null : builder.finish();\n  }\n\n","sourceOld":"  /**\n   * Builds the final automaton from a list of entries.\n   */\n  private FST<Object> buildAutomaton(BytesRefSorter sorter) throws IOException {\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = new Builder<Object>(\n        FST.INPUT_TYPE.BYTE1, 0, 0, true, true, \n        shareMaxTailLength, outputs, null, false, true);\n    \n    BytesRef scratch = new BytesRef();\n    BytesRef entry;\n    final IntsRef scratchIntsRef = new IntsRef();\n    int count = 0;\n    BytesRefIterator iter = sorter.iterator();\n    while((entry = iter.next()) != null) {\n      count++;\n      if (scratch.compareTo(entry) != 0) {\n        builder.add(Util.toIntsRef(entry, scratchIntsRef), empty);\n        scratch.copyBytes(entry);\n      }\n    }\n    \n    return count == 0 ? null : builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#buildAutomaton(BytesRefSorter).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#buildAutomaton(BytesRefSorter).mjava","sourceNew":"  /**\n   * Builds the final automaton from a list of entries.\n   */\n  private FST<Object> buildAutomaton(BytesRefSorter sorter) throws IOException {\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = new Builder<Object>(\n        FST.INPUT_TYPE.BYTE1, 0, 0, true, true, \n        shareMaxTailLength, outputs, null, false, \n        PackedInts.DEFAULT, true, 15);\n    \n    BytesRef scratch = new BytesRef();\n    BytesRef entry;\n    final IntsRef scratchIntsRef = new IntsRef();\n    int count = 0;\n    BytesRefIterator iter = sorter.iterator();\n    while((entry = iter.next()) != null) {\n      count++;\n      if (scratch.compareTo(entry) != 0) {\n        builder.add(Util.toIntsRef(entry, scratchIntsRef), empty);\n        scratch.copyBytes(entry);\n      }\n    }\n    \n    return count == 0 ? null : builder.finish();\n  }\n\n","sourceOld":"  /**\n   * Builds the final automaton from a list of entries.\n   */\n  private FST<Object> buildAutomaton(BytesRefSorter sorter) throws IOException {\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = new Builder<Object>(\n        FST.INPUT_TYPE.BYTE1, 0, 0, true, true, \n        shareMaxTailLength, outputs, null, false, true);\n    \n    BytesRef scratch = new BytesRef();\n    BytesRef entry;\n    final IntsRef scratchIntsRef = new IntsRef();\n    int count = 0;\n    BytesRefIterator iter = sorter.iterator();\n    while((entry = iter.next()) != null) {\n      count++;\n      if (scratch.compareTo(entry) != 0) {\n        builder.add(Util.toIntsRef(entry, scratchIntsRef), empty);\n        scratch.copyBytes(entry);\n      }\n    }\n    \n    return count == 0 ? null : builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#buildAutomaton(BytesRefSorter).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#buildAutomaton(BytesRefSorter).mjava","sourceNew":"  /**\n   * Builds the final automaton from a list of entries.\n   */\n  private FST<Object> buildAutomaton(BytesRefSorter sorter) throws IOException {\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = new Builder<>(\n        FST.INPUT_TYPE.BYTE1, 0, 0, true, true, \n        shareMaxTailLength, outputs, null, false, \n        PackedInts.DEFAULT, true, 15);\n    \n    BytesRef scratch = new BytesRef();\n    BytesRef entry;\n    final IntsRef scratchIntsRef = new IntsRef();\n    int count = 0;\n    BytesRefIterator iter = sorter.iterator();\n    while((entry = iter.next()) != null) {\n      count++;\n      if (scratch.compareTo(entry) != 0) {\n        builder.add(Util.toIntsRef(entry, scratchIntsRef), empty);\n        scratch.copyBytes(entry);\n      }\n    }\n    \n    return count == 0 ? null : builder.finish();\n  }\n\n","sourceOld":"  /**\n   * Builds the final automaton from a list of entries.\n   */\n  private FST<Object> buildAutomaton(BytesRefSorter sorter) throws IOException {\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = new Builder<Object>(\n        FST.INPUT_TYPE.BYTE1, 0, 0, true, true, \n        shareMaxTailLength, outputs, null, false, \n        PackedInts.DEFAULT, true, 15);\n    \n    BytesRef scratch = new BytesRef();\n    BytesRef entry;\n    final IntsRef scratchIntsRef = new IntsRef();\n    int count = 0;\n    BytesRefIterator iter = sorter.iterator();\n    while((entry = iter.next()) != null) {\n      count++;\n      if (scratch.compareTo(entry) != 0) {\n        builder.add(Util.toIntsRef(entry, scratchIntsRef), empty);\n        scratch.copyBytes(entry);\n      }\n    }\n    \n    return count == 0 ? null : builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f838187609fee3a1afa5f162f93c796046242c84","date":1406216791,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#buildAutomaton(BytesRefSorter).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#buildAutomaton(BytesRefSorter).mjava","sourceNew":"  /**\n   * Builds the final automaton from a list of entries.\n   */\n  private FST<Object> buildAutomaton(BytesRefSorter sorter) throws IOException {\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = new Builder<>(\n        FST.INPUT_TYPE.BYTE1, 0, 0, true, true, \n        shareMaxTailLength, outputs, false, \n        PackedInts.DEFAULT, true, 15);\n    \n    BytesRef scratch = new BytesRef();\n    BytesRef entry;\n    final IntsRef scratchIntsRef = new IntsRef();\n    int count = 0;\n    BytesRefIterator iter = sorter.iterator();\n    while((entry = iter.next()) != null) {\n      count++;\n      if (scratch.compareTo(entry) != 0) {\n        builder.add(Util.toIntsRef(entry, scratchIntsRef), empty);\n        scratch.copyBytes(entry);\n      }\n    }\n    \n    return count == 0 ? null : builder.finish();\n  }\n\n","sourceOld":"  /**\n   * Builds the final automaton from a list of entries.\n   */\n  private FST<Object> buildAutomaton(BytesRefSorter sorter) throws IOException {\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = new Builder<>(\n        FST.INPUT_TYPE.BYTE1, 0, 0, true, true, \n        shareMaxTailLength, outputs, null, false, \n        PackedInts.DEFAULT, true, 15);\n    \n    BytesRef scratch = new BytesRef();\n    BytesRef entry;\n    final IntsRef scratchIntsRef = new IntsRef();\n    int count = 0;\n    BytesRefIterator iter = sorter.iterator();\n    while((entry = iter.next()) != null) {\n      count++;\n      if (scratch.compareTo(entry) != 0) {\n        builder.add(Util.toIntsRef(entry, scratchIntsRef), empty);\n        scratch.copyBytes(entry);\n      }\n    }\n    \n    return count == 0 ? null : builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#buildAutomaton(BytesRefSorter).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#buildAutomaton(BytesRefSorter).mjava","sourceNew":"  /**\n   * Builds the final automaton from a list of entries.\n   */\n  private FST<Object> buildAutomaton(BytesRefSorter sorter) throws IOException {\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = new Builder<>(\n        FST.INPUT_TYPE.BYTE1, 0, 0, true, true, \n        shareMaxTailLength, outputs, false, \n        PackedInts.DEFAULT, true, 15);\n    \n    BytesRefBuilder scratch = new BytesRefBuilder();\n    BytesRef entry;\n    final IntsRefBuilder scratchIntsRef = new IntsRefBuilder();\n    int count = 0;\n    BytesRefIterator iter = sorter.iterator();\n    while((entry = iter.next()) != null) {\n      count++;\n      if (scratch.get().compareTo(entry) != 0) {\n        builder.add(Util.toIntsRef(entry, scratchIntsRef), empty);\n        scratch.copyBytes(entry);\n      }\n    }\n    \n    return count == 0 ? null : builder.finish();\n  }\n\n","sourceOld":"  /**\n   * Builds the final automaton from a list of entries.\n   */\n  private FST<Object> buildAutomaton(BytesRefSorter sorter) throws IOException {\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = new Builder<>(\n        FST.INPUT_TYPE.BYTE1, 0, 0, true, true, \n        shareMaxTailLength, outputs, false, \n        PackedInts.DEFAULT, true, 15);\n    \n    BytesRef scratch = new BytesRef();\n    BytesRef entry;\n    final IntsRef scratchIntsRef = new IntsRef();\n    int count = 0;\n    BytesRefIterator iter = sorter.iterator();\n    while((entry = iter.next()) != null) {\n      count++;\n      if (scratch.compareTo(entry) != 0) {\n        builder.add(Util.toIntsRef(entry, scratchIntsRef), empty);\n        scratch.copyBytes(entry);\n      }\n    }\n    \n    return count == 0 ? null : builder.finish();\n  }\n\n","bugFix":["7bf07f4ebadc7539de83a531e64678350d78ca26","1ec890fad2ea96317f4429e0aa0085bb25673641"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6244579a467d5f2673ac98265d74bddbea1a8114","date":1478786509,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#buildAutomaton(BytesRefSorter).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#buildAutomaton(BytesRefSorter).mjava","sourceNew":"  /**\n   * Builds the final automaton from a list of entries.\n   */\n  private FST<Object> buildAutomaton(BytesRefSorter sorter) throws IOException {\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = new Builder<>(\n        FST.INPUT_TYPE.BYTE1, 0, 0, true, true, \n        shareMaxTailLength, outputs, true, 15);\n    \n    BytesRefBuilder scratch = new BytesRefBuilder();\n    BytesRef entry;\n    final IntsRefBuilder scratchIntsRef = new IntsRefBuilder();\n    int count = 0;\n    BytesRefIterator iter = sorter.iterator();\n    while((entry = iter.next()) != null) {\n      count++;\n      if (scratch.get().compareTo(entry) != 0) {\n        builder.add(Util.toIntsRef(entry, scratchIntsRef), empty);\n        scratch.copyBytes(entry);\n      }\n    }\n    \n    return count == 0 ? null : builder.finish();\n  }\n\n","sourceOld":"  /**\n   * Builds the final automaton from a list of entries.\n   */\n  private FST<Object> buildAutomaton(BytesRefSorter sorter) throws IOException {\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = new Builder<>(\n        FST.INPUT_TYPE.BYTE1, 0, 0, true, true, \n        shareMaxTailLength, outputs, false, \n        PackedInts.DEFAULT, true, 15);\n    \n    BytesRefBuilder scratch = new BytesRefBuilder();\n    BytesRef entry;\n    final IntsRefBuilder scratchIntsRef = new IntsRefBuilder();\n    int count = 0;\n    BytesRefIterator iter = sorter.iterator();\n    while((entry = iter.next()) != null) {\n      count++;\n      if (scratch.get().compareTo(entry) != 0) {\n        builder.add(Util.toIntsRef(entry, scratchIntsRef), empty);\n        scratch.copyBytes(entry);\n      }\n    }\n    \n    return count == 0 ? null : builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#buildAutomaton(BytesRefSorter).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#buildAutomaton(BytesRefSorter).mjava","sourceNew":"  /**\n   * Builds the final automaton from a list of entries.\n   */\n  private FST<Object> buildAutomaton(BytesRefSorter sorter) throws IOException {\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = new Builder<>(\n        FST.INPUT_TYPE.BYTE1, 0, 0, true, true, \n        shareMaxTailLength, outputs, true, 15);\n    \n    BytesRefBuilder scratch = new BytesRefBuilder();\n    BytesRef entry;\n    final IntsRefBuilder scratchIntsRef = new IntsRefBuilder();\n    int count = 0;\n    BytesRefIterator iter = sorter.iterator();\n    while((entry = iter.next()) != null) {\n      count++;\n      if (scratch.get().compareTo(entry) != 0) {\n        builder.add(Util.toIntsRef(entry, scratchIntsRef), empty);\n        scratch.copyBytes(entry);\n      }\n    }\n    \n    return count == 0 ? null : builder.finish();\n  }\n\n","sourceOld":"  /**\n   * Builds the final automaton from a list of entries.\n   */\n  private FST<Object> buildAutomaton(BytesRefSorter sorter) throws IOException {\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = new Builder<>(\n        FST.INPUT_TYPE.BYTE1, 0, 0, true, true, \n        shareMaxTailLength, outputs, false, \n        PackedInts.DEFAULT, true, 15);\n    \n    BytesRefBuilder scratch = new BytesRefBuilder();\n    BytesRef entry;\n    final IntsRefBuilder scratchIntsRef = new IntsRefBuilder();\n    int count = 0;\n    BytesRefIterator iter = sorter.iterator();\n    while((entry = iter.next()) != null) {\n      count++;\n      if (scratch.get().compareTo(entry) != 0) {\n        builder.add(Util.toIntsRef(entry, scratchIntsRef), empty);\n        scratch.copyBytes(entry);\n      }\n    }\n    \n    return count == 0 ? null : builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae67e1f82a53594208ca929f382ee861dad3d7a8","date":1557134375,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#buildAutomaton(BytesRefSorter).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#buildAutomaton(BytesRefSorter).mjava","sourceNew":"  /**\n   * Builds the final automaton from a list of entries.\n   */\n  private FST<Object> buildAutomaton(BytesRefSorter sorter) throws IOException {\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = new Builder<>(\n        FST.INPUT_TYPE.BYTE1, 0, 0, true, true, \n        shareMaxTailLength, outputs, true, 15, true);\n    \n    BytesRefBuilder scratch = new BytesRefBuilder();\n    BytesRef entry;\n    final IntsRefBuilder scratchIntsRef = new IntsRefBuilder();\n    int count = 0;\n    BytesRefIterator iter = sorter.iterator();\n    while((entry = iter.next()) != null) {\n      count++;\n      if (scratch.get().compareTo(entry) != 0) {\n        builder.add(Util.toIntsRef(entry, scratchIntsRef), empty);\n        scratch.copyBytes(entry);\n      }\n    }\n    \n    return count == 0 ? null : builder.finish();\n  }\n\n","sourceOld":"  /**\n   * Builds the final automaton from a list of entries.\n   */\n  private FST<Object> buildAutomaton(BytesRefSorter sorter) throws IOException {\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = new Builder<>(\n        FST.INPUT_TYPE.BYTE1, 0, 0, true, true, \n        shareMaxTailLength, outputs, true, 15);\n    \n    BytesRefBuilder scratch = new BytesRefBuilder();\n    BytesRef entry;\n    final IntsRefBuilder scratchIntsRef = new IntsRefBuilder();\n    int count = 0;\n    BytesRefIterator iter = sorter.iterator();\n    while((entry = iter.next()) != null) {\n      count++;\n      if (scratch.get().compareTo(entry) != 0) {\n        builder.add(Util.toIntsRef(entry, scratchIntsRef), empty);\n        scratch.copyBytes(entry);\n      }\n    }\n    \n    return count == 0 ? null : builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59a1204a92958bea883656169000a87a6c55c2d0","date":1562106073,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#buildAutomaton(BytesRefSorter).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#buildAutomaton(BytesRefSorter).mjava","sourceNew":"  /**\n   * Builds the final automaton from a list of entries.\n   */\n  private FST<Object> buildAutomaton(BytesRefSorter sorter) throws IOException {\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = new Builder<>(\n        FST.INPUT_TYPE.BYTE1, 0, 0, true, true, \n        shareMaxTailLength, outputs, true, 15);\n    \n    BytesRefBuilder scratch = new BytesRefBuilder();\n    BytesRef entry;\n    final IntsRefBuilder scratchIntsRef = new IntsRefBuilder();\n    int count = 0;\n    BytesRefIterator iter = sorter.iterator();\n    while((entry = iter.next()) != null) {\n      count++;\n      if (scratch.get().compareTo(entry) != 0) {\n        builder.add(Util.toIntsRef(entry, scratchIntsRef), empty);\n        scratch.copyBytes(entry);\n      }\n    }\n    \n    return count == 0 ? null : builder.finish();\n  }\n\n","sourceOld":"  /**\n   * Builds the final automaton from a list of entries.\n   */\n  private FST<Object> buildAutomaton(BytesRefSorter sorter) throws IOException {\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = new Builder<>(\n        FST.INPUT_TYPE.BYTE1, 0, 0, true, true, \n        shareMaxTailLength, outputs, true, 15, true);\n    \n    BytesRefBuilder scratch = new BytesRefBuilder();\n    BytesRef entry;\n    final IntsRefBuilder scratchIntsRef = new IntsRefBuilder();\n    int count = 0;\n    BytesRefIterator iter = sorter.iterator();\n    while((entry = iter.next()) != null) {\n      count++;\n      if (scratch.get().compareTo(entry) != 0) {\n        builder.add(Util.toIntsRef(entry, scratchIntsRef), empty);\n        scratch.copyBytes(entry);\n      }\n    }\n    \n    return count == 0 ? null : builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f5661e6a04d3172e262ad741b717924f2f1b6a5","date":1576244274,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#buildAutomaton(BytesRefSorter).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#buildAutomaton(BytesRefSorter).mjava","sourceNew":"  /**\n   * Builds the final automaton from a list of entries.\n   */\n  private FST<Object> buildAutomaton(BytesRefSorter sorter) throws IOException {\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final FSTCompiler<Object> fstCompiler = new FSTCompiler.Builder<>(FST.INPUT_TYPE.BYTE1, outputs)\n        .shareMaxTailLength(shareMaxTailLength).build();\n\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    BytesRef entry;\n    final IntsRefBuilder scratchIntsRef = new IntsRefBuilder();\n    int count = 0;\n    BytesRefIterator iter = sorter.iterator();\n    while((entry = iter.next()) != null) {\n      count++;\n      if (scratch.get().compareTo(entry) != 0) {\n        fstCompiler.add(Util.toIntsRef(entry, scratchIntsRef), empty);\n        scratch.copyBytes(entry);\n      }\n    }\n    \n    return count == 0 ? null : fstCompiler.compile();\n  }\n\n","sourceOld":"  /**\n   * Builds the final automaton from a list of entries.\n   */\n  private FST<Object> buildAutomaton(BytesRefSorter sorter) throws IOException {\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = new Builder<>(\n        FST.INPUT_TYPE.BYTE1, 0, 0, true, true, \n        shareMaxTailLength, outputs, true, 15);\n    \n    BytesRefBuilder scratch = new BytesRefBuilder();\n    BytesRef entry;\n    final IntsRefBuilder scratchIntsRef = new IntsRefBuilder();\n    int count = 0;\n    BytesRefIterator iter = sorter.iterator();\n    while((entry = iter.next()) != null) {\n      count++;\n      if (scratch.get().compareTo(entry) != 0) {\n        builder.add(Util.toIntsRef(entry, scratchIntsRef), empty);\n        scratch.copyBytes(entry);\n      }\n    }\n    \n    return count == 0 ? null : builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","date":1576247714,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#buildAutomaton(BytesRefSorter).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#buildAutomaton(BytesRefSorter).mjava","sourceNew":"  /**\n   * Builds the final automaton from a list of entries.\n   */\n  private FST<Object> buildAutomaton(BytesRefSorter sorter) throws IOException {\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final FSTCompiler<Object> fstCompiler = new FSTCompiler.Builder<>(FST.INPUT_TYPE.BYTE1, outputs)\n        .shareMaxTailLength(shareMaxTailLength).build();\n\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    BytesRef entry;\n    final IntsRefBuilder scratchIntsRef = new IntsRefBuilder();\n    int count = 0;\n    BytesRefIterator iter = sorter.iterator();\n    while((entry = iter.next()) != null) {\n      count++;\n      if (scratch.get().compareTo(entry) != 0) {\n        fstCompiler.add(Util.toIntsRef(entry, scratchIntsRef), empty);\n        scratch.copyBytes(entry);\n      }\n    }\n    \n    return count == 0 ? null : fstCompiler.compile();\n  }\n\n","sourceOld":"  /**\n   * Builds the final automaton from a list of entries.\n   */\n  private FST<Object> buildAutomaton(BytesRefSorter sorter) throws IOException {\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = new Builder<>(\n        FST.INPUT_TYPE.BYTE1, 0, 0, true, true, \n        shareMaxTailLength, outputs, true, 15);\n    \n    BytesRefBuilder scratch = new BytesRefBuilder();\n    BytesRef entry;\n    final IntsRefBuilder scratchIntsRef = new IntsRefBuilder();\n    int count = 0;\n    BytesRefIterator iter = sorter.iterator();\n    while((entry = iter.next()) != null) {\n      count++;\n      if (scratch.get().compareTo(entry) != 0) {\n        builder.add(Util.toIntsRef(entry, scratchIntsRef), empty);\n        scratch.copyBytes(entry);\n      }\n    }\n    \n    return count == 0 ? null : builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0":["fb8af2aec0a8574cf50cad6939d4475179595eca"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["4e6354dd7c71fe122926fc53d7d29f715b1283db","d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"6244579a467d5f2673ac98265d74bddbea1a8114":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"fb8af2aec0a8574cf50cad6939d4475179595eca":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","6244579a467d5f2673ac98265d74bddbea1a8114"],"ae67e1f82a53594208ca929f382ee861dad3d7a8":["6244579a467d5f2673ac98265d74bddbea1a8114"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["f838187609fee3a1afa5f162f93c796046242c84"],"f838187609fee3a1afa5f162f93c796046242c84":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"59a1204a92958bea883656169000a87a6c55c2d0":["ae67e1f82a53594208ca929f382ee861dad3d7a8"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":["59a1204a92958bea883656169000a87a6c55c2d0","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["59a1204a92958bea883656169000a87a6c55c2d0"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["b89678825b68eccaf09e6ab71675fc0b0af1e099","fb8af2aec0a8574cf50cad6939d4475179595eca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f5661e6a04d3172e262ad741b717924f2f1b6a5"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["f838187609fee3a1afa5f162f93c796046242c84"],"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","8917bfede3b4ca30f4305c1e391e9218959cd723"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"fb8af2aec0a8574cf50cad6939d4475179595eca":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"6244579a467d5f2673ac98265d74bddbea1a8114":["199dfa410f1fdbfd3294106b04096cce5ed34b21","ae67e1f82a53594208ca929f382ee861dad3d7a8"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["6244579a467d5f2673ac98265d74bddbea1a8114","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"ae67e1f82a53594208ca929f382ee861dad3d7a8":["59a1204a92958bea883656169000a87a6c55c2d0"],"f838187609fee3a1afa5f162f93c796046242c84":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"59a1204a92958bea883656169000a87a6c55c2d0":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fb8af2aec0a8574cf50cad6939d4475179595eca","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":[],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["8917bfede3b4ca30f4305c1e391e9218959cd723"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8917bfede3b4ca30f4305c1e391e9218959cd723","199dfa410f1fdbfd3294106b04096cce5ed34b21","c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}