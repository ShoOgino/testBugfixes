{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#Lucene40StoredFieldsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#Lucene40StoredFieldsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#Lucene40StoredFieldsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  public Lucene40StoredFieldsReader(Directory d, SegmentInfo si, FieldInfos fn, IOContext context) throws IOException {\n    final String segment = si.name;\n    boolean success = false;\n    fieldInfos = fn;\n    try {\n      fieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", Lucene40StoredFieldsWriter.FIELDS_EXTENSION), context);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", Lucene40StoredFieldsWriter.FIELDS_INDEX_EXTENSION);\n      indexStream = d.openInput(indexStreamFN, context);\n      \n      // its a 4.0 codec: so its not too-old, its corrupt.\n      // TODO: change this to CodecUtil.checkHeader\n      if (Lucene40StoredFieldsWriter.FORMAT_CURRENT != indexStream.readInt()) {\n        throw new CorruptIndexException(\"unexpected fdx header: \" + indexStream);\n      }\n\n      final long indexSize = indexStream.length() - FORMAT_SIZE;\n      this.size = (int) (indexSize >> 3);\n      // Verify two sources of \"maxDoc\" agree:\n      if (this.size != si.docCount) {\n        throw new CorruptIndexException(\"doc counts differ for segment \" + segment + \": fieldsReader shows \" + this.size + \" but segmentInfo shows \" + si.docCount);\n      }\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  public Lucene40StoredFieldsReader(Directory d, SegmentInfo si, FieldInfos fn, IOContext context) throws IOException {\n    final String segment = si.name;\n    boolean success = false;\n    fieldInfos = fn;\n    try {\n      fieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", Lucene40StoredFieldsWriter.FIELDS_EXTENSION), context);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", Lucene40StoredFieldsWriter.FIELDS_INDEX_EXTENSION);\n      indexStream = d.openInput(indexStreamFN, context);\n      \n      // its a 4.0 codec: so its not too-old, its corrupt.\n      // TODO: change this to CodecUtil.checkHeader\n      if (Lucene40StoredFieldsWriter.FORMAT_CURRENT != indexStream.readInt()) {\n        throw new CorruptIndexException(\"unexpected fdx header: \" + indexStream);\n      }\n\n      final long indexSize = indexStream.length() - FORMAT_SIZE;\n      this.size = (int) (indexSize >> 3);\n      // Verify two sources of \"maxDoc\" agree:\n      if (this.size != si.docCount) {\n        throw new CorruptIndexException(\"doc counts differ for segment \" + segment + \": fieldsReader shows \" + this.size + \" but segmentInfo shows \" + si.docCount);\n      }\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32e43f282bea25b8cc26e4a842d98deafd617e9b","date":1337759516,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#Lucene40StoredFieldsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#Lucene40StoredFieldsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  public Lucene40StoredFieldsReader(Directory d, SegmentInfo si, FieldInfos fn, IOContext context) throws IOException {\n    final String segment = si.name;\n    boolean success = false;\n    fieldInfos = fn;\n    try {\n      fieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", FIELDS_EXTENSION), context);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", FIELDS_INDEX_EXTENSION);\n      indexStream = d.openInput(indexStreamFN, context);\n      \n      CodecUtil.checkHeader(indexStream, CODEC_NAME_IDX, VERSION_START, VERSION_CURRENT);\n      CodecUtil.checkHeader(fieldsStream, CODEC_NAME_DAT, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_DAT == fieldsStream.getFilePointer();\n      assert HEADER_LENGTH_IDX == indexStream.getFilePointer();\n      final long indexSize = indexStream.length() - HEADER_LENGTH_IDX;\n      this.size = (int) (indexSize >> 3);\n      // Verify two sources of \"maxDoc\" agree:\n      if (this.size != si.docCount) {\n        throw new CorruptIndexException(\"doc counts differ for segment \" + segment + \": fieldsReader shows \" + this.size + \" but segmentInfo shows \" + si.docCount);\n      }\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  public Lucene40StoredFieldsReader(Directory d, SegmentInfo si, FieldInfos fn, IOContext context) throws IOException {\n    final String segment = si.name;\n    boolean success = false;\n    fieldInfos = fn;\n    try {\n      fieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", Lucene40StoredFieldsWriter.FIELDS_EXTENSION), context);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", Lucene40StoredFieldsWriter.FIELDS_INDEX_EXTENSION);\n      indexStream = d.openInput(indexStreamFN, context);\n      \n      // its a 4.0 codec: so its not too-old, its corrupt.\n      // TODO: change this to CodecUtil.checkHeader\n      if (Lucene40StoredFieldsWriter.FORMAT_CURRENT != indexStream.readInt()) {\n        throw new CorruptIndexException(\"unexpected fdx header: \" + indexStream);\n      }\n\n      final long indexSize = indexStream.length() - FORMAT_SIZE;\n      this.size = (int) (indexSize >> 3);\n      // Verify two sources of \"maxDoc\" agree:\n      if (this.size != si.docCount) {\n        throw new CorruptIndexException(\"doc counts differ for segment \" + segment + \": fieldsReader shows \" + this.size + \" but segmentInfo shows \" + si.docCount);\n      }\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3599646b4d4c346cf74d334813488b8b337b5bf5","date":1337790261,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#Lucene40StoredFieldsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#Lucene40StoredFieldsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  public Lucene40StoredFieldsReader(Directory d, SegmentInfo si, FieldInfos fn, IOContext context) throws IOException {\n    final String segment = si.name;\n    boolean success = false;\n    fieldInfos = fn;\n    try {\n      fieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", FIELDS_EXTENSION), context);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", FIELDS_INDEX_EXTENSION);\n      indexStream = d.openInput(indexStreamFN, context);\n      \n      CodecUtil.checkHeader(indexStream, CODEC_NAME_IDX, VERSION_START, VERSION_CURRENT);\n      CodecUtil.checkHeader(fieldsStream, CODEC_NAME_DAT, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_DAT == fieldsStream.getFilePointer();\n      assert HEADER_LENGTH_IDX == indexStream.getFilePointer();\n      final long indexSize = indexStream.length() - HEADER_LENGTH_IDX;\n      this.size = (int) (indexSize >> 3);\n      // Verify two sources of \"maxDoc\" agree:\n      if (this.size != si.docCount) {\n        throw new CorruptIndexException(\"doc counts differ for segment \" + segment + \": fieldsReader shows \" + this.size + \" but segmentInfo shows \" + si.docCount);\n      }\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  public Lucene40StoredFieldsReader(Directory d, SegmentInfo si, FieldInfos fn, IOContext context) throws IOException {\n    final String segment = si.name;\n    boolean success = false;\n    fieldInfos = fn;\n    try {\n      fieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", Lucene40StoredFieldsWriter.FIELDS_EXTENSION), context);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", Lucene40StoredFieldsWriter.FIELDS_INDEX_EXTENSION);\n      indexStream = d.openInput(indexStreamFN, context);\n      \n      // its a 4.0 codec: so its not too-old, its corrupt.\n      // TODO: change this to CodecUtil.checkHeader\n      if (Lucene40StoredFieldsWriter.FORMAT_CURRENT != indexStream.readInt()) {\n        throw new CorruptIndexException(\"unexpected fdx header: \" + indexStream);\n      }\n\n      final long indexSize = indexStream.length() - FORMAT_SIZE;\n      this.size = (int) (indexSize >> 3);\n      // Verify two sources of \"maxDoc\" agree:\n      if (this.size != si.docCount) {\n        throw new CorruptIndexException(\"doc counts differ for segment \" + segment + \": fieldsReader shows \" + this.size + \" but segmentInfo shows \" + si.docCount);\n      }\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"203d7d3cb7712e10ef33009a63247ae40c302d7a","date":1337798111,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#Lucene40StoredFieldsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#Lucene40StoredFieldsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  public Lucene40StoredFieldsReader(Directory d, SegmentInfo si, FieldInfos fn, IOContext context) throws IOException {\n    final String segment = si.name;\n    boolean success = false;\n    fieldInfos = fn;\n    try {\n      fieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", FIELDS_EXTENSION), context);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", FIELDS_INDEX_EXTENSION);\n      indexStream = d.openInput(indexStreamFN, context);\n      \n      CodecUtil.checkHeader(indexStream, CODEC_NAME_IDX, VERSION_START, VERSION_CURRENT);\n      CodecUtil.checkHeader(fieldsStream, CODEC_NAME_DAT, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_DAT == fieldsStream.getFilePointer();\n      assert HEADER_LENGTH_IDX == indexStream.getFilePointer();\n      final long indexSize = indexStream.length() - HEADER_LENGTH_IDX;\n      this.size = (int) (indexSize >> 3);\n      // Verify two sources of \"maxDoc\" agree:\n      if (this.size != si.getDocCount()) {\n        throw new CorruptIndexException(\"doc counts differ for segment \" + segment + \": fieldsReader shows \" + this.size + \" but segmentInfo shows \" + si.getDocCount());\n      }\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  public Lucene40StoredFieldsReader(Directory d, SegmentInfo si, FieldInfos fn, IOContext context) throws IOException {\n    final String segment = si.name;\n    boolean success = false;\n    fieldInfos = fn;\n    try {\n      fieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", FIELDS_EXTENSION), context);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", FIELDS_INDEX_EXTENSION);\n      indexStream = d.openInput(indexStreamFN, context);\n      \n      CodecUtil.checkHeader(indexStream, CODEC_NAME_IDX, VERSION_START, VERSION_CURRENT);\n      CodecUtil.checkHeader(fieldsStream, CODEC_NAME_DAT, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_DAT == fieldsStream.getFilePointer();\n      assert HEADER_LENGTH_IDX == indexStream.getFilePointer();\n      final long indexSize = indexStream.length() - HEADER_LENGTH_IDX;\n      this.size = (int) (indexSize >> 3);\n      // Verify two sources of \"maxDoc\" agree:\n      if (this.size != si.docCount) {\n        throw new CorruptIndexException(\"doc counts differ for segment \" + segment + \": fieldsReader shows \" + this.size + \" but segmentInfo shows \" + si.docCount);\n      }\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["9a70ce9bddc6f985feb8e5e182aebe20872328d4","9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#Lucene40StoredFieldsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#Lucene40StoredFieldsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  public Lucene40StoredFieldsReader(Directory d, SegmentInfo si, FieldInfos fn, IOContext context) throws IOException {\n    final String segment = si.name;\n    boolean success = false;\n    fieldInfos = fn;\n    try {\n      fieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", FIELDS_EXTENSION), context);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", FIELDS_INDEX_EXTENSION);\n      indexStream = d.openInput(indexStreamFN, context);\n      \n      CodecUtil.checkHeader(indexStream, CODEC_NAME_IDX, VERSION_START, VERSION_CURRENT);\n      CodecUtil.checkHeader(fieldsStream, CODEC_NAME_DAT, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_DAT == fieldsStream.getFilePointer();\n      assert HEADER_LENGTH_IDX == indexStream.getFilePointer();\n      final long indexSize = indexStream.length() - HEADER_LENGTH_IDX;\n      this.size = (int) (indexSize >> 3);\n      // Verify two sources of \"maxDoc\" agree:\n      if (this.size != si.getDocCount()) {\n        throw new CorruptIndexException(\"doc counts differ for segment \" + segment + \": fieldsReader shows \" + this.size + \" but segmentInfo shows \" + si.getDocCount());\n      }\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  public Lucene40StoredFieldsReader(Directory d, SegmentInfo si, FieldInfos fn, IOContext context) throws IOException {\n    final String segment = si.name;\n    boolean success = false;\n    fieldInfos = fn;\n    try {\n      fieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", FIELDS_EXTENSION), context);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", FIELDS_INDEX_EXTENSION);\n      indexStream = d.openInput(indexStreamFN, context);\n      \n      CodecUtil.checkHeader(indexStream, CODEC_NAME_IDX, VERSION_START, VERSION_CURRENT);\n      CodecUtil.checkHeader(fieldsStream, CODEC_NAME_DAT, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_DAT == fieldsStream.getFilePointer();\n      assert HEADER_LENGTH_IDX == indexStream.getFilePointer();\n      final long indexSize = indexStream.length() - HEADER_LENGTH_IDX;\n      this.size = (int) (indexSize >> 3);\n      // Verify two sources of \"maxDoc\" agree:\n      if (this.size != si.docCount) {\n        throw new CorruptIndexException(\"doc counts differ for segment \" + segment + \": fieldsReader shows \" + this.size + \" but segmentInfo shows \" + si.docCount);\n      }\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"519435fc0d6082a1b8081f9492b714f716877437","date":1348258553,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#Lucene40StoredFieldsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#Lucene40StoredFieldsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  /** Sole constructor. */\n  public Lucene40StoredFieldsReader(Directory d, SegmentInfo si, FieldInfos fn, IOContext context) throws IOException {\n    final String segment = si.name;\n    boolean success = false;\n    fieldInfos = fn;\n    try {\n      fieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", FIELDS_EXTENSION), context);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", FIELDS_INDEX_EXTENSION);\n      indexStream = d.openInput(indexStreamFN, context);\n      \n      CodecUtil.checkHeader(indexStream, CODEC_NAME_IDX, VERSION_START, VERSION_CURRENT);\n      CodecUtil.checkHeader(fieldsStream, CODEC_NAME_DAT, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_DAT == fieldsStream.getFilePointer();\n      assert HEADER_LENGTH_IDX == indexStream.getFilePointer();\n      final long indexSize = indexStream.length() - HEADER_LENGTH_IDX;\n      this.size = (int) (indexSize >> 3);\n      // Verify two sources of \"maxDoc\" agree:\n      if (this.size != si.getDocCount()) {\n        throw new CorruptIndexException(\"doc counts differ for segment \" + segment + \": fieldsReader shows \" + this.size + \" but segmentInfo shows \" + si.getDocCount());\n      }\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  public Lucene40StoredFieldsReader(Directory d, SegmentInfo si, FieldInfos fn, IOContext context) throws IOException {\n    final String segment = si.name;\n    boolean success = false;\n    fieldInfos = fn;\n    try {\n      fieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", FIELDS_EXTENSION), context);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", FIELDS_INDEX_EXTENSION);\n      indexStream = d.openInput(indexStreamFN, context);\n      \n      CodecUtil.checkHeader(indexStream, CODEC_NAME_IDX, VERSION_START, VERSION_CURRENT);\n      CodecUtil.checkHeader(fieldsStream, CODEC_NAME_DAT, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_DAT == fieldsStream.getFilePointer();\n      assert HEADER_LENGTH_IDX == indexStream.getFilePointer();\n      final long indexSize = indexStream.length() - HEADER_LENGTH_IDX;\n      this.size = (int) (indexSize >> 3);\n      // Verify two sources of \"maxDoc\" agree:\n      if (this.size != si.getDocCount()) {\n        throw new CorruptIndexException(\"doc counts differ for segment \" + segment + \": fieldsReader shows \" + this.size + \" but segmentInfo shows \" + si.getDocCount());\n      }\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1bf819846fb54a635eb297e36e7c6196d67f8273","date":1349447995,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#Lucene40StoredFieldsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#Lucene40StoredFieldsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  /** Sole constructor. */\n  public Lucene40StoredFieldsReader(Directory d, SegmentInfo si, FieldInfos fn, IOContext context) throws IOException {\n    final String segment = si.name;\n    boolean success = false;\n    fieldInfos = fn;\n    try {\n      fieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", FIELDS_EXTENSION), context);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", FIELDS_INDEX_EXTENSION);\n      indexStream = d.openInput(indexStreamFN, context);\n      \n      CodecUtil.checkHeader(indexStream, CODEC_NAME_IDX, VERSION_START, VERSION_CURRENT);\n      CodecUtil.checkHeader(fieldsStream, CODEC_NAME_DAT, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_DAT == fieldsStream.getFilePointer();\n      assert HEADER_LENGTH_IDX == indexStream.getFilePointer();\n      final long indexSize = indexStream.length() - HEADER_LENGTH_IDX;\n      this.size = (int) (indexSize >> 3);\n      // Verify two sources of \"maxDoc\" agree:\n      if (this.size != si.getDocCount()) {\n        throw new CorruptIndexException(\"doc counts differ for segment \" + segment + \": fieldsReader shows \" + this.size + \" but segmentInfo shows \" + si.getDocCount());\n      }\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        try {\n          close();\n        } catch (Throwable t) {} // ensure we throw our original exception\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public Lucene40StoredFieldsReader(Directory d, SegmentInfo si, FieldInfos fn, IOContext context) throws IOException {\n    final String segment = si.name;\n    boolean success = false;\n    fieldInfos = fn;\n    try {\n      fieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", FIELDS_EXTENSION), context);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", FIELDS_INDEX_EXTENSION);\n      indexStream = d.openInput(indexStreamFN, context);\n      \n      CodecUtil.checkHeader(indexStream, CODEC_NAME_IDX, VERSION_START, VERSION_CURRENT);\n      CodecUtil.checkHeader(fieldsStream, CODEC_NAME_DAT, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_DAT == fieldsStream.getFilePointer();\n      assert HEADER_LENGTH_IDX == indexStream.getFilePointer();\n      final long indexSize = indexStream.length() - HEADER_LENGTH_IDX;\n      this.size = (int) (indexSize >> 3);\n      // Verify two sources of \"maxDoc\" agree:\n      if (this.size != si.getDocCount()) {\n        throw new CorruptIndexException(\"doc counts differ for segment \" + segment + \": fieldsReader shows \" + this.size + \" but segmentInfo shows \" + si.getDocCount());\n      }\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#Lucene40StoredFieldsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#Lucene40StoredFieldsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  /** Sole constructor. */\n  public Lucene40StoredFieldsReader(Directory d, SegmentInfo si, FieldInfos fn, IOContext context) throws IOException {\n    final String segment = si.name;\n    boolean success = false;\n    fieldInfos = fn;\n    try {\n      fieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", FIELDS_EXTENSION), context);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", FIELDS_INDEX_EXTENSION);\n      indexStream = d.openInput(indexStreamFN, context);\n      \n      CodecUtil.checkHeader(indexStream, CODEC_NAME_IDX, VERSION_START, VERSION_CURRENT);\n      CodecUtil.checkHeader(fieldsStream, CODEC_NAME_DAT, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_DAT == fieldsStream.getFilePointer();\n      assert HEADER_LENGTH_IDX == indexStream.getFilePointer();\n      final long indexSize = indexStream.length() - HEADER_LENGTH_IDX;\n      this.size = (int) (indexSize >> 3);\n      // Verify two sources of \"maxDoc\" agree:\n      if (this.size != si.getDocCount()) {\n        throw new CorruptIndexException(\"doc counts differ for segment \" + segment + \": fieldsReader shows \" + this.size + \" but segmentInfo shows \" + si.getDocCount());\n      }\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        try {\n          close();\n        } catch (Throwable t) {} // ensure we throw our original exception\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public Lucene40StoredFieldsReader(Directory d, SegmentInfo si, FieldInfos fn, IOContext context) throws IOException {\n    final String segment = si.name;\n    boolean success = false;\n    fieldInfos = fn;\n    try {\n      fieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", FIELDS_EXTENSION), context);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", FIELDS_INDEX_EXTENSION);\n      indexStream = d.openInput(indexStreamFN, context);\n      \n      CodecUtil.checkHeader(indexStream, CODEC_NAME_IDX, VERSION_START, VERSION_CURRENT);\n      CodecUtil.checkHeader(fieldsStream, CODEC_NAME_DAT, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_DAT == fieldsStream.getFilePointer();\n      assert HEADER_LENGTH_IDX == indexStream.getFilePointer();\n      final long indexSize = indexStream.length() - HEADER_LENGTH_IDX;\n      this.size = (int) (indexSize >> 3);\n      // Verify two sources of \"maxDoc\" agree:\n      if (this.size != si.getDocCount()) {\n        throw new CorruptIndexException(\"doc counts differ for segment \" + segment + \": fieldsReader shows \" + this.size + \" but segmentInfo shows \" + si.getDocCount());\n      }\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        try {\n          close();\n        } catch (Throwable t) {} // ensure we throw our original exception\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#Lucene40StoredFieldsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#Lucene40StoredFieldsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  /** Sole constructor. */\n  public Lucene40StoredFieldsReader(Directory d, SegmentInfo si, FieldInfos fn, IOContext context) throws IOException {\n    final String segment = si.name;\n    boolean success = false;\n    fieldInfos = fn;\n    try {\n      fieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", FIELDS_EXTENSION), context);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", FIELDS_INDEX_EXTENSION);\n      indexStream = d.openInput(indexStreamFN, context);\n      \n      CodecUtil.checkHeader(indexStream, CODEC_NAME_IDX, VERSION_START, VERSION_CURRENT);\n      CodecUtil.checkHeader(fieldsStream, CODEC_NAME_DAT, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_DAT == fieldsStream.getFilePointer();\n      assert HEADER_LENGTH_IDX == indexStream.getFilePointer();\n      final long indexSize = indexStream.length() - HEADER_LENGTH_IDX;\n      this.size = (int) (indexSize >> 3);\n      // Verify two sources of \"maxDoc\" agree:\n      if (this.size != si.getDocCount()) {\n        throw new CorruptIndexException(\"doc counts differ for segment \" + segment + \": fieldsReader shows \" + this.size + \" but segmentInfo shows \" + si.getDocCount());\n      }\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        try {\n          close();\n        } catch (Throwable t) {} // ensure we throw our original exception\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public Lucene40StoredFieldsReader(Directory d, SegmentInfo si, FieldInfos fn, IOContext context) throws IOException {\n    final String segment = si.name;\n    boolean success = false;\n    fieldInfos = fn;\n    try {\n      fieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", FIELDS_EXTENSION), context);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", FIELDS_INDEX_EXTENSION);\n      indexStream = d.openInput(indexStreamFN, context);\n      \n      CodecUtil.checkHeader(indexStream, CODEC_NAME_IDX, VERSION_START, VERSION_CURRENT);\n      CodecUtil.checkHeader(fieldsStream, CODEC_NAME_DAT, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_DAT == fieldsStream.getFilePointer();\n      assert HEADER_LENGTH_IDX == indexStream.getFilePointer();\n      final long indexSize = indexStream.length() - HEADER_LENGTH_IDX;\n      this.size = (int) (indexSize >> 3);\n      // Verify two sources of \"maxDoc\" agree:\n      if (this.size != si.getDocCount()) {\n        throw new CorruptIndexException(\"doc counts differ for segment \" + segment + \": fieldsReader shows \" + this.size + \" but segmentInfo shows \" + si.getDocCount());\n      }\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        try {\n          close();\n        } catch (Throwable t) {} // ensure we throw our original exception\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"519435fc0d6082a1b8081f9492b714f716877437":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["32e43f282bea25b8cc26e4a842d98deafd617e9b","203d7d3cb7712e10ef33009a63247ae40c302d7a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3599646b4d4c346cf74d334813488b8b337b5bf5":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","32e43f282bea25b8cc26e4a842d98deafd617e9b"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["1bf819846fb54a635eb297e36e7c6196d67f8273"],"32e43f282bea25b8cc26e4a842d98deafd617e9b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1bf819846fb54a635eb297e36e7c6196d67f8273":["519435fc0d6082a1b8081f9492b714f716877437"],"203d7d3cb7712e10ef33009a63247ae40c302d7a":["3599646b4d4c346cf74d334813488b8b337b5bf5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["1bf819846fb54a635eb297e36e7c6196d67f8273","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"519435fc0d6082a1b8081f9492b714f716877437":["1bf819846fb54a635eb297e36e7c6196d67f8273"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["519435fc0d6082a1b8081f9492b714f716877437"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3599646b4d4c346cf74d334813488b8b337b5bf5","32e43f282bea25b8cc26e4a842d98deafd617e9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3599646b4d4c346cf74d334813488b8b337b5bf5":["203d7d3cb7712e10ef33009a63247ae40c302d7a"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"32e43f282bea25b8cc26e4a842d98deafd617e9b":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","3599646b4d4c346cf74d334813488b8b337b5bf5"],"1bf819846fb54a635eb297e36e7c6196d67f8273":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"203d7d3cb7712e10ef33009a63247ae40c302d7a":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}