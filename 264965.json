{"path":"solr/core/src/test/org/apache/solr/core/TestDynamicURP#setupCluster().mjava","commits":[{"id":"061081e87f853ad5aa1f3ccf8a5187a37a2c0c60","date":1527258339,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestDynamicURP#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    configureCluster(3)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    SolrZkClient zkClient = cluster.getSolrClient().getZkStateReader().getZkClient();\n    String path = ZkStateReader.CONFIGS_ZKNODE + \"/conf/solrconfig.xml\";\n    byte[] data = zkClient.getData(path, null, null, true);\n\n    String solrconfigStr = new String(data, StandardCharsets.UTF_8);\n    zkClient.setData(path, solrconfigStr.replace(\"</config>\",\n        \"<updateRequestProcessorChain name=\\\"test_urp\\\" processor=\\\"testURP\\\" default=\\\"true\\\">\\n\" +\n        \"    <processor class=\\\"solr.RunUpdateProcessorFactory\\\"/>\\n\" +\n        \"  </updateRequestProcessorChain>\\n\" +\n        \"\\n\" +\n        \"  <updateProcessor class=\\\"org.apache.solr.core.TestURP\\\" name=\\\"testURP\\\" runtimeLib=\\\"true\\\"></updateProcessor>\\n\" +\n        \"</config>\").getBytes(StandardCharsets.UTF_8), true );\n\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 3, 1).process(cluster.getSolrClient());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a46fd4ddfd477e5b6fd3fd91f6aea6f184b53cc8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a46fd4ddfd477e5b6fd3fd91f6aea6f184b53cc8","date":1527483859,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestDynamicURP#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestDynamicURP#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    configureCluster(3)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    SolrZkClient zkClient = cluster.getSolrClient().getZkStateReader().getZkClient();\n    String path = ZkStateReader.CONFIGS_ZKNODE + \"/conf/solrconfig.xml\";\n    byte[] data = zkClient.getData(path, null, null, true);\n\n    String solrconfigStr = new String(data, StandardCharsets.UTF_8);\n    zkClient.setData(path, solrconfigStr.replace(\"</config>\",\n        \"<updateRequestProcessorChain name=\\\"test_urp\\\" processor=\\\"testURP\\\" default=\\\"true\\\">\\n\" +\n        \"    <processor class=\\\"solr.RunUpdateProcessorFactory\\\"/>\\n\" +\n        \"  </updateRequestProcessorChain>\\n\" +\n        \"\\n\" +\n        \"  <updateProcessor class=\\\"runtimecode.TestURP\\\" name=\\\"testURP\\\" runtimeLib=\\\"true\\\"></updateProcessor>\\n\" +\n        \"</config>\").getBytes(StandardCharsets.UTF_8), true );\n\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 3, 1).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    configureCluster(3)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    SolrZkClient zkClient = cluster.getSolrClient().getZkStateReader().getZkClient();\n    String path = ZkStateReader.CONFIGS_ZKNODE + \"/conf/solrconfig.xml\";\n    byte[] data = zkClient.getData(path, null, null, true);\n\n    String solrconfigStr = new String(data, StandardCharsets.UTF_8);\n    zkClient.setData(path, solrconfigStr.replace(\"</config>\",\n        \"<updateRequestProcessorChain name=\\\"test_urp\\\" processor=\\\"testURP\\\" default=\\\"true\\\">\\n\" +\n        \"    <processor class=\\\"solr.RunUpdateProcessorFactory\\\"/>\\n\" +\n        \"  </updateRequestProcessorChain>\\n\" +\n        \"\\n\" +\n        \"  <updateProcessor class=\\\"org.apache.solr.core.TestURP\\\" name=\\\"testURP\\\" runtimeLib=\\\"true\\\"></updateProcessor>\\n\" +\n        \"</config>\").getBytes(StandardCharsets.UTF_8), true );\n\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 3, 1).process(cluster.getSolrClient());\n  }\n\n","bugFix":["061081e87f853ad5aa1f3ccf8a5187a37a2c0c60"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestDynamicURP#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestDynamicURP#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    configureCluster(3)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    SolrZkClient zkClient = cluster.getSolrClient().getZkStateReader().getZkClient();\n    String path = ZkStateReader.CONFIGS_ZKNODE + \"/conf/solrconfig.xml\";\n    byte[] data = zkClient.getData(path, null, null, true);\n\n    String solrconfigStr = new String(data, StandardCharsets.UTF_8);\n    zkClient.setData(path, solrconfigStr.replace(\"</config>\",\n        \"<updateRequestProcessorChain name=\\\"test_urp\\\" processor=\\\"testURP\\\" default=\\\"true\\\">\\n\" +\n        \"    <processor class=\\\"solr.RunUpdateProcessorFactory\\\"/>\\n\" +\n        \"  </updateRequestProcessorChain>\\n\" +\n        \"\\n\" +\n        \"  <updateProcessor class=\\\"runtimecode.TestURP\\\" name=\\\"testURP\\\" runtimeLib=\\\"true\\\"></updateProcessor>\\n\" +\n        \"</config>\").getBytes(StandardCharsets.UTF_8), true );\n\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 3, 1).process(cluster.getSolrClient());\n    waitForState(\"\", COLLECTION, clusterShape(3, 3));\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    configureCluster(3)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    SolrZkClient zkClient = cluster.getSolrClient().getZkStateReader().getZkClient();\n    String path = ZkStateReader.CONFIGS_ZKNODE + \"/conf/solrconfig.xml\";\n    byte[] data = zkClient.getData(path, null, null, true);\n\n    String solrconfigStr = new String(data, StandardCharsets.UTF_8);\n    zkClient.setData(path, solrconfigStr.replace(\"</config>\",\n        \"<updateRequestProcessorChain name=\\\"test_urp\\\" processor=\\\"testURP\\\" default=\\\"true\\\">\\n\" +\n        \"    <processor class=\\\"solr.RunUpdateProcessorFactory\\\"/>\\n\" +\n        \"  </updateRequestProcessorChain>\\n\" +\n        \"\\n\" +\n        \"  <updateProcessor class=\\\"runtimecode.TestURP\\\" name=\\\"testURP\\\" runtimeLib=\\\"true\\\"></updateProcessor>\\n\" +\n        \"</config>\").getBytes(StandardCharsets.UTF_8), true );\n\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 3, 1).process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d16198391f70a4ee52a8c8792c91eb87a30f1d6","date":1596695552,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/core/TestDynamicURP#setupCluster().mjava","sourceNew":null,"sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    configureCluster(3)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    SolrZkClient zkClient = cluster.getSolrClient().getZkStateReader().getZkClient();\n    String path = ZkStateReader.CONFIGS_ZKNODE + \"/conf/solrconfig.xml\";\n    byte[] data = zkClient.getData(path, null, null, true);\n\n    String solrconfigStr = new String(data, StandardCharsets.UTF_8);\n    zkClient.setData(path, solrconfigStr.replace(\"</config>\",\n        \"<updateRequestProcessorChain name=\\\"test_urp\\\" processor=\\\"testURP\\\" default=\\\"true\\\">\\n\" +\n        \"    <processor class=\\\"solr.RunUpdateProcessorFactory\\\"/>\\n\" +\n        \"  </updateRequestProcessorChain>\\n\" +\n        \"\\n\" +\n        \"  <updateProcessor class=\\\"runtimecode.TestURP\\\" name=\\\"testURP\\\" runtimeLib=\\\"true\\\"></updateProcessor>\\n\" +\n        \"</config>\").getBytes(StandardCharsets.UTF_8), true );\n\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 3, 1).process(cluster.getSolrClient());\n    waitForState(\"\", COLLECTION, clusterShape(3, 3));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"061081e87f853ad5aa1f3ccf8a5187a37a2c0c60":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a46fd4ddfd477e5b6fd3fd91f6aea6f184b53cc8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0d16198391f70a4ee52a8c8792c91eb87a30f1d6":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a46fd4ddfd477e5b6fd3fd91f6aea6f184b53cc8":["061081e87f853ad5aa1f3ccf8a5187a37a2c0c60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0d16198391f70a4ee52a8c8792c91eb87a30f1d6"]},"commit2Childs":{"061081e87f853ad5aa1f3ccf8a5187a37a2c0c60":["a46fd4ddfd477e5b6fd3fd91f6aea6f184b53cc8"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["0d16198391f70a4ee52a8c8792c91eb87a30f1d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["061081e87f853ad5aa1f3ccf8a5187a37a2c0c60"],"0d16198391f70a4ee52a8c8792c91eb87a30f1d6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a46fd4ddfd477e5b6fd3fd91f6aea6f184b53cc8":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}