{"path":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#flush(SegmentWriteState,PointsWriter).mjava","commits":[{"id":"4522ffca5a1f420c6a02198c9332d7c596a30ca5","date":1457270822,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#flush(SegmentWriteState,PointsWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#flush(SegmentWriteState,PointWriter).mjava","sourceNew":"  public void flush(SegmentWriteState state, PointsWriter writer) throws IOException {\n\n    writer.writeField(fieldInfo,\n                      new PointsReader() {\n                        @Override\n                        public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n                          if (fieldName.equals(fieldInfo.name) == false) {\n                            throw new IllegalArgumentException(\"fieldName must be the same\");\n                          }\n                          for(int i=0;i<numDocs;i++) {\n                            bytes.readBytes(packedValue.length * i, packedValue, 0, packedValue.length);\n                            visitor.visit(docIDs[i], packedValue);\n                          }\n                        }\n\n                        @Override\n                        public void checkIntegrity() {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public long ramBytesUsed() {\n                          return 0L;\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n\n                        @Override\n                        public byte[] getMinPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public byte[] getMaxPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getNumDimensions(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getBytesPerDimension(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public long size(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getDocCount(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n                      });\n  }\n\n","sourceOld":"  public void flush(SegmentWriteState state, PointWriter writer) throws IOException {\n\n    writer.writeField(fieldInfo,\n                      new PointReader() {\n                        @Override\n                        public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n                          if (fieldName.equals(fieldInfo.name) == false) {\n                            throw new IllegalArgumentException(\"fieldName must be the same\");\n                          }\n                          for(int i=0;i<numDocs;i++) {\n                            bytes.readBytes(packedValue.length * i, packedValue, 0, packedValue.length);\n                            visitor.visit(docIDs[i], packedValue);\n                          }\n                        }\n\n                        @Override\n                        public void checkIntegrity() {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public long ramBytesUsed() {\n                          return 0L;\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n\n                        @Override\n                        public byte[] getMinPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public byte[] getMaxPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getNumDimensions(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getBytesPerDimension(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public long size(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getDocCount(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n                      });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca","date":1457777566,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#flush(SegmentWriteState,PointsWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#flush(SegmentWriteState,PointsWriter).mjava","sourceNew":"  public void flush(SegmentWriteState state, PointsWriter writer) throws IOException {\n\n    writer.writeField(fieldInfo,\n                      new PointsReader() {\n                        @Override\n                        public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n                          if (fieldName.equals(fieldInfo.name) == false) {\n                            throw new IllegalArgumentException(\"fieldName must be the same\");\n                          }\n                          for(int i=0;i<numPoints;i++) {\n                            bytes.readBytes(packedValue.length * i, packedValue, 0, packedValue.length);\n                            visitor.visit(docIDs[i], packedValue);\n                          }\n                        }\n\n                        @Override\n                        public void checkIntegrity() {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public long ramBytesUsed() {\n                          return 0L;\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n\n                        @Override\n                        public byte[] getMinPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public byte[] getMaxPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getNumDimensions(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getBytesPerDimension(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public long size(String fieldName) {\n                          return numPoints;\n                        }\n\n                        @Override\n                        public int getDocCount(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n                      });\n  }\n\n","sourceOld":"  public void flush(SegmentWriteState state, PointsWriter writer) throws IOException {\n\n    writer.writeField(fieldInfo,\n                      new PointsReader() {\n                        @Override\n                        public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n                          if (fieldName.equals(fieldInfo.name) == false) {\n                            throw new IllegalArgumentException(\"fieldName must be the same\");\n                          }\n                          for(int i=0;i<numDocs;i++) {\n                            bytes.readBytes(packedValue.length * i, packedValue, 0, packedValue.length);\n                            visitor.visit(docIDs[i], packedValue);\n                          }\n                        }\n\n                        @Override\n                        public void checkIntegrity() {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public long ramBytesUsed() {\n                          return 0L;\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n\n                        @Override\n                        public byte[] getMinPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public byte[] getMaxPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getNumDimensions(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getBytesPerDimension(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public long size(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getDocCount(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n                      });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"416f9e28900210be57b69bc12e2954fb98ed7ebe","date":1458479803,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#flush(SegmentWriteState,PointsWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#flush(SegmentWriteState,PointsWriter).mjava","sourceNew":"  public void flush(SegmentWriteState state, PointsWriter writer) throws IOException {\n\n    writer.writeField(fieldInfo,\n                      new PointsReader() {\n                        @Override\n                        public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n                          if (fieldName.equals(fieldInfo.name) == false) {\n                            throw new IllegalArgumentException(\"fieldName must be the same\");\n                          }\n                          for(int i=0;i<numPoints;i++) {\n                            bytes.readBytes(packedValue.length * i, packedValue, 0, packedValue.length);\n                            visitor.visit(docIDs[i], packedValue);\n                          }\n                        }\n\n                        @Override\n                        public void checkIntegrity() {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public long ramBytesUsed() {\n                          return 0L;\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n\n                        @Override\n                        public byte[] getMinPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public byte[] getMaxPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getNumDimensions(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getBytesPerDimension(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public long size(String fieldName) {\n                          return numPoints;\n                        }\n\n                        @Override\n                        public int getDocCount(String fieldName) {\n                          return numDocs;\n                        }\n                      });\n  }\n\n","sourceOld":"  public void flush(SegmentWriteState state, PointsWriter writer) throws IOException {\n\n    writer.writeField(fieldInfo,\n                      new PointsReader() {\n                        @Override\n                        public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n                          if (fieldName.equals(fieldInfo.name) == false) {\n                            throw new IllegalArgumentException(\"fieldName must be the same\");\n                          }\n                          for(int i=0;i<numPoints;i++) {\n                            bytes.readBytes(packedValue.length * i, packedValue, 0, packedValue.length);\n                            visitor.visit(docIDs[i], packedValue);\n                          }\n                        }\n\n                        @Override\n                        public void checkIntegrity() {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public long ramBytesUsed() {\n                          return 0L;\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n\n                        @Override\n                        public byte[] getMinPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public byte[] getMaxPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getNumDimensions(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getBytesPerDimension(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public long size(String fieldName) {\n                          return numPoints;\n                        }\n\n                        @Override\n                        public int getDocCount(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n                      });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10005c6013abbd1102f2463cf95604d4c8774c99","date":1469460814,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#flush(SegmentWriteState,PointsWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#flush(SegmentWriteState,PointsWriter).mjava","sourceNew":"  public void flush(SegmentWriteState state, PointsWriter writer) throws IOException {\n\n    writer.writeField(fieldInfo,\n                      new PointsReader() {\n                        @Override\n                        public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n                          if (fieldName.equals(fieldInfo.name) == false) {\n                            throw new IllegalArgumentException(\"fieldName must be the same\");\n                          }\n                          for(int i=0;i<numPoints;i++) {\n                            bytes.readBytes(packedValue.length * i, packedValue, 0, packedValue.length);\n                            visitor.visit(docIDs[i], packedValue);\n                          }\n                        }\n\n                        @Override\n                        public void checkIntegrity() {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public long ramBytesUsed() {\n                          return 0L;\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n\n                        @Override\n                        public byte[] getMinPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public byte[] getMaxPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getNumDimensions(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getBytesPerDimension(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public long size(String fieldName) {\n                          return numPoints;\n                        }\n\n                        @Override\n                        public int getDocCount(String fieldName) {\n                          return numDocs;\n                        }\n                      },\n                      Math.max(indexWriterConfig.getRAMBufferSizeMB()/8.0, BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP));\n  }\n\n","sourceOld":"  public void flush(SegmentWriteState state, PointsWriter writer) throws IOException {\n\n    writer.writeField(fieldInfo,\n                      new PointsReader() {\n                        @Override\n                        public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n                          if (fieldName.equals(fieldInfo.name) == false) {\n                            throw new IllegalArgumentException(\"fieldName must be the same\");\n                          }\n                          for(int i=0;i<numPoints;i++) {\n                            bytes.readBytes(packedValue.length * i, packedValue, 0, packedValue.length);\n                            visitor.visit(docIDs[i], packedValue);\n                          }\n                        }\n\n                        @Override\n                        public void checkIntegrity() {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public long ramBytesUsed() {\n                          return 0L;\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n\n                        @Override\n                        public byte[] getMinPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public byte[] getMaxPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getNumDimensions(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getBytesPerDimension(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public long size(String fieldName) {\n                          return numPoints;\n                        }\n\n                        @Override\n                        public int getDocCount(String fieldName) {\n                          return numDocs;\n                        }\n                      });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d08973aa47f2cf98a588293a53af4e948952ccfb","date":1469518724,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#flush(SegmentWriteState,PointsWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#flush(SegmentWriteState,PointsWriter).mjava","sourceNew":"  public void flush(SegmentWriteState state, PointsWriter writer) throws IOException {\n\n    writer.writeField(fieldInfo,\n                      new PointsReader() {\n                        @Override\n                        public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n                          if (fieldName.equals(fieldInfo.name) == false) {\n                            throw new IllegalArgumentException(\"fieldName must be the same\");\n                          }\n                          for(int i=0;i<numPoints;i++) {\n                            bytes.readBytes(packedValue.length * i, packedValue, 0, packedValue.length);\n                            visitor.visit(docIDs[i], packedValue);\n                          }\n                        }\n\n                        @Override\n                        public void checkIntegrity() {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public long ramBytesUsed() {\n                          return 0L;\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n\n                        @Override\n                        public byte[] getMinPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public byte[] getMaxPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getNumDimensions(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getBytesPerDimension(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public long size(String fieldName) {\n                          return numPoints;\n                        }\n\n                        @Override\n                        public int getDocCount(String fieldName) {\n                          return numDocs;\n                        }\n                      },\n                      Math.max(indexWriterConfig.getRAMBufferSizeMB()/8.0, BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP));\n  }\n\n","sourceOld":"  public void flush(SegmentWriteState state, PointsWriter writer) throws IOException {\n\n    writer.writeField(fieldInfo,\n                      new PointsReader() {\n                        @Override\n                        public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n                          if (fieldName.equals(fieldInfo.name) == false) {\n                            throw new IllegalArgumentException(\"fieldName must be the same\");\n                          }\n                          for(int i=0;i<numPoints;i++) {\n                            bytes.readBytes(packedValue.length * i, packedValue, 0, packedValue.length);\n                            visitor.visit(docIDs[i], packedValue);\n                          }\n                        }\n\n                        @Override\n                        public void checkIntegrity() {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public long ramBytesUsed() {\n                          return 0L;\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n\n                        @Override\n                        public byte[] getMinPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public byte[] getMaxPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getNumDimensions(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getBytesPerDimension(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public long size(String fieldName) {\n                          return numPoints;\n                        }\n\n                        @Override\n                        public int getDocCount(String fieldName) {\n                          return numDocs;\n                        }\n                      });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d561885e9bb6238af1ff8afe8630dcfe49b66ac7","date":1469780634,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#flush(SegmentWriteState,PointsWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#flush(SegmentWriteState,PointsWriter).mjava","sourceNew":"  public void flush(SegmentWriteState state, PointsWriter writer) throws IOException {\n    PointsReader reader = new MutablePointsReader() {\n\n      final int[] ords = new int[numPoints];\n      {\n        for (int i = 0; i < numPoints; ++i) {\n          ords[i] = i;\n        }\n      }\n\n      @Override\n      public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n        if (fieldName.equals(fieldInfo.name) == false) {\n          throw new IllegalArgumentException(\"fieldName must be the same\");\n        }\n        final byte[] packedValue = new byte[packedBytesLength];\n        for(int i=0;i<numPoints;i++) {\n          getValue(i, packedValue);\n          visitor.visit(getDocID(i), packedValue);\n        }\n      }\n\n      @Override\n      public void checkIntegrity() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0L;\n      }\n\n      @Override\n      public void close() {\n      }\n\n      @Override\n      public byte[] getMinPackedValue(String fieldName) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public byte[] getMaxPackedValue(String fieldName) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getNumDimensions(String fieldName) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getBytesPerDimension(String fieldName) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public long size(String fieldName) {\n        if (fieldName.equals(fieldInfo.name) == false) {\n          throw new IllegalArgumentException(\"fieldName must be the same\");\n        }\n        return numPoints;\n      }\n\n      @Override\n      public int getDocCount(String fieldName) {\n        if (fieldName.equals(fieldInfo.name) == false) {\n          throw new IllegalArgumentException(\"fieldName must be the same\");\n        }\n        return numDocs;\n      }\n\n      @Override\n      public void swap(int i, int j) {\n        int tmp = ords[i];\n        ords[i] = ords[j];\n        ords[j] = tmp;\n      }\n\n      @Override\n      public int getDocID(int i) {\n        return docIDs[ords[i]];\n      }\n\n      @Override\n      public void getValue(int i, byte[] packedValue) {\n        final long offset = (long) packedBytesLength * ords[i];\n        bytes.readBytes(offset, packedValue, 0, packedBytesLength);\n      }\n\n      @Override\n      public byte getByteAt(int i, int k) {\n        final long offset = (long) packedBytesLength * ords[i] + k;\n        return bytes.readByte(offset);\n      }\n    };\n\n    writer.writeField(fieldInfo, reader, Math.max(indexWriterConfig.getRAMBufferSizeMB()/8.0, BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP));\n  }\n\n","sourceOld":"  public void flush(SegmentWriteState state, PointsWriter writer) throws IOException {\n\n    writer.writeField(fieldInfo,\n                      new PointsReader() {\n                        @Override\n                        public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n                          if (fieldName.equals(fieldInfo.name) == false) {\n                            throw new IllegalArgumentException(\"fieldName must be the same\");\n                          }\n                          for(int i=0;i<numPoints;i++) {\n                            bytes.readBytes(packedValue.length * i, packedValue, 0, packedValue.length);\n                            visitor.visit(docIDs[i], packedValue);\n                          }\n                        }\n\n                        @Override\n                        public void checkIntegrity() {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public long ramBytesUsed() {\n                          return 0L;\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n\n                        @Override\n                        public byte[] getMinPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public byte[] getMaxPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getNumDimensions(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getBytesPerDimension(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public long size(String fieldName) {\n                          return numPoints;\n                        }\n\n                        @Override\n                        public int getDocCount(String fieldName) {\n                          return numDocs;\n                        }\n                      },\n                      Math.max(indexWriterConfig.getRAMBufferSizeMB()/8.0, BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0567940defa1ea6eb8a039d9d36e3682063f8a4","date":1469815320,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#flush(SegmentWriteState,PointsWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#flush(SegmentWriteState,PointsWriter).mjava","sourceNew":"  public void flush(SegmentWriteState state, PointsWriter writer) throws IOException {\n    PointsReader reader = new MutablePointsReader() {\n\n      final int[] ords = new int[numPoints];\n      {\n        for (int i = 0; i < numPoints; ++i) {\n          ords[i] = i;\n        }\n      }\n\n      @Override\n      public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n        if (fieldName.equals(fieldInfo.name) == false) {\n          throw new IllegalArgumentException(\"fieldName must be the same\");\n        }\n        final byte[] packedValue = new byte[packedBytesLength];\n        for(int i=0;i<numPoints;i++) {\n          getValue(i, packedValue);\n          visitor.visit(getDocID(i), packedValue);\n        }\n      }\n\n      @Override\n      public void checkIntegrity() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0L;\n      }\n\n      @Override\n      public void close() {\n      }\n\n      @Override\n      public byte[] getMinPackedValue(String fieldName) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public byte[] getMaxPackedValue(String fieldName) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getNumDimensions(String fieldName) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getBytesPerDimension(String fieldName) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public long size(String fieldName) {\n        if (fieldName.equals(fieldInfo.name) == false) {\n          throw new IllegalArgumentException(\"fieldName must be the same\");\n        }\n        return numPoints;\n      }\n\n      @Override\n      public int getDocCount(String fieldName) {\n        if (fieldName.equals(fieldInfo.name) == false) {\n          throw new IllegalArgumentException(\"fieldName must be the same\");\n        }\n        return numDocs;\n      }\n\n      @Override\n      public void swap(int i, int j) {\n        int tmp = ords[i];\n        ords[i] = ords[j];\n        ords[j] = tmp;\n      }\n\n      @Override\n      public int getDocID(int i) {\n        return docIDs[ords[i]];\n      }\n\n      @Override\n      public void getValue(int i, byte[] packedValue) {\n        final long offset = (long) packedBytesLength * ords[i];\n        bytes.readBytes(offset, packedValue, 0, packedBytesLength);\n      }\n\n      @Override\n      public byte getByteAt(int i, int k) {\n        final long offset = (long) packedBytesLength * ords[i] + k;\n        return bytes.readByte(offset);\n      }\n    };\n\n    writer.writeField(fieldInfo, reader, Math.max(indexWriterConfig.getRAMBufferSizeMB()/8.0));\n  }\n\n","sourceOld":"  public void flush(SegmentWriteState state, PointsWriter writer) throws IOException {\n    PointsReader reader = new MutablePointsReader() {\n\n      final int[] ords = new int[numPoints];\n      {\n        for (int i = 0; i < numPoints; ++i) {\n          ords[i] = i;\n        }\n      }\n\n      @Override\n      public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n        if (fieldName.equals(fieldInfo.name) == false) {\n          throw new IllegalArgumentException(\"fieldName must be the same\");\n        }\n        final byte[] packedValue = new byte[packedBytesLength];\n        for(int i=0;i<numPoints;i++) {\n          getValue(i, packedValue);\n          visitor.visit(getDocID(i), packedValue);\n        }\n      }\n\n      @Override\n      public void checkIntegrity() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0L;\n      }\n\n      @Override\n      public void close() {\n      }\n\n      @Override\n      public byte[] getMinPackedValue(String fieldName) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public byte[] getMaxPackedValue(String fieldName) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getNumDimensions(String fieldName) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getBytesPerDimension(String fieldName) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public long size(String fieldName) {\n        if (fieldName.equals(fieldInfo.name) == false) {\n          throw new IllegalArgumentException(\"fieldName must be the same\");\n        }\n        return numPoints;\n      }\n\n      @Override\n      public int getDocCount(String fieldName) {\n        if (fieldName.equals(fieldInfo.name) == false) {\n          throw new IllegalArgumentException(\"fieldName must be the same\");\n        }\n        return numDocs;\n      }\n\n      @Override\n      public void swap(int i, int j) {\n        int tmp = ords[i];\n        ords[i] = ords[j];\n        ords[j] = tmp;\n      }\n\n      @Override\n      public int getDocID(int i) {\n        return docIDs[ords[i]];\n      }\n\n      @Override\n      public void getValue(int i, byte[] packedValue) {\n        final long offset = (long) packedBytesLength * ords[i];\n        bytes.readBytes(offset, packedValue, 0, packedBytesLength);\n      }\n\n      @Override\n      public byte getByteAt(int i, int k) {\n        final long offset = (long) packedBytesLength * ords[i] + k;\n        return bytes.readByte(offset);\n      }\n    };\n\n    writer.writeField(fieldInfo, reader, Math.max(indexWriterConfig.getRAMBufferSizeMB()/8.0, BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f524a98b3cfdaed67c9e4d967aa7f1382df89a79","date":1469815523,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#flush(SegmentWriteState,PointsWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#flush(SegmentWriteState,PointsWriter).mjava","sourceNew":"  public void flush(SegmentWriteState state, PointsWriter writer) throws IOException {\n    PointsReader reader = new MutablePointsReader() {\n\n      final int[] ords = new int[numPoints];\n      {\n        for (int i = 0; i < numPoints; ++i) {\n          ords[i] = i;\n        }\n      }\n\n      @Override\n      public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n        if (fieldName.equals(fieldInfo.name) == false) {\n          throw new IllegalArgumentException(\"fieldName must be the same\");\n        }\n        final byte[] packedValue = new byte[packedBytesLength];\n        for(int i=0;i<numPoints;i++) {\n          getValue(i, packedValue);\n          visitor.visit(getDocID(i), packedValue);\n        }\n      }\n\n      @Override\n      public void checkIntegrity() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0L;\n      }\n\n      @Override\n      public void close() {\n      }\n\n      @Override\n      public byte[] getMinPackedValue(String fieldName) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public byte[] getMaxPackedValue(String fieldName) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getNumDimensions(String fieldName) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getBytesPerDimension(String fieldName) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public long size(String fieldName) {\n        if (fieldName.equals(fieldInfo.name) == false) {\n          throw new IllegalArgumentException(\"fieldName must be the same\");\n        }\n        return numPoints;\n      }\n\n      @Override\n      public int getDocCount(String fieldName) {\n        if (fieldName.equals(fieldInfo.name) == false) {\n          throw new IllegalArgumentException(\"fieldName must be the same\");\n        }\n        return numDocs;\n      }\n\n      @Override\n      public void swap(int i, int j) {\n        int tmp = ords[i];\n        ords[i] = ords[j];\n        ords[j] = tmp;\n      }\n\n      @Override\n      public int getDocID(int i) {\n        return docIDs[ords[i]];\n      }\n\n      @Override\n      public void getValue(int i, byte[] packedValue) {\n        final long offset = (long) packedBytesLength * ords[i];\n        bytes.readBytes(offset, packedValue, 0, packedBytesLength);\n      }\n\n      @Override\n      public byte getByteAt(int i, int k) {\n        final long offset = (long) packedBytesLength * ords[i] + k;\n        return bytes.readByte(offset);\n      }\n    };\n\n    writer.writeField(fieldInfo, reader);\n  }\n\n","sourceOld":"  public void flush(SegmentWriteState state, PointsWriter writer) throws IOException {\n    PointsReader reader = new MutablePointsReader() {\n\n      final int[] ords = new int[numPoints];\n      {\n        for (int i = 0; i < numPoints; ++i) {\n          ords[i] = i;\n        }\n      }\n\n      @Override\n      public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n        if (fieldName.equals(fieldInfo.name) == false) {\n          throw new IllegalArgumentException(\"fieldName must be the same\");\n        }\n        final byte[] packedValue = new byte[packedBytesLength];\n        for(int i=0;i<numPoints;i++) {\n          getValue(i, packedValue);\n          visitor.visit(getDocID(i), packedValue);\n        }\n      }\n\n      @Override\n      public void checkIntegrity() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0L;\n      }\n\n      @Override\n      public void close() {\n      }\n\n      @Override\n      public byte[] getMinPackedValue(String fieldName) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public byte[] getMaxPackedValue(String fieldName) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getNumDimensions(String fieldName) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getBytesPerDimension(String fieldName) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public long size(String fieldName) {\n        if (fieldName.equals(fieldInfo.name) == false) {\n          throw new IllegalArgumentException(\"fieldName must be the same\");\n        }\n        return numPoints;\n      }\n\n      @Override\n      public int getDocCount(String fieldName) {\n        if (fieldName.equals(fieldInfo.name) == false) {\n          throw new IllegalArgumentException(\"fieldName must be the same\");\n        }\n        return numDocs;\n      }\n\n      @Override\n      public void swap(int i, int j) {\n        int tmp = ords[i];\n        ords[i] = ords[j];\n        ords[j] = tmp;\n      }\n\n      @Override\n      public int getDocID(int i) {\n        return docIDs[ords[i]];\n      }\n\n      @Override\n      public void getValue(int i, byte[] packedValue) {\n        final long offset = (long) packedBytesLength * ords[i];\n        bytes.readBytes(offset, packedValue, 0, packedBytesLength);\n      }\n\n      @Override\n      public byte getByteAt(int i, int k) {\n        final long offset = (long) packedBytesLength * ords[i] + k;\n        return bytes.readByte(offset);\n      }\n    };\n\n    writer.writeField(fieldInfo, reader, Math.max(indexWriterConfig.getRAMBufferSizeMB()/8.0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a20457919db052812998f60294d17daa883ff972","date":1470227748,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#flush(SegmentWriteState,PointsWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#flush(SegmentWriteState,PointsWriter).mjava","sourceNew":"  public void flush(SegmentWriteState state, PointsWriter writer) throws IOException {\n    PointsReader reader = new MutablePointsReader() {\n\n      final int[] ords = new int[numPoints];\n      {\n        for (int i = 0; i < numPoints; ++i) {\n          ords[i] = i;\n        }\n      }\n\n      @Override\n      public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n        if (fieldName.equals(fieldInfo.name) == false) {\n          throw new IllegalArgumentException(\"fieldName must be the same\");\n        }\n        final BytesRef scratch = new BytesRef();\n        final byte[] packedValue = new byte[packedBytesLength];\n        for(int i=0;i<numPoints;i++) {\n          getValue(i, scratch);\n          assert scratch.length == packedValue.length;\n          System.arraycopy(scratch.bytes, scratch.offset, packedValue, 0, packedBytesLength);\n          visitor.visit(getDocID(i), packedValue);\n        }\n      }\n\n      @Override\n      public void checkIntegrity() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0L;\n      }\n\n      @Override\n      public void close() {\n      }\n\n      @Override\n      public byte[] getMinPackedValue(String fieldName) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public byte[] getMaxPackedValue(String fieldName) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getNumDimensions(String fieldName) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getBytesPerDimension(String fieldName) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public long size(String fieldName) {\n        if (fieldName.equals(fieldInfo.name) == false) {\n          throw new IllegalArgumentException(\"fieldName must be the same\");\n        }\n        return numPoints;\n      }\n\n      @Override\n      public int getDocCount(String fieldName) {\n        if (fieldName.equals(fieldInfo.name) == false) {\n          throw new IllegalArgumentException(\"fieldName must be the same\");\n        }\n        return numDocs;\n      }\n\n      @Override\n      public void swap(int i, int j) {\n        int tmp = ords[i];\n        ords[i] = ords[j];\n        ords[j] = tmp;\n      }\n\n      @Override\n      public int getDocID(int i) {\n        return docIDs[ords[i]];\n      }\n\n      @Override\n      public void getValue(int i, BytesRef packedValue) {\n        final long offset = (long) packedBytesLength * ords[i];\n        packedValue.length = packedBytesLength;\n        bytes.setRawBytesRef(packedValue, offset);\n      }\n\n      @Override\n      public byte getByteAt(int i, int k) {\n        final long offset = (long) packedBytesLength * ords[i] + k;\n        return bytes.readByte(offset);\n      }\n    };\n\n    writer.writeField(fieldInfo, reader);\n  }\n\n","sourceOld":"  public void flush(SegmentWriteState state, PointsWriter writer) throws IOException {\n    PointsReader reader = new MutablePointsReader() {\n\n      final int[] ords = new int[numPoints];\n      {\n        for (int i = 0; i < numPoints; ++i) {\n          ords[i] = i;\n        }\n      }\n\n      @Override\n      public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n        if (fieldName.equals(fieldInfo.name) == false) {\n          throw new IllegalArgumentException(\"fieldName must be the same\");\n        }\n        final byte[] packedValue = new byte[packedBytesLength];\n        for(int i=0;i<numPoints;i++) {\n          getValue(i, packedValue);\n          visitor.visit(getDocID(i), packedValue);\n        }\n      }\n\n      @Override\n      public void checkIntegrity() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0L;\n      }\n\n      @Override\n      public void close() {\n      }\n\n      @Override\n      public byte[] getMinPackedValue(String fieldName) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public byte[] getMaxPackedValue(String fieldName) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getNumDimensions(String fieldName) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getBytesPerDimension(String fieldName) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public long size(String fieldName) {\n        if (fieldName.equals(fieldInfo.name) == false) {\n          throw new IllegalArgumentException(\"fieldName must be the same\");\n        }\n        return numPoints;\n      }\n\n      @Override\n      public int getDocCount(String fieldName) {\n        if (fieldName.equals(fieldInfo.name) == false) {\n          throw new IllegalArgumentException(\"fieldName must be the same\");\n        }\n        return numDocs;\n      }\n\n      @Override\n      public void swap(int i, int j) {\n        int tmp = ords[i];\n        ords[i] = ords[j];\n        ords[j] = tmp;\n      }\n\n      @Override\n      public int getDocID(int i) {\n        return docIDs[ords[i]];\n      }\n\n      @Override\n      public void getValue(int i, byte[] packedValue) {\n        final long offset = (long) packedBytesLength * ords[i];\n        bytes.readBytes(offset, packedValue, 0, packedBytesLength);\n      }\n\n      @Override\n      public byte getByteAt(int i, int k) {\n        final long offset = (long) packedBytesLength * ords[i] + k;\n        return bytes.readByte(offset);\n      }\n    };\n\n    writer.writeField(fieldInfo, reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#flush(SegmentWriteState,PointsWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#flush(SegmentWriteState,PointsWriter).mjava","sourceNew":"  public void flush(SegmentWriteState state, PointsWriter writer) throws IOException {\n    PointsReader reader = new MutablePointsReader() {\n\n      final int[] ords = new int[numPoints];\n      {\n        for (int i = 0; i < numPoints; ++i) {\n          ords[i] = i;\n        }\n      }\n\n      @Override\n      public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n        if (fieldName.equals(fieldInfo.name) == false) {\n          throw new IllegalArgumentException(\"fieldName must be the same\");\n        }\n        final BytesRef scratch = new BytesRef();\n        final byte[] packedValue = new byte[packedBytesLength];\n        for(int i=0;i<numPoints;i++) {\n          getValue(i, scratch);\n          assert scratch.length == packedValue.length;\n          System.arraycopy(scratch.bytes, scratch.offset, packedValue, 0, packedBytesLength);\n          visitor.visit(getDocID(i), packedValue);\n        }\n      }\n\n      @Override\n      public void checkIntegrity() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0L;\n      }\n\n      @Override\n      public void close() {\n      }\n\n      @Override\n      public byte[] getMinPackedValue(String fieldName) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public byte[] getMaxPackedValue(String fieldName) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getNumDimensions(String fieldName) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getBytesPerDimension(String fieldName) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public long size(String fieldName) {\n        if (fieldName.equals(fieldInfo.name) == false) {\n          throw new IllegalArgumentException(\"fieldName must be the same\");\n        }\n        return numPoints;\n      }\n\n      @Override\n      public int getDocCount(String fieldName) {\n        if (fieldName.equals(fieldInfo.name) == false) {\n          throw new IllegalArgumentException(\"fieldName must be the same\");\n        }\n        return numDocs;\n      }\n\n      @Override\n      public void swap(int i, int j) {\n        int tmp = ords[i];\n        ords[i] = ords[j];\n        ords[j] = tmp;\n      }\n\n      @Override\n      public int getDocID(int i) {\n        return docIDs[ords[i]];\n      }\n\n      @Override\n      public void getValue(int i, BytesRef packedValue) {\n        final long offset = (long) packedBytesLength * ords[i];\n        packedValue.length = packedBytesLength;\n        bytes.setRawBytesRef(packedValue, offset);\n      }\n\n      @Override\n      public byte getByteAt(int i, int k) {\n        final long offset = (long) packedBytesLength * ords[i] + k;\n        return bytes.readByte(offset);\n      }\n    };\n\n    writer.writeField(fieldInfo, reader);\n  }\n\n","sourceOld":"  public void flush(SegmentWriteState state, PointsWriter writer) throws IOException {\n\n    writer.writeField(fieldInfo,\n                      new PointsReader() {\n                        @Override\n                        public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n                          if (fieldName.equals(fieldInfo.name) == false) {\n                            throw new IllegalArgumentException(\"fieldName must be the same\");\n                          }\n                          for(int i=0;i<numPoints;i++) {\n                            bytes.readBytes(packedValue.length * i, packedValue, 0, packedValue.length);\n                            visitor.visit(docIDs[i], packedValue);\n                          }\n                        }\n\n                        @Override\n                        public void checkIntegrity() {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public long ramBytesUsed() {\n                          return 0L;\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n\n                        @Override\n                        public byte[] getMinPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public byte[] getMaxPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getNumDimensions(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getBytesPerDimension(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public long size(String fieldName) {\n                          return numPoints;\n                        }\n\n                        @Override\n                        public int getDocCount(String fieldName) {\n                          return numDocs;\n                        }\n                      },\n                      Math.max(indexWriterConfig.getRAMBufferSizeMB()/8.0, BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"367f57e2ee85b7f7e28cfe73370a22cf67624f65","date":1476778467,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#flush(SegmentWriteState,PointsWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#flush(SegmentWriteState,PointsWriter).mjava","sourceNew":"  public void flush(SegmentWriteState state, PointsWriter writer) throws IOException {\n    PointValues values = new MutablePointValues() {\n\n      final int[] ords = new int[numPoints];\n      {\n        for (int i = 0; i < numPoints; ++i) {\n          ords[i] = i;\n        }\n      }\n\n      @Override\n      public void intersect(IntersectVisitor visitor) throws IOException {\n        final BytesRef scratch = new BytesRef();\n        final byte[] packedValue = new byte[packedBytesLength];\n        for(int i=0;i<numPoints;i++) {\n          getValue(i, scratch);\n          assert scratch.length == packedValue.length;\n          System.arraycopy(scratch.bytes, scratch.offset, packedValue, 0, packedBytesLength);\n          visitor.visit(getDocID(i), packedValue);\n        }\n      }\n\n      @Override\n      public byte[] getMinPackedValue() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public byte[] getMaxPackedValue() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getNumDimensions() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getBytesPerDimension() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public long size() {\n        return numPoints;\n      }\n\n      @Override\n      public int getDocCount() {\n        return numDocs;\n      }\n\n      @Override\n      public void swap(int i, int j) {\n        int tmp = ords[i];\n        ords[i] = ords[j];\n        ords[j] = tmp;\n      }\n\n      @Override\n      public int getDocID(int i) {\n        return docIDs[ords[i]];\n      }\n\n      @Override\n      public void getValue(int i, BytesRef packedValue) {\n        final long offset = (long) packedBytesLength * ords[i];\n        packedValue.length = packedBytesLength;\n        bytes.setRawBytesRef(packedValue, offset);\n      }\n\n      @Override\n      public byte getByteAt(int i, int k) {\n        final long offset = (long) packedBytesLength * ords[i] + k;\n        return bytes.readByte(offset);\n      }\n    };\n\n    PointsReader reader = new PointsReader() {\n      \n      @Override\n      public PointValues getValues(String fieldName) {\n        if (fieldName.equals(fieldInfo.name) == false) {\n          throw new IllegalArgumentException(\"fieldName must be the same\");\n        }\n        return values;\n      }\n      \n      @Override\n      public void checkIntegrity() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0L;\n      }\n\n      @Override\n      public void close() {\n      }\n    };\n\n    writer.writeField(fieldInfo, reader);\n  }\n\n","sourceOld":"  public void flush(SegmentWriteState state, PointsWriter writer) throws IOException {\n    PointsReader reader = new MutablePointsReader() {\n\n      final int[] ords = new int[numPoints];\n      {\n        for (int i = 0; i < numPoints; ++i) {\n          ords[i] = i;\n        }\n      }\n\n      @Override\n      public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n        if (fieldName.equals(fieldInfo.name) == false) {\n          throw new IllegalArgumentException(\"fieldName must be the same\");\n        }\n        final BytesRef scratch = new BytesRef();\n        final byte[] packedValue = new byte[packedBytesLength];\n        for(int i=0;i<numPoints;i++) {\n          getValue(i, scratch);\n          assert scratch.length == packedValue.length;\n          System.arraycopy(scratch.bytes, scratch.offset, packedValue, 0, packedBytesLength);\n          visitor.visit(getDocID(i), packedValue);\n        }\n      }\n\n      @Override\n      public void checkIntegrity() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0L;\n      }\n\n      @Override\n      public void close() {\n      }\n\n      @Override\n      public byte[] getMinPackedValue(String fieldName) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public byte[] getMaxPackedValue(String fieldName) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getNumDimensions(String fieldName) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getBytesPerDimension(String fieldName) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public long size(String fieldName) {\n        if (fieldName.equals(fieldInfo.name) == false) {\n          throw new IllegalArgumentException(\"fieldName must be the same\");\n        }\n        return numPoints;\n      }\n\n      @Override\n      public int getDocCount(String fieldName) {\n        if (fieldName.equals(fieldInfo.name) == false) {\n          throw new IllegalArgumentException(\"fieldName must be the same\");\n        }\n        return numDocs;\n      }\n\n      @Override\n      public void swap(int i, int j) {\n        int tmp = ords[i];\n        ords[i] = ords[j];\n        ords[j] = tmp;\n      }\n\n      @Override\n      public int getDocID(int i) {\n        return docIDs[ords[i]];\n      }\n\n      @Override\n      public void getValue(int i, BytesRef packedValue) {\n        final long offset = (long) packedBytesLength * ords[i];\n        packedValue.length = packedBytesLength;\n        bytes.setRawBytesRef(packedValue, offset);\n      }\n\n      @Override\n      public byte getByteAt(int i, int k) {\n        final long offset = (long) packedBytesLength * ords[i] + k;\n        return bytes.readByte(offset);\n      }\n    };\n\n    writer.writeField(fieldInfo, reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#flush(SegmentWriteState,PointsWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#flush(SegmentWriteState,PointsWriter).mjava","sourceNew":"  public void flush(SegmentWriteState state, PointsWriter writer) throws IOException {\n    PointValues values = new MutablePointValues() {\n\n      final int[] ords = new int[numPoints];\n      {\n        for (int i = 0; i < numPoints; ++i) {\n          ords[i] = i;\n        }\n      }\n\n      @Override\n      public void intersect(IntersectVisitor visitor) throws IOException {\n        final BytesRef scratch = new BytesRef();\n        final byte[] packedValue = new byte[packedBytesLength];\n        for(int i=0;i<numPoints;i++) {\n          getValue(i, scratch);\n          assert scratch.length == packedValue.length;\n          System.arraycopy(scratch.bytes, scratch.offset, packedValue, 0, packedBytesLength);\n          visitor.visit(getDocID(i), packedValue);\n        }\n      }\n\n      @Override\n      public byte[] getMinPackedValue() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public byte[] getMaxPackedValue() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getNumDimensions() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getBytesPerDimension() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public long size() {\n        return numPoints;\n      }\n\n      @Override\n      public int getDocCount() {\n        return numDocs;\n      }\n\n      @Override\n      public void swap(int i, int j) {\n        int tmp = ords[i];\n        ords[i] = ords[j];\n        ords[j] = tmp;\n      }\n\n      @Override\n      public int getDocID(int i) {\n        return docIDs[ords[i]];\n      }\n\n      @Override\n      public void getValue(int i, BytesRef packedValue) {\n        final long offset = (long) packedBytesLength * ords[i];\n        packedValue.length = packedBytesLength;\n        bytes.setRawBytesRef(packedValue, offset);\n      }\n\n      @Override\n      public byte getByteAt(int i, int k) {\n        final long offset = (long) packedBytesLength * ords[i] + k;\n        return bytes.readByte(offset);\n      }\n    };\n\n    PointsReader reader = new PointsReader() {\n      \n      @Override\n      public PointValues getValues(String fieldName) {\n        if (fieldName.equals(fieldInfo.name) == false) {\n          throw new IllegalArgumentException(\"fieldName must be the same\");\n        }\n        return values;\n      }\n      \n      @Override\n      public void checkIntegrity() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0L;\n      }\n\n      @Override\n      public void close() {\n      }\n    };\n\n    writer.writeField(fieldInfo, reader);\n  }\n\n","sourceOld":"  public void flush(SegmentWriteState state, PointsWriter writer) throws IOException {\n\n    writer.writeField(fieldInfo,\n                      new PointsReader() {\n                        @Override\n                        public void intersect(String fieldName, IntersectVisitor visitor) throws IOException {\n                          if (fieldName.equals(fieldInfo.name) == false) {\n                            throw new IllegalArgumentException(\"fieldName must be the same\");\n                          }\n                          for(int i=0;i<numPoints;i++) {\n                            bytes.readBytes(packedValue.length * i, packedValue, 0, packedValue.length);\n                            visitor.visit(docIDs[i], packedValue);\n                          }\n                        }\n\n                        @Override\n                        public void checkIntegrity() {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public long ramBytesUsed() {\n                          return 0L;\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n\n                        @Override\n                        public byte[] getMinPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public byte[] getMaxPackedValue(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getNumDimensions(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public int getBytesPerDimension(String fieldName) {\n                          throw new UnsupportedOperationException();\n                        }\n\n                        @Override\n                        public long size(String fieldName) {\n                          return numPoints;\n                        }\n\n                        @Override\n                        public int getDocCount(String fieldName) {\n                          return numDocs;\n                        }\n                      });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86a0a50d2d14aaee1e635bbec914468551f7f9a2","date":1482234306,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#flush(SegmentWriteState,Sorter.DocMap,PointsWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#flush(SegmentWriteState,PointsWriter).mjava","sourceNew":"  public void flush(SegmentWriteState state, Sorter.DocMap sortMap, PointsWriter writer) throws IOException {\n    PointValues points = new MutablePointValues() {\n      final int[] ords = new int[numPoints];\n      {\n        for (int i = 0; i < numPoints; ++i) {\n          ords[i] = i;\n        }\n      }\n\n      @Override\n      public void intersect(IntersectVisitor visitor) throws IOException {\n        final BytesRef scratch = new BytesRef();\n        final byte[] packedValue = new byte[packedBytesLength];\n        for(int i=0;i<numPoints;i++) {\n          getValue(i, scratch);\n          assert scratch.length == packedValue.length;\n          System.arraycopy(scratch.bytes, scratch.offset, packedValue, 0, packedBytesLength);\n          visitor.visit(getDocID(i), packedValue);\n        }\n      }\n\n      @Override\n      public byte[] getMinPackedValue() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public byte[] getMaxPackedValue() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getNumDimensions() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getBytesPerDimension() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public long size() {\n        return numPoints;\n      }\n\n      @Override\n      public int getDocCount() {\n        return numDocs;\n      }\n\n      @Override\n      public void swap(int i, int j) {\n        int tmp = ords[i];\n        ords[i] = ords[j];\n        ords[j] = tmp;\n      }\n\n      @Override\n      public int getDocID(int i) {\n        return docIDs[ords[i]];\n      }\n\n      @Override\n      public void getValue(int i, BytesRef packedValue) {\n        final long offset = (long) packedBytesLength * ords[i];\n        packedValue.length = packedBytesLength;\n        bytes.setRawBytesRef(packedValue, offset);\n      }\n\n      @Override\n      public byte getByteAt(int i, int k) {\n        final long offset = (long) packedBytesLength * ords[i] + k;\n        return bytes.readByte(offset);\n      }\n    };\n\n    final PointValues values;\n    if (sortMap == null) {\n      values = points;\n    } else {\n      values = new MutableSortingPointValues((MutablePointValues) points, sortMap);\n    }\n    PointsReader reader = new PointsReader() {\n      @Override\n      public PointValues getValues(String fieldName) {\n        if (fieldName.equals(fieldInfo.name) == false) {\n          throw new IllegalArgumentException(\"fieldName must be the same\");\n        }\n        return values;\n      }\n\n      @Override\n      public void checkIntegrity() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0L;\n      }\n\n      @Override\n      public void close() {\n      }\n    };\n    writer.writeField(fieldInfo, reader);\n  }\n\n","sourceOld":"  public void flush(SegmentWriteState state, PointsWriter writer) throws IOException {\n    PointValues values = new MutablePointValues() {\n\n      final int[] ords = new int[numPoints];\n      {\n        for (int i = 0; i < numPoints; ++i) {\n          ords[i] = i;\n        }\n      }\n\n      @Override\n      public void intersect(IntersectVisitor visitor) throws IOException {\n        final BytesRef scratch = new BytesRef();\n        final byte[] packedValue = new byte[packedBytesLength];\n        for(int i=0;i<numPoints;i++) {\n          getValue(i, scratch);\n          assert scratch.length == packedValue.length;\n          System.arraycopy(scratch.bytes, scratch.offset, packedValue, 0, packedBytesLength);\n          visitor.visit(getDocID(i), packedValue);\n        }\n      }\n\n      @Override\n      public byte[] getMinPackedValue() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public byte[] getMaxPackedValue() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getNumDimensions() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getBytesPerDimension() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public long size() {\n        return numPoints;\n      }\n\n      @Override\n      public int getDocCount() {\n        return numDocs;\n      }\n\n      @Override\n      public void swap(int i, int j) {\n        int tmp = ords[i];\n        ords[i] = ords[j];\n        ords[j] = tmp;\n      }\n\n      @Override\n      public int getDocID(int i) {\n        return docIDs[ords[i]];\n      }\n\n      @Override\n      public void getValue(int i, BytesRef packedValue) {\n        final long offset = (long) packedBytesLength * ords[i];\n        packedValue.length = packedBytesLength;\n        bytes.setRawBytesRef(packedValue, offset);\n      }\n\n      @Override\n      public byte getByteAt(int i, int k) {\n        final long offset = (long) packedBytesLength * ords[i] + k;\n        return bytes.readByte(offset);\n      }\n    };\n\n    PointsReader reader = new PointsReader() {\n      \n      @Override\n      public PointValues getValues(String fieldName) {\n        if (fieldName.equals(fieldInfo.name) == false) {\n          throw new IllegalArgumentException(\"fieldName must be the same\");\n        }\n        return values;\n      }\n      \n      @Override\n      public void checkIntegrity() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0L;\n      }\n\n      @Override\n      public void close() {\n      }\n    };\n\n    writer.writeField(fieldInfo, reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/PointValuesWriter#flush(SegmentWriteState,PointsWriter).mjava","sourceNew":null,"sourceOld":"  public void flush(SegmentWriteState state, PointsWriter writer) throws IOException {\n    PointValues values = new MutablePointValues() {\n\n      final int[] ords = new int[numPoints];\n      {\n        for (int i = 0; i < numPoints; ++i) {\n          ords[i] = i;\n        }\n      }\n\n      @Override\n      public void intersect(IntersectVisitor visitor) throws IOException {\n        final BytesRef scratch = new BytesRef();\n        final byte[] packedValue = new byte[packedBytesLength];\n        for(int i=0;i<numPoints;i++) {\n          getValue(i, scratch);\n          assert scratch.length == packedValue.length;\n          System.arraycopy(scratch.bytes, scratch.offset, packedValue, 0, packedBytesLength);\n          visitor.visit(getDocID(i), packedValue);\n        }\n      }\n\n      @Override\n      public byte[] getMinPackedValue() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public byte[] getMaxPackedValue() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getNumDimensions() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getBytesPerDimension() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public long size() {\n        return numPoints;\n      }\n\n      @Override\n      public int getDocCount() {\n        return numDocs;\n      }\n\n      @Override\n      public void swap(int i, int j) {\n        int tmp = ords[i];\n        ords[i] = ords[j];\n        ords[j] = tmp;\n      }\n\n      @Override\n      public int getDocID(int i) {\n        return docIDs[ords[i]];\n      }\n\n      @Override\n      public void getValue(int i, BytesRef packedValue) {\n        final long offset = (long) packedBytesLength * ords[i];\n        packedValue.length = packedBytesLength;\n        bytes.setRawBytesRef(packedValue, offset);\n      }\n\n      @Override\n      public byte getByteAt(int i, int k) {\n        final long offset = (long) packedBytesLength * ords[i] + k;\n        return bytes.readByte(offset);\n      }\n    };\n\n    PointsReader reader = new PointsReader() {\n      \n      @Override\n      public PointValues getValues(String fieldName) {\n        if (fieldName.equals(fieldInfo.name) == false) {\n          throw new IllegalArgumentException(\"fieldName must be the same\");\n        }\n        return values;\n      }\n      \n      @Override\n      public void checkIntegrity() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public long ramBytesUsed() {\n        return 0L;\n      }\n\n      @Override\n      public void close() {\n      }\n    };\n\n    writer.writeField(fieldInfo, reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b0567940defa1ea6eb8a039d9d36e3682063f8a4":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"a20457919db052812998f60294d17daa883ff972":["f524a98b3cfdaed67c9e4d967aa7f1382df89a79"],"f524a98b3cfdaed67c9e4d967aa7f1382df89a79":["b0567940defa1ea6eb8a039d9d36e3682063f8a4"],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["a20457919db052812998f60294d17daa883ff972"],"10005c6013abbd1102f2463cf95604d4c8774c99":["416f9e28900210be57b69bc12e2954fb98ed7ebe"],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["d08973aa47f2cf98a588293a53af4e948952ccfb"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["416f9e28900210be57b69bc12e2954fb98ed7ebe","367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"4522ffca5a1f420c6a02198c9332d7c596a30ca5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca":["4522ffca5a1f420c6a02198c9332d7c596a30ca5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"416f9e28900210be57b69bc12e2954fb98ed7ebe":["9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca"],"86a0a50d2d14aaee1e635bbec914468551f7f9a2":["367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"d08973aa47f2cf98a588293a53af4e948952ccfb":["416f9e28900210be57b69bc12e2954fb98ed7ebe","10005c6013abbd1102f2463cf95604d4c8774c99"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["d08973aa47f2cf98a588293a53af4e948952ccfb","a20457919db052812998f60294d17daa883ff972"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["86a0a50d2d14aaee1e635bbec914468551f7f9a2"]},"commit2Childs":{"b0567940defa1ea6eb8a039d9d36e3682063f8a4":["f524a98b3cfdaed67c9e4d967aa7f1382df89a79"],"a20457919db052812998f60294d17daa883ff972":["367f57e2ee85b7f7e28cfe73370a22cf67624f65","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"f524a98b3cfdaed67c9e4d967aa7f1382df89a79":["a20457919db052812998f60294d17daa883ff972"],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"10005c6013abbd1102f2463cf95604d4c8774c99":["d08973aa47f2cf98a588293a53af4e948952ccfb"],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["b0567940defa1ea6eb8a039d9d36e3682063f8a4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"4522ffca5a1f420c6a02198c9332d7c596a30ca5":["9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca":["416f9e28900210be57b69bc12e2954fb98ed7ebe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4522ffca5a1f420c6a02198c9332d7c596a30ca5"],"416f9e28900210be57b69bc12e2954fb98ed7ebe":["10005c6013abbd1102f2463cf95604d4c8774c99","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d08973aa47f2cf98a588293a53af4e948952ccfb"],"d08973aa47f2cf98a588293a53af4e948952ccfb":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"86a0a50d2d14aaee1e635bbec914468551f7f9a2":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}