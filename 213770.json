{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testBatchDeletes().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testBatchDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testBatchDeletes().mjava","sourceNew":"  // test that batched delete terms are flushed together\n  public void testBatchDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = IndexReader.open(dir);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    id = 0;\n    modifier.deleteDocuments(new Term(\"id\", String.valueOf(++id)));\n    modifier.deleteDocuments(new Term(\"id\", String.valueOf(++id)));\n\n    modifier.commit();\n\n    reader = IndexReader.open(dir);\n    assertEquals(5, reader.numDocs());\n    reader.close();\n\n    Term[] terms = new Term[3];\n    for (int i = 0; i < terms.length; i++) {\n      terms[i] = new Term(\"id\", String.valueOf(++id));\n    }\n    modifier.deleteDocuments(terms);\n    modifier.commit();\n    reader = IndexReader.open(dir);\n    assertEquals(2, reader.numDocs());\n    reader.close();\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test that batched delete terms are flushed together\n  public void testBatchDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = IndexReader.open(dir);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    id = 0;\n    modifier.deleteDocuments(new Term(\"id\", String.valueOf(++id)));\n    modifier.deleteDocuments(new Term(\"id\", String.valueOf(++id)));\n\n    modifier.commit();\n\n    reader = IndexReader.open(dir);\n    assertEquals(5, reader.numDocs());\n    reader.close();\n\n    Term[] terms = new Term[3];\n    for (int i = 0; i < terms.length; i++) {\n      terms[i] = new Term(\"id\", String.valueOf(++id));\n    }\n    modifier.deleteDocuments(terms);\n    modifier.commit();\n    reader = IndexReader.open(dir);\n    assertEquals(2, reader.numDocs());\n    reader.close();\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testBatchDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testBatchDeletes().mjava","sourceNew":"  // test that batched delete terms are flushed together\n  public void testBatchDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = IndexReader.open(dir);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    id = 0;\n    modifier.deleteDocuments(new Term(\"id\", String.valueOf(++id)));\n    modifier.deleteDocuments(new Term(\"id\", String.valueOf(++id)));\n\n    modifier.commit();\n\n    reader = IndexReader.open(dir);\n    assertEquals(5, reader.numDocs());\n    reader.close();\n\n    Term[] terms = new Term[3];\n    for (int i = 0; i < terms.length; i++) {\n      terms[i] = new Term(\"id\", String.valueOf(++id));\n    }\n    modifier.deleteDocuments(terms);\n    modifier.commit();\n    reader = IndexReader.open(dir);\n    assertEquals(2, reader.numDocs());\n    reader.close();\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test that batched delete terms are flushed together\n  public void testBatchDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = IndexReader.open(dir);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    id = 0;\n    modifier.deleteDocuments(new Term(\"id\", String.valueOf(++id)));\n    modifier.deleteDocuments(new Term(\"id\", String.valueOf(++id)));\n\n    modifier.commit();\n\n    reader = IndexReader.open(dir);\n    assertEquals(5, reader.numDocs());\n    reader.close();\n\n    Term[] terms = new Term[3];\n    for (int i = 0; i < terms.length; i++) {\n      terms[i] = new Term(\"id\", String.valueOf(++id));\n    }\n    modifier.deleteDocuments(terms);\n    modifier.commit();\n    reader = IndexReader.open(dir);\n    assertEquals(2, reader.numDocs());\n    reader.close();\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testBatchDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testBatchDeletes().mjava","sourceNew":"  // test that batched delete terms are flushed together\n  public void testBatchDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    id = 0;\n    modifier.deleteDocuments(new Term(\"id\", String.valueOf(++id)));\n    modifier.deleteDocuments(new Term(\"id\", String.valueOf(++id)));\n\n    modifier.commit();\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(5, reader.numDocs());\n    reader.close();\n\n    Term[] terms = new Term[3];\n    for (int i = 0; i < terms.length; i++) {\n      terms[i] = new Term(\"id\", String.valueOf(++id));\n    }\n    modifier.deleteDocuments(terms);\n    modifier.commit();\n    reader = DirectoryReader.open(dir);\n    assertEquals(2, reader.numDocs());\n    reader.close();\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test that batched delete terms are flushed together\n  public void testBatchDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = IndexReader.open(dir);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    id = 0;\n    modifier.deleteDocuments(new Term(\"id\", String.valueOf(++id)));\n    modifier.deleteDocuments(new Term(\"id\", String.valueOf(++id)));\n\n    modifier.commit();\n\n    reader = IndexReader.open(dir);\n    assertEquals(5, reader.numDocs());\n    reader.close();\n\n    Term[] terms = new Term[3];\n    for (int i = 0; i < terms.length; i++) {\n      terms[i] = new Term(\"id\", String.valueOf(++id));\n    }\n    modifier.deleteDocuments(terms);\n    modifier.commit();\n    reader = IndexReader.open(dir);\n    assertEquals(2, reader.numDocs());\n    reader.close();\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testBatchDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testBatchDeletes().mjava","sourceNew":"  // test that batched delete terms are flushed together\n  public void testBatchDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    id = 0;\n    modifier.deleteDocuments(new Term(\"id\", String.valueOf(++id)));\n    modifier.deleteDocuments(new Term(\"id\", String.valueOf(++id)));\n\n    modifier.commit();\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(5, reader.numDocs());\n    reader.close();\n\n    Term[] terms = new Term[3];\n    for (int i = 0; i < terms.length; i++) {\n      terms[i] = new Term(\"id\", String.valueOf(++id));\n    }\n    modifier.deleteDocuments(terms);\n    modifier.commit();\n    reader = DirectoryReader.open(dir);\n    assertEquals(2, reader.numDocs());\n    reader.close();\n\n    modifier.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  // test that batched delete terms are flushed together\n  public void testBatchDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    id = 0;\n    modifier.deleteDocuments(new Term(\"id\", String.valueOf(++id)));\n    modifier.deleteDocuments(new Term(\"id\", String.valueOf(++id)));\n\n    modifier.commit();\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(5, reader.numDocs());\n    reader.close();\n\n    Term[] terms = new Term[3];\n    for (int i = 0; i < terms.length; i++) {\n      terms[i] = new Term(\"id\", String.valueOf(++id));\n    }\n    modifier.deleteDocuments(terms);\n    modifier.commit();\n    reader = DirectoryReader.open(dir);\n    assertEquals(2, reader.numDocs());\n    reader.close();\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testBatchDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testBatchDeletes().mjava","sourceNew":"  // test that batched delete terms are flushed together\n  public void testBatchDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false))\n        .setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    id = 0;\n    modifier.deleteDocuments(new Term(\"id\", String.valueOf(++id)));\n    modifier.deleteDocuments(new Term(\"id\", String.valueOf(++id)));\n\n    modifier.commit();\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(5, reader.numDocs());\n    reader.close();\n\n    Term[] terms = new Term[3];\n    for (int i = 0; i < terms.length; i++) {\n      terms[i] = new Term(\"id\", String.valueOf(++id));\n    }\n    modifier.deleteDocuments(terms);\n    modifier.commit();\n    reader = DirectoryReader.open(dir);\n    assertEquals(2, reader.numDocs());\n    reader.close();\n\n    modifier.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  // test that batched delete terms are flushed together\n  public void testBatchDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    id = 0;\n    modifier.deleteDocuments(new Term(\"id\", String.valueOf(++id)));\n    modifier.deleteDocuments(new Term(\"id\", String.valueOf(++id)));\n\n    modifier.commit();\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(5, reader.numDocs());\n    reader.close();\n\n    Term[] terms = new Term[3];\n    for (int i = 0; i < terms.length; i++) {\n      terms[i] = new Term(\"id\", String.valueOf(++id));\n    }\n    modifier.deleteDocuments(terms);\n    modifier.commit();\n    reader = DirectoryReader.open(dir);\n    assertEquals(2, reader.numDocs());\n    reader.close();\n\n    modifier.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testBatchDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testBatchDeletes().mjava","sourceNew":"  // test that batched delete terms are flushed together\n  public void testBatchDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false))\n        .setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    id = 0;\n    modifier.deleteDocuments(new Term(\"id\", String.valueOf(++id)));\n    modifier.deleteDocuments(new Term(\"id\", String.valueOf(++id)));\n\n    modifier.commit();\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(5, reader.numDocs());\n    reader.close();\n\n    Term[] terms = new Term[3];\n    for (int i = 0; i < terms.length; i++) {\n      terms[i] = new Term(\"id\", String.valueOf(++id));\n    }\n    modifier.deleteDocuments(terms);\n    modifier.commit();\n    reader = DirectoryReader.open(dir);\n    assertEquals(2, reader.numDocs());\n    reader.close();\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test that batched delete terms are flushed together\n  public void testBatchDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false))\n        .setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    id = 0;\n    modifier.deleteDocuments(new Term(\"id\", String.valueOf(++id)));\n    modifier.deleteDocuments(new Term(\"id\", String.valueOf(++id)));\n\n    modifier.commit();\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(5, reader.numDocs());\n    reader.close();\n\n    Term[] terms = new Term[3];\n    for (int i = 0; i < terms.length; i++) {\n      terms[i] = new Term(\"id\", String.valueOf(++id));\n    }\n    modifier.deleteDocuments(terms);\n    modifier.commit();\n    reader = DirectoryReader.open(dir);\n    assertEquals(2, reader.numDocs());\n    reader.close();\n\n    modifier.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testBatchDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testBatchDeletes().mjava","sourceNew":"  // test that batched delete terms are flushed together\n  public void testBatchDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false))\n                                           .setMaxBufferedDocs(2));\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    id = 0;\n    modifier.deleteDocuments(new Term(\"id\", String.valueOf(++id)));\n    modifier.deleteDocuments(new Term(\"id\", String.valueOf(++id)));\n\n    modifier.commit();\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(5, reader.numDocs());\n    reader.close();\n\n    Term[] terms = new Term[3];\n    for (int i = 0; i < terms.length; i++) {\n      terms[i] = new Term(\"id\", String.valueOf(++id));\n    }\n    modifier.deleteDocuments(terms);\n    modifier.commit();\n    reader = DirectoryReader.open(dir);\n    assertEquals(2, reader.numDocs());\n    reader.close();\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test that batched delete terms are flushed together\n  public void testBatchDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false))\n        .setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    id = 0;\n    modifier.deleteDocuments(new Term(\"id\", String.valueOf(++id)));\n    modifier.deleteDocuments(new Term(\"id\", String.valueOf(++id)));\n\n    modifier.commit();\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(5, reader.numDocs());\n    reader.close();\n\n    Term[] terms = new Term[3];\n    for (int i = 0; i < terms.length; i++) {\n      terms[i] = new Term(\"id\", String.valueOf(++id));\n    }\n    modifier.deleteDocuments(terms);\n    modifier.commit();\n    reader = DirectoryReader.open(dir);\n    assertEquals(2, reader.numDocs());\n    reader.close();\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testBatchDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testBatchDeletes().mjava","sourceNew":"  // test that batched delete terms are flushed together\n  public void testBatchDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false))\n                                           .setMaxBufferedDocs(2));\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    id = 0;\n    modifier.deleteDocuments(new Term(\"id\", String.valueOf(++id)));\n    modifier.deleteDocuments(new Term(\"id\", String.valueOf(++id)));\n\n    modifier.commit();\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(5, reader.numDocs());\n    reader.close();\n\n    Term[] terms = new Term[3];\n    for (int i = 0; i < terms.length; i++) {\n      terms[i] = new Term(\"id\", String.valueOf(++id));\n    }\n    modifier.deleteDocuments(terms);\n    modifier.commit();\n    reader = DirectoryReader.open(dir);\n    assertEquals(2, reader.numDocs());\n    reader.close();\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test that batched delete terms are flushed together\n  public void testBatchDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false))\n        .setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    id = 0;\n    modifier.deleteDocuments(new Term(\"id\", String.valueOf(++id)));\n    modifier.deleteDocuments(new Term(\"id\", String.valueOf(++id)));\n\n    modifier.commit();\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(5, reader.numDocs());\n    reader.close();\n\n    Term[] terms = new Term[3];\n    for (int i = 0; i < terms.length; i++) {\n      terms[i] = new Term(\"id\", String.valueOf(++id));\n    }\n    modifier.deleteDocuments(terms);\n    modifier.commit();\n    reader = DirectoryReader.open(dir);\n    assertEquals(2, reader.numDocs());\n    reader.close();\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testBatchDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testBatchDeletes().mjava","sourceNew":"  // test that batched delete terms are flushed together\n  public void testBatchDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false))\n                                           .setMaxBufferedDocs(2));\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    id = 0;\n    modifier.deleteDocuments(new Term(\"id\", String.valueOf(++id)));\n    modifier.deleteDocuments(new Term(\"id\", String.valueOf(++id)));\n\n    modifier.commit();\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(5, reader.numDocs());\n    reader.close();\n\n    Term[] terms = new Term[3];\n    for (int i = 0; i < terms.length; i++) {\n      terms[i] = new Term(\"id\", String.valueOf(++id));\n    }\n    modifier.deleteDocuments(terms);\n    modifier.commit();\n    reader = DirectoryReader.open(dir);\n    assertEquals(2, reader.numDocs());\n    reader.close();\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test that batched delete terms are flushed together\n  public void testBatchDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false))\n        .setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    id = 0;\n    modifier.deleteDocuments(new Term(\"id\", String.valueOf(++id)));\n    modifier.deleteDocuments(new Term(\"id\", String.valueOf(++id)));\n\n    modifier.commit();\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(5, reader.numDocs());\n    reader.close();\n\n    Term[] terms = new Term[3];\n    for (int i = 0; i < terms.length; i++) {\n      terms[i] = new Term(\"id\", String.valueOf(++id));\n    }\n    modifier.deleteDocuments(terms);\n    modifier.commit();\n    reader = DirectoryReader.open(dir);\n    assertEquals(2, reader.numDocs());\n    reader.close();\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["d0ef034a4f10871667ae75181537775ddcf8ade4","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["d0ef034a4f10871667ae75181537775ddcf8ade4","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}