{"path":"lucene/core/src/java/org/apache/lucene/search/TermRangeQuery#TermRangeQuery(String,BytesRef,BytesRef,boolean,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermRangeQuery#TermRangeQuery(String,BytesRef,BytesRef,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#TermRangeQuery(String,BytesRef,BytesRef,boolean,boolean).mjava","sourceNew":"  /**\n   * Constructs a query selecting all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * <p>\n   * If an endpoint is null, it is said \n   * to be \"open\". Either or both endpoints may be open.  Open endpoints may not \n   * be exclusive (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param field The field that holds both lower and upper terms.\n   * @param lowerTerm\n   *          The term text at the lower end of the range\n   * @param upperTerm\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is\n   *          included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is\n   *          included in the range.\n   */\n  public TermRangeQuery(String field, BytesRef lowerTerm, BytesRef upperTerm, boolean includeLower, boolean includeUpper) {\n    super(field);\n    this.lowerTerm = lowerTerm;\n    this.upperTerm = upperTerm;\n    this.includeLower = includeLower;\n    this.includeUpper = includeUpper;\n  }\n\n","sourceOld":"  /**\n   * Constructs a query selecting all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * <p>\n   * If an endpoint is null, it is said \n   * to be \"open\". Either or both endpoints may be open.  Open endpoints may not \n   * be exclusive (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param field The field that holds both lower and upper terms.\n   * @param lowerTerm\n   *          The term text at the lower end of the range\n   * @param upperTerm\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is\n   *          included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is\n   *          included in the range.\n   */\n  public TermRangeQuery(String field, BytesRef lowerTerm, BytesRef upperTerm, boolean includeLower, boolean includeUpper) {\n    super(field);\n    this.lowerTerm = lowerTerm;\n    this.upperTerm = upperTerm;\n    this.includeLower = includeLower;\n    this.includeUpper = includeUpper;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermRangeQuery#TermRangeQuery(String,BytesRef,BytesRef,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermRangeQuery#TermRangeQuery(String,BytesRef,BytesRef,boolean,boolean).mjava","sourceNew":"  /**\n   * Constructs a query selecting all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * <p>\n   * If an endpoint is null, it is said \n   * to be \"open\". Either or both endpoints may be open.  Open endpoints may not \n   * be exclusive (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param field The field that holds both lower and upper terms.\n   * @param lowerTerm\n   *          The term text at the lower end of the range\n   * @param upperTerm\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is\n   *          included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is\n   *          included in the range.\n   */\n  public TermRangeQuery(String field, BytesRef lowerTerm, BytesRef upperTerm, boolean includeLower, boolean includeUpper) {\n    super(new Term(field, lowerTerm), toAutomaton(lowerTerm, upperTerm, includeLower, includeUpper), Integer.MAX_VALUE, true);\n    this.lowerTerm = lowerTerm;\n    this.upperTerm = upperTerm;\n    this.includeLower = includeLower;\n    this.includeUpper = includeUpper;\n  }\n\n","sourceOld":"  /**\n   * Constructs a query selecting all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * <p>\n   * If an endpoint is null, it is said \n   * to be \"open\". Either or both endpoints may be open.  Open endpoints may not \n   * be exclusive (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param field The field that holds both lower and upper terms.\n   * @param lowerTerm\n   *          The term text at the lower end of the range\n   * @param upperTerm\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is\n   *          included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is\n   *          included in the range.\n   */\n  public TermRangeQuery(String field, BytesRef lowerTerm, BytesRef upperTerm, boolean includeLower, boolean includeUpper) {\n    super(field);\n    this.lowerTerm = lowerTerm;\n    this.upperTerm = upperTerm;\n    this.includeLower = includeLower;\n    this.includeUpper = includeUpper;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermRangeQuery#TermRangeQuery(String,BytesRef,BytesRef,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermRangeQuery#TermRangeQuery(String,BytesRef,BytesRef,boolean,boolean).mjava","sourceNew":"  /**\n   * Constructs a query selecting all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * <p>\n   * If an endpoint is null, it is said \n   * to be \"open\". Either or both endpoints may be open.  Open endpoints may not \n   * be exclusive (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param field The field that holds both lower and upper terms.\n   * @param lowerTerm\n   *          The term text at the lower end of the range\n   * @param upperTerm\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is\n   *          included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is\n   *          included in the range.\n   */\n  public TermRangeQuery(String field, BytesRef lowerTerm, BytesRef upperTerm, boolean includeLower, boolean includeUpper) {\n    super(new Term(field, lowerTerm), toAutomaton(lowerTerm, upperTerm, includeLower, includeUpper), Integer.MAX_VALUE, true);\n    this.lowerTerm = lowerTerm;\n    this.upperTerm = upperTerm;\n    this.includeLower = includeLower;\n    this.includeUpper = includeUpper;\n  }\n\n","sourceOld":"  /**\n   * Constructs a query selecting all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * <p>\n   * If an endpoint is null, it is said \n   * to be \"open\". Either or both endpoints may be open.  Open endpoints may not \n   * be exclusive (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param field The field that holds both lower and upper terms.\n   * @param lowerTerm\n   *          The term text at the lower end of the range\n   * @param upperTerm\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is\n   *          included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is\n   *          included in the range.\n   */\n  public TermRangeQuery(String field, BytesRef lowerTerm, BytesRef upperTerm, boolean includeLower, boolean includeUpper) {\n    super(field);\n    this.lowerTerm = lowerTerm;\n    this.upperTerm = upperTerm;\n    this.includeLower = includeLower;\n    this.includeUpper = includeUpper;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","3e8715d826e588419327562287d5d6a8040d63d6"],"3e8715d826e588419327562287d5d6a8040d63d6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e8715d826e588419327562287d5d6a8040d63d6"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d2638f781be724518ff6c2263d14a48cf6e68017","3e8715d826e588419327562287d5d6a8040d63d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"3e8715d826e588419327562287d5d6a8040d63d6":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}