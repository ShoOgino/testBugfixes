{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternTokenizer#incrementToken().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternTokenizer#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternTokenizer#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (index >= str.length()) return false;\n    clearAttributes();\n    if (group >= 0) {\n    \n      // match a specific group\n      while (matcher.find()) {\n        index = matcher.start(group);\n        final int endIndex = matcher.end(group);\n        if (index == endIndex) continue;       \n        termAtt.setEmpty().append(str, index, endIndex);\n        offsetAtt.setOffset(correctOffset(index), correctOffset(endIndex));\n        return true;\n      }\n      \n      index = Integer.MAX_VALUE; // mark exhausted\n      return false;\n      \n    } else {\n    \n      // String.split() functionality\n      while (matcher.find()) {\n        if (matcher.start() - index > 0) {\n          // found a non-zero-length token\n          termAtt.setEmpty().append(str, index, matcher.start());\n          offsetAtt.setOffset(correctOffset(index), correctOffset(matcher.start()));\n          index = matcher.end();\n          return true;\n        }\n        \n        index = matcher.end();\n      }\n      \n      if (str.length() - index == 0) {\n        index = Integer.MAX_VALUE; // mark exhausted\n        return false;\n      }\n      \n      termAtt.setEmpty().append(str, index, str.length());\n      offsetAtt.setOffset(correctOffset(index), correctOffset(str.length()));\n      index = Integer.MAX_VALUE; // mark exhausted\n      return true;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (index >= str.length()) return false;\n    clearAttributes();\n    if (group >= 0) {\n    \n      // match a specific group\n      while (matcher.find()) {\n        index = matcher.start(group);\n        final int endIndex = matcher.end(group);\n        if (index == endIndex) continue;       \n        termAtt.setEmpty().append(str, index, endIndex);\n        offsetAtt.setOffset(correctOffset(index), correctOffset(endIndex));\n        return true;\n      }\n      \n      index = Integer.MAX_VALUE; // mark exhausted\n      return false;\n      \n    } else {\n    \n      // String.split() functionality\n      while (matcher.find()) {\n        if (matcher.start() - index > 0) {\n          // found a non-zero-length token\n          termAtt.setEmpty().append(str, index, matcher.start());\n          offsetAtt.setOffset(correctOffset(index), correctOffset(matcher.start()));\n          index = matcher.end();\n          return true;\n        }\n        \n        index = matcher.end();\n      }\n      \n      if (str.length() - index == 0) {\n        index = Integer.MAX_VALUE; // mark exhausted\n        return false;\n      }\n      \n      termAtt.setEmpty().append(str, index, str.length());\n      offsetAtt.setOffset(correctOffset(index), correctOffset(str.length()));\n      index = Integer.MAX_VALUE; // mark exhausted\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternTokenizer#incrementToken().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternTokenizer#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() {\n    if (index >= str.length()) return false;\n    clearAttributes();\n    if (group >= 0) {\n    \n      // match a specific group\n      while (matcher.find()) {\n        index = matcher.start(group);\n        final int endIndex = matcher.end(group);\n        if (index == endIndex) continue;       \n        termAtt.setEmpty().append(str, index, endIndex);\n        offsetAtt.setOffset(correctOffset(index), correctOffset(endIndex));\n        return true;\n      }\n      \n      index = Integer.MAX_VALUE; // mark exhausted\n      return false;\n      \n    } else {\n    \n      // String.split() functionality\n      while (matcher.find()) {\n        if (matcher.start() - index > 0) {\n          // found a non-zero-length token\n          termAtt.setEmpty().append(str, index, matcher.start());\n          offsetAtt.setOffset(correctOffset(index), correctOffset(matcher.start()));\n          index = matcher.end();\n          return true;\n        }\n        \n        index = matcher.end();\n      }\n      \n      if (str.length() - index == 0) {\n        index = Integer.MAX_VALUE; // mark exhausted\n        return false;\n      }\n      \n      termAtt.setEmpty().append(str, index, str.length());\n      offsetAtt.setOffset(correctOffset(index), correctOffset(str.length()));\n      index = Integer.MAX_VALUE; // mark exhausted\n      return true;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (index >= str.length()) return false;\n    clearAttributes();\n    if (group >= 0) {\n    \n      // match a specific group\n      while (matcher.find()) {\n        index = matcher.start(group);\n        final int endIndex = matcher.end(group);\n        if (index == endIndex) continue;       \n        termAtt.setEmpty().append(str, index, endIndex);\n        offsetAtt.setOffset(correctOffset(index), correctOffset(endIndex));\n        return true;\n      }\n      \n      index = Integer.MAX_VALUE; // mark exhausted\n      return false;\n      \n    } else {\n    \n      // String.split() functionality\n      while (matcher.find()) {\n        if (matcher.start() - index > 0) {\n          // found a non-zero-length token\n          termAtt.setEmpty().append(str, index, matcher.start());\n          offsetAtt.setOffset(correctOffset(index), correctOffset(matcher.start()));\n          index = matcher.end();\n          return true;\n        }\n        \n        index = matcher.end();\n      }\n      \n      if (str.length() - index == 0) {\n        index = Integer.MAX_VALUE; // mark exhausted\n        return false;\n      }\n      \n      termAtt.setEmpty().append(str, index, str.length());\n      offsetAtt.setOffset(correctOffset(index), correctOffset(str.length()));\n      index = Integer.MAX_VALUE; // mark exhausted\n      return true;\n    }\n  }\n\n","bugFix":["28e349236232860728fc91596fa4a1ec2c64bde6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternTokenizer#incrementToken().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternTokenizer#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() {\n    if (index >= str.length()) return false;\n    clearAttributes();\n    if (group >= 0) {\n    \n      // match a specific group\n      while (matcher.find()) {\n        index = matcher.start(group);\n        final int endIndex = matcher.end(group);\n        if (index == endIndex) continue;       \n        termAtt.setEmpty().append(str, index, endIndex);\n        offsetAtt.setOffset(correctOffset(index), correctOffset(endIndex));\n        return true;\n      }\n      \n      index = Integer.MAX_VALUE; // mark exhausted\n      return false;\n      \n    } else {\n    \n      // String.split() functionality\n      while (matcher.find()) {\n        if (matcher.start() - index > 0) {\n          // found a non-zero-length token\n          termAtt.setEmpty().append(str, index, matcher.start());\n          offsetAtt.setOffset(correctOffset(index), correctOffset(matcher.start()));\n          index = matcher.end();\n          return true;\n        }\n        \n        index = matcher.end();\n      }\n      \n      if (str.length() - index == 0) {\n        index = Integer.MAX_VALUE; // mark exhausted\n        return false;\n      }\n      \n      termAtt.setEmpty().append(str, index, str.length());\n      offsetAtt.setOffset(correctOffset(index), correctOffset(str.length()));\n      index = Integer.MAX_VALUE; // mark exhausted\n      return true;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (index >= str.length()) return false;\n    clearAttributes();\n    if (group >= 0) {\n    \n      // match a specific group\n      while (matcher.find()) {\n        index = matcher.start(group);\n        final int endIndex = matcher.end(group);\n        if (index == endIndex) continue;       \n        termAtt.setEmpty().append(str, index, endIndex);\n        offsetAtt.setOffset(correctOffset(index), correctOffset(endIndex));\n        return true;\n      }\n      \n      index = Integer.MAX_VALUE; // mark exhausted\n      return false;\n      \n    } else {\n    \n      // String.split() functionality\n      while (matcher.find()) {\n        if (matcher.start() - index > 0) {\n          // found a non-zero-length token\n          termAtt.setEmpty().append(str, index, matcher.start());\n          offsetAtt.setOffset(correctOffset(index), correctOffset(matcher.start()));\n          index = matcher.end();\n          return true;\n        }\n        \n        index = matcher.end();\n      }\n      \n      if (str.length() - index == 0) {\n        index = Integer.MAX_VALUE; // mark exhausted\n        return false;\n      }\n      \n      termAtt.setEmpty().append(str, index, str.length());\n      offsetAtt.setOffset(correctOffset(index), correctOffset(str.length()));\n      index = Integer.MAX_VALUE; // mark exhausted\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}