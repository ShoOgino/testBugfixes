{"path":"src/test/org/apache/solr/client/solrj/StartSolrJetty#main(String[]).mjava","commits":[{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/client/solrj/StartSolrJetty#main(String[]).mjava","pathOld":"client/java/solrj/test/org/apache/solr/client/solrj/StartSolrJetty#main(String[]).mjava","sourceNew":"  public static void main( String[] args ) \n  {\n    //System.setProperty(\"solr.solr.home\", \"../../../example/solr\");\n\n    Server server = new Server();\n    SocketConnector connector = new SocketConnector();\n    // Set some timeout options to make debugging easier.\n    connector.setMaxIdleTime(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(8080);\n    server.setConnectors(new Connector[] { connector });\n    \n    WebAppContext bb = new WebAppContext();\n    bb.setServer(server);\n    bb.setContextPath(\"/\");\n    bb.setWar(\"src/webapp/web\");\n\n//    // START JMX SERVER\n//    if( true ) {\n//      MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer();\n//      MBeanContainer mBeanContainer = new MBeanContainer(mBeanServer);\n//      server.getContainer().addEventListener(mBeanContainer);\n//      mBeanContainer.start();\n//    }\n    \n    server.addHandler(bb);\n\n    try {\n      System.out.println(\">>> STARTING EMBEDDED JETTY SERVER, PRESS ANY KEY TO STOP\");\n      server.start();\n      while (System.in.available() == 0) {\n        Thread.sleep(5000);\n      }\n      server.stop();\n      server.join();\n    } \n    catch (Exception e) {\n      e.printStackTrace();\n      System.exit(100);\n    }\n  }\n\n","sourceOld":"  public static void main( String[] args ) \n  {\n    //System.setProperty(\"solr.solr.home\", \"../../../example/solr\");\n\n    Server server = new Server();\n    SocketConnector connector = new SocketConnector();\n    // Set some timeout options to make debugging easier.\n    connector.setMaxIdleTime(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(8080);\n    server.setConnectors(new Connector[] { connector });\n    \n    WebAppContext bb = new WebAppContext();\n    bb.setServer(server);\n    bb.setContextPath(\"/\");\n    bb.setWar(\"src/webapp/web\");\n\n//    // START JMX SERVER\n//    if( true ) {\n//      MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer();\n//      MBeanContainer mBeanContainer = new MBeanContainer(mBeanServer);\n//      server.getContainer().addEventListener(mBeanContainer);\n//      mBeanContainer.start();\n//    }\n    \n    server.addHandler(bb);\n\n    try {\n      System.out.println(\">>> STARTING EMBEDDED JETTY SERVER, PRESS ANY KEY TO STOP\");\n      server.start();\n      while (System.in.available() == 0) {\n        Thread.sleep(5000);\n      }\n      server.stop();\n      server.join();\n    } \n    catch (Exception e) {\n      e.printStackTrace();\n      System.exit(100);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/StartSolrJetty#main(String[]).mjava","pathOld":"src/test/org/apache/solr/client/solrj/StartSolrJetty#main(String[]).mjava","sourceNew":"  public static void main( String[] args ) \n  {\n    //System.setProperty(\"solr.solr.home\", \"../../../example/solr\");\n\n    Server server = new Server();\n    SocketConnector connector = new SocketConnector();\n    // Set some timeout options to make debugging easier.\n    connector.setMaxIdleTime(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(8080);\n    server.setConnectors(new Connector[] { connector });\n    \n    WebAppContext bb = new WebAppContext();\n    bb.setServer(server);\n    bb.setContextPath(\"/\");\n    bb.setWar(\"src/webapp/web\");\n\n//    // START JMX SERVER\n//    if( true ) {\n//      MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer();\n//      MBeanContainer mBeanContainer = new MBeanContainer(mBeanServer);\n//      server.getContainer().addEventListener(mBeanContainer);\n//      mBeanContainer.start();\n//    }\n    \n    server.addHandler(bb);\n\n    try {\n      System.out.println(\">>> STARTING EMBEDDED JETTY SERVER, PRESS ANY KEY TO STOP\");\n      server.start();\n      while (System.in.available() == 0) {\n        Thread.sleep(5000);\n      }\n      server.stop();\n      server.join();\n    } \n    catch (Exception e) {\n      e.printStackTrace();\n      System.exit(100);\n    }\n  }\n\n","sourceOld":"  public static void main( String[] args ) \n  {\n    //System.setProperty(\"solr.solr.home\", \"../../../example/solr\");\n\n    Server server = new Server();\n    SocketConnector connector = new SocketConnector();\n    // Set some timeout options to make debugging easier.\n    connector.setMaxIdleTime(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(8080);\n    server.setConnectors(new Connector[] { connector });\n    \n    WebAppContext bb = new WebAppContext();\n    bb.setServer(server);\n    bb.setContextPath(\"/\");\n    bb.setWar(\"src/webapp/web\");\n\n//    // START JMX SERVER\n//    if( true ) {\n//      MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer();\n//      MBeanContainer mBeanContainer = new MBeanContainer(mBeanServer);\n//      server.getContainer().addEventListener(mBeanContainer);\n//      mBeanContainer.start();\n//    }\n    \n    server.addHandler(bb);\n\n    try {\n      System.out.println(\">>> STARTING EMBEDDED JETTY SERVER, PRESS ANY KEY TO STOP\");\n      server.start();\n      while (System.in.available() == 0) {\n        Thread.sleep(5000);\n      }\n      server.stop();\n      server.join();\n    } \n    catch (Exception e) {\n      e.printStackTrace();\n      System.exit(100);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}