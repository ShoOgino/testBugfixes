{"path":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testBasicIntersects().mjava","commits":[{"id":"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c","date":1531585717,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testBasicIntersects().mjava","pathOld":"/dev/null","sourceNew":"  /** test we can search for a point */\n  public void testBasicIntersects() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    int numVertices = TestUtil.nextInt(random(), 200000, 500000);\n\n    // add a random polygon without a hole\n    Polygon p = GeoTestUtil.createRegularPolygon(0, 90, atLeast(1000000), numVertices);\n    Document document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, p);\n    writer.addDocument(document);\n\n    // add a random polygon with a hole\n    Polygon inner = new Polygon(new double[] {-1d, -1d, 1d, 1d, -1d},\n        new double[] {-91d, -89d, -89d, -91.0, -91.0});\n    Polygon outer = GeoTestUtil.createRegularPolygon(0, -90, atLeast(1000000), numVertices);\n\n    document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, new Polygon(outer.getPolyLats(), outer.getPolyLons(), inner));\n    writer.addDocument(document);\n\n    ////// search /////\n    // search an intersecting bbox\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    Query q = newRectQuery(FIELDNAME, -1d, 1d, p.minLon, p.maxLon);\n    assertEquals(1, searcher.count(q));\n\n    // search a disjoint bbox\n    q = newRectQuery(FIELDNAME, p.minLat-1d, p.minLat+1, p.minLon-1d, p.minLon+1d);\n    assertEquals(0, searcher.count(q));\n\n    // search a bbox in the hole\n    q = newRectQuery(FIELDNAME, inner.minLat + 1e-6, inner.maxLat - 1e-6, inner.minLon + 1e-6, inner.maxLon - 1e-6);\n    assertEquals(0, searcher.count(q));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testBasicIntersects().mjava","pathOld":"/dev/null","sourceNew":"  /** test we can search for a point */\n  public void testBasicIntersects() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    int numVertices = TestUtil.nextInt(random(), 200000, 500000);\n\n    // add a random polygon without a hole\n    Polygon p = GeoTestUtil.createRegularPolygon(0, 90, atLeast(1000000), numVertices);\n    Document document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, p);\n    writer.addDocument(document);\n\n    // add a random polygon with a hole\n    Polygon inner = new Polygon(new double[] {-1d, -1d, 1d, 1d, -1d},\n        new double[] {-91d, -89d, -89d, -91.0, -91.0});\n    Polygon outer = GeoTestUtil.createRegularPolygon(0, -90, atLeast(1000000), numVertices);\n\n    document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, new Polygon(outer.getPolyLats(), outer.getPolyLons(), inner));\n    writer.addDocument(document);\n\n    ////// search /////\n    // search an intersecting bbox\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    Query q = newRectQuery(FIELDNAME, -1d, 1d, p.minLon, p.maxLon);\n    assertEquals(1, searcher.count(q));\n\n    // search a disjoint bbox\n    q = newRectQuery(FIELDNAME, p.minLat-1d, p.minLat+1, p.minLon-1d, p.minLon+1d);\n    assertEquals(0, searcher.count(q));\n\n    // search a bbox in the hole\n    q = newRectQuery(FIELDNAME, inner.minLat + 1e-6, inner.maxLat - 1e-6, inner.minLon + 1e-6, inner.maxLon - 1e-6);\n    assertEquals(0, searcher.count(q));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c84ddf2ced5c7879b9231ca27ff9b9f53990d6b0","date":1531665378,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testBasicIntersects().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testBasicIntersects().mjava","sourceNew":"  /** test we can search for a point */\n  public void testBasicIntersects() throws Exception {\n    int numVertices = TestUtil.nextInt(random(), 200000, 500000);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < numVertices/100) {\n      iwc.setMaxBufferedDocs(numVertices/100);\n    }\n    Directory dir;\n    if (numVertices > 300000) {\n      dir = newFSDirectory(createTempDir(getClass().getSimpleName()));\n    } else {\n      dir = newDirectory();\n    }\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    // add a random polygon without a hole\n    Polygon p = GeoTestUtil.createRegularPolygon(0, 90, atLeast(1000000), numVertices);\n    Document document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, p);\n    writer.addDocument(document);\n\n    // add a random polygon with a hole\n    Polygon inner = new Polygon(new double[] {-1d, -1d, 1d, 1d, -1d},\n        new double[] {-91d, -89d, -89d, -91.0, -91.0});\n    Polygon outer = GeoTestUtil.createRegularPolygon(0, -90, atLeast(1000000), numVertices);\n\n    document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, new Polygon(outer.getPolyLats(), outer.getPolyLons(), inner));\n    writer.addDocument(document);\n\n    ////// search /////\n    // search an intersecting bbox\n    IndexReader reader = DirectoryReader.open(writer);\n    IndexSearcher searcher = newSearcher(reader);\n    Query q = newRectQuery(FIELDNAME, -1d, 1d, p.minLon, p.maxLon);\n    assertEquals(1, searcher.count(q));\n\n    // search a disjoint bbox\n    q = newRectQuery(FIELDNAME, p.minLat-1d, p.minLat+1, p.minLon-1d, p.minLon+1d);\n    assertEquals(0, searcher.count(q));\n\n    // search a bbox in the hole\n    q = newRectQuery(FIELDNAME, inner.minLat + 1e-6, inner.maxLat - 1e-6, inner.minLon + 1e-6, inner.maxLon - 1e-6);\n    assertEquals(0, searcher.count(q));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** test we can search for a point */\n  public void testBasicIntersects() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    int numVertices = TestUtil.nextInt(random(), 200000, 500000);\n\n    // add a random polygon without a hole\n    Polygon p = GeoTestUtil.createRegularPolygon(0, 90, atLeast(1000000), numVertices);\n    Document document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, p);\n    writer.addDocument(document);\n\n    // add a random polygon with a hole\n    Polygon inner = new Polygon(new double[] {-1d, -1d, 1d, 1d, -1d},\n        new double[] {-91d, -89d, -89d, -91.0, -91.0});\n    Polygon outer = GeoTestUtil.createRegularPolygon(0, -90, atLeast(1000000), numVertices);\n\n    document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, new Polygon(outer.getPolyLats(), outer.getPolyLons(), inner));\n    writer.addDocument(document);\n\n    ////// search /////\n    // search an intersecting bbox\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    Query q = newRectQuery(FIELDNAME, -1d, 1d, p.minLon, p.maxLon);\n    assertEquals(1, searcher.count(q));\n\n    // search a disjoint bbox\n    q = newRectQuery(FIELDNAME, p.minLat-1d, p.minLat+1, p.minLon-1d, p.minLon+1d);\n    assertEquals(0, searcher.count(q));\n\n    // search a bbox in the hole\n    q = newRectQuery(FIELDNAME, inner.minLat + 1e-6, inner.maxLat - 1e-6, inner.minLon + 1e-6, inner.maxLon - 1e-6);\n    assertEquals(0, searcher.count(q));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a015018940d108a771fb0bc4eed2ab3e3ca089c2","date":1531689126,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testBasicIntersects().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testBasicIntersects().mjava","sourceNew":"  /** test we can search for a point with a standard number of vertices*/\n  public void testBasicIntersects() throws Exception {\n    int numVertices = TestUtil.nextInt(random(), 50, 100);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a random polygon without a hole\n    Polygon p = GeoTestUtil.createRegularPolygon(0, 90, atLeast(1000000), numVertices);\n    Document document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, p);\n    writer.addDocument(document);\n\n    // add a random polygon with a hole\n    Polygon inner = new Polygon(new double[] {-1d, -1d, 1d, 1d, -1d},\n        new double[] {-91d, -89d, -89d, -91.0, -91.0});\n    Polygon outer = GeoTestUtil.createRegularPolygon(0, -90, atLeast(1000000), numVertices);\n\n    document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, new Polygon(outer.getPolyLats(), outer.getPolyLons(), inner));\n    writer.addDocument(document);\n\n    ////// search /////\n    // search an intersecting bbox\n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    Query q = newRectQuery(FIELDNAME, -1d, 1d, p.minLon, p.maxLon);\n    assertEquals(1, searcher.count(q));\n\n    // search a disjoint bbox\n    q = newRectQuery(FIELDNAME, p.minLat-1d, p.minLat+1, p.minLon-1d, p.minLon+1d);\n    assertEquals(0, searcher.count(q));\n\n    // search a bbox in the hole\n    q = newRectQuery(FIELDNAME, inner.minLat + 1e-6, inner.maxLat - 1e-6, inner.minLon + 1e-6, inner.maxLon - 1e-6);\n    assertEquals(0, searcher.count(q));\n\n    IOUtils.close(reader, dir);\n  }\n\n","sourceOld":"  /** test we can search for a point */\n  public void testBasicIntersects() throws Exception {\n    int numVertices = TestUtil.nextInt(random(), 200000, 500000);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < numVertices/100) {\n      iwc.setMaxBufferedDocs(numVertices/100);\n    }\n    Directory dir;\n    if (numVertices > 300000) {\n      dir = newFSDirectory(createTempDir(getClass().getSimpleName()));\n    } else {\n      dir = newDirectory();\n    }\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    // add a random polygon without a hole\n    Polygon p = GeoTestUtil.createRegularPolygon(0, 90, atLeast(1000000), numVertices);\n    Document document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, p);\n    writer.addDocument(document);\n\n    // add a random polygon with a hole\n    Polygon inner = new Polygon(new double[] {-1d, -1d, 1d, 1d, -1d},\n        new double[] {-91d, -89d, -89d, -91.0, -91.0});\n    Polygon outer = GeoTestUtil.createRegularPolygon(0, -90, atLeast(1000000), numVertices);\n\n    document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, new Polygon(outer.getPolyLats(), outer.getPolyLons(), inner));\n    writer.addDocument(document);\n\n    ////// search /////\n    // search an intersecting bbox\n    IndexReader reader = DirectoryReader.open(writer);\n    IndexSearcher searcher = newSearcher(reader);\n    Query q = newRectQuery(FIELDNAME, -1d, 1d, p.minLon, p.maxLon);\n    assertEquals(1, searcher.count(q));\n\n    // search a disjoint bbox\n    q = newRectQuery(FIELDNAME, p.minLat-1d, p.minLat+1, p.minLon-1d, p.minLon+1d);\n    assertEquals(0, searcher.count(q));\n\n    // search a bbox in the hole\n    q = newRectQuery(FIELDNAME, inner.minLat + 1e-6, inner.maxLat - 1e-6, inner.minLon + 1e-6, inner.maxLon - 1e-6);\n    assertEquals(0, searcher.count(q));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testBasicIntersects().mjava","pathOld":"/dev/null","sourceNew":"  /** test we can search for a point with a standard number of vertices*/\n  public void testBasicIntersects() throws Exception {\n    int numVertices = TestUtil.nextInt(random(), 50, 100);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a random polygon without a hole\n    Polygon p = GeoTestUtil.createRegularPolygon(0, 90, atLeast(1000000), numVertices);\n    Document document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, p);\n    writer.addDocument(document);\n\n    // add a random polygon with a hole\n    Polygon inner = new Polygon(new double[] {-1d, -1d, 1d, 1d, -1d},\n        new double[] {-91d, -89d, -89d, -91.0, -91.0});\n    Polygon outer = GeoTestUtil.createRegularPolygon(0, -90, atLeast(1000000), numVertices);\n\n    document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, new Polygon(outer.getPolyLats(), outer.getPolyLons(), inner));\n    writer.addDocument(document);\n\n    ////// search /////\n    // search an intersecting bbox\n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    Query q = newRectQuery(FIELDNAME, -1d, 1d, p.minLon, p.maxLon);\n    assertEquals(1, searcher.count(q));\n\n    // search a disjoint bbox\n    q = newRectQuery(FIELDNAME, p.minLat-1d, p.minLat+1, p.minLon-1d, p.minLon+1d);\n    assertEquals(0, searcher.count(q));\n\n    // search a bbox in the hole\n    q = newRectQuery(FIELDNAME, inner.minLat + 1e-6, inner.maxLat - 1e-6, inner.minLon + 1e-6, inner.maxLon - 1e-6);\n    assertEquals(0, searcher.count(q));\n\n    IOUtils.close(reader, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c312ee0a541562afddf7fdc6d95cf64dbca27792","date":1532104607,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testBasicIntersects().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testBasicIntersects().mjava","sourceNew":"  /** test we can search for a point with a standard number of vertices*/\n  public void testBasicIntersects() throws Exception {\n    int numVertices = TestUtil.nextInt(random(), 50, 100);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a random polygon\n    Polygon p = GeoTestUtil.createRegularPolygon(0, 90, atLeast(1000000), numVertices);\n    Document document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, p);\n    writer.addDocument(document);\n\n    ////// search /////\n    // search an intersecting bbox\n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    Query q = newRectQuery(FIELDNAME, -1d, 1d, p.minLon, p.maxLon);\n    assertEquals(1, searcher.count(q));\n\n    // search a disjoint bbox\n    q = newRectQuery(FIELDNAME, p.minLat-1d, p.minLat+1, p.minLon-1d, p.minLon+1d);\n    assertEquals(0, searcher.count(q));\n\n    IOUtils.close(reader, dir);\n  }\n\n","sourceOld":"  /** test we can search for a point with a standard number of vertices*/\n  public void testBasicIntersects() throws Exception {\n    int numVertices = TestUtil.nextInt(random(), 50, 100);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a random polygon without a hole\n    Polygon p = GeoTestUtil.createRegularPolygon(0, 90, atLeast(1000000), numVertices);\n    Document document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, p);\n    writer.addDocument(document);\n\n    // add a random polygon with a hole\n    Polygon inner = new Polygon(new double[] {-1d, -1d, 1d, 1d, -1d},\n        new double[] {-91d, -89d, -89d, -91.0, -91.0});\n    Polygon outer = GeoTestUtil.createRegularPolygon(0, -90, atLeast(1000000), numVertices);\n\n    document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, new Polygon(outer.getPolyLats(), outer.getPolyLons(), inner));\n    writer.addDocument(document);\n\n    ////// search /////\n    // search an intersecting bbox\n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    Query q = newRectQuery(FIELDNAME, -1d, 1d, p.minLon, p.maxLon);\n    assertEquals(1, searcher.count(q));\n\n    // search a disjoint bbox\n    q = newRectQuery(FIELDNAME, p.minLat-1d, p.minLat+1, p.minLon-1d, p.minLon+1d);\n    assertEquals(0, searcher.count(q));\n\n    // search a bbox in the hole\n    q = newRectQuery(FIELDNAME, inner.minLat + 1e-6, inner.maxLat - 1e-6, inner.minLon + 1e-6, inner.maxLon - 1e-6);\n    assertEquals(0, searcher.count(q));\n\n    IOUtils.close(reader, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6345300cb90308ddf9579f7a7396a32d98795311","date":1533248257,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testBasicIntersects().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testBasicIntersects().mjava","sourceNew":"  /** test we can search for a point with a standard number of vertices*/\n  public void testBasicIntersects() throws Exception {\n    int numVertices = TestUtil.nextInt(random(), 50, 100);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a random polygon document\n    Polygon p = GeoTestUtil.createRegularPolygon(0, 90, atLeast(1000000), numVertices);\n    Document document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, p);\n    writer.addDocument(document);\n\n    // add a line document\n    document = new Document();\n    // add a line string\n    double lats[] = new double[p.numPoints() - 1];\n    double lons[] = new double[p.numPoints() - 1];\n    for (int i = 0; i < lats.length; ++i) {\n      lats[i] = p.getPolyLat(i);\n      lons[i] = p.getPolyLon(i);\n    }\n    Line l = new Line(lats, lons);\n    addLineToDoc(FIELDNAME, document, l);\n    writer.addDocument(document);\n\n    ////// search /////\n    // search an intersecting bbox\n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    double minLat = Math.min(lats[0], lats[1]);\n    double minLon = Math.min(lons[0], lons[1]);\n    double maxLat = Math.max(lats[0], lats[1]);\n    double maxLon = Math.max(lons[0], lons[1]);\n    Query q = newRectQuery(FIELDNAME, minLat, maxLat, minLon, maxLon);\n    assertEquals(2, searcher.count(q));\n\n    // search a disjoint bbox\n    q = newRectQuery(FIELDNAME, p.minLat-1d, p.minLat+1, p.minLon-1d, p.minLon+1d);\n    assertEquals(0, searcher.count(q));\n\n    IOUtils.close(reader, dir);\n  }\n\n","sourceOld":"  /** test we can search for a point with a standard number of vertices*/\n  public void testBasicIntersects() throws Exception {\n    int numVertices = TestUtil.nextInt(random(), 50, 100);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a random polygon\n    Polygon p = GeoTestUtil.createRegularPolygon(0, 90, atLeast(1000000), numVertices);\n    Document document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, p);\n    writer.addDocument(document);\n\n    ////// search /////\n    // search an intersecting bbox\n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    Query q = newRectQuery(FIELDNAME, -1d, 1d, p.minLon, p.maxLon);\n    assertEquals(1, searcher.count(q));\n\n    // search a disjoint bbox\n    q = newRectQuery(FIELDNAME, p.minLat-1d, p.minLat+1, p.minLon-1d, p.minLon+1d);\n    assertEquals(0, searcher.count(q));\n\n    IOUtils.close(reader, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestLatLonShape#testBasicIntersects().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testBasicIntersects().mjava","sourceNew":"  /** test we can search for a point with a standard number of vertices*/\n  public void testBasicIntersects() throws Exception {\n    int numVertices = TestUtil.nextInt(random(), 50, 100);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a random polygon document\n    Polygon p = GeoTestUtil.createRegularPolygon(0, 90, atLeast(1000000), numVertices);\n    Document document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, p);\n    writer.addDocument(document);\n\n    // add a line document\n    document = new Document();\n    // add a line string\n    double lats[] = new double[p.numPoints() - 1];\n    double lons[] = new double[p.numPoints() - 1];\n    for (int i = 0; i < lats.length; ++i) {\n      lats[i] = p.getPolyLat(i);\n      lons[i] = p.getPolyLon(i);\n    }\n    Line l = new Line(lats, lons);\n    addLineToDoc(FIELDNAME, document, l);\n    writer.addDocument(document);\n\n    ////// search /////\n    // search an intersecting bbox\n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    double minLat = Math.min(lats[0], lats[1]);\n    double minLon = Math.min(lons[0], lons[1]);\n    double maxLat = Math.max(lats[0], lats[1]);\n    double maxLon = Math.max(lons[0], lons[1]);\n    Query q = newRectQuery(FIELDNAME, minLat, maxLat, minLon, maxLon);\n    assertEquals(2, searcher.count(q));\n\n    // search a disjoint bbox\n    q = newRectQuery(FIELDNAME, p.minLat-1d, p.minLat+1, p.minLon-1d, p.minLon+1d);\n    assertEquals(0, searcher.count(q));\n\n    IOUtils.close(reader, dir);\n  }\n\n","sourceOld":"  /** test we can search for a point with a standard number of vertices*/\n  public void testBasicIntersects() throws Exception {\n    int numVertices = TestUtil.nextInt(random(), 50, 100);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a random polygon document\n    Polygon p = GeoTestUtil.createRegularPolygon(0, 90, atLeast(1000000), numVertices);\n    Document document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, p);\n    writer.addDocument(document);\n\n    // add a line document\n    document = new Document();\n    // add a line string\n    double lats[] = new double[p.numPoints() - 1];\n    double lons[] = new double[p.numPoints() - 1];\n    for (int i = 0; i < lats.length; ++i) {\n      lats[i] = p.getPolyLat(i);\n      lons[i] = p.getPolyLon(i);\n    }\n    Line l = new Line(lats, lons);\n    addLineToDoc(FIELDNAME, document, l);\n    writer.addDocument(document);\n\n    ////// search /////\n    // search an intersecting bbox\n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    double minLat = Math.min(lats[0], lats[1]);\n    double minLon = Math.min(lons[0], lons[1]);\n    double maxLat = Math.max(lats[0], lats[1]);\n    double maxLon = Math.max(lons[0], lons[1]);\n    Query q = newRectQuery(FIELDNAME, minLat, maxLat, minLon, maxLon);\n    assertEquals(2, searcher.count(q));\n\n    // search a disjoint bbox\n    q = newRectQuery(FIELDNAME, p.minLat-1d, p.minLat+1, p.minLon-1d, p.minLon+1d);\n    assertEquals(0, searcher.count(q));\n\n    IOUtils.close(reader, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a015018940d108a771fb0bc4eed2ab3e3ca089c2":["c84ddf2ced5c7879b9231ca27ff9b9f53990d6b0"],"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a015018940d108a771fb0bc4eed2ab3e3ca089c2"],"c312ee0a541562afddf7fdc6d95cf64dbca27792":["a015018940d108a771fb0bc4eed2ab3e3ca089c2"],"c84ddf2ced5c7879b9231ca27ff9b9f53990d6b0":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["6345300cb90308ddf9579f7a7396a32d98795311"],"6345300cb90308ddf9579f7a7396a32d98795311":["c312ee0a541562afddf7fdc6d95cf64dbca27792"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"]},"commit2Childs":{"a015018940d108a771fb0bc4eed2ab3e3ca089c2":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","c312ee0a541562afddf7fdc6d95cf64dbca27792"],"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c":["c84ddf2ced5c7879b9231ca27ff9b9f53990d6b0","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"c312ee0a541562afddf7fdc6d95cf64dbca27792":["6345300cb90308ddf9579f7a7396a32d98795311"],"c84ddf2ced5c7879b9231ca27ff9b9f53990d6b0":["a015018940d108a771fb0bc4eed2ab3e3ca089c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6345300cb90308ddf9579f7a7396a32d98795311":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}