{"path":"solr/src/java/org/apache/solr/update/SolrIndexWriter#init(String,IndexSchema,SolrIndexConfig).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/SolrIndexWriter#init(String,IndexSchema,SolrIndexConfig).mjava","pathOld":"/dev/null","sourceNew":"  private void init(String name, IndexSchema schema, SolrIndexConfig config) throws IOException {\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    this.schema = schema;\n    setSimilarity(schema.getSimilarity());\n    // setUseCompoundFile(false);\n\n    if (config != null) {\n      //only set maxBufferedDocs\n      if (config.maxBufferedDocs != -1) {\n        setMaxBufferedDocs(config.maxBufferedDocs);\n      }\n      if (config.ramBufferSizeMB != -1) {\n        setRAMBufferSizeMB(config.ramBufferSizeMB);\n      }\n      if (config.termIndexInterval != -1) {\n        setTermIndexInterval(config.termIndexInterval);\n        \n      }\n      if (config.maxMergeDocs != -1) setMaxMergeDocs(config.maxMergeDocs);\n      if (config.maxFieldLength != -1) setMaxFieldLength(config.maxFieldLength);\n      String className = config.mergePolicyInfo == null ? SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME: config.mergePolicyInfo.className;\n      MergePolicy  policy = null;\n      try {\n        policy = (MergePolicy) schema.getResourceLoader().newInstance(className, null, new Class[]{IndexWriter.class}, new Object[] { this });\n      } catch (Exception e) {\n        policy = (MergePolicy) schema.getResourceLoader().newInstance(className);\n      }\n      if(config.mergePolicyInfo != null) SolrPluginUtils.invokeSetters(policy,config.mergePolicyInfo.initArgs);\n      setMergePolicy(policy);\n\n      if (getMergePolicy() instanceof LogMergePolicy) {\n        setUseCompoundFile(config.useCompoundFile);\n        if (config.mergeFactor != -1) { setMergeFactor(config.mergeFactor); }\n      } else  {\n        log.warn(\"Use of compound file format or mergefactor cannot be configured if merge policy is not an instance \" +\n                \"of LogMergePolicy. The configured policy's defaults will be used.\");\n      }\n\n      className = config.mergeSchedulerInfo == null ? SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME: config.mergeSchedulerInfo.className;\n      MergeScheduler scheduler = (MergeScheduler) schema.getResourceLoader().newInstance(className);\n      if(config.mergeSchedulerInfo != null) SolrPluginUtils.invokeSetters(scheduler,config.mergeSchedulerInfo.initArgs);\n      setMergeScheduler(scheduler);\n\n      String infoStreamFile = config.infoStreamFile;\n      if (infoStreamFile != null) {\n        File f = new File(infoStreamFile);\n        File parent = f.getParentFile();\n        if (parent != null) parent.mkdirs();\n        FileOutputStream fos = new FileOutputStream(f, true);\n        infoStream = new TimeLoggingPrintStream(fos, true);\n        setInfoStream(infoStream);\n      }\n      //if (config.commitLockTimeout != -1) setWriteLockTimeout(config.commitLockTimeout);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/update/SolrIndexWriter#init(String,IndexSchema,SolrIndexConfig).mjava","sourceNew":null,"sourceOld":"  private void init(String name, IndexSchema schema, SolrIndexConfig config) throws IOException {\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    this.schema = schema;\n    setSimilarity(schema.getSimilarity());\n    // setUseCompoundFile(false);\n\n    if (config != null) {\n      //only set maxBufferedDocs\n      if (config.maxBufferedDocs != -1) {\n        setMaxBufferedDocs(config.maxBufferedDocs);\n      }\n      if (config.ramBufferSizeMB != -1) {\n        setRAMBufferSizeMB(config.ramBufferSizeMB);\n      }\n      if (config.termIndexInterval != -1) {\n        setTermIndexInterval(config.termIndexInterval);\n        \n      }\n      if (config.maxMergeDocs != -1) setMaxMergeDocs(config.maxMergeDocs);\n      if (config.maxFieldLength != -1) setMaxFieldLength(config.maxFieldLength);\n      String className = config.mergePolicyInfo == null ? SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME: config.mergePolicyInfo.className;\n      MergePolicy  policy = null;\n      try {\n        policy = (MergePolicy) schema.getResourceLoader().newInstance(className, null, new Class[]{IndexWriter.class}, new Object[] { this });\n      } catch (Exception e) {\n        policy = (MergePolicy) schema.getResourceLoader().newInstance(className);\n      }\n      if(config.mergePolicyInfo != null) SolrPluginUtils.invokeSetters(policy,config.mergePolicyInfo.initArgs);\n      setMergePolicy(policy);\n\n      if (getMergePolicy() instanceof LogMergePolicy) {\n        setUseCompoundFile(config.useCompoundFile);\n        if (config.mergeFactor != -1) { setMergeFactor(config.mergeFactor); }\n      } else  {\n        log.warn(\"Use of compound file format or mergefactor cannot be configured if merge policy is not an instance \" +\n                \"of LogMergePolicy. The configured policy's defaults will be used.\");\n      }\n\n      className = config.mergeSchedulerInfo == null ? SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME: config.mergeSchedulerInfo.className;\n      MergeScheduler scheduler = (MergeScheduler) schema.getResourceLoader().newInstance(className);\n      if(config.mergeSchedulerInfo != null) SolrPluginUtils.invokeSetters(scheduler,config.mergeSchedulerInfo.initArgs);\n      setMergeScheduler(scheduler);\n\n      String infoStreamFile = config.infoStreamFile;\n      if (infoStreamFile != null) {\n        File f = new File(infoStreamFile);\n        File parent = f.getParentFile();\n        if (parent != null) parent.mkdirs();\n        FileOutputStream fos = new FileOutputStream(f, true);\n        infoStream = new TimeLoggingPrintStream(fos, true);\n        setInfoStream(infoStream);\n      }\n      //if (config.commitLockTimeout != -1) setWriteLockTimeout(config.commitLockTimeout);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/SolrIndexWriter#init(String,IndexSchema,SolrIndexConfig).mjava","pathOld":"src/java/org/apache/solr/update/SolrIndexWriter#init(String,IndexSchema,SolrIndexConfig).mjava","sourceNew":"  private void init(String name, IndexSchema schema, SolrIndexConfig config) throws IOException {\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    this.schema = schema;\n    setSimilarity(schema.getSimilarity());\n    // setUseCompoundFile(false);\n\n    if (config != null) {\n      //only set maxBufferedDocs\n      if (config.maxBufferedDocs != -1) {\n        setMaxBufferedDocs(config.maxBufferedDocs);\n      }\n      if (config.ramBufferSizeMB != -1) {\n        setRAMBufferSizeMB(config.ramBufferSizeMB);\n      }\n      if (config.termIndexInterval != -1) {\n        setTermIndexInterval(config.termIndexInterval);\n        \n      }\n      if (config.maxMergeDocs != -1) setMaxMergeDocs(config.maxMergeDocs);\n      if (config.maxFieldLength != -1) setMaxFieldLength(config.maxFieldLength);\n      String className = config.mergePolicyInfo == null ? SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME: config.mergePolicyInfo.className;\n      MergePolicy  policy = null;\n      try {\n        policy = (MergePolicy) schema.getResourceLoader().newInstance(className, null, new Class[]{IndexWriter.class}, new Object[] { this });\n      } catch (Exception e) {\n        policy = (MergePolicy) schema.getResourceLoader().newInstance(className);\n      }\n      if(config.mergePolicyInfo != null) SolrPluginUtils.invokeSetters(policy,config.mergePolicyInfo.initArgs);\n      setMergePolicy(policy);\n\n      if (getMergePolicy() instanceof LogMergePolicy) {\n        setUseCompoundFile(config.useCompoundFile);\n        if (config.mergeFactor != -1) { setMergeFactor(config.mergeFactor); }\n      } else  {\n        log.warn(\"Use of compound file format or mergefactor cannot be configured if merge policy is not an instance \" +\n                \"of LogMergePolicy. The configured policy's defaults will be used.\");\n      }\n\n      className = config.mergeSchedulerInfo == null ? SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME: config.mergeSchedulerInfo.className;\n      MergeScheduler scheduler = (MergeScheduler) schema.getResourceLoader().newInstance(className);\n      if(config.mergeSchedulerInfo != null) SolrPluginUtils.invokeSetters(scheduler,config.mergeSchedulerInfo.initArgs);\n      setMergeScheduler(scheduler);\n\n      String infoStreamFile = config.infoStreamFile;\n      if (infoStreamFile != null) {\n        File f = new File(infoStreamFile);\n        File parent = f.getParentFile();\n        if (parent != null) parent.mkdirs();\n        FileOutputStream fos = new FileOutputStream(f, true);\n        infoStream = new TimeLoggingPrintStream(fos, true);\n        setInfoStream(infoStream);\n      }\n      //if (config.commitLockTimeout != -1) setWriteLockTimeout(config.commitLockTimeout);\n    }\n\n  }\n\n","sourceOld":"  private void init(String name, IndexSchema schema, SolrIndexConfig config) throws IOException {\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    this.schema = schema;\n    setSimilarity(schema.getSimilarity());\n    // setUseCompoundFile(false);\n\n    if (config != null) {\n      //only set maxBufferedDocs\n      if (config.maxBufferedDocs != -1) {\n        setMaxBufferedDocs(config.maxBufferedDocs);\n      }\n      if (config.ramBufferSizeMB != -1) {\n        setRAMBufferSizeMB(config.ramBufferSizeMB);\n      }\n      if (config.termIndexInterval != -1) {\n        setTermIndexInterval(config.termIndexInterval);\n        \n      }\n      if (config.maxMergeDocs != -1) setMaxMergeDocs(config.maxMergeDocs);\n      if (config.maxFieldLength != -1) setMaxFieldLength(config.maxFieldLength);\n      String className = config.mergePolicyInfo == null ? SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME: config.mergePolicyInfo.className;\n      MergePolicy  policy = null;\n      try {\n        policy = (MergePolicy) schema.getResourceLoader().newInstance(className, null, new Class[]{IndexWriter.class}, new Object[] { this });\n      } catch (Exception e) {\n        policy = (MergePolicy) schema.getResourceLoader().newInstance(className);\n      }\n      if(config.mergePolicyInfo != null) SolrPluginUtils.invokeSetters(policy,config.mergePolicyInfo.initArgs);\n      setMergePolicy(policy);\n\n      if (getMergePolicy() instanceof LogMergePolicy) {\n        setUseCompoundFile(config.useCompoundFile);\n        if (config.mergeFactor != -1) { setMergeFactor(config.mergeFactor); }\n      } else  {\n        log.warn(\"Use of compound file format or mergefactor cannot be configured if merge policy is not an instance \" +\n                \"of LogMergePolicy. The configured policy's defaults will be used.\");\n      }\n\n      className = config.mergeSchedulerInfo == null ? SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME: config.mergeSchedulerInfo.className;\n      MergeScheduler scheduler = (MergeScheduler) schema.getResourceLoader().newInstance(className);\n      if(config.mergeSchedulerInfo != null) SolrPluginUtils.invokeSetters(scheduler,config.mergeSchedulerInfo.initArgs);\n      setMergeScheduler(scheduler);\n\n      String infoStreamFile = config.infoStreamFile;\n      if (infoStreamFile != null) {\n        File f = new File(infoStreamFile);\n        File parent = f.getParentFile();\n        if (parent != null) parent.mkdirs();\n        FileOutputStream fos = new FileOutputStream(f, true);\n        infoStream = new TimeLoggingPrintStream(fos, true);\n        setInfoStream(infoStream);\n      }\n      //if (config.commitLockTimeout != -1) setWriteLockTimeout(config.commitLockTimeout);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/update/SolrIndexWriter#init(String,IndexSchema,SolrIndexConfig).mjava","pathOld":"/dev/null","sourceNew":"  private void init(String name, IndexSchema schema, SolrIndexConfig config) throws IOException {\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    this.schema = schema;\n    setSimilarity(schema.getSimilarity());\n    // setUseCompoundFile(false);\n\n    if (config != null) {\n      //only set maxBufferedDocs\n      if (config.maxBufferedDocs != -1) {\n        setMaxBufferedDocs(config.maxBufferedDocs);\n      }\n      if (config.ramBufferSizeMB != -1) {\n        setRAMBufferSizeMB(config.ramBufferSizeMB);\n      }\n      if (config.termIndexInterval != -1) {\n        setTermIndexInterval(config.termIndexInterval);\n        \n      }\n      if (config.maxMergeDocs != -1) setMaxMergeDocs(config.maxMergeDocs);\n      if (config.maxFieldLength != -1) setMaxFieldLength(config.maxFieldLength);\n      String className = config.mergePolicyInfo == null ? SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME: config.mergePolicyInfo.className;\n      MergePolicy  policy = null;\n      try {\n        policy = (MergePolicy) schema.getResourceLoader().newInstance(className, null, new Class[]{IndexWriter.class}, new Object[] { this });\n      } catch (Exception e) {\n        policy = (MergePolicy) schema.getResourceLoader().newInstance(className);\n      }\n      if(config.mergePolicyInfo != null) SolrPluginUtils.invokeSetters(policy,config.mergePolicyInfo.initArgs);\n      setMergePolicy(policy);\n\n      if (getMergePolicy() instanceof LogMergePolicy) {\n        setUseCompoundFile(config.useCompoundFile);\n        if (config.mergeFactor != -1) { setMergeFactor(config.mergeFactor); }\n      } else  {\n        log.warn(\"Use of compound file format or mergefactor cannot be configured if merge policy is not an instance \" +\n                \"of LogMergePolicy. The configured policy's defaults will be used.\");\n      }\n\n      className = config.mergeSchedulerInfo == null ? SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME: config.mergeSchedulerInfo.className;\n      MergeScheduler scheduler = (MergeScheduler) schema.getResourceLoader().newInstance(className);\n      if(config.mergeSchedulerInfo != null) SolrPluginUtils.invokeSetters(scheduler,config.mergeSchedulerInfo.initArgs);\n      setMergeScheduler(scheduler);\n\n      String infoStreamFile = config.infoStreamFile;\n      if (infoStreamFile != null) {\n        File f = new File(infoStreamFile);\n        File parent = f.getParentFile();\n        if (parent != null) parent.mkdirs();\n        FileOutputStream fos = new FileOutputStream(f, true);\n        infoStream = new TimeLoggingPrintStream(fos, true);\n        setInfoStream(infoStream);\n      }\n      //if (config.commitLockTimeout != -1) setWriteLockTimeout(config.commitLockTimeout);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/update/SolrIndexWriter#init(String,IndexSchema,SolrIndexConfig).mjava","sourceNew":null,"sourceOld":"  private void init(String name, IndexSchema schema, SolrIndexConfig config) throws IOException {\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    this.schema = schema;\n    setSimilarity(schema.getSimilarity());\n    // setUseCompoundFile(false);\n\n    if (config != null) {\n      //only set maxBufferedDocs\n      if (config.maxBufferedDocs != -1) {\n        setMaxBufferedDocs(config.maxBufferedDocs);\n      }\n      if (config.ramBufferSizeMB != -1) {\n        setRAMBufferSizeMB(config.ramBufferSizeMB);\n      }\n      if (config.termIndexInterval != -1) {\n        setTermIndexInterval(config.termIndexInterval);\n        \n      }\n      if (config.maxMergeDocs != -1) setMaxMergeDocs(config.maxMergeDocs);\n      if (config.maxFieldLength != -1) setMaxFieldLength(config.maxFieldLength);\n      String className = config.mergePolicyInfo == null ? SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME: config.mergePolicyInfo.className;\n      MergePolicy  policy = null;\n      try {\n        policy = (MergePolicy) schema.getResourceLoader().newInstance(className, null, new Class[]{IndexWriter.class}, new Object[] { this });\n      } catch (Exception e) {\n        policy = (MergePolicy) schema.getResourceLoader().newInstance(className);\n      }\n      if(config.mergePolicyInfo != null) SolrPluginUtils.invokeSetters(policy,config.mergePolicyInfo.initArgs);\n      setMergePolicy(policy);\n\n      if (getMergePolicy() instanceof LogMergePolicy) {\n        setUseCompoundFile(config.useCompoundFile);\n        if (config.mergeFactor != -1) { setMergeFactor(config.mergeFactor); }\n      } else  {\n        log.warn(\"Use of compound file format or mergefactor cannot be configured if merge policy is not an instance \" +\n                \"of LogMergePolicy. The configured policy's defaults will be used.\");\n      }\n\n      className = config.mergeSchedulerInfo == null ? SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME: config.mergeSchedulerInfo.className;\n      MergeScheduler scheduler = (MergeScheduler) schema.getResourceLoader().newInstance(className);\n      if(config.mergeSchedulerInfo != null) SolrPluginUtils.invokeSetters(scheduler,config.mergeSchedulerInfo.initArgs);\n      setMergeScheduler(scheduler);\n\n      String infoStreamFile = config.infoStreamFile;\n      if (infoStreamFile != null) {\n        File f = new File(infoStreamFile);\n        File parent = f.getParentFile();\n        if (parent != null) parent.mkdirs();\n        FileOutputStream fos = new FileOutputStream(f, true);\n        infoStream = new TimeLoggingPrintStream(fos, true);\n        setInfoStream(infoStream);\n      }\n      //if (config.commitLockTimeout != -1) setWriteLockTimeout(config.commitLockTimeout);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/update/SolrIndexWriter#init(String,IndexSchema,SolrIndexConfig).mjava","sourceNew":null,"sourceOld":"  private void init(String name, IndexSchema schema, SolrIndexConfig config) throws IOException {\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    this.schema = schema;\n    setSimilarity(schema.getSimilarity());\n    // setUseCompoundFile(false);\n\n    if (config != null) {\n      //only set maxBufferedDocs\n      if (config.maxBufferedDocs != -1) {\n        setMaxBufferedDocs(config.maxBufferedDocs);\n      }\n      if (config.ramBufferSizeMB != -1) {\n        setRAMBufferSizeMB(config.ramBufferSizeMB);\n      }\n      if (config.termIndexInterval != -1) {\n        setTermIndexInterval(config.termIndexInterval);\n        \n      }\n      if (config.maxMergeDocs != -1) setMaxMergeDocs(config.maxMergeDocs);\n      if (config.maxFieldLength != -1) setMaxFieldLength(config.maxFieldLength);\n      String className = config.mergePolicyInfo == null ? SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME: config.mergePolicyInfo.className;\n      MergePolicy  policy = null;\n      try {\n        policy = (MergePolicy) schema.getResourceLoader().newInstance(className, null, new Class[]{IndexWriter.class}, new Object[] { this });\n      } catch (Exception e) {\n        policy = (MergePolicy) schema.getResourceLoader().newInstance(className);\n      }\n      if(config.mergePolicyInfo != null) SolrPluginUtils.invokeSetters(policy,config.mergePolicyInfo.initArgs);\n      setMergePolicy(policy);\n\n      if (getMergePolicy() instanceof LogMergePolicy) {\n        setUseCompoundFile(config.useCompoundFile);\n        if (config.mergeFactor != -1) { setMergeFactor(config.mergeFactor); }\n      } else  {\n        log.warn(\"Use of compound file format or mergefactor cannot be configured if merge policy is not an instance \" +\n                \"of LogMergePolicy. The configured policy's defaults will be used.\");\n      }\n\n      className = config.mergeSchedulerInfo == null ? SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME: config.mergeSchedulerInfo.className;\n      MergeScheduler scheduler = (MergeScheduler) schema.getResourceLoader().newInstance(className);\n      if(config.mergeSchedulerInfo != null) SolrPluginUtils.invokeSetters(scheduler,config.mergeSchedulerInfo.initArgs);\n      setMergeScheduler(scheduler);\n\n      String infoStreamFile = config.infoStreamFile;\n      if (infoStreamFile != null) {\n        File f = new File(infoStreamFile);\n        File parent = f.getParentFile();\n        if (parent != null) parent.mkdirs();\n        FileOutputStream fos = new FileOutputStream(f, true);\n        infoStream = new TimeLoggingPrintStream(fos, true);\n        setInfoStream(infoStream);\n      }\n      //if (config.commitLockTimeout != -1) setWriteLockTimeout(config.commitLockTimeout);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/update/SolrIndexWriter#init(String,IndexSchema,SolrIndexConfig).mjava","sourceNew":null,"sourceOld":"  private void init(String name, IndexSchema schema, SolrIndexConfig config) throws IOException {\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    this.schema = schema;\n    setSimilarity(schema.getSimilarity());\n    // setUseCompoundFile(false);\n\n    if (config != null) {\n      //only set maxBufferedDocs\n      if (config.maxBufferedDocs != -1) {\n        setMaxBufferedDocs(config.maxBufferedDocs);\n      }\n      if (config.ramBufferSizeMB != -1) {\n        setRAMBufferSizeMB(config.ramBufferSizeMB);\n      }\n      if (config.termIndexInterval != -1) {\n        setTermIndexInterval(config.termIndexInterval);\n        \n      }\n      if (config.maxMergeDocs != -1) setMaxMergeDocs(config.maxMergeDocs);\n      if (config.maxFieldLength != -1) setMaxFieldLength(config.maxFieldLength);\n      String className = config.mergePolicyInfo == null ? SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME: config.mergePolicyInfo.className;\n      MergePolicy  policy = null;\n      try {\n        policy = (MergePolicy) schema.getResourceLoader().newInstance(className, null, new Class[]{IndexWriter.class}, new Object[] { this });\n      } catch (Exception e) {\n        policy = (MergePolicy) schema.getResourceLoader().newInstance(className);\n      }\n      if(config.mergePolicyInfo != null) SolrPluginUtils.invokeSetters(policy,config.mergePolicyInfo.initArgs);\n      setMergePolicy(policy);\n\n      if (getMergePolicy() instanceof LogMergePolicy) {\n        setUseCompoundFile(config.useCompoundFile);\n        if (config.mergeFactor != -1) { setMergeFactor(config.mergeFactor); }\n      } else  {\n        log.warn(\"Use of compound file format or mergefactor cannot be configured if merge policy is not an instance \" +\n                \"of LogMergePolicy. The configured policy's defaults will be used.\");\n      }\n\n      className = config.mergeSchedulerInfo == null ? SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME: config.mergeSchedulerInfo.className;\n      MergeScheduler scheduler = (MergeScheduler) schema.getResourceLoader().newInstance(className);\n      if(config.mergeSchedulerInfo != null) SolrPluginUtils.invokeSetters(scheduler,config.mergeSchedulerInfo.initArgs);\n      setMergeScheduler(scheduler);\n\n      String infoStreamFile = config.infoStreamFile;\n      if (infoStreamFile != null) {\n        File f = new File(infoStreamFile);\n        File parent = f.getParentFile();\n        if (parent != null) parent.mkdirs();\n        FileOutputStream fos = new FileOutputStream(f, true);\n        infoStream = new TimeLoggingPrintStream(fos, true);\n        setInfoStream(infoStream);\n      }\n      //if (config.commitLockTimeout != -1) setWriteLockTimeout(config.commitLockTimeout);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":["1da8d55113b689b06716246649de6f62430f15c0","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["1da8d55113b689b06716246649de6f62430f15c0"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}