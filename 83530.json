{"path":"solr/core/src/test/org/apache/solr/search/json/TestJsonRequest#testFilterCachingLocally(Client).mjava","commits":[{"id":"e927cf171dca7f8ff7b206baec5eb7fadadccb92","date":1577558891,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/json/TestJsonRequest#testFilterCachingLocally(Client).mjava","pathOld":"/dev/null","sourceNew":"  private static void testFilterCachingLocally(Client client) throws Exception {\n    if(client.getClientProvider()==null) {\n      final SolrQueryRequest request = req();\n      try {\n        final CaffeineCache<Query,DocSet> filterCache = (CaffeineCache<Query,DocSet>) request.getSearcher().getFilterCache();\n        filterCache.clear();\n        final TermQuery catA = new TermQuery(new Term(\"cat_s\", \"A\"));\n        assertNull(\"cache is empty\",filterCache.get(catA));\n\n        if(random().nextBoolean()) {\n          if(random().nextBoolean()) {\n            if(random().nextBoolean()) {\n              assertCatANot1(client, \"must\");\n            }else {\n              assertCatANot1(client, \"must\", \"cat_s:A\");\n            }\n          } else {\n            assertCatANot1(client, \"must\",\"{!lucene q.op=AND df=cat_s \"+\"cache=\"+random().nextBoolean()+\"}A\" );\n          }   \n        } else {\n          assertCatANot1(client, \"filter\", \"{!lucene q.op=AND df=cat_s cache=false}A\");\n        }\n        assertNull(\"no cache still\",filterCache.get(catA));\n\n        if (random().nextBoolean()) {\n          if (random().nextBoolean()) {\n            assertCatANot1(client, \"filter\", \"cat_s:A\");\n          } else {\n            assertCatANot1(client, \"filter\");\n          }\n        } else {\n          assertCatANot1(client, \"filter\",\"{!lucene q.op=AND df=cat_s cache=true}A\");\n        }\n        assertNotNull(\"got cached \",filterCache.get(catA));\n\n      } finally {\n        request.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4414d09a90891bc59e6e5fec445b178928fc4ca3","date":1577694286,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/json/TestJsonRequest#testFilterCachingLocally(Client).mjava","pathOld":"/dev/null","sourceNew":"  private static void testFilterCachingLocally(Client client) throws Exception {\n    if(client.getClientProvider()==null) {\n      final SolrQueryRequest request = req();\n      try {\n        final CaffeineCache<Query,DocSet> filterCache = (CaffeineCache<Query,DocSet>) request.getSearcher().getFilterCache();\n        filterCache.clear();\n        final TermQuery catA = new TermQuery(new Term(\"cat_s\", \"A\"));\n        assertNull(\"cache is empty\",filterCache.get(catA));\n\n        if(random().nextBoolean()) {\n          if(random().nextBoolean()) {\n            if(random().nextBoolean()) {\n              assertCatANot1(client, \"must\");\n            }else {\n              assertCatANot1(client, \"must\", \"cat_s:A\");\n            }\n          } else {\n            assertCatANot1(client, \"must\",\"{!lucene q.op=AND df=cat_s \"+\"cache=\"+random().nextBoolean()+\"}A\" );\n          }   \n        } else {\n          assertCatANot1(client, \"filter\", \"{!lucene q.op=AND df=cat_s cache=false}A\");\n        }\n        assertNull(\"no cache still\",filterCache.get(catA));\n\n        if (random().nextBoolean()) {\n          if (random().nextBoolean()) {\n            assertCatANot1(client, \"filter\", \"cat_s:A\");\n          } else {\n            assertCatANot1(client, \"filter\");\n          }\n        } else {\n          assertCatANot1(client, \"filter\",\"{!lucene q.op=AND df=cat_s cache=true}A\");\n        }\n        assertNotNull(\"got cached \",filterCache.get(catA));\n\n      } finally {\n        request.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4414d09a90891bc59e6e5fec445b178928fc4ca3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e927cf171dca7f8ff7b206baec5eb7fadadccb92"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e927cf171dca7f8ff7b206baec5eb7fadadccb92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e927cf171dca7f8ff7b206baec5eb7fadadccb92"]},"commit2Childs":{"4414d09a90891bc59e6e5fec445b178928fc4ca3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4414d09a90891bc59e6e5fec445b178928fc4ca3","e927cf171dca7f8ff7b206baec5eb7fadadccb92"],"e927cf171dca7f8ff7b206baec5eb7fadadccb92":["4414d09a90891bc59e6e5fec445b178928fc4ca3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4414d09a90891bc59e6e5fec445b178928fc4ca3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}