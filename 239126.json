{"path":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/GradientFormatter#hexToInt(String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/GradientFormatter#hexToInt(String).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/GradientFormatter#hexToInt(String).mjava","sourceNew":"    /**\n     * Converts a hex string into an int. Integer.parseInt(hex, 16) assumes the\n     * input is nonnegative unless there is a preceding minus sign. This method\n     * reads the input as twos complement instead, so if the input is 8 bytes\n     * long, it will correctly restore a negative int produced by\n     * Integer.toHexString() but not necessarily one produced by\n     * Integer.toString(x,16) since that method will produce a string like '-FF'\n     * for negative integer values.\n     * \n     * @param hex\n     *            A string in capital or lower case hex, of no more then 16\n     *            characters.\n     * @throws NumberFormatException\n     *             if the string is more than 16 characters long, or if any\n     *             character is not in the set [0-9a-fA-f]\n     */\n    public static final int hexToInt(String hex)\n    {\n        int len = hex.length();\n        if (len > 16)\n            throw new NumberFormatException();\n\n        int l = 0;\n        for (int i = 0; i < len; i++)\n        {\n            l <<= 4;\n            int c = Character.digit(hex.charAt(i), 16);\n            if (c < 0)\n                throw new NumberFormatException();\n            l |= c;\n        }\n        return l;\n    }\n\n","sourceOld":"    /**\n     * Converts a hex string into an int. Integer.parseInt(hex, 16) assumes the\n     * input is nonnegative unless there is a preceding minus sign. This method\n     * reads the input as twos complement instead, so if the input is 8 bytes\n     * long, it will correctly restore a negative int produced by\n     * Integer.toHexString() but not necessarily one produced by\n     * Integer.toString(x,16) since that method will produce a string like '-FF'\n     * for negative integer values.\n     * \n     * @param hex\n     *            A string in capital or lower case hex, of no more then 16\n     *            characters.\n     * @throws NumberFormatException\n     *             if the string is more than 16 characters long, or if any\n     *             character is not in the set [0-9a-fA-f]\n     */\n    public static final int hexToInt(String hex)\n    {\n        int len = hex.length();\n        if (len > 16)\n            throw new NumberFormatException();\n\n        int l = 0;\n        for (int i = 0; i < len; i++)\n        {\n            l <<= 4;\n            int c = Character.digit(hex.charAt(i), 16);\n            if (c < 0)\n                throw new NumberFormatException();\n            l |= c;\n        }\n        return l;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/GradientFormatter#hexToInt(String).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/GradientFormatter#hexToInt(String).mjava","sourceNew":"    /**\n     * Converts a hex string into an int. Integer.parseInt(hex, 16) assumes the\n     * input is nonnegative unless there is a preceding minus sign. This method\n     * reads the input as twos complement instead, so if the input is 8 bytes\n     * long, it will correctly restore a negative int produced by\n     * Integer.toHexString() but not necessarily one produced by\n     * Integer.toString(x,16) since that method will produce a string like '-FF'\n     * for negative integer values.\n     * \n     * @param hex\n     *            A string in capital or lower case hex, of no more then 16\n     *            characters.\n     * @throws NumberFormatException\n     *             if the string is more than 16 characters long, or if any\n     *             character is not in the set [0-9a-fA-f]\n     */\n    public static final int hexToInt(String hex)\n    {\n        int len = hex.length();\n        if (len > 16)\n            throw new NumberFormatException();\n\n        int l = 0;\n        for (int i = 0; i < len; i++)\n        {\n            l <<= 4;\n            int c = Character.digit(hex.charAt(i), 16);\n            if (c < 0)\n                throw new NumberFormatException();\n            l |= c;\n        }\n        return l;\n    }\n\n","sourceOld":"    /**\n     * Converts a hex string into an int. Integer.parseInt(hex, 16) assumes the\n     * input is nonnegative unless there is a preceding minus sign. This method\n     * reads the input as twos complement instead, so if the input is 8 bytes\n     * long, it will correctly restore a negative int produced by\n     * Integer.toHexString() but not necessarily one produced by\n     * Integer.toString(x,16) since that method will produce a string like '-FF'\n     * for negative integer values.\n     * \n     * @param hex\n     *            A string in capital or lower case hex, of no more then 16\n     *            characters.\n     * @throws NumberFormatException\n     *             if the string is more than 16 characters long, or if any\n     *             character is not in the set [0-9a-fA-f]\n     */\n    public static final int hexToInt(String hex)\n    {\n        int len = hex.length();\n        if (len > 16)\n            throw new NumberFormatException();\n\n        int l = 0;\n        for (int i = 0; i < len; i++)\n        {\n            l <<= 4;\n            int c = Character.digit(hex.charAt(i), 16);\n            if (c < 0)\n                throw new NumberFormatException();\n            l |= c;\n        }\n        return l;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}