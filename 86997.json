{"path":"solr/core/src/test/org/apache/solr/cloud/SyncSliceTest#waitTillRecovered().mjava","commits":[{"id":"b550b9fe8a5610e9a206849fa6e2bde1e8a2cf02","date":1360357765,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SyncSliceTest#waitTillRecovered().mjava","pathOld":"/dev/null","sourceNew":"  private void waitTillRecovered() throws Exception {\n    for (int i = 0; i < 30; i++) { \n      Thread.sleep(1000);\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection collection1 = clusterState.getCollection(\"collection1\");\n      Slice slice = collection1.getSlice(\"shard1\");\n      Collection<Replica> replicas = slice.getReplicas();\n      boolean allActive = true;\n      for (Replica replica : replicas) {\n        if (!clusterState.liveNodesContain(replica.getNodeName())\n            || !replica.get(ZkStateReader.STATE_PROP).equals(\n                ZkStateReader.ACTIVE)) {\n          allActive = false;\n          break;\n        }\n      }\n      if (allActive) {\n        return;\n      }\n    }\n    printLayout();\n    fail(\"timeout waiting to see recovered node\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d93914268f50e71bc43bc1aeefb7d21573ea1df","date":1360458703,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SyncSliceTest#waitTillRecovered().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SyncSliceTest#waitTillRecovered().mjava","sourceNew":"  private void waitTillRecovered() throws Exception {\n    for (int i = 0; i < 30; i++) { \n      Thread.sleep(3000);\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection collection1 = clusterState.getCollection(\"collection1\");\n      Slice slice = collection1.getSlice(\"shard1\");\n      Collection<Replica> replicas = slice.getReplicas();\n      boolean allActive = true;\n      for (Replica replica : replicas) {\n        if (!clusterState.liveNodesContain(replica.getNodeName())\n            || !replica.get(ZkStateReader.STATE_PROP).equals(\n                ZkStateReader.ACTIVE)) {\n          allActive = false;\n          break;\n        }\n      }\n      if (allActive) {\n        return;\n      }\n    }\n    printLayout();\n    fail(\"timeout waiting to see recovered node\");\n  }\n\n","sourceOld":"  private void waitTillRecovered() throws Exception {\n    for (int i = 0; i < 30; i++) { \n      Thread.sleep(1000);\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection collection1 = clusterState.getCollection(\"collection1\");\n      Slice slice = collection1.getSlice(\"shard1\");\n      Collection<Replica> replicas = slice.getReplicas();\n      boolean allActive = true;\n      for (Replica replica : replicas) {\n        if (!clusterState.liveNodesContain(replica.getNodeName())\n            || !replica.get(ZkStateReader.STATE_PROP).equals(\n                ZkStateReader.ACTIVE)) {\n          allActive = false;\n          break;\n        }\n      }\n      if (allActive) {\n        return;\n      }\n    }\n    printLayout();\n    fail(\"timeout waiting to see recovered node\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fffbdec005a930b8cca4a1a0c9aeef885a87a6","date":1392685930,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SyncSliceTest#waitTillRecovered().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SyncSliceTest#waitTillRecovered().mjava","sourceNew":"  private void waitTillRecovered() throws Exception {\n    for (int i = 0; i < 45; i++) { \n      Thread.sleep(3000);\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection collection1 = clusterState.getCollection(\"collection1\");\n      Slice slice = collection1.getSlice(\"shard1\");\n      Collection<Replica> replicas = slice.getReplicas();\n      boolean allActive = true;\n      for (Replica replica : replicas) {\n        if (!clusterState.liveNodesContain(replica.getNodeName())\n            || !replica.get(ZkStateReader.STATE_PROP).equals(\n                ZkStateReader.ACTIVE)) {\n          allActive = false;\n          break;\n        }\n      }\n      if (allActive) {\n        return;\n      }\n    }\n    printLayout();\n    fail(\"timeout waiting to see recovered node\");\n  }\n\n","sourceOld":"  private void waitTillRecovered() throws Exception {\n    for (int i = 0; i < 30; i++) { \n      Thread.sleep(3000);\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection collection1 = clusterState.getCollection(\"collection1\");\n      Slice slice = collection1.getSlice(\"shard1\");\n      Collection<Replica> replicas = slice.getReplicas();\n      boolean allActive = true;\n      for (Replica replica : replicas) {\n        if (!clusterState.liveNodesContain(replica.getNodeName())\n            || !replica.get(ZkStateReader.STATE_PROP).equals(\n                ZkStateReader.ACTIVE)) {\n          allActive = false;\n          break;\n        }\n      }\n      if (allActive) {\n        return;\n      }\n    }\n    printLayout();\n    fail(\"timeout waiting to see recovered node\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd5a34b6e6fd301f4b325230183dc52c4089595e","date":1392825079,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SyncSliceTest#waitTillRecovered().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SyncSliceTest#waitTillRecovered().mjava","sourceNew":"  private void waitTillRecovered() throws Exception {\n    for (int i = 0; i < 60; i++) { \n      Thread.sleep(3000);\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection collection1 = clusterState.getCollection(\"collection1\");\n      Slice slice = collection1.getSlice(\"shard1\");\n      Collection<Replica> replicas = slice.getReplicas();\n      boolean allActive = true;\n      for (Replica replica : replicas) {\n        if (!clusterState.liveNodesContain(replica.getNodeName())\n            || !replica.get(ZkStateReader.STATE_PROP).equals(\n                ZkStateReader.ACTIVE)) {\n          allActive = false;\n          break;\n        }\n      }\n      if (allActive) {\n        return;\n      }\n    }\n    printLayout();\n    fail(\"timeout waiting to see recovered node\");\n  }\n\n","sourceOld":"  private void waitTillRecovered() throws Exception {\n    for (int i = 0; i < 45; i++) { \n      Thread.sleep(3000);\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection collection1 = clusterState.getCollection(\"collection1\");\n      Slice slice = collection1.getSlice(\"shard1\");\n      Collection<Replica> replicas = slice.getReplicas();\n      boolean allActive = true;\n      for (Replica replica : replicas) {\n        if (!clusterState.liveNodesContain(replica.getNodeName())\n            || !replica.get(ZkStateReader.STATE_PROP).equals(\n                ZkStateReader.ACTIVE)) {\n          allActive = false;\n          break;\n        }\n      }\n      if (allActive) {\n        return;\n      }\n    }\n    printLayout();\n    fail(\"timeout waiting to see recovered node\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f6c494de6b7fddab42beeb839721ee126885db1","date":1395291794,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SyncSliceTest#waitTillAllNodesActive().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SyncSliceTest#waitTillRecovered().mjava","sourceNew":"  private void waitTillAllNodesActive() throws Exception {\n    for (int i = 0; i < 60; i++) { \n      Thread.sleep(3000);\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection collection1 = clusterState.getCollection(\"collection1\");\n      Slice slice = collection1.getSlice(\"shard1\");\n      Collection<Replica> replicas = slice.getReplicas();\n      boolean allActive = true;\n      for (Replica replica : replicas) {\n        if (!clusterState.liveNodesContain(replica.getNodeName())\n            || !replica.get(ZkStateReader.STATE_PROP).equals(\n                ZkStateReader.ACTIVE)) {\n          allActive = false;\n          break;\n        }\n      }\n      if (allActive) {\n        return;\n      }\n    }\n    printLayout();\n    fail(\"timeout waiting to see all nodes active\");\n  }\n\n","sourceOld":"  private void waitTillRecovered() throws Exception {\n    for (int i = 0; i < 60; i++) { \n      Thread.sleep(3000);\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection collection1 = clusterState.getCollection(\"collection1\");\n      Slice slice = collection1.getSlice(\"shard1\");\n      Collection<Replica> replicas = slice.getReplicas();\n      boolean allActive = true;\n      for (Replica replica : replicas) {\n        if (!clusterState.liveNodesContain(replica.getNodeName())\n            || !replica.get(ZkStateReader.STATE_PROP).equals(\n                ZkStateReader.ACTIVE)) {\n          allActive = false;\n          break;\n        }\n      }\n      if (allActive) {\n        return;\n      }\n    }\n    printLayout();\n    fail(\"timeout waiting to see recovered node\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b550b9fe8a5610e9a206849fa6e2bde1e8a2cf02":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5a34b6e6fd301f4b325230183dc52c4089595e":["53fffbdec005a930b8cca4a1a0c9aeef885a87a6"],"4d93914268f50e71bc43bc1aeefb7d21573ea1df":["b550b9fe8a5610e9a206849fa6e2bde1e8a2cf02"],"5f6c494de6b7fddab42beeb839721ee126885db1":["cd5a34b6e6fd301f4b325230183dc52c4089595e"],"53fffbdec005a930b8cca4a1a0c9aeef885a87a6":["4d93914268f50e71bc43bc1aeefb7d21573ea1df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5f6c494de6b7fddab42beeb839721ee126885db1"]},"commit2Childs":{"b550b9fe8a5610e9a206849fa6e2bde1e8a2cf02":["4d93914268f50e71bc43bc1aeefb7d21573ea1df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b550b9fe8a5610e9a206849fa6e2bde1e8a2cf02"],"cd5a34b6e6fd301f4b325230183dc52c4089595e":["5f6c494de6b7fddab42beeb839721ee126885db1"],"4d93914268f50e71bc43bc1aeefb7d21573ea1df":["53fffbdec005a930b8cca4a1a0c9aeef885a87a6"],"5f6c494de6b7fddab42beeb839721ee126885db1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"53fffbdec005a930b8cca4a1a0c9aeef885a87a6":["cd5a34b6e6fd301f4b325230183dc52c4089595e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}