{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#minus(Automaton,Automaton).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#minus(Automaton,Automaton).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/BasicOperations#minus(Automaton,Automaton).mjava","sourceNew":"  /**\n   * Returns a (deterministic) automaton that accepts the intersection of the\n   * language of <code>a1</code> and the complement of the language of\n   * <code>a2</code>. As a side-effect, the automata may be determinized, if not\n   * already deterministic.\n   * <p>\n   * Complexity: quadratic in number of states (if already deterministic).\n   */\n  static public Automaton minus(Automaton a1, Automaton a2) {\n    if (BasicOperations.isEmpty(a1) || a1 == a2) return BasicAutomata\n        .makeEmpty();\n    if (BasicOperations.isEmpty(a2)) return a1.cloneIfRequired();\n    if (a1.isSingleton()) {\n      if (BasicOperations.run(a2, a1.singleton)) return BasicAutomata.makeEmpty();\n      else return a1.cloneIfRequired();\n    }\n    return intersection(a1, a2.complement());\n  }\n\n","sourceOld":"  /**\n   * Returns a (deterministic) automaton that accepts the intersection of the\n   * language of <code>a1</code> and the complement of the language of\n   * <code>a2</code>. As a side-effect, the automata may be determinized, if not\n   * already deterministic.\n   * <p>\n   * Complexity: quadratic in number of states (if already deterministic).\n   */\n  static public Automaton minus(Automaton a1, Automaton a2) {\n    if (BasicOperations.isEmpty(a1) || a1 == a2) return BasicAutomata\n        .makeEmpty();\n    if (BasicOperations.isEmpty(a2)) return a1.cloneIfRequired();\n    if (a1.isSingleton()) {\n      if (BasicOperations.run(a2, a1.singleton)) return BasicAutomata.makeEmpty();\n      else return a1.cloneIfRequired();\n    }\n    return intersection(a1, a2.complement());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#minus(Automaton,Automaton).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a (deterministic) automaton that accepts the intersection of the\n   * language of <code>a1</code> and the complement of the language of\n   * <code>a2</code>. As a side-effect, the automata may be determinized, if not\n   * already deterministic.\n   * <p>\n   * Complexity: quadratic in number of states (if already deterministic).\n   */\n  static public Automaton minus(Automaton a1, Automaton a2) {\n    if (BasicOperations.isEmpty(a1) || a1 == a2) return BasicAutomata\n        .makeEmpty();\n    if (BasicOperations.isEmpty(a2)) return a1.cloneIfRequired();\n    if (a1.isSingleton()) {\n      if (BasicOperations.run(a2, a1.singleton)) return BasicAutomata.makeEmpty();\n      else return a1.cloneIfRequired();\n    }\n    return intersection(a1, a2.complement());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#minus(Automaton,Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#minus(Automaton,Automaton).mjava","sourceNew":"  /**\n   * Returns a (deterministic) automaton that accepts the intersection of the\n   * language of <code>a1</code> and the complement of the language of\n   * <code>a2</code>. As a side-effect, the automata may be determinized, if not\n   * already deterministic.\n   * <p>\n   * Complexity: quadratic in number of states (if already deterministic).\n   */\n  static public Automaton minus(Automaton a1, Automaton a2) {\n    if (Operations.isEmpty(a1) || a1 == a2) {\n      return Automata.makeEmpty();\n    }\n    if (Operations.isEmpty(a2)) {\n      return a1;\n    }\n    return intersection(a1, complement(a2));\n  }\n\n","sourceOld":"  /**\n   * Returns a (deterministic) automaton that accepts the intersection of the\n   * language of <code>a1</code> and the complement of the language of\n   * <code>a2</code>. As a side-effect, the automata may be determinized, if not\n   * already deterministic.\n   * <p>\n   * Complexity: quadratic in number of states (if already deterministic).\n   */\n  static public Automaton minus(Automaton a1, Automaton a2) {\n    if (BasicOperations.isEmpty(a1) || a1 == a2) return BasicAutomata\n        .makeEmpty();\n    if (BasicOperations.isEmpty(a2)) return a1.cloneIfRequired();\n    if (a1.isSingleton()) {\n      if (BasicOperations.run(a2, a1.singleton)) return BasicAutomata.makeEmpty();\n      else return a1.cloneIfRequired();\n    }\n    return intersection(a1, a2.complement());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5c84485629d80d203608e8975a1139de9933cc38":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a","5c84485629d80d203608e8975a1139de9933cc38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}