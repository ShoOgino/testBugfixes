{"path":"solr/src/test/org/apache/solr/handler/AnalysisRequestHandlerTestBase#assertToken(NamedList,TokenInfo).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/AnalysisRequestHandlerTestBase#assertToken(NamedList,TokenInfo).mjava","pathOld":"/dev/null","sourceNew":"  protected void assertToken(NamedList token, TokenInfo info) {\n    assertEquals(info.getText(), token.get(\"text\"));\n    if (info.getRawText() != null) {\n      assertEquals(info.getRawText(), token.get(\"raw_text\"));\n    }\n    assertEquals(info.getType(), token.get(\"type\"));\n    assertEquals(new Integer(info.getStart()), token.get(\"start\"));\n    assertEquals(new Integer(info.getEnd()), token.get(\"end\"));\n    assertEquals(new Integer(info.getPosition()), token.get(\"position\"));\n    if (info.isMatch()) {\n      assertEquals(Boolean.TRUE, token.get(\"match\"));\n    }\n    if (info.getPayload() != null) {\n      assertEquals(info.getPayload(), token.get(\"payload\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/handler/AnalysisRequestHandlerTestBase#assertToken(NamedList,TokenInfo).mjava","sourceNew":null,"sourceOld":"  protected void assertToken(NamedList token, TokenInfo info) {\n    assertEquals(info.getText(), token.get(\"text\"));\n    if (info.getRawText() != null) {\n      assertEquals(info.getRawText(), token.get(\"raw_text\"));\n    }\n    assertEquals(info.getType(), token.get(\"type\"));\n    assertEquals(new Integer(info.getStart()), token.get(\"start\"));\n    assertEquals(new Integer(info.getEnd()), token.get(\"end\"));\n    assertEquals(new Integer(info.getPosition()), token.get(\"position\"));\n    if (info.isMatch()) {\n      assertEquals(Boolean.TRUE, token.get(\"match\"));\n    }\n    if (info.getPayload() != null) {\n      assertEquals(info.getPayload(), token.get(\"payload\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/AnalysisRequestHandlerTestBase#assertToken(NamedList,TokenInfo).mjava","pathOld":"src/test/org/apache/solr/handler/AnalysisRequestHandlerTestBase#assertToken(NamedList,TokenInfo).mjava","sourceNew":"  protected void assertToken(NamedList token, TokenInfo info) {\n    assertEquals(info.getText(), token.get(\"text\"));\n    if (info.getRawText() != null) {\n      assertEquals(info.getRawText(), token.get(\"raw_text\"));\n    }\n    assertEquals(info.getType(), token.get(\"type\"));\n    assertEquals(new Integer(info.getStart()), token.get(\"start\"));\n    assertEquals(new Integer(info.getEnd()), token.get(\"end\"));\n    assertEquals(new Integer(info.getPosition()), token.get(\"position\"));\n    if (info.isMatch()) {\n      assertEquals(Boolean.TRUE, token.get(\"match\"));\n    }\n    if (info.getPayload() != null) {\n      assertEquals(info.getPayload(), token.get(\"payload\"));\n    }\n  }\n\n","sourceOld":"  protected void assertToken(NamedList token, TokenInfo info) {\n    assertEquals(info.getText(), token.get(\"text\"));\n    if (info.getRawText() != null) {\n      assertEquals(info.getRawText(), token.get(\"raw_text\"));\n    }\n    assertEquals(info.getType(), token.get(\"type\"));\n    assertEquals(new Integer(info.getStart()), token.get(\"start\"));\n    assertEquals(new Integer(info.getEnd()), token.get(\"end\"));\n    assertEquals(new Integer(info.getPosition()), token.get(\"position\"));\n    if (info.isMatch()) {\n      assertEquals(Boolean.TRUE, token.get(\"match\"));\n    }\n    if (info.getPayload() != null) {\n      assertEquals(info.getPayload(), token.get(\"payload\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/AnalysisRequestHandlerTestBase#assertToken(NamedList,TokenInfo).mjava","pathOld":"/dev/null","sourceNew":"  protected void assertToken(NamedList token, TokenInfo info) {\n    assertEquals(info.getText(), token.get(\"text\"));\n    if (info.getRawText() != null) {\n      assertEquals(info.getRawText(), token.get(\"raw_text\"));\n    }\n    assertEquals(info.getType(), token.get(\"type\"));\n    assertEquals(new Integer(info.getStart()), token.get(\"start\"));\n    assertEquals(new Integer(info.getEnd()), token.get(\"end\"));\n    assertEquals(new Integer(info.getPosition()), token.get(\"position\"));\n    if (info.isMatch()) {\n      assertEquals(Boolean.TRUE, token.get(\"match\"));\n    }\n    if (info.getPayload() != null) {\n      assertEquals(info.getPayload(), token.get(\"payload\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0487f900016b7da69f089f740e28192189ef3972","date":1307810819,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/AnalysisRequestHandlerTestBase#assertToken(NamedList,TokenInfo).mjava","pathOld":"solr/src/test/org/apache/solr/handler/AnalysisRequestHandlerTestBase#assertToken(NamedList,TokenInfo).mjava","sourceNew":"  protected void assertToken(NamedList token, TokenInfo info) {\n    assertEquals(info.getText(), token.get(\"text\"));\n    if (info.getRawText() != null) {\n      assertEquals(info.getRawText(), token.get(\"raw_text\"));\n    }\n    assertEquals(info.getType(), token.get(\"type\"));\n    assertEquals(new Integer(info.getStart()), token.get(\"start\"));\n    assertEquals(new Integer(info.getEnd()), token.get(\"end\"));\n    assertEquals(new Integer(info.getPosition()), token.get(\"position\"));\n    assertEquals(info.getPositionHistory(), token.get(\"positionHistory\"));\n    if (info.isMatch()) {\n      assertEquals(Boolean.TRUE, token.get(\"match\"));\n    }\n    if (info.getPayload() != null) {\n      assertEquals(info.getPayload(), token.get(\"payload\"));\n    }\n  }\n\n","sourceOld":"  protected void assertToken(NamedList token, TokenInfo info) {\n    assertEquals(info.getText(), token.get(\"text\"));\n    if (info.getRawText() != null) {\n      assertEquals(info.getRawText(), token.get(\"raw_text\"));\n    }\n    assertEquals(info.getType(), token.get(\"type\"));\n    assertEquals(new Integer(info.getStart()), token.get(\"start\"));\n    assertEquals(new Integer(info.getEnd()), token.get(\"end\"));\n    assertEquals(new Integer(info.getPosition()), token.get(\"position\"));\n    if (info.isMatch()) {\n      assertEquals(Boolean.TRUE, token.get(\"match\"));\n    }\n    if (info.getPayload() != null) {\n      assertEquals(info.getPayload(), token.get(\"payload\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02dba75457528db0b73837ff68f971ecb715ab78","date":1307981000,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/AnalysisRequestHandlerTestBase#assertToken(NamedList,TokenInfo).mjava","pathOld":"solr/src/test/org/apache/solr/handler/AnalysisRequestHandlerTestBase#assertToken(NamedList,TokenInfo).mjava","sourceNew":"  protected void assertToken(NamedList token, TokenInfo info) {\n    assertEquals(info.getText(), token.get(\"text\"));\n    if (info.getRawText() != null) {\n      assertEquals(info.getRawText(), token.get(\"raw_text\"));\n    }\n    assertEquals(info.getType(), token.get(\"type\"));\n    assertEquals(new Integer(info.getStart()), token.get(\"start\"));\n    assertEquals(new Integer(info.getEnd()), token.get(\"end\"));\n    assertEquals(new Integer(info.getPosition()), token.get(\"position\"));\n    assertArrayEquals(info.getPositionHistory(), ArrayUtils.toPrimitive((Integer[]) token.get(\"positionHistory\")));\n    if (info.isMatch()) {\n      assertEquals(Boolean.TRUE, token.get(\"match\"));\n    }\n    if (info.getPayload() != null) {\n      assertEquals(info.getPayload(), token.get(\"payload\"));\n    }\n  }\n\n","sourceOld":"  protected void assertToken(NamedList token, TokenInfo info) {\n    assertEquals(info.getText(), token.get(\"text\"));\n    if (info.getRawText() != null) {\n      assertEquals(info.getRawText(), token.get(\"raw_text\"));\n    }\n    assertEquals(info.getType(), token.get(\"type\"));\n    assertEquals(new Integer(info.getStart()), token.get(\"start\"));\n    assertEquals(new Integer(info.getEnd()), token.get(\"end\"));\n    assertEquals(new Integer(info.getPosition()), token.get(\"position\"));\n    assertEquals(info.getPositionHistory(), token.get(\"positionHistory\"));\n    if (info.isMatch()) {\n      assertEquals(Boolean.TRUE, token.get(\"match\"));\n    }\n    if (info.getPayload() != null) {\n      assertEquals(info.getPayload(), token.get(\"payload\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ed208afa1e7aa98899ddb1dedfddedddf898253","date":1308079587,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/AnalysisRequestHandlerTestBase#assertToken(NamedList,TokenInfo).mjava","pathOld":"solr/src/test/org/apache/solr/handler/AnalysisRequestHandlerTestBase#assertToken(NamedList,TokenInfo).mjava","sourceNew":"  protected void assertToken(NamedList token, TokenInfo info) {\n    assertEquals(info.getText(), token.get(\"text\"));\n    if (info.getRawText() != null) {\n      assertEquals(info.getRawText(), token.get(\"raw_text\"));\n    }\n    assertEquals(info.getType(), token.get(\"type\"));\n    assertEquals(new Integer(info.getStart()), token.get(\"start\"));\n    assertEquals(new Integer(info.getEnd()), token.get(\"end\"));\n    assertEquals(new Integer(info.getPosition()), token.get(\"position\"));\n    assertArrayEquals(info.getPositionHistory(), ArrayUtils.toPrimitive((Integer[]) token.get(\"positionHistory\")));\n    if (info.isMatch()) {\n      assertEquals(Boolean.TRUE, token.get(\"match\"));\n    }\n    if (info.getPayload() != null) {\n      assertEquals(info.getPayload(), token.get(\"payload\"));\n    }\n  }\n\n","sourceOld":"  protected void assertToken(NamedList token, TokenInfo info) {\n    assertEquals(info.getText(), token.get(\"text\"));\n    if (info.getRawText() != null) {\n      assertEquals(info.getRawText(), token.get(\"raw_text\"));\n    }\n    assertEquals(info.getType(), token.get(\"type\"));\n    assertEquals(new Integer(info.getStart()), token.get(\"start\"));\n    assertEquals(new Integer(info.getEnd()), token.get(\"end\"));\n    assertEquals(new Integer(info.getPosition()), token.get(\"position\"));\n    if (info.isMatch()) {\n      assertEquals(Boolean.TRUE, token.get(\"match\"));\n    }\n    if (info.getPayload() != null) {\n      assertEquals(info.getPayload(), token.get(\"payload\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/AnalysisRequestHandlerTestBase#assertToken(NamedList,TokenInfo).mjava","pathOld":"solr/src/test/org/apache/solr/handler/AnalysisRequestHandlerTestBase#assertToken(NamedList,TokenInfo).mjava","sourceNew":"  protected void assertToken(NamedList token, TokenInfo info) {\n    assertEquals(info.getText(), token.get(\"text\"));\n    if (info.getRawText() != null) {\n      assertEquals(info.getRawText(), token.get(\"raw_text\"));\n    }\n    assertEquals(info.getType(), token.get(\"type\"));\n    assertEquals(new Integer(info.getStart()), token.get(\"start\"));\n    assertEquals(new Integer(info.getEnd()), token.get(\"end\"));\n    assertEquals(new Integer(info.getPosition()), token.get(\"position\"));\n    assertArrayEquals(info.getPositionHistory(), ArrayUtils.toPrimitive((Integer[]) token.get(\"positionHistory\")));\n    if (info.isMatch()) {\n      assertEquals(Boolean.TRUE, token.get(\"match\"));\n    }\n    if (info.getPayload() != null) {\n      assertEquals(info.getPayload(), token.get(\"payload\"));\n    }\n  }\n\n","sourceOld":"  protected void assertToken(NamedList token, TokenInfo info) {\n    assertEquals(info.getText(), token.get(\"text\"));\n    if (info.getRawText() != null) {\n      assertEquals(info.getRawText(), token.get(\"raw_text\"));\n    }\n    assertEquals(info.getType(), token.get(\"type\"));\n    assertEquals(new Integer(info.getStart()), token.get(\"start\"));\n    assertEquals(new Integer(info.getEnd()), token.get(\"end\"));\n    assertEquals(new Integer(info.getPosition()), token.get(\"position\"));\n    assertArrayEquals(info.getPositionHistory(), ArrayUtils.toPrimitive((Integer[]) token.get(\"positionHistory\")));\n    if (info.isMatch()) {\n      assertEquals(Boolean.TRUE, token.get(\"match\"));\n    }\n    if (info.getPayload() != null) {\n      assertEquals(info.getPayload(), token.get(\"payload\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/AnalysisRequestHandlerTestBase#assertToken(NamedList,TokenInfo).mjava","pathOld":"solr/src/test/org/apache/solr/handler/AnalysisRequestHandlerTestBase#assertToken(NamedList,TokenInfo).mjava","sourceNew":"  protected void assertToken(NamedList token, TokenInfo info) {\n    assertEquals(info.getText(), token.get(\"text\"));\n    if (info.getRawText() != null) {\n      assertEquals(info.getRawText(), token.get(\"raw_text\"));\n    }\n    assertEquals(info.getType(), token.get(\"type\"));\n    assertEquals(new Integer(info.getStart()), token.get(\"start\"));\n    assertEquals(new Integer(info.getEnd()), token.get(\"end\"));\n    assertEquals(new Integer(info.getPosition()), token.get(\"position\"));\n    assertArrayEquals(info.getPositionHistory(), ArrayUtils.toPrimitive((Integer[]) token.get(\"positionHistory\")));\n    if (info.isMatch()) {\n      assertEquals(Boolean.TRUE, token.get(\"match\"));\n    }\n    if (info.getPayload() != null) {\n      assertEquals(info.getPayload(), token.get(\"payload\"));\n    }\n  }\n\n","sourceOld":"  protected void assertToken(NamedList token, TokenInfo info) {\n    assertEquals(info.getText(), token.get(\"text\"));\n    if (info.getRawText() != null) {\n      assertEquals(info.getRawText(), token.get(\"raw_text\"));\n    }\n    assertEquals(info.getType(), token.get(\"type\"));\n    assertEquals(new Integer(info.getStart()), token.get(\"start\"));\n    assertEquals(new Integer(info.getEnd()), token.get(\"end\"));\n    assertEquals(new Integer(info.getPosition()), token.get(\"position\"));\n    assertArrayEquals(info.getPositionHistory(), ArrayUtils.toPrimitive((Integer[]) token.get(\"positionHistory\")));\n    if (info.isMatch()) {\n      assertEquals(Boolean.TRUE, token.get(\"match\"));\n    }\n    if (info.getPayload() != null) {\n      assertEquals(info.getPayload(), token.get(\"payload\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/AnalysisRequestHandlerTestBase#assertToken(NamedList,TokenInfo).mjava","pathOld":"solr/src/test/org/apache/solr/handler/AnalysisRequestHandlerTestBase#assertToken(NamedList,TokenInfo).mjava","sourceNew":"  protected void assertToken(NamedList token, TokenInfo info) {\n    assertEquals(info.getText(), token.get(\"text\"));\n    if (info.getRawText() != null) {\n      assertEquals(info.getRawText(), token.get(\"raw_text\"));\n    }\n    assertEquals(info.getType(), token.get(\"type\"));\n    assertEquals(new Integer(info.getStart()), token.get(\"start\"));\n    assertEquals(new Integer(info.getEnd()), token.get(\"end\"));\n    assertEquals(new Integer(info.getPosition()), token.get(\"position\"));\n    assertArrayEquals(info.getPositionHistory(), ArrayUtils.toPrimitive((Integer[]) token.get(\"positionHistory\")));\n    if (info.isMatch()) {\n      assertEquals(Boolean.TRUE, token.get(\"match\"));\n    }\n    if (info.getPayload() != null) {\n      assertEquals(info.getPayload(), token.get(\"payload\"));\n    }\n  }\n\n","sourceOld":"  protected void assertToken(NamedList token, TokenInfo info) {\n    assertEquals(info.getText(), token.get(\"text\"));\n    if (info.getRawText() != null) {\n      assertEquals(info.getRawText(), token.get(\"raw_text\"));\n    }\n    assertEquals(info.getType(), token.get(\"type\"));\n    assertEquals(new Integer(info.getStart()), token.get(\"start\"));\n    assertEquals(new Integer(info.getEnd()), token.get(\"end\"));\n    assertEquals(new Integer(info.getPosition()), token.get(\"position\"));\n    assertArrayEquals(info.getPositionHistory(), ArrayUtils.toPrimitive((Integer[]) token.get(\"positionHistory\")));\n    if (info.isMatch()) {\n      assertEquals(Boolean.TRUE, token.get(\"match\"));\n    }\n    if (info.getPayload() != null) {\n      assertEquals(info.getPayload(), token.get(\"payload\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["02dba75457528db0b73837ff68f971ecb715ab78","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"0487f900016b7da69f089f740e28192189ef3972":["1da8d55113b689b06716246649de6f62430f15c0"],"9ed208afa1e7aa98899ddb1dedfddedddf898253":["1da8d55113b689b06716246649de6f62430f15c0","02dba75457528db0b73837ff68f971ecb715ab78"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["9ed208afa1e7aa98899ddb1dedfddedddf898253"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02dba75457528db0b73837ff68f971ecb715ab78":["0487f900016b7da69f089f740e28192189ef3972"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["02dba75457528db0b73837ff68f971ecb715ab78"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"0487f900016b7da69f089f740e28192189ef3972":["02dba75457528db0b73837ff68f971ecb715ab78"],"9ed208afa1e7aa98899ddb1dedfddedddf898253":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"1da8d55113b689b06716246649de6f62430f15c0":["0487f900016b7da69f089f740e28192189ef3972","9ed208afa1e7aa98899ddb1dedfddedddf898253"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"02dba75457528db0b73837ff68f971ecb715ab78":["c26f00b574427b55127e869b935845554afde1fa","9ed208afa1e7aa98899ddb1dedfddedddf898253","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}