{"path":"solr/core/src/java/org/apache/solr/core/RequestParams#setParams(String,Map).mjava","commits":[{"id":"c2d72c3e6563e08675f940d4c74139309c5e3db2","date":1419411068,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestParams#setParams(String,Map).mjava","pathOld":"/dev/null","sourceNew":"  public RequestParams setParams(String name , Map values){\n    Map deepCopy = getDeepCopy(data, 3);\n    Map p = (Map) deepCopy.get(NAME);\n    if(p == null) deepCopy.put(NAME, p= new LinkedHashMap());\n    if(values == null){\n      p.remove(name);\n    } else {\n      Map old = (Map) p.get(name);\n      int version = 0;\n      Map meta = null;\n      if(old != null){\n        meta = (Map) old.get(\"\");\n        if(meta!=null) {\n          Integer oldVersion = (Integer) old.get(\"v\");\n          if(oldVersion != null) version = oldVersion.intValue()+1;\n        }\n        meta = new LinkedHashMap<>(meta);\n      } else {\n        meta = new LinkedHashMap<>();\n      }\n\n      meta.put(\"v\",version);\n      values = new LinkedHashMap<>(values);\n      values.put(\"\",meta);\n      p.put(name,values);\n    }\n    return new RequestParams(deepCopy, znodeVersion);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5a70f7ff0756e3668447bffbbf8bce8e7c361b9","date":1420028708,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestParams#setParams(String,Map).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RequestParams#setParams(String,Map).mjava","sourceNew":"  public RequestParams setParams(String name , Map values){\n    Map deepCopy = getDeepCopy(data, 3);\n    Map p = (Map) deepCopy.get(NAME);\n    if(p == null) deepCopy.put(NAME, p= new LinkedHashMap());\n    if(values == null){\n      p.remove(name);\n    } else {\n      Map old = (Map) p.get(name);\n      long version = 0;\n      Map meta = null;\n      if(old != null){\n        meta = (Map) old.get(\"\");\n        if(meta!=null) {\n          Long oldVersion = (Long) old.get(\"v\");\n          if(oldVersion != null) version = oldVersion.longValue()+1;\n        }\n        meta = new LinkedHashMap<>(meta);\n      } else {\n        meta = new LinkedHashMap<>();\n      }\n\n      meta.put(\"v\",version);\n      values = new LinkedHashMap<>(values);\n      values.put(\"\",meta);\n      p.put(name,values);\n    }\n    return new RequestParams(deepCopy, znodeVersion);\n  }\n\n","sourceOld":"  public RequestParams setParams(String name , Map values){\n    Map deepCopy = getDeepCopy(data, 3);\n    Map p = (Map) deepCopy.get(NAME);\n    if(p == null) deepCopy.put(NAME, p= new LinkedHashMap());\n    if(values == null){\n      p.remove(name);\n    } else {\n      Map old = (Map) p.get(name);\n      int version = 0;\n      Map meta = null;\n      if(old != null){\n        meta = (Map) old.get(\"\");\n        if(meta!=null) {\n          Integer oldVersion = (Integer) old.get(\"v\");\n          if(oldVersion != null) version = oldVersion.intValue()+1;\n        }\n        meta = new LinkedHashMap<>(meta);\n      } else {\n        meta = new LinkedHashMap<>();\n      }\n\n      meta.put(\"v\",version);\n      values = new LinkedHashMap<>(values);\n      values.put(\"\",meta);\n      p.put(name,values);\n    }\n    return new RequestParams(deepCopy, znodeVersion);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2330174b38007b9942205a2679db9ddffe35af89","date":1423653924,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestParams#setParams(String,Map).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RequestParams#setParams(String,Map).mjava","sourceNew":"  public RequestParams setParams(String name, Map values) {\n    Map deepCopy = getDeepCopy(data, 3);\n    Map p = (Map) deepCopy.get(NAME);\n    if (p == null) deepCopy.put(NAME, p = new LinkedHashMap());\n    if (values == null) {\n      p.remove(name);\n    } else {\n      Map old = (Map) p.get(name);\n      long version = 0;\n      Map meta = null;\n      if (old != null) {\n        meta = (Map) old.get(\"\");\n        if (meta != null) {\n          Long oldVersion = (Long) old.get(\"v\");\n          if (oldVersion != null) version = oldVersion.longValue() + 1;\n        }\n        meta = new LinkedHashMap<>(meta);\n      } else {\n        meta = new LinkedHashMap<>();\n      }\n\n      meta.put(\"v\", version);\n      values = new LinkedHashMap<>(values);\n      values.put(\"\", meta);\n      p.put(name, values);\n    }\n    return new RequestParams(deepCopy, znodeVersion);\n  }\n\n","sourceOld":"  public RequestParams setParams(String name , Map values){\n    Map deepCopy = getDeepCopy(data, 3);\n    Map p = (Map) deepCopy.get(NAME);\n    if(p == null) deepCopy.put(NAME, p= new LinkedHashMap());\n    if(values == null){\n      p.remove(name);\n    } else {\n      Map old = (Map) p.get(name);\n      long version = 0;\n      Map meta = null;\n      if(old != null){\n        meta = (Map) old.get(\"\");\n        if(meta!=null) {\n          Long oldVersion = (Long) old.get(\"v\");\n          if(oldVersion != null) version = oldVersion.longValue()+1;\n        }\n        meta = new LinkedHashMap<>(meta);\n      } else {\n        meta = new LinkedHashMap<>();\n      }\n\n      meta.put(\"v\",version);\n      values = new LinkedHashMap<>(values);\n      values.put(\"\",meta);\n      p.put(name,values);\n    }\n    return new RequestParams(deepCopy, znodeVersion);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestParams#setParams(String,Map).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RequestParams#setParams(String,Map).mjava","sourceNew":"  public RequestParams setParams(String name, Map values) {\n    Map deepCopy = Utils.getDeepCopy(data, 3);\n    Map p = (Map) deepCopy.get(NAME);\n    if (p == null) deepCopy.put(NAME, p = new LinkedHashMap());\n    if (values == null) {\n      p.remove(name);\n    } else {\n      Map old = (Map) p.get(name);\n      long version = 0;\n      Map meta = null;\n      if (old != null) {\n        meta = (Map) old.get(\"\");\n        if (meta != null) {\n          Long oldVersion = (Long) old.get(\"v\");\n          if (oldVersion != null) version = oldVersion.longValue() + 1;\n        }\n        meta = new LinkedHashMap<>(meta);\n      } else {\n        meta = new LinkedHashMap<>();\n      }\n\n      meta.put(\"v\", version);\n      values = new LinkedHashMap<>(values);\n      values.put(\"\", meta);\n      p.put(name, values);\n    }\n    return new RequestParams(deepCopy, znodeVersion);\n  }\n\n","sourceOld":"  public RequestParams setParams(String name, Map values) {\n    Map deepCopy = getDeepCopy(data, 3);\n    Map p = (Map) deepCopy.get(NAME);\n    if (p == null) deepCopy.put(NAME, p = new LinkedHashMap());\n    if (values == null) {\n      p.remove(name);\n    } else {\n      Map old = (Map) p.get(name);\n      long version = 0;\n      Map meta = null;\n      if (old != null) {\n        meta = (Map) old.get(\"\");\n        if (meta != null) {\n          Long oldVersion = (Long) old.get(\"v\");\n          if (oldVersion != null) version = oldVersion.longValue() + 1;\n        }\n        meta = new LinkedHashMap<>(meta);\n      } else {\n        meta = new LinkedHashMap<>();\n      }\n\n      meta.put(\"v\", version);\n      values = new LinkedHashMap<>(values);\n      values.put(\"\", meta);\n      p.put(name, values);\n    }\n    return new RequestParams(deepCopy, znodeVersion);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5991832ae4bac45cecfff0fc33125aeac823d3d","date":1456229449,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/RequestParams#setParams(String,Map).mjava","sourceNew":null,"sourceOld":"  public RequestParams setParams(String name, Map values) {\n    Map deepCopy = Utils.getDeepCopy(data, 3);\n    Map p = (Map) deepCopy.get(NAME);\n    if (p == null) deepCopy.put(NAME, p = new LinkedHashMap());\n    if (values == null) {\n      p.remove(name);\n    } else {\n      Map old = (Map) p.get(name);\n      long version = 0;\n      Map meta = null;\n      if (old != null) {\n        meta = (Map) old.get(\"\");\n        if (meta != null) {\n          Long oldVersion = (Long) old.get(\"v\");\n          if (oldVersion != null) version = oldVersion.longValue() + 1;\n        }\n        meta = new LinkedHashMap<>(meta);\n      } else {\n        meta = new LinkedHashMap<>();\n      }\n\n      meta.put(\"v\", version);\n      values = new LinkedHashMap<>(values);\n      values.put(\"\", meta);\n      p.put(name, values);\n    }\n    return new RequestParams(deepCopy, znodeVersion);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5296efc4b319f5647b606629c093a94b23692c6","date":1456267155,"type":4,"author":"Mike McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/RequestParams#setParams(String,Map).mjava","sourceNew":null,"sourceOld":"  public RequestParams setParams(String name, Map values) {\n    Map deepCopy = Utils.getDeepCopy(data, 3);\n    Map p = (Map) deepCopy.get(NAME);\n    if (p == null) deepCopy.put(NAME, p = new LinkedHashMap());\n    if (values == null) {\n      p.remove(name);\n    } else {\n      Map old = (Map) p.get(name);\n      long version = 0;\n      Map meta = null;\n      if (old != null) {\n        meta = (Map) old.get(\"\");\n        if (meta != null) {\n          Long oldVersion = (Long) old.get(\"v\");\n          if (oldVersion != null) version = oldVersion.longValue() + 1;\n        }\n        meta = new LinkedHashMap<>(meta);\n      } else {\n        meta = new LinkedHashMap<>();\n      }\n\n      meta.put(\"v\", version);\n      values = new LinkedHashMap<>(values);\n      values.put(\"\", meta);\n      p.put(name, values);\n    }\n    return new RequestParams(deepCopy, znodeVersion);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2330174b38007b9942205a2679db9ddffe35af89":["b5a70f7ff0756e3668447bffbbf8bce8e7c361b9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b693a83132c9e45afcd564fd65a25b60ed80388b":["2330174b38007b9942205a2679db9ddffe35af89"],"a5296efc4b319f5647b606629c093a94b23692c6":["b693a83132c9e45afcd564fd65a25b60ed80388b","b5991832ae4bac45cecfff0fc33125aeac823d3d"],"b5991832ae4bac45cecfff0fc33125aeac823d3d":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"b5a70f7ff0756e3668447bffbbf8bce8e7c361b9":["c2d72c3e6563e08675f940d4c74139309c5e3db2"],"c2d72c3e6563e08675f940d4c74139309c5e3db2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5991832ae4bac45cecfff0fc33125aeac823d3d"]},"commit2Childs":{"2330174b38007b9942205a2679db9ddffe35af89":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c2d72c3e6563e08675f940d4c74139309c5e3db2"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["a5296efc4b319f5647b606629c093a94b23692c6","b5991832ae4bac45cecfff0fc33125aeac823d3d"],"a5296efc4b319f5647b606629c093a94b23692c6":[],"b5a70f7ff0756e3668447bffbbf8bce8e7c361b9":["2330174b38007b9942205a2679db9ddffe35af89"],"b5991832ae4bac45cecfff0fc33125aeac823d3d":["a5296efc4b319f5647b606629c093a94b23692c6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c2d72c3e6563e08675f940d4c74139309c5e3db2":["b5a70f7ff0756e3668447bffbbf8bce8e7c361b9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a5296efc4b319f5647b606629c093a94b23692c6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}