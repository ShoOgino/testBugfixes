{"path":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds.StandardCodecWithOrds#fieldsProducer(SegmentReadState).mjava","commits":[{"id":"95ae76773bf2b95987d5f9c8f566ab3738953fb4","date":1301758351,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds.StandardCodecWithOrds#fieldsProducer(SegmentReadState).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n      PostingsReaderBase postings = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n      TermsIndexReaderBase indexReader;\n\n      boolean success = false;\n      try {\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n        success = true;\n      } finally {\n        if (!success) {\n          postings.close();\n        }\n      }\n\n      success = false;\n      try {\n        FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                  state.dir,\n                                                  state.fieldInfos,\n                                                  state.segmentInfo.name,\n                                                  postings,\n                                                  state.readBufferSize,\n                                                  TERMS_CACHE_SIZE,\n                                                  state.codecId);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            postings.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds.StandardCodecWithOrds#fieldsProducer(SegmentReadState).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n      PostingsReaderBase postings = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n      TermsIndexReaderBase indexReader;\n\n      boolean success = false;\n      try {\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n        success = true;\n      } finally {\n        if (!success) {\n          postings.close();\n        }\n      }\n\n      success = false;\n      try {\n        FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                  state.dir,\n                                                  state.fieldInfos,\n                                                  state.segmentInfo.name,\n                                                  postings,\n                                                  state.readBufferSize,\n                                                  TERMS_CACHE_SIZE,\n                                                  state.codecId);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            postings.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds.StandardCodecWithOrds#fieldsProducer(SegmentReadState).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n      PostingsReaderBase postings = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n      TermsIndexReaderBase indexReader;\n\n      boolean success = false;\n      try {\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n        success = true;\n      } finally {\n        if (!success) {\n          postings.close();\n        }\n      }\n\n      success = false;\n      try {\n        FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                  state.dir,\n                                                  state.fieldInfos,\n                                                  state.segmentInfo.name,\n                                                  postings,\n                                                  state.readBufferSize,\n                                                  TERMS_CACHE_SIZE,\n                                                  state.codecId);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            postings.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds.StandardCodecWithOrds#fieldsProducer(SegmentReadState).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n      PostingsReaderBase postings = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n      TermsIndexReaderBase indexReader;\n\n      boolean success = false;\n      try {\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n        success = true;\n      } finally {\n        if (!success) {\n          postings.close();\n        }\n      }\n\n      success = false;\n      try {\n        FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                  state.dir,\n                                                  state.fieldInfos,\n                                                  state.segmentInfo.name,\n                                                  postings,\n                                                  state.readBufferSize,\n                                                  TERMS_CACHE_SIZE,\n                                                  state.codecId);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            postings.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds.StandardCodecWithOrds#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds.StandardCodecWithOrds#fieldsProducer(SegmentReadState).mjava","sourceNew":"    @Override\n    public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n      PostingsReaderBase postings = new StandardPostingsReader(state.dir, state.segmentInfo, state.context, state.codecId);\n      TermsIndexReaderBase indexReader;\n\n      boolean success = false;\n      try {\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId, state.context);\n        success = true;\n      } finally {\n        if (!success) {\n          postings.close();\n        }\n      }\n\n      success = false;\n      try {\n        FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                  state.dir,\n                                                  state.fieldInfos,\n                                                  state.segmentInfo.name,\n                                                  postings,\n                                                  state.context,\n                                                  TERMS_CACHE_SIZE,\n                                                  state.codecId);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            postings.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n      PostingsReaderBase postings = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n      TermsIndexReaderBase indexReader;\n\n      boolean success = false;\n      try {\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n        success = true;\n      } finally {\n        if (!success) {\n          postings.close();\n        }\n      }\n\n      success = false;\n      try {\n        FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                  state.dir,\n                                                  state.fieldInfos,\n                                                  state.segmentInfo.name,\n                                                  postings,\n                                                  state.readBufferSize,\n                                                  TERMS_CACHE_SIZE,\n                                                  state.codecId);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            postings.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds.StandardCodecWithOrds#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds.StandardCodecWithOrds#fieldsProducer(SegmentReadState).mjava","sourceNew":"    @Override\n    public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n      PostingsReaderBase postings = new StandardPostingsReader(state.dir, state.segmentInfo, state.context, state.codecId);\n      TermsIndexReaderBase indexReader;\n\n      boolean success = false;\n      try {\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId, state.context);\n        success = true;\n      } finally {\n        if (!success) {\n          postings.close();\n        }\n      }\n\n      success = false;\n      try {\n        FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                  state.dir,\n                                                  state.fieldInfos,\n                                                  state.segmentInfo.name,\n                                                  postings,\n                                                  state.context,\n                                                  TERMS_CACHE_SIZE,\n                                                  state.codecId);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            postings.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n      PostingsReaderBase postings = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n      TermsIndexReaderBase indexReader;\n\n      boolean success = false;\n      try {\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n        success = true;\n      } finally {\n        if (!success) {\n          postings.close();\n        }\n      }\n\n      success = false;\n      try {\n        FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                  state.dir,\n                                                  state.fieldInfos,\n                                                  state.segmentInfo.name,\n                                                  postings,\n                                                  state.readBufferSize,\n                                                  TERMS_CACHE_SIZE,\n                                                  state.codecId);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            postings.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds.StandardCodecWithOrds#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds.StandardCodecWithOrds#fieldsProducer(SegmentReadState).mjava","sourceNew":"    @Override\n    public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n      PostingsReaderBase postings = new StandardPostingsReader(state.dir, state.segmentInfo, state.context, state.codecId);\n      TermsIndexReaderBase indexReader;\n\n      boolean success = false;\n      try {\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId, state.context);\n        success = true;\n      } finally {\n        if (!success) {\n          postings.close();\n        }\n      }\n\n      success = false;\n      try {\n        FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                  state.dir,\n                                                  state.fieldInfos,\n                                                  state.segmentInfo.name,\n                                                  postings,\n                                                  state.context,\n                                                  TERMS_CACHE_SIZE,\n                                                  state.codecId);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            postings.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n      PostingsReaderBase postings = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n      TermsIndexReaderBase indexReader;\n\n      boolean success = false;\n      try {\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId);\n        success = true;\n      } finally {\n        if (!success) {\n          postings.close();\n        }\n      }\n\n      success = false;\n      try {\n        FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                  state.dir,\n                                                  state.fieldInfos,\n                                                  state.segmentInfo.name,\n                                                  postings,\n                                                  state.readBufferSize,\n                                                  TERMS_CACHE_SIZE,\n                                                  state.codecId);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            postings.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds.StandardCodecWithOrds#fieldsProducer(SegmentReadState).mjava","sourceNew":null,"sourceOld":"    @Override\n    public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n      PostingsReaderBase postings = new StandardPostingsReader(state.dir, state.segmentInfo, state.context, state.codecId);\n      TermsIndexReaderBase indexReader;\n\n      boolean success = false;\n      try {\n        indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                   state.fieldInfos,\n                                                   state.segmentInfo.name,\n                                                   state.termsIndexDivisor,\n                                                   BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                   state.codecId, state.context);\n        success = true;\n      } finally {\n        if (!success) {\n          postings.close();\n        }\n      }\n\n      success = false;\n      try {\n        FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                  state.dir,\n                                                  state.fieldInfos,\n                                                  state.segmentInfo.name,\n                                                  postings,\n                                                  state.context,\n                                                  TERMS_CACHE_SIZE,\n                                                  state.codecId);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          try {\n            postings.close();\n          } finally {\n            indexReader.close();\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","95ae76773bf2b95987d5f9c8f566ab3738953fb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","95ae76773bf2b95987d5f9c8f566ab3738953fb4"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["95ae76773bf2b95987d5f9c8f566ab3738953fb4"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["a3776dccca01c11e7046323cfad46a3b4a471233","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["95ae76773bf2b95987d5f9c8f566ab3738953fb4","639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"95ae76773bf2b95987d5f9c8f566ab3738953fb4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"45669a651c970812a680841b97a77cce06af559f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","95ae76773bf2b95987d5f9c8f566ab3738953fb4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","95ae76773bf2b95987d5f9c8f566ab3738953fb4","45669a651c970812a680841b97a77cce06af559f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["7b91922b55d15444d554721b352861d028eb8278","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"95ae76773bf2b95987d5f9c8f566ab3738953fb4":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","639c36565ce03aed5b0fce7c9e4448e53a1f7efd","ddc4c914be86e34b54f70023f45a60fa7f04e929","45669a651c970812a680841b97a77cce06af559f"],"45669a651c970812a680841b97a77cce06af559f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","5d004d0e0b3f65bb40da76d476d659d7888270e8","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}