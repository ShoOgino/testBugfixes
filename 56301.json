{"path":"lucene/sandbox/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat#testRandom().mjava","commits":[{"id":"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e","date":1400786907,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat#testRandom().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    int minItemsInBlock = TestUtil.nextInt(random(), 2, 50);\n    int maxItemsInBlock = 2*(minItemsInBlock-1) + random().nextInt(50);\n    iwc.setCodec(TestUtil.alwaysPostingsFormat(new IDVersionPostingsFormat(minItemsInBlock, maxItemsInBlock)));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    //IndexWriter w = new IndexWriter(dir, iwc);\n    int numDocs = atLeast(1000);\n    Map<String,Long> idValues = new HashMap<String,Long>();\n    int docUpto = 0;\n    if (VERBOSE) {\n      System.out.println(\"TEST: numDocs=\" + numDocs);\n    }\n\n    IDSource ids = getRandomIDs();\n    String idPrefix;\n    if (random().nextBoolean()) {\n      idPrefix = \"\";\n    } else {\n      idPrefix = TestUtil.randomSimpleString(random());\n      if (VERBOSE) {\n        System.out.println(\"TEST: use id prefix: \" + idPrefix);\n      }\n    }\n\n    boolean useMonotonicVersion = random().nextBoolean();\n    if (VERBOSE) {\n      System.out.println(\"TEST: useMonotonicVersion=\" + useMonotonicVersion);\n    }\n\n    List<String> idsList = new ArrayList<>();\n\n    long version = 0;\n    while (docUpto < numDocs) {\n      String idValue = idPrefix + ids.next();\n      if (idValues.containsKey(idValue)) {\n        continue;\n      }\n      if (useMonotonicVersion) {\n        version += TestUtil.nextInt(random(), 1, 10);\n      } else {\n        version = random().nextLong() & 0x7fffffffffffffffL;\n      }\n      idValues.put(idValue, version);\n      if (VERBOSE) {\n        System.out.println(\"  \" + idValue + \" -> \" + version);\n      }\n      Document doc = new Document();\n      doc.add(makeIDField(idValue, version));\n      w.addDocument(doc);\n      idsList.add(idValue);\n\n      if (idsList.size() > 0 && random().nextInt(7) == 5) {\n        // Randomly delete or update a previous ID\n        idValue = idsList.get(random().nextInt(idsList.size()));\n        if (random().nextBoolean()) {\n          if (useMonotonicVersion) {\n            version += TestUtil.nextInt(random(), 1, 10);\n          } else {\n            version = random().nextLong() & 0x7fffffffffffffffL;\n          }\n          doc = new Document();\n          doc.add(makeIDField(idValue, version));\n          if (VERBOSE) {\n            System.out.println(\"  update \" + idValue + \" -> \" + version);\n          }\n          w.updateDocument(new Term(\"id\", idValue), doc);\n          idValues.put(idValue, version);\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  delete \" + idValue);\n          }\n          w.deleteDocuments(new Term(\"id\", idValue));\n          idValues.remove(idValue);\n        }        \n      }\n\n      docUpto++;\n    }\n\n    IndexReader r = w.getReader();\n    //IndexReader r = DirectoryReader.open(w, true);\n    PerThreadVersionPKLookup lookup = new PerThreadVersionPKLookup(r, \"id\");\n\n    List<Map.Entry<String,Long>> idValuesList = new ArrayList<>(idValues.entrySet());\n    int iters = numDocs * 5;\n    for(int iter=0;iter<iters;iter++) {\n      String idValue;\n\n      if (random().nextBoolean()) {\n        idValue = idValuesList.get(random().nextInt(idValuesList.size())).getKey();\n      } else if (random().nextBoolean()) {\n        idValue = ids.next();\n      } else {\n        idValue = idPrefix + TestUtil.randomSimpleString(random());\n      }\n\n      BytesRef idValueBytes = new BytesRef(idValue);\n\n      Long expectedVersion = idValues.get(idValue);\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" id=\" + idValue + \" expectedVersion=\" + expectedVersion);\n      }\n      \n      if (expectedVersion == null) {\n        assertEquals(\"term should not have been found (doesn't exist)\", -1, lookup.lookup(idValueBytes));\n      } else {\n        if (random().nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"  lookup exact version (should be found)\");\n          }\n          assertTrue(\"term should have been found (version too old)\", lookup.lookup(idValueBytes, expectedVersion.longValue()) != -1);\n          assertEquals(expectedVersion.longValue(), lookup.getVersion());\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  lookup version+1 (should not be found)\");\n          }\n          assertEquals(\"term should not have been found (version newer)\", -1, lookup.lookup(idValueBytes, expectedVersion.longValue()+1));\n        }\n      }\n    }\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    int minItemsInBlock = TestUtil.nextInt(random(), 2, 50);\n    int maxItemsInBlock = 2*(minItemsInBlock-1) + random().nextInt(50);\n    iwc.setCodec(TestUtil.alwaysPostingsFormat(new IDVersionPostingsFormat(minItemsInBlock, maxItemsInBlock)));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    //IndexWriter w = new IndexWriter(dir, iwc);\n    int numDocs = atLeast(1000);\n    Map<String,Long> idValues = new HashMap<String,Long>();\n    int docUpto = 0;\n    if (VERBOSE) {\n      System.out.println(\"TEST: numDocs=\" + numDocs);\n    }\n\n    IDSource ids = getRandomIDs();\n    String idPrefix;\n    if (random().nextBoolean()) {\n      idPrefix = \"\";\n    } else {\n      idPrefix = TestUtil.randomSimpleString(random());\n      if (VERBOSE) {\n        System.out.println(\"TEST: use id prefix: \" + idPrefix);\n      }\n    }\n\n    boolean useMonotonicVersion = random().nextBoolean();\n    if (VERBOSE) {\n      System.out.println(\"TEST: useMonotonicVersion=\" + useMonotonicVersion);\n    }\n\n    List<String> idsList = new ArrayList<>();\n\n    long version = 0;\n    while (docUpto < numDocs) {\n      String idValue = idPrefix + ids.next();\n      if (idValues.containsKey(idValue)) {\n        continue;\n      }\n      if (useMonotonicVersion) {\n        version += TestUtil.nextInt(random(), 1, 10);\n      } else {\n        version = random().nextLong() & 0x7fffffffffffffffL;\n      }\n      idValues.put(idValue, version);\n      if (VERBOSE) {\n        System.out.println(\"  \" + idValue + \" -> \" + version);\n      }\n      Document doc = new Document();\n      doc.add(makeIDField(idValue, version));\n      w.addDocument(doc);\n      idsList.add(idValue);\n\n      if (idsList.size() > 0 && random().nextInt(7) == 5) {\n        // Randomly delete or update a previous ID\n        idValue = idsList.get(random().nextInt(idsList.size()));\n        if (random().nextBoolean()) {\n          if (useMonotonicVersion) {\n            version += TestUtil.nextInt(random(), 1, 10);\n          } else {\n            version = random().nextLong() & 0x7fffffffffffffffL;\n          }\n          doc = new Document();\n          doc.add(makeIDField(idValue, version));\n          if (VERBOSE) {\n            System.out.println(\"  update \" + idValue + \" -> \" + version);\n          }\n          w.updateDocument(new Term(\"id\", idValue), doc);\n          idValues.put(idValue, version);\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  delete \" + idValue);\n          }\n          w.deleteDocuments(new Term(\"id\", idValue));\n          idValues.remove(idValue);\n        }        \n      }\n\n      docUpto++;\n    }\n\n    IndexReader r = w.getReader();\n    //IndexReader r = DirectoryReader.open(w, true);\n    PerThreadVersionPKLookup lookup = new PerThreadVersionPKLookup(r, \"id\");\n\n    List<Map.Entry<String,Long>> idValuesList = new ArrayList<>(idValues.entrySet());\n    int iters = numDocs * 5;\n    for(int iter=0;iter<iters;iter++) {\n      String idValue;\n\n      if (random().nextBoolean()) {\n        idValue = idValuesList.get(random().nextInt(idValuesList.size())).getKey();\n      } else if (random().nextBoolean()) {\n        idValue = ids.next();\n      } else {\n        idValue = idPrefix + TestUtil.randomSimpleString(random());\n      }\n\n      BytesRef idValueBytes = new BytesRef(idValue);\n\n      Long expectedVersion = idValues.get(idValue);\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" id=\" + idValue + \" expectedVersion=\" + expectedVersion);\n      }\n      \n      if (expectedVersion == null) {\n        assertEquals(\"term should not have been found (doesn't exist)\", -1, lookup.lookup(idValueBytes));\n      } else {\n        if (random().nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"  lookup exact version (should be found)\");\n          }\n          assertTrue(\"term should have been found (version too old)\", lookup.lookup(idValueBytes, expectedVersion.longValue()) != -1);\n          assertEquals(expectedVersion.longValue(), lookup.getVersion());\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  lookup version+1 (should not be found)\");\n          }\n          assertEquals(\"term should not have been found (version newer)\", -1, lookup.lookup(idValueBytes, expectedVersion.longValue()+1));\n        }\n      }\n    }\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9017ec91c7e47796f2938c5f5705089cb048c4ae","date":1400795272,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat#testRandom().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    int minItemsInBlock = TestUtil.nextInt(random(), 2, 50);\n    int maxItemsInBlock = 2*(minItemsInBlock-1) + random().nextInt(50);\n    iwc.setCodec(TestUtil.alwaysPostingsFormat(new IDVersionPostingsFormat(minItemsInBlock, maxItemsInBlock)));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    //IndexWriter w = new IndexWriter(dir, iwc);\n    int numDocs = atLeast(1000);\n    Map<String,Long> idValues = new HashMap<String,Long>();\n    int docUpto = 0;\n    if (VERBOSE) {\n      System.out.println(\"TEST: numDocs=\" + numDocs);\n    }\n\n    IDSource ids = getRandomIDs();\n    String idPrefix;\n    if (random().nextBoolean()) {\n      idPrefix = \"\";\n    } else {\n      idPrefix = TestUtil.randomSimpleString(random());\n      if (VERBOSE) {\n        System.out.println(\"TEST: use id prefix: \" + idPrefix);\n      }\n    }\n\n    boolean useMonotonicVersion = random().nextBoolean();\n    if (VERBOSE) {\n      System.out.println(\"TEST: useMonotonicVersion=\" + useMonotonicVersion);\n    }\n\n    List<String> idsList = new ArrayList<>();\n\n    long version = 0;\n    while (docUpto < numDocs) {\n      String idValue = idPrefix + ids.next();\n      if (idValues.containsKey(idValue)) {\n        continue;\n      }\n      if (useMonotonicVersion) {\n        version += TestUtil.nextInt(random(), 1, 10);\n      } else {\n        version = random().nextLong() & 0x3fffffffffffffffL;\n      }\n      idValues.put(idValue, version);\n      if (VERBOSE) {\n        System.out.println(\"  \" + idValue + \" -> \" + version);\n      }\n      Document doc = new Document();\n      doc.add(makeIDField(idValue, version));\n      w.addDocument(doc);\n      idsList.add(idValue);\n\n      if (idsList.size() > 0 && random().nextInt(7) == 5) {\n        // Randomly delete or update a previous ID\n        idValue = idsList.get(random().nextInt(idsList.size()));\n        if (random().nextBoolean()) {\n          if (useMonotonicVersion) {\n            version += TestUtil.nextInt(random(), 1, 10);\n          } else {\n            version = random().nextLong() & 0x3fffffffffffffffL;\n          }\n          doc = new Document();\n          doc.add(makeIDField(idValue, version));\n          if (VERBOSE) {\n            System.out.println(\"  update \" + idValue + \" -> \" + version);\n          }\n          w.updateDocument(new Term(\"id\", idValue), doc);\n          idValues.put(idValue, version);\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  delete \" + idValue);\n          }\n          w.deleteDocuments(new Term(\"id\", idValue));\n          idValues.remove(idValue);\n        }        \n      }\n\n      docUpto++;\n    }\n\n    IndexReader r = w.getReader();\n    //IndexReader r = DirectoryReader.open(w, true);\n    PerThreadVersionPKLookup lookup = new PerThreadVersionPKLookup(r, \"id\");\n\n    List<Map.Entry<String,Long>> idValuesList = new ArrayList<>(idValues.entrySet());\n    int iters = numDocs * 5;\n    for(int iter=0;iter<iters;iter++) {\n      String idValue;\n\n      if (random().nextBoolean()) {\n        idValue = idValuesList.get(random().nextInt(idValuesList.size())).getKey();\n      } else if (random().nextBoolean()) {\n        idValue = ids.next();\n      } else {\n        idValue = idPrefix + TestUtil.randomSimpleString(random());\n      }\n\n      BytesRef idValueBytes = new BytesRef(idValue);\n\n      Long expectedVersion = idValues.get(idValue);\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" id=\" + idValue + \" expectedVersion=\" + expectedVersion);\n      }\n      \n      if (expectedVersion == null) {\n        assertEquals(\"term should not have been found (doesn't exist)\", -1, lookup.lookup(idValueBytes));\n      } else {\n        if (random().nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"  lookup exact version (should be found)\");\n          }\n          assertTrue(\"term should have been found (version too old)\", lookup.lookup(idValueBytes, expectedVersion.longValue()) != -1);\n          assertEquals(expectedVersion.longValue(), lookup.getVersion());\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  lookup version+1 (should not be found)\");\n          }\n          assertEquals(\"term should not have been found (version newer)\", -1, lookup.lookup(idValueBytes, expectedVersion.longValue()+1));\n        }\n      }\n    }\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    int minItemsInBlock = TestUtil.nextInt(random(), 2, 50);\n    int maxItemsInBlock = 2*(minItemsInBlock-1) + random().nextInt(50);\n    iwc.setCodec(TestUtil.alwaysPostingsFormat(new IDVersionPostingsFormat(minItemsInBlock, maxItemsInBlock)));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    //IndexWriter w = new IndexWriter(dir, iwc);\n    int numDocs = atLeast(1000);\n    Map<String,Long> idValues = new HashMap<String,Long>();\n    int docUpto = 0;\n    if (VERBOSE) {\n      System.out.println(\"TEST: numDocs=\" + numDocs);\n    }\n\n    IDSource ids = getRandomIDs();\n    String idPrefix;\n    if (random().nextBoolean()) {\n      idPrefix = \"\";\n    } else {\n      idPrefix = TestUtil.randomSimpleString(random());\n      if (VERBOSE) {\n        System.out.println(\"TEST: use id prefix: \" + idPrefix);\n      }\n    }\n\n    boolean useMonotonicVersion = random().nextBoolean();\n    if (VERBOSE) {\n      System.out.println(\"TEST: useMonotonicVersion=\" + useMonotonicVersion);\n    }\n\n    List<String> idsList = new ArrayList<>();\n\n    long version = 0;\n    while (docUpto < numDocs) {\n      String idValue = idPrefix + ids.next();\n      if (idValues.containsKey(idValue)) {\n        continue;\n      }\n      if (useMonotonicVersion) {\n        version += TestUtil.nextInt(random(), 1, 10);\n      } else {\n        version = random().nextLong() & 0x7fffffffffffffffL;\n      }\n      idValues.put(idValue, version);\n      if (VERBOSE) {\n        System.out.println(\"  \" + idValue + \" -> \" + version);\n      }\n      Document doc = new Document();\n      doc.add(makeIDField(idValue, version));\n      w.addDocument(doc);\n      idsList.add(idValue);\n\n      if (idsList.size() > 0 && random().nextInt(7) == 5) {\n        // Randomly delete or update a previous ID\n        idValue = idsList.get(random().nextInt(idsList.size()));\n        if (random().nextBoolean()) {\n          if (useMonotonicVersion) {\n            version += TestUtil.nextInt(random(), 1, 10);\n          } else {\n            version = random().nextLong() & 0x7fffffffffffffffL;\n          }\n          doc = new Document();\n          doc.add(makeIDField(idValue, version));\n          if (VERBOSE) {\n            System.out.println(\"  update \" + idValue + \" -> \" + version);\n          }\n          w.updateDocument(new Term(\"id\", idValue), doc);\n          idValues.put(idValue, version);\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  delete \" + idValue);\n          }\n          w.deleteDocuments(new Term(\"id\", idValue));\n          idValues.remove(idValue);\n        }        \n      }\n\n      docUpto++;\n    }\n\n    IndexReader r = w.getReader();\n    //IndexReader r = DirectoryReader.open(w, true);\n    PerThreadVersionPKLookup lookup = new PerThreadVersionPKLookup(r, \"id\");\n\n    List<Map.Entry<String,Long>> idValuesList = new ArrayList<>(idValues.entrySet());\n    int iters = numDocs * 5;\n    for(int iter=0;iter<iters;iter++) {\n      String idValue;\n\n      if (random().nextBoolean()) {\n        idValue = idValuesList.get(random().nextInt(idValuesList.size())).getKey();\n      } else if (random().nextBoolean()) {\n        idValue = ids.next();\n      } else {\n        idValue = idPrefix + TestUtil.randomSimpleString(random());\n      }\n\n      BytesRef idValueBytes = new BytesRef(idValue);\n\n      Long expectedVersion = idValues.get(idValue);\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" id=\" + idValue + \" expectedVersion=\" + expectedVersion);\n      }\n      \n      if (expectedVersion == null) {\n        assertEquals(\"term should not have been found (doesn't exist)\", -1, lookup.lookup(idValueBytes));\n      } else {\n        if (random().nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"  lookup exact version (should be found)\");\n          }\n          assertTrue(\"term should have been found (version too old)\", lookup.lookup(idValueBytes, expectedVersion.longValue()) != -1);\n          assertEquals(expectedVersion.longValue(), lookup.getVersion());\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  lookup version+1 (should not be found)\");\n          }\n          assertEquals(\"term should not have been found (version newer)\", -1, lookup.lookup(idValueBytes, expectedVersion.longValue()+1));\n        }\n      }\n    }\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandom() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    int minItemsInBlock = TestUtil.nextInt(random(), 2, 50);\n    int maxItemsInBlock = 2*(minItemsInBlock-1) + random().nextInt(50);\n    iwc.setCodec(TestUtil.alwaysPostingsFormat(new IDVersionPostingsFormat(minItemsInBlock, maxItemsInBlock)));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    //IndexWriter w = new IndexWriter(dir, iwc);\n    int numDocs = atLeast(1000);\n    Map<String,Long> idValues = new HashMap<String,Long>();\n    int docUpto = 0;\n    if (VERBOSE) {\n      System.out.println(\"TEST: numDocs=\" + numDocs);\n    }\n\n    IDSource ids = getRandomIDs();\n    String idPrefix;\n    if (random().nextBoolean()) {\n      idPrefix = \"\";\n    } else {\n      idPrefix = TestUtil.randomSimpleString(random());\n      if (VERBOSE) {\n        System.out.println(\"TEST: use id prefix: \" + idPrefix);\n      }\n    }\n\n    boolean useMonotonicVersion = random().nextBoolean();\n    if (VERBOSE) {\n      System.out.println(\"TEST: useMonotonicVersion=\" + useMonotonicVersion);\n    }\n\n    List<String> idsList = new ArrayList<>();\n\n    long version = 0;\n    while (docUpto < numDocs) {\n      String idValue = idPrefix + ids.next();\n      if (idValues.containsKey(idValue)) {\n        continue;\n      }\n      if (useMonotonicVersion) {\n        version += TestUtil.nextInt(random(), 1, 10);\n      } else {\n        version = random().nextLong() & 0x3fffffffffffffffL;\n      }\n      idValues.put(idValue, version);\n      if (VERBOSE) {\n        System.out.println(\"  \" + idValue + \" -> \" + version);\n      }\n      Document doc = new Document();\n      doc.add(makeIDField(idValue, version));\n      w.addDocument(doc);\n      idsList.add(idValue);\n\n      if (idsList.size() > 0 && random().nextInt(7) == 5) {\n        // Randomly delete or update a previous ID\n        idValue = idsList.get(random().nextInt(idsList.size()));\n        if (random().nextBoolean()) {\n          if (useMonotonicVersion) {\n            version += TestUtil.nextInt(random(), 1, 10);\n          } else {\n            version = random().nextLong() & 0x3fffffffffffffffL;\n          }\n          doc = new Document();\n          doc.add(makeIDField(idValue, version));\n          if (VERBOSE) {\n            System.out.println(\"  update \" + idValue + \" -> \" + version);\n          }\n          w.updateDocument(new Term(\"id\", idValue), doc);\n          idValues.put(idValue, version);\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  delete \" + idValue);\n          }\n          w.deleteDocuments(new Term(\"id\", idValue));\n          idValues.remove(idValue);\n        }        \n      }\n\n      docUpto++;\n    }\n\n    IndexReader r = w.getReader();\n    //IndexReader r = DirectoryReader.open(w, true);\n    PerThreadVersionPKLookup lookup = new PerThreadVersionPKLookup(r, \"id\");\n\n    List<Map.Entry<String,Long>> idValuesList = new ArrayList<>(idValues.entrySet());\n    int iters = numDocs * 5;\n    for(int iter=0;iter<iters;iter++) {\n      String idValue;\n\n      if (random().nextBoolean()) {\n        idValue = idValuesList.get(random().nextInt(idValuesList.size())).getKey();\n      } else if (random().nextBoolean()) {\n        idValue = ids.next();\n      } else {\n        idValue = idPrefix + TestUtil.randomSimpleString(random());\n      }\n\n      BytesRef idValueBytes = new BytesRef(idValue);\n\n      Long expectedVersion = idValues.get(idValue);\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" id=\" + idValue + \" expectedVersion=\" + expectedVersion);\n      }\n      \n      if (expectedVersion == null) {\n        assertEquals(\"term should not have been found (doesn't exist)\", -1, lookup.lookup(idValueBytes));\n      } else {\n        if (random().nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"  lookup exact version (should be found)\");\n          }\n          assertTrue(\"term should have been found (version too old)\", lookup.lookup(idValueBytes, expectedVersion.longValue()) != -1);\n          assertEquals(expectedVersion.longValue(), lookup.getVersion());\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  lookup version+1 (should not be found)\");\n          }\n          assertEquals(\"term should not have been found (version newer)\", -1, lookup.lookup(idValueBytes, expectedVersion.longValue()+1));\n        }\n      }\n    }\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat#testRandom().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    int minItemsInBlock = TestUtil.nextInt(random(), 2, 50);\n    int maxItemsInBlock = 2*(minItemsInBlock-1) + random().nextInt(50);\n    iwc.setCodec(TestUtil.alwaysPostingsFormat(new IDVersionPostingsFormat(minItemsInBlock, maxItemsInBlock)));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    //IndexWriter w = new IndexWriter(dir, iwc);\n    int numDocs = atLeast(1000);\n    Map<String,Long> idValues = new HashMap<String,Long>();\n    int docUpto = 0;\n    if (VERBOSE) {\n      System.out.println(\"TEST: numDocs=\" + numDocs);\n    }\n\n    IDSource ids = getRandomIDs();\n    String idPrefix;\n    if (random().nextBoolean()) {\n      idPrefix = \"\";\n    } else {\n      idPrefix = TestUtil.randomSimpleString(random());\n      if (VERBOSE) {\n        System.out.println(\"TEST: use id prefix: \" + idPrefix);\n      }\n    }\n\n    boolean useMonotonicVersion = random().nextBoolean();\n    if (VERBOSE) {\n      System.out.println(\"TEST: useMonotonicVersion=\" + useMonotonicVersion);\n    }\n\n    List<String> idsList = new ArrayList<>();\n\n    long version = 0;\n    while (docUpto < numDocs) {\n      String idValue = idPrefix + ids.next();\n      if (idValues.containsKey(idValue)) {\n        continue;\n      }\n      if (useMonotonicVersion) {\n        version += TestUtil.nextInt(random(), 1, 10);\n      } else {\n        version = random().nextLong() & 0x3fffffffffffffffL;\n      }\n      idValues.put(idValue, version);\n      if (VERBOSE) {\n        System.out.println(\"  \" + idValue + \" -> \" + version);\n      }\n      Document doc = new Document();\n      doc.add(makeIDField(idValue, version));\n      w.addDocument(doc);\n      idsList.add(idValue);\n\n      if (idsList.size() > 0 && random().nextInt(7) == 5) {\n        // Randomly delete or update a previous ID\n        idValue = idsList.get(random().nextInt(idsList.size()));\n        if (random().nextBoolean()) {\n          if (useMonotonicVersion) {\n            version += TestUtil.nextInt(random(), 1, 10);\n          } else {\n            version = random().nextLong() & 0x3fffffffffffffffL;\n          }\n          doc = new Document();\n          doc.add(makeIDField(idValue, version));\n          if (VERBOSE) {\n            System.out.println(\"  update \" + idValue + \" -> \" + version);\n          }\n          w.updateDocument(new Term(\"id\", idValue), doc);\n          idValues.put(idValue, version);\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  delete \" + idValue);\n          }\n          w.deleteDocuments(new Term(\"id\", idValue));\n          idValues.remove(idValue);\n        }        \n      }\n\n      docUpto++;\n    }\n\n    IndexReader r = w.getReader();\n    //IndexReader r = DirectoryReader.open(w, true);\n    PerThreadVersionPKLookup lookup = new PerThreadVersionPKLookup(r, \"id\");\n\n    List<Map.Entry<String,Long>> idValuesList = new ArrayList<>(idValues.entrySet());\n    int iters = numDocs * 5;\n    for(int iter=0;iter<iters;iter++) {\n      String idValue;\n\n      if (random().nextBoolean()) {\n        idValue = idValuesList.get(random().nextInt(idValuesList.size())).getKey();\n      } else if (random().nextBoolean()) {\n        idValue = ids.next();\n      } else {\n        idValue = idPrefix + TestUtil.randomSimpleString(random());\n      }\n\n      BytesRef idValueBytes = new BytesRef(idValue);\n\n      Long expectedVersion = idValues.get(idValue);\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" id=\" + idValue + \" expectedVersion=\" + expectedVersion);\n      }\n      \n      if (expectedVersion == null) {\n        assertEquals(\"term should not have been found (doesn't exist)\", -1, lookup.lookup(idValueBytes));\n      } else {\n        if (random().nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"  lookup exact version (should be found)\");\n          }\n          assertTrue(\"term should have been found (version too old)\", lookup.lookup(idValueBytes, expectedVersion.longValue()) != -1);\n          assertEquals(expectedVersion.longValue(), lookup.getVersion());\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  lookup version+1 (should not be found)\");\n          }\n          assertEquals(\"term should not have been found (version newer)\", -1, lookup.lookup(idValueBytes, expectedVersion.longValue()+1));\n        }\n      }\n    }\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    int minItemsInBlock = TestUtil.nextInt(random(), 2, 50);\n    int maxItemsInBlock = 2*(minItemsInBlock-1) + random().nextInt(50);\n    iwc.setCodec(TestUtil.alwaysPostingsFormat(new IDVersionPostingsFormat(minItemsInBlock, maxItemsInBlock)));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    //IndexWriter w = new IndexWriter(dir, iwc);\n    int numDocs = atLeast(1000);\n    Map<String,Long> idValues = new HashMap<String,Long>();\n    int docUpto = 0;\n    if (VERBOSE) {\n      System.out.println(\"TEST: numDocs=\" + numDocs);\n    }\n\n    IDSource ids = getRandomIDs();\n    String idPrefix;\n    if (random().nextBoolean()) {\n      idPrefix = \"\";\n    } else {\n      idPrefix = TestUtil.randomSimpleString(random());\n      if (VERBOSE) {\n        System.out.println(\"TEST: use id prefix: \" + idPrefix);\n      }\n    }\n\n    boolean useMonotonicVersion = random().nextBoolean();\n    if (VERBOSE) {\n      System.out.println(\"TEST: useMonotonicVersion=\" + useMonotonicVersion);\n    }\n\n    List<String> idsList = new ArrayList<>();\n\n    long version = 0;\n    while (docUpto < numDocs) {\n      String idValue = idPrefix + ids.next();\n      if (idValues.containsKey(idValue)) {\n        continue;\n      }\n      if (useMonotonicVersion) {\n        version += TestUtil.nextInt(random(), 1, 10);\n      } else {\n        version = random().nextLong() & 0x3fffffffffffffffL;\n      }\n      idValues.put(idValue, version);\n      if (VERBOSE) {\n        System.out.println(\"  \" + idValue + \" -> \" + version);\n      }\n      Document doc = new Document();\n      doc.add(makeIDField(idValue, version));\n      w.addDocument(doc);\n      idsList.add(idValue);\n\n      if (idsList.size() > 0 && random().nextInt(7) == 5) {\n        // Randomly delete or update a previous ID\n        idValue = idsList.get(random().nextInt(idsList.size()));\n        if (random().nextBoolean()) {\n          if (useMonotonicVersion) {\n            version += TestUtil.nextInt(random(), 1, 10);\n          } else {\n            version = random().nextLong() & 0x3fffffffffffffffL;\n          }\n          doc = new Document();\n          doc.add(makeIDField(idValue, version));\n          if (VERBOSE) {\n            System.out.println(\"  update \" + idValue + \" -> \" + version);\n          }\n          w.updateDocument(new Term(\"id\", idValue), doc);\n          idValues.put(idValue, version);\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  delete \" + idValue);\n          }\n          w.deleteDocuments(new Term(\"id\", idValue));\n          idValues.remove(idValue);\n        }        \n      }\n\n      docUpto++;\n    }\n\n    IndexReader r = w.getReader();\n    //IndexReader r = DirectoryReader.open(w, true);\n    PerThreadVersionPKLookup lookup = new PerThreadVersionPKLookup(r, \"id\");\n\n    List<Map.Entry<String,Long>> idValuesList = new ArrayList<>(idValues.entrySet());\n    int iters = numDocs * 5;\n    for(int iter=0;iter<iters;iter++) {\n      String idValue;\n\n      if (random().nextBoolean()) {\n        idValue = idValuesList.get(random().nextInt(idValuesList.size())).getKey();\n      } else if (random().nextBoolean()) {\n        idValue = ids.next();\n      } else {\n        idValue = idPrefix + TestUtil.randomSimpleString(random());\n      }\n\n      BytesRef idValueBytes = new BytesRef(idValue);\n\n      Long expectedVersion = idValues.get(idValue);\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" id=\" + idValue + \" expectedVersion=\" + expectedVersion);\n      }\n      \n      if (expectedVersion == null) {\n        assertEquals(\"term should not have been found (doesn't exist)\", -1, lookup.lookup(idValueBytes));\n      } else {\n        if (random().nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"  lookup exact version (should be found)\");\n          }\n          assertTrue(\"term should have been found (version too old)\", lookup.lookup(idValueBytes, expectedVersion.longValue()) != -1);\n          assertEquals(expectedVersion.longValue(), lookup.getVersion());\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  lookup version+1 (should not be found)\");\n          }\n          assertEquals(\"term should not have been found (version newer)\", -1, lookup.lookup(idValueBytes, expectedVersion.longValue()+1));\n        }\n      }\n    }\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b516a692d03225c8f0e81a13ceed2dc32bb457d","date":1453411951,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat#testRandom().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    int minItemsInBlock = TestUtil.nextInt(random(), 2, 50);\n    int maxItemsInBlock = 2*(minItemsInBlock-1) + random().nextInt(50);\n    iwc.setCodec(TestUtil.alwaysPostingsFormat(new IDVersionPostingsFormat(minItemsInBlock, maxItemsInBlock)));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    //IndexWriter w = new IndexWriter(dir, iwc);\n    int numDocs = atLeast(1000);\n    Map<String,Long> idValues = new HashMap<String,Long>();\n    int docUpto = 0;\n    if (VERBOSE) {\n      System.out.println(\"TEST: numDocs=\" + numDocs);\n    }\n\n    IDSource ids = getRandomIDs();\n    String idPrefix;\n    if (random().nextBoolean()) {\n      idPrefix = \"\";\n    } else {\n      idPrefix = TestUtil.randomSimpleString(random());\n      if (VERBOSE) {\n        System.out.println(\"TEST: use id prefix: \" + idPrefix);\n      }\n    }\n\n    boolean useMonotonicVersion = random().nextBoolean();\n    if (VERBOSE) {\n      System.out.println(\"TEST: useMonotonicVersion=\" + useMonotonicVersion);\n    }\n\n    List<String> idsList = new ArrayList<>();\n\n    long version = 0;\n    while (docUpto < numDocs) {\n      String idValue = idPrefix + ids.next();\n      if (idValues.containsKey(idValue)) {\n        continue;\n      }\n      if (useMonotonicVersion) {\n        version += TestUtil.nextInt(random(), 1, 10);\n      } else {\n        version = random().nextLong() & 0x3fffffffffffffffL;\n      }\n      idValues.put(idValue, version);\n      if (VERBOSE) {\n        System.out.println(\"  \" + idValue + \" -> \" + version);\n      }\n      Document doc = new Document();\n      doc.add(makeIDField(idValue, version));\n      w.addDocument(doc);\n      idsList.add(idValue);\n\n      if (idsList.size() > 0 && random().nextInt(7) == 5) {\n        // Randomly delete or update a previous ID\n        idValue = idsList.get(random().nextInt(idsList.size()));\n        if (random().nextBoolean()) {\n          if (useMonotonicVersion) {\n            version += TestUtil.nextInt(random(), 1, 10);\n          } else {\n            version = random().nextLong() & 0x3fffffffffffffffL;\n          }\n          doc = new Document();\n          doc.add(makeIDField(idValue, version));\n          if (VERBOSE) {\n            System.out.println(\"  update \" + idValue + \" -> \" + version);\n          }\n          w.updateDocument(new Term(\"id\", idValue), doc);\n          idValues.put(idValue, version);\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  delete \" + idValue);\n          }\n          w.deleteDocuments(new Term(\"id\", idValue));\n          idValues.remove(idValue);\n        }        \n      }\n\n      docUpto++;\n    }\n\n    IndexReader r = w.getReader();\n    //IndexReader r = DirectoryReader.open(w);\n    PerThreadVersionPKLookup lookup = new PerThreadVersionPKLookup(r, \"id\");\n\n    List<Map.Entry<String,Long>> idValuesList = new ArrayList<>(idValues.entrySet());\n    int iters = numDocs * 5;\n    for(int iter=0;iter<iters;iter++) {\n      String idValue;\n\n      if (random().nextBoolean()) {\n        idValue = idValuesList.get(random().nextInt(idValuesList.size())).getKey();\n      } else if (random().nextBoolean()) {\n        idValue = ids.next();\n      } else {\n        idValue = idPrefix + TestUtil.randomSimpleString(random());\n      }\n\n      BytesRef idValueBytes = new BytesRef(idValue);\n\n      Long expectedVersion = idValues.get(idValue);\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" id=\" + idValue + \" expectedVersion=\" + expectedVersion);\n      }\n      \n      if (expectedVersion == null) {\n        assertEquals(\"term should not have been found (doesn't exist)\", -1, lookup.lookup(idValueBytes));\n      } else {\n        if (random().nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"  lookup exact version (should be found)\");\n          }\n          assertTrue(\"term should have been found (version too old)\", lookup.lookup(idValueBytes, expectedVersion.longValue()) != -1);\n          assertEquals(expectedVersion.longValue(), lookup.getVersion());\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  lookup version+1 (should not be found)\");\n          }\n          assertEquals(\"term should not have been found (version newer)\", -1, lookup.lookup(idValueBytes, expectedVersion.longValue()+1));\n        }\n      }\n    }\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    int minItemsInBlock = TestUtil.nextInt(random(), 2, 50);\n    int maxItemsInBlock = 2*(minItemsInBlock-1) + random().nextInt(50);\n    iwc.setCodec(TestUtil.alwaysPostingsFormat(new IDVersionPostingsFormat(minItemsInBlock, maxItemsInBlock)));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    //IndexWriter w = new IndexWriter(dir, iwc);\n    int numDocs = atLeast(1000);\n    Map<String,Long> idValues = new HashMap<String,Long>();\n    int docUpto = 0;\n    if (VERBOSE) {\n      System.out.println(\"TEST: numDocs=\" + numDocs);\n    }\n\n    IDSource ids = getRandomIDs();\n    String idPrefix;\n    if (random().nextBoolean()) {\n      idPrefix = \"\";\n    } else {\n      idPrefix = TestUtil.randomSimpleString(random());\n      if (VERBOSE) {\n        System.out.println(\"TEST: use id prefix: \" + idPrefix);\n      }\n    }\n\n    boolean useMonotonicVersion = random().nextBoolean();\n    if (VERBOSE) {\n      System.out.println(\"TEST: useMonotonicVersion=\" + useMonotonicVersion);\n    }\n\n    List<String> idsList = new ArrayList<>();\n\n    long version = 0;\n    while (docUpto < numDocs) {\n      String idValue = idPrefix + ids.next();\n      if (idValues.containsKey(idValue)) {\n        continue;\n      }\n      if (useMonotonicVersion) {\n        version += TestUtil.nextInt(random(), 1, 10);\n      } else {\n        version = random().nextLong() & 0x3fffffffffffffffL;\n      }\n      idValues.put(idValue, version);\n      if (VERBOSE) {\n        System.out.println(\"  \" + idValue + \" -> \" + version);\n      }\n      Document doc = new Document();\n      doc.add(makeIDField(idValue, version));\n      w.addDocument(doc);\n      idsList.add(idValue);\n\n      if (idsList.size() > 0 && random().nextInt(7) == 5) {\n        // Randomly delete or update a previous ID\n        idValue = idsList.get(random().nextInt(idsList.size()));\n        if (random().nextBoolean()) {\n          if (useMonotonicVersion) {\n            version += TestUtil.nextInt(random(), 1, 10);\n          } else {\n            version = random().nextLong() & 0x3fffffffffffffffL;\n          }\n          doc = new Document();\n          doc.add(makeIDField(idValue, version));\n          if (VERBOSE) {\n            System.out.println(\"  update \" + idValue + \" -> \" + version);\n          }\n          w.updateDocument(new Term(\"id\", idValue), doc);\n          idValues.put(idValue, version);\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  delete \" + idValue);\n          }\n          w.deleteDocuments(new Term(\"id\", idValue));\n          idValues.remove(idValue);\n        }        \n      }\n\n      docUpto++;\n    }\n\n    IndexReader r = w.getReader();\n    //IndexReader r = DirectoryReader.open(w, true);\n    PerThreadVersionPKLookup lookup = new PerThreadVersionPKLookup(r, \"id\");\n\n    List<Map.Entry<String,Long>> idValuesList = new ArrayList<>(idValues.entrySet());\n    int iters = numDocs * 5;\n    for(int iter=0;iter<iters;iter++) {\n      String idValue;\n\n      if (random().nextBoolean()) {\n        idValue = idValuesList.get(random().nextInt(idValuesList.size())).getKey();\n      } else if (random().nextBoolean()) {\n        idValue = ids.next();\n      } else {\n        idValue = idPrefix + TestUtil.randomSimpleString(random());\n      }\n\n      BytesRef idValueBytes = new BytesRef(idValue);\n\n      Long expectedVersion = idValues.get(idValue);\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" id=\" + idValue + \" expectedVersion=\" + expectedVersion);\n      }\n      \n      if (expectedVersion == null) {\n        assertEquals(\"term should not have been found (doesn't exist)\", -1, lookup.lookup(idValueBytes));\n      } else {\n        if (random().nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"  lookup exact version (should be found)\");\n          }\n          assertTrue(\"term should have been found (version too old)\", lookup.lookup(idValueBytes, expectedVersion.longValue()) != -1);\n          assertEquals(expectedVersion.longValue(), lookup.getVersion());\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  lookup version+1 (should not be found)\");\n          }\n          assertEquals(\"term should not have been found (version newer)\", -1, lookup.lookup(idValueBytes, expectedVersion.longValue()+1));\n        }\n      }\n    }\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ee0394b8176abd7c90a4be8c05465be1879db79","date":1522842314,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat#testRandom().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    int minItemsInBlock = TestUtil.nextInt(random(), 2, 50);\n    int maxItemsInBlock = 2*(minItemsInBlock-1) + random().nextInt(50);\n    iwc.setCodec(TestUtil.alwaysPostingsFormat(new IDVersionPostingsFormat(minItemsInBlock, maxItemsInBlock)));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc, false);\n    //IndexWriter w = new IndexWriter(dir, iwc);\n    int numDocs = atLeast(1000);\n    Map<String,Long> idValues = new HashMap<String,Long>();\n    int docUpto = 0;\n    if (VERBOSE) {\n      System.out.println(\"TEST: numDocs=\" + numDocs);\n    }\n\n    IDSource ids = getRandomIDs();\n    String idPrefix;\n    if (random().nextBoolean()) {\n      idPrefix = \"\";\n    } else {\n      idPrefix = TestUtil.randomSimpleString(random());\n      if (VERBOSE) {\n        System.out.println(\"TEST: use id prefix: \" + idPrefix);\n      }\n    }\n\n    boolean useMonotonicVersion = random().nextBoolean();\n    if (VERBOSE) {\n      System.out.println(\"TEST: useMonotonicVersion=\" + useMonotonicVersion);\n    }\n\n    List<String> idsList = new ArrayList<>();\n\n    long version = 0;\n    while (docUpto < numDocs) {\n      String idValue = idPrefix + ids.next();\n      if (idValues.containsKey(idValue)) {\n        continue;\n      }\n      if (useMonotonicVersion) {\n        version += TestUtil.nextInt(random(), 1, 10);\n      } else {\n        version = random().nextLong() & 0x3fffffffffffffffL;\n      }\n      idValues.put(idValue, version);\n      if (VERBOSE) {\n        System.out.println(\"  \" + idValue + \" -> \" + version);\n      }\n      Document doc = new Document();\n      doc.add(makeIDField(idValue, version));\n      w.addDocument(doc);\n      idsList.add(idValue);\n\n      if (idsList.size() > 0 && random().nextInt(7) == 5) {\n        // Randomly delete or update a previous ID\n        idValue = idsList.get(random().nextInt(idsList.size()));\n        if (random().nextBoolean()) {\n          if (useMonotonicVersion) {\n            version += TestUtil.nextInt(random(), 1, 10);\n          } else {\n            version = random().nextLong() & 0x3fffffffffffffffL;\n          }\n          doc = new Document();\n          doc.add(makeIDField(idValue, version));\n          if (VERBOSE) {\n            System.out.println(\"  update \" + idValue + \" -> \" + version);\n          }\n          w.updateDocument(new Term(\"id\", idValue), doc);\n          idValues.put(idValue, version);\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  delete \" + idValue);\n          }\n          w.deleteDocuments(new Term(\"id\", idValue));\n          idValues.remove(idValue);\n        }        \n      }\n\n      docUpto++;\n    }\n\n    IndexReader r = w.getReader();\n    //IndexReader r = DirectoryReader.open(w);\n    PerThreadVersionPKLookup lookup = new PerThreadVersionPKLookup(r, \"id\");\n\n    List<Map.Entry<String,Long>> idValuesList = new ArrayList<>(idValues.entrySet());\n    int iters = numDocs * 5;\n    for(int iter=0;iter<iters;iter++) {\n      String idValue;\n\n      if (random().nextBoolean()) {\n        idValue = idValuesList.get(random().nextInt(idValuesList.size())).getKey();\n      } else if (random().nextBoolean()) {\n        idValue = ids.next();\n      } else {\n        idValue = idPrefix + TestUtil.randomSimpleString(random());\n      }\n\n      BytesRef idValueBytes = new BytesRef(idValue);\n\n      Long expectedVersion = idValues.get(idValue);\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" id=\" + idValue + \" expectedVersion=\" + expectedVersion);\n      }\n      \n      if (expectedVersion == null) {\n        assertEquals(\"term should not have been found (doesn't exist)\", -1, lookup.lookup(idValueBytes));\n      } else {\n        if (random().nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"  lookup exact version (should be found)\");\n          }\n          assertTrue(\"term should have been found (version too old)\", lookup.lookup(idValueBytes, expectedVersion.longValue()) != -1);\n          assertEquals(expectedVersion.longValue(), lookup.getVersion());\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  lookup version+1 (should not be found)\");\n          }\n          assertEquals(\"term should not have been found (version newer)\", -1, lookup.lookup(idValueBytes, expectedVersion.longValue()+1));\n        }\n      }\n    }\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    int minItemsInBlock = TestUtil.nextInt(random(), 2, 50);\n    int maxItemsInBlock = 2*(minItemsInBlock-1) + random().nextInt(50);\n    iwc.setCodec(TestUtil.alwaysPostingsFormat(new IDVersionPostingsFormat(minItemsInBlock, maxItemsInBlock)));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    //IndexWriter w = new IndexWriter(dir, iwc);\n    int numDocs = atLeast(1000);\n    Map<String,Long> idValues = new HashMap<String,Long>();\n    int docUpto = 0;\n    if (VERBOSE) {\n      System.out.println(\"TEST: numDocs=\" + numDocs);\n    }\n\n    IDSource ids = getRandomIDs();\n    String idPrefix;\n    if (random().nextBoolean()) {\n      idPrefix = \"\";\n    } else {\n      idPrefix = TestUtil.randomSimpleString(random());\n      if (VERBOSE) {\n        System.out.println(\"TEST: use id prefix: \" + idPrefix);\n      }\n    }\n\n    boolean useMonotonicVersion = random().nextBoolean();\n    if (VERBOSE) {\n      System.out.println(\"TEST: useMonotonicVersion=\" + useMonotonicVersion);\n    }\n\n    List<String> idsList = new ArrayList<>();\n\n    long version = 0;\n    while (docUpto < numDocs) {\n      String idValue = idPrefix + ids.next();\n      if (idValues.containsKey(idValue)) {\n        continue;\n      }\n      if (useMonotonicVersion) {\n        version += TestUtil.nextInt(random(), 1, 10);\n      } else {\n        version = random().nextLong() & 0x3fffffffffffffffL;\n      }\n      idValues.put(idValue, version);\n      if (VERBOSE) {\n        System.out.println(\"  \" + idValue + \" -> \" + version);\n      }\n      Document doc = new Document();\n      doc.add(makeIDField(idValue, version));\n      w.addDocument(doc);\n      idsList.add(idValue);\n\n      if (idsList.size() > 0 && random().nextInt(7) == 5) {\n        // Randomly delete or update a previous ID\n        idValue = idsList.get(random().nextInt(idsList.size()));\n        if (random().nextBoolean()) {\n          if (useMonotonicVersion) {\n            version += TestUtil.nextInt(random(), 1, 10);\n          } else {\n            version = random().nextLong() & 0x3fffffffffffffffL;\n          }\n          doc = new Document();\n          doc.add(makeIDField(idValue, version));\n          if (VERBOSE) {\n            System.out.println(\"  update \" + idValue + \" -> \" + version);\n          }\n          w.updateDocument(new Term(\"id\", idValue), doc);\n          idValues.put(idValue, version);\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  delete \" + idValue);\n          }\n          w.deleteDocuments(new Term(\"id\", idValue));\n          idValues.remove(idValue);\n        }        \n      }\n\n      docUpto++;\n    }\n\n    IndexReader r = w.getReader();\n    //IndexReader r = DirectoryReader.open(w);\n    PerThreadVersionPKLookup lookup = new PerThreadVersionPKLookup(r, \"id\");\n\n    List<Map.Entry<String,Long>> idValuesList = new ArrayList<>(idValues.entrySet());\n    int iters = numDocs * 5;\n    for(int iter=0;iter<iters;iter++) {\n      String idValue;\n\n      if (random().nextBoolean()) {\n        idValue = idValuesList.get(random().nextInt(idValuesList.size())).getKey();\n      } else if (random().nextBoolean()) {\n        idValue = ids.next();\n      } else {\n        idValue = idPrefix + TestUtil.randomSimpleString(random());\n      }\n\n      BytesRef idValueBytes = new BytesRef(idValue);\n\n      Long expectedVersion = idValues.get(idValue);\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" id=\" + idValue + \" expectedVersion=\" + expectedVersion);\n      }\n      \n      if (expectedVersion == null) {\n        assertEquals(\"term should not have been found (doesn't exist)\", -1, lookup.lookup(idValueBytes));\n      } else {\n        if (random().nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"  lookup exact version (should be found)\");\n          }\n          assertTrue(\"term should have been found (version too old)\", lookup.lookup(idValueBytes, expectedVersion.longValue()) != -1);\n          assertEquals(expectedVersion.longValue(), lookup.getVersion());\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  lookup version+1 (should not be found)\");\n          }\n          assertEquals(\"term should not have been found (version newer)\", -1, lookup.lookup(idValueBytes, expectedVersion.longValue()+1));\n        }\n      }\n    }\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9017ec91c7e47796f2938c5f5705089cb048c4ae"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"9017ec91c7e47796f2938c5f5705089cb048c4ae":["3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e"],"5ee0394b8176abd7c90a4be8c05465be1879db79":["7b516a692d03225c8f0e81a13ceed2dc32bb457d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b516a692d03225c8f0e81a13ceed2dc32bb457d":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ee0394b8176abd7c90a4be8c05465be1879db79"]},"commit2Childs":{"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e":["9017ec91c7e47796f2938c5f5705089cb048c4ae"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["7b516a692d03225c8f0e81a13ceed2dc32bb457d"],"9017ec91c7e47796f2938c5f5705089cb048c4ae":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e","4d637064d608752565d4f9f41b2497dfdfdde50e"],"5ee0394b8176abd7c90a4be8c05465be1879db79":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7b516a692d03225c8f0e81a13ceed2dc32bb457d":["5ee0394b8176abd7c90a4be8c05465be1879db79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}