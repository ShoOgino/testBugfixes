{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","commits":[{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        /*\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n        */\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n\n        values.intersect(new PointInShapeIntersectVisitor(result, shape, shapeBounds));\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        /*\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n        */\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n\n        values.intersect(new PointInShapeIntersectVisitor(result, shape, shapeBounds));\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        /*\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n        */\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n\n        values.intersect(new PointInShapeIntersectVisitor(result, shape, shapeBounds));\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        /*\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n        */\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n\n        values.intersect(new PointInShapeIntersectVisitor(result, shape, shapeBounds));\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c226b0eeb8b028f572020f459851a663a2c064e","date":1542377651,"type":3,"author":"Christophe Bismuth","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        /*\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n        */\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n\n        values.intersect(new PointInShapeIntersectVisitor(result, shape, shapeBounds));\n\n        return new ConstantScoreScorer(this, score(), scoreMode, result.build().iterator());\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        /*\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n        */\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n\n        values.intersect(new PointInShapeIntersectVisitor(result, shape, shapeBounds));\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9c226b0eeb8b028f572020f459851a663a2c064e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9c226b0eeb8b028f572020f459851a663a2c064e"],"417142ff08fda9cf0b72d5133e63097a166c6458":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"9c226b0eeb8b028f572020f459851a663a2c064e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"417142ff08fda9cf0b72d5133e63097a166c6458":["9c226b0eeb8b028f572020f459851a663a2c064e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}