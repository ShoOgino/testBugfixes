{"path":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","commits":[{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#createServers(int).mjava","sourceNew":"  @Override\n  protected void createServers(int numServers) throws Exception {\n    \n    System.setProperty(\"collection\", \"control_collection\");\n    String numShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    controlJetty = createJetty(new File(getSolrHome()), testDir + \"/control/data\",\n        \"control_shard\");\n    System.clearProperty(\"collection\");\n    if(numShards != null) {\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, numShards);\n    } \n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n    \n    createJettys(numServers, true);\n    \n  }\n\n","sourceOld":"  @Override\n  protected void createServers(int numServers) throws Exception {\n    \n    System.setProperty(\"collection\", \"control_collection\");\n    String numShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    controlJetty = createJetty(new File(getSolrHome()), testDir + \"/control/data\",\n        \"control_shard\");\n    System.clearProperty(\"collection\");\n    if(numShards != null) {\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, numShards);\n    } \n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n    \n    createJettys(numServers, true);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#createServers(int).mjava","sourceNew":"  @Override\n  protected void createServers(int numServers) throws Exception {\n    \n    System.setProperty(\"collection\", \"control_collection\");\n    String numShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    controlJetty = createJetty(new File(getSolrHome()), testDir + \"/control/data\",\n        \"control_shard\");\n    System.clearProperty(\"collection\");\n    if(numShards != null) {\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, numShards);\n    } \n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n    \n    createJettys(numServers, true);\n    \n  }\n\n","sourceOld":"  @Override\n  protected void createServers(int numServers) throws Exception {\n    \n    System.setProperty(\"collection\", \"control_collection\");\n    String numShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    controlJetty = createJetty(new File(getSolrHome()), testDir + \"/control/data\",\n        \"control_shard\");\n    System.clearProperty(\"collection\");\n    if(numShards != null) {\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, numShards);\n    } \n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n    \n    createJettys(numServers, true);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#createServers(int).mjava","sourceNew":"  @Override\n  protected void createServers(int numServers) throws Exception {\n    \n    System.setProperty(\"collection\", \"control_collection\");\n    String numShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    controlJetty = createJetty(new File(getSolrHome()), testDir + \"/control/data\",\n        \"control_shard\");\n    System.clearProperty(\"collection\");\n    if(numShards != null) {\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, numShards);\n    } \n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n    \n    createJettys(numServers, true);\n    \n  }\n\n","sourceOld":"  @Override\n  protected void createServers(int numServers) throws Exception {\n    \n    System.setProperty(\"collection\", \"control_collection\");\n    String numShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    controlJetty = createJetty(new File(getSolrHome()), testDir + \"/control/data\",\n        \"control_shard\");\n    System.clearProperty(\"collection\");\n    if(numShards != null) {\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, numShards);\n    } \n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n    \n    createJettys(numServers, true);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69c0b7c6f9804817f14bd78c3795cdd9f6ddae5c","date":1348235008,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","sourceNew":"  @Override\n  protected void createServers(int numServers) throws Exception {\n    \n    System.setProperty(\"collection\", \"control_collection\");\n    String numShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    \n    File controlJettyDir = new File(TEMP_DIR,\n            getClass().getName() + \"-controljetty-\" + System.currentTimeMillis());\n    org.apache.commons.io.FileUtils.copyDirectory(new File(getSolrHome()), controlJettyDir);\n\n    controlJetty = createJetty(controlJettyDir, testDir + \"/control/data\",\n        \"control_shard\");\n    System.clearProperty(\"collection\");\n    if(numShards != null) {\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, numShards);\n    } \n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n    \n    createJettys(numServers, true);\n    \n  }\n\n","sourceOld":"  @Override\n  protected void createServers(int numServers) throws Exception {\n    \n    System.setProperty(\"collection\", \"control_collection\");\n    String numShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    controlJetty = createJetty(new File(getSolrHome()), testDir + \"/control/data\",\n        \"control_shard\");\n    System.clearProperty(\"collection\");\n    if(numShards != null) {\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, numShards);\n    } \n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n    \n    createJettys(numServers, true);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","sourceNew":"  @Override\n  protected void createServers(int numServers) throws Exception {\n    \n    System.setProperty(\"collection\", \"control_collection\");\n    String numShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    \n    File controlJettyDir = new File(TEMP_DIR,\n            getClass().getName() + \"-controljetty-\" + System.currentTimeMillis());\n    org.apache.commons.io.FileUtils.copyDirectory(new File(getSolrHome()), controlJettyDir);\n\n    controlJetty = createJetty(controlJettyDir, testDir + \"/control/data\",\n        \"control_shard\");\n    System.clearProperty(\"collection\");\n    if(numShards != null) {\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, numShards);\n    } \n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n    \n    initCloud();\n    \n    createJettys(numServers, true);\n    \n    // wait until shards have started registering...\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    int cnt = 30;\n    while (!zkStateReader.getClusterState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      if (cnt == 0) {\n        throw new RuntimeException(\n            \"timeout waiting for collection1 in cluster state\");\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    cnt = 30;\n    while (zkStateReader.getClusterState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      if (cnt == 0) {\n        throw new RuntimeException(\n            \"timeout waiting for collection shards to come up\");\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void createServers(int numServers) throws Exception {\n    \n    System.setProperty(\"collection\", \"control_collection\");\n    String numShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    \n    File controlJettyDir = new File(TEMP_DIR,\n            getClass().getName() + \"-controljetty-\" + System.currentTimeMillis());\n    org.apache.commons.io.FileUtils.copyDirectory(new File(getSolrHome()), controlJettyDir);\n\n    controlJetty = createJetty(controlJettyDir, testDir + \"/control/data\",\n        \"control_shard\");\n    System.clearProperty(\"collection\");\n    if(numShards != null) {\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, numShards);\n    } \n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n    \n    createJettys(numServers, true);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","sourceNew":"  @Override\n  protected void createServers(int numServers) throws Exception {\n    \n    System.setProperty(\"collection\", \"control_collection\");\n    String numShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    \n    File controlJettyDir = new File(TEMP_DIR,\n            getClass().getName() + \"-controljetty-\" + System.currentTimeMillis());\n    org.apache.commons.io.FileUtils.copyDirectory(new File(getSolrHome()), controlJettyDir);\n\n    controlJetty = createJetty(controlJettyDir, testDir + \"/control/data\",\n        \"control_shard\");\n    System.clearProperty(\"collection\");\n    if(numShards != null) {\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, numShards);\n    } \n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n    \n    initCloud();\n    \n    createJettys(numServers, true);\n    \n    // wait until shards have started registering...\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    int cnt = 30;\n    while (!zkStateReader.getClusterState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      if (cnt == 0) {\n        throw new RuntimeException(\n            \"timeout waiting for collection1 in cluster state\");\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    cnt = 30;\n    while (zkStateReader.getClusterState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      if (cnt == 0) {\n        throw new RuntimeException(\n            \"timeout waiting for collection shards to come up\");\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void createServers(int numServers) throws Exception {\n    \n    System.setProperty(\"collection\", \"control_collection\");\n    String numShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    \n    File controlJettyDir = new File(TEMP_DIR,\n            getClass().getName() + \"-controljetty-\" + System.currentTimeMillis());\n    org.apache.commons.io.FileUtils.copyDirectory(new File(getSolrHome()), controlJettyDir);\n\n    controlJetty = createJetty(controlJettyDir, testDir + \"/control/data\",\n        \"control_shard\");\n    System.clearProperty(\"collection\");\n    if(numShards != null) {\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, numShards);\n    } \n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n    \n    createJettys(numServers, true);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5a558d54519c651068ddb202f03befefb1514a7","date":1354382006,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","sourceNew":"  @Override\n  protected void createServers(int numServers) throws Exception {\n    \n    System.setProperty(\"collection\", \"control_collection\");\n    String numShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n\n    // we want hashes by default, so set to 1 shard as opposed to leaving unset\n    // System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n\n    File controlJettyDir = new File(TEMP_DIR,\n            getClass().getName() + \"-controljetty-\" + System.currentTimeMillis());\n    org.apache.commons.io.FileUtils.copyDirectory(new File(getSolrHome()), controlJettyDir);\n\n    controlJetty = createJetty(controlJettyDir, testDir + \"/control/data\");  // don't pass shard name... let it default to \"shard1\"\n    System.clearProperty(\"collection\");\n    if(numShards != null) {\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, numShards);\n    } else {\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n    \n    initCloud();\n    \n    createJettys(numServers, true);\n    \n    // wait until shards have started registering...\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    int cnt = 30;\n    while (!zkStateReader.getClusterState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      if (cnt == 0) {\n        throw new RuntimeException(\n            \"timeout waiting for collection1 in cluster state\");\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    cnt = 30;\n    while (zkStateReader.getClusterState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      if (cnt == 0) {\n        throw new RuntimeException(\n            \"timeout waiting for collection shards to come up\");\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void createServers(int numServers) throws Exception {\n    \n    System.setProperty(\"collection\", \"control_collection\");\n    String numShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    \n    File controlJettyDir = new File(TEMP_DIR,\n            getClass().getName() + \"-controljetty-\" + System.currentTimeMillis());\n    org.apache.commons.io.FileUtils.copyDirectory(new File(getSolrHome()), controlJettyDir);\n\n    controlJetty = createJetty(controlJettyDir, testDir + \"/control/data\",\n        \"control_shard\");\n    System.clearProperty(\"collection\");\n    if(numShards != null) {\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, numShards);\n    } \n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n    \n    initCloud();\n    \n    createJettys(numServers, true);\n    \n    // wait until shards have started registering...\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    int cnt = 30;\n    while (!zkStateReader.getClusterState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      if (cnt == 0) {\n        throw new RuntimeException(\n            \"timeout waiting for collection1 in cluster state\");\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    cnt = 30;\n    while (zkStateReader.getClusterState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      if (cnt == 0) {\n        throw new RuntimeException(\n            \"timeout waiting for collection shards to come up\");\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","sourceNew":"  @Override\n  protected void createServers(int numServers) throws Exception {\n    \n    System.setProperty(\"collection\", \"control_collection\");\n    String numShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n\n    // we want hashes by default, so set to 1 shard as opposed to leaving unset\n    // System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n\n    File controlJettyDir = new File(TEMP_DIR,\n            getClass().getName() + \"-controljetty-\" + System.currentTimeMillis());\n    org.apache.commons.io.FileUtils.copyDirectory(new File(getSolrHome()), controlJettyDir);\n\n    controlJetty = createJetty(controlJettyDir, testDir + \"/control/data\");  // don't pass shard name... let it default to \"shard1\"\n    System.clearProperty(\"collection\");\n    if(numShards != null) {\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, numShards);\n    } else {\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n    \n    initCloud();\n    \n    createJettys(numServers, true);\n    \n    // wait until shards have started registering...\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    int cnt = 30;\n    while (!zkStateReader.getClusterState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      if (cnt == 0) {\n        throw new RuntimeException(\n            \"timeout waiting for collection1 in cluster state\");\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    cnt = 30;\n    while (zkStateReader.getClusterState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      if (cnt == 0) {\n        throw new RuntimeException(\n            \"timeout waiting for collection shards to come up\");\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void createServers(int numServers) throws Exception {\n    \n    System.setProperty(\"collection\", \"control_collection\");\n    String numShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    \n    File controlJettyDir = new File(TEMP_DIR,\n            getClass().getName() + \"-controljetty-\" + System.currentTimeMillis());\n    org.apache.commons.io.FileUtils.copyDirectory(new File(getSolrHome()), controlJettyDir);\n\n    controlJetty = createJetty(controlJettyDir, testDir + \"/control/data\",\n        \"control_shard\");\n    System.clearProperty(\"collection\");\n    if(numShards != null) {\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, numShards);\n    } \n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n    \n    initCloud();\n    \n    createJettys(numServers, true);\n    \n    // wait until shards have started registering...\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    int cnt = 30;\n    while (!zkStateReader.getClusterState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      if (cnt == 0) {\n        throw new RuntimeException(\n            \"timeout waiting for collection1 in cluster state\");\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    cnt = 30;\n    while (zkStateReader.getClusterState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      if (cnt == 0) {\n        throw new RuntimeException(\n            \"timeout waiting for collection shards to come up\");\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bceb2cdf01c012aaa9fd1132529159bd7c2fe82","date":1355878858,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","sourceNew":"  @Override\n  protected void createServers(int numServers) throws Exception {\n    \n    System.setProperty(\"collection\", \"control_collection\");\n    String numShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n\n    // we want hashes by default for the control, so set to 1 shard as opposed to leaving unset\n    // System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n\n    File controlJettyDir = new File(TEMP_DIR,\n            getClass().getName() + \"-controljetty-\" + System.currentTimeMillis());\n    org.apache.commons.io.FileUtils.copyDirectory(new File(getSolrHome()), controlJettyDir);\n\n    controlJetty = createJetty(controlJettyDir, testDir + \"/control/data\");  // don't pass shard name... let it default to \"shard1\"\n    System.clearProperty(\"collection\");\n    if(numShards != null) {\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, numShards);\n    } else {\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n\n    if (sliceCount <= 0) {\n      // for now, just create the cloud client for the control if we don't create the normal cloud client.\n      // this can change if more tests need it.\n      controlClientCloud = createCloudClient(\"control_collection\");\n      controlClientCloud.connect();\n      waitForCollection(controlClientCloud.getZkStateReader(), \"control_collection\", 0);\n      // NOTE: we are skipping creation of the chaos monkey by returning here\n      return;\n    }\n\n\n    initCloud();\n    \n    createJettys(numServers, true);\n\n    waitForCollection(cloudClient.getZkStateReader(), DEFAULT_COLLECTION, sliceCount);\n  }\n\n","sourceOld":"  @Override\n  protected void createServers(int numServers) throws Exception {\n    \n    System.setProperty(\"collection\", \"control_collection\");\n    String numShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n\n    // we want hashes by default, so set to 1 shard as opposed to leaving unset\n    // System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n\n    File controlJettyDir = new File(TEMP_DIR,\n            getClass().getName() + \"-controljetty-\" + System.currentTimeMillis());\n    org.apache.commons.io.FileUtils.copyDirectory(new File(getSolrHome()), controlJettyDir);\n\n    controlJetty = createJetty(controlJettyDir, testDir + \"/control/data\");  // don't pass shard name... let it default to \"shard1\"\n    System.clearProperty(\"collection\");\n    if(numShards != null) {\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, numShards);\n    } else {\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n    \n    initCloud();\n    \n    createJettys(numServers, true);\n    \n    // wait until shards have started registering...\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    int cnt = 30;\n    while (!zkStateReader.getClusterState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      if (cnt == 0) {\n        throw new RuntimeException(\n            \"timeout waiting for collection1 in cluster state\");\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    cnt = 30;\n    while (zkStateReader.getClusterState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      if (cnt == 0) {\n        throw new RuntimeException(\n            \"timeout waiting for collection shards to come up\");\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c3fd765dc8fa1dd67f45e1ef91c28a2c147ea39","date":1355888669,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","sourceNew":"  @Override\n  protected void createServers(int numServers) throws Exception {\n    \n    System.setProperty(\"collection\", \"control_collection\");\n    String numShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n\n    // we want hashes by default for the control, so set to 1 shard as opposed to leaving unset\n    // System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n\n    File controlJettyDir = new File(TEMP_DIR,\n            getClass().getName() + \"-controljetty-\" + System.currentTimeMillis());\n    org.apache.commons.io.FileUtils.copyDirectory(new File(getSolrHome()), controlJettyDir);\n\n    controlJetty = createJetty(controlJettyDir, testDir + \"/control/data\");  // don't pass shard name... let it default to \"shard1\"\n    System.clearProperty(\"collection\");\n    if(numShards != null) {\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, numShards);\n    } else {\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n\n    if (sliceCount <= 0) {\n      // for now, just create the cloud client for the control if we don't create the normal cloud client.\n      // this can change if more tests need it.\n      controlClientCloud = createCloudClient(\"control_collection\");\n      controlClientCloud.connect();\n      waitForCollection(controlClientCloud.getZkStateReader(), \"control_collection\", 0);\n      // NOTE: we are skipping creation of the chaos monkey by returning here\n      cloudClient = controlClientCloud;  // temporary - some code needs/uses cloudClient\n      return;\n    }\n\n\n    initCloud();\n    \n    createJettys(numServers, true);\n\n    waitForCollection(cloudClient.getZkStateReader(), DEFAULT_COLLECTION, sliceCount);\n  }\n\n","sourceOld":"  @Override\n  protected void createServers(int numServers) throws Exception {\n    \n    System.setProperty(\"collection\", \"control_collection\");\n    String numShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n\n    // we want hashes by default for the control, so set to 1 shard as opposed to leaving unset\n    // System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n\n    File controlJettyDir = new File(TEMP_DIR,\n            getClass().getName() + \"-controljetty-\" + System.currentTimeMillis());\n    org.apache.commons.io.FileUtils.copyDirectory(new File(getSolrHome()), controlJettyDir);\n\n    controlJetty = createJetty(controlJettyDir, testDir + \"/control/data\");  // don't pass shard name... let it default to \"shard1\"\n    System.clearProperty(\"collection\");\n    if(numShards != null) {\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, numShards);\n    } else {\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n\n    if (sliceCount <= 0) {\n      // for now, just create the cloud client for the control if we don't create the normal cloud client.\n      // this can change if more tests need it.\n      controlClientCloud = createCloudClient(\"control_collection\");\n      controlClientCloud.connect();\n      waitForCollection(controlClientCloud.getZkStateReader(), \"control_collection\", 0);\n      // NOTE: we are skipping creation of the chaos monkey by returning here\n      return;\n    }\n\n\n    initCloud();\n    \n    createJettys(numServers, true);\n\n    waitForCollection(cloudClient.getZkStateReader(), DEFAULT_COLLECTION, sliceCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","sourceNew":"  @Override\n  protected void createServers(int numServers) throws Exception {\n    \n    System.setProperty(\"collection\", \"control_collection\");\n    String numShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n\n    // we want hashes by default for the control, so set to 1 shard as opposed to leaving unset\n    // System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n\n    File controlJettyDir = new File(TEMP_DIR,\n            getClass().getName() + \"-controljetty-\" + System.currentTimeMillis());\n    org.apache.commons.io.FileUtils.copyDirectory(new File(getSolrHome()), controlJettyDir);\n\n    controlJetty = createJetty(controlJettyDir, testDir + \"/control/data\");  // don't pass shard name... let it default to \"shard1\"\n    System.clearProperty(\"collection\");\n    if(numShards != null) {\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, numShards);\n    } else {\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n\n    if (sliceCount <= 0) {\n      // for now, just create the cloud client for the control if we don't create the normal cloud client.\n      // this can change if more tests need it.\n      controlClientCloud = createCloudClient(\"control_collection\");\n      controlClientCloud.connect();\n      waitForCollection(controlClientCloud.getZkStateReader(), \"control_collection\", 0);\n      // NOTE: we are skipping creation of the chaos monkey by returning here\n      cloudClient = controlClientCloud;  // temporary - some code needs/uses cloudClient\n      return;\n    }\n\n\n    initCloud();\n    \n    createJettys(numServers, true);\n\n    waitForCollection(cloudClient.getZkStateReader(), DEFAULT_COLLECTION, sliceCount);\n  }\n\n","sourceOld":"  @Override\n  protected void createServers(int numServers) throws Exception {\n    \n    System.setProperty(\"collection\", \"control_collection\");\n    String numShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n\n    // we want hashes by default, so set to 1 shard as opposed to leaving unset\n    // System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n\n    File controlJettyDir = new File(TEMP_DIR,\n            getClass().getName() + \"-controljetty-\" + System.currentTimeMillis());\n    org.apache.commons.io.FileUtils.copyDirectory(new File(getSolrHome()), controlJettyDir);\n\n    controlJetty = createJetty(controlJettyDir, testDir + \"/control/data\");  // don't pass shard name... let it default to \"shard1\"\n    System.clearProperty(\"collection\");\n    if(numShards != null) {\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, numShards);\n    } else {\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n    \n    initCloud();\n    \n    createJettys(numServers, true);\n    \n    // wait until shards have started registering...\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    int cnt = 30;\n    while (!zkStateReader.getClusterState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      if (cnt == 0) {\n        throw new RuntimeException(\n            \"timeout waiting for collection1 in cluster state\");\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    cnt = 30;\n    while (zkStateReader.getClusterState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      if (cnt == 0) {\n        throw new RuntimeException(\n            \"timeout waiting for collection shards to come up\");\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4bc0d7d47c55a6d5319ba7d7ad8a9ae9c7a4d9dd","date":1362061830,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","sourceNew":"  @Override\n  protected void createServers(int numServers) throws Exception {\n    \n    System.setProperty(\"collection\", \"control_collection\");\n    String numShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n\n    // we want hashes by default for the control, so set to 1 shard as opposed to leaving unset\n    // System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n\n    File controlJettyDir = new File(TEMP_DIR,\n            getClass().getName() + \"-controljetty-\" + System.currentTimeMillis());\n    setupJettySolrHome(controlJettyDir);\n\n    controlJetty = createJetty(controlJettyDir, testDir + \"/control/data\");  // don't pass shard name... let it default to \"shard1\"\n    System.clearProperty(\"collection\");\n    if(numShards != null) {\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, numShards);\n    } else {\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n\n    if (sliceCount <= 0) {\n      // for now, just create the cloud client for the control if we don't create the normal cloud client.\n      // this can change if more tests need it.\n      controlClientCloud = createCloudClient(\"control_collection\");\n      controlClientCloud.connect();\n      waitForCollection(controlClientCloud.getZkStateReader(), \"control_collection\", 0);\n      // NOTE: we are skipping creation of the chaos monkey by returning here\n      cloudClient = controlClientCloud;  // temporary - some code needs/uses cloudClient\n      return;\n    }\n\n\n    initCloud();\n    \n    createJettys(numServers, checkCreatedVsState).size();\n    \n    int cnt = getTotalReplicas(DEFAULT_COLLECTION);\n    if (cnt > 0) {\n      waitForCollection(cloudClient.getZkStateReader(), DEFAULT_COLLECTION, sliceCount);\n    }\n\n  }\n\n","sourceOld":"  @Override\n  protected void createServers(int numServers) throws Exception {\n    \n    System.setProperty(\"collection\", \"control_collection\");\n    String numShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n\n    // we want hashes by default for the control, so set to 1 shard as opposed to leaving unset\n    // System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n\n    File controlJettyDir = new File(TEMP_DIR,\n            getClass().getName() + \"-controljetty-\" + System.currentTimeMillis());\n    org.apache.commons.io.FileUtils.copyDirectory(new File(getSolrHome()), controlJettyDir);\n\n    controlJetty = createJetty(controlJettyDir, testDir + \"/control/data\");  // don't pass shard name... let it default to \"shard1\"\n    System.clearProperty(\"collection\");\n    if(numShards != null) {\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, numShards);\n    } else {\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n\n    if (sliceCount <= 0) {\n      // for now, just create the cloud client for the control if we don't create the normal cloud client.\n      // this can change if more tests need it.\n      controlClientCloud = createCloudClient(\"control_collection\");\n      controlClientCloud.connect();\n      waitForCollection(controlClientCloud.getZkStateReader(), \"control_collection\", 0);\n      // NOTE: we are skipping creation of the chaos monkey by returning here\n      cloudClient = controlClientCloud;  // temporary - some code needs/uses cloudClient\n      return;\n    }\n\n\n    initCloud();\n    \n    createJettys(numServers, true);\n\n    waitForCollection(cloudClient.getZkStateReader(), DEFAULT_COLLECTION, sliceCount);\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","275019a81d0883a1db4560391b072d1fbe272ec4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","sourceNew":"  @Override\n  protected void createServers(int numServers) throws Exception {\n    \n    System.setProperty(\"collection\", \"control_collection\");\n    String numShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n\n    // we want hashes by default for the control, so set to 1 shard as opposed to leaving unset\n    // System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n\n    File controlJettyDir = TestUtil.createTempDir(getClass().getSimpleName() + \"-controljetty\");\n    setupJettySolrHome(controlJettyDir);\n\n    controlJetty = createJetty(controlJettyDir, testDir + \"/control/data\");  // don't pass shard name... let it default to \"shard1\"\n    System.clearProperty(\"collection\");\n    if(numShards != null) {\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, numShards);\n    } else {\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n\n    if (sliceCount <= 0) {\n      // for now, just create the cloud client for the control if we don't create the normal cloud client.\n      // this can change if more tests need it.\n      controlClientCloud = createCloudClient(\"control_collection\");\n      controlClientCloud.connect();\n      waitForCollection(controlClientCloud.getZkStateReader(), \"control_collection\", 0);\n      // NOTE: we are skipping creation of the chaos monkey by returning here\n      cloudClient = controlClientCloud;  // temporary - some code needs/uses cloudClient\n      return;\n    }\n\n\n    initCloud();\n    \n    createJettys(numServers, checkCreatedVsState).size();\n    \n    int cnt = getTotalReplicas(DEFAULT_COLLECTION);\n    if (cnt > 0) {\n      waitForCollection(cloudClient.getZkStateReader(), DEFAULT_COLLECTION, sliceCount);\n    }\n\n  }\n\n","sourceOld":"  @Override\n  protected void createServers(int numServers) throws Exception {\n    \n    System.setProperty(\"collection\", \"control_collection\");\n    String numShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n\n    // we want hashes by default for the control, so set to 1 shard as opposed to leaving unset\n    // System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n\n    File controlJettyDir = new File(TEMP_DIR,\n            getClass().getName() + \"-controljetty-\" + System.currentTimeMillis());\n    setupJettySolrHome(controlJettyDir);\n\n    controlJetty = createJetty(controlJettyDir, testDir + \"/control/data\");  // don't pass shard name... let it default to \"shard1\"\n    System.clearProperty(\"collection\");\n    if(numShards != null) {\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, numShards);\n    } else {\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n\n    if (sliceCount <= 0) {\n      // for now, just create the cloud client for the control if we don't create the normal cloud client.\n      // this can change if more tests need it.\n      controlClientCloud = createCloudClient(\"control_collection\");\n      controlClientCloud.connect();\n      waitForCollection(controlClientCloud.getZkStateReader(), \"control_collection\", 0);\n      // NOTE: we are skipping creation of the chaos monkey by returning here\n      cloudClient = controlClientCloud;  // temporary - some code needs/uses cloudClient\n      return;\n    }\n\n\n    initCloud();\n    \n    createJettys(numServers, checkCreatedVsState).size();\n    \n    int cnt = getTotalReplicas(DEFAULT_COLLECTION);\n    if (cnt > 0) {\n      waitForCollection(cloudClient.getZkStateReader(), DEFAULT_COLLECTION, sliceCount);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1416f9d09d016a6894cd17e1caac137dad2bba59","date":1395941020,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","sourceNew":"  @Override\n  protected void createServers(int numServers) throws Exception {\n    \n    System.setProperty(\"collection\", \"control_collection\");\n    String numShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n\n    // we want hashes by default for the control, so set to 1 shard as opposed to leaving unset\n    // System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n\n    File controlJettyDir = new File(dataDir,\n            getClass().getName() + \"-controljetty-\" + System.currentTimeMillis());\n    setupJettySolrHome(controlJettyDir);\n\n    controlJetty = createJetty(controlJettyDir, testDir + \"/control/data\");  // don't pass shard name... let it default to \"shard1\"\n    System.clearProperty(\"collection\");\n    if(numShards != null) {\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, numShards);\n    } else {\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n\n    if (sliceCount <= 0) {\n      // for now, just create the cloud client for the control if we don't create the normal cloud client.\n      // this can change if more tests need it.\n      controlClientCloud = createCloudClient(\"control_collection\");\n      controlClientCloud.connect();\n      waitForCollection(controlClientCloud.getZkStateReader(), \"control_collection\", 0);\n      // NOTE: we are skipping creation of the chaos monkey by returning here\n      cloudClient = controlClientCloud;  // temporary - some code needs/uses cloudClient\n      return;\n    }\n\n\n    initCloud();\n    \n    createJettys(numServers, checkCreatedVsState).size();\n    \n    int cnt = getTotalReplicas(DEFAULT_COLLECTION);\n    if (cnt > 0) {\n      waitForCollection(cloudClient.getZkStateReader(), DEFAULT_COLLECTION, sliceCount);\n    }\n\n  }\n\n","sourceOld":"  @Override\n  protected void createServers(int numServers) throws Exception {\n    \n    System.setProperty(\"collection\", \"control_collection\");\n    String numShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n\n    // we want hashes by default for the control, so set to 1 shard as opposed to leaving unset\n    // System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n\n    File controlJettyDir = new File(TEMP_DIR,\n            getClass().getName() + \"-controljetty-\" + System.currentTimeMillis());\n    setupJettySolrHome(controlJettyDir);\n\n    controlJetty = createJetty(controlJettyDir, testDir + \"/control/data\");  // don't pass shard name... let it default to \"shard1\"\n    System.clearProperty(\"collection\");\n    if(numShards != null) {\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, numShards);\n    } else {\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n\n    if (sliceCount <= 0) {\n      // for now, just create the cloud client for the control if we don't create the normal cloud client.\n      // this can change if more tests need it.\n      controlClientCloud = createCloudClient(\"control_collection\");\n      controlClientCloud.connect();\n      waitForCollection(controlClientCloud.getZkStateReader(), \"control_collection\", 0);\n      // NOTE: we are skipping creation of the chaos monkey by returning here\n      cloudClient = controlClientCloud;  // temporary - some code needs/uses cloudClient\n      return;\n    }\n\n\n    initCloud();\n    \n    createJettys(numServers, checkCreatedVsState).size();\n    \n    int cnt = getTotalReplicas(DEFAULT_COLLECTION);\n    if (cnt > 0) {\n      waitForCollection(cloudClient.getZkStateReader(), DEFAULT_COLLECTION, sliceCount);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","sourceNew":"  @Override\n  protected void createServers(int numServers) throws Exception {\n    \n    System.setProperty(\"collection\", \"control_collection\");\n    String numShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n\n    // we want hashes by default for the control, so set to 1 shard as opposed to leaving unset\n    // System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n\n    File controlJettyDir = createTempDir();\n    setupJettySolrHome(controlJettyDir);\n\n    controlJetty = createJetty(controlJettyDir, testDir + \"/control/data\");  // don't pass shard name... let it default to \"shard1\"\n    System.clearProperty(\"collection\");\n    if(numShards != null) {\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, numShards);\n    } else {\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n\n    if (sliceCount <= 0) {\n      // for now, just create the cloud client for the control if we don't create the normal cloud client.\n      // this can change if more tests need it.\n      controlClientCloud = createCloudClient(\"control_collection\");\n      controlClientCloud.connect();\n      waitForCollection(controlClientCloud.getZkStateReader(), \"control_collection\", 0);\n      // NOTE: we are skipping creation of the chaos monkey by returning here\n      cloudClient = controlClientCloud;  // temporary - some code needs/uses cloudClient\n      return;\n    }\n\n\n    initCloud();\n    \n    createJettys(numServers, checkCreatedVsState).size();\n    \n    int cnt = getTotalReplicas(DEFAULT_COLLECTION);\n    if (cnt > 0) {\n      waitForCollection(cloudClient.getZkStateReader(), DEFAULT_COLLECTION, sliceCount);\n    }\n\n  }\n\n","sourceOld":"  @Override\n  protected void createServers(int numServers) throws Exception {\n    \n    System.setProperty(\"collection\", \"control_collection\");\n    String numShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n\n    // we want hashes by default for the control, so set to 1 shard as opposed to leaving unset\n    // System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n\n    File controlJettyDir = TestUtil.createTempDir(getClass().getSimpleName() + \"-controljetty\");\n    setupJettySolrHome(controlJettyDir);\n\n    controlJetty = createJetty(controlJettyDir, testDir + \"/control/data\");  // don't pass shard name... let it default to \"shard1\"\n    System.clearProperty(\"collection\");\n    if(numShards != null) {\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, numShards);\n    } else {\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n\n    if (sliceCount <= 0) {\n      // for now, just create the cloud client for the control if we don't create the normal cloud client.\n      // this can change if more tests need it.\n      controlClientCloud = createCloudClient(\"control_collection\");\n      controlClientCloud.connect();\n      waitForCollection(controlClientCloud.getZkStateReader(), \"control_collection\", 0);\n      // NOTE: we are skipping creation of the chaos monkey by returning here\n      cloudClient = controlClientCloud;  // temporary - some code needs/uses cloudClient\n      return;\n    }\n\n\n    initCloud();\n    \n    createJettys(numServers, checkCreatedVsState).size();\n    \n    int cnt = getTotalReplicas(DEFAULT_COLLECTION);\n    if (cnt > 0) {\n      waitForCollection(cloudClient.getZkStateReader(), DEFAULT_COLLECTION, sliceCount);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","sourceNew":"  @Override\n  protected void createServers(int numServers) throws Exception {\n    \n    System.setProperty(\"collection\", \"control_collection\");\n    String numShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n\n    // we want hashes by default for the control, so set to 1 shard as opposed to leaving unset\n    // System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n\n    File controlJettyDir = createTempDir();\n    setupJettySolrHome(controlJettyDir);\n\n    controlJetty = createJetty(controlJettyDir, testDir + \"/control/data\");  // don't pass shard name... let it default to \"shard1\"\n    System.clearProperty(\"collection\");\n    if(numShards != null) {\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, numShards);\n    } else {\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n\n    if (sliceCount <= 0) {\n      // for now, just create the cloud client for the control if we don't create the normal cloud client.\n      // this can change if more tests need it.\n      controlClientCloud = createCloudClient(\"control_collection\");\n      controlClientCloud.connect();\n      waitForCollection(controlClientCloud.getZkStateReader(), \"control_collection\", 0);\n      // NOTE: we are skipping creation of the chaos monkey by returning here\n      cloudClient = controlClientCloud;  // temporary - some code needs/uses cloudClient\n      return;\n    }\n\n\n    initCloud();\n    \n    createJettys(numServers, checkCreatedVsState).size();\n    \n    int cnt = getTotalReplicas(DEFAULT_COLLECTION);\n    if (cnt > 0) {\n      waitForCollection(cloudClient.getZkStateReader(), DEFAULT_COLLECTION, sliceCount);\n    }\n\n  }\n\n","sourceOld":"  @Override\n  protected void createServers(int numServers) throws Exception {\n    \n    System.setProperty(\"collection\", \"control_collection\");\n    String numShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n\n    // we want hashes by default for the control, so set to 1 shard as opposed to leaving unset\n    // System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n\n    File controlJettyDir = new File(dataDir,\n            getClass().getName() + \"-controljetty-\" + System.currentTimeMillis());\n    setupJettySolrHome(controlJettyDir);\n\n    controlJetty = createJetty(controlJettyDir, testDir + \"/control/data\");  // don't pass shard name... let it default to \"shard1\"\n    System.clearProperty(\"collection\");\n    if(numShards != null) {\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, numShards);\n    } else {\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n\n    if (sliceCount <= 0) {\n      // for now, just create the cloud client for the control if we don't create the normal cloud client.\n      // this can change if more tests need it.\n      controlClientCloud = createCloudClient(\"control_collection\");\n      controlClientCloud.connect();\n      waitForCollection(controlClientCloud.getZkStateReader(), \"control_collection\", 0);\n      // NOTE: we are skipping creation of the chaos monkey by returning here\n      cloudClient = controlClientCloud;  // temporary - some code needs/uses cloudClient\n      return;\n    }\n\n\n    initCloud();\n    \n    createJettys(numServers, checkCreatedVsState).size();\n    \n    int cnt = getTotalReplicas(DEFAULT_COLLECTION);\n    if (cnt > 0) {\n      waitForCollection(cloudClient.getZkStateReader(), DEFAULT_COLLECTION, sliceCount);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ad7bdba3e91cf3373cda2e52239cb761fc0b452","date":1408019547,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","sourceNew":"  @Override\n  protected void createServers(int numServers) throws Exception {\n    \n    System.setProperty(\"collection\", \"control_collection\");\n\n    // we want hashes by default for the control, so set to 1 shard as opposed to leaving unset\n    String oldNumShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n    \n    try {\n      \n      File controlJettyDir = createTempDir();\n      setupJettySolrHome(controlJettyDir);\n      \n      controlJetty = createJetty(controlJettyDir, useJettyDataDir ? getDataDir(testDir\n          + \"/control/data\") : null); // don't pass shard name... let it default to\n                               // \"shard1\"\n\n\n      controlClient = createNewSolrServer(controlJetty.getLocalPort());\n      \n      if (sliceCount <= 0) {\n        // for now, just create the cloud client for the control if we don't\n        // create the normal cloud client.\n        // this can change if more tests need it.\n        controlClientCloud = createCloudClient(\"control_collection\");\n        controlClientCloud.connect();\n        waitForCollection(controlClientCloud.getZkStateReader(),\n            \"control_collection\", 0);\n        // NOTE: we are skipping creation of the chaos monkey by returning here\n        cloudClient = controlClientCloud; // temporary - some code needs/uses\n                                          // cloudClient\n        return;\n      }\n      \n    } finally {\n      System.clearProperty(\"collection\");\n      if (oldNumShards != null) {\n        System.setProperty(ZkStateReader.NUM_SHARDS_PROP, oldNumShards);\n      } else {\n        System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      }\n    }\n\n\n    initCloud();\n    \n    createJettys(numServers, checkCreatedVsState).size();\n    \n    int cnt = getTotalReplicas(DEFAULT_COLLECTION);\n    if (cnt > 0) {\n      waitForCollection(cloudClient.getZkStateReader(), DEFAULT_COLLECTION, sliceCount);\n    }\n\n  }\n\n","sourceOld":"  @Override\n  protected void createServers(int numServers) throws Exception {\n    \n    System.setProperty(\"collection\", \"control_collection\");\n    String numShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n\n    // we want hashes by default for the control, so set to 1 shard as opposed to leaving unset\n    // System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n\n    File controlJettyDir = createTempDir();\n    setupJettySolrHome(controlJettyDir);\n\n    controlJetty = createJetty(controlJettyDir, testDir + \"/control/data\");  // don't pass shard name... let it default to \"shard1\"\n    System.clearProperty(\"collection\");\n    if(numShards != null) {\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, numShards);\n    } else {\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    controlClient = createNewSolrServer(controlJetty.getLocalPort());\n\n    if (sliceCount <= 0) {\n      // for now, just create the cloud client for the control if we don't create the normal cloud client.\n      // this can change if more tests need it.\n      controlClientCloud = createCloudClient(\"control_collection\");\n      controlClientCloud.connect();\n      waitForCollection(controlClientCloud.getZkStateReader(), \"control_collection\", 0);\n      // NOTE: we are skipping creation of the chaos monkey by returning here\n      cloudClient = controlClientCloud;  // temporary - some code needs/uses cloudClient\n      return;\n    }\n\n\n    initCloud();\n    \n    createJettys(numServers, checkCreatedVsState).size();\n    \n    int cnt = getTotalReplicas(DEFAULT_COLLECTION);\n    if (cnt > 0) {\n      waitForCollection(cloudClient.getZkStateReader(), DEFAULT_COLLECTION, sliceCount);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","sourceNew":"  @Override\n  protected void createServers(int numServers) throws Exception {\n    \n    System.setProperty(\"collection\", \"control_collection\");\n\n    // we want hashes by default for the control, so set to 1 shard as opposed to leaving unset\n    String oldNumShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n    \n    try {\n      \n      File controlJettyDir = createTempDir().toFile();\n      setupJettySolrHome(controlJettyDir);\n      \n      controlJetty = createJetty(controlJettyDir, useJettyDataDir ? getDataDir(testDir\n          + \"/control/data\") : null); // don't pass shard name... let it default to\n                               // \"shard1\"\n\n\n      controlClient = createNewSolrServer(controlJetty.getLocalPort());\n      \n      if (sliceCount <= 0) {\n        // for now, just create the cloud client for the control if we don't\n        // create the normal cloud client.\n        // this can change if more tests need it.\n        controlClientCloud = createCloudClient(\"control_collection\");\n        controlClientCloud.connect();\n        waitForCollection(controlClientCloud.getZkStateReader(),\n            \"control_collection\", 0);\n        // NOTE: we are skipping creation of the chaos monkey by returning here\n        cloudClient = controlClientCloud; // temporary - some code needs/uses\n                                          // cloudClient\n        return;\n      }\n      \n    } finally {\n      System.clearProperty(\"collection\");\n      if (oldNumShards != null) {\n        System.setProperty(ZkStateReader.NUM_SHARDS_PROP, oldNumShards);\n      } else {\n        System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      }\n    }\n\n\n    initCloud();\n    \n    createJettys(numServers, checkCreatedVsState).size();\n    \n    int cnt = getTotalReplicas(DEFAULT_COLLECTION);\n    if (cnt > 0) {\n      waitForCollection(cloudClient.getZkStateReader(), DEFAULT_COLLECTION, sliceCount);\n    }\n\n  }\n\n","sourceOld":"  @Override\n  protected void createServers(int numServers) throws Exception {\n    \n    System.setProperty(\"collection\", \"control_collection\");\n\n    // we want hashes by default for the control, so set to 1 shard as opposed to leaving unset\n    String oldNumShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n    \n    try {\n      \n      File controlJettyDir = createTempDir();\n      setupJettySolrHome(controlJettyDir);\n      \n      controlJetty = createJetty(controlJettyDir, useJettyDataDir ? getDataDir(testDir\n          + \"/control/data\") : null); // don't pass shard name... let it default to\n                               // \"shard1\"\n\n\n      controlClient = createNewSolrServer(controlJetty.getLocalPort());\n      \n      if (sliceCount <= 0) {\n        // for now, just create the cloud client for the control if we don't\n        // create the normal cloud client.\n        // this can change if more tests need it.\n        controlClientCloud = createCloudClient(\"control_collection\");\n        controlClientCloud.connect();\n        waitForCollection(controlClientCloud.getZkStateReader(),\n            \"control_collection\", 0);\n        // NOTE: we are skipping creation of the chaos monkey by returning here\n        cloudClient = controlClientCloud; // temporary - some code needs/uses\n                                          // cloudClient\n        return;\n      }\n      \n    } finally {\n      System.clearProperty(\"collection\");\n      if (oldNumShards != null) {\n        System.setProperty(ZkStateReader.NUM_SHARDS_PROP, oldNumShards);\n      } else {\n        System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      }\n    }\n\n\n    initCloud();\n    \n    createJettys(numServers, checkCreatedVsState).size();\n    \n    int cnt = getTotalReplicas(DEFAULT_COLLECTION);\n    if (cnt > 0) {\n      waitForCollection(cloudClient.getZkStateReader(), DEFAULT_COLLECTION, sliceCount);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","sourceNew":"  @Override\n  protected void createServers(int numServers) throws Exception {\n    \n    System.setProperty(\"collection\", \"control_collection\");\n\n    // we want hashes by default for the control, so set to 1 shard as opposed to leaving unset\n    String oldNumShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n    \n    try {\n      \n      File controlJettyDir = createTempDir().toFile();\n      setupJettySolrHome(controlJettyDir);\n      \n      controlJetty = createJetty(controlJettyDir, useJettyDataDir ? getDataDir(testDir\n          + \"/control/data\") : null); // don't pass shard name... let it default to\n                               // \"shard1\"\n\n\n      controlClient = createNewSolrClient(controlJetty.getLocalPort());\n      \n      if (sliceCount <= 0) {\n        // for now, just create the cloud client for the control if we don't\n        // create the normal cloud client.\n        // this can change if more tests need it.\n        controlClientCloud = createCloudClient(\"control_collection\");\n        controlClientCloud.connect();\n        waitForCollection(controlClientCloud.getZkStateReader(),\n            \"control_collection\", 0);\n        // NOTE: we are skipping creation of the chaos monkey by returning here\n        cloudClient = controlClientCloud; // temporary - some code needs/uses\n                                          // cloudClient\n        return;\n      }\n      \n    } finally {\n      System.clearProperty(\"collection\");\n      if (oldNumShards != null) {\n        System.setProperty(ZkStateReader.NUM_SHARDS_PROP, oldNumShards);\n      } else {\n        System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      }\n    }\n\n\n    initCloud();\n    \n    createJettys(numServers, checkCreatedVsState).size();\n    \n    int cnt = getTotalReplicas(DEFAULT_COLLECTION);\n    if (cnt > 0) {\n      waitForCollection(cloudClient.getZkStateReader(), DEFAULT_COLLECTION, sliceCount);\n    }\n\n  }\n\n","sourceOld":"  @Override\n  protected void createServers(int numServers) throws Exception {\n    \n    System.setProperty(\"collection\", \"control_collection\");\n\n    // we want hashes by default for the control, so set to 1 shard as opposed to leaving unset\n    String oldNumShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n    \n    try {\n      \n      File controlJettyDir = createTempDir().toFile();\n      setupJettySolrHome(controlJettyDir);\n      \n      controlJetty = createJetty(controlJettyDir, useJettyDataDir ? getDataDir(testDir\n          + \"/control/data\") : null); // don't pass shard name... let it default to\n                               // \"shard1\"\n\n\n      controlClient = createNewSolrServer(controlJetty.getLocalPort());\n      \n      if (sliceCount <= 0) {\n        // for now, just create the cloud client for the control if we don't\n        // create the normal cloud client.\n        // this can change if more tests need it.\n        controlClientCloud = createCloudClient(\"control_collection\");\n        controlClientCloud.connect();\n        waitForCollection(controlClientCloud.getZkStateReader(),\n            \"control_collection\", 0);\n        // NOTE: we are skipping creation of the chaos monkey by returning here\n        cloudClient = controlClientCloud; // temporary - some code needs/uses\n                                          // cloudClient\n        return;\n      }\n      \n    } finally {\n      System.clearProperty(\"collection\");\n      if (oldNumShards != null) {\n        System.setProperty(ZkStateReader.NUM_SHARDS_PROP, oldNumShards);\n      } else {\n        System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      }\n    }\n\n\n    initCloud();\n    \n    createJettys(numServers, checkCreatedVsState).size();\n    \n    int cnt = getTotalReplicas(DEFAULT_COLLECTION);\n    if (cnt > 0) {\n      waitForCollection(cloudClient.getZkStateReader(), DEFAULT_COLLECTION, sliceCount);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","sourceNew":"  @Override\n  protected void createServers(int numServers) throws Exception {\n    \n    System.setProperty(\"collection\", \"control_collection\");\n\n    // we want hashes by default for the control, so set to 1 shard as opposed to leaving unset\n    String oldNumShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n    \n    try {\n      \n      File controlJettyDir = createTempDir(\"control\").toFile();\n      setupJettySolrHome(controlJettyDir);\n\n      System.setProperty(\"coreRootDirectory\", controlJettyDir.toPath().resolve(\"cores\").toString());\n      controlJetty = createJetty(controlJettyDir, useJettyDataDir ? getDataDir(testDir\n          + \"/control/data\") : null); // don't pass shard name... let it default to\n                               // \"shard1\"\n\n\n      controlClient = createNewSolrClient(controlJetty.getLocalPort());\n      \n      if (sliceCount <= 0) {\n        // for now, just create the cloud client for the control if we don't\n        // create the normal cloud client.\n        // this can change if more tests need it.\n        controlClientCloud = createCloudClient(\"control_collection\");\n        controlClientCloud.connect();\n        waitForCollection(controlClientCloud.getZkStateReader(),\n            \"control_collection\", 0);\n        // NOTE: we are skipping creation of the chaos monkey by returning here\n        cloudClient = controlClientCloud; // temporary - some code needs/uses\n                                          // cloudClient\n        return;\n      }\n      \n    } finally {\n      System.clearProperty(\"collection\");\n      if (oldNumShards != null) {\n        System.setProperty(ZkStateReader.NUM_SHARDS_PROP, oldNumShards);\n      } else {\n        System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      }\n    }\n\n\n    initCloud();\n    \n    createJettys(numServers, checkCreatedVsState).size();\n    \n    int cnt = getTotalReplicas(DEFAULT_COLLECTION);\n    if (cnt > 0) {\n      waitForCollection(cloudClient.getZkStateReader(), DEFAULT_COLLECTION, sliceCount);\n    }\n\n  }\n\n","sourceOld":"  @Override\n  protected void createServers(int numServers) throws Exception {\n    \n    System.setProperty(\"collection\", \"control_collection\");\n\n    // we want hashes by default for the control, so set to 1 shard as opposed to leaving unset\n    String oldNumShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n    \n    try {\n      \n      File controlJettyDir = createTempDir().toFile();\n      setupJettySolrHome(controlJettyDir);\n      \n      controlJetty = createJetty(controlJettyDir, useJettyDataDir ? getDataDir(testDir\n          + \"/control/data\") : null); // don't pass shard name... let it default to\n                               // \"shard1\"\n\n\n      controlClient = createNewSolrClient(controlJetty.getLocalPort());\n      \n      if (sliceCount <= 0) {\n        // for now, just create the cloud client for the control if we don't\n        // create the normal cloud client.\n        // this can change if more tests need it.\n        controlClientCloud = createCloudClient(\"control_collection\");\n        controlClientCloud.connect();\n        waitForCollection(controlClientCloud.getZkStateReader(),\n            \"control_collection\", 0);\n        // NOTE: we are skipping creation of the chaos monkey by returning here\n        cloudClient = controlClientCloud; // temporary - some code needs/uses\n                                          // cloudClient\n        return;\n      }\n      \n    } finally {\n      System.clearProperty(\"collection\");\n      if (oldNumShards != null) {\n        System.setProperty(ZkStateReader.NUM_SHARDS_PROP, oldNumShards);\n      } else {\n        System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      }\n    }\n\n\n    initCloud();\n    \n    createJettys(numServers, checkCreatedVsState).size();\n    \n    int cnt = getTotalReplicas(DEFAULT_COLLECTION);\n    if (cnt > 0) {\n      waitForCollection(cloudClient.getZkStateReader(), DEFAULT_COLLECTION, sliceCount);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","sourceNew":"  @Override\n  protected void createServers(int numServers) throws Exception {\n\n    System.setProperty(\"collection\", \"control_collection\");\n\n    // we want hashes by default for the control, so set to 1 shard as opposed to leaving unset\n    String oldNumShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n\n    try {\n\n      File controlJettyDir = createTempDir(\"control\").toFile();\n      setupJettySolrHome(controlJettyDir);\n\n      System.setProperty(\"coreRootDirectory\", controlJettyDir.toPath().resolve(\"cores\").toString());\n      controlJetty = createJetty(controlJettyDir, useJettyDataDir ? getDataDir(testDir\n          + \"/control/data\") : null); // don't pass shard name... let it default to\n                               // \"shard1\"\n\n\n      controlClient = createNewSolrClient(controlJetty.getLocalPort());\n      \n      if (sliceCount <= 0) {\n        // for now, just create the cloud client for the control if we don't\n        // create the normal cloud client.\n        // this can change if more tests need it.\n        controlClientCloud = createCloudClient(\"control_collection\");\n        controlClientCloud.connect();\n        waitForCollection(controlClientCloud.getZkStateReader(),\n            \"control_collection\", 0);\n        // NOTE: we are skipping creation of the chaos monkey by returning here\n        cloudClient = controlClientCloud; // temporary - some code needs/uses\n                                          // cloudClient\n        return;\n      }\n\n    } finally {\n      System.clearProperty(\"collection\");\n      if (oldNumShards != null) {\n        System.setProperty(ZkStateReader.NUM_SHARDS_PROP, oldNumShards);\n      } else {\n        System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      }\n    }\n\n\n    initCloud();\n\n    createJettys(numServers, checkCreatedVsState).size();\n\n    int cnt = getTotalReplicas(DEFAULT_COLLECTION);\n    if (cnt > 0) {\n      waitForCollection(cloudClient.getZkStateReader(), DEFAULT_COLLECTION, sliceCount);\n    }\n\n  }\n\n","sourceOld":"  @Override\n  protected void createServers(int numServers) throws Exception {\n    \n    System.setProperty(\"collection\", \"control_collection\");\n\n    // we want hashes by default for the control, so set to 1 shard as opposed to leaving unset\n    String oldNumShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n    \n    try {\n      \n      File controlJettyDir = createTempDir(\"control\").toFile();\n      setupJettySolrHome(controlJettyDir);\n\n      System.setProperty(\"coreRootDirectory\", controlJettyDir.toPath().resolve(\"cores\").toString());\n      controlJetty = createJetty(controlJettyDir, useJettyDataDir ? getDataDir(testDir\n          + \"/control/data\") : null); // don't pass shard name... let it default to\n                               // \"shard1\"\n\n\n      controlClient = createNewSolrClient(controlJetty.getLocalPort());\n      \n      if (sliceCount <= 0) {\n        // for now, just create the cloud client for the control if we don't\n        // create the normal cloud client.\n        // this can change if more tests need it.\n        controlClientCloud = createCloudClient(\"control_collection\");\n        controlClientCloud.connect();\n        waitForCollection(controlClientCloud.getZkStateReader(),\n            \"control_collection\", 0);\n        // NOTE: we are skipping creation of the chaos monkey by returning here\n        cloudClient = controlClientCloud; // temporary - some code needs/uses\n                                          // cloudClient\n        return;\n      }\n      \n    } finally {\n      System.clearProperty(\"collection\");\n      if (oldNumShards != null) {\n        System.setProperty(ZkStateReader.NUM_SHARDS_PROP, oldNumShards);\n      } else {\n        System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      }\n    }\n\n\n    initCloud();\n    \n    createJettys(numServers, checkCreatedVsState).size();\n    \n    int cnt = getTotalReplicas(DEFAULT_COLLECTION);\n    if (cnt > 0) {\n      waitForCollection(cloudClient.getZkStateReader(), DEFAULT_COLLECTION, sliceCount);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9bc766d645fa848f86c381c7f6acf2c881c99399","date":1425549246,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","sourceNew":"  @Override\n  protected void createServers(int numServers) throws Exception {\n\n    System.setProperty(\"collection\", \"control_collection\");\n\n    // we want hashes by default for the control, so set to 1 shard as opposed to leaving unset\n    String oldNumShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n\n    try {\n\n      File controlJettyDir = createTempDir(\"control\").toFile();\n      setupJettySolrHome(controlJettyDir);\n\n      controlJetty = createJetty(controlJettyDir, useJettyDataDir ? getDataDir(testDir\n          + \"/control/data\") : null); // don't pass shard name... let it default to\n                               // \"shard1\"\n\n\n      controlClient = createNewSolrClient(controlJetty.getLocalPort());\n      \n      if (sliceCount <= 0) {\n        // for now, just create the cloud client for the control if we don't\n        // create the normal cloud client.\n        // this can change if more tests need it.\n        controlClientCloud = createCloudClient(\"control_collection\");\n        controlClientCloud.connect();\n        waitForCollection(controlClientCloud.getZkStateReader(),\n            \"control_collection\", 0);\n        // NOTE: we are skipping creation of the chaos monkey by returning here\n        cloudClient = controlClientCloud; // temporary - some code needs/uses\n                                          // cloudClient\n        return;\n      }\n\n    } finally {\n      System.clearProperty(\"collection\");\n      if (oldNumShards != null) {\n        System.setProperty(ZkStateReader.NUM_SHARDS_PROP, oldNumShards);\n      } else {\n        System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      }\n    }\n\n\n    initCloud();\n\n    createJettys(numServers, checkCreatedVsState).size();\n\n    int cnt = getTotalReplicas(DEFAULT_COLLECTION);\n    if (cnt > 0) {\n      waitForCollection(cloudClient.getZkStateReader(), DEFAULT_COLLECTION, sliceCount);\n    }\n\n  }\n\n","sourceOld":"  @Override\n  protected void createServers(int numServers) throws Exception {\n\n    System.setProperty(\"collection\", \"control_collection\");\n\n    // we want hashes by default for the control, so set to 1 shard as opposed to leaving unset\n    String oldNumShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n\n    try {\n\n      File controlJettyDir = createTempDir(\"control\").toFile();\n      setupJettySolrHome(controlJettyDir);\n\n      System.setProperty(\"coreRootDirectory\", controlJettyDir.toPath().resolve(\"cores\").toString());\n      controlJetty = createJetty(controlJettyDir, useJettyDataDir ? getDataDir(testDir\n          + \"/control/data\") : null); // don't pass shard name... let it default to\n                               // \"shard1\"\n\n\n      controlClient = createNewSolrClient(controlJetty.getLocalPort());\n      \n      if (sliceCount <= 0) {\n        // for now, just create the cloud client for the control if we don't\n        // create the normal cloud client.\n        // this can change if more tests need it.\n        controlClientCloud = createCloudClient(\"control_collection\");\n        controlClientCloud.connect();\n        waitForCollection(controlClientCloud.getZkStateReader(),\n            \"control_collection\", 0);\n        // NOTE: we are skipping creation of the chaos monkey by returning here\n        cloudClient = controlClientCloud; // temporary - some code needs/uses\n                                          // cloudClient\n        return;\n      }\n\n    } finally {\n      System.clearProperty(\"collection\");\n      if (oldNumShards != null) {\n        System.setProperty(ZkStateReader.NUM_SHARDS_PROP, oldNumShards);\n      } else {\n        System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      }\n    }\n\n\n    initCloud();\n\n    createJettys(numServers, checkCreatedVsState).size();\n\n    int cnt = getTotalReplicas(DEFAULT_COLLECTION);\n    if (cnt > 0) {\n      waitForCollection(cloudClient.getZkStateReader(), DEFAULT_COLLECTION, sliceCount);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","sourceNew":"  @Override\n  protected void createServers(int numServers) throws Exception {\n\n    System.setProperty(\"collection\", \"control_collection\");\n\n    // we want hashes by default for the control, so set to 1 shard as opposed to leaving unset\n    String oldNumShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n\n    try {\n\n      File controlJettyDir = createTempDir(\"control\").toFile();\n      setupJettySolrHome(controlJettyDir);\n\n      controlJetty = createJetty(controlJettyDir, useJettyDataDir ? getDataDir(testDir\n          + \"/control/data\") : null); // don't pass shard name... let it default to\n                               // \"shard1\"\n\n\n      controlClient = createNewSolrClient(controlJetty.getLocalPort());\n      \n      if (sliceCount <= 0) {\n        // for now, just create the cloud client for the control if we don't\n        // create the normal cloud client.\n        // this can change if more tests need it.\n        controlClientCloud = createCloudClient(\"control_collection\");\n        controlClientCloud.connect();\n        waitForCollection(controlClientCloud.getZkStateReader(),\n            \"control_collection\", 0);\n        // NOTE: we are skipping creation of the chaos monkey by returning here\n        cloudClient = controlClientCloud; // temporary - some code needs/uses\n                                          // cloudClient\n        return;\n      }\n\n    } finally {\n      System.clearProperty(\"collection\");\n      if (oldNumShards != null) {\n        System.setProperty(ZkStateReader.NUM_SHARDS_PROP, oldNumShards);\n      } else {\n        System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      }\n    }\n\n\n    initCloud();\n\n    createJettys(numServers, checkCreatedVsState).size();\n\n    int cnt = getTotalReplicas(DEFAULT_COLLECTION);\n    if (cnt > 0) {\n      waitForCollection(cloudClient.getZkStateReader(), DEFAULT_COLLECTION, sliceCount);\n    }\n\n  }\n\n","sourceOld":"  @Override\n  protected void createServers(int numServers) throws Exception {\n\n    System.setProperty(\"collection\", \"control_collection\");\n\n    // we want hashes by default for the control, so set to 1 shard as opposed to leaving unset\n    String oldNumShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n\n    try {\n\n      File controlJettyDir = createTempDir(\"control\").toFile();\n      setupJettySolrHome(controlJettyDir);\n\n      System.setProperty(\"coreRootDirectory\", controlJettyDir.toPath().resolve(\"cores\").toString());\n      controlJetty = createJetty(controlJettyDir, useJettyDataDir ? getDataDir(testDir\n          + \"/control/data\") : null); // don't pass shard name... let it default to\n                               // \"shard1\"\n\n\n      controlClient = createNewSolrClient(controlJetty.getLocalPort());\n      \n      if (sliceCount <= 0) {\n        // for now, just create the cloud client for the control if we don't\n        // create the normal cloud client.\n        // this can change if more tests need it.\n        controlClientCloud = createCloudClient(\"control_collection\");\n        controlClientCloud.connect();\n        waitForCollection(controlClientCloud.getZkStateReader(),\n            \"control_collection\", 0);\n        // NOTE: we are skipping creation of the chaos monkey by returning here\n        cloudClient = controlClientCloud; // temporary - some code needs/uses\n                                          // cloudClient\n        return;\n      }\n\n    } finally {\n      System.clearProperty(\"collection\");\n      if (oldNumShards != null) {\n        System.setProperty(ZkStateReader.NUM_SHARDS_PROP, oldNumShards);\n      } else {\n        System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      }\n    }\n\n\n    initCloud();\n\n    createJettys(numServers, checkCreatedVsState).size();\n\n    int cnt = getTotalReplicas(DEFAULT_COLLECTION);\n    if (cnt > 0) {\n      waitForCollection(cloudClient.getZkStateReader(), DEFAULT_COLLECTION, sliceCount);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"275019a81d0883a1db4560391b072d1fbe272ec4","date":1432741049,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","sourceNew":"  @Override\n  protected void createServers(int numServers) throws Exception {\n\n    System.setProperty(\"collection\", \"control_collection\");\n\n    // we want hashes by default for the control, so set to 1 shard as opposed to leaving unset\n    String oldNumShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n\n    try {\n\n      File controlJettyDir = createTempDir(\"control\").toFile();\n      setupJettySolrHome(controlJettyDir);\n\n      controlJetty = createJetty(controlJettyDir, useJettyDataDir ? getDataDir(testDir\n          + \"/control/data\") : null); // don't pass shard name... let it default to\n                               // \"shard1\"\n\n\n      controlClient = createNewSolrClient(controlJetty.getLocalPort());\n      \n      if (sliceCount <= 0) {\n        // for now, just create the cloud client for the control if we don't\n        // create the normal cloud client.\n        // this can change if more tests need it.\n        controlClientCloud = createCloudClient(\"control_collection\");\n        controlClientCloud.connect();\n        waitForCollection(controlClientCloud.getZkStateReader(),\n            \"control_collection\", 0);\n        // NOTE: we are skipping creation of the chaos monkey by returning here\n        cloudClient = controlClientCloud; // temporary - some code needs/uses\n                                          // cloudClient\n        return;\n      }\n\n    } finally {\n      System.clearProperty(\"collection\");\n      if (oldNumShards != null) {\n        System.setProperty(ZkStateReader.NUM_SHARDS_PROP, oldNumShards);\n      } else {\n        System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      }\n    }\n\n\n    initCloud();\n\n    createJettys(numServers).size();\n\n    int cnt = getTotalReplicas(DEFAULT_COLLECTION);\n    if (cnt > 0) {\n      waitForCollection(cloudClient.getZkStateReader(), DEFAULT_COLLECTION, sliceCount);\n    }\n\n  }\n\n","sourceOld":"  @Override\n  protected void createServers(int numServers) throws Exception {\n\n    System.setProperty(\"collection\", \"control_collection\");\n\n    // we want hashes by default for the control, so set to 1 shard as opposed to leaving unset\n    String oldNumShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n\n    try {\n\n      File controlJettyDir = createTempDir(\"control\").toFile();\n      setupJettySolrHome(controlJettyDir);\n\n      controlJetty = createJetty(controlJettyDir, useJettyDataDir ? getDataDir(testDir\n          + \"/control/data\") : null); // don't pass shard name... let it default to\n                               // \"shard1\"\n\n\n      controlClient = createNewSolrClient(controlJetty.getLocalPort());\n      \n      if (sliceCount <= 0) {\n        // for now, just create the cloud client for the control if we don't\n        // create the normal cloud client.\n        // this can change if more tests need it.\n        controlClientCloud = createCloudClient(\"control_collection\");\n        controlClientCloud.connect();\n        waitForCollection(controlClientCloud.getZkStateReader(),\n            \"control_collection\", 0);\n        // NOTE: we are skipping creation of the chaos monkey by returning here\n        cloudClient = controlClientCloud; // temporary - some code needs/uses\n                                          // cloudClient\n        return;\n      }\n\n    } finally {\n      System.clearProperty(\"collection\");\n      if (oldNumShards != null) {\n        System.setProperty(ZkStateReader.NUM_SHARDS_PROP, oldNumShards);\n      } else {\n        System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      }\n    }\n\n\n    initCloud();\n\n    createJettys(numServers, checkCreatedVsState).size();\n\n    int cnt = getTotalReplicas(DEFAULT_COLLECTION);\n    if (cnt > 0) {\n      waitForCollection(cloudClient.getZkStateReader(), DEFAULT_COLLECTION, sliceCount);\n    }\n\n  }\n\n","bugFix":["4bc0d7d47c55a6d5319ba7d7ad8a9ae9c7a4d9dd"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"234afba21d42e6c527535c6aa11baba09a4771f3","date":1432825127,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","sourceNew":"  @Override\n  protected void createServers(int numServers) throws Exception {\n\n    System.setProperty(\"collection\", \"control_collection\");\n\n    // we want hashes by default for the control, so set to 1 shard as opposed to leaving unset\n    String oldNumShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n\n    try {\n\n      File controlJettyDir = createTempDir(\"control\").toFile();\n      setupJettySolrHome(controlJettyDir);\n\n      controlJetty = createJetty(controlJettyDir, useJettyDataDir ? getDataDir(testDir\n          + \"/control/data\") : null); // don't pass shard name... let it default to\n                               // \"shard1\"\n\n\n      controlClient = createNewSolrClient(controlJetty.getLocalPort());\n      \n      if (sliceCount <= 0) {\n        // for now, just create the cloud client for the control if we don't\n        // create the normal cloud client.\n        // this can change if more tests need it.\n        controlClientCloud = createCloudClient(\"control_collection\");\n        controlClientCloud.connect();\n        waitForCollection(controlClientCloud.getZkStateReader(),\n            \"control_collection\", 0);\n        // NOTE: we are skipping creation of the chaos monkey by returning here\n        cloudClient = controlClientCloud; // temporary - some code needs/uses\n                                          // cloudClient\n        return;\n      }\n\n    } finally {\n      System.clearProperty(\"collection\");\n      if (oldNumShards != null) {\n        System.setProperty(ZkStateReader.NUM_SHARDS_PROP, oldNumShards);\n      } else {\n        System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      }\n    }\n\n\n    initCloud();\n\n    createJettys(numServers);\n\n    int cnt = getTotalReplicas(DEFAULT_COLLECTION);\n    if (cnt > 0) {\n      waitForCollection(cloudClient.getZkStateReader(), DEFAULT_COLLECTION, sliceCount);\n    }\n\n  }\n\n","sourceOld":"  @Override\n  protected void createServers(int numServers) throws Exception {\n\n    System.setProperty(\"collection\", \"control_collection\");\n\n    // we want hashes by default for the control, so set to 1 shard as opposed to leaving unset\n    String oldNumShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n\n    try {\n\n      File controlJettyDir = createTempDir(\"control\").toFile();\n      setupJettySolrHome(controlJettyDir);\n\n      controlJetty = createJetty(controlJettyDir, useJettyDataDir ? getDataDir(testDir\n          + \"/control/data\") : null); // don't pass shard name... let it default to\n                               // \"shard1\"\n\n\n      controlClient = createNewSolrClient(controlJetty.getLocalPort());\n      \n      if (sliceCount <= 0) {\n        // for now, just create the cloud client for the control if we don't\n        // create the normal cloud client.\n        // this can change if more tests need it.\n        controlClientCloud = createCloudClient(\"control_collection\");\n        controlClientCloud.connect();\n        waitForCollection(controlClientCloud.getZkStateReader(),\n            \"control_collection\", 0);\n        // NOTE: we are skipping creation of the chaos monkey by returning here\n        cloudClient = controlClientCloud; // temporary - some code needs/uses\n                                          // cloudClient\n        return;\n      }\n\n    } finally {\n      System.clearProperty(\"collection\");\n      if (oldNumShards != null) {\n        System.setProperty(ZkStateReader.NUM_SHARDS_PROP, oldNumShards);\n      } else {\n        System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      }\n    }\n\n\n    initCloud();\n\n    createJettys(numServers).size();\n\n    int cnt = getTotalReplicas(DEFAULT_COLLECTION);\n    if (cnt > 0) {\n      waitForCollection(cloudClient.getZkStateReader(), DEFAULT_COLLECTION, sliceCount);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9b4296bd51ca61b482138791478afdd0f7d3a3d","date":1498058739,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","sourceNew":"  @Override\n  protected void createServers(int numServers) throws Exception {\n\n    File controlJettyDir = createTempDir(\"control\").toFile();\n    setupJettySolrHome(controlJettyDir);\n    controlJetty = createJetty(controlJettyDir, useJettyDataDir ? getDataDir(testDir\n        + \"/control/data\") : null);\n    try (SolrClient client = createCloudClient(\"control_collection\")) {\n      assertEquals(0, CollectionAdminRequest\n          .createCollection(\"control_collection\", 1, 1)\n          .setCreateNodeSet(controlJetty.getNodeName())\n          .process(client).getStatus());\n      }\n    controlClient = new HttpSolrClient.Builder(controlJetty.getBaseUrl() + \"/control_collection\").build();\n    if (sliceCount <= 0) {\n      // for now, just create the cloud client for the control if we don't\n      // create the normal cloud client.\n      // this can change if more tests need it.\n      controlClientCloud = createCloudClient(\"control_collection\");\n      controlClientCloud.connect();\n      waitForCollection(controlClientCloud.getZkStateReader(),\n          \"control_collection\", 0);\n      // NOTE: we are skipping creation of the chaos monkey by returning here\n      cloudClient = controlClientCloud; // temporary - some code needs/uses\n      // cloudClient\n      return;\n    }\n\n    initCloud();\n\n    createJettys(numServers);\n\n    int cnt = getTotalReplicas(DEFAULT_COLLECTION);\n    if (cnt > 0) {\n      waitForCollection(cloudClient.getZkStateReader(), DEFAULT_COLLECTION, sliceCount);\n    }\n\n  }\n\n","sourceOld":"  @Override\n  protected void createServers(int numServers) throws Exception {\n\n    System.setProperty(\"collection\", \"control_collection\");\n\n    // we want hashes by default for the control, so set to 1 shard as opposed to leaving unset\n    String oldNumShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n\n    try {\n\n      File controlJettyDir = createTempDir(\"control\").toFile();\n      setupJettySolrHome(controlJettyDir);\n\n      controlJetty = createJetty(controlJettyDir, useJettyDataDir ? getDataDir(testDir\n          + \"/control/data\") : null); // don't pass shard name... let it default to\n                               // \"shard1\"\n\n\n      controlClient = createNewSolrClient(controlJetty.getLocalPort());\n      \n      if (sliceCount <= 0) {\n        // for now, just create the cloud client for the control if we don't\n        // create the normal cloud client.\n        // this can change if more tests need it.\n        controlClientCloud = createCloudClient(\"control_collection\");\n        controlClientCloud.connect();\n        waitForCollection(controlClientCloud.getZkStateReader(),\n            \"control_collection\", 0);\n        // NOTE: we are skipping creation of the chaos monkey by returning here\n        cloudClient = controlClientCloud; // temporary - some code needs/uses\n                                          // cloudClient\n        return;\n      }\n\n    } finally {\n      System.clearProperty(\"collection\");\n      if (oldNumShards != null) {\n        System.setProperty(ZkStateReader.NUM_SHARDS_PROP, oldNumShards);\n      } else {\n        System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      }\n    }\n\n\n    initCloud();\n\n    createJettys(numServers);\n\n    int cnt = getTotalReplicas(DEFAULT_COLLECTION);\n    if (cnt > 0) {\n      waitForCollection(cloudClient.getZkStateReader(), DEFAULT_COLLECTION, sliceCount);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","sourceNew":"  @Override\n  protected void createServers(int numServers) throws Exception {\n\n    File controlJettyDir = createTempDir(\"control\").toFile();\n    setupJettySolrHome(controlJettyDir);\n    controlJetty = createJetty(controlJettyDir, useJettyDataDir ? getDataDir(testDir\n        + \"/control/data\") : null);\n    try (SolrClient client = createCloudClient(\"control_collection\")) {\n      assertEquals(0, CollectionAdminRequest\n          .createCollection(\"control_collection\", 1, 1)\n          .setCreateNodeSet(controlJetty.getNodeName())\n          .process(client).getStatus());\n      }\n    controlClient = new HttpSolrClient.Builder(controlJetty.getBaseUrl() + \"/control_collection\").build();\n    if (sliceCount <= 0) {\n      // for now, just create the cloud client for the control if we don't\n      // create the normal cloud client.\n      // this can change if more tests need it.\n      controlClientCloud = createCloudClient(\"control_collection\");\n      controlClientCloud.connect();\n      waitForCollection(controlClientCloud.getZkStateReader(),\n          \"control_collection\", 0);\n      // NOTE: we are skipping creation of the chaos monkey by returning here\n      cloudClient = controlClientCloud; // temporary - some code needs/uses\n      // cloudClient\n      return;\n    }\n\n    initCloud();\n\n    createJettys(numServers);\n\n    int cnt = getTotalReplicas(DEFAULT_COLLECTION);\n    if (cnt > 0) {\n      waitForCollection(cloudClient.getZkStateReader(), DEFAULT_COLLECTION, sliceCount);\n    }\n\n  }\n\n","sourceOld":"  @Override\n  protected void createServers(int numServers) throws Exception {\n\n    System.setProperty(\"collection\", \"control_collection\");\n\n    // we want hashes by default for the control, so set to 1 shard as opposed to leaving unset\n    String oldNumShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n\n    try {\n\n      File controlJettyDir = createTempDir(\"control\").toFile();\n      setupJettySolrHome(controlJettyDir);\n\n      controlJetty = createJetty(controlJettyDir, useJettyDataDir ? getDataDir(testDir\n          + \"/control/data\") : null); // don't pass shard name... let it default to\n                               // \"shard1\"\n\n\n      controlClient = createNewSolrClient(controlJetty.getLocalPort());\n      \n      if (sliceCount <= 0) {\n        // for now, just create the cloud client for the control if we don't\n        // create the normal cloud client.\n        // this can change if more tests need it.\n        controlClientCloud = createCloudClient(\"control_collection\");\n        controlClientCloud.connect();\n        waitForCollection(controlClientCloud.getZkStateReader(),\n            \"control_collection\", 0);\n        // NOTE: we are skipping creation of the chaos monkey by returning here\n        cloudClient = controlClientCloud; // temporary - some code needs/uses\n                                          // cloudClient\n        return;\n      }\n\n    } finally {\n      System.clearProperty(\"collection\");\n      if (oldNumShards != null) {\n        System.setProperty(ZkStateReader.NUM_SHARDS_PROP, oldNumShards);\n      } else {\n        System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      }\n    }\n\n\n    initCloud();\n\n    createJettys(numServers);\n\n    int cnt = getTotalReplicas(DEFAULT_COLLECTION);\n    if (cnt > 0) {\n      waitForCollection(cloudClient.getZkStateReader(), DEFAULT_COLLECTION, sliceCount);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"197bbedf08450ade98a11f4a0001448059666bec","date":1498534625,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","sourceNew":"  @Override\n  protected void createServers(int numServers) throws Exception {\n\n    File controlJettyDir = createTempDir(\"control\").toFile();\n    setupJettySolrHome(controlJettyDir);\n    controlJetty = createJetty(controlJettyDir, useJettyDataDir ? getDataDir(testDir\n        + \"/control/data\") : null);\n    try (SolrClient client = createCloudClient(\"control_collection\")) {\n      assertEquals(0, CollectionAdminRequest\n          .createCollection(\"control_collection\", \"conf1\", 1, 1)\n          .setCreateNodeSet(controlJetty.getNodeName())\n          .process(client).getStatus());\n      }\n    controlClient = new HttpSolrClient.Builder(controlJetty.getBaseUrl() + \"/control_collection\").build();\n    if (sliceCount <= 0) {\n      // for now, just create the cloud client for the control if we don't\n      // create the normal cloud client.\n      // this can change if more tests need it.\n      controlClientCloud = createCloudClient(\"control_collection\");\n      controlClientCloud.connect();\n      waitForCollection(controlClientCloud.getZkStateReader(),\n          \"control_collection\", 0);\n      // NOTE: we are skipping creation of the chaos monkey by returning here\n      cloudClient = controlClientCloud; // temporary - some code needs/uses\n      // cloudClient\n      return;\n    }\n\n    initCloud();\n\n    createJettys(numServers);\n\n    int cnt = getTotalReplicas(DEFAULT_COLLECTION);\n    if (cnt > 0) {\n      waitForCollection(cloudClient.getZkStateReader(), DEFAULT_COLLECTION, sliceCount);\n    }\n\n  }\n\n","sourceOld":"  @Override\n  protected void createServers(int numServers) throws Exception {\n\n    File controlJettyDir = createTempDir(\"control\").toFile();\n    setupJettySolrHome(controlJettyDir);\n    controlJetty = createJetty(controlJettyDir, useJettyDataDir ? getDataDir(testDir\n        + \"/control/data\") : null);\n    try (SolrClient client = createCloudClient(\"control_collection\")) {\n      assertEquals(0, CollectionAdminRequest\n          .createCollection(\"control_collection\", 1, 1)\n          .setCreateNodeSet(controlJetty.getNodeName())\n          .process(client).getStatus());\n      }\n    controlClient = new HttpSolrClient.Builder(controlJetty.getBaseUrl() + \"/control_collection\").build();\n    if (sliceCount <= 0) {\n      // for now, just create the cloud client for the control if we don't\n      // create the normal cloud client.\n      // this can change if more tests need it.\n      controlClientCloud = createCloudClient(\"control_collection\");\n      controlClientCloud.connect();\n      waitForCollection(controlClientCloud.getZkStateReader(),\n          \"control_collection\", 0);\n      // NOTE: we are skipping creation of the chaos monkey by returning here\n      cloudClient = controlClientCloud; // temporary - some code needs/uses\n      // cloudClient\n      return;\n    }\n\n    initCloud();\n\n    createJettys(numServers);\n\n    int cnt = getTotalReplicas(DEFAULT_COLLECTION);\n    if (cnt > 0) {\n      waitForCollection(cloudClient.getZkStateReader(), DEFAULT_COLLECTION, sliceCount);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","date":1498540685,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","sourceNew":"  @Override\n  protected void createServers(int numServers) throws Exception {\n\n    File controlJettyDir = createTempDir(\"control\").toFile();\n    setupJettySolrHome(controlJettyDir);\n    controlJetty = createJetty(controlJettyDir, useJettyDataDir ? getDataDir(testDir\n        + \"/control/data\") : null);\n    try (SolrClient client = createCloudClient(\"control_collection\")) {\n      assertEquals(0, CollectionAdminRequest\n          .createCollection(\"control_collection\", \"conf1\", 1, 1)\n          .setCreateNodeSet(controlJetty.getNodeName())\n          .process(client).getStatus());\n      }\n    controlClient = new HttpSolrClient.Builder(controlJetty.getBaseUrl() + \"/control_collection\").build();\n    if (sliceCount <= 0) {\n      // for now, just create the cloud client for the control if we don't\n      // create the normal cloud client.\n      // this can change if more tests need it.\n      controlClientCloud = createCloudClient(\"control_collection\");\n      controlClientCloud.connect();\n      waitForCollection(controlClientCloud.getZkStateReader(),\n          \"control_collection\", 0);\n      // NOTE: we are skipping creation of the chaos monkey by returning here\n      cloudClient = controlClientCloud; // temporary - some code needs/uses\n      // cloudClient\n      return;\n    }\n\n    initCloud();\n\n    createJettys(numServers);\n\n    int cnt = getTotalReplicas(DEFAULT_COLLECTION);\n    if (cnt > 0) {\n      waitForCollection(cloudClient.getZkStateReader(), DEFAULT_COLLECTION, sliceCount);\n    }\n\n  }\n\n","sourceOld":"  @Override\n  protected void createServers(int numServers) throws Exception {\n\n    File controlJettyDir = createTempDir(\"control\").toFile();\n    setupJettySolrHome(controlJettyDir);\n    controlJetty = createJetty(controlJettyDir, useJettyDataDir ? getDataDir(testDir\n        + \"/control/data\") : null);\n    try (SolrClient client = createCloudClient(\"control_collection\")) {\n      assertEquals(0, CollectionAdminRequest\n          .createCollection(\"control_collection\", 1, 1)\n          .setCreateNodeSet(controlJetty.getNodeName())\n          .process(client).getStatus());\n      }\n    controlClient = new HttpSolrClient.Builder(controlJetty.getBaseUrl() + \"/control_collection\").build();\n    if (sliceCount <= 0) {\n      // for now, just create the cloud client for the control if we don't\n      // create the normal cloud client.\n      // this can change if more tests need it.\n      controlClientCloud = createCloudClient(\"control_collection\");\n      controlClientCloud.connect();\n      waitForCollection(controlClientCloud.getZkStateReader(),\n          \"control_collection\", 0);\n      // NOTE: we are skipping creation of the chaos monkey by returning here\n      cloudClient = controlClientCloud; // temporary - some code needs/uses\n      // cloudClient\n      return;\n    }\n\n    initCloud();\n\n    createJettys(numServers);\n\n    int cnt = getTotalReplicas(DEFAULT_COLLECTION);\n    if (cnt > 0) {\n      waitForCollection(cloudClient.getZkStateReader(), DEFAULT_COLLECTION, sliceCount);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","sourceNew":"  @Override\n  protected void createServers(int numServers) throws Exception {\n\n    File controlJettyDir = createTempDir(\"control\").toFile();\n    setupJettySolrHome(controlJettyDir);\n    controlJetty = createJetty(controlJettyDir, useJettyDataDir ? getDataDir(testDir\n        + \"/control/data\") : null);\n    try (SolrClient client = createCloudClient(\"control_collection\")) {\n      assertEquals(0, CollectionAdminRequest\n          .createCollection(\"control_collection\", \"conf1\", 1, 1)\n          .setCreateNodeSet(controlJetty.getNodeName())\n          .process(client).getStatus());\n      }\n    controlClient = new HttpSolrClient.Builder(controlJetty.getBaseUrl() + \"/control_collection\").build();\n    if (sliceCount <= 0) {\n      // for now, just create the cloud client for the control if we don't\n      // create the normal cloud client.\n      // this can change if more tests need it.\n      controlClientCloud = createCloudClient(\"control_collection\");\n      controlClientCloud.connect();\n      waitForCollection(controlClientCloud.getZkStateReader(),\n          \"control_collection\", 0);\n      // NOTE: we are skipping creation of the chaos monkey by returning here\n      cloudClient = controlClientCloud; // temporary - some code needs/uses\n      // cloudClient\n      return;\n    }\n\n    initCloud();\n\n    createJettys(numServers);\n\n    int cnt = getTotalReplicas(DEFAULT_COLLECTION);\n    if (cnt > 0) {\n      waitForCollection(cloudClient.getZkStateReader(), DEFAULT_COLLECTION, sliceCount);\n    }\n\n  }\n\n","sourceOld":"  @Override\n  protected void createServers(int numServers) throws Exception {\n\n    System.setProperty(\"collection\", \"control_collection\");\n\n    // we want hashes by default for the control, so set to 1 shard as opposed to leaving unset\n    String oldNumShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n    System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n\n    try {\n\n      File controlJettyDir = createTempDir(\"control\").toFile();\n      setupJettySolrHome(controlJettyDir);\n\n      controlJetty = createJetty(controlJettyDir, useJettyDataDir ? getDataDir(testDir\n          + \"/control/data\") : null); // don't pass shard name... let it default to\n                               // \"shard1\"\n\n\n      controlClient = createNewSolrClient(controlJetty.getLocalPort());\n      \n      if (sliceCount <= 0) {\n        // for now, just create the cloud client for the control if we don't\n        // create the normal cloud client.\n        // this can change if more tests need it.\n        controlClientCloud = createCloudClient(\"control_collection\");\n        controlClientCloud.connect();\n        waitForCollection(controlClientCloud.getZkStateReader(),\n            \"control_collection\", 0);\n        // NOTE: we are skipping creation of the chaos monkey by returning here\n        cloudClient = controlClientCloud; // temporary - some code needs/uses\n                                          // cloudClient\n        return;\n      }\n\n    } finally {\n      System.clearProperty(\"collection\");\n      if (oldNumShards != null) {\n        System.setProperty(ZkStateReader.NUM_SHARDS_PROP, oldNumShards);\n      } else {\n        System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      }\n    }\n\n\n    initCloud();\n\n    createJettys(numServers);\n\n    int cnt = getTotalReplicas(DEFAULT_COLLECTION);\n    if (cnt > 0) {\n      waitForCollection(cloudClient.getZkStateReader(), DEFAULT_COLLECTION, sliceCount);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createServers(int).mjava","sourceNew":"  @Override\n  protected void createServers(int numServers) throws Exception {\n    File controlJettyDir = createTempDir(\"control\").toFile();\n    setupJettySolrHome(controlJettyDir);\n    controlJetty = createJetty(controlJettyDir, useJettyDataDir ? getDataDir(testDir\n        + \"/control/data\") : null);\n    controlJetty.start();\n    try (CloudSolrClient client = createCloudClient(\"control_collection\")) {\n      assertEquals(0, CollectionAdminRequest\n          .createCollection(\"control_collection\", \"conf1\", 1, 1)\n          .setCreateNodeSet(controlJetty.getNodeName())\n          .process(client).getStatus());\n      waitForActiveReplicaCount(client, \"control_collection\", 1);\n    }\n\n    \n    controlClient = new HttpSolrClient.Builder(controlJetty.getBaseUrl() + \"/control_collection\").build();\n    if (sliceCount <= 0) {\n      // for now, just create the cloud client for the control if we don't\n      // create the normal cloud client.\n      // this can change if more tests need it.\n      controlClientCloud = createCloudClient(\"control_collection\");\n      controlClientCloud.connect();\n      // NOTE: we are skipping creation of the chaos monkey by returning here\n      cloudClient = controlClientCloud; // temporary - some code needs/uses\n      // cloudClient\n      return;\n    }\n\n    initCloud();\n\n    createJettys(numServers);\n    \n  }\n\n","sourceOld":"  @Override\n  protected void createServers(int numServers) throws Exception {\n\n    File controlJettyDir = createTempDir(\"control\").toFile();\n    setupJettySolrHome(controlJettyDir);\n    controlJetty = createJetty(controlJettyDir, useJettyDataDir ? getDataDir(testDir\n        + \"/control/data\") : null);\n    try (SolrClient client = createCloudClient(\"control_collection\")) {\n      assertEquals(0, CollectionAdminRequest\n          .createCollection(\"control_collection\", \"conf1\", 1, 1)\n          .setCreateNodeSet(controlJetty.getNodeName())\n          .process(client).getStatus());\n      }\n    controlClient = new HttpSolrClient.Builder(controlJetty.getBaseUrl() + \"/control_collection\").build();\n    if (sliceCount <= 0) {\n      // for now, just create the cloud client for the control if we don't\n      // create the normal cloud client.\n      // this can change if more tests need it.\n      controlClientCloud = createCloudClient(\"control_collection\");\n      controlClientCloud.connect();\n      waitForCollection(controlClientCloud.getZkStateReader(),\n          \"control_collection\", 0);\n      // NOTE: we are skipping creation of the chaos monkey by returning here\n      cloudClient = controlClientCloud; // temporary - some code needs/uses\n      // cloudClient\n      return;\n    }\n\n    initCloud();\n\n    createJettys(numServers);\n\n    int cnt = getTotalReplicas(DEFAULT_COLLECTION);\n    if (cnt > 0) {\n      waitForCollection(cloudClient.getZkStateReader(), DEFAULT_COLLECTION, sliceCount);\n    }\n\n  }\n\n","bugFix":["4bc0d7d47c55a6d5319ba7d7ad8a9ae9c7a4d9dd","0ad7bdba3e91cf3373cda2e52239cb761fc0b452","2bceb2cdf01c012aaa9fd1132529159bd7c2fe82","a9b4296bd51ca61b482138791478afdd0f7d3a3d","abb23fcc2461782ab204e61213240feb77d355aa"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","7c3fd765dc8fa1dd67f45e1ef91c28a2c147ea39"],"7c3fd765dc8fa1dd67f45e1ef91c28a2c147ea39":["2bceb2cdf01c012aaa9fd1132529159bd7c2fe82"],"197bbedf08450ade98a11f4a0001448059666bec":["a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["1416f9d09d016a6894cd17e1caac137dad2bba59","bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["28288370235ed02234a64753cdbf0c6ec096304a"],"abb23fcc2461782ab204e61213240feb77d355aa":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"9bc766d645fa848f86c381c7f6acf2c881c99399":["abb23fcc2461782ab204e61213240feb77d355aa"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["f4abec28b874149a7223e32cc7a01704c27790de"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["69c0b7c6f9804817f14bd78c3795cdd9f6ddae5c"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["abb23fcc2461782ab204e61213240feb77d355aa","9bc766d645fa848f86c381c7f6acf2c881c99399"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"234afba21d42e6c527535c6aa11baba09a4771f3":["275019a81d0883a1db4560391b072d1fbe272ec4"],"4bc0d7d47c55a6d5319ba7d7ad8a9ae9c7a4d9dd":["7c3fd765dc8fa1dd67f45e1ef91c28a2c147ea39"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["4bc0d7d47c55a6d5319ba7d7ad8a9ae9c7a4d9dd"],"2bceb2cdf01c012aaa9fd1132529159bd7c2fe82":["c5a558d54519c651068ddb202f03befefb1514a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","197bbedf08450ade98a11f4a0001448059666bec"],"f2126b84bd093fa3d921582a109a0ee578c28126":["69c0b7c6f9804817f14bd78c3795cdd9f6ddae5c","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"69c0b7c6f9804817f14bd78c3795cdd9f6ddae5c":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["d0d579490a72f2e6297eaa648940611234c57cf1"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["234afba21d42e6c527535c6aa11baba09a4771f3"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d9405f486872f1e416304dfe389741f4ee2f8a4d","c5a558d54519c651068ddb202f03befefb1514a7"],"f4abec28b874149a7223e32cc7a01704c27790de":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"d0d579490a72f2e6297eaa648940611234c57cf1":["4bc0d7d47c55a6d5319ba7d7ad8a9ae9c7a4d9dd"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["234afba21d42e6c527535c6aa11baba09a4771f3","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"28288370235ed02234a64753cdbf0c6ec096304a":["234afba21d42e6c527535c6aa11baba09a4771f3","197bbedf08450ade98a11f4a0001448059666bec"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"c5a558d54519c651068ddb202f03befefb1514a7":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"275019a81d0883a1db4560391b072d1fbe272ec4":["9bc766d645fa848f86c381c7f6acf2c881c99399"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"7c3fd765dc8fa1dd67f45e1ef91c28a2c147ea39":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","4bc0d7d47c55a6d5319ba7d7ad8a9ae9c7a4d9dd"],"197bbedf08450ade98a11f4a0001448059666bec":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","28288370235ed02234a64753cdbf0c6ec096304a"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"abb23fcc2461782ab204e61213240feb77d355aa":["9bc766d645fa848f86c381c7f6acf2c881c99399","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["abb23fcc2461782ab204e61213240feb77d355aa"],"9bc766d645fa848f86c381c7f6acf2c881c99399":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","275019a81d0883a1db4560391b072d1fbe272ec4"],"bafca15d8e408346a67f4282ad1143b88023893b":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["f2126b84bd093fa3d921582a109a0ee578c28126","407687e67faf6e1f02a211ca078d8e3eed631027","c5a558d54519c651068ddb202f03befefb1514a7"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"234afba21d42e6c527535c6aa11baba09a4771f3":["a9b4296bd51ca61b482138791478afdd0f7d3a3d","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"4bc0d7d47c55a6d5319ba7d7ad8a9ae9c7a4d9dd":["1416f9d09d016a6894cd17e1caac137dad2bba59","d0d579490a72f2e6297eaa648940611234c57cf1"],"2bceb2cdf01c012aaa9fd1132529159bd7c2fe82":["7c3fd765dc8fa1dd67f45e1ef91c28a2c147ea39"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7869f64c874ebf7f317d22c00baf2b6857797a6","2c30e4c1cee08b3b229a77991882594fe7250b66","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":[],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"69c0b7c6f9804817f14bd78c3795cdd9f6ddae5c":["d9405f486872f1e416304dfe389741f4ee2f8a4d","f2126b84bd093fa3d921582a109a0ee578c28126"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["c7869f64c874ebf7f317d22c00baf2b6857797a6","69c0b7c6f9804817f14bd78c3795cdd9f6ddae5c","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["197bbedf08450ade98a11f4a0001448059666bec","b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"f4abec28b874149a7223e32cc7a01704c27790de":["bafca15d8e408346a67f4282ad1143b88023893b"],"d0d579490a72f2e6297eaa648940611234c57cf1":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"28288370235ed02234a64753cdbf0c6ec096304a":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["f4abec28b874149a7223e32cc7a01704c27790de"],"c5a558d54519c651068ddb202f03befefb1514a7":["2bceb2cdf01c012aaa9fd1132529159bd7c2fe82","407687e67faf6e1f02a211ca078d8e3eed631027"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"275019a81d0883a1db4560391b072d1fbe272ec4":["234afba21d42e6c527535c6aa11baba09a4771f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","c7869f64c874ebf7f317d22c00baf2b6857797a6","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","f2126b84bd093fa3d921582a109a0ee578c28126","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}