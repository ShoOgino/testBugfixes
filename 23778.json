{"path":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#assertMatchEquals(List[Completion],String...).mjava","commits":[{"id":"7bf07f4ebadc7539de83a531e64678350d78ca26","date":1322776167,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#assertMatchEquals(List[Completion],String...).mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTLookupTest#assertMatchEquals(List[LookupResult],String...).mjava","sourceNew":"  private void assertMatchEquals(List<Completion> res, String... expected) {\n    String [] result = new String [res.size()];\n    for (int i = 0; i < res.size(); i++) {\n      result[i] = res.get(i).toString();\n    }\n\n    if (!Arrays.equals(stripScore(expected), stripScore(result))) {\n      int colLen = Math.max(maxLen(expected), maxLen(result));\n      \n      StringBuilder b = new StringBuilder();\n      String format = \"%\" + colLen + \"s  \" + \"%\" + colLen + \"s\\n\"; \n      b.append(String.format(Locale.ENGLISH, format, \"Expected\", \"Result\"));\n      for (int i = 0; i < Math.max(result.length, expected.length); i++) {\n        b.append(String.format(Locale.ENGLISH, format, \n            i < expected.length ? expected[i] : \"--\", \n            i < result.length ? result[i] : \"--\"));\n      }\n\n      System.err.println(b.toString());\n      fail(\"Expected different output:\\n\" + b.toString());\n    }\n  }\n\n","sourceOld":"  private void assertMatchEquals(List<LookupResult> res, String... expected) {\n    String [] result = new String [res.size()];\n    for (int i = 0; i < res.size(); i++)\n      result[i] = res.get(i).toString();\n    \n    if (!Arrays.equals(expected, result)) {\n      int colLen = Math.max(maxLen(expected), maxLen(result));\n      \n      StringBuilder b = new StringBuilder();\n      String format = \"%\" + colLen + \"s  \" + \"%\" + colLen + \"s\\n\"; \n      b.append(String.format(Locale.ENGLISH, format, \"Expected\", \"Result\"));\n      for (int i = 0; i < Math.max(result.length, expected.length); i++) {\n        b.append(String.format(Locale.ENGLISH, format, \n            i < expected.length ? expected[i] : \"--\", \n            i < result.length ? result[i] : \"--\"));\n      }\n\n      System.err.println(b.toString());\n      fail(\"Expected different output:\\n\" + b.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#assertMatchEquals(List[Completion],String...).mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#assertMatchEquals(List[Completion],String...).mjava","sourceNew":"  private void assertMatchEquals(List<Completion> res, String... expected) {\n    String [] result = new String [res.size()];\n    for (int i = 0; i < res.size(); i++) {\n      result[i] = res.get(i).toString();\n    }\n\n    if (!Arrays.equals(stripScore(expected), stripScore(result))) {\n      int colLen = Math.max(maxLen(expected), maxLen(result));\n      \n      StringBuilder b = new StringBuilder();\n      String format = \"%\" + colLen + \"s  \" + \"%\" + colLen + \"s\\n\"; \n      b.append(String.format(Locale.ENGLISH, format, \"Expected\", \"Result\"));\n      for (int i = 0; i < Math.max(result.length, expected.length); i++) {\n        b.append(String.format(Locale.ENGLISH, format, \n            i < expected.length ? expected[i] : \"--\", \n            i < result.length ? result[i] : \"--\"));\n      }\n\n      System.err.println(b.toString());\n      fail(\"Expected different output:\\n\" + b.toString());\n    }\n  }\n\n","sourceOld":"  private void assertMatchEquals(List<Completion> res, String... expected) {\n    String [] result = new String [res.size()];\n    for (int i = 0; i < res.size(); i++) {\n      result[i] = res.get(i).toString();\n    }\n\n    if (!Arrays.equals(stripScore(expected), stripScore(result))) {\n      int colLen = Math.max(maxLen(expected), maxLen(result));\n      \n      StringBuilder b = new StringBuilder();\n      String format = \"%\" + colLen + \"s  \" + \"%\" + colLen + \"s\\n\"; \n      b.append(String.format(Locale.ENGLISH, format, \"Expected\", \"Result\"));\n      for (int i = 0; i < Math.max(result.length, expected.length); i++) {\n        b.append(String.format(Locale.ENGLISH, format, \n            i < expected.length ? expected[i] : \"--\", \n            i < result.length ? result[i] : \"--\"));\n      }\n\n      System.err.println(b.toString());\n      fail(\"Expected different output:\\n\" + b.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"7bf07f4ebadc7539de83a531e64678350d78ca26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7bf07f4ebadc7539de83a531e64678350d78ca26":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}