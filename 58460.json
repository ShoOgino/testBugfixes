{"path":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#DataImporter(InputSource,SolrCore,Map[String,Properties],Map[String,Object]).mjava","commits":[{"id":"b24326411db492f92ea49f6fb947c90bc73cf19e","date":1298813468,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#DataImporter(InputSource,SolrCore,Map[String,Properties],Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#DataImporter(String,SolrCore,Map[String,Properties],Map[String,Object]).mjava","sourceNew":"  DataImporter(InputSource dataConfig, SolrCore core, Map<String, Properties> ds, Map<String, Object> session) {\n    if (dataConfig == null)\n      throw new DataImportHandlerException(SEVERE,\n              \"Configuration not found\");\n    this.core = core;\n    this.schema = core.getSchema();\n    dataSourceProps = ds;\n    if (session == null)\n      session = new HashMap<String, Object>();\n    coreScopeSession = session;\n    loadDataConfig(dataConfig);\n\n    for (Map.Entry<String, SchemaField> entry : schema.getFields().entrySet()) {\n      config.lowerNameVsSchemaField.put(entry.getKey().toLowerCase(Locale.ENGLISH), entry.getValue());\n    }\n\n    for (DataConfig.Entity e : config.document.entities) {\n      Map<String, DataConfig.Field> fields = new HashMap<String, DataConfig.Field>();\n      initEntity(e, fields, false);\n      verifyWithSchema(fields);\n      identifyPk(e);\n    }    \n  }\n\n","sourceOld":"  DataImporter(String dataConfig, SolrCore core, Map<String, Properties> ds, Map<String, Object> session) {\n    if (dataConfig == null)\n      throw new DataImportHandlerException(SEVERE,\n              \"Configuration not found\");\n    this.core = core;\n    this.schema = core.getSchema();\n    dataSourceProps = ds;\n    if (session == null)\n      session = new HashMap<String, Object>();\n    coreScopeSession = session;\n    loadDataConfig(dataConfig);\n\n    for (Map.Entry<String, SchemaField> entry : schema.getFields().entrySet()) {\n      config.lowerNameVsSchemaField.put(entry.getKey().toLowerCase(Locale.ENGLISH), entry.getValue());\n    }\n\n    for (DataConfig.Entity e : config.document.entities) {\n      Map<String, DataConfig.Field> fields = new HashMap<String, DataConfig.Field>();\n      initEntity(e, fields, false);\n      verifyWithSchema(fields);\n      identifyPk(e);\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#DataImporter(InputSource,SolrCore,Map[String,Properties],Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  DataImporter(InputSource dataConfig, SolrCore core, Map<String, Properties> ds, Map<String, Object> session) {\n    if (dataConfig == null)\n      throw new DataImportHandlerException(SEVERE,\n              \"Configuration not found\");\n    this.core = core;\n    this.schema = core.getSchema();\n    dataSourceProps = ds;\n    if (session == null)\n      session = new HashMap<String, Object>();\n    coreScopeSession = session;\n    loadDataConfig(dataConfig);\n\n    for (Map.Entry<String, SchemaField> entry : schema.getFields().entrySet()) {\n      config.lowerNameVsSchemaField.put(entry.getKey().toLowerCase(Locale.ENGLISH), entry.getValue());\n    }\n\n    for (DataConfig.Entity e : config.document.entities) {\n      Map<String, DataConfig.Field> fields = new HashMap<String, DataConfig.Field>();\n      initEntity(e, fields, false);\n      verifyWithSchema(fields);\n      identifyPk(e);\n    }    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#DataImporter(InputSource,SolrCore,Map[String,Properties],Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  DataImporter(InputSource dataConfig, SolrCore core, Map<String, Properties> ds, Map<String, Object> session) {\n    if (dataConfig == null)\n      throw new DataImportHandlerException(SEVERE,\n              \"Configuration not found\");\n    this.core = core;\n    this.schema = core.getSchema();\n    dataSourceProps = ds;\n    if (session == null)\n      session = new HashMap<String, Object>();\n    coreScopeSession = session;\n    loadDataConfig(dataConfig);\n\n    for (Map.Entry<String, SchemaField> entry : schema.getFields().entrySet()) {\n      config.lowerNameVsSchemaField.put(entry.getKey().toLowerCase(Locale.ENGLISH), entry.getValue());\n    }\n\n    for (DataConfig.Entity e : config.document.entities) {\n      Map<String, DataConfig.Field> fields = new HashMap<String, DataConfig.Field>();\n      initEntity(e, fields, false);\n      verifyWithSchema(fields);\n      identifyPk(e);\n    }    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#DataImporter(InputSource,SolrCore,Map[String,Properties],Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#DataImporter(InputSource,SolrCore,Map[String,Properties],Map[String,Object]).mjava","sourceNew":"  DataImporter(InputSource dataConfig, SolrCore core, Map<String, Properties> ds, Map<String, Object> session) {\n    if (dataConfig == null)\n      throw new DataImportHandlerException(SEVERE,\n              \"Configuration not found\");\n    this.core = core;\n    this.schema = core.getSchema();\n    dataSourceProps = ds;\n    if (session == null)\n      session = new HashMap<String, Object>();\n    coreScopeSession = session;\n    loadDataConfig(dataConfig);\n\n    for (Map.Entry<String, SchemaField> entry : schema.getFields().entrySet()) {\n      config.lowerNameVsSchemaField.put(entry.getKey().toLowerCase(Locale.ENGLISH), entry.getValue());\n    }\n\n    for (DataConfig.Entity e : config.document.entities) {\n      Map<String, DataConfig.Field> fields = new HashMap<String, DataConfig.Field>();\n      initEntity(e, fields, false);\n      verifyWithSchema(fields);\n      identifyPk(e);\n    }    \n  }\n\n","sourceOld":"  DataImporter(InputSource dataConfig, SolrCore core, Map<String, Properties> ds, Map<String, Object> session) {\n    if (dataConfig == null)\n      throw new DataImportHandlerException(SEVERE,\n              \"Configuration not found\");\n    this.core = core;\n    this.schema = core.getSchema();\n    dataSourceProps = ds;\n    if (session == null)\n      session = new HashMap<String, Object>();\n    coreScopeSession = session;\n    loadDataConfig(dataConfig);\n\n    for (Map.Entry<String, SchemaField> entry : schema.getFields().entrySet()) {\n      config.lowerNameVsSchemaField.put(entry.getKey().toLowerCase(Locale.ENGLISH), entry.getValue());\n    }\n\n    for (DataConfig.Entity e : config.document.entities) {\n      Map<String, DataConfig.Field> fields = new HashMap<String, DataConfig.Field>();\n      initEntity(e, fields, false);\n      verifyWithSchema(fields);\n      identifyPk(e);\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"723a886da5f3b2e263e30950603128b2c9e40528","date":1308126244,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#DataImporter(InputSource,SolrCore,Map[String,Properties],Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#DataImporter(InputSource,SolrCore,Map[String,Properties],Map[String,Object]).mjava","sourceNew":"  DataImporter(InputSource dataConfig, SolrCore core, Map<String, Properties> ds, Map<String, Object> session) {\n    if (dataConfig == null)\n      throw new DataImportHandlerException(SEVERE,\n              \"Configuration not found\");\n    this.core = core;\n    this.schema = core.getSchema();\n    dataSourceProps = ds;\n    if (session == null)\n      session = new HashMap<String, Object>();\n    coreScopeSession = session;\n    loadDataConfig(dataConfig);\n\n    for (Map.Entry<String, SchemaField> entry : schema.getFields().entrySet()) {\n      config.lowerNameVsSchemaField.put(entry.getKey().toLowerCase(Locale.ENGLISH), entry.getValue());\n    }\n\n    for (DataConfig.Entity e : config.document.entities) {\n      Map<String, DataConfig.Field> fields = new HashMap<String, DataConfig.Field>();\n      initEntity(e, fields, false);\n      verifyWithSchema(fields);\n      identifyPk(e);\n      if (e.allAttributes.containsKey(SqlEntityProcessor.DELTA_QUERY))\n        isDeltaImportSupported = true;\n    }\n  }\n\n","sourceOld":"  DataImporter(InputSource dataConfig, SolrCore core, Map<String, Properties> ds, Map<String, Object> session) {\n    if (dataConfig == null)\n      throw new DataImportHandlerException(SEVERE,\n              \"Configuration not found\");\n    this.core = core;\n    this.schema = core.getSchema();\n    dataSourceProps = ds;\n    if (session == null)\n      session = new HashMap<String, Object>();\n    coreScopeSession = session;\n    loadDataConfig(dataConfig);\n\n    for (Map.Entry<String, SchemaField> entry : schema.getFields().entrySet()) {\n      config.lowerNameVsSchemaField.put(entry.getKey().toLowerCase(Locale.ENGLISH), entry.getValue());\n    }\n\n    for (DataConfig.Entity e : config.document.entities) {\n      Map<String, DataConfig.Field> fields = new HashMap<String, DataConfig.Field>();\n      initEntity(e, fields, false);\n      verifyWithSchema(fields);\n      identifyPk(e);\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#DataImporter(InputSource,SolrCore,Map[String,Properties],Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter#DataImporter(InputSource,SolrCore,Map[String,Properties],Map[String,Object]).mjava","sourceNew":"  DataImporter(InputSource dataConfig, SolrCore core, Map<String, Properties> ds, Map<String, Object> session) {\n    if (dataConfig == null)\n      throw new DataImportHandlerException(SEVERE,\n              \"Configuration not found\");\n    this.core = core;\n    this.schema = core.getSchema();\n    dataSourceProps = ds;\n    if (session == null)\n      session = new HashMap<String, Object>();\n    coreScopeSession = session;\n    loadDataConfig(dataConfig);\n\n    for (Map.Entry<String, SchemaField> entry : schema.getFields().entrySet()) {\n      config.lowerNameVsSchemaField.put(entry.getKey().toLowerCase(Locale.ENGLISH), entry.getValue());\n    }\n\n    for (DataConfig.Entity e : config.document.entities) {\n      Map<String, DataConfig.Field> fields = new HashMap<String, DataConfig.Field>();\n      initEntity(e, fields, false);\n      verifyWithSchema(fields);\n      identifyPk(e);\n      if (e.allAttributes.containsKey(SqlEntityProcessor.DELTA_QUERY))\n        isDeltaImportSupported = true;\n    }\n  }\n\n","sourceOld":"  DataImporter(InputSource dataConfig, SolrCore core, Map<String, Properties> ds, Map<String, Object> session) {\n    if (dataConfig == null)\n      throw new DataImportHandlerException(SEVERE,\n              \"Configuration not found\");\n    this.core = core;\n    this.schema = core.getSchema();\n    dataSourceProps = ds;\n    if (session == null)\n      session = new HashMap<String, Object>();\n    coreScopeSession = session;\n    loadDataConfig(dataConfig);\n\n    for (Map.Entry<String, SchemaField> entry : schema.getFields().entrySet()) {\n      config.lowerNameVsSchemaField.put(entry.getKey().toLowerCase(Locale.ENGLISH), entry.getValue());\n    }\n\n    for (DataConfig.Entity e : config.document.entities) {\n      Map<String, DataConfig.Field> fields = new HashMap<String, DataConfig.Field>();\n      initEntity(e, fields, false);\n      verifyWithSchema(fields);\n      identifyPk(e);\n      if (e.allAttributes.containsKey(SqlEntityProcessor.DELTA_QUERY))\n        isDeltaImportSupported = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b24326411db492f92ea49f6fb947c90bc73cf19e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b24326411db492f92ea49f6fb947c90bc73cf19e"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["b24326411db492f92ea49f6fb947c90bc73cf19e","b24326411db492f92ea49f6fb947c90bc73cf19e"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b24326411db492f92ea49f6fb947c90bc73cf19e"],"c26f00b574427b55127e869b935845554afde1fa":["723a886da5f3b2e263e30950603128b2c9e40528","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"723a886da5f3b2e263e30950603128b2c9e40528":["b24326411db492f92ea49f6fb947c90bc73cf19e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"b24326411db492f92ea49f6fb947c90bc73cf19e":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","d619839baa8ce5503e496b94a9e42ad6f079293f","723a886da5f3b2e263e30950603128b2c9e40528"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b24326411db492f92ea49f6fb947c90bc73cf19e","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f"],"723a886da5f3b2e263e30950603128b2c9e40528":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}