{"path":"src/java/org/apache/lucene/index/MultipleTermPositions#MultipleTermPositions(IndexReader,Term[]).mjava","commits":[{"id":"c7410a1292a8bc3af75faed6b753d861a192e6a5","date":1027003198,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultipleTermPositions#MultipleTermPositions(IndexReader,Term[]).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Creates a new <code>MultipleTermPositions</code> instance.\n     *\n     * @param indexReader an <code>IndexReader</code> value\n     * @param terms a <code>Term[]</code> value\n     * @exception IOException if an error occurs\n     */\n    public MultipleTermPositions(IndexReader indexReader, Term[] terms)\n\tthrows IOException\n    {\n\tList termPositions = new LinkedList();\n\n\tfor (int i=0; i<terms.length; i++)\n\t    termPositions.add(indexReader.termPositions(terms[i]));\n\n\t_termPositionsQueue = new TermPositionsQueue(termPositions);\n\t_posList = new IntQueue();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13f021657fa14e418fd91a7ba0ee78979ad71271","date":1122054106,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultipleTermPositions#MultipleTermPositions(IndexReader,Term[]).mjava","pathOld":"src/java/org/apache/lucene/index/MultipleTermPositions#MultipleTermPositions(IndexReader,Term[]).mjava","sourceNew":"  /**\n   * Creates a new <code>MultipleTermPositions</code> instance.\n   * \n   * @exception IOException\n   */\n  public MultipleTermPositions(IndexReader indexReader, Term[] terms) throws IOException {\n    List termPositions = new LinkedList();\n\n    for (int i = 0; i < terms.length; i++)\n      termPositions.add(indexReader.termPositions(terms[i]));\n\n    _termPositionsQueue = new TermPositionsQueue(termPositions);\n    _posList = new IntQueue();\n  }\n\n","sourceOld":"    /**\n     * Creates a new <code>MultipleTermPositions</code> instance.\n     *\n     * @param indexReader an <code>IndexReader</code> value\n     * @param terms a <code>Term[]</code> value\n     * @exception IOException if an error occurs\n     */\n    public MultipleTermPositions(IndexReader indexReader, Term[] terms)\n\tthrows IOException\n    {\n\tList termPositions = new LinkedList();\n\n\tfor (int i=0; i<terms.length; i++)\n\t    termPositions.add(indexReader.termPositions(terms[i]));\n\n\t_termPositionsQueue = new TermPositionsQueue(termPositions);\n\t_posList = new IntQueue();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d","date":1255859449,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultipleTermPositions#MultipleTermPositions(IndexReader,Term[]).mjava","pathOld":"src/java/org/apache/lucene/index/MultipleTermPositions#MultipleTermPositions(IndexReader,Term[]).mjava","sourceNew":"  /**\n   * Creates a new <code>MultipleTermPositions</code> instance.\n   * \n   * @exception IOException\n   */\n  public MultipleTermPositions(IndexReader indexReader, Term[] terms) throws IOException {\n    List<TermPositions> termPositions = new LinkedList<TermPositions>();\n\n    for (int i = 0; i < terms.length; i++)\n      termPositions.add(indexReader.termPositions(terms[i]));\n\n    _termPositionsQueue = new TermPositionsQueue(termPositions);\n    _posList = new IntQueue();\n  }\n\n","sourceOld":"  /**\n   * Creates a new <code>MultipleTermPositions</code> instance.\n   * \n   * @exception IOException\n   */\n  public MultipleTermPositions(IndexReader indexReader, Term[] terms) throws IOException {\n    List termPositions = new LinkedList();\n\n    for (int i = 0; i < terms.length; i++)\n      termPositions.add(indexReader.termPositions(terms[i]));\n\n    _termPositionsQueue = new TermPositionsQueue(termPositions);\n    _posList = new IntQueue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultipleTermPositions#MultipleTermPositions(IndexReader,Term[]).mjava","pathOld":"src/java/org/apache/lucene/index/MultipleTermPositions#MultipleTermPositions(IndexReader,Term[]).mjava","sourceNew":"  /**\n   * Creates a new <code>MultipleTermPositions</code> instance.\n   * \n   * @exception IOException\n   */\n  public MultipleTermPositions(IndexReader indexReader, Term[] terms) throws IOException {\n    List<TermPositions> termPositions = new LinkedList<TermPositions>();\n\n    for (int i = 0; i < terms.length; i++)\n      termPositions.add(indexReader.termPositions(terms[i]));\n\n    _termPositionsQueue = new TermPositionsQueue(termPositions);\n    _posList = new IntQueue();\n  }\n\n","sourceOld":"  /**\n   * Creates a new <code>MultipleTermPositions</code> instance.\n   * \n   * @exception IOException\n   */\n  public MultipleTermPositions(IndexReader indexReader, Term[] terms) throws IOException {\n    List<TermPositions> termPositions = new LinkedList<TermPositions>();\n\n    for (int i = 0; i < terms.length; i++)\n      termPositions.add(indexReader.termPositions(terms[i]));\n\n    _termPositionsQueue = new TermPositionsQueue(termPositions);\n    _posList = new IntQueue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d":["13f021657fa14e418fd91a7ba0ee78979ad71271"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"13f021657fa14e418fd91a7ba0ee78979ad71271":["c7410a1292a8bc3af75faed6b753d861a192e6a5"],"c7410a1292a8bc3af75faed6b753d861a192e6a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["fa27b750ee9a51ec4bed93ef328aef9ca1e2153d"]},"commit2Childs":{"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7410a1292a8bc3af75faed6b753d861a192e6a5"],"13f021657fa14e418fd91a7ba0ee78979ad71271":["fa27b750ee9a51ec4bed93ef328aef9ca1e2153d"],"c7410a1292a8bc3af75faed6b753d861a192e6a5":["13f021657fa14e418fd91a7ba0ee78979ad71271"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}