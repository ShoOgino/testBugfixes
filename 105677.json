{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/HistogramEvaluator#doWork(Object...).mjava","commits":[{"id":"ba1e7de64990e3928b90142a52fb92eeff556475","date":1503713257,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/HistogramEvaluator#doWork(Object...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n    if(Arrays.stream(values).anyMatch(item -> null == item)){\n      return null;\n    }\n    \n    List<?> sourceValues;\n    Integer bins = 10;\n    \n    if(values.length >= 1){\n      sourceValues = values[0] instanceof List<?> ? (List<?>)values[0] : Arrays.asList(values[0]); \n            \n      if(values.length >= 2){\n        if(values[1] instanceof Number){\n          bins = ((Number)values[1]).intValue();\n        }\n        else{\n          throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - if second parameter is provided then it must be a valid number but found %s instead\",toExpression(constructingFactory), values[1].getClass().getSimpleName()));\n        }        \n      }      \n    }\n    else{\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one value but found %d\",toExpression(constructingFactory),containedEvaluators.size()));\n    }\n\n    EmpiricalDistribution distribution = new EmpiricalDistribution(bins);\n    distribution.load(((List<?>)sourceValues).stream().mapToDouble(value -> ((Number)value).doubleValue()).toArray());;\n\n    List<Map<String,Number>> histogramBins = new ArrayList<>();\n    for(SummaryStatistics binSummary : distribution.getBinStats()) {\n      Map<String,Number> map = new HashMap<>();\n      map.put(\"max\", binSummary.getMax());\n      map.put(\"mean\", binSummary.getMean());\n      map.put(\"min\", binSummary.getMin());\n      map.put(\"stdev\", binSummary.getStandardDeviation());\n      map.put(\"sum\", binSummary.getSum());\n      map.put(\"N\", binSummary.getN());\n      map.put(\"var\", binSummary.getVariance());\n      histogramBins.add(map);\n    }\n    \n    return histogramBins;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45c28dbb559366e1f4ef8077346552bfb3f7ecf6","date":1503738439,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/HistogramEvaluator#doWork(Object...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n    if(Arrays.stream(values).anyMatch(item -> null == item)){\n      return null;\n    }\n    \n    List<?> sourceValues;\n    Integer bins = 10;\n    \n    if(values.length >= 1){\n      sourceValues = values[0] instanceof List<?> ? (List<?>)values[0] : Arrays.asList(values[0]); \n            \n      if(values.length >= 2){\n        if(values[1] instanceof Number){\n          bins = ((Number)values[1]).intValue();\n        }\n        else{\n          throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - if second parameter is provided then it must be a valid number but found %s instead\",toExpression(constructingFactory), values[1].getClass().getSimpleName()));\n        }        \n      }      \n    }\n    else{\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one value but found %d\",toExpression(constructingFactory),containedEvaluators.size()));\n    }\n\n    EmpiricalDistribution distribution = new EmpiricalDistribution(bins);\n    distribution.load(((List<?>)sourceValues).stream().mapToDouble(value -> ((Number)value).doubleValue()).toArray());;\n\n    List<Map<String,Number>> histogramBins = new ArrayList<>();\n    for(SummaryStatistics binSummary : distribution.getBinStats()) {\n      Map<String,Number> map = new HashMap<>();\n      map.put(\"max\", binSummary.getMax());\n      map.put(\"mean\", binSummary.getMean());\n      map.put(\"min\", binSummary.getMin());\n      map.put(\"stdev\", binSummary.getStandardDeviation());\n      map.put(\"sum\", binSummary.getSum());\n      map.put(\"N\", binSummary.getN());\n      map.put(\"var\", binSummary.getVariance());\n      histogramBins.add(map);\n    }\n    \n    return histogramBins;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/HistogramEvaluator#doWork(Object...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n    if(Arrays.stream(values).anyMatch(item -> null == item)){\n      return null;\n    }\n    \n    List<?> sourceValues;\n    Integer bins = 10;\n    \n    if(values.length >= 1){\n      sourceValues = values[0] instanceof List<?> ? (List<?>)values[0] : Arrays.asList(values[0]); \n            \n      if(values.length >= 2){\n        if(values[1] instanceof Number){\n          bins = ((Number)values[1]).intValue();\n        }\n        else{\n          throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - if second parameter is provided then it must be a valid number but found %s instead\",toExpression(constructingFactory), values[1].getClass().getSimpleName()));\n        }        \n      }      \n    }\n    else{\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one value but found %d\",toExpression(constructingFactory),containedEvaluators.size()));\n    }\n\n    EmpiricalDistribution distribution = new EmpiricalDistribution(bins);\n    distribution.load(((List<?>)sourceValues).stream().mapToDouble(value -> ((Number)value).doubleValue()).toArray());;\n\n    List<Map<String,Number>> histogramBins = new ArrayList<>();\n    for(SummaryStatistics binSummary : distribution.getBinStats()) {\n      Map<String,Number> map = new HashMap<>();\n      map.put(\"max\", binSummary.getMax());\n      map.put(\"mean\", binSummary.getMean());\n      map.put(\"min\", binSummary.getMin());\n      map.put(\"stdev\", binSummary.getStandardDeviation());\n      map.put(\"sum\", binSummary.getSum());\n      map.put(\"N\", binSummary.getN());\n      map.put(\"var\", binSummary.getVariance());\n      histogramBins.add(map);\n    }\n    \n    return histogramBins;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e0b0bd2390447c6bd25cf9e62be59a117394eab","date":1504711924,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/HistogramEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/HistogramEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n    if(Arrays.stream(values).anyMatch(item -> null == item)){\n      return null;\n    }\n    \n    List<?> sourceValues;\n    Integer bins = 10;\n    \n    if(values.length >= 1){\n      sourceValues = values[0] instanceof List<?> ? (List<?>)values[0] : Arrays.asList(values[0]); \n            \n      if(values.length >= 2){\n        if(values[1] instanceof Number){\n          bins = ((Number)values[1]).intValue();\n        }\n        else{\n          throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - if second parameter is provided then it must be a valid number but found %s instead\",toExpression(constructingFactory), values[1].getClass().getSimpleName()));\n        }        \n      }      \n    }\n    else{\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one value but found %d\",toExpression(constructingFactory),containedEvaluators.size()));\n    }\n\n    EmpiricalDistribution distribution = new EmpiricalDistribution(bins);\n    distribution.load(((List<?>)sourceValues).stream().mapToDouble(value -> ((Number)value).doubleValue()).toArray());;\n\n    List<Tuple> histogramBins = new ArrayList<>();\n    for(SummaryStatistics binSummary : distribution.getBinStats()) {\n      Map<String,Number> map = new HashMap<>();\n      map.put(\"max\", binSummary.getMax());\n      map.put(\"mean\", binSummary.getMean());\n      map.put(\"min\", binSummary.getMin());\n      map.put(\"stdev\", binSummary.getStandardDeviation());\n      map.put(\"sum\", binSummary.getSum());\n      map.put(\"N\", binSummary.getN());\n      map.put(\"var\", binSummary.getVariance());\n      map.put(\"cumProb\", distribution.cumulativeProbability(binSummary.getMean()));\n      map.put(\"prob\", distribution.probability(binSummary.getMin(), binSummary.getMax()));\n      histogramBins.add(new Tuple(map));\n    }\n    \n    return histogramBins;\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object... values) throws IOException {\n    if(Arrays.stream(values).anyMatch(item -> null == item)){\n      return null;\n    }\n    \n    List<?> sourceValues;\n    Integer bins = 10;\n    \n    if(values.length >= 1){\n      sourceValues = values[0] instanceof List<?> ? (List<?>)values[0] : Arrays.asList(values[0]); \n            \n      if(values.length >= 2){\n        if(values[1] instanceof Number){\n          bins = ((Number)values[1]).intValue();\n        }\n        else{\n          throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - if second parameter is provided then it must be a valid number but found %s instead\",toExpression(constructingFactory), values[1].getClass().getSimpleName()));\n        }        \n      }      \n    }\n    else{\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one value but found %d\",toExpression(constructingFactory),containedEvaluators.size()));\n    }\n\n    EmpiricalDistribution distribution = new EmpiricalDistribution(bins);\n    distribution.load(((List<?>)sourceValues).stream().mapToDouble(value -> ((Number)value).doubleValue()).toArray());;\n\n    List<Map<String,Number>> histogramBins = new ArrayList<>();\n    for(SummaryStatistics binSummary : distribution.getBinStats()) {\n      Map<String,Number> map = new HashMap<>();\n      map.put(\"max\", binSummary.getMax());\n      map.put(\"mean\", binSummary.getMean());\n      map.put(\"min\", binSummary.getMin());\n      map.put(\"stdev\", binSummary.getStandardDeviation());\n      map.put(\"sum\", binSummary.getSum());\n      map.put(\"N\", binSummary.getN());\n      map.put(\"var\", binSummary.getVariance());\n      histogramBins.add(map);\n    }\n    \n    return histogramBins;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","date":1504848000,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/HistogramEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/HistogramEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n    if(Arrays.stream(values).anyMatch(item -> null == item)){\n      return null;\n    }\n    \n    List<?> sourceValues;\n    Integer bins = 10;\n    \n    if(values.length >= 1){\n      sourceValues = values[0] instanceof List<?> ? (List<?>)values[0] : Arrays.asList(values[0]); \n            \n      if(values.length >= 2){\n        if(values[1] instanceof Number){\n          bins = ((Number)values[1]).intValue();\n        }\n        else{\n          throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - if second parameter is provided then it must be a valid number but found %s instead\",toExpression(constructingFactory), values[1].getClass().getSimpleName()));\n        }        \n      }      \n    }\n    else{\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one value but found %d\",toExpression(constructingFactory),containedEvaluators.size()));\n    }\n\n    EmpiricalDistribution distribution = new EmpiricalDistribution(bins);\n    distribution.load(((List<?>)sourceValues).stream().mapToDouble(value -> ((Number)value).doubleValue()).toArray());;\n\n    List<Tuple> histogramBins = new ArrayList<>();\n    for(SummaryStatistics binSummary : distribution.getBinStats()) {\n      Map<String,Number> map = new HashMap<>();\n      map.put(\"max\", binSummary.getMax());\n      map.put(\"mean\", binSummary.getMean());\n      map.put(\"min\", binSummary.getMin());\n      map.put(\"stdev\", binSummary.getStandardDeviation());\n      map.put(\"sum\", binSummary.getSum());\n      map.put(\"N\", binSummary.getN());\n      map.put(\"var\", binSummary.getVariance());\n      map.put(\"cumProb\", distribution.cumulativeProbability(binSummary.getMean()));\n      map.put(\"prob\", distribution.probability(binSummary.getMin(), binSummary.getMax()));\n      histogramBins.add(new Tuple(map));\n    }\n    \n    return histogramBins;\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object... values) throws IOException {\n    if(Arrays.stream(values).anyMatch(item -> null == item)){\n      return null;\n    }\n    \n    List<?> sourceValues;\n    Integer bins = 10;\n    \n    if(values.length >= 1){\n      sourceValues = values[0] instanceof List<?> ? (List<?>)values[0] : Arrays.asList(values[0]); \n            \n      if(values.length >= 2){\n        if(values[1] instanceof Number){\n          bins = ((Number)values[1]).intValue();\n        }\n        else{\n          throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - if second parameter is provided then it must be a valid number but found %s instead\",toExpression(constructingFactory), values[1].getClass().getSimpleName()));\n        }        \n      }      \n    }\n    else{\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one value but found %d\",toExpression(constructingFactory),containedEvaluators.size()));\n    }\n\n    EmpiricalDistribution distribution = new EmpiricalDistribution(bins);\n    distribution.load(((List<?>)sourceValues).stream().mapToDouble(value -> ((Number)value).doubleValue()).toArray());;\n\n    List<Map<String,Number>> histogramBins = new ArrayList<>();\n    for(SummaryStatistics binSummary : distribution.getBinStats()) {\n      Map<String,Number> map = new HashMap<>();\n      map.put(\"max\", binSummary.getMax());\n      map.put(\"mean\", binSummary.getMean());\n      map.put(\"min\", binSummary.getMin());\n      map.put(\"stdev\", binSummary.getStandardDeviation());\n      map.put(\"sum\", binSummary.getSum());\n      map.put(\"N\", binSummary.getN());\n      map.put(\"var\", binSummary.getVariance());\n      histogramBins.add(map);\n    }\n    \n    return histogramBins;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/HistogramEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/HistogramEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n    if(Arrays.stream(values).anyMatch(item -> null == item)){\n      return null;\n    }\n    \n    List<?> sourceValues;\n    Integer bins = 10;\n    \n    if(values.length >= 1){\n      sourceValues = values[0] instanceof List<?> ? (List<?>)values[0] : Arrays.asList(values[0]); \n            \n      if(values.length >= 2){\n        if(values[1] instanceof Number){\n          bins = ((Number)values[1]).intValue();\n        }\n        else{\n          throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - if second parameter is provided then it must be a valid number but found %s instead\",toExpression(constructingFactory), values[1].getClass().getSimpleName()));\n        }        \n      }      \n    }\n    else{\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one value but found %d\",toExpression(constructingFactory),containedEvaluators.size()));\n    }\n\n    EmpiricalDistribution distribution = new EmpiricalDistribution(bins);\n    distribution.load(((List<?>)sourceValues).stream().mapToDouble(value -> ((Number)value).doubleValue()).toArray());;\n\n    List<Tuple> histogramBins = new ArrayList<>();\n    for(SummaryStatistics binSummary : distribution.getBinStats()) {\n      Map<String,Number> map = new HashMap<>();\n      map.put(\"max\", binSummary.getMax());\n      map.put(\"mean\", binSummary.getMean());\n      map.put(\"min\", binSummary.getMin());\n      map.put(\"stdev\", binSummary.getStandardDeviation());\n      map.put(\"sum\", binSummary.getSum());\n      map.put(\"N\", binSummary.getN());\n      map.put(\"var\", binSummary.getVariance());\n      map.put(\"cumProb\", distribution.cumulativeProbability(binSummary.getMean()));\n      map.put(\"prob\", distribution.probability(binSummary.getMin(), binSummary.getMax()));\n      histogramBins.add(new Tuple(map));\n    }\n    \n    return histogramBins;\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object... values) throws IOException {\n    if(Arrays.stream(values).anyMatch(item -> null == item)){\n      return null;\n    }\n    \n    List<?> sourceValues;\n    Integer bins = 10;\n    \n    if(values.length >= 1){\n      sourceValues = values[0] instanceof List<?> ? (List<?>)values[0] : Arrays.asList(values[0]); \n            \n      if(values.length >= 2){\n        if(values[1] instanceof Number){\n          bins = ((Number)values[1]).intValue();\n        }\n        else{\n          throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - if second parameter is provided then it must be a valid number but found %s instead\",toExpression(constructingFactory), values[1].getClass().getSimpleName()));\n        }        \n      }      \n    }\n    else{\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one value but found %d\",toExpression(constructingFactory),containedEvaluators.size()));\n    }\n\n    EmpiricalDistribution distribution = new EmpiricalDistribution(bins);\n    distribution.load(((List<?>)sourceValues).stream().mapToDouble(value -> ((Number)value).doubleValue()).toArray());;\n\n    List<Map<String,Number>> histogramBins = new ArrayList<>();\n    for(SummaryStatistics binSummary : distribution.getBinStats()) {\n      Map<String,Number> map = new HashMap<>();\n      map.put(\"max\", binSummary.getMax());\n      map.put(\"mean\", binSummary.getMean());\n      map.put(\"min\", binSummary.getMin());\n      map.put(\"stdev\", binSummary.getStandardDeviation());\n      map.put(\"sum\", binSummary.getSum());\n      map.put(\"N\", binSummary.getN());\n      map.put(\"var\", binSummary.getVariance());\n      histogramBins.add(map);\n    }\n    \n    return histogramBins;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804a8d5358fe7b7563b85ee7838714d720b89272","date":1591624987,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/HistogramEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/HistogramEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n    if(Arrays.stream(values).anyMatch(item -> null == item)){\n      return null;\n    }\n    \n    List<?> sourceValues;\n    Integer bins = 10;\n    \n    if(values.length >= 1){\n      sourceValues = values[0] instanceof List<?> ? (List<?>)values[0] : Arrays.asList(values[0]); \n            \n      if(values.length >= 2){\n        if(values[1] instanceof Number){\n          bins = ((Number)values[1]).intValue();\n        }\n        else{\n          throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - if second parameter is provided then it must be a valid number but found %s instead\",toExpression(constructingFactory), values[1].getClass().getSimpleName()));\n        }        \n      }      \n    }\n    else{\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one value but found %d\",toExpression(constructingFactory),containedEvaluators.size()));\n    }\n\n    EmpiricalDistribution distribution = new EmpiricalDistribution(bins);\n    distribution.load(((List<?>)sourceValues).stream().mapToDouble(value -> ((Number)value).doubleValue()).toArray());;\n\n    List<Tuple> histogramBins = new ArrayList<>();\n    for(SummaryStatistics binSummary : distribution.getBinStats()) {\n      Tuple tuple = new Tuple();\n      tuple.put(\"max\", binSummary.getMax());\n      tuple.put(\"mean\", binSummary.getMean());\n      tuple.put(\"min\", binSummary.getMin());\n      tuple.put(\"stdev\", binSummary.getStandardDeviation());\n      tuple.put(\"sum\", binSummary.getSum());\n      tuple.put(\"N\", binSummary.getN());\n      tuple.put(\"var\", binSummary.getVariance());\n      tuple.put(\"cumProb\", distribution.cumulativeProbability(binSummary.getMean()));\n      tuple.put(\"prob\", distribution.probability(binSummary.getMin(), binSummary.getMax()));\n      histogramBins.add(tuple);\n    }\n    \n    return histogramBins;\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object... values) throws IOException {\n    if(Arrays.stream(values).anyMatch(item -> null == item)){\n      return null;\n    }\n    \n    List<?> sourceValues;\n    Integer bins = 10;\n    \n    if(values.length >= 1){\n      sourceValues = values[0] instanceof List<?> ? (List<?>)values[0] : Arrays.asList(values[0]); \n            \n      if(values.length >= 2){\n        if(values[1] instanceof Number){\n          bins = ((Number)values[1]).intValue();\n        }\n        else{\n          throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - if second parameter is provided then it must be a valid number but found %s instead\",toExpression(constructingFactory), values[1].getClass().getSimpleName()));\n        }        \n      }      \n    }\n    else{\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one value but found %d\",toExpression(constructingFactory),containedEvaluators.size()));\n    }\n\n    EmpiricalDistribution distribution = new EmpiricalDistribution(bins);\n    distribution.load(((List<?>)sourceValues).stream().mapToDouble(value -> ((Number)value).doubleValue()).toArray());;\n\n    List<Tuple> histogramBins = new ArrayList<>();\n    for(SummaryStatistics binSummary : distribution.getBinStats()) {\n      Map<String,Number> map = new HashMap<>();\n      map.put(\"max\", binSummary.getMax());\n      map.put(\"mean\", binSummary.getMean());\n      map.put(\"min\", binSummary.getMin());\n      map.put(\"stdev\", binSummary.getStandardDeviation());\n      map.put(\"sum\", binSummary.getSum());\n      map.put(\"N\", binSummary.getN());\n      map.put(\"var\", binSummary.getVariance());\n      map.put(\"cumProb\", distribution.cumulativeProbability(binSummary.getMean()));\n      map.put(\"prob\", distribution.probability(binSummary.getMin(), binSummary.getMax()));\n      histogramBins.add(new Tuple(map));\n    }\n    \n    return histogramBins;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"685bd38810c206c93e9058f3c2cfa9827c086c27":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6","9e0b0bd2390447c6bd25cf9e62be59a117394eab"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"9e0b0bd2390447c6bd25cf9e62be59a117394eab":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ba1e7de64990e3928b90142a52fb92eeff556475"],"ba1e7de64990e3928b90142a52fb92eeff556475":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"804a8d5358fe7b7563b85ee7838714d720b89272":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["804a8d5358fe7b7563b85ee7838714d720b89272"]},"commit2Childs":{"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["685bd38810c206c93e9058f3c2cfa9827c086c27"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["685bd38810c206c93e9058f3c2cfa9827c086c27","804a8d5358fe7b7563b85ee7838714d720b89272"],"9e0b0bd2390447c6bd25cf9e62be59a117394eab":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","45c28dbb559366e1f4ef8077346552bfb3f7ecf6","ba1e7de64990e3928b90142a52fb92eeff556475"],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","3a7809d1d753b67f48b1a706e17034bf8b624ea3","9e0b0bd2390447c6bd25cf9e62be59a117394eab"],"ba1e7de64990e3928b90142a52fb92eeff556475":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"804a8d5358fe7b7563b85ee7838714d720b89272":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}