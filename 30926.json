{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50FieldInfosWriter#write(Directory,String,String,FieldInfos,IOContext).mjava","commits":[{"id":"500867f0f15393f6b2c38c3366e414fccba04ed6","date":1411520390,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50FieldInfosWriter#write(Directory,String,String,FieldInfos,IOContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, Lucene50FieldInfosFormat.EXTENSION);\n    try (IndexOutput output = directory.createOutput(fileName, context)) {\n      CodecUtil.writeHeader(output, Lucene50FieldInfosFormat.CODEC_NAME, Lucene50FieldInfosFormat.FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        fi.checkConsistency();\n        IndexOptions indexOptions = fi.getIndexOptions();\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= Lucene50FieldInfosFormat.STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= Lucene50FieldInfosFormat.OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= Lucene50FieldInfosFormat.STORE_PAYLOADS;\n        if (fi.isIndexed()) {\n          bits |= Lucene50FieldInfosFormat.IS_INDEXED;\n          assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          if (indexOptions == IndexOptions.DOCS_ONLY) {\n            bits |= Lucene50FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n            bits |= Lucene50FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n            bits |= Lucene50FieldInfosFormat.OMIT_POSITIONS;\n          }\n        }\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType());\n        final byte nrm = docValuesByte(fi.getNormType());\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n        output.writeLong(fi.getDocValuesGen());\n        output.writeStringStringMap(fi.attributes());\n      }\n      CodecUtil.writeFooter(output);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c65d2864d936ccf22dc7ec14dd48b4dff7bacceb","date":1411653326,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50FieldInfosWriter#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50FieldInfosWriter#write(Directory,String,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene50FieldInfosFormat.EXTENSION);\n    try (IndexOutput output = directory.createOutput(fileName, context)) {\n      CodecUtil.writeHeader(output, Lucene50FieldInfosFormat.CODEC_NAME, Lucene50FieldInfosFormat.FORMAT_CURRENT);\n      output.writeString(segmentInfo.getId());\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        fi.checkConsistency();\n        IndexOptions indexOptions = fi.getIndexOptions();\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= Lucene50FieldInfosFormat.STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= Lucene50FieldInfosFormat.OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= Lucene50FieldInfosFormat.STORE_PAYLOADS;\n        if (fi.isIndexed()) {\n          bits |= Lucene50FieldInfosFormat.IS_INDEXED;\n          assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          if (indexOptions == IndexOptions.DOCS_ONLY) {\n            bits |= Lucene50FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n            bits |= Lucene50FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n            bits |= Lucene50FieldInfosFormat.OMIT_POSITIONS;\n          }\n        }\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType());\n        final byte nrm = docValuesByte(fi.getNormType());\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n        output.writeLong(fi.getDocValuesGen());\n        output.writeStringStringMap(fi.attributes());\n      }\n      CodecUtil.writeFooter(output);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, Lucene50FieldInfosFormat.EXTENSION);\n    try (IndexOutput output = directory.createOutput(fileName, context)) {\n      CodecUtil.writeHeader(output, Lucene50FieldInfosFormat.CODEC_NAME, Lucene50FieldInfosFormat.FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        fi.checkConsistency();\n        IndexOptions indexOptions = fi.getIndexOptions();\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= Lucene50FieldInfosFormat.STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= Lucene50FieldInfosFormat.OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= Lucene50FieldInfosFormat.STORE_PAYLOADS;\n        if (fi.isIndexed()) {\n          bits |= Lucene50FieldInfosFormat.IS_INDEXED;\n          assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          if (indexOptions == IndexOptions.DOCS_ONLY) {\n            bits |= Lucene50FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n            bits |= Lucene50FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n            bits |= Lucene50FieldInfosFormat.OMIT_POSITIONS;\n          }\n        }\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType());\n        final byte nrm = docValuesByte(fi.getNormType());\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n        output.writeLong(fi.getDocValuesGen());\n        output.writeStringStringMap(fi.attributes());\n      }\n      CodecUtil.writeFooter(output);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f6bd27530a2846413fe2d00030493c0e2d3a072","date":1411811855,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50FieldInfosWriter#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50FieldInfosWriter#write(Directory,String,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene50FieldInfosFormat.EXTENSION);\n    try (IndexOutput output = directory.createOutput(fileName, context)) {\n      CodecUtil.writeSegmentHeader(output, Lucene50FieldInfosFormat.CODEC_NAME, Lucene50FieldInfosFormat.FORMAT_CURRENT, segmentInfo.getId());\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        fi.checkConsistency();\n        IndexOptions indexOptions = fi.getIndexOptions();\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= Lucene50FieldInfosFormat.STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= Lucene50FieldInfosFormat.OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= Lucene50FieldInfosFormat.STORE_PAYLOADS;\n        if (fi.isIndexed()) {\n          bits |= Lucene50FieldInfosFormat.IS_INDEXED;\n          assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          if (indexOptions == IndexOptions.DOCS_ONLY) {\n            bits |= Lucene50FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n            bits |= Lucene50FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n            bits |= Lucene50FieldInfosFormat.OMIT_POSITIONS;\n          }\n        }\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType());\n        final byte nrm = docValuesByte(fi.getNormType());\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n        output.writeLong(fi.getDocValuesGen());\n        output.writeStringStringMap(fi.attributes());\n      }\n      CodecUtil.writeFooter(output);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, Lucene50FieldInfosFormat.EXTENSION);\n    try (IndexOutput output = directory.createOutput(fileName, context)) {\n      CodecUtil.writeHeader(output, Lucene50FieldInfosFormat.CODEC_NAME, Lucene50FieldInfosFormat.FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        fi.checkConsistency();\n        IndexOptions indexOptions = fi.getIndexOptions();\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= Lucene50FieldInfosFormat.STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= Lucene50FieldInfosFormat.OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= Lucene50FieldInfosFormat.STORE_PAYLOADS;\n        if (fi.isIndexed()) {\n          bits |= Lucene50FieldInfosFormat.IS_INDEXED;\n          assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          if (indexOptions == IndexOptions.DOCS_ONLY) {\n            bits |= Lucene50FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n            bits |= Lucene50FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n            bits |= Lucene50FieldInfosFormat.OMIT_POSITIONS;\n          }\n        }\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType());\n        final byte nrm = docValuesByte(fi.getNormType());\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n        output.writeLong(fi.getDocValuesGen());\n        output.writeStringStringMap(fi.attributes());\n      }\n      CodecUtil.writeFooter(output);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["500867f0f15393f6b2c38c3366e414fccba04ed6","c65d2864d936ccf22dc7ec14dd48b4dff7bacceb"],"500867f0f15393f6b2c38c3366e414fccba04ed6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"c65d2864d936ccf22dc7ec14dd48b4dff7bacceb":["500867f0f15393f6b2c38c3366e414fccba04ed6"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["500867f0f15393f6b2c38c3366e414fccba04ed6"],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"500867f0f15393f6b2c38c3366e414fccba04ed6":["5f6bd27530a2846413fe2d00030493c0e2d3a072","c65d2864d936ccf22dc7ec14dd48b4dff7bacceb"],"c65d2864d936ccf22dc7ec14dd48b4dff7bacceb":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}