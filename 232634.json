{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase.SeedPostings#nextPosition().mjava","commits":[{"id":"2fe4b12f0dcf02b1690143f2ad02d8f89625eb36","date":1349174553,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase.SeedPostings#nextPosition().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int nextPosition() {\n      if (!doPositions) {\n        posUpto = freq;\n        return 0;\n      }\n      assert posUpto < freq;\n\n      if (posUpto == 0 && random.nextBoolean()) {\n        // Sometimes index pos = 0\n      } else if (posSpacing == 1) {\n        pos++;\n      } else {\n        pos += _TestUtil.nextInt(random, 1, posSpacing);\n      }\n\n      if (payloadSize != 0) {\n        if (fixedPayloads) {\n          payload.length = payloadSize;\n          random.nextBytes(payload.bytes); \n        } else {\n          int thisPayloadSize = random.nextInt(payloadSize);\n          if (thisPayloadSize != 0) {\n            payload.length = payloadSize;\n            random.nextBytes(payload.bytes); \n          } else {\n            payload.length = 0;\n          }\n        } \n      } else {\n        payload.length = 0;\n      }\n\n      startOffset = offset + random.nextInt(5);\n      endOffset = startOffset + random.nextInt(10);\n      offset = endOffset;\n\n      posUpto++;\n      return pos;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["70f89cfa603e946ae442d03ca651f4558c5a6064"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","date":1379624229,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase.SeedPostings#nextPosition().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase.SeedPostings#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() {\n      if (!doPositions) {\n        posUpto = freq;\n        return 0;\n      }\n      assert posUpto < freq;\n\n      if (posUpto == 0 && random.nextBoolean()) {\n        // Sometimes index pos = 0\n      } else if (posSpacing == 1) {\n        pos++;\n      } else {\n        pos += _TestUtil.nextInt(random, 1, posSpacing);\n      }\n\n      if (payloadSize != 0) {\n        if (fixedPayloads) {\n          payload.length = payloadSize;\n          random.nextBytes(payload.bytes); \n        } else {\n          int thisPayloadSize = random.nextInt(payloadSize);\n          if (thisPayloadSize != 0) {\n            payload.length = payloadSize;\n            random.nextBytes(payload.bytes); \n          } else {\n            payload.length = 0;\n          }\n        } \n      } else {\n        payload.length = 0;\n      }\n      if (!allowPayloads) {\n        payload.length = 0;\n      }\n\n      startOffset = offset + random.nextInt(5);\n      endOffset = startOffset + random.nextInt(10);\n      offset = endOffset;\n\n      posUpto++;\n      return pos;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() {\n      if (!doPositions) {\n        posUpto = freq;\n        return 0;\n      }\n      assert posUpto < freq;\n\n      if (posUpto == 0 && random.nextBoolean()) {\n        // Sometimes index pos = 0\n      } else if (posSpacing == 1) {\n        pos++;\n      } else {\n        pos += _TestUtil.nextInt(random, 1, posSpacing);\n      }\n\n      if (payloadSize != 0) {\n        if (fixedPayloads) {\n          payload.length = payloadSize;\n          random.nextBytes(payload.bytes); \n        } else {\n          int thisPayloadSize = random.nextInt(payloadSize);\n          if (thisPayloadSize != 0) {\n            payload.length = payloadSize;\n            random.nextBytes(payload.bytes); \n          } else {\n            payload.length = 0;\n          }\n        } \n      } else {\n        payload.length = 0;\n      }\n\n      startOffset = offset + random.nextInt(5);\n      endOffset = startOffset + random.nextInt(10);\n      offset = endOffset;\n\n      posUpto++;\n      return pos;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase.SeedPostings#nextPosition().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase.SeedPostings#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() {\n      if (!doPositions) {\n        posUpto = freq;\n        return 0;\n      }\n      assert posUpto < freq;\n\n      if (posUpto == 0 && random.nextBoolean()) {\n        // Sometimes index pos = 0\n      } else if (posSpacing == 1) {\n        pos++;\n      } else {\n        pos += TestUtil.nextInt(random, 1, posSpacing);\n      }\n\n      if (payloadSize != 0) {\n        if (fixedPayloads) {\n          payload.length = payloadSize;\n          random.nextBytes(payload.bytes); \n        } else {\n          int thisPayloadSize = random.nextInt(payloadSize);\n          if (thisPayloadSize != 0) {\n            payload.length = payloadSize;\n            random.nextBytes(payload.bytes); \n          } else {\n            payload.length = 0;\n          }\n        } \n      } else {\n        payload.length = 0;\n      }\n      if (!allowPayloads) {\n        payload.length = 0;\n      }\n\n      startOffset = offset + random.nextInt(5);\n      endOffset = startOffset + random.nextInt(10);\n      offset = endOffset;\n\n      posUpto++;\n      return pos;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() {\n      if (!doPositions) {\n        posUpto = freq;\n        return 0;\n      }\n      assert posUpto < freq;\n\n      if (posUpto == 0 && random.nextBoolean()) {\n        // Sometimes index pos = 0\n      } else if (posSpacing == 1) {\n        pos++;\n      } else {\n        pos += _TestUtil.nextInt(random, 1, posSpacing);\n      }\n\n      if (payloadSize != 0) {\n        if (fixedPayloads) {\n          payload.length = payloadSize;\n          random.nextBytes(payload.bytes); \n        } else {\n          int thisPayloadSize = random.nextInt(payloadSize);\n          if (thisPayloadSize != 0) {\n            payload.length = payloadSize;\n            random.nextBytes(payload.bytes); \n          } else {\n            payload.length = 0;\n          }\n        } \n      } else {\n        payload.length = 0;\n      }\n      if (!allowPayloads) {\n        payload.length = 0;\n      }\n\n      startOffset = offset + random.nextInt(5);\n      endOffset = startOffset + random.nextInt(10);\n      offset = endOffset;\n\n      posUpto++;\n      return pos;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase.SeedPostings#nextPosition().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase.SeedPostings#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() {\n      if (!doPositions) {\n        posUpto = freq;\n        return 0;\n      }\n      assert posUpto < freq;\n      \n      if (posUpto == 0 && random.nextBoolean()) {\n        // Sometimes index pos = 0\n      } else if (posSpacing == 1) {\n        pos++;\n      } else {\n        pos += TestUtil.nextInt(random, 1, posSpacing);\n      }\n\n      if (payloadSize != 0) {\n        if (fixedPayloads) {\n          payload.length = payloadSize;\n          random.nextBytes(payload.bytes); \n        } else {\n          int thisPayloadSize = random.nextInt(payloadSize);\n          if (thisPayloadSize != 0) {\n            payload.length = payloadSize;\n            random.nextBytes(payload.bytes); \n          } else {\n            payload.length = 0;\n          }\n        } \n      } else {\n        payload.length = 0;\n      }\n      if (!allowPayloads) {\n        payload.length = 0;\n      }\n\n      startOffset = offset + random.nextInt(5);\n      endOffset = startOffset + random.nextInt(10);\n      offset = endOffset;\n\n      posUpto++;\n      return pos;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() {\n      if (!doPositions) {\n        posUpto = freq;\n        return 0;\n      }\n      assert posUpto < freq;\n\n      if (posUpto == 0 && random.nextBoolean()) {\n        // Sometimes index pos = 0\n      } else if (posSpacing == 1) {\n        pos++;\n      } else {\n        pos += TestUtil.nextInt(random, 1, posSpacing);\n      }\n\n      if (payloadSize != 0) {\n        if (fixedPayloads) {\n          payload.length = payloadSize;\n          random.nextBytes(payload.bytes); \n        } else {\n          int thisPayloadSize = random.nextInt(payloadSize);\n          if (thisPayloadSize != 0) {\n            payload.length = payloadSize;\n            random.nextBytes(payload.bytes); \n          } else {\n            payload.length = 0;\n          }\n        } \n      } else {\n        payload.length = 0;\n      }\n      if (!allowPayloads) {\n        payload.length = 0;\n      }\n\n      startOffset = offset + random.nextInt(5);\n      endOffset = startOffset + random.nextInt(10);\n      offset = endOffset;\n\n      posUpto++;\n      return pos;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70f89cfa603e946ae442d03ca651f4558c5a6064","date":1424410027,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase.SeedPostings#nextPosition().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase.SeedPostings#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() {\n      if (!doPositions) {\n        posUpto = freq;\n        return -1;\n      }\n      assert posUpto < freq;\n      \n      if (posUpto == 0 && random.nextBoolean()) {\n        // Sometimes index pos = 0\n      } else if (posSpacing == 1) {\n        pos++;\n      } else {\n        pos += TestUtil.nextInt(random, 1, posSpacing);\n      }\n\n      if (payloadSize != 0) {\n        if (fixedPayloads) {\n          payload.length = payloadSize;\n          random.nextBytes(payload.bytes); \n        } else {\n          int thisPayloadSize = random.nextInt(payloadSize);\n          if (thisPayloadSize != 0) {\n            payload.length = payloadSize;\n            random.nextBytes(payload.bytes); \n          } else {\n            payload.length = 0;\n          }\n        } \n      } else {\n        payload.length = 0;\n      }\n      if (!allowPayloads) {\n        payload.length = 0;\n      }\n\n      startOffset = offset + random.nextInt(5);\n      endOffset = startOffset + random.nextInt(10);\n      offset = endOffset;\n\n      posUpto++;\n      return pos;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() {\n      if (!doPositions) {\n        posUpto = freq;\n        return 0;\n      }\n      assert posUpto < freq;\n      \n      if (posUpto == 0 && random.nextBoolean()) {\n        // Sometimes index pos = 0\n      } else if (posSpacing == 1) {\n        pos++;\n      } else {\n        pos += TestUtil.nextInt(random, 1, posSpacing);\n      }\n\n      if (payloadSize != 0) {\n        if (fixedPayloads) {\n          payload.length = payloadSize;\n          random.nextBytes(payload.bytes); \n        } else {\n          int thisPayloadSize = random.nextInt(payloadSize);\n          if (thisPayloadSize != 0) {\n            payload.length = payloadSize;\n            random.nextBytes(payload.bytes); \n          } else {\n            payload.length = 0;\n          }\n        } \n      } else {\n        payload.length = 0;\n      }\n      if (!allowPayloads) {\n        payload.length = 0;\n      }\n\n      startOffset = offset + random.nextInt(5);\n      endOffset = startOffset + random.nextInt(10);\n      offset = endOffset;\n\n      posUpto++;\n      return pos;\n    }\n\n","bugFix":["2fe4b12f0dcf02b1690143f2ad02d8f89625eb36"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomPostingsTester.SeedPostings#nextPosition().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase.SeedPostings#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() {\n      if (!doPositions) {\n        posUpto = freq;\n        return -1;\n      }\n      assert posUpto < freq;\n      \n      if (posUpto == 0 && random.nextBoolean()) {\n        // Sometimes index pos = 0\n      } else if (posSpacing == 1) {\n        pos++;\n      } else {\n        pos += TestUtil.nextInt(random, 1, posSpacing);\n      }\n\n      if (payloadSize != 0) {\n        if (fixedPayloads) {\n          payload.length = payloadSize;\n          random.nextBytes(payload.bytes); \n        } else {\n          int thisPayloadSize = random.nextInt(payloadSize);\n          if (thisPayloadSize != 0) {\n            payload.length = payloadSize;\n            random.nextBytes(payload.bytes); \n          } else {\n            payload.length = 0;\n          }\n        } \n      } else {\n        payload.length = 0;\n      }\n      if (!allowPayloads) {\n        payload.length = 0;\n      }\n\n      startOffset = offset + random.nextInt(5);\n      endOffset = startOffset + random.nextInt(10);\n      offset = endOffset;\n\n      posUpto++;\n      return pos;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() {\n      if (!doPositions) {\n        posUpto = freq;\n        return -1;\n      }\n      assert posUpto < freq;\n      \n      if (posUpto == 0 && random.nextBoolean()) {\n        // Sometimes index pos = 0\n      } else if (posSpacing == 1) {\n        pos++;\n      } else {\n        pos += TestUtil.nextInt(random, 1, posSpacing);\n      }\n\n      if (payloadSize != 0) {\n        if (fixedPayloads) {\n          payload.length = payloadSize;\n          random.nextBytes(payload.bytes); \n        } else {\n          int thisPayloadSize = random.nextInt(payloadSize);\n          if (thisPayloadSize != 0) {\n            payload.length = payloadSize;\n            random.nextBytes(payload.bytes); \n          } else {\n            payload.length = 0;\n          }\n        } \n      } else {\n        payload.length = 0;\n      }\n      if (!allowPayloads) {\n        payload.length = 0;\n      }\n\n      startOffset = offset + random.nextInt(5);\n      endOffset = startOffset + random.nextInt(10);\n      offset = endOffset;\n\n      posUpto++;\n      return pos;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomPostingsTester.SeedPostings#nextPosition().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase.SeedPostings#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() {\n      if (!doPositions) {\n        posUpto = freq;\n        return -1;\n      }\n      assert posUpto < freq;\n      \n      if (posUpto == 0 && random.nextBoolean()) {\n        // Sometimes index pos = 0\n      } else if (posSpacing == 1) {\n        pos++;\n      } else {\n        pos += TestUtil.nextInt(random, 1, posSpacing);\n      }\n\n      if (payloadSize != 0) {\n        if (fixedPayloads) {\n          payload.length = payloadSize;\n          random.nextBytes(payload.bytes); \n        } else {\n          int thisPayloadSize = random.nextInt(payloadSize);\n          if (thisPayloadSize != 0) {\n            payload.length = payloadSize;\n            random.nextBytes(payload.bytes); \n          } else {\n            payload.length = 0;\n          }\n        } \n      } else {\n        payload.length = 0;\n      }\n      if (!allowPayloads) {\n        payload.length = 0;\n      }\n\n      startOffset = offset + random.nextInt(5);\n      endOffset = startOffset + random.nextInt(10);\n      offset = endOffset;\n\n      posUpto++;\n      return pos;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() {\n      if (!doPositions) {\n        posUpto = freq;\n        return -1;\n      }\n      assert posUpto < freq;\n      \n      if (posUpto == 0 && random.nextBoolean()) {\n        // Sometimes index pos = 0\n      } else if (posSpacing == 1) {\n        pos++;\n      } else {\n        pos += TestUtil.nextInt(random, 1, posSpacing);\n      }\n\n      if (payloadSize != 0) {\n        if (fixedPayloads) {\n          payload.length = payloadSize;\n          random.nextBytes(payload.bytes); \n        } else {\n          int thisPayloadSize = random.nextInt(payloadSize);\n          if (thisPayloadSize != 0) {\n            payload.length = payloadSize;\n            random.nextBytes(payload.bytes); \n          } else {\n            payload.length = 0;\n          }\n        } \n      } else {\n        payload.length = 0;\n      }\n      if (!allowPayloads) {\n        payload.length = 0;\n      }\n\n      startOffset = offset + random.nextInt(5);\n      endOffset = startOffset + random.nextInt(10);\n      offset = endOffset;\n\n      posUpto++;\n      return pos;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f89cfa603e946ae442d03ca651f4558c5a6064":["51f5280f31484820499077f41fcdfe92d527d9dc"],"6613659748fe4411a7dcf85266e55db1f95f7315":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["2fe4b12f0dcf02b1690143f2ad02d8f89625eb36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["70f89cfa603e946ae442d03ca651f4558c5a6064","3e8715d826e588419327562287d5d6a8040d63d6"],"3e8715d826e588419327562287d5d6a8040d63d6":["70f89cfa603e946ae442d03ca651f4558c5a6064"],"51f5280f31484820499077f41fcdfe92d527d9dc":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e8715d826e588419327562287d5d6a8040d63d6"],"2fe4b12f0dcf02b1690143f2ad02d8f89625eb36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70f89cfa603e946ae442d03ca651f4558c5a6064":["d2638f781be724518ff6c2263d14a48cf6e68017","3e8715d826e588419327562287d5d6a8040d63d6"],"6613659748fe4411a7dcf85266e55db1f95f7315":["51f5280f31484820499077f41fcdfe92d527d9dc"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["6613659748fe4411a7dcf85266e55db1f95f7315"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2fe4b12f0dcf02b1690143f2ad02d8f89625eb36"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"3e8715d826e588419327562287d5d6a8040d63d6":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"51f5280f31484820499077f41fcdfe92d527d9dc":["70f89cfa603e946ae442d03ca651f4558c5a6064"],"2fe4b12f0dcf02b1690143f2ad02d8f89625eb36":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}