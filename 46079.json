{"path":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#test2BTerms().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#test2BTerms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/Test2BTerms#test2BTerms().mjava","sourceNew":"  @Slow\n  public void test2BTerms() throws IOException {\n\n    if (\"Lucene3x\".equals(Codec.getDefault().getName())) {\n      throw new RuntimeException(\"this test cannot run with PreFlex codec\");\n    }\n    System.out.println(\"Starting Test2B\");\n    final long TERM_COUNT = ((long) Integer.MAX_VALUE) + 100000000;\n\n    final int TERMS_PER_DOC = _TestUtil.nextInt(random, 100000, 1000000);\n\n    List<BytesRef> savedTerms = null;\n\n    MockDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BTerms\"));\n    //MockDirectoryWrapper dir = newFSDirectory(new File(\"/p/lucene/indices/2bindex\"));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n\n    if (true) {\n\n      IndexWriter w = new IndexWriter(dir,\n                                      new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n                                      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setRAMBufferSizeMB(256.0)\n                                      .setMergeScheduler(new ConcurrentMergeScheduler())\n                                      .setMergePolicy(newLogMergePolicy(false, 10))\n                                      .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n      MergePolicy mp = w.getConfig().getMergePolicy();\n      if (mp instanceof LogByteSizeMergePolicy) {\n        // 1 petabyte:\n        ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n      }\n\n      Document doc = new Document();\n      final MyTokenStream ts = new MyTokenStream(random, TERMS_PER_DOC);\n\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      customType.setIndexOptions(IndexOptions.DOCS_ONLY);\n      customType.setOmitNorms(true);\n      Field field = new Field(\"field\", ts, customType);\n      doc.add(field);\n      //w.setInfoStream(System.out);\n      final int numDocs = (int) (TERM_COUNT/TERMS_PER_DOC);\n\n      System.out.println(\"TERMS_PER_DOC=\" + TERMS_PER_DOC);\n      System.out.println(\"numDocs=\" + numDocs);\n\n      for(int i=0;i<numDocs;i++) {\n        final long t0 = System.currentTimeMillis();\n        w.addDocument(doc);\n        System.out.println(i + \" of \" + numDocs + \" \" + (System.currentTimeMillis()-t0) + \" msec\");\n      }\n      savedTerms = ts.savedTerms;\n\n      System.out.println(\"TEST: full merge\");\n      w.forceMerge(1);\n      System.out.println(\"TEST: close writer\");\n      w.close();\n    }\n\n    System.out.println(\"TEST: open reader\");\n    final IndexReader r = IndexReader.open(dir);\n    if (savedTerms == null) {\n      savedTerms = findTerms(r);\n    }\n    final int numSavedTerms = savedTerms.size();\n    final List<BytesRef> bigOrdTerms = new ArrayList<BytesRef>(savedTerms.subList(numSavedTerms-10, numSavedTerms));\n    System.out.println(\"TEST: test big ord terms...\");\n    testSavedTerms(r, bigOrdTerms);\n    System.out.println(\"TEST: test all saved terms...\");\n    testSavedTerms(r, savedTerms);\n    r.close();\n\n    System.out.println(\"TEST: now CheckIndex...\");\n    CheckIndex.Status status = _TestUtil.checkIndex(dir);\n    final long tc = status.segmentInfos.get(0).termIndexStatus.termCount;\n    assertTrue(\"count \" + tc + \" is not > \" + Integer.MAX_VALUE, tc > Integer.MAX_VALUE);\n\n    dir.close();\n    System.out.println(\"TEST: done!\");\n  }\n\n","sourceOld":"  @Slow\n  public void test2BTerms() throws IOException {\n\n    if (\"Lucene3x\".equals(Codec.getDefault().getName())) {\n      throw new RuntimeException(\"this test cannot run with PreFlex codec\");\n    }\n    System.out.println(\"Starting Test2B\");\n    final long TERM_COUNT = ((long) Integer.MAX_VALUE) + 100000000;\n\n    final int TERMS_PER_DOC = _TestUtil.nextInt(random, 100000, 1000000);\n\n    List<BytesRef> savedTerms = null;\n\n    MockDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BTerms\"));\n    //MockDirectoryWrapper dir = newFSDirectory(new File(\"/p/lucene/indices/2bindex\"));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n\n    if (true) {\n\n      IndexWriter w = new IndexWriter(dir,\n                                      new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n                                      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setRAMBufferSizeMB(256.0)\n                                      .setMergeScheduler(new ConcurrentMergeScheduler())\n                                      .setMergePolicy(newLogMergePolicy(false, 10))\n                                      .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n      MergePolicy mp = w.getConfig().getMergePolicy();\n      if (mp instanceof LogByteSizeMergePolicy) {\n        // 1 petabyte:\n        ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n      }\n\n      Document doc = new Document();\n      final MyTokenStream ts = new MyTokenStream(random, TERMS_PER_DOC);\n\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      customType.setIndexOptions(IndexOptions.DOCS_ONLY);\n      customType.setOmitNorms(true);\n      Field field = new Field(\"field\", ts, customType);\n      doc.add(field);\n      //w.setInfoStream(System.out);\n      final int numDocs = (int) (TERM_COUNT/TERMS_PER_DOC);\n\n      System.out.println(\"TERMS_PER_DOC=\" + TERMS_PER_DOC);\n      System.out.println(\"numDocs=\" + numDocs);\n\n      for(int i=0;i<numDocs;i++) {\n        final long t0 = System.currentTimeMillis();\n        w.addDocument(doc);\n        System.out.println(i + \" of \" + numDocs + \" \" + (System.currentTimeMillis()-t0) + \" msec\");\n      }\n      savedTerms = ts.savedTerms;\n\n      System.out.println(\"TEST: full merge\");\n      w.forceMerge(1);\n      System.out.println(\"TEST: close writer\");\n      w.close();\n    }\n\n    System.out.println(\"TEST: open reader\");\n    final IndexReader r = IndexReader.open(dir);\n    if (savedTerms == null) {\n      savedTerms = findTerms(r);\n    }\n    final int numSavedTerms = savedTerms.size();\n    final List<BytesRef> bigOrdTerms = new ArrayList<BytesRef>(savedTerms.subList(numSavedTerms-10, numSavedTerms));\n    System.out.println(\"TEST: test big ord terms...\");\n    testSavedTerms(r, bigOrdTerms);\n    System.out.println(\"TEST: test all saved terms...\");\n    testSavedTerms(r, savedTerms);\n    r.close();\n\n    System.out.println(\"TEST: now CheckIndex...\");\n    CheckIndex.Status status = _TestUtil.checkIndex(dir);\n    final long tc = status.segmentInfos.get(0).termIndexStatus.termCount;\n    assertTrue(\"count \" + tc + \" is not > \" + Integer.MAX_VALUE, tc > Integer.MAX_VALUE);\n\n    dir.close();\n    System.out.println(\"TEST: done!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#test2BTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#test2BTerms().mjava","sourceNew":"  @Slow\n  public void test2BTerms() throws IOException {\n\n    if (\"Lucene3x\".equals(Codec.getDefault().getName())) {\n      throw new RuntimeException(\"this test cannot run with PreFlex codec\");\n    }\n    System.out.println(\"Starting Test2B\");\n    final long TERM_COUNT = ((long) Integer.MAX_VALUE) + 100000000;\n\n    final int TERMS_PER_DOC = _TestUtil.nextInt(random(), 100000, 1000000);\n\n    List<BytesRef> savedTerms = null;\n\n    MockDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BTerms\"));\n    //MockDirectoryWrapper dir = newFSDirectory(new File(\"/p/lucene/indices/2bindex\"));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n\n    if (true) {\n\n      IndexWriter w = new IndexWriter(dir,\n                                      new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n                                      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setRAMBufferSizeMB(256.0)\n                                      .setMergeScheduler(new ConcurrentMergeScheduler())\n                                      .setMergePolicy(newLogMergePolicy(false, 10))\n                                      .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n      MergePolicy mp = w.getConfig().getMergePolicy();\n      if (mp instanceof LogByteSizeMergePolicy) {\n        // 1 petabyte:\n        ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n      }\n\n      Document doc = new Document();\n      final MyTokenStream ts = new MyTokenStream(random(), TERMS_PER_DOC);\n\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      customType.setIndexOptions(IndexOptions.DOCS_ONLY);\n      customType.setOmitNorms(true);\n      Field field = new Field(\"field\", ts, customType);\n      doc.add(field);\n      //w.setInfoStream(System.out);\n      final int numDocs = (int) (TERM_COUNT/TERMS_PER_DOC);\n\n      System.out.println(\"TERMS_PER_DOC=\" + TERMS_PER_DOC);\n      System.out.println(\"numDocs=\" + numDocs);\n\n      for(int i=0;i<numDocs;i++) {\n        final long t0 = System.currentTimeMillis();\n        w.addDocument(doc);\n        System.out.println(i + \" of \" + numDocs + \" \" + (System.currentTimeMillis()-t0) + \" msec\");\n      }\n      savedTerms = ts.savedTerms;\n\n      System.out.println(\"TEST: full merge\");\n      w.forceMerge(1);\n      System.out.println(\"TEST: close writer\");\n      w.close();\n    }\n\n    System.out.println(\"TEST: open reader\");\n    final IndexReader r = IndexReader.open(dir);\n    if (savedTerms == null) {\n      savedTerms = findTerms(r);\n    }\n    final int numSavedTerms = savedTerms.size();\n    final List<BytesRef> bigOrdTerms = new ArrayList<BytesRef>(savedTerms.subList(numSavedTerms-10, numSavedTerms));\n    System.out.println(\"TEST: test big ord terms...\");\n    testSavedTerms(r, bigOrdTerms);\n    System.out.println(\"TEST: test all saved terms...\");\n    testSavedTerms(r, savedTerms);\n    r.close();\n\n    System.out.println(\"TEST: now CheckIndex...\");\n    CheckIndex.Status status = _TestUtil.checkIndex(dir);\n    final long tc = status.segmentInfos.get(0).termIndexStatus.termCount;\n    assertTrue(\"count \" + tc + \" is not > \" + Integer.MAX_VALUE, tc > Integer.MAX_VALUE);\n\n    dir.close();\n    System.out.println(\"TEST: done!\");\n  }\n\n","sourceOld":"  @Slow\n  public void test2BTerms() throws IOException {\n\n    if (\"Lucene3x\".equals(Codec.getDefault().getName())) {\n      throw new RuntimeException(\"this test cannot run with PreFlex codec\");\n    }\n    System.out.println(\"Starting Test2B\");\n    final long TERM_COUNT = ((long) Integer.MAX_VALUE) + 100000000;\n\n    final int TERMS_PER_DOC = _TestUtil.nextInt(random, 100000, 1000000);\n\n    List<BytesRef> savedTerms = null;\n\n    MockDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BTerms\"));\n    //MockDirectoryWrapper dir = newFSDirectory(new File(\"/p/lucene/indices/2bindex\"));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n\n    if (true) {\n\n      IndexWriter w = new IndexWriter(dir,\n                                      new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n                                      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setRAMBufferSizeMB(256.0)\n                                      .setMergeScheduler(new ConcurrentMergeScheduler())\n                                      .setMergePolicy(newLogMergePolicy(false, 10))\n                                      .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n      MergePolicy mp = w.getConfig().getMergePolicy();\n      if (mp instanceof LogByteSizeMergePolicy) {\n        // 1 petabyte:\n        ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n      }\n\n      Document doc = new Document();\n      final MyTokenStream ts = new MyTokenStream(random, TERMS_PER_DOC);\n\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      customType.setIndexOptions(IndexOptions.DOCS_ONLY);\n      customType.setOmitNorms(true);\n      Field field = new Field(\"field\", ts, customType);\n      doc.add(field);\n      //w.setInfoStream(System.out);\n      final int numDocs = (int) (TERM_COUNT/TERMS_PER_DOC);\n\n      System.out.println(\"TERMS_PER_DOC=\" + TERMS_PER_DOC);\n      System.out.println(\"numDocs=\" + numDocs);\n\n      for(int i=0;i<numDocs;i++) {\n        final long t0 = System.currentTimeMillis();\n        w.addDocument(doc);\n        System.out.println(i + \" of \" + numDocs + \" \" + (System.currentTimeMillis()-t0) + \" msec\");\n      }\n      savedTerms = ts.savedTerms;\n\n      System.out.println(\"TEST: full merge\");\n      w.forceMerge(1);\n      System.out.println(\"TEST: close writer\");\n      w.close();\n    }\n\n    System.out.println(\"TEST: open reader\");\n    final IndexReader r = IndexReader.open(dir);\n    if (savedTerms == null) {\n      savedTerms = findTerms(r);\n    }\n    final int numSavedTerms = savedTerms.size();\n    final List<BytesRef> bigOrdTerms = new ArrayList<BytesRef>(savedTerms.subList(numSavedTerms-10, numSavedTerms));\n    System.out.println(\"TEST: test big ord terms...\");\n    testSavedTerms(r, bigOrdTerms);\n    System.out.println(\"TEST: test all saved terms...\");\n    testSavedTerms(r, savedTerms);\n    r.close();\n\n    System.out.println(\"TEST: now CheckIndex...\");\n    CheckIndex.Status status = _TestUtil.checkIndex(dir);\n    final long tc = status.segmentInfos.get(0).termIndexStatus.termCount;\n    assertTrue(\"count \" + tc + \" is not > \" + Integer.MAX_VALUE, tc > Integer.MAX_VALUE);\n\n    dir.close();\n    System.out.println(\"TEST: done!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"57ae3024996ccdb3c36c42cb890e1efb37df4ce8","date":1338343651,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#test2BTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#test2BTerms().mjava","sourceNew":"  @Slow\n  public void test2BTerms() throws IOException {\n\n    System.out.println(\"Starting Test2B\");\n    final long TERM_COUNT = ((long) Integer.MAX_VALUE) + 100000000;\n\n    final int TERMS_PER_DOC = _TestUtil.nextInt(random(), 100000, 1000000);\n\n    List<BytesRef> savedTerms = null;\n\n    MockDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BTerms\"));\n    //MockDirectoryWrapper dir = newFSDirectory(new File(\"/p/lucene/indices/2bindex\"));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n\n    if (true) {\n\n      IndexWriter w = new IndexWriter(dir,\n                                      new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n                                      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setRAMBufferSizeMB(256.0)\n                                      .setMergeScheduler(new ConcurrentMergeScheduler())\n                                      .setMergePolicy(newLogMergePolicy(false, 10))\n                                      .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n      MergePolicy mp = w.getConfig().getMergePolicy();\n      if (mp instanceof LogByteSizeMergePolicy) {\n        // 1 petabyte:\n        ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n      }\n\n      Document doc = new Document();\n      final MyTokenStream ts = new MyTokenStream(random(), TERMS_PER_DOC);\n\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      customType.setIndexOptions(IndexOptions.DOCS_ONLY);\n      customType.setOmitNorms(true);\n      Field field = new Field(\"field\", ts, customType);\n      doc.add(field);\n      //w.setInfoStream(System.out);\n      final int numDocs = (int) (TERM_COUNT/TERMS_PER_DOC);\n\n      System.out.println(\"TERMS_PER_DOC=\" + TERMS_PER_DOC);\n      System.out.println(\"numDocs=\" + numDocs);\n\n      for(int i=0;i<numDocs;i++) {\n        final long t0 = System.currentTimeMillis();\n        w.addDocument(doc);\n        System.out.println(i + \" of \" + numDocs + \" \" + (System.currentTimeMillis()-t0) + \" msec\");\n      }\n      savedTerms = ts.savedTerms;\n\n      System.out.println(\"TEST: full merge\");\n      w.forceMerge(1);\n      System.out.println(\"TEST: close writer\");\n      w.close();\n    }\n\n    System.out.println(\"TEST: open reader\");\n    final IndexReader r = IndexReader.open(dir);\n    if (savedTerms == null) {\n      savedTerms = findTerms(r);\n    }\n    final int numSavedTerms = savedTerms.size();\n    final List<BytesRef> bigOrdTerms = new ArrayList<BytesRef>(savedTerms.subList(numSavedTerms-10, numSavedTerms));\n    System.out.println(\"TEST: test big ord terms...\");\n    testSavedTerms(r, bigOrdTerms);\n    System.out.println(\"TEST: test all saved terms...\");\n    testSavedTerms(r, savedTerms);\n    r.close();\n\n    System.out.println(\"TEST: now CheckIndex...\");\n    CheckIndex.Status status = _TestUtil.checkIndex(dir);\n    final long tc = status.segmentInfos.get(0).termIndexStatus.termCount;\n    assertTrue(\"count \" + tc + \" is not > \" + Integer.MAX_VALUE, tc > Integer.MAX_VALUE);\n\n    dir.close();\n    System.out.println(\"TEST: done!\");\n  }\n\n","sourceOld":"  @Slow\n  public void test2BTerms() throws IOException {\n\n    if (\"Lucene3x\".equals(Codec.getDefault().getName())) {\n      throw new RuntimeException(\"this test cannot run with PreFlex codec\");\n    }\n    System.out.println(\"Starting Test2B\");\n    final long TERM_COUNT = ((long) Integer.MAX_VALUE) + 100000000;\n\n    final int TERMS_PER_DOC = _TestUtil.nextInt(random(), 100000, 1000000);\n\n    List<BytesRef> savedTerms = null;\n\n    MockDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BTerms\"));\n    //MockDirectoryWrapper dir = newFSDirectory(new File(\"/p/lucene/indices/2bindex\"));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n\n    if (true) {\n\n      IndexWriter w = new IndexWriter(dir,\n                                      new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n                                      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setRAMBufferSizeMB(256.0)\n                                      .setMergeScheduler(new ConcurrentMergeScheduler())\n                                      .setMergePolicy(newLogMergePolicy(false, 10))\n                                      .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n      MergePolicy mp = w.getConfig().getMergePolicy();\n      if (mp instanceof LogByteSizeMergePolicy) {\n        // 1 petabyte:\n        ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n      }\n\n      Document doc = new Document();\n      final MyTokenStream ts = new MyTokenStream(random(), TERMS_PER_DOC);\n\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      customType.setIndexOptions(IndexOptions.DOCS_ONLY);\n      customType.setOmitNorms(true);\n      Field field = new Field(\"field\", ts, customType);\n      doc.add(field);\n      //w.setInfoStream(System.out);\n      final int numDocs = (int) (TERM_COUNT/TERMS_PER_DOC);\n\n      System.out.println(\"TERMS_PER_DOC=\" + TERMS_PER_DOC);\n      System.out.println(\"numDocs=\" + numDocs);\n\n      for(int i=0;i<numDocs;i++) {\n        final long t0 = System.currentTimeMillis();\n        w.addDocument(doc);\n        System.out.println(i + \" of \" + numDocs + \" \" + (System.currentTimeMillis()-t0) + \" msec\");\n      }\n      savedTerms = ts.savedTerms;\n\n      System.out.println(\"TEST: full merge\");\n      w.forceMerge(1);\n      System.out.println(\"TEST: close writer\");\n      w.close();\n    }\n\n    System.out.println(\"TEST: open reader\");\n    final IndexReader r = IndexReader.open(dir);\n    if (savedTerms == null) {\n      savedTerms = findTerms(r);\n    }\n    final int numSavedTerms = savedTerms.size();\n    final List<BytesRef> bigOrdTerms = new ArrayList<BytesRef>(savedTerms.subList(numSavedTerms-10, numSavedTerms));\n    System.out.println(\"TEST: test big ord terms...\");\n    testSavedTerms(r, bigOrdTerms);\n    System.out.println(\"TEST: test all saved terms...\");\n    testSavedTerms(r, savedTerms);\n    r.close();\n\n    System.out.println(\"TEST: now CheckIndex...\");\n    CheckIndex.Status status = _TestUtil.checkIndex(dir);\n    final long tc = status.segmentInfos.get(0).termIndexStatus.termCount;\n    assertTrue(\"count \" + tc + \" is not > \" + Integer.MAX_VALUE, tc > Integer.MAX_VALUE);\n\n    dir.close();\n    System.out.println(\"TEST: done!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#test2BTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#test2BTerms().mjava","sourceNew":"  @Slow\n  public void test2BTerms() throws IOException {\n\n    System.out.println(\"Starting Test2B\");\n    final long TERM_COUNT = ((long) Integer.MAX_VALUE) + 100000000;\n\n    final int TERMS_PER_DOC = _TestUtil.nextInt(random(), 100000, 1000000);\n\n    List<BytesRef> savedTerms = null;\n\n    MockDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BTerms\"));\n    //MockDirectoryWrapper dir = newFSDirectory(new File(\"/p/lucene/indices/2bindex\"));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n\n    if (true) {\n\n      IndexWriter w = new IndexWriter(dir,\n                                      new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n                                      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setRAMBufferSizeMB(256.0)\n                                      .setMergeScheduler(new ConcurrentMergeScheduler())\n                                      .setMergePolicy(newLogMergePolicy(false, 10))\n                                      .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n      MergePolicy mp = w.getConfig().getMergePolicy();\n      if (mp instanceof LogByteSizeMergePolicy) {\n        // 1 petabyte:\n        ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n      }\n\n      Document doc = new Document();\n      final MyTokenStream ts = new MyTokenStream(random(), TERMS_PER_DOC);\n\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      customType.setIndexOptions(IndexOptions.DOCS_ONLY);\n      customType.setOmitNorms(true);\n      Field field = new Field(\"field\", ts, customType);\n      doc.add(field);\n      //w.setInfoStream(System.out);\n      final int numDocs = (int) (TERM_COUNT/TERMS_PER_DOC);\n\n      System.out.println(\"TERMS_PER_DOC=\" + TERMS_PER_DOC);\n      System.out.println(\"numDocs=\" + numDocs);\n\n      for(int i=0;i<numDocs;i++) {\n        final long t0 = System.currentTimeMillis();\n        w.addDocument(doc);\n        System.out.println(i + \" of \" + numDocs + \" \" + (System.currentTimeMillis()-t0) + \" msec\");\n      }\n      savedTerms = ts.savedTerms;\n\n      System.out.println(\"TEST: full merge\");\n      w.forceMerge(1);\n      System.out.println(\"TEST: close writer\");\n      w.close();\n    }\n\n    System.out.println(\"TEST: open reader\");\n    final IndexReader r = DirectoryReader.open(dir);\n    if (savedTerms == null) {\n      savedTerms = findTerms(r);\n    }\n    final int numSavedTerms = savedTerms.size();\n    final List<BytesRef> bigOrdTerms = new ArrayList<BytesRef>(savedTerms.subList(numSavedTerms-10, numSavedTerms));\n    System.out.println(\"TEST: test big ord terms...\");\n    testSavedTerms(r, bigOrdTerms);\n    System.out.println(\"TEST: test all saved terms...\");\n    testSavedTerms(r, savedTerms);\n    r.close();\n\n    System.out.println(\"TEST: now CheckIndex...\");\n    CheckIndex.Status status = _TestUtil.checkIndex(dir);\n    final long tc = status.segmentInfos.get(0).termIndexStatus.termCount;\n    assertTrue(\"count \" + tc + \" is not > \" + Integer.MAX_VALUE, tc > Integer.MAX_VALUE);\n\n    dir.close();\n    System.out.println(\"TEST: done!\");\n  }\n\n","sourceOld":"  @Slow\n  public void test2BTerms() throws IOException {\n\n    System.out.println(\"Starting Test2B\");\n    final long TERM_COUNT = ((long) Integer.MAX_VALUE) + 100000000;\n\n    final int TERMS_PER_DOC = _TestUtil.nextInt(random(), 100000, 1000000);\n\n    List<BytesRef> savedTerms = null;\n\n    MockDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BTerms\"));\n    //MockDirectoryWrapper dir = newFSDirectory(new File(\"/p/lucene/indices/2bindex\"));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n\n    if (true) {\n\n      IndexWriter w = new IndexWriter(dir,\n                                      new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n                                      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setRAMBufferSizeMB(256.0)\n                                      .setMergeScheduler(new ConcurrentMergeScheduler())\n                                      .setMergePolicy(newLogMergePolicy(false, 10))\n                                      .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n      MergePolicy mp = w.getConfig().getMergePolicy();\n      if (mp instanceof LogByteSizeMergePolicy) {\n        // 1 petabyte:\n        ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n      }\n\n      Document doc = new Document();\n      final MyTokenStream ts = new MyTokenStream(random(), TERMS_PER_DOC);\n\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      customType.setIndexOptions(IndexOptions.DOCS_ONLY);\n      customType.setOmitNorms(true);\n      Field field = new Field(\"field\", ts, customType);\n      doc.add(field);\n      //w.setInfoStream(System.out);\n      final int numDocs = (int) (TERM_COUNT/TERMS_PER_DOC);\n\n      System.out.println(\"TERMS_PER_DOC=\" + TERMS_PER_DOC);\n      System.out.println(\"numDocs=\" + numDocs);\n\n      for(int i=0;i<numDocs;i++) {\n        final long t0 = System.currentTimeMillis();\n        w.addDocument(doc);\n        System.out.println(i + \" of \" + numDocs + \" \" + (System.currentTimeMillis()-t0) + \" msec\");\n      }\n      savedTerms = ts.savedTerms;\n\n      System.out.println(\"TEST: full merge\");\n      w.forceMerge(1);\n      System.out.println(\"TEST: close writer\");\n      w.close();\n    }\n\n    System.out.println(\"TEST: open reader\");\n    final IndexReader r = IndexReader.open(dir);\n    if (savedTerms == null) {\n      savedTerms = findTerms(r);\n    }\n    final int numSavedTerms = savedTerms.size();\n    final List<BytesRef> bigOrdTerms = new ArrayList<BytesRef>(savedTerms.subList(numSavedTerms-10, numSavedTerms));\n    System.out.println(\"TEST: test big ord terms...\");\n    testSavedTerms(r, bigOrdTerms);\n    System.out.println(\"TEST: test all saved terms...\");\n    testSavedTerms(r, savedTerms);\n    r.close();\n\n    System.out.println(\"TEST: now CheckIndex...\");\n    CheckIndex.Status status = _TestUtil.checkIndex(dir);\n    final long tc = status.segmentInfos.get(0).termIndexStatus.termCount;\n    assertTrue(\"count \" + tc + \" is not > \" + Integer.MAX_VALUE, tc > Integer.MAX_VALUE);\n\n    dir.close();\n    System.out.println(\"TEST: done!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#test2BTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#test2BTerms().mjava","sourceNew":"  @Slow\n  public void test2BTerms() throws IOException {\n\n    System.out.println(\"Starting Test2B\");\n    final long TERM_COUNT = ((long) Integer.MAX_VALUE) + 100000000;\n\n    final int TERMS_PER_DOC = _TestUtil.nextInt(random(), 100000, 1000000);\n\n    List<BytesRef> savedTerms = null;\n\n    MockDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BTerms\"));\n    //MockDirectoryWrapper dir = newFSDirectory(new File(\"/p/lucene/indices/2bindex\"));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n\n    if (true) {\n\n      IndexWriter w = new IndexWriter(dir,\n                                      new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n                                      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setRAMBufferSizeMB(256.0)\n                                      .setMergeScheduler(new ConcurrentMergeScheduler())\n                                      .setMergePolicy(newLogMergePolicy(false, 10))\n                                      .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n      MergePolicy mp = w.getConfig().getMergePolicy();\n      if (mp instanceof LogByteSizeMergePolicy) {\n        // 1 petabyte:\n        ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n      }\n\n      Document doc = new Document();\n      final MyTokenStream ts = new MyTokenStream(random(), TERMS_PER_DOC);\n\n      FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n      customType.setIndexOptions(IndexOptions.DOCS_ONLY);\n      customType.setOmitNorms(true);\n      Field field = new Field(\"field\", ts, customType);\n      doc.add(field);\n      //w.setInfoStream(System.out);\n      final int numDocs = (int) (TERM_COUNT/TERMS_PER_DOC);\n\n      System.out.println(\"TERMS_PER_DOC=\" + TERMS_PER_DOC);\n      System.out.println(\"numDocs=\" + numDocs);\n\n      for(int i=0;i<numDocs;i++) {\n        final long t0 = System.currentTimeMillis();\n        w.addDocument(doc);\n        System.out.println(i + \" of \" + numDocs + \" \" + (System.currentTimeMillis()-t0) + \" msec\");\n      }\n      savedTerms = ts.savedTerms;\n\n      System.out.println(\"TEST: full merge\");\n      w.forceMerge(1);\n      System.out.println(\"TEST: close writer\");\n      w.close();\n    }\n\n    System.out.println(\"TEST: open reader\");\n    final IndexReader r = DirectoryReader.open(dir);\n    if (savedTerms == null) {\n      savedTerms = findTerms(r);\n    }\n    final int numSavedTerms = savedTerms.size();\n    final List<BytesRef> bigOrdTerms = new ArrayList<BytesRef>(savedTerms.subList(numSavedTerms-10, numSavedTerms));\n    System.out.println(\"TEST: test big ord terms...\");\n    testSavedTerms(r, bigOrdTerms);\n    System.out.println(\"TEST: test all saved terms...\");\n    testSavedTerms(r, savedTerms);\n    r.close();\n\n    System.out.println(\"TEST: now CheckIndex...\");\n    CheckIndex.Status status = _TestUtil.checkIndex(dir);\n    final long tc = status.segmentInfos.get(0).termIndexStatus.termCount;\n    assertTrue(\"count \" + tc + \" is not > \" + Integer.MAX_VALUE, tc > Integer.MAX_VALUE);\n\n    dir.close();\n    System.out.println(\"TEST: done!\");\n  }\n\n","sourceOld":"  @Slow\n  public void test2BTerms() throws IOException {\n\n    System.out.println(\"Starting Test2B\");\n    final long TERM_COUNT = ((long) Integer.MAX_VALUE) + 100000000;\n\n    final int TERMS_PER_DOC = _TestUtil.nextInt(random(), 100000, 1000000);\n\n    List<BytesRef> savedTerms = null;\n\n    MockDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BTerms\"));\n    //MockDirectoryWrapper dir = newFSDirectory(new File(\"/p/lucene/indices/2bindex\"));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n\n    if (true) {\n\n      IndexWriter w = new IndexWriter(dir,\n                                      new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n                                      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setRAMBufferSizeMB(256.0)\n                                      .setMergeScheduler(new ConcurrentMergeScheduler())\n                                      .setMergePolicy(newLogMergePolicy(false, 10))\n                                      .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n      MergePolicy mp = w.getConfig().getMergePolicy();\n      if (mp instanceof LogByteSizeMergePolicy) {\n        // 1 petabyte:\n        ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n      }\n\n      Document doc = new Document();\n      final MyTokenStream ts = new MyTokenStream(random(), TERMS_PER_DOC);\n\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      customType.setIndexOptions(IndexOptions.DOCS_ONLY);\n      customType.setOmitNorms(true);\n      Field field = new Field(\"field\", ts, customType);\n      doc.add(field);\n      //w.setInfoStream(System.out);\n      final int numDocs = (int) (TERM_COUNT/TERMS_PER_DOC);\n\n      System.out.println(\"TERMS_PER_DOC=\" + TERMS_PER_DOC);\n      System.out.println(\"numDocs=\" + numDocs);\n\n      for(int i=0;i<numDocs;i++) {\n        final long t0 = System.currentTimeMillis();\n        w.addDocument(doc);\n        System.out.println(i + \" of \" + numDocs + \" \" + (System.currentTimeMillis()-t0) + \" msec\");\n      }\n      savedTerms = ts.savedTerms;\n\n      System.out.println(\"TEST: full merge\");\n      w.forceMerge(1);\n      System.out.println(\"TEST: close writer\");\n      w.close();\n    }\n\n    System.out.println(\"TEST: open reader\");\n    final IndexReader r = DirectoryReader.open(dir);\n    if (savedTerms == null) {\n      savedTerms = findTerms(r);\n    }\n    final int numSavedTerms = savedTerms.size();\n    final List<BytesRef> bigOrdTerms = new ArrayList<BytesRef>(savedTerms.subList(numSavedTerms-10, numSavedTerms));\n    System.out.println(\"TEST: test big ord terms...\");\n    testSavedTerms(r, bigOrdTerms);\n    System.out.println(\"TEST: test all saved terms...\");\n    testSavedTerms(r, savedTerms);\n    r.close();\n\n    System.out.println(\"TEST: now CheckIndex...\");\n    CheckIndex.Status status = _TestUtil.checkIndex(dir);\n    final long tc = status.segmentInfos.get(0).termIndexStatus.termCount;\n    assertTrue(\"count \" + tc + \" is not > \" + Integer.MAX_VALUE, tc > Integer.MAX_VALUE);\n\n    dir.close();\n    System.out.println(\"TEST: done!\");\n  }\n\n","bugFix":["0b48e6a5f05226090ba50ec1fbf53eda6b1d3647"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab3d175cd945ea1a556e30d25fb71edfc3adc6c0","date":1340967326,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#test2BTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#test2BTerms().mjava","sourceNew":"  @Ignore(\"Very slow. Enable manually by removing @Ignore.\")\n  public void test2BTerms() throws IOException {\n\n    System.out.println(\"Starting Test2B\");\n    final long TERM_COUNT = ((long) Integer.MAX_VALUE) + 100000000;\n\n    final int TERMS_PER_DOC = _TestUtil.nextInt(random(), 100000, 1000000);\n\n    List<BytesRef> savedTerms = null;\n\n    MockDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BTerms\"));\n    //MockDirectoryWrapper dir = newFSDirectory(new File(\"/p/lucene/indices/2bindex\"));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n\n    if (true) {\n\n      IndexWriter w = new IndexWriter(dir,\n                                      new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n                                      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setRAMBufferSizeMB(256.0)\n                                      .setMergeScheduler(new ConcurrentMergeScheduler())\n                                      .setMergePolicy(newLogMergePolicy(false, 10))\n                                      .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n      MergePolicy mp = w.getConfig().getMergePolicy();\n      if (mp instanceof LogByteSizeMergePolicy) {\n        // 1 petabyte:\n        ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n      }\n\n      Document doc = new Document();\n      final MyTokenStream ts = new MyTokenStream(random(), TERMS_PER_DOC);\n\n      FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n      customType.setIndexOptions(IndexOptions.DOCS_ONLY);\n      customType.setOmitNorms(true);\n      Field field = new Field(\"field\", ts, customType);\n      doc.add(field);\n      //w.setInfoStream(System.out);\n      final int numDocs = (int) (TERM_COUNT/TERMS_PER_DOC);\n\n      System.out.println(\"TERMS_PER_DOC=\" + TERMS_PER_DOC);\n      System.out.println(\"numDocs=\" + numDocs);\n\n      for(int i=0;i<numDocs;i++) {\n        final long t0 = System.currentTimeMillis();\n        w.addDocument(doc);\n        System.out.println(i + \" of \" + numDocs + \" \" + (System.currentTimeMillis()-t0) + \" msec\");\n      }\n      savedTerms = ts.savedTerms;\n\n      System.out.println(\"TEST: full merge\");\n      w.forceMerge(1);\n      System.out.println(\"TEST: close writer\");\n      w.close();\n    }\n\n    System.out.println(\"TEST: open reader\");\n    final IndexReader r = DirectoryReader.open(dir);\n    if (savedTerms == null) {\n      savedTerms = findTerms(r);\n    }\n    final int numSavedTerms = savedTerms.size();\n    final List<BytesRef> bigOrdTerms = new ArrayList<BytesRef>(savedTerms.subList(numSavedTerms-10, numSavedTerms));\n    System.out.println(\"TEST: test big ord terms...\");\n    testSavedTerms(r, bigOrdTerms);\n    System.out.println(\"TEST: test all saved terms...\");\n    testSavedTerms(r, savedTerms);\n    r.close();\n\n    System.out.println(\"TEST: now CheckIndex...\");\n    CheckIndex.Status status = _TestUtil.checkIndex(dir);\n    final long tc = status.segmentInfos.get(0).termIndexStatus.termCount;\n    assertTrue(\"count \" + tc + \" is not > \" + Integer.MAX_VALUE, tc > Integer.MAX_VALUE);\n\n    dir.close();\n    System.out.println(\"TEST: done!\");\n  }\n\n","sourceOld":"  @Slow\n  public void test2BTerms() throws IOException {\n\n    System.out.println(\"Starting Test2B\");\n    final long TERM_COUNT = ((long) Integer.MAX_VALUE) + 100000000;\n\n    final int TERMS_PER_DOC = _TestUtil.nextInt(random(), 100000, 1000000);\n\n    List<BytesRef> savedTerms = null;\n\n    MockDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BTerms\"));\n    //MockDirectoryWrapper dir = newFSDirectory(new File(\"/p/lucene/indices/2bindex\"));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n\n    if (true) {\n\n      IndexWriter w = new IndexWriter(dir,\n                                      new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n                                      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setRAMBufferSizeMB(256.0)\n                                      .setMergeScheduler(new ConcurrentMergeScheduler())\n                                      .setMergePolicy(newLogMergePolicy(false, 10))\n                                      .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n      MergePolicy mp = w.getConfig().getMergePolicy();\n      if (mp instanceof LogByteSizeMergePolicy) {\n        // 1 petabyte:\n        ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n      }\n\n      Document doc = new Document();\n      final MyTokenStream ts = new MyTokenStream(random(), TERMS_PER_DOC);\n\n      FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n      customType.setIndexOptions(IndexOptions.DOCS_ONLY);\n      customType.setOmitNorms(true);\n      Field field = new Field(\"field\", ts, customType);\n      doc.add(field);\n      //w.setInfoStream(System.out);\n      final int numDocs = (int) (TERM_COUNT/TERMS_PER_DOC);\n\n      System.out.println(\"TERMS_PER_DOC=\" + TERMS_PER_DOC);\n      System.out.println(\"numDocs=\" + numDocs);\n\n      for(int i=0;i<numDocs;i++) {\n        final long t0 = System.currentTimeMillis();\n        w.addDocument(doc);\n        System.out.println(i + \" of \" + numDocs + \" \" + (System.currentTimeMillis()-t0) + \" msec\");\n      }\n      savedTerms = ts.savedTerms;\n\n      System.out.println(\"TEST: full merge\");\n      w.forceMerge(1);\n      System.out.println(\"TEST: close writer\");\n      w.close();\n    }\n\n    System.out.println(\"TEST: open reader\");\n    final IndexReader r = DirectoryReader.open(dir);\n    if (savedTerms == null) {\n      savedTerms = findTerms(r);\n    }\n    final int numSavedTerms = savedTerms.size();\n    final List<BytesRef> bigOrdTerms = new ArrayList<BytesRef>(savedTerms.subList(numSavedTerms-10, numSavedTerms));\n    System.out.println(\"TEST: test big ord terms...\");\n    testSavedTerms(r, bigOrdTerms);\n    System.out.println(\"TEST: test all saved terms...\");\n    testSavedTerms(r, savedTerms);\n    r.close();\n\n    System.out.println(\"TEST: now CheckIndex...\");\n    CheckIndex.Status status = _TestUtil.checkIndex(dir);\n    final long tc = status.segmentInfos.get(0).termIndexStatus.termCount;\n    assertTrue(\"count \" + tc + \" is not > \" + Integer.MAX_VALUE, tc > Integer.MAX_VALUE);\n\n    dir.close();\n    System.out.println(\"TEST: done!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#test2BTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#test2BTerms().mjava","sourceNew":"  @Ignore(\"Very slow. Enable manually by removing @Ignore.\")\n  public void test2BTerms() throws IOException {\n\n    System.out.println(\"Starting Test2B\");\n    final long TERM_COUNT = ((long) Integer.MAX_VALUE) + 100000000;\n\n    final int TERMS_PER_DOC = _TestUtil.nextInt(random(), 100000, 1000000);\n\n    List<BytesRef> savedTerms = null;\n\n    MockDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BTerms\"));\n    //MockDirectoryWrapper dir = newFSDirectory(new File(\"/p/lucene/indices/2bindex\"));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n\n    if (true) {\n\n      IndexWriter w = new IndexWriter(dir,\n                                      new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n                                      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setRAMBufferSizeMB(256.0)\n                                      .setMergeScheduler(new ConcurrentMergeScheduler())\n                                      .setMergePolicy(newLogMergePolicy(false, 10))\n                                      .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n      MergePolicy mp = w.getConfig().getMergePolicy();\n      if (mp instanceof LogByteSizeMergePolicy) {\n        // 1 petabyte:\n        ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n      }\n\n      Document doc = new Document();\n      final MyTokenStream ts = new MyTokenStream(random(), TERMS_PER_DOC);\n\n      FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n      customType.setIndexOptions(IndexOptions.DOCS_ONLY);\n      customType.setOmitNorms(true);\n      Field field = new Field(\"field\", ts, customType);\n      doc.add(field);\n      //w.setInfoStream(System.out);\n      final int numDocs = (int) (TERM_COUNT/TERMS_PER_DOC);\n\n      System.out.println(\"TERMS_PER_DOC=\" + TERMS_PER_DOC);\n      System.out.println(\"numDocs=\" + numDocs);\n\n      for(int i=0;i<numDocs;i++) {\n        final long t0 = System.currentTimeMillis();\n        w.addDocument(doc);\n        System.out.println(i + \" of \" + numDocs + \" \" + (System.currentTimeMillis()-t0) + \" msec\");\n      }\n      savedTerms = ts.savedTerms;\n\n      System.out.println(\"TEST: full merge\");\n      w.forceMerge(1);\n      System.out.println(\"TEST: close writer\");\n      w.close();\n    }\n\n    System.out.println(\"TEST: open reader\");\n    final IndexReader r = DirectoryReader.open(dir);\n    if (savedTerms == null) {\n      savedTerms = findTerms(r);\n    }\n    final int numSavedTerms = savedTerms.size();\n    final List<BytesRef> bigOrdTerms = new ArrayList<BytesRef>(savedTerms.subList(numSavedTerms-10, numSavedTerms));\n    System.out.println(\"TEST: test big ord terms...\");\n    testSavedTerms(r, bigOrdTerms);\n    System.out.println(\"TEST: test all saved terms...\");\n    testSavedTerms(r, savedTerms);\n    r.close();\n\n    System.out.println(\"TEST: now CheckIndex...\");\n    CheckIndex.Status status = _TestUtil.checkIndex(dir);\n    final long tc = status.segmentInfos.get(0).termIndexStatus.termCount;\n    assertTrue(\"count \" + tc + \" is not > \" + Integer.MAX_VALUE, tc > Integer.MAX_VALUE);\n\n    dir.close();\n    System.out.println(\"TEST: done!\");\n  }\n\n","sourceOld":"  @Slow\n  public void test2BTerms() throws IOException {\n\n    System.out.println(\"Starting Test2B\");\n    final long TERM_COUNT = ((long) Integer.MAX_VALUE) + 100000000;\n\n    final int TERMS_PER_DOC = _TestUtil.nextInt(random(), 100000, 1000000);\n\n    List<BytesRef> savedTerms = null;\n\n    MockDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BTerms\"));\n    //MockDirectoryWrapper dir = newFSDirectory(new File(\"/p/lucene/indices/2bindex\"));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n\n    if (true) {\n\n      IndexWriter w = new IndexWriter(dir,\n                                      new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n                                      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setRAMBufferSizeMB(256.0)\n                                      .setMergeScheduler(new ConcurrentMergeScheduler())\n                                      .setMergePolicy(newLogMergePolicy(false, 10))\n                                      .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n      MergePolicy mp = w.getConfig().getMergePolicy();\n      if (mp instanceof LogByteSizeMergePolicy) {\n        // 1 petabyte:\n        ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n      }\n\n      Document doc = new Document();\n      final MyTokenStream ts = new MyTokenStream(random(), TERMS_PER_DOC);\n\n      FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n      customType.setIndexOptions(IndexOptions.DOCS_ONLY);\n      customType.setOmitNorms(true);\n      Field field = new Field(\"field\", ts, customType);\n      doc.add(field);\n      //w.setInfoStream(System.out);\n      final int numDocs = (int) (TERM_COUNT/TERMS_PER_DOC);\n\n      System.out.println(\"TERMS_PER_DOC=\" + TERMS_PER_DOC);\n      System.out.println(\"numDocs=\" + numDocs);\n\n      for(int i=0;i<numDocs;i++) {\n        final long t0 = System.currentTimeMillis();\n        w.addDocument(doc);\n        System.out.println(i + \" of \" + numDocs + \" \" + (System.currentTimeMillis()-t0) + \" msec\");\n      }\n      savedTerms = ts.savedTerms;\n\n      System.out.println(\"TEST: full merge\");\n      w.forceMerge(1);\n      System.out.println(\"TEST: close writer\");\n      w.close();\n    }\n\n    System.out.println(\"TEST: open reader\");\n    final IndexReader r = DirectoryReader.open(dir);\n    if (savedTerms == null) {\n      savedTerms = findTerms(r);\n    }\n    final int numSavedTerms = savedTerms.size();\n    final List<BytesRef> bigOrdTerms = new ArrayList<BytesRef>(savedTerms.subList(numSavedTerms-10, numSavedTerms));\n    System.out.println(\"TEST: test big ord terms...\");\n    testSavedTerms(r, bigOrdTerms);\n    System.out.println(\"TEST: test all saved terms...\");\n    testSavedTerms(r, savedTerms);\n    r.close();\n\n    System.out.println(\"TEST: now CheckIndex...\");\n    CheckIndex.Status status = _TestUtil.checkIndex(dir);\n    final long tc = status.segmentInfos.get(0).termIndexStatus.termCount;\n    assertTrue(\"count \" + tc + \" is not > \" + Integer.MAX_VALUE, tc > Integer.MAX_VALUE);\n\n    dir.close();\n    System.out.println(\"TEST: done!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d19974432be9aed28ee7dca73bdf01d139e763a9","date":1342822166,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#test2BTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#test2BTerms().mjava","sourceNew":"  @Ignore(\"Very slow. Enable manually by removing @Ignore.\")\n  public void test2BTerms() throws IOException {\n\n    System.out.println(\"Starting Test2B\");\n    final long TERM_COUNT = ((long) Integer.MAX_VALUE) + 100000000;\n\n    final int TERMS_PER_DOC = _TestUtil.nextInt(random(), 100000, 1000000);\n\n    List<BytesRef> savedTerms = null;\n\n    BaseDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BTerms\"));\n    //MockDirectoryWrapper dir = newFSDirectory(new File(\"/p/lucene/indices/2bindex\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n\n    if (true) {\n\n      IndexWriter w = new IndexWriter(dir,\n                                      new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n                                      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setRAMBufferSizeMB(256.0)\n                                      .setMergeScheduler(new ConcurrentMergeScheduler())\n                                      .setMergePolicy(newLogMergePolicy(false, 10))\n                                      .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n      MergePolicy mp = w.getConfig().getMergePolicy();\n      if (mp instanceof LogByteSizeMergePolicy) {\n        // 1 petabyte:\n        ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n      }\n\n      Document doc = new Document();\n      final MyTokenStream ts = new MyTokenStream(random(), TERMS_PER_DOC);\n\n      FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n      customType.setIndexOptions(IndexOptions.DOCS_ONLY);\n      customType.setOmitNorms(true);\n      Field field = new Field(\"field\", ts, customType);\n      doc.add(field);\n      //w.setInfoStream(System.out);\n      final int numDocs = (int) (TERM_COUNT/TERMS_PER_DOC);\n\n      System.out.println(\"TERMS_PER_DOC=\" + TERMS_PER_DOC);\n      System.out.println(\"numDocs=\" + numDocs);\n\n      for(int i=0;i<numDocs;i++) {\n        final long t0 = System.currentTimeMillis();\n        w.addDocument(doc);\n        System.out.println(i + \" of \" + numDocs + \" \" + (System.currentTimeMillis()-t0) + \" msec\");\n      }\n      savedTerms = ts.savedTerms;\n\n      System.out.println(\"TEST: full merge\");\n      w.forceMerge(1);\n      System.out.println(\"TEST: close writer\");\n      w.close();\n    }\n\n    System.out.println(\"TEST: open reader\");\n    final IndexReader r = DirectoryReader.open(dir);\n    if (savedTerms == null) {\n      savedTerms = findTerms(r);\n    }\n    final int numSavedTerms = savedTerms.size();\n    final List<BytesRef> bigOrdTerms = new ArrayList<BytesRef>(savedTerms.subList(numSavedTerms-10, numSavedTerms));\n    System.out.println(\"TEST: test big ord terms...\");\n    testSavedTerms(r, bigOrdTerms);\n    System.out.println(\"TEST: test all saved terms...\");\n    testSavedTerms(r, savedTerms);\n    r.close();\n\n    System.out.println(\"TEST: now CheckIndex...\");\n    CheckIndex.Status status = _TestUtil.checkIndex(dir);\n    final long tc = status.segmentInfos.get(0).termIndexStatus.termCount;\n    assertTrue(\"count \" + tc + \" is not > \" + Integer.MAX_VALUE, tc > Integer.MAX_VALUE);\n\n    dir.close();\n    System.out.println(\"TEST: done!\");\n  }\n\n","sourceOld":"  @Ignore(\"Very slow. Enable manually by removing @Ignore.\")\n  public void test2BTerms() throws IOException {\n\n    System.out.println(\"Starting Test2B\");\n    final long TERM_COUNT = ((long) Integer.MAX_VALUE) + 100000000;\n\n    final int TERMS_PER_DOC = _TestUtil.nextInt(random(), 100000, 1000000);\n\n    List<BytesRef> savedTerms = null;\n\n    MockDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BTerms\"));\n    //MockDirectoryWrapper dir = newFSDirectory(new File(\"/p/lucene/indices/2bindex\"));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n\n    if (true) {\n\n      IndexWriter w = new IndexWriter(dir,\n                                      new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n                                      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setRAMBufferSizeMB(256.0)\n                                      .setMergeScheduler(new ConcurrentMergeScheduler())\n                                      .setMergePolicy(newLogMergePolicy(false, 10))\n                                      .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n      MergePolicy mp = w.getConfig().getMergePolicy();\n      if (mp instanceof LogByteSizeMergePolicy) {\n        // 1 petabyte:\n        ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n      }\n\n      Document doc = new Document();\n      final MyTokenStream ts = new MyTokenStream(random(), TERMS_PER_DOC);\n\n      FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n      customType.setIndexOptions(IndexOptions.DOCS_ONLY);\n      customType.setOmitNorms(true);\n      Field field = new Field(\"field\", ts, customType);\n      doc.add(field);\n      //w.setInfoStream(System.out);\n      final int numDocs = (int) (TERM_COUNT/TERMS_PER_DOC);\n\n      System.out.println(\"TERMS_PER_DOC=\" + TERMS_PER_DOC);\n      System.out.println(\"numDocs=\" + numDocs);\n\n      for(int i=0;i<numDocs;i++) {\n        final long t0 = System.currentTimeMillis();\n        w.addDocument(doc);\n        System.out.println(i + \" of \" + numDocs + \" \" + (System.currentTimeMillis()-t0) + \" msec\");\n      }\n      savedTerms = ts.savedTerms;\n\n      System.out.println(\"TEST: full merge\");\n      w.forceMerge(1);\n      System.out.println(\"TEST: close writer\");\n      w.close();\n    }\n\n    System.out.println(\"TEST: open reader\");\n    final IndexReader r = DirectoryReader.open(dir);\n    if (savedTerms == null) {\n      savedTerms = findTerms(r);\n    }\n    final int numSavedTerms = savedTerms.size();\n    final List<BytesRef> bigOrdTerms = new ArrayList<BytesRef>(savedTerms.subList(numSavedTerms-10, numSavedTerms));\n    System.out.println(\"TEST: test big ord terms...\");\n    testSavedTerms(r, bigOrdTerms);\n    System.out.println(\"TEST: test all saved terms...\");\n    testSavedTerms(r, savedTerms);\n    r.close();\n\n    System.out.println(\"TEST: now CheckIndex...\");\n    CheckIndex.Status status = _TestUtil.checkIndex(dir);\n    final long tc = status.segmentInfos.get(0).termIndexStatus.termCount;\n    assertTrue(\"count \" + tc + \" is not > \" + Integer.MAX_VALUE, tc > Integer.MAX_VALUE);\n\n    dir.close();\n    System.out.println(\"TEST: done!\");\n  }\n\n","bugFix":["cf46d950a2020ee31dbae60879a0b0a519224524"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#test2BTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#test2BTerms().mjava","sourceNew":"  @Ignore(\"Very slow. Enable manually by removing @Ignore.\")\n  public void test2BTerms() throws IOException {\n\n    System.out.println(\"Starting Test2B\");\n    final long TERM_COUNT = ((long) Integer.MAX_VALUE) + 100000000;\n\n    final int TERMS_PER_DOC = _TestUtil.nextInt(random(), 100000, 1000000);\n\n    List<BytesRef> savedTerms = null;\n\n    BaseDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BTerms\"));\n    //MockDirectoryWrapper dir = newFSDirectory(new File(\"/p/lucene/indices/2bindex\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n\n    if (true) {\n\n      IndexWriter w = new IndexWriter(dir,\n                                      new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n                                      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setRAMBufferSizeMB(256.0)\n                                      .setMergeScheduler(new ConcurrentMergeScheduler())\n                                      .setMergePolicy(newLogMergePolicy(false, 10))\n                                      .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n      MergePolicy mp = w.getConfig().getMergePolicy();\n      if (mp instanceof LogByteSizeMergePolicy) {\n        // 1 petabyte:\n        ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n      }\n\n      Document doc = new Document();\n      final MyTokenStream ts = new MyTokenStream(random(), TERMS_PER_DOC);\n\n      FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n      customType.setIndexOptions(IndexOptions.DOCS_ONLY);\n      customType.setOmitNorms(true);\n      Field field = new Field(\"field\", ts, customType);\n      doc.add(field);\n      //w.setInfoStream(System.out);\n      final int numDocs = (int) (TERM_COUNT/TERMS_PER_DOC);\n\n      System.out.println(\"TERMS_PER_DOC=\" + TERMS_PER_DOC);\n      System.out.println(\"numDocs=\" + numDocs);\n\n      for(int i=0;i<numDocs;i++) {\n        final long t0 = System.currentTimeMillis();\n        w.addDocument(doc);\n        System.out.println(i + \" of \" + numDocs + \" \" + (System.currentTimeMillis()-t0) + \" msec\");\n      }\n      savedTerms = ts.savedTerms;\n\n      System.out.println(\"TEST: full merge\");\n      w.forceMerge(1);\n      System.out.println(\"TEST: close writer\");\n      w.close();\n    }\n\n    System.out.println(\"TEST: open reader\");\n    final IndexReader r = DirectoryReader.open(dir);\n    if (savedTerms == null) {\n      savedTerms = findTerms(r);\n    }\n    final int numSavedTerms = savedTerms.size();\n    final List<BytesRef> bigOrdTerms = new ArrayList<BytesRef>(savedTerms.subList(numSavedTerms-10, numSavedTerms));\n    System.out.println(\"TEST: test big ord terms...\");\n    testSavedTerms(r, bigOrdTerms);\n    System.out.println(\"TEST: test all saved terms...\");\n    testSavedTerms(r, savedTerms);\n    r.close();\n\n    System.out.println(\"TEST: now CheckIndex...\");\n    CheckIndex.Status status = _TestUtil.checkIndex(dir);\n    final long tc = status.segmentInfos.get(0).termIndexStatus.termCount;\n    assertTrue(\"count \" + tc + \" is not > \" + Integer.MAX_VALUE, tc > Integer.MAX_VALUE);\n\n    dir.close();\n    System.out.println(\"TEST: done!\");\n  }\n\n","sourceOld":"  @Ignore(\"Very slow. Enable manually by removing @Ignore.\")\n  public void test2BTerms() throws IOException {\n\n    System.out.println(\"Starting Test2B\");\n    final long TERM_COUNT = ((long) Integer.MAX_VALUE) + 100000000;\n\n    final int TERMS_PER_DOC = _TestUtil.nextInt(random(), 100000, 1000000);\n\n    List<BytesRef> savedTerms = null;\n\n    MockDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BTerms\"));\n    //MockDirectoryWrapper dir = newFSDirectory(new File(\"/p/lucene/indices/2bindex\"));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n\n    if (true) {\n\n      IndexWriter w = new IndexWriter(dir,\n                                      new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n                                      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setRAMBufferSizeMB(256.0)\n                                      .setMergeScheduler(new ConcurrentMergeScheduler())\n                                      .setMergePolicy(newLogMergePolicy(false, 10))\n                                      .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n      MergePolicy mp = w.getConfig().getMergePolicy();\n      if (mp instanceof LogByteSizeMergePolicy) {\n        // 1 petabyte:\n        ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n      }\n\n      Document doc = new Document();\n      final MyTokenStream ts = new MyTokenStream(random(), TERMS_PER_DOC);\n\n      FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n      customType.setIndexOptions(IndexOptions.DOCS_ONLY);\n      customType.setOmitNorms(true);\n      Field field = new Field(\"field\", ts, customType);\n      doc.add(field);\n      //w.setInfoStream(System.out);\n      final int numDocs = (int) (TERM_COUNT/TERMS_PER_DOC);\n\n      System.out.println(\"TERMS_PER_DOC=\" + TERMS_PER_DOC);\n      System.out.println(\"numDocs=\" + numDocs);\n\n      for(int i=0;i<numDocs;i++) {\n        final long t0 = System.currentTimeMillis();\n        w.addDocument(doc);\n        System.out.println(i + \" of \" + numDocs + \" \" + (System.currentTimeMillis()-t0) + \" msec\");\n      }\n      savedTerms = ts.savedTerms;\n\n      System.out.println(\"TEST: full merge\");\n      w.forceMerge(1);\n      System.out.println(\"TEST: close writer\");\n      w.close();\n    }\n\n    System.out.println(\"TEST: open reader\");\n    final IndexReader r = DirectoryReader.open(dir);\n    if (savedTerms == null) {\n      savedTerms = findTerms(r);\n    }\n    final int numSavedTerms = savedTerms.size();\n    final List<BytesRef> bigOrdTerms = new ArrayList<BytesRef>(savedTerms.subList(numSavedTerms-10, numSavedTerms));\n    System.out.println(\"TEST: test big ord terms...\");\n    testSavedTerms(r, bigOrdTerms);\n    System.out.println(\"TEST: test all saved terms...\");\n    testSavedTerms(r, savedTerms);\n    r.close();\n\n    System.out.println(\"TEST: now CheckIndex...\");\n    CheckIndex.Status status = _TestUtil.checkIndex(dir);\n    final long tc = status.segmentInfos.get(0).termIndexStatus.termCount;\n    assertTrue(\"count \" + tc + \" is not > \" + Integer.MAX_VALUE, tc > Integer.MAX_VALUE);\n\n    dir.close();\n    System.out.println(\"TEST: done!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#test2BTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#test2BTerms().mjava","sourceNew":"  @Ignore(\"Very slow. Enable manually by removing @Ignore.\")\n  public void test2BTerms() throws IOException {\n\n    System.out.println(\"Starting Test2B\");\n    final long TERM_COUNT = ((long) Integer.MAX_VALUE) + 100000000;\n\n    final int TERMS_PER_DOC = _TestUtil.nextInt(random(), 100000, 1000000);\n\n    List<BytesRef> savedTerms = null;\n\n    BaseDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BTerms\"));\n    //MockDirectoryWrapper dir = newFSDirectory(new File(\"/p/lucene/indices/2bindex\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n\n    if (true) {\n\n      IndexWriter w = new IndexWriter(dir,\n                                      new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n                                      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setRAMBufferSizeMB(256.0)\n                                      .setMergeScheduler(new ConcurrentMergeScheduler())\n                                      .setMergePolicy(newLogMergePolicy(false, 10))\n                                      .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n      MergePolicy mp = w.getConfig().getMergePolicy();\n      if (mp instanceof LogByteSizeMergePolicy) {\n        // 1 petabyte:\n        ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n      }\n\n      Document doc = new Document();\n      final MyTokenStream ts = new MyTokenStream(random(), TERMS_PER_DOC);\n\n      FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n      customType.setIndexOptions(IndexOptions.DOCS_ONLY);\n      customType.setOmitNorms(true);\n      Field field = new Field(\"field\", ts, customType);\n      doc.add(field);\n      //w.setInfoStream(System.out);\n      final int numDocs = (int) (TERM_COUNT/TERMS_PER_DOC);\n\n      System.out.println(\"TERMS_PER_DOC=\" + TERMS_PER_DOC);\n      System.out.println(\"numDocs=\" + numDocs);\n\n      for(int i=0;i<numDocs;i++) {\n        final long t0 = System.currentTimeMillis();\n        w.addDocument(doc);\n        System.out.println(i + \" of \" + numDocs + \" \" + (System.currentTimeMillis()-t0) + \" msec\");\n      }\n      savedTerms = ts.savedTerms;\n\n      System.out.println(\"TEST: full merge\");\n      w.forceMerge(1);\n      System.out.println(\"TEST: close writer\");\n      w.close();\n    }\n\n    System.out.println(\"TEST: open reader\");\n    final IndexReader r = DirectoryReader.open(dir);\n    if (savedTerms == null) {\n      savedTerms = findTerms(r);\n    }\n    final int numSavedTerms = savedTerms.size();\n    final List<BytesRef> bigOrdTerms = new ArrayList<BytesRef>(savedTerms.subList(numSavedTerms-10, numSavedTerms));\n    System.out.println(\"TEST: test big ord terms...\");\n    testSavedTerms(r, bigOrdTerms);\n    System.out.println(\"TEST: test all saved terms...\");\n    testSavedTerms(r, savedTerms);\n    r.close();\n\n    System.out.println(\"TEST: now CheckIndex...\");\n    CheckIndex.Status status = _TestUtil.checkIndex(dir);\n    final long tc = status.segmentInfos.get(0).termIndexStatus.termCount;\n    assertTrue(\"count \" + tc + \" is not > \" + Integer.MAX_VALUE, tc > Integer.MAX_VALUE);\n\n    dir.close();\n    System.out.println(\"TEST: done!\");\n  }\n\n","sourceOld":"  @Ignore(\"Very slow. Enable manually by removing @Ignore.\")\n  public void test2BTerms() throws IOException {\n\n    System.out.println(\"Starting Test2B\");\n    final long TERM_COUNT = ((long) Integer.MAX_VALUE) + 100000000;\n\n    final int TERMS_PER_DOC = _TestUtil.nextInt(random(), 100000, 1000000);\n\n    List<BytesRef> savedTerms = null;\n\n    MockDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BTerms\"));\n    //MockDirectoryWrapper dir = newFSDirectory(new File(\"/p/lucene/indices/2bindex\"));\n    dir.setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n\n    if (true) {\n\n      IndexWriter w = new IndexWriter(dir,\n                                      new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n                                      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setRAMBufferSizeMB(256.0)\n                                      .setMergeScheduler(new ConcurrentMergeScheduler())\n                                      .setMergePolicy(newLogMergePolicy(false, 10))\n                                      .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n      MergePolicy mp = w.getConfig().getMergePolicy();\n      if (mp instanceof LogByteSizeMergePolicy) {\n        // 1 petabyte:\n        ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n      }\n\n      Document doc = new Document();\n      final MyTokenStream ts = new MyTokenStream(random(), TERMS_PER_DOC);\n\n      FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n      customType.setIndexOptions(IndexOptions.DOCS_ONLY);\n      customType.setOmitNorms(true);\n      Field field = new Field(\"field\", ts, customType);\n      doc.add(field);\n      //w.setInfoStream(System.out);\n      final int numDocs = (int) (TERM_COUNT/TERMS_PER_DOC);\n\n      System.out.println(\"TERMS_PER_DOC=\" + TERMS_PER_DOC);\n      System.out.println(\"numDocs=\" + numDocs);\n\n      for(int i=0;i<numDocs;i++) {\n        final long t0 = System.currentTimeMillis();\n        w.addDocument(doc);\n        System.out.println(i + \" of \" + numDocs + \" \" + (System.currentTimeMillis()-t0) + \" msec\");\n      }\n      savedTerms = ts.savedTerms;\n\n      System.out.println(\"TEST: full merge\");\n      w.forceMerge(1);\n      System.out.println(\"TEST: close writer\");\n      w.close();\n    }\n\n    System.out.println(\"TEST: open reader\");\n    final IndexReader r = DirectoryReader.open(dir);\n    if (savedTerms == null) {\n      savedTerms = findTerms(r);\n    }\n    final int numSavedTerms = savedTerms.size();\n    final List<BytesRef> bigOrdTerms = new ArrayList<BytesRef>(savedTerms.subList(numSavedTerms-10, numSavedTerms));\n    System.out.println(\"TEST: test big ord terms...\");\n    testSavedTerms(r, bigOrdTerms);\n    System.out.println(\"TEST: test all saved terms...\");\n    testSavedTerms(r, savedTerms);\n    r.close();\n\n    System.out.println(\"TEST: now CheckIndex...\");\n    CheckIndex.Status status = _TestUtil.checkIndex(dir);\n    final long tc = status.segmentInfos.get(0).termIndexStatus.termCount;\n    assertTrue(\"count \" + tc + \" is not > \" + Integer.MAX_VALUE, tc > Integer.MAX_VALUE);\n\n    dir.close();\n    System.out.println(\"TEST: done!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#test2BTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#test2BTerms().mjava","sourceNew":"  @Ignore(\"Very slow. Enable manually by removing @Ignore.\")\n  public void test2BTerms() throws IOException {\n\n    System.out.println(\"Starting Test2B\");\n    final long TERM_COUNT = ((long) Integer.MAX_VALUE) + 100000000;\n\n    final int TERMS_PER_DOC = TestUtil.nextInt(random(), 100000, 1000000);\n\n    List<BytesRef> savedTerms = null;\n\n    BaseDirectoryWrapper dir = newFSDirectory(TestUtil.getTempDir(\"2BTerms\"));\n    //MockDirectoryWrapper dir = newFSDirectory(new File(\"/p/lucene/indices/2bindex\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n\n    if (true) {\n\n      IndexWriter w = new IndexWriter(dir,\n                                      new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n                                      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setRAMBufferSizeMB(256.0)\n                                      .setMergeScheduler(new ConcurrentMergeScheduler())\n                                      .setMergePolicy(newLogMergePolicy(false, 10))\n                                      .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n      MergePolicy mp = w.getConfig().getMergePolicy();\n      if (mp instanceof LogByteSizeMergePolicy) {\n        // 1 petabyte:\n        ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n      }\n\n      Document doc = new Document();\n      final MyTokenStream ts = new MyTokenStream(random(), TERMS_PER_DOC);\n\n      FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n      customType.setIndexOptions(IndexOptions.DOCS_ONLY);\n      customType.setOmitNorms(true);\n      Field field = new Field(\"field\", ts, customType);\n      doc.add(field);\n      //w.setInfoStream(System.out);\n      final int numDocs = (int) (TERM_COUNT/TERMS_PER_DOC);\n\n      System.out.println(\"TERMS_PER_DOC=\" + TERMS_PER_DOC);\n      System.out.println(\"numDocs=\" + numDocs);\n\n      for(int i=0;i<numDocs;i++) {\n        final long t0 = System.currentTimeMillis();\n        w.addDocument(doc);\n        System.out.println(i + \" of \" + numDocs + \" \" + (System.currentTimeMillis()-t0) + \" msec\");\n      }\n      savedTerms = ts.savedTerms;\n\n      System.out.println(\"TEST: full merge\");\n      w.forceMerge(1);\n      System.out.println(\"TEST: close writer\");\n      w.close();\n    }\n\n    System.out.println(\"TEST: open reader\");\n    final IndexReader r = DirectoryReader.open(dir);\n    if (savedTerms == null) {\n      savedTerms = findTerms(r);\n    }\n    final int numSavedTerms = savedTerms.size();\n    final List<BytesRef> bigOrdTerms = new ArrayList<BytesRef>(savedTerms.subList(numSavedTerms-10, numSavedTerms));\n    System.out.println(\"TEST: test big ord terms...\");\n    testSavedTerms(r, bigOrdTerms);\n    System.out.println(\"TEST: test all saved terms...\");\n    testSavedTerms(r, savedTerms);\n    r.close();\n\n    System.out.println(\"TEST: now CheckIndex...\");\n    CheckIndex.Status status = TestUtil.checkIndex(dir);\n    final long tc = status.segmentInfos.get(0).termIndexStatus.termCount;\n    assertTrue(\"count \" + tc + \" is not > \" + Integer.MAX_VALUE, tc > Integer.MAX_VALUE);\n\n    dir.close();\n    System.out.println(\"TEST: done!\");\n  }\n\n","sourceOld":"  @Ignore(\"Very slow. Enable manually by removing @Ignore.\")\n  public void test2BTerms() throws IOException {\n\n    System.out.println(\"Starting Test2B\");\n    final long TERM_COUNT = ((long) Integer.MAX_VALUE) + 100000000;\n\n    final int TERMS_PER_DOC = _TestUtil.nextInt(random(), 100000, 1000000);\n\n    List<BytesRef> savedTerms = null;\n\n    BaseDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BTerms\"));\n    //MockDirectoryWrapper dir = newFSDirectory(new File(\"/p/lucene/indices/2bindex\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n\n    if (true) {\n\n      IndexWriter w = new IndexWriter(dir,\n                                      new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n                                      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setRAMBufferSizeMB(256.0)\n                                      .setMergeScheduler(new ConcurrentMergeScheduler())\n                                      .setMergePolicy(newLogMergePolicy(false, 10))\n                                      .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n      MergePolicy mp = w.getConfig().getMergePolicy();\n      if (mp instanceof LogByteSizeMergePolicy) {\n        // 1 petabyte:\n        ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n      }\n\n      Document doc = new Document();\n      final MyTokenStream ts = new MyTokenStream(random(), TERMS_PER_DOC);\n\n      FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n      customType.setIndexOptions(IndexOptions.DOCS_ONLY);\n      customType.setOmitNorms(true);\n      Field field = new Field(\"field\", ts, customType);\n      doc.add(field);\n      //w.setInfoStream(System.out);\n      final int numDocs = (int) (TERM_COUNT/TERMS_PER_DOC);\n\n      System.out.println(\"TERMS_PER_DOC=\" + TERMS_PER_DOC);\n      System.out.println(\"numDocs=\" + numDocs);\n\n      for(int i=0;i<numDocs;i++) {\n        final long t0 = System.currentTimeMillis();\n        w.addDocument(doc);\n        System.out.println(i + \" of \" + numDocs + \" \" + (System.currentTimeMillis()-t0) + \" msec\");\n      }\n      savedTerms = ts.savedTerms;\n\n      System.out.println(\"TEST: full merge\");\n      w.forceMerge(1);\n      System.out.println(\"TEST: close writer\");\n      w.close();\n    }\n\n    System.out.println(\"TEST: open reader\");\n    final IndexReader r = DirectoryReader.open(dir);\n    if (savedTerms == null) {\n      savedTerms = findTerms(r);\n    }\n    final int numSavedTerms = savedTerms.size();\n    final List<BytesRef> bigOrdTerms = new ArrayList<BytesRef>(savedTerms.subList(numSavedTerms-10, numSavedTerms));\n    System.out.println(\"TEST: test big ord terms...\");\n    testSavedTerms(r, bigOrdTerms);\n    System.out.println(\"TEST: test all saved terms...\");\n    testSavedTerms(r, savedTerms);\n    r.close();\n\n    System.out.println(\"TEST: now CheckIndex...\");\n    CheckIndex.Status status = _TestUtil.checkIndex(dir);\n    final long tc = status.segmentInfos.get(0).termIndexStatus.termCount;\n    assertTrue(\"count \" + tc + \" is not > \" + Integer.MAX_VALUE, tc > Integer.MAX_VALUE);\n\n    dir.close();\n    System.out.println(\"TEST: done!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#test2BTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#test2BTerms().mjava","sourceNew":"  @Ignore(\"Very slow. Enable manually by removing @Ignore.\")\n  public void test2BTerms() throws IOException {\n\n    System.out.println(\"Starting Test2B\");\n    final long TERM_COUNT = ((long) Integer.MAX_VALUE) + 100000000;\n\n    final int TERMS_PER_DOC = TestUtil.nextInt(random(), 100000, 1000000);\n\n    List<BytesRef> savedTerms = null;\n\n    BaseDirectoryWrapper dir = newFSDirectory(TestUtil.getTempDir(\"2BTerms\"));\n    //MockDirectoryWrapper dir = newFSDirectory(new File(\"/p/lucene/indices/2bindex\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n\n    if (true) {\n\n      IndexWriter w = new IndexWriter(dir,\n                                      new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n                                      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setRAMBufferSizeMB(256.0)\n                                      .setMergeScheduler(new ConcurrentMergeScheduler())\n                                      .setMergePolicy(newLogMergePolicy(false, 10))\n                                      .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n      MergePolicy mp = w.getConfig().getMergePolicy();\n      if (mp instanceof LogByteSizeMergePolicy) {\n        // 1 petabyte:\n        ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n      }\n\n      Document doc = new Document();\n      final MyTokenStream ts = new MyTokenStream(random(), TERMS_PER_DOC);\n\n      FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n      customType.setIndexOptions(IndexOptions.DOCS_ONLY);\n      customType.setOmitNorms(true);\n      Field field = new Field(\"field\", ts, customType);\n      doc.add(field);\n      //w.setInfoStream(System.out);\n      final int numDocs = (int) (TERM_COUNT/TERMS_PER_DOC);\n\n      System.out.println(\"TERMS_PER_DOC=\" + TERMS_PER_DOC);\n      System.out.println(\"numDocs=\" + numDocs);\n\n      for(int i=0;i<numDocs;i++) {\n        final long t0 = System.currentTimeMillis();\n        w.addDocument(doc);\n        System.out.println(i + \" of \" + numDocs + \" \" + (System.currentTimeMillis()-t0) + \" msec\");\n      }\n      savedTerms = ts.savedTerms;\n\n      System.out.println(\"TEST: full merge\");\n      w.forceMerge(1);\n      System.out.println(\"TEST: close writer\");\n      w.close();\n    }\n\n    System.out.println(\"TEST: open reader\");\n    final IndexReader r = DirectoryReader.open(dir);\n    if (savedTerms == null) {\n      savedTerms = findTerms(r);\n    }\n    final int numSavedTerms = savedTerms.size();\n    final List<BytesRef> bigOrdTerms = new ArrayList<>(savedTerms.subList(numSavedTerms-10, numSavedTerms));\n    System.out.println(\"TEST: test big ord terms...\");\n    testSavedTerms(r, bigOrdTerms);\n    System.out.println(\"TEST: test all saved terms...\");\n    testSavedTerms(r, savedTerms);\n    r.close();\n\n    System.out.println(\"TEST: now CheckIndex...\");\n    CheckIndex.Status status = TestUtil.checkIndex(dir);\n    final long tc = status.segmentInfos.get(0).termIndexStatus.termCount;\n    assertTrue(\"count \" + tc + \" is not > \" + Integer.MAX_VALUE, tc > Integer.MAX_VALUE);\n\n    dir.close();\n    System.out.println(\"TEST: done!\");\n  }\n\n","sourceOld":"  @Ignore(\"Very slow. Enable manually by removing @Ignore.\")\n  public void test2BTerms() throws IOException {\n\n    System.out.println(\"Starting Test2B\");\n    final long TERM_COUNT = ((long) Integer.MAX_VALUE) + 100000000;\n\n    final int TERMS_PER_DOC = TestUtil.nextInt(random(), 100000, 1000000);\n\n    List<BytesRef> savedTerms = null;\n\n    BaseDirectoryWrapper dir = newFSDirectory(TestUtil.getTempDir(\"2BTerms\"));\n    //MockDirectoryWrapper dir = newFSDirectory(new File(\"/p/lucene/indices/2bindex\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n\n    if (true) {\n\n      IndexWriter w = new IndexWriter(dir,\n                                      new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n                                      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setRAMBufferSizeMB(256.0)\n                                      .setMergeScheduler(new ConcurrentMergeScheduler())\n                                      .setMergePolicy(newLogMergePolicy(false, 10))\n                                      .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n      MergePolicy mp = w.getConfig().getMergePolicy();\n      if (mp instanceof LogByteSizeMergePolicy) {\n        // 1 petabyte:\n        ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n      }\n\n      Document doc = new Document();\n      final MyTokenStream ts = new MyTokenStream(random(), TERMS_PER_DOC);\n\n      FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n      customType.setIndexOptions(IndexOptions.DOCS_ONLY);\n      customType.setOmitNorms(true);\n      Field field = new Field(\"field\", ts, customType);\n      doc.add(field);\n      //w.setInfoStream(System.out);\n      final int numDocs = (int) (TERM_COUNT/TERMS_PER_DOC);\n\n      System.out.println(\"TERMS_PER_DOC=\" + TERMS_PER_DOC);\n      System.out.println(\"numDocs=\" + numDocs);\n\n      for(int i=0;i<numDocs;i++) {\n        final long t0 = System.currentTimeMillis();\n        w.addDocument(doc);\n        System.out.println(i + \" of \" + numDocs + \" \" + (System.currentTimeMillis()-t0) + \" msec\");\n      }\n      savedTerms = ts.savedTerms;\n\n      System.out.println(\"TEST: full merge\");\n      w.forceMerge(1);\n      System.out.println(\"TEST: close writer\");\n      w.close();\n    }\n\n    System.out.println(\"TEST: open reader\");\n    final IndexReader r = DirectoryReader.open(dir);\n    if (savedTerms == null) {\n      savedTerms = findTerms(r);\n    }\n    final int numSavedTerms = savedTerms.size();\n    final List<BytesRef> bigOrdTerms = new ArrayList<BytesRef>(savedTerms.subList(numSavedTerms-10, numSavedTerms));\n    System.out.println(\"TEST: test big ord terms...\");\n    testSavedTerms(r, bigOrdTerms);\n    System.out.println(\"TEST: test all saved terms...\");\n    testSavedTerms(r, savedTerms);\n    r.close();\n\n    System.out.println(\"TEST: now CheckIndex...\");\n    CheckIndex.Status status = TestUtil.checkIndex(dir);\n    final long tc = status.segmentInfos.get(0).termIndexStatus.termCount;\n    assertTrue(\"count \" + tc + \" is not > \" + Integer.MAX_VALUE, tc > Integer.MAX_VALUE);\n\n    dir.close();\n    System.out.println(\"TEST: done!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#test2BTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#test2BTerms().mjava","sourceNew":"  @Ignore(\"Very slow. Enable manually by removing @Ignore.\")\n  public void test2BTerms() throws IOException {\n\n    System.out.println(\"Starting Test2B\");\n    final long TERM_COUNT = ((long) Integer.MAX_VALUE) + 100000000;\n\n    final int TERMS_PER_DOC = TestUtil.nextInt(random(), 100000, 1000000);\n\n    List<BytesRef> savedTerms = null;\n\n    BaseDirectoryWrapper dir = newFSDirectory(TestUtil.createTempDir(\"2BTerms\"));\n    //MockDirectoryWrapper dir = newFSDirectory(new File(\"/p/lucene/indices/2bindex\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n\n    if (true) {\n\n      IndexWriter w = new IndexWriter(dir,\n                                      new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n                                      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setRAMBufferSizeMB(256.0)\n                                      .setMergeScheduler(new ConcurrentMergeScheduler())\n                                      .setMergePolicy(newLogMergePolicy(false, 10))\n                                      .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n      MergePolicy mp = w.getConfig().getMergePolicy();\n      if (mp instanceof LogByteSizeMergePolicy) {\n        // 1 petabyte:\n        ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n      }\n\n      Document doc = new Document();\n      final MyTokenStream ts = new MyTokenStream(random(), TERMS_PER_DOC);\n\n      FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n      customType.setIndexOptions(IndexOptions.DOCS_ONLY);\n      customType.setOmitNorms(true);\n      Field field = new Field(\"field\", ts, customType);\n      doc.add(field);\n      //w.setInfoStream(System.out);\n      final int numDocs = (int) (TERM_COUNT/TERMS_PER_DOC);\n\n      System.out.println(\"TERMS_PER_DOC=\" + TERMS_PER_DOC);\n      System.out.println(\"numDocs=\" + numDocs);\n\n      for(int i=0;i<numDocs;i++) {\n        final long t0 = System.currentTimeMillis();\n        w.addDocument(doc);\n        System.out.println(i + \" of \" + numDocs + \" \" + (System.currentTimeMillis()-t0) + \" msec\");\n      }\n      savedTerms = ts.savedTerms;\n\n      System.out.println(\"TEST: full merge\");\n      w.forceMerge(1);\n      System.out.println(\"TEST: close writer\");\n      w.close();\n    }\n\n    System.out.println(\"TEST: open reader\");\n    final IndexReader r = DirectoryReader.open(dir);\n    if (savedTerms == null) {\n      savedTerms = findTerms(r);\n    }\n    final int numSavedTerms = savedTerms.size();\n    final List<BytesRef> bigOrdTerms = new ArrayList<>(savedTerms.subList(numSavedTerms-10, numSavedTerms));\n    System.out.println(\"TEST: test big ord terms...\");\n    testSavedTerms(r, bigOrdTerms);\n    System.out.println(\"TEST: test all saved terms...\");\n    testSavedTerms(r, savedTerms);\n    r.close();\n\n    System.out.println(\"TEST: now CheckIndex...\");\n    CheckIndex.Status status = TestUtil.checkIndex(dir);\n    final long tc = status.segmentInfos.get(0).termIndexStatus.termCount;\n    assertTrue(\"count \" + tc + \" is not > \" + Integer.MAX_VALUE, tc > Integer.MAX_VALUE);\n\n    dir.close();\n    System.out.println(\"TEST: done!\");\n  }\n\n","sourceOld":"  @Ignore(\"Very slow. Enable manually by removing @Ignore.\")\n  public void test2BTerms() throws IOException {\n\n    System.out.println(\"Starting Test2B\");\n    final long TERM_COUNT = ((long) Integer.MAX_VALUE) + 100000000;\n\n    final int TERMS_PER_DOC = TestUtil.nextInt(random(), 100000, 1000000);\n\n    List<BytesRef> savedTerms = null;\n\n    BaseDirectoryWrapper dir = newFSDirectory(TestUtil.getTempDir(\"2BTerms\"));\n    //MockDirectoryWrapper dir = newFSDirectory(new File(\"/p/lucene/indices/2bindex\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n\n    if (true) {\n\n      IndexWriter w = new IndexWriter(dir,\n                                      new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n                                      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setRAMBufferSizeMB(256.0)\n                                      .setMergeScheduler(new ConcurrentMergeScheduler())\n                                      .setMergePolicy(newLogMergePolicy(false, 10))\n                                      .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n      MergePolicy mp = w.getConfig().getMergePolicy();\n      if (mp instanceof LogByteSizeMergePolicy) {\n        // 1 petabyte:\n        ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n      }\n\n      Document doc = new Document();\n      final MyTokenStream ts = new MyTokenStream(random(), TERMS_PER_DOC);\n\n      FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n      customType.setIndexOptions(IndexOptions.DOCS_ONLY);\n      customType.setOmitNorms(true);\n      Field field = new Field(\"field\", ts, customType);\n      doc.add(field);\n      //w.setInfoStream(System.out);\n      final int numDocs = (int) (TERM_COUNT/TERMS_PER_DOC);\n\n      System.out.println(\"TERMS_PER_DOC=\" + TERMS_PER_DOC);\n      System.out.println(\"numDocs=\" + numDocs);\n\n      for(int i=0;i<numDocs;i++) {\n        final long t0 = System.currentTimeMillis();\n        w.addDocument(doc);\n        System.out.println(i + \" of \" + numDocs + \" \" + (System.currentTimeMillis()-t0) + \" msec\");\n      }\n      savedTerms = ts.savedTerms;\n\n      System.out.println(\"TEST: full merge\");\n      w.forceMerge(1);\n      System.out.println(\"TEST: close writer\");\n      w.close();\n    }\n\n    System.out.println(\"TEST: open reader\");\n    final IndexReader r = DirectoryReader.open(dir);\n    if (savedTerms == null) {\n      savedTerms = findTerms(r);\n    }\n    final int numSavedTerms = savedTerms.size();\n    final List<BytesRef> bigOrdTerms = new ArrayList<>(savedTerms.subList(numSavedTerms-10, numSavedTerms));\n    System.out.println(\"TEST: test big ord terms...\");\n    testSavedTerms(r, bigOrdTerms);\n    System.out.println(\"TEST: test all saved terms...\");\n    testSavedTerms(r, savedTerms);\n    r.close();\n\n    System.out.println(\"TEST: now CheckIndex...\");\n    CheckIndex.Status status = TestUtil.checkIndex(dir);\n    final long tc = status.segmentInfos.get(0).termIndexStatus.termCount;\n    assertTrue(\"count \" + tc + \" is not > \" + Integer.MAX_VALUE, tc > Integer.MAX_VALUE);\n\n    dir.close();\n    System.out.println(\"TEST: done!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#test2BTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#test2BTerms().mjava","sourceNew":"  @Ignore(\"Very slow. Enable manually by removing @Ignore.\")\n  public void test2BTerms() throws IOException {\n\n    System.out.println(\"Starting Test2B\");\n    final long TERM_COUNT = ((long) Integer.MAX_VALUE) + 100000000;\n\n    final int TERMS_PER_DOC = TestUtil.nextInt(random(), 100000, 1000000);\n\n    List<BytesRef> savedTerms = null;\n\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"2BTerms\"));\n    //MockDirectoryWrapper dir = newFSDirectory(new File(\"/p/lucene/indices/2bindex\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n\n    if (true) {\n\n      IndexWriter w = new IndexWriter(dir,\n                                      new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n                                      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setRAMBufferSizeMB(256.0)\n                                      .setMergeScheduler(new ConcurrentMergeScheduler())\n                                      .setMergePolicy(newLogMergePolicy(false, 10))\n                                      .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n      MergePolicy mp = w.getConfig().getMergePolicy();\n      if (mp instanceof LogByteSizeMergePolicy) {\n        // 1 petabyte:\n        ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n      }\n\n      Document doc = new Document();\n      final MyTokenStream ts = new MyTokenStream(random(), TERMS_PER_DOC);\n\n      FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n      customType.setIndexOptions(IndexOptions.DOCS_ONLY);\n      customType.setOmitNorms(true);\n      Field field = new Field(\"field\", ts, customType);\n      doc.add(field);\n      //w.setInfoStream(System.out);\n      final int numDocs = (int) (TERM_COUNT/TERMS_PER_DOC);\n\n      System.out.println(\"TERMS_PER_DOC=\" + TERMS_PER_DOC);\n      System.out.println(\"numDocs=\" + numDocs);\n\n      for(int i=0;i<numDocs;i++) {\n        final long t0 = System.currentTimeMillis();\n        w.addDocument(doc);\n        System.out.println(i + \" of \" + numDocs + \" \" + (System.currentTimeMillis()-t0) + \" msec\");\n      }\n      savedTerms = ts.savedTerms;\n\n      System.out.println(\"TEST: full merge\");\n      w.forceMerge(1);\n      System.out.println(\"TEST: close writer\");\n      w.close();\n    }\n\n    System.out.println(\"TEST: open reader\");\n    final IndexReader r = DirectoryReader.open(dir);\n    if (savedTerms == null) {\n      savedTerms = findTerms(r);\n    }\n    final int numSavedTerms = savedTerms.size();\n    final List<BytesRef> bigOrdTerms = new ArrayList<>(savedTerms.subList(numSavedTerms-10, numSavedTerms));\n    System.out.println(\"TEST: test big ord terms...\");\n    testSavedTerms(r, bigOrdTerms);\n    System.out.println(\"TEST: test all saved terms...\");\n    testSavedTerms(r, savedTerms);\n    r.close();\n\n    System.out.println(\"TEST: now CheckIndex...\");\n    CheckIndex.Status status = TestUtil.checkIndex(dir);\n    final long tc = status.segmentInfos.get(0).termIndexStatus.termCount;\n    assertTrue(\"count \" + tc + \" is not > \" + Integer.MAX_VALUE, tc > Integer.MAX_VALUE);\n\n    dir.close();\n    System.out.println(\"TEST: done!\");\n  }\n\n","sourceOld":"  @Ignore(\"Very slow. Enable manually by removing @Ignore.\")\n  public void test2BTerms() throws IOException {\n\n    System.out.println(\"Starting Test2B\");\n    final long TERM_COUNT = ((long) Integer.MAX_VALUE) + 100000000;\n\n    final int TERMS_PER_DOC = TestUtil.nextInt(random(), 100000, 1000000);\n\n    List<BytesRef> savedTerms = null;\n\n    BaseDirectoryWrapper dir = newFSDirectory(TestUtil.createTempDir(\"2BTerms\"));\n    //MockDirectoryWrapper dir = newFSDirectory(new File(\"/p/lucene/indices/2bindex\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n\n    if (true) {\n\n      IndexWriter w = new IndexWriter(dir,\n                                      new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n                                      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setRAMBufferSizeMB(256.0)\n                                      .setMergeScheduler(new ConcurrentMergeScheduler())\n                                      .setMergePolicy(newLogMergePolicy(false, 10))\n                                      .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n      MergePolicy mp = w.getConfig().getMergePolicy();\n      if (mp instanceof LogByteSizeMergePolicy) {\n        // 1 petabyte:\n        ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n      }\n\n      Document doc = new Document();\n      final MyTokenStream ts = new MyTokenStream(random(), TERMS_PER_DOC);\n\n      FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n      customType.setIndexOptions(IndexOptions.DOCS_ONLY);\n      customType.setOmitNorms(true);\n      Field field = new Field(\"field\", ts, customType);\n      doc.add(field);\n      //w.setInfoStream(System.out);\n      final int numDocs = (int) (TERM_COUNT/TERMS_PER_DOC);\n\n      System.out.println(\"TERMS_PER_DOC=\" + TERMS_PER_DOC);\n      System.out.println(\"numDocs=\" + numDocs);\n\n      for(int i=0;i<numDocs;i++) {\n        final long t0 = System.currentTimeMillis();\n        w.addDocument(doc);\n        System.out.println(i + \" of \" + numDocs + \" \" + (System.currentTimeMillis()-t0) + \" msec\");\n      }\n      savedTerms = ts.savedTerms;\n\n      System.out.println(\"TEST: full merge\");\n      w.forceMerge(1);\n      System.out.println(\"TEST: close writer\");\n      w.close();\n    }\n\n    System.out.println(\"TEST: open reader\");\n    final IndexReader r = DirectoryReader.open(dir);\n    if (savedTerms == null) {\n      savedTerms = findTerms(r);\n    }\n    final int numSavedTerms = savedTerms.size();\n    final List<BytesRef> bigOrdTerms = new ArrayList<>(savedTerms.subList(numSavedTerms-10, numSavedTerms));\n    System.out.println(\"TEST: test big ord terms...\");\n    testSavedTerms(r, bigOrdTerms);\n    System.out.println(\"TEST: test all saved terms...\");\n    testSavedTerms(r, savedTerms);\n    r.close();\n\n    System.out.println(\"TEST: now CheckIndex...\");\n    CheckIndex.Status status = TestUtil.checkIndex(dir);\n    final long tc = status.segmentInfos.get(0).termIndexStatus.termCount;\n    assertTrue(\"count \" + tc + \" is not > \" + Integer.MAX_VALUE, tc > Integer.MAX_VALUE);\n\n    dir.close();\n    System.out.println(\"TEST: done!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#test2BTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#test2BTerms().mjava","sourceNew":"  @Ignore(\"Very slow. Enable manually by removing @Ignore.\")\n  public void test2BTerms() throws IOException {\n\n    System.out.println(\"Starting Test2B\");\n    final long TERM_COUNT = ((long) Integer.MAX_VALUE) + 100000000;\n\n    final int TERMS_PER_DOC = TestUtil.nextInt(random(), 100000, 1000000);\n\n    List<BytesRef> savedTerms = null;\n\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"2BTerms\"));\n    //MockDirectoryWrapper dir = newFSDirectory(new File(\"/p/lucene/indices/2bindex\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n\n    if (true) {\n\n      IndexWriter w = new IndexWriter(dir,\n                                      new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n                                      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setRAMBufferSizeMB(256.0)\n                                      .setMergeScheduler(new ConcurrentMergeScheduler())\n                                      .setMergePolicy(newLogMergePolicy(false, 10))\n                                      .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n      MergePolicy mp = w.getConfig().getMergePolicy();\n      if (mp instanceof LogByteSizeMergePolicy) {\n        // 1 petabyte:\n        ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n      }\n\n      Document doc = new Document();\n      final MyTokenStream ts = new MyTokenStream(random(), TERMS_PER_DOC);\n\n      FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n      customType.setIndexOptions(IndexOptions.DOCS_ONLY);\n      customType.setOmitNorms(true);\n      Field field = new Field(\"field\", ts, customType);\n      doc.add(field);\n      //w.setInfoStream(System.out);\n      final int numDocs = (int) (TERM_COUNT/TERMS_PER_DOC);\n\n      System.out.println(\"TERMS_PER_DOC=\" + TERMS_PER_DOC);\n      System.out.println(\"numDocs=\" + numDocs);\n\n      for(int i=0;i<numDocs;i++) {\n        final long t0 = System.currentTimeMillis();\n        w.addDocument(doc);\n        System.out.println(i + \" of \" + numDocs + \" \" + (System.currentTimeMillis()-t0) + \" msec\");\n      }\n      savedTerms = ts.savedTerms;\n\n      System.out.println(\"TEST: full merge\");\n      w.forceMerge(1);\n      System.out.println(\"TEST: close writer\");\n      w.close();\n    }\n\n    System.out.println(\"TEST: open reader\");\n    final IndexReader r = DirectoryReader.open(dir);\n    if (savedTerms == null) {\n      savedTerms = findTerms(r);\n    }\n    final int numSavedTerms = savedTerms.size();\n    final List<BytesRef> bigOrdTerms = new ArrayList<>(savedTerms.subList(numSavedTerms-10, numSavedTerms));\n    System.out.println(\"TEST: test big ord terms...\");\n    testSavedTerms(r, bigOrdTerms);\n    System.out.println(\"TEST: test all saved terms...\");\n    testSavedTerms(r, savedTerms);\n    r.close();\n\n    System.out.println(\"TEST: now CheckIndex...\");\n    CheckIndex.Status status = TestUtil.checkIndex(dir);\n    final long tc = status.segmentInfos.get(0).termIndexStatus.termCount;\n    assertTrue(\"count \" + tc + \" is not > \" + Integer.MAX_VALUE, tc > Integer.MAX_VALUE);\n\n    dir.close();\n    System.out.println(\"TEST: done!\");\n  }\n\n","sourceOld":"  @Ignore(\"Very slow. Enable manually by removing @Ignore.\")\n  public void test2BTerms() throws IOException {\n\n    System.out.println(\"Starting Test2B\");\n    final long TERM_COUNT = ((long) Integer.MAX_VALUE) + 100000000;\n\n    final int TERMS_PER_DOC = TestUtil.nextInt(random(), 100000, 1000000);\n\n    List<BytesRef> savedTerms = null;\n\n    BaseDirectoryWrapper dir = newFSDirectory(TestUtil.getTempDir(\"2BTerms\"));\n    //MockDirectoryWrapper dir = newFSDirectory(new File(\"/p/lucene/indices/2bindex\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n\n    if (true) {\n\n      IndexWriter w = new IndexWriter(dir,\n                                      new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n                                      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setRAMBufferSizeMB(256.0)\n                                      .setMergeScheduler(new ConcurrentMergeScheduler())\n                                      .setMergePolicy(newLogMergePolicy(false, 10))\n                                      .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n      MergePolicy mp = w.getConfig().getMergePolicy();\n      if (mp instanceof LogByteSizeMergePolicy) {\n        // 1 petabyte:\n        ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n      }\n\n      Document doc = new Document();\n      final MyTokenStream ts = new MyTokenStream(random(), TERMS_PER_DOC);\n\n      FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n      customType.setIndexOptions(IndexOptions.DOCS_ONLY);\n      customType.setOmitNorms(true);\n      Field field = new Field(\"field\", ts, customType);\n      doc.add(field);\n      //w.setInfoStream(System.out);\n      final int numDocs = (int) (TERM_COUNT/TERMS_PER_DOC);\n\n      System.out.println(\"TERMS_PER_DOC=\" + TERMS_PER_DOC);\n      System.out.println(\"numDocs=\" + numDocs);\n\n      for(int i=0;i<numDocs;i++) {\n        final long t0 = System.currentTimeMillis();\n        w.addDocument(doc);\n        System.out.println(i + \" of \" + numDocs + \" \" + (System.currentTimeMillis()-t0) + \" msec\");\n      }\n      savedTerms = ts.savedTerms;\n\n      System.out.println(\"TEST: full merge\");\n      w.forceMerge(1);\n      System.out.println(\"TEST: close writer\");\n      w.close();\n    }\n\n    System.out.println(\"TEST: open reader\");\n    final IndexReader r = DirectoryReader.open(dir);\n    if (savedTerms == null) {\n      savedTerms = findTerms(r);\n    }\n    final int numSavedTerms = savedTerms.size();\n    final List<BytesRef> bigOrdTerms = new ArrayList<>(savedTerms.subList(numSavedTerms-10, numSavedTerms));\n    System.out.println(\"TEST: test big ord terms...\");\n    testSavedTerms(r, bigOrdTerms);\n    System.out.println(\"TEST: test all saved terms...\");\n    testSavedTerms(r, savedTerms);\n    r.close();\n\n    System.out.println(\"TEST: now CheckIndex...\");\n    CheckIndex.Status status = TestUtil.checkIndex(dir);\n    final long tc = status.segmentInfos.get(0).termIndexStatus.termCount;\n    assertTrue(\"count \" + tc + \" is not > \" + Integer.MAX_VALUE, tc > Integer.MAX_VALUE);\n\n    dir.close();\n    System.out.println(\"TEST: done!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#test2BTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#test2BTerms().mjava","sourceNew":"  @Ignore(\"Very slow. Enable manually by removing @Ignore.\")\n  public void test2BTerms() throws IOException {\n\n    System.out.println(\"Starting Test2B\");\n    final long TERM_COUNT = ((long) Integer.MAX_VALUE) + 100000000;\n\n    final int TERMS_PER_DOC = TestUtil.nextInt(random(), 100000, 1000000);\n\n    List<BytesRef> savedTerms = null;\n\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"2BTerms\"));\n    //MockDirectoryWrapper dir = newFSDirectory(new File(\"/p/lucene/indices/2bindex\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n\n    if (true) {\n\n      IndexWriter w = new IndexWriter(dir,\n                                      new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n                                      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setRAMBufferSizeMB(256.0)\n                                      .setMergeScheduler(new ConcurrentMergeScheduler())\n                                      .setMergePolicy(newLogMergePolicy(false, 10))\n                                      .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n      MergePolicy mp = w.getConfig().getMergePolicy();\n      if (mp instanceof LogByteSizeMergePolicy) {\n        // 1 petabyte:\n        ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n      }\n\n      Document doc = new Document();\n      final MyTokenStream ts = new MyTokenStream(random(), TERMS_PER_DOC);\n\n      FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n      customType.setIndexOptions(IndexOptions.DOCS_ONLY);\n      customType.setOmitNorms(true);\n      Field field = new Field(\"field\", ts, customType);\n      doc.add(field);\n      //w.setInfoStream(System.out);\n      final int numDocs = (int) (TERM_COUNT/TERMS_PER_DOC);\n\n      System.out.println(\"TERMS_PER_DOC=\" + TERMS_PER_DOC);\n      System.out.println(\"numDocs=\" + numDocs);\n\n      for(int i=0;i<numDocs;i++) {\n        final long t0 = System.currentTimeMillis();\n        w.addDocument(doc);\n        System.out.println(i + \" of \" + numDocs + \" \" + (System.currentTimeMillis()-t0) + \" msec\");\n      }\n      savedTerms = ts.savedTerms;\n\n      System.out.println(\"TEST: full merge\");\n      w.forceMerge(1);\n      System.out.println(\"TEST: close writer\");\n      w.shutdown();\n    }\n\n    System.out.println(\"TEST: open reader\");\n    final IndexReader r = DirectoryReader.open(dir);\n    if (savedTerms == null) {\n      savedTerms = findTerms(r);\n    }\n    final int numSavedTerms = savedTerms.size();\n    final List<BytesRef> bigOrdTerms = new ArrayList<>(savedTerms.subList(numSavedTerms-10, numSavedTerms));\n    System.out.println(\"TEST: test big ord terms...\");\n    testSavedTerms(r, bigOrdTerms);\n    System.out.println(\"TEST: test all saved terms...\");\n    testSavedTerms(r, savedTerms);\n    r.close();\n\n    System.out.println(\"TEST: now CheckIndex...\");\n    CheckIndex.Status status = TestUtil.checkIndex(dir);\n    final long tc = status.segmentInfos.get(0).termIndexStatus.termCount;\n    assertTrue(\"count \" + tc + \" is not > \" + Integer.MAX_VALUE, tc > Integer.MAX_VALUE);\n\n    dir.close();\n    System.out.println(\"TEST: done!\");\n  }\n\n","sourceOld":"  @Ignore(\"Very slow. Enable manually by removing @Ignore.\")\n  public void test2BTerms() throws IOException {\n\n    System.out.println(\"Starting Test2B\");\n    final long TERM_COUNT = ((long) Integer.MAX_VALUE) + 100000000;\n\n    final int TERMS_PER_DOC = TestUtil.nextInt(random(), 100000, 1000000);\n\n    List<BytesRef> savedTerms = null;\n\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"2BTerms\"));\n    //MockDirectoryWrapper dir = newFSDirectory(new File(\"/p/lucene/indices/2bindex\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n\n    if (true) {\n\n      IndexWriter w = new IndexWriter(dir,\n                                      new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n                                      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setRAMBufferSizeMB(256.0)\n                                      .setMergeScheduler(new ConcurrentMergeScheduler())\n                                      .setMergePolicy(newLogMergePolicy(false, 10))\n                                      .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n      MergePolicy mp = w.getConfig().getMergePolicy();\n      if (mp instanceof LogByteSizeMergePolicy) {\n        // 1 petabyte:\n        ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n      }\n\n      Document doc = new Document();\n      final MyTokenStream ts = new MyTokenStream(random(), TERMS_PER_DOC);\n\n      FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n      customType.setIndexOptions(IndexOptions.DOCS_ONLY);\n      customType.setOmitNorms(true);\n      Field field = new Field(\"field\", ts, customType);\n      doc.add(field);\n      //w.setInfoStream(System.out);\n      final int numDocs = (int) (TERM_COUNT/TERMS_PER_DOC);\n\n      System.out.println(\"TERMS_PER_DOC=\" + TERMS_PER_DOC);\n      System.out.println(\"numDocs=\" + numDocs);\n\n      for(int i=0;i<numDocs;i++) {\n        final long t0 = System.currentTimeMillis();\n        w.addDocument(doc);\n        System.out.println(i + \" of \" + numDocs + \" \" + (System.currentTimeMillis()-t0) + \" msec\");\n      }\n      savedTerms = ts.savedTerms;\n\n      System.out.println(\"TEST: full merge\");\n      w.forceMerge(1);\n      System.out.println(\"TEST: close writer\");\n      w.close();\n    }\n\n    System.out.println(\"TEST: open reader\");\n    final IndexReader r = DirectoryReader.open(dir);\n    if (savedTerms == null) {\n      savedTerms = findTerms(r);\n    }\n    final int numSavedTerms = savedTerms.size();\n    final List<BytesRef> bigOrdTerms = new ArrayList<>(savedTerms.subList(numSavedTerms-10, numSavedTerms));\n    System.out.println(\"TEST: test big ord terms...\");\n    testSavedTerms(r, bigOrdTerms);\n    System.out.println(\"TEST: test all saved terms...\");\n    testSavedTerms(r, savedTerms);\n    r.close();\n\n    System.out.println(\"TEST: now CheckIndex...\");\n    CheckIndex.Status status = TestUtil.checkIndex(dir);\n    final long tc = status.segmentInfos.get(0).termIndexStatus.termCount;\n    assertTrue(\"count \" + tc + \" is not > \" + Integer.MAX_VALUE, tc > Integer.MAX_VALUE);\n\n    dir.close();\n    System.out.println(\"TEST: done!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fbbcc0fe8e47d9f734fa81a325f09c6354a8f986","date":1397611965,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#test2BTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#test2BTerms().mjava","sourceNew":"  public void test2BTerms() throws IOException {\n\n    System.out.println(\"Starting Test2B\");\n    final long TERM_COUNT = ((long) Integer.MAX_VALUE) + 100000000;\n\n    final int TERMS_PER_DOC = TestUtil.nextInt(random(), 100000, 1000000);\n\n    List<BytesRef> savedTerms = null;\n\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"2BTerms\"));\n    //MockDirectoryWrapper dir = newFSDirectory(new File(\"/p/lucene/indices/2bindex\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n\n    if (true) {\n\n      IndexWriter w = new IndexWriter(dir,\n                                      new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n                                      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setRAMBufferSizeMB(256.0)\n                                      .setMergeScheduler(new ConcurrentMergeScheduler())\n                                      .setMergePolicy(newLogMergePolicy(false, 10))\n                                      .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n      MergePolicy mp = w.getConfig().getMergePolicy();\n      if (mp instanceof LogByteSizeMergePolicy) {\n        // 1 petabyte:\n        ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n      }\n\n      Document doc = new Document();\n      final MyTokenStream ts = new MyTokenStream(random(), TERMS_PER_DOC);\n\n      FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n      customType.setIndexOptions(IndexOptions.DOCS_ONLY);\n      customType.setOmitNorms(true);\n      Field field = new Field(\"field\", ts, customType);\n      doc.add(field);\n      //w.setInfoStream(System.out);\n      final int numDocs = (int) (TERM_COUNT/TERMS_PER_DOC);\n\n      System.out.println(\"TERMS_PER_DOC=\" + TERMS_PER_DOC);\n      System.out.println(\"numDocs=\" + numDocs);\n\n      for(int i=0;i<numDocs;i++) {\n        final long t0 = System.currentTimeMillis();\n        w.addDocument(doc);\n        System.out.println(i + \" of \" + numDocs + \" \" + (System.currentTimeMillis()-t0) + \" msec\");\n      }\n      savedTerms = ts.savedTerms;\n\n      System.out.println(\"TEST: full merge\");\n      w.forceMerge(1);\n      System.out.println(\"TEST: close writer\");\n      w.shutdown();\n    }\n\n    System.out.println(\"TEST: open reader\");\n    final IndexReader r = DirectoryReader.open(dir);\n    if (savedTerms == null) {\n      savedTerms = findTerms(r);\n    }\n    final int numSavedTerms = savedTerms.size();\n    final List<BytesRef> bigOrdTerms = new ArrayList<>(savedTerms.subList(numSavedTerms-10, numSavedTerms));\n    System.out.println(\"TEST: test big ord terms...\");\n    testSavedTerms(r, bigOrdTerms);\n    System.out.println(\"TEST: test all saved terms...\");\n    testSavedTerms(r, savedTerms);\n    r.close();\n\n    System.out.println(\"TEST: now CheckIndex...\");\n    CheckIndex.Status status = TestUtil.checkIndex(dir);\n    final long tc = status.segmentInfos.get(0).termIndexStatus.termCount;\n    assertTrue(\"count \" + tc + \" is not > \" + Integer.MAX_VALUE, tc > Integer.MAX_VALUE);\n\n    dir.close();\n    System.out.println(\"TEST: done!\");\n  }\n\n","sourceOld":"  @Ignore(\"Very slow. Enable manually by removing @Ignore.\")\n  public void test2BTerms() throws IOException {\n\n    System.out.println(\"Starting Test2B\");\n    final long TERM_COUNT = ((long) Integer.MAX_VALUE) + 100000000;\n\n    final int TERMS_PER_DOC = TestUtil.nextInt(random(), 100000, 1000000);\n\n    List<BytesRef> savedTerms = null;\n\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"2BTerms\"));\n    //MockDirectoryWrapper dir = newFSDirectory(new File(\"/p/lucene/indices/2bindex\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n\n    if (true) {\n\n      IndexWriter w = new IndexWriter(dir,\n                                      new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n                                      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setRAMBufferSizeMB(256.0)\n                                      .setMergeScheduler(new ConcurrentMergeScheduler())\n                                      .setMergePolicy(newLogMergePolicy(false, 10))\n                                      .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n      MergePolicy mp = w.getConfig().getMergePolicy();\n      if (mp instanceof LogByteSizeMergePolicy) {\n        // 1 petabyte:\n        ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n      }\n\n      Document doc = new Document();\n      final MyTokenStream ts = new MyTokenStream(random(), TERMS_PER_DOC);\n\n      FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n      customType.setIndexOptions(IndexOptions.DOCS_ONLY);\n      customType.setOmitNorms(true);\n      Field field = new Field(\"field\", ts, customType);\n      doc.add(field);\n      //w.setInfoStream(System.out);\n      final int numDocs = (int) (TERM_COUNT/TERMS_PER_DOC);\n\n      System.out.println(\"TERMS_PER_DOC=\" + TERMS_PER_DOC);\n      System.out.println(\"numDocs=\" + numDocs);\n\n      for(int i=0;i<numDocs;i++) {\n        final long t0 = System.currentTimeMillis();\n        w.addDocument(doc);\n        System.out.println(i + \" of \" + numDocs + \" \" + (System.currentTimeMillis()-t0) + \" msec\");\n      }\n      savedTerms = ts.savedTerms;\n\n      System.out.println(\"TEST: full merge\");\n      w.forceMerge(1);\n      System.out.println(\"TEST: close writer\");\n      w.shutdown();\n    }\n\n    System.out.println(\"TEST: open reader\");\n    final IndexReader r = DirectoryReader.open(dir);\n    if (savedTerms == null) {\n      savedTerms = findTerms(r);\n    }\n    final int numSavedTerms = savedTerms.size();\n    final List<BytesRef> bigOrdTerms = new ArrayList<>(savedTerms.subList(numSavedTerms-10, numSavedTerms));\n    System.out.println(\"TEST: test big ord terms...\");\n    testSavedTerms(r, bigOrdTerms);\n    System.out.println(\"TEST: test all saved terms...\");\n    testSavedTerms(r, savedTerms);\n    r.close();\n\n    System.out.println(\"TEST: now CheckIndex...\");\n    CheckIndex.Status status = TestUtil.checkIndex(dir);\n    final long tc = status.segmentInfos.get(0).termIndexStatus.termCount;\n    assertTrue(\"count \" + tc + \" is not > \" + Integer.MAX_VALUE, tc > Integer.MAX_VALUE);\n\n    dir.close();\n    System.out.println(\"TEST: done!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#test2BTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#test2BTerms().mjava","sourceNew":"  public void test2BTerms() throws IOException {\n\n    System.out.println(\"Starting Test2B\");\n    final long TERM_COUNT = ((long) Integer.MAX_VALUE) + 100000000;\n\n    final int TERMS_PER_DOC = TestUtil.nextInt(random(), 100000, 1000000);\n\n    List<BytesRef> savedTerms = null;\n\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"2BTerms\"));\n    //MockDirectoryWrapper dir = newFSDirectory(new File(\"/p/lucene/indices/2bindex\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n\n    if (true) {\n\n      IndexWriter w = new IndexWriter(dir,\n                                      new IndexWriterConfig(new MockAnalyzer(random()))\n                                      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setRAMBufferSizeMB(256.0)\n                                      .setMergeScheduler(new ConcurrentMergeScheduler())\n                                      .setMergePolicy(newLogMergePolicy(false, 10))\n                                      .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n      MergePolicy mp = w.getConfig().getMergePolicy();\n      if (mp instanceof LogByteSizeMergePolicy) {\n        // 1 petabyte:\n        ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n      }\n\n      Document doc = new Document();\n      final MyTokenStream ts = new MyTokenStream(random(), TERMS_PER_DOC);\n\n      FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n      customType.setIndexOptions(IndexOptions.DOCS_ONLY);\n      customType.setOmitNorms(true);\n      Field field = new Field(\"field\", ts, customType);\n      doc.add(field);\n      //w.setInfoStream(System.out);\n      final int numDocs = (int) (TERM_COUNT/TERMS_PER_DOC);\n\n      System.out.println(\"TERMS_PER_DOC=\" + TERMS_PER_DOC);\n      System.out.println(\"numDocs=\" + numDocs);\n\n      for(int i=0;i<numDocs;i++) {\n        final long t0 = System.currentTimeMillis();\n        w.addDocument(doc);\n        System.out.println(i + \" of \" + numDocs + \" \" + (System.currentTimeMillis()-t0) + \" msec\");\n      }\n      savedTerms = ts.savedTerms;\n\n      System.out.println(\"TEST: full merge\");\n      w.forceMerge(1);\n      System.out.println(\"TEST: close writer\");\n      w.close();\n    }\n\n    System.out.println(\"TEST: open reader\");\n    final IndexReader r = DirectoryReader.open(dir);\n    if (savedTerms == null) {\n      savedTerms = findTerms(r);\n    }\n    final int numSavedTerms = savedTerms.size();\n    final List<BytesRef> bigOrdTerms = new ArrayList<>(savedTerms.subList(numSavedTerms-10, numSavedTerms));\n    System.out.println(\"TEST: test big ord terms...\");\n    testSavedTerms(r, bigOrdTerms);\n    System.out.println(\"TEST: test all saved terms...\");\n    testSavedTerms(r, savedTerms);\n    r.close();\n\n    System.out.println(\"TEST: now CheckIndex...\");\n    CheckIndex.Status status = TestUtil.checkIndex(dir);\n    final long tc = status.segmentInfos.get(0).termIndexStatus.termCount;\n    assertTrue(\"count \" + tc + \" is not > \" + Integer.MAX_VALUE, tc > Integer.MAX_VALUE);\n\n    dir.close();\n    System.out.println(\"TEST: done!\");\n  }\n\n","sourceOld":"  public void test2BTerms() throws IOException {\n\n    System.out.println(\"Starting Test2B\");\n    final long TERM_COUNT = ((long) Integer.MAX_VALUE) + 100000000;\n\n    final int TERMS_PER_DOC = TestUtil.nextInt(random(), 100000, 1000000);\n\n    List<BytesRef> savedTerms = null;\n\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"2BTerms\"));\n    //MockDirectoryWrapper dir = newFSDirectory(new File(\"/p/lucene/indices/2bindex\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n\n    if (true) {\n\n      IndexWriter w = new IndexWriter(dir,\n                                      new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n                                      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setRAMBufferSizeMB(256.0)\n                                      .setMergeScheduler(new ConcurrentMergeScheduler())\n                                      .setMergePolicy(newLogMergePolicy(false, 10))\n                                      .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n      MergePolicy mp = w.getConfig().getMergePolicy();\n      if (mp instanceof LogByteSizeMergePolicy) {\n        // 1 petabyte:\n        ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n      }\n\n      Document doc = new Document();\n      final MyTokenStream ts = new MyTokenStream(random(), TERMS_PER_DOC);\n\n      FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n      customType.setIndexOptions(IndexOptions.DOCS_ONLY);\n      customType.setOmitNorms(true);\n      Field field = new Field(\"field\", ts, customType);\n      doc.add(field);\n      //w.setInfoStream(System.out);\n      final int numDocs = (int) (TERM_COUNT/TERMS_PER_DOC);\n\n      System.out.println(\"TERMS_PER_DOC=\" + TERMS_PER_DOC);\n      System.out.println(\"numDocs=\" + numDocs);\n\n      for(int i=0;i<numDocs;i++) {\n        final long t0 = System.currentTimeMillis();\n        w.addDocument(doc);\n        System.out.println(i + \" of \" + numDocs + \" \" + (System.currentTimeMillis()-t0) + \" msec\");\n      }\n      savedTerms = ts.savedTerms;\n\n      System.out.println(\"TEST: full merge\");\n      w.forceMerge(1);\n      System.out.println(\"TEST: close writer\");\n      w.shutdown();\n    }\n\n    System.out.println(\"TEST: open reader\");\n    final IndexReader r = DirectoryReader.open(dir);\n    if (savedTerms == null) {\n      savedTerms = findTerms(r);\n    }\n    final int numSavedTerms = savedTerms.size();\n    final List<BytesRef> bigOrdTerms = new ArrayList<>(savedTerms.subList(numSavedTerms-10, numSavedTerms));\n    System.out.println(\"TEST: test big ord terms...\");\n    testSavedTerms(r, bigOrdTerms);\n    System.out.println(\"TEST: test all saved terms...\");\n    testSavedTerms(r, savedTerms);\n    r.close();\n\n    System.out.println(\"TEST: now CheckIndex...\");\n    CheckIndex.Status status = TestUtil.checkIndex(dir);\n    final long tc = status.segmentInfos.get(0).termIndexStatus.termCount;\n    assertTrue(\"count \" + tc + \" is not > \" + Integer.MAX_VALUE, tc > Integer.MAX_VALUE);\n\n    dir.close();\n    System.out.println(\"TEST: done!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"656cfb06eff2244ff5a25ffb3ed3a79942ece85c","date":1413181096,"type":3,"author":"Shawn Heisey","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#test2BTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#test2BTerms().mjava","sourceNew":"  public void test2BTerms() throws IOException {\n\n    System.out.println(\"Starting Test2B\");\n    final long TERM_COUNT = ((long) Integer.MAX_VALUE) + 100000000;\n\n    final int TERMS_PER_DOC = TestUtil.nextInt(random(), 100000, 1000000);\n\n    List<BytesRef> savedTerms = null;\n\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"2BTerms\"));\n    //MockDirectoryWrapper dir = newFSDirectory(new File(\"/p/lucene/indices/2bindex\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n\n    if (true) {\n\n      IndexWriter w = new IndexWriter(dir,\n                                      new IndexWriterConfig(new MockAnalyzer(random()))\n                                      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setRAMBufferSizeMB(256.0)\n                                      .setMergeScheduler(new ConcurrentMergeScheduler())\n                                      .setMergePolicy(newLogMergePolicy(false, 10))\n                                      .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n                                      .setCodec(TestUtil.getDefaultCodec()));\n\n      MergePolicy mp = w.getConfig().getMergePolicy();\n      if (mp instanceof LogByteSizeMergePolicy) {\n        // 1 petabyte:\n        ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n      }\n\n      Document doc = new Document();\n      final MyTokenStream ts = new MyTokenStream(random(), TERMS_PER_DOC);\n\n      FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n      customType.setIndexOptions(IndexOptions.DOCS_ONLY);\n      customType.setOmitNorms(true);\n      Field field = new Field(\"field\", ts, customType);\n      doc.add(field);\n      //w.setInfoStream(System.out);\n      final int numDocs = (int) (TERM_COUNT/TERMS_PER_DOC);\n\n      System.out.println(\"TERMS_PER_DOC=\" + TERMS_PER_DOC);\n      System.out.println(\"numDocs=\" + numDocs);\n\n      for(int i=0;i<numDocs;i++) {\n        final long t0 = System.currentTimeMillis();\n        w.addDocument(doc);\n        System.out.println(i + \" of \" + numDocs + \" \" + (System.currentTimeMillis()-t0) + \" msec\");\n      }\n      savedTerms = ts.savedTerms;\n\n      System.out.println(\"TEST: full merge\");\n      w.forceMerge(1);\n      System.out.println(\"TEST: close writer\");\n      w.close();\n    }\n\n    System.out.println(\"TEST: open reader\");\n    final IndexReader r = DirectoryReader.open(dir);\n    if (savedTerms == null) {\n      savedTerms = findTerms(r);\n    }\n    final int numSavedTerms = savedTerms.size();\n    final List<BytesRef> bigOrdTerms = new ArrayList<>(savedTerms.subList(numSavedTerms-10, numSavedTerms));\n    System.out.println(\"TEST: test big ord terms...\");\n    testSavedTerms(r, bigOrdTerms);\n    System.out.println(\"TEST: test all saved terms...\");\n    testSavedTerms(r, savedTerms);\n    r.close();\n\n    System.out.println(\"TEST: now CheckIndex...\");\n    CheckIndex.Status status = TestUtil.checkIndex(dir);\n    final long tc = status.segmentInfos.get(0).termIndexStatus.termCount;\n    assertTrue(\"count \" + tc + \" is not > \" + Integer.MAX_VALUE, tc > Integer.MAX_VALUE);\n\n    dir.close();\n    System.out.println(\"TEST: done!\");\n  }\n\n","sourceOld":"  public void test2BTerms() throws IOException {\n\n    System.out.println(\"Starting Test2B\");\n    final long TERM_COUNT = ((long) Integer.MAX_VALUE) + 100000000;\n\n    final int TERMS_PER_DOC = TestUtil.nextInt(random(), 100000, 1000000);\n\n    List<BytesRef> savedTerms = null;\n\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"2BTerms\"));\n    //MockDirectoryWrapper dir = newFSDirectory(new File(\"/p/lucene/indices/2bindex\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n\n    if (true) {\n\n      IndexWriter w = new IndexWriter(dir,\n                                      new IndexWriterConfig(new MockAnalyzer(random()))\n                                      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setRAMBufferSizeMB(256.0)\n                                      .setMergeScheduler(new ConcurrentMergeScheduler())\n                                      .setMergePolicy(newLogMergePolicy(false, 10))\n                                      .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n      MergePolicy mp = w.getConfig().getMergePolicy();\n      if (mp instanceof LogByteSizeMergePolicy) {\n        // 1 petabyte:\n        ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n      }\n\n      Document doc = new Document();\n      final MyTokenStream ts = new MyTokenStream(random(), TERMS_PER_DOC);\n\n      FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n      customType.setIndexOptions(IndexOptions.DOCS_ONLY);\n      customType.setOmitNorms(true);\n      Field field = new Field(\"field\", ts, customType);\n      doc.add(field);\n      //w.setInfoStream(System.out);\n      final int numDocs = (int) (TERM_COUNT/TERMS_PER_DOC);\n\n      System.out.println(\"TERMS_PER_DOC=\" + TERMS_PER_DOC);\n      System.out.println(\"numDocs=\" + numDocs);\n\n      for(int i=0;i<numDocs;i++) {\n        final long t0 = System.currentTimeMillis();\n        w.addDocument(doc);\n        System.out.println(i + \" of \" + numDocs + \" \" + (System.currentTimeMillis()-t0) + \" msec\");\n      }\n      savedTerms = ts.savedTerms;\n\n      System.out.println(\"TEST: full merge\");\n      w.forceMerge(1);\n      System.out.println(\"TEST: close writer\");\n      w.close();\n    }\n\n    System.out.println(\"TEST: open reader\");\n    final IndexReader r = DirectoryReader.open(dir);\n    if (savedTerms == null) {\n      savedTerms = findTerms(r);\n    }\n    final int numSavedTerms = savedTerms.size();\n    final List<BytesRef> bigOrdTerms = new ArrayList<>(savedTerms.subList(numSavedTerms-10, numSavedTerms));\n    System.out.println(\"TEST: test big ord terms...\");\n    testSavedTerms(r, bigOrdTerms);\n    System.out.println(\"TEST: test all saved terms...\");\n    testSavedTerms(r, savedTerms);\n    r.close();\n\n    System.out.println(\"TEST: now CheckIndex...\");\n    CheckIndex.Status status = TestUtil.checkIndex(dir);\n    final long tc = status.segmentInfos.get(0).termIndexStatus.termCount;\n    assertTrue(\"count \" + tc + \" is not > \" + Integer.MAX_VALUE, tc > Integer.MAX_VALUE);\n\n    dir.close();\n    System.out.println(\"TEST: done!\");\n  }\n\n","bugFix":["2506f4a214732b20f56ab2fa8b975dc5d85c4d45"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#test2BTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#test2BTerms().mjava","sourceNew":"  public void test2BTerms() throws IOException {\n\n    System.out.println(\"Starting Test2B\");\n    final long TERM_COUNT = ((long) Integer.MAX_VALUE) + 100000000;\n\n    final int TERMS_PER_DOC = TestUtil.nextInt(random(), 100000, 1000000);\n\n    List<BytesRef> savedTerms = null;\n\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"2BTerms\"));\n    //MockDirectoryWrapper dir = newFSDirectory(new File(\"/p/lucene/indices/2bindex\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n\n    if (true) {\n\n      IndexWriter w = new IndexWriter(dir,\n                                      new IndexWriterConfig(new MockAnalyzer(random()))\n                                      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setRAMBufferSizeMB(256.0)\n                                      .setMergeScheduler(new ConcurrentMergeScheduler())\n                                      .setMergePolicy(newLogMergePolicy(false, 10))\n                                      .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n                                      .setCodec(TestUtil.getDefaultCodec()));\n\n      MergePolicy mp = w.getConfig().getMergePolicy();\n      if (mp instanceof LogByteSizeMergePolicy) {\n        // 1 petabyte:\n        ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n      }\n\n      Document doc = new Document();\n      final MyTokenStream ts = new MyTokenStream(random(), TERMS_PER_DOC);\n\n      FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n      customType.setIndexOptions(IndexOptions.DOCS_ONLY);\n      customType.setOmitNorms(true);\n      Field field = new Field(\"field\", ts, customType);\n      doc.add(field);\n      //w.setInfoStream(System.out);\n      final int numDocs = (int) (TERM_COUNT/TERMS_PER_DOC);\n\n      System.out.println(\"TERMS_PER_DOC=\" + TERMS_PER_DOC);\n      System.out.println(\"numDocs=\" + numDocs);\n\n      for(int i=0;i<numDocs;i++) {\n        final long t0 = System.currentTimeMillis();\n        w.addDocument(doc);\n        System.out.println(i + \" of \" + numDocs + \" \" + (System.currentTimeMillis()-t0) + \" msec\");\n      }\n      savedTerms = ts.savedTerms;\n\n      System.out.println(\"TEST: full merge\");\n      w.forceMerge(1);\n      System.out.println(\"TEST: close writer\");\n      w.close();\n    }\n\n    System.out.println(\"TEST: open reader\");\n    final IndexReader r = DirectoryReader.open(dir);\n    if (savedTerms == null) {\n      savedTerms = findTerms(r);\n    }\n    final int numSavedTerms = savedTerms.size();\n    final List<BytesRef> bigOrdTerms = new ArrayList<>(savedTerms.subList(numSavedTerms-10, numSavedTerms));\n    System.out.println(\"TEST: test big ord terms...\");\n    testSavedTerms(r, bigOrdTerms);\n    System.out.println(\"TEST: test all saved terms...\");\n    testSavedTerms(r, savedTerms);\n    r.close();\n\n    System.out.println(\"TEST: now CheckIndex...\");\n    CheckIndex.Status status = TestUtil.checkIndex(dir);\n    final long tc = status.segmentInfos.get(0).termIndexStatus.termCount;\n    assertTrue(\"count \" + tc + \" is not > \" + Integer.MAX_VALUE, tc > Integer.MAX_VALUE);\n\n    dir.close();\n    System.out.println(\"TEST: done!\");\n  }\n\n","sourceOld":"  public void test2BTerms() throws IOException {\n\n    System.out.println(\"Starting Test2B\");\n    final long TERM_COUNT = ((long) Integer.MAX_VALUE) + 100000000;\n\n    final int TERMS_PER_DOC = TestUtil.nextInt(random(), 100000, 1000000);\n\n    List<BytesRef> savedTerms = null;\n\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"2BTerms\"));\n    //MockDirectoryWrapper dir = newFSDirectory(new File(\"/p/lucene/indices/2bindex\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n\n    if (true) {\n\n      IndexWriter w = new IndexWriter(dir,\n                                      new IndexWriterConfig(new MockAnalyzer(random()))\n                                      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setRAMBufferSizeMB(256.0)\n                                      .setMergeScheduler(new ConcurrentMergeScheduler())\n                                      .setMergePolicy(newLogMergePolicy(false, 10))\n                                      .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n      MergePolicy mp = w.getConfig().getMergePolicy();\n      if (mp instanceof LogByteSizeMergePolicy) {\n        // 1 petabyte:\n        ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n      }\n\n      Document doc = new Document();\n      final MyTokenStream ts = new MyTokenStream(random(), TERMS_PER_DOC);\n\n      FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n      customType.setIndexOptions(IndexOptions.DOCS_ONLY);\n      customType.setOmitNorms(true);\n      Field field = new Field(\"field\", ts, customType);\n      doc.add(field);\n      //w.setInfoStream(System.out);\n      final int numDocs = (int) (TERM_COUNT/TERMS_PER_DOC);\n\n      System.out.println(\"TERMS_PER_DOC=\" + TERMS_PER_DOC);\n      System.out.println(\"numDocs=\" + numDocs);\n\n      for(int i=0;i<numDocs;i++) {\n        final long t0 = System.currentTimeMillis();\n        w.addDocument(doc);\n        System.out.println(i + \" of \" + numDocs + \" \" + (System.currentTimeMillis()-t0) + \" msec\");\n      }\n      savedTerms = ts.savedTerms;\n\n      System.out.println(\"TEST: full merge\");\n      w.forceMerge(1);\n      System.out.println(\"TEST: close writer\");\n      w.close();\n    }\n\n    System.out.println(\"TEST: open reader\");\n    final IndexReader r = DirectoryReader.open(dir);\n    if (savedTerms == null) {\n      savedTerms = findTerms(r);\n    }\n    final int numSavedTerms = savedTerms.size();\n    final List<BytesRef> bigOrdTerms = new ArrayList<>(savedTerms.subList(numSavedTerms-10, numSavedTerms));\n    System.out.println(\"TEST: test big ord terms...\");\n    testSavedTerms(r, bigOrdTerms);\n    System.out.println(\"TEST: test all saved terms...\");\n    testSavedTerms(r, savedTerms);\n    r.close();\n\n    System.out.println(\"TEST: now CheckIndex...\");\n    CheckIndex.Status status = TestUtil.checkIndex(dir);\n    final long tc = status.segmentInfos.get(0).termIndexStatus.termCount;\n    assertTrue(\"count \" + tc + \" is not > \" + Integer.MAX_VALUE, tc > Integer.MAX_VALUE);\n\n    dir.close();\n    System.out.println(\"TEST: done!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#test2BTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#test2BTerms().mjava","sourceNew":"  public void test2BTerms() throws IOException {\n\n    System.out.println(\"Starting Test2B\");\n    final long TERM_COUNT = ((long) Integer.MAX_VALUE) + 100000000;\n\n    final int TERMS_PER_DOC = TestUtil.nextInt(random(), 100000, 1000000);\n\n    List<BytesRef> savedTerms = null;\n\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"2BTerms\"));\n    //MockDirectoryWrapper dir = newFSDirectory(new File(\"/p/lucene/indices/2bindex\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n\n    if (true) {\n\n      IndexWriter w = new IndexWriter(dir,\n                                      new IndexWriterConfig(new MockAnalyzer(random()))\n                                      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setRAMBufferSizeMB(256.0)\n                                      .setMergeScheduler(new ConcurrentMergeScheduler())\n                                      .setMergePolicy(newLogMergePolicy(false, 10))\n                                      .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n                                      .setCodec(TestUtil.getDefaultCodec()));\n\n      MergePolicy mp = w.getConfig().getMergePolicy();\n      if (mp instanceof LogByteSizeMergePolicy) {\n        // 1 petabyte:\n        ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n      }\n\n      Document doc = new Document();\n      final MyTokenStream ts = new MyTokenStream(random(), TERMS_PER_DOC);\n\n      FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n      customType.setIndexOptions(IndexOptions.DOCS);\n      customType.setOmitNorms(true);\n      Field field = new Field(\"field\", ts, customType);\n      doc.add(field);\n      //w.setInfoStream(System.out);\n      final int numDocs = (int) (TERM_COUNT/TERMS_PER_DOC);\n\n      System.out.println(\"TERMS_PER_DOC=\" + TERMS_PER_DOC);\n      System.out.println(\"numDocs=\" + numDocs);\n\n      for(int i=0;i<numDocs;i++) {\n        final long t0 = System.currentTimeMillis();\n        w.addDocument(doc);\n        System.out.println(i + \" of \" + numDocs + \" \" + (System.currentTimeMillis()-t0) + \" msec\");\n      }\n      savedTerms = ts.savedTerms;\n\n      System.out.println(\"TEST: full merge\");\n      w.forceMerge(1);\n      System.out.println(\"TEST: close writer\");\n      w.close();\n    }\n\n    System.out.println(\"TEST: open reader\");\n    final IndexReader r = DirectoryReader.open(dir);\n    if (savedTerms == null) {\n      savedTerms = findTerms(r);\n    }\n    final int numSavedTerms = savedTerms.size();\n    final List<BytesRef> bigOrdTerms = new ArrayList<>(savedTerms.subList(numSavedTerms-10, numSavedTerms));\n    System.out.println(\"TEST: test big ord terms...\");\n    testSavedTerms(r, bigOrdTerms);\n    System.out.println(\"TEST: test all saved terms...\");\n    testSavedTerms(r, savedTerms);\n    r.close();\n\n    System.out.println(\"TEST: now CheckIndex...\");\n    CheckIndex.Status status = TestUtil.checkIndex(dir);\n    final long tc = status.segmentInfos.get(0).termIndexStatus.termCount;\n    assertTrue(\"count \" + tc + \" is not > \" + Integer.MAX_VALUE, tc > Integer.MAX_VALUE);\n\n    dir.close();\n    System.out.println(\"TEST: done!\");\n  }\n\n","sourceOld":"  public void test2BTerms() throws IOException {\n\n    System.out.println(\"Starting Test2B\");\n    final long TERM_COUNT = ((long) Integer.MAX_VALUE) + 100000000;\n\n    final int TERMS_PER_DOC = TestUtil.nextInt(random(), 100000, 1000000);\n\n    List<BytesRef> savedTerms = null;\n\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"2BTerms\"));\n    //MockDirectoryWrapper dir = newFSDirectory(new File(\"/p/lucene/indices/2bindex\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    dir.setCheckIndexOnClose(false); // don't double-checkindex\n\n    if (true) {\n\n      IndexWriter w = new IndexWriter(dir,\n                                      new IndexWriterConfig(new MockAnalyzer(random()))\n                                      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setRAMBufferSizeMB(256.0)\n                                      .setMergeScheduler(new ConcurrentMergeScheduler())\n                                      .setMergePolicy(newLogMergePolicy(false, 10))\n                                      .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n                                      .setCodec(TestUtil.getDefaultCodec()));\n\n      MergePolicy mp = w.getConfig().getMergePolicy();\n      if (mp instanceof LogByteSizeMergePolicy) {\n        // 1 petabyte:\n        ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n      }\n\n      Document doc = new Document();\n      final MyTokenStream ts = new MyTokenStream(random(), TERMS_PER_DOC);\n\n      FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n      customType.setIndexOptions(IndexOptions.DOCS_ONLY);\n      customType.setOmitNorms(true);\n      Field field = new Field(\"field\", ts, customType);\n      doc.add(field);\n      //w.setInfoStream(System.out);\n      final int numDocs = (int) (TERM_COUNT/TERMS_PER_DOC);\n\n      System.out.println(\"TERMS_PER_DOC=\" + TERMS_PER_DOC);\n      System.out.println(\"numDocs=\" + numDocs);\n\n      for(int i=0;i<numDocs;i++) {\n        final long t0 = System.currentTimeMillis();\n        w.addDocument(doc);\n        System.out.println(i + \" of \" + numDocs + \" \" + (System.currentTimeMillis()-t0) + \" msec\");\n      }\n      savedTerms = ts.savedTerms;\n\n      System.out.println(\"TEST: full merge\");\n      w.forceMerge(1);\n      System.out.println(\"TEST: close writer\");\n      w.close();\n    }\n\n    System.out.println(\"TEST: open reader\");\n    final IndexReader r = DirectoryReader.open(dir);\n    if (savedTerms == null) {\n      savedTerms = findTerms(r);\n    }\n    final int numSavedTerms = savedTerms.size();\n    final List<BytesRef> bigOrdTerms = new ArrayList<>(savedTerms.subList(numSavedTerms-10, numSavedTerms));\n    System.out.println(\"TEST: test big ord terms...\");\n    testSavedTerms(r, bigOrdTerms);\n    System.out.println(\"TEST: test all saved terms...\");\n    testSavedTerms(r, savedTerms);\n    r.close();\n\n    System.out.println(\"TEST: now CheckIndex...\");\n    CheckIndex.Status status = TestUtil.checkIndex(dir);\n    final long tc = status.segmentInfos.get(0).termIndexStatus.termCount;\n    assertTrue(\"count \" + tc + \" is not > \" + Integer.MAX_VALUE, tc > Integer.MAX_VALUE);\n\n    dir.close();\n    System.out.println(\"TEST: done!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"fbbcc0fe8e47d9f734fa81a325f09c6354a8f986":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"55980207f1977bd1463465de1659b821347e2fa8":["d0ef034a4f10871667ae75181537775ddcf8ade4","656cfb06eff2244ff5a25ffb3ed3a79942ece85c"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"6613659748fe4411a7dcf85266e55db1f95f7315":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["656cfb06eff2244ff5a25ffb3ed3a79942ece85c"],"d0d579490a72f2e6297eaa648940611234c57cf1":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"aba371508186796cc6151d8223a5b4e16d02e26e":["ab3d175cd945ea1a556e30d25fb71edfc3adc6c0","d19974432be9aed28ee7dca73bdf01d139e763a9"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["ab3d175cd945ea1a556e30d25fb71edfc3adc6c0"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["d0d579490a72f2e6297eaa648940611234c57cf1"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["04f07771a2a7dd3a395700665ed839c3dae2def2","ab3d175cd945ea1a556e30d25fb71edfc3adc6c0"],"656cfb06eff2244ff5a25ffb3ed3a79942ece85c":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["fbbcc0fe8e47d9f734fa81a325f09c6354a8f986"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["fe33227f6805edab2036cbb80645cc4e2d1fa424","d19974432be9aed28ee7dca73bdf01d139e763a9"],"ab3d175cd945ea1a556e30d25fb71edfc3adc6c0":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2bb2842e561df4e8e9ad89010605fc86ac265465"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","d0d579490a72f2e6297eaa648940611234c57cf1"],"fbbcc0fe8e47d9f734fa81a325f09c6354a8f986":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"55980207f1977bd1463465de1659b821347e2fa8":[],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0d579490a72f2e6297eaa648940611234c57cf1":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["fe33227f6805edab2036cbb80645cc4e2d1fa424","ab3d175cd945ea1a556e30d25fb71edfc3adc6c0"],"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["6613659748fe4411a7dcf85266e55db1f95f7315","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"656cfb06eff2244ff5a25ffb3ed3a79942ece85c":["55980207f1977bd1463465de1659b821347e2fa8","2bb2842e561df4e8e9ad89010605fc86ac265465"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["55980207f1977bd1463465de1659b821347e2fa8","656cfb06eff2244ff5a25ffb3ed3a79942ece85c"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["fbbcc0fe8e47d9f734fa81a325f09c6354a8f986"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"ab3d175cd945ea1a556e30d25fb71edfc3adc6c0":["aba371508186796cc6151d8223a5b4e16d02e26e","d19974432be9aed28ee7dca73bdf01d139e763a9","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}