{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AutoScalingConfig.TriggerListenerConfig#TriggerListenerConfig(String,Map[String,Object]).mjava","commits":[{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AutoScalingConfig.TriggerListenerConfig#TriggerListenerConfig(String,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingConfig.TriggerListenerConfig#TriggerListenerConfig(String,Map[String,Object]).mjava","sourceNew":"    public TriggerListenerConfig(String name, Map<String, Object> properties) {\n      this.name = name;\n      if (properties == null) {\n        this.properties = Collections.emptyMap();\n      } else {\n        this.properties = Collections.unmodifiableMap(new HashMap<>(properties));\n      }\n      trigger = (String)this.properties.get(AutoScalingParams.TRIGGER);\n      List<String> stageNames = getList(AutoScalingParams.STAGE, this.properties);\n      for (String stageName : stageNames) {\n        try {\n          TriggerEventProcessorStage stage = TriggerEventProcessorStage.valueOf(stageName.toUpperCase(Locale.ROOT));\n          stages.add(stage);\n        } catch (Exception e) {\n          LOG.warn(\"Invalid stage name '\" + name + \"' in listener config, skipping: \" + properties);\n        }\n      }\n      listenerClass = (String)this.properties.get(AutoScalingParams.CLASS);\n      beforeActions = Collections.unmodifiableSet(new HashSet<>(getList(AutoScalingParams.BEFORE_ACTION, this.properties)));\n      afterActions = Collections.unmodifiableSet(new HashSet<>(getList(AutoScalingParams.AFTER_ACTION, this.properties)));\n    }\n\n","sourceOld":"    public TriggerListenerConfig(String name, Map<String, Object> properties) {\n      this.name = name;\n      this.properties.putAll(properties);\n      trigger = (String)properties.get(AutoScalingParams.TRIGGER);\n      List<String> stageNames = getList(AutoScalingParams.STAGE, properties);\n      for (String stageName : stageNames) {\n        try {\n          AutoScaling.EventProcessorStage stage = AutoScaling.EventProcessorStage.valueOf(stageName.toUpperCase(Locale.ROOT));\n          stages.add(stage);\n        } catch (Exception e) {\n          LOG.warn(\"Invalid stage name '\" + name + \"' in listener config, skipping: \" + properties);\n        }\n      }\n      listenerClass = (String)properties.get(AutoScalingParams.CLASS);\n      beforeActions = new HashSet<>(getList(AutoScalingParams.BEFORE_ACTION, properties));\n      afterActions = new HashSet<>(getList(AutoScalingParams.AFTER_ACTION, properties));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55ed5a78f8a4b37108ac73a894a105db562d303e","date":1500477652,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AutoScalingConfig.TriggerListenerConfig#TriggerListenerConfig(String,Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AutoScalingConfig.TriggerListenerConfig#TriggerListenerConfig(String,Map[String,Object]).mjava","sourceNew":"    public TriggerListenerConfig(String name, Map<String, Object> properties) {\n      this.name = name;\n      if (properties == null) {\n        this.properties = Collections.emptyMap();\n      } else {\n        this.properties = Collections.unmodifiableMap(new HashMap<>(properties));\n      }\n      trigger = (String)this.properties.get(AutoScalingParams.TRIGGER);\n      List<Object> stageNames = getList(AutoScalingParams.STAGE, this.properties);\n      for (Object stageName : stageNames) {\n        try {\n          TriggerEventProcessorStage stage = TriggerEventProcessorStage.valueOf(String.valueOf(stageName).toUpperCase(Locale.ROOT));\n          stages.add(stage);\n        } catch (Exception e) {\n          LOG.warn(\"Invalid stage name '\" + name + \"' in listener config, skipping: \" + properties);\n        }\n      }\n      listenerClass = (String)this.properties.get(AutoScalingParams.CLASS);\n      Set<String> bActions = new HashSet<>();\n      getList(AutoScalingParams.BEFORE_ACTION, this.properties).forEach(o -> bActions.add(String.valueOf(o)));\n      beforeActions = Collections.unmodifiableSet(bActions);\n      Set<String> aActions = new HashSet<>();\n      getList(AutoScalingParams.AFTER_ACTION, this.properties).forEach(o -> aActions.add(String.valueOf(o)));\n      afterActions = Collections.unmodifiableSet(aActions);\n    }\n\n","sourceOld":"    public TriggerListenerConfig(String name, Map<String, Object> properties) {\n      this.name = name;\n      if (properties == null) {\n        this.properties = Collections.emptyMap();\n      } else {\n        this.properties = Collections.unmodifiableMap(new HashMap<>(properties));\n      }\n      trigger = (String)this.properties.get(AutoScalingParams.TRIGGER);\n      List<String> stageNames = getList(AutoScalingParams.STAGE, this.properties);\n      for (String stageName : stageNames) {\n        try {\n          TriggerEventProcessorStage stage = TriggerEventProcessorStage.valueOf(stageName.toUpperCase(Locale.ROOT));\n          stages.add(stage);\n        } catch (Exception e) {\n          LOG.warn(\"Invalid stage name '\" + name + \"' in listener config, skipping: \" + properties);\n        }\n      }\n      listenerClass = (String)this.properties.get(AutoScalingParams.CLASS);\n      beforeActions = Collections.unmodifiableSet(new HashSet<>(getList(AutoScalingParams.BEFORE_ACTION, this.properties)));\n      afterActions = Collections.unmodifiableSet(new HashSet<>(getList(AutoScalingParams.AFTER_ACTION, this.properties)));\n    }\n\n","bugFix":null,"bugIntro":["25d862725cffd5d4d62fd002b5dc320f92c53365"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AutoScalingConfig.TriggerListenerConfig#TriggerListenerConfig(String,Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"    public TriggerListenerConfig(String name, Map<String, Object> properties) {\n      this.name = name;\n      if (properties == null) {\n        this.properties = Collections.emptyMap();\n      } else {\n        this.properties = Collections.unmodifiableMap(new HashMap<>(properties));\n      }\n      trigger = (String)this.properties.get(AutoScalingParams.TRIGGER);\n      List<Object> stageNames = getList(AutoScalingParams.STAGE, this.properties);\n      for (Object stageName : stageNames) {\n        try {\n          TriggerEventProcessorStage stage = TriggerEventProcessorStage.valueOf(String.valueOf(stageName).toUpperCase(Locale.ROOT));\n          stages.add(stage);\n        } catch (Exception e) {\n          LOG.warn(\"Invalid stage name '\" + name + \"' in listener config, skipping: \" + properties);\n        }\n      }\n      listenerClass = (String)this.properties.get(AutoScalingParams.CLASS);\n      Set<String> bActions = new HashSet<>();\n      getList(AutoScalingParams.BEFORE_ACTION, this.properties).forEach(o -> bActions.add(String.valueOf(o)));\n      beforeActions = Collections.unmodifiableSet(bActions);\n      Set<String> aActions = new HashSet<>();\n      getList(AutoScalingParams.AFTER_ACTION, this.properties).forEach(o -> aActions.add(String.valueOf(o)));\n      afterActions = Collections.unmodifiableSet(aActions);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AutoScalingConfig.TriggerListenerConfig#TriggerListenerConfig(String,Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"    public TriggerListenerConfig(String name, Map<String, Object> properties) {\n      this.name = name;\n      if (properties == null) {\n        this.properties = Collections.emptyMap();\n      } else {\n        this.properties = Collections.unmodifiableMap(new HashMap<>(properties));\n      }\n      trigger = (String)this.properties.get(AutoScalingParams.TRIGGER);\n      List<Object> stageNames = getList(AutoScalingParams.STAGE, this.properties);\n      for (Object stageName : stageNames) {\n        try {\n          TriggerEventProcessorStage stage = TriggerEventProcessorStage.valueOf(String.valueOf(stageName).toUpperCase(Locale.ROOT));\n          stages.add(stage);\n        } catch (Exception e) {\n          LOG.warn(\"Invalid stage name '\" + name + \"' in listener config, skipping: \" + properties);\n        }\n      }\n      listenerClass = (String)this.properties.get(AutoScalingParams.CLASS);\n      Set<String> bActions = new HashSet<>();\n      getList(AutoScalingParams.BEFORE_ACTION, this.properties).forEach(o -> bActions.add(String.valueOf(o)));\n      beforeActions = Collections.unmodifiableSet(bActions);\n      Set<String> aActions = new HashSet<>();\n      getList(AutoScalingParams.AFTER_ACTION, this.properties).forEach(o -> aActions.add(String.valueOf(o)));\n      afterActions = Collections.unmodifiableSet(aActions);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"25d862725cffd5d4d62fd002b5dc320f92c53365","date":1534448650,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AutoScalingConfig.TriggerListenerConfig#TriggerListenerConfig(String,Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AutoScalingConfig.TriggerListenerConfig#TriggerListenerConfig(String,Map[String,Object]).mjava","sourceNew":"    public TriggerListenerConfig(String name, Map<String, Object> properties) {\n      this.name = name;\n      if (properties == null) {\n        this.properties = Collections.emptyMap();\n      } else {\n        this.properties = Collections.unmodifiableMap(new LinkedHashMap<>(properties));\n      }\n      trigger = (String)this.properties.get(AutoScalingParams.TRIGGER);\n      List<Object> stageNames = getList(AutoScalingParams.STAGE, this.properties);\n      for (Object stageName : stageNames) {\n        try {\n          TriggerEventProcessorStage stage = TriggerEventProcessorStage.valueOf(String.valueOf(stageName).toUpperCase(Locale.ROOT));\n          stages.add(stage);\n        } catch (Exception e) {\n          LOG.warn(\"Invalid stage name '\" + name + \"' in listener config, skipping: \" + properties);\n        }\n      }\n      listenerClass = (String)this.properties.get(AutoScalingParams.CLASS);\n      Set<String> bActions = new LinkedHashSet<>();\n      getList(AutoScalingParams.BEFORE_ACTION, this.properties).forEach(o -> bActions.add(String.valueOf(o)));\n      beforeActions = Collections.unmodifiableSet(bActions);\n      Set<String> aActions = new LinkedHashSet<>();\n      getList(AutoScalingParams.AFTER_ACTION, this.properties).forEach(o -> aActions.add(String.valueOf(o)));\n      afterActions = Collections.unmodifiableSet(aActions);\n    }\n\n","sourceOld":"    public TriggerListenerConfig(String name, Map<String, Object> properties) {\n      this.name = name;\n      if (properties == null) {\n        this.properties = Collections.emptyMap();\n      } else {\n        this.properties = Collections.unmodifiableMap(new HashMap<>(properties));\n      }\n      trigger = (String)this.properties.get(AutoScalingParams.TRIGGER);\n      List<Object> stageNames = getList(AutoScalingParams.STAGE, this.properties);\n      for (Object stageName : stageNames) {\n        try {\n          TriggerEventProcessorStage stage = TriggerEventProcessorStage.valueOf(String.valueOf(stageName).toUpperCase(Locale.ROOT));\n          stages.add(stage);\n        } catch (Exception e) {\n          LOG.warn(\"Invalid stage name '\" + name + \"' in listener config, skipping: \" + properties);\n        }\n      }\n      listenerClass = (String)this.properties.get(AutoScalingParams.CLASS);\n      Set<String> bActions = new HashSet<>();\n      getList(AutoScalingParams.BEFORE_ACTION, this.properties).forEach(o -> bActions.add(String.valueOf(o)));\n      beforeActions = Collections.unmodifiableSet(bActions);\n      Set<String> aActions = new HashSet<>();\n      getList(AutoScalingParams.AFTER_ACTION, this.properties).forEach(o -> aActions.add(String.valueOf(o)));\n      afterActions = Collections.unmodifiableSet(aActions);\n    }\n\n","bugFix":["55ed5a78f8a4b37108ac73a894a105db562d303e","219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AutoScalingConfig.TriggerListenerConfig#TriggerListenerConfig(String,Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AutoScalingConfig.TriggerListenerConfig#TriggerListenerConfig(String,Map[String,Object]).mjava","sourceNew":"    public TriggerListenerConfig(String name, Map<String, Object> properties) {\n      this.name = name;\n      if (properties == null) {\n        this.properties = Collections.emptyMap();\n      } else {\n        this.properties = Collections.unmodifiableMap(new LinkedHashMap<>(properties));\n      }\n      trigger = (String)this.properties.get(AutoScalingParams.TRIGGER);\n      List<Object> stageNames = getList(AutoScalingParams.STAGE, this.properties);\n      for (Object stageName : stageNames) {\n        try {\n          TriggerEventProcessorStage stage = TriggerEventProcessorStage.valueOf(String.valueOf(stageName).toUpperCase(Locale.ROOT));\n          stages.add(stage);\n        } catch (Exception e) {\n          log.warn(\"Invalid stage name '\" + name + \"' in listener config, skipping: \" + properties);\n        }\n      }\n      listenerClass = (String)this.properties.get(AutoScalingParams.CLASS);\n      Set<String> bActions = new LinkedHashSet<>();\n      getList(AutoScalingParams.BEFORE_ACTION, this.properties).forEach(o -> bActions.add(String.valueOf(o)));\n      beforeActions = Collections.unmodifiableSet(bActions);\n      Set<String> aActions = new LinkedHashSet<>();\n      getList(AutoScalingParams.AFTER_ACTION, this.properties).forEach(o -> aActions.add(String.valueOf(o)));\n      afterActions = Collections.unmodifiableSet(aActions);\n    }\n\n","sourceOld":"    public TriggerListenerConfig(String name, Map<String, Object> properties) {\n      this.name = name;\n      if (properties == null) {\n        this.properties = Collections.emptyMap();\n      } else {\n        this.properties = Collections.unmodifiableMap(new LinkedHashMap<>(properties));\n      }\n      trigger = (String)this.properties.get(AutoScalingParams.TRIGGER);\n      List<Object> stageNames = getList(AutoScalingParams.STAGE, this.properties);\n      for (Object stageName : stageNames) {\n        try {\n          TriggerEventProcessorStage stage = TriggerEventProcessorStage.valueOf(String.valueOf(stageName).toUpperCase(Locale.ROOT));\n          stages.add(stage);\n        } catch (Exception e) {\n          LOG.warn(\"Invalid stage name '\" + name + \"' in listener config, skipping: \" + properties);\n        }\n      }\n      listenerClass = (String)this.properties.get(AutoScalingParams.CLASS);\n      Set<String> bActions = new LinkedHashSet<>();\n      getList(AutoScalingParams.BEFORE_ACTION, this.properties).forEach(o -> bActions.add(String.valueOf(o)));\n      beforeActions = Collections.unmodifiableSet(bActions);\n      Set<String> aActions = new LinkedHashSet<>();\n      getList(AutoScalingParams.AFTER_ACTION, this.properties).forEach(o -> aActions.add(String.valueOf(o)));\n      afterActions = Collections.unmodifiableSet(aActions);\n    }\n\n","bugFix":null,"bugIntro":["2f3b4abc3db125d94cdf32f0140920131201f5a1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2f3b4abc3db125d94cdf32f0140920131201f5a1","date":1555081315,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AutoScalingConfig.TriggerListenerConfig#TriggerListenerConfig(String,Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AutoScalingConfig.TriggerListenerConfig#TriggerListenerConfig(String,Map[String,Object]).mjava","sourceNew":"    public TriggerListenerConfig(String name, Map<String, Object> properties) {\n      this.name = name;\n      if (properties == null) {\n        this.properties = Collections.emptyMap();\n      } else {\n        this.properties = Collections.unmodifiableMap(new LinkedHashMap<>(properties));\n      }\n      trigger = (String)this.properties.get(AutoScalingParams.TRIGGER);\n      List<Object> stageNames = getList(AutoScalingParams.STAGE, this.properties);\n      for (Object stageName : stageNames) {\n        try {\n          TriggerEventProcessorStage stage = TriggerEventProcessorStage.valueOf(String.valueOf(stageName).toUpperCase(Locale.ROOT));\n          stages.add(stage);\n        } catch (Exception e) {\n          log.warn(\"Invalid stage name '{}' for '{}' in listener config, skipping it in: {}\",\n              stageName, name, properties);\n        }\n      }\n      listenerClass = (String)this.properties.get(AutoScalingParams.CLASS);\n      Set<String> bActions = new LinkedHashSet<>();\n      getList(AutoScalingParams.BEFORE_ACTION, this.properties).forEach(o -> bActions.add(String.valueOf(o)));\n      beforeActions = Collections.unmodifiableSet(bActions);\n      Set<String> aActions = new LinkedHashSet<>();\n      getList(AutoScalingParams.AFTER_ACTION, this.properties).forEach(o -> aActions.add(String.valueOf(o)));\n      afterActions = Collections.unmodifiableSet(aActions);\n    }\n\n","sourceOld":"    public TriggerListenerConfig(String name, Map<String, Object> properties) {\n      this.name = name;\n      if (properties == null) {\n        this.properties = Collections.emptyMap();\n      } else {\n        this.properties = Collections.unmodifiableMap(new LinkedHashMap<>(properties));\n      }\n      trigger = (String)this.properties.get(AutoScalingParams.TRIGGER);\n      List<Object> stageNames = getList(AutoScalingParams.STAGE, this.properties);\n      for (Object stageName : stageNames) {\n        try {\n          TriggerEventProcessorStage stage = TriggerEventProcessorStage.valueOf(String.valueOf(stageName).toUpperCase(Locale.ROOT));\n          stages.add(stage);\n        } catch (Exception e) {\n          log.warn(\"Invalid stage name '\" + name + \"' in listener config, skipping: \" + properties);\n        }\n      }\n      listenerClass = (String)this.properties.get(AutoScalingParams.CLASS);\n      Set<String> bActions = new LinkedHashSet<>();\n      getList(AutoScalingParams.BEFORE_ACTION, this.properties).forEach(o -> bActions.add(String.valueOf(o)));\n      beforeActions = Collections.unmodifiableSet(bActions);\n      Set<String> aActions = new LinkedHashSet<>();\n      getList(AutoScalingParams.AFTER_ACTION, this.properties).forEach(o -> aActions.add(String.valueOf(o)));\n      afterActions = Collections.unmodifiableSet(aActions);\n    }\n\n","bugFix":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AutoScalingConfig.TriggerListenerConfig#TriggerListenerConfig(String,Map[String,Object]).mjava","sourceNew":null,"sourceOld":"    public TriggerListenerConfig(String name, Map<String, Object> properties) {\n      this.name = name;\n      if (properties == null) {\n        this.properties = Collections.emptyMap();\n      } else {\n        this.properties = Collections.unmodifiableMap(new LinkedHashMap<>(properties));\n      }\n      trigger = (String)this.properties.get(AutoScalingParams.TRIGGER);\n      List<Object> stageNames = getList(AutoScalingParams.STAGE, this.properties);\n      for (Object stageName : stageNames) {\n        try {\n          TriggerEventProcessorStage stage = TriggerEventProcessorStage.valueOf(String.valueOf(stageName).toUpperCase(Locale.ROOT));\n          stages.add(stage);\n        } catch (Exception e) {\n          log.warn(\"Invalid stage name '{}' for '{}' in listener config, skipping it in: {}\",\n              stageName, name, properties);\n        }\n      }\n      listenerClass = (String)this.properties.get(AutoScalingParams.CLASS);\n      Set<String> bActions = new LinkedHashSet<>();\n      getList(AutoScalingParams.BEFORE_ACTION, this.properties).forEach(o -> bActions.add(String.valueOf(o)));\n      beforeActions = Collections.unmodifiableSet(bActions);\n      Set<String> aActions = new LinkedHashSet<>();\n      getList(AutoScalingParams.AFTER_ACTION, this.properties).forEach(o -> aActions.add(String.valueOf(o)));\n      afterActions = Collections.unmodifiableSet(aActions);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","55ed5a78f8a4b37108ac73a894a105db562d303e"],"55ed5a78f8a4b37108ac73a894a105db562d303e":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"3f504512a03d978990cbff30db0522b354e846db":["2f3b4abc3db125d94cdf32f0140920131201f5a1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2f3b4abc3db125d94cdf32f0140920131201f5a1":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"25d862725cffd5d4d62fd002b5dc320f92c53365":["560c18d71dad43d675158783c3840f8c80d6d39c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["25d862725cffd5d4d62fd002b5dc320f92c53365"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"55ed5a78f8a4b37108ac73a894a105db562d303e":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c","219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"2f3b4abc3db125d94cdf32f0140920131201f5a1":["3f504512a03d978990cbff30db0522b354e846db"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["55ed5a78f8a4b37108ac73a894a105db562d303e"],"560c18d71dad43d675158783c3840f8c80d6d39c":["25d862725cffd5d4d62fd002b5dc320f92c53365"],"25d862725cffd5d4d62fd002b5dc320f92c53365":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["2f3b4abc3db125d94cdf32f0140920131201f5a1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}