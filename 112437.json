{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testIterableThrowsException2().mjava","commits":[{"id":"7f72557fc48bb36e35802ffb52580e40de88d40d","date":1398996736,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testIterableThrowsException2().mjava","pathOld":"/dev/null","sourceNew":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/LUCENE-5611\")\n  public void testIterableThrowsException2() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    try {\n      w.addDocuments(new Iterable<Document>() {\n        @Override\n        public Iterator<Document> iterator() {\n          return new Iterator<Document>() {\n\n            @Override\n            public boolean hasNext() {\n              return true;\n            }\n\n            @Override\n            public Document next() {\n              throw new RuntimeException(\"boom\");\n            }\n\n            @Override\n            public void remove() { assert false; }\n          };\n        }\n      });\n    } catch (Exception e) {\n      assertNotNull(e.getMessage());\n      assertEquals(\"boom\", e.getMessage());\n    }\n    w.shutdown();\n    IOUtils.close(dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06555ac714e8cc3a237853c80f762cfabc07a509","date":1398998920,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testIterableThrowsException2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testIterableThrowsException2().mjava","sourceNew":"  public void testIterableThrowsException2() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    try {\n      w.addDocuments(new Iterable<Document>() {\n        @Override\n        public Iterator<Document> iterator() {\n          return new Iterator<Document>() {\n\n            @Override\n            public boolean hasNext() {\n              return true;\n            }\n\n            @Override\n            public Document next() {\n              throw new RuntimeException(\"boom\");\n            }\n\n            @Override\n            public void remove() { assert false; }\n          };\n        }\n      });\n    } catch (Exception e) {\n      assertNotNull(e.getMessage());\n      assertEquals(\"boom\", e.getMessage());\n    }\n    w.shutdown();\n    IOUtils.close(dir);\n  }\n\n","sourceOld":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/LUCENE-5611\")\n  public void testIterableThrowsException2() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    try {\n      w.addDocuments(new Iterable<Document>() {\n        @Override\n        public Iterator<Document> iterator() {\n          return new Iterator<Document>() {\n\n            @Override\n            public boolean hasNext() {\n              return true;\n            }\n\n            @Override\n            public Document next() {\n              throw new RuntimeException(\"boom\");\n            }\n\n            @Override\n            public void remove() { assert false; }\n          };\n        }\n      });\n    } catch (Exception e) {\n      assertNotNull(e.getMessage());\n      assertEquals(\"boom\", e.getMessage());\n    }\n    w.shutdown();\n    IOUtils.close(dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testIterableThrowsException2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testIterableThrowsException2().mjava","sourceNew":"  public void testIterableThrowsException2() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    try {\n      w.addDocuments(new Iterable<Document>() {\n        @Override\n        public Iterator<Document> iterator() {\n          return new Iterator<Document>() {\n\n            @Override\n            public boolean hasNext() {\n              return true;\n            }\n\n            @Override\n            public Document next() {\n              throw new RuntimeException(\"boom\");\n            }\n\n            @Override\n            public void remove() { assert false; }\n          };\n        }\n      });\n    } catch (Exception e) {\n      assertNotNull(e.getMessage());\n      assertEquals(\"boom\", e.getMessage());\n    }\n    w.shutdown();\n    IOUtils.close(dir);\n  }\n\n","sourceOld":"  public void testIterableThrowsException2() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    try {\n      w.addDocuments(new Iterable<Document>() {\n        @Override\n        public Iterator<Document> iterator() {\n          return new Iterator<Document>() {\n\n            @Override\n            public boolean hasNext() {\n              return true;\n            }\n\n            @Override\n            public Document next() {\n              throw new RuntimeException(\"boom\");\n            }\n\n            @Override\n            public void remove() { assert false; }\n          };\n        }\n      });\n    } catch (Exception e) {\n      assertNotNull(e.getMessage());\n      assertEquals(\"boom\", e.getMessage());\n    }\n    w.shutdown();\n    IOUtils.close(dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testIterableThrowsException2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testIterableThrowsException2().mjava","sourceNew":"  public void testIterableThrowsException2() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    try {\n      w.addDocuments(new Iterable<Document>() {\n        @Override\n        public Iterator<Document> iterator() {\n          return new Iterator<Document>() {\n\n            @Override\n            public boolean hasNext() {\n              return true;\n            }\n\n            @Override\n            public Document next() {\n              throw new RuntimeException(\"boom\");\n            }\n\n            @Override\n            public void remove() { assert false; }\n          };\n        }\n      });\n    } catch (Exception e) {\n      assertNotNull(e.getMessage());\n      assertEquals(\"boom\", e.getMessage());\n    }\n    w.close();\n    IOUtils.close(dir);\n  }\n\n","sourceOld":"  public void testIterableThrowsException2() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    try {\n      w.addDocuments(new Iterable<Document>() {\n        @Override\n        public Iterator<Document> iterator() {\n          return new Iterator<Document>() {\n\n            @Override\n            public boolean hasNext() {\n              return true;\n            }\n\n            @Override\n            public Document next() {\n              throw new RuntimeException(\"boom\");\n            }\n\n            @Override\n            public void remove() { assert false; }\n          };\n        }\n      });\n    } catch (Exception e) {\n      assertNotNull(e.getMessage());\n      assertEquals(\"boom\", e.getMessage());\n    }\n    w.shutdown();\n    IOUtils.close(dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testIterableThrowsException2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testIterableThrowsException2().mjava","sourceNew":"  public void testIterableThrowsException2() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Exception expected = expectThrows(Exception.class, () -> {\n      w.addDocuments(new Iterable<Document>() {\n        @Override\n        public Iterator<Document> iterator() {\n          return new Iterator<Document>() {\n\n            @Override\n            public boolean hasNext() {\n              return true;\n            }\n\n            @Override\n            public Document next() {\n              throw new RuntimeException(\"boom\");\n            }\n\n            @Override\n            public void remove() { assert false; }\n          };\n        }\n      });\n    });\n    assertEquals(\"boom\", expected.getMessage());\n\n    w.close();\n    IOUtils.close(dir);\n  }\n\n","sourceOld":"  public void testIterableThrowsException2() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    try {\n      w.addDocuments(new Iterable<Document>() {\n        @Override\n        public Iterator<Document> iterator() {\n          return new Iterator<Document>() {\n\n            @Override\n            public boolean hasNext() {\n              return true;\n            }\n\n            @Override\n            public Document next() {\n              throw new RuntimeException(\"boom\");\n            }\n\n            @Override\n            public void remove() { assert false; }\n          };\n        }\n      });\n    } catch (Exception e) {\n      assertNotNull(e.getMessage());\n      assertEquals(\"boom\", e.getMessage());\n    }\n    w.close();\n    IOUtils.close(dir);\n  }\n\n","bugFix":["7f72557fc48bb36e35802ffb52580e40de88d40d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7f72557fc48bb36e35802ffb52580e40de88d40d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["06555ac714e8cc3a237853c80f762cfabc07a509"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"06555ac714e8cc3a237853c80f762cfabc07a509":["7f72557fc48bb36e35802ffb52580e40de88d40d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"7f72557fc48bb36e35802ffb52580e40de88d40d":["06555ac714e8cc3a237853c80f762cfabc07a509"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f72557fc48bb36e35802ffb52580e40de88d40d"],"06555ac714e8cc3a237853c80f762cfabc07a509":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["05fe562aa248790944d43cdd478f512572835ba0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}