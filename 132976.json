{"path":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PostingsAndFreq#compareTo(PostingsAndFreq).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PostingsAndFreq#compareTo(PostingsAndFreq).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PostingsAndFreq#compareTo(PostingsAndFreq).mjava","sourceNew":"    public int compareTo(PostingsAndFreq other) {\n      if (docFreq == other.docFreq) {\n        if (position == other.position) {\n          return term.compareTo(other.term);\n        }\n        return position - other.position;\n      }\n      return docFreq - other.docFreq;\n    }\n\n","sourceOld":"    public int compareTo(PostingsAndFreq other) {\n      if (docFreq == other.docFreq) {\n        if (position == other.position) {\n          return term.compareTo(other.term);\n        }\n        return position - other.position;\n      }\n      return docFreq - other.docFreq;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2eaa5d4d2618a012373ae4574ebb6563933aa9f6","date":1331337973,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PostingsAndFreq#compareTo(PostingsAndFreq).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PostingsAndFreq#compareTo(PostingsAndFreq).mjava","sourceNew":"    public int compareTo(PostingsAndFreq other) {\n      if (docFreq != other.docFreq) {\n        return docFreq - other.docFreq;\n      }\n      if (position != other.position) {\n        return position - other.position;\n      }\n      if (nTerms != other.nTerms) {\n        return nTerms - other.nTerms;\n      }\n      if (nTerms == 0) {\n        return 0;\n      }\n      for (int i=0; i<terms.length; i++) {\n        int res = terms[i].compareTo(other.terms[i]);\n        if (res!=0) return res;\n      }\n      return 0;\n    }\n\n","sourceOld":"    public int compareTo(PostingsAndFreq other) {\n      if (docFreq == other.docFreq) {\n        if (position == other.position) {\n          return term.compareTo(other.term);\n        }\n        return position - other.position;\n      }\n      return docFreq - other.docFreq;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PostingsAndFreq#compareTo(PostingsAndFreq).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PostingsAndFreq#compareTo(PostingsAndFreq).mjava","sourceNew":"    public int compareTo(PostingsAndFreq other) {\n      if (docFreq != other.docFreq) {\n        return docFreq - other.docFreq;\n      }\n      if (position != other.position) {\n        return position - other.position;\n      }\n      if (nTerms != other.nTerms) {\n        return nTerms - other.nTerms;\n      }\n      if (nTerms == 0) {\n        return 0;\n      }\n      for (int i=0; i<terms.length; i++) {\n        int res = terms[i].compareTo(other.terms[i]);\n        if (res!=0) return res;\n      }\n      return 0;\n    }\n\n","sourceOld":"    public int compareTo(PostingsAndFreq other) {\n      if (docFreq == other.docFreq) {\n        if (position == other.position) {\n          return term.compareTo(other.term);\n        }\n        return position - other.position;\n      }\n      return docFreq - other.docFreq;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PostingsAndFreq#compareTo(PostingsAndFreq).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PostingsAndFreq#compareTo(PostingsAndFreq).mjava","sourceNew":"    @Override\n    public int compareTo(PostingsAndFreq other) {\n      if (docFreq != other.docFreq) {\n        return docFreq - other.docFreq;\n      }\n      if (position != other.position) {\n        return position - other.position;\n      }\n      if (nTerms != other.nTerms) {\n        return nTerms - other.nTerms;\n      }\n      if (nTerms == 0) {\n        return 0;\n      }\n      for (int i=0; i<terms.length; i++) {\n        int res = terms[i].compareTo(other.terms[i]);\n        if (res!=0) return res;\n      }\n      return 0;\n    }\n\n","sourceOld":"    public int compareTo(PostingsAndFreq other) {\n      if (docFreq != other.docFreq) {\n        return docFreq - other.docFreq;\n      }\n      if (position != other.position) {\n        return position - other.position;\n      }\n      if (nTerms != other.nTerms) {\n        return nTerms - other.nTerms;\n      }\n      if (nTerms == 0) {\n        return 0;\n      }\n      for (int i=0; i<terms.length; i++) {\n        int res = terms[i].compareTo(other.terms[i]);\n        if (res!=0) return res;\n      }\n      return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PostingsAndFreq#compareTo(PostingsAndFreq).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PostingsAndFreq#compareTo(PostingsAndFreq).mjava","sourceNew":"    @Override\n    public int compareTo(PostingsAndFreq other) {\n      if (docFreq != other.docFreq) {\n        return docFreq - other.docFreq;\n      }\n      if (position != other.position) {\n        return position - other.position;\n      }\n      if (nTerms != other.nTerms) {\n        return nTerms - other.nTerms;\n      }\n      if (nTerms == 0) {\n        return 0;\n      }\n      for (int i=0; i<terms.length; i++) {\n        int res = terms[i].compareTo(other.terms[i]);\n        if (res!=0) return res;\n      }\n      return 0;\n    }\n\n","sourceOld":"    public int compareTo(PostingsAndFreq other) {\n      if (docFreq != other.docFreq) {\n        return docFreq - other.docFreq;\n      }\n      if (position != other.position) {\n        return position - other.position;\n      }\n      if (nTerms != other.nTerms) {\n        return nTerms - other.nTerms;\n      }\n      if (nTerms == 0) {\n        return 0;\n      }\n      for (int i=0; i<terms.length; i++) {\n        int res = terms[i].compareTo(other.terms[i]);\n        if (res!=0) return res;\n      }\n      return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ac81480868d6bcd251ab080a87395b9e23d7c7","date":1429050381,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PostingsAndFreq#compareTo(PostingsAndFreq).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PostingsAndFreq#compareTo(PostingsAndFreq).mjava","sourceNew":"    @Override\n    public int compareTo(PostingsAndFreq other) {\n      if (position != other.position) {\n        return position - other.position;\n      }\n      if (nTerms != other.nTerms) {\n        return nTerms - other.nTerms;\n      }\n      if (nTerms == 0) {\n        return 0;\n      }\n      for (int i=0; i<terms.length; i++) {\n        int res = terms[i].compareTo(other.terms[i]);\n        if (res!=0) return res;\n      }\n      return 0;\n    }\n\n","sourceOld":"    @Override\n    public int compareTo(PostingsAndFreq other) {\n      if (docFreq != other.docFreq) {\n        return docFreq - other.docFreq;\n      }\n      if (position != other.position) {\n        return position - other.position;\n      }\n      if (nTerms != other.nTerms) {\n        return nTerms - other.nTerms;\n      }\n      if (nTerms == 0) {\n        return 0;\n      }\n      for (int i=0; i<terms.length; i++) {\n        int res = terms[i].compareTo(other.terms[i]);\n        if (res!=0) return res;\n      }\n      return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d5e43895c6f1bdbf4f7260372c0526309ea78ee","date":1429052573,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PostingsAndFreq#compareTo(PostingsAndFreq).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PostingsAndFreq#compareTo(PostingsAndFreq).mjava","sourceNew":"    @Override\n    public int compareTo(PostingsAndFreq other) {\n      if (docFreq != other.docFreq) {\n        return docFreq - other.docFreq;\n      }\n      if (position != other.position) {\n        return position - other.position;\n      }\n      if (nTerms != other.nTerms) {\n        return nTerms - other.nTerms;\n      }\n      if (nTerms == 0) {\n        return 0;\n      }\n      for (int i=0; i<terms.length; i++) {\n        int res = terms[i].compareTo(other.terms[i]);\n        if (res!=0) return res;\n      }\n      return 0;\n    }\n\n","sourceOld":"    @Override\n    public int compareTo(PostingsAndFreq other) {\n      if (position != other.position) {\n        return position - other.position;\n      }\n      if (nTerms != other.nTerms) {\n        return nTerms - other.nTerms;\n      }\n      if (nTerms == 0) {\n        return 0;\n      }\n      for (int i=0; i<terms.length; i++) {\n        int res = terms[i].compareTo(other.terms[i]);\n        if (res!=0) return res;\n      }\n      return 0;\n    }\n\n","bugFix":null,"bugIntro":["4c74000f48f15dd52e66dc2f279abd04cb226ed2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4c74000f48f15dd52e66dc2f279abd04cb226ed2","date":1429059243,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PostingsAndFreq#compareTo(PostingsAndFreq).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PostingsAndFreq#compareTo(PostingsAndFreq).mjava","sourceNew":"    @Override\n    public int compareTo(PostingsAndFreq other) {\n      if (position != other.position) {\n        return position - other.position;\n      }\n      if (nTerms != other.nTerms) {\n        return nTerms - other.nTerms;\n      }\n      if (nTerms == 0) {\n        return 0;\n      }\n      for (int i=0; i<terms.length; i++) {\n        int res = terms[i].compareTo(other.terms[i]);\n        if (res!=0) return res;\n      }\n      return 0;\n    }\n\n","sourceOld":"    @Override\n    public int compareTo(PostingsAndFreq other) {\n      if (docFreq != other.docFreq) {\n        return docFreq - other.docFreq;\n      }\n      if (position != other.position) {\n        return position - other.position;\n      }\n      if (nTerms != other.nTerms) {\n        return nTerms - other.nTerms;\n      }\n      if (nTerms == 0) {\n        return 0;\n      }\n      for (int i=0; i<terms.length; i++) {\n        int res = terms[i].compareTo(other.terms[i]);\n        if (res!=0) return res;\n      }\n      return 0;\n    }\n\n","bugFix":["6d5e43895c6f1bdbf4f7260372c0526309ea78ee"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6d5e43895c6f1bdbf4f7260372c0526309ea78ee":["f8ac81480868d6bcd251ab080a87395b9e23d7c7"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["2eaa5d4d2618a012373ae4574ebb6563933aa9f6","7530de27b87b961b51f01bd1299b7004d46e8823"],"38e3b736c7ca086d61b7dbb841c905ee115490da":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","2eaa5d4d2618a012373ae4574ebb6563933aa9f6"],"2eaa5d4d2618a012373ae4574ebb6563933aa9f6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8ac81480868d6bcd251ab080a87395b9e23d7c7":["7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["2eaa5d4d2618a012373ae4574ebb6563933aa9f6"],"4c74000f48f15dd52e66dc2f279abd04cb226ed2":["6d5e43895c6f1bdbf4f7260372c0526309ea78ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4c74000f48f15dd52e66dc2f279abd04cb226ed2"]},"commit2Childs":{"6d5e43895c6f1bdbf4f7260372c0526309ea78ee":["4c74000f48f15dd52e66dc2f279abd04cb226ed2"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"2eaa5d4d2618a012373ae4574ebb6563933aa9f6":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","38e3b736c7ca086d61b7dbb841c905ee115490da","7530de27b87b961b51f01bd1299b7004d46e8823"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["38e3b736c7ca086d61b7dbb841c905ee115490da","2eaa5d4d2618a012373ae4574ebb6563933aa9f6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f8ac81480868d6bcd251ab080a87395b9e23d7c7":["6d5e43895c6f1bdbf4f7260372c0526309ea78ee"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","f8ac81480868d6bcd251ab080a87395b9e23d7c7"],"4c74000f48f15dd52e66dc2f279abd04cb226ed2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}