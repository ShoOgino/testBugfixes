{"path":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInverseRange().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInverseRange().mjava","pathOld":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInverseRange().mjava","sourceNew":"  @Test\n  public void testInverseRange() throws Exception {\n    NumericRangeFilter<Long> f = NumericRangeFilter.newLongRange(\"field8\", 8, 1000L, -1000L, true, true);\n    assertSame(\"A inverse range should return the EMPTY_DOCIDSET instance\", DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(searcher.getIndexReader()));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, Long.MAX_VALUE, null, false, false);\n    assertSame(\"A exclusive range starting with Long.MAX_VALUE should return the EMPTY_DOCIDSET instance\",\n      DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(searcher.getIndexReader()));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, null, Long.MIN_VALUE, false, false);\n    assertSame(\"A exclusive range ending with Long.MIN_VALUE should return the EMPTY_DOCIDSET instance\",\n      DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(searcher.getIndexReader()));\n  }\n\n","sourceOld":"  @Test\n  public void testInverseRange() throws Exception {\n    NumericRangeFilter<Long> f = NumericRangeFilter.newLongRange(\"field8\", 8, 1000L, -1000L, true, true);\n    assertSame(\"A inverse range should return the EMPTY_DOCIDSET instance\", DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(searcher.getIndexReader()));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, Long.MAX_VALUE, null, false, false);\n    assertSame(\"A exclusive range starting with Long.MAX_VALUE should return the EMPTY_DOCIDSET instance\",\n      DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(searcher.getIndexReader()));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, null, Long.MIN_VALUE, false, false);\n    assertSame(\"A exclusive range ending with Long.MIN_VALUE should return the EMPTY_DOCIDSET instance\",\n      DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(searcher.getIndexReader()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df3efec034da1483899681baabb1df029e8628c4","date":1294243646,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInverseRange().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInverseRange().mjava","sourceNew":"  @Test\n  public void testInverseRange() throws Exception {\n    NumericRangeFilter<Long> f = NumericRangeFilter.newLongRange(\"field8\", 8, 1000L, -1000L, true, true);\n    assertSame(\"A inverse range should return the EMPTY_DOCIDSET instance\", DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(new SlowMultiReaderWrapper(searcher.getIndexReader())));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, Long.MAX_VALUE, null, false, false);\n    assertSame(\"A exclusive range starting with Long.MAX_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(new SlowMultiReaderWrapper(searcher.getIndexReader())));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, null, Long.MIN_VALUE, false, false);\n    assertSame(\"A exclusive range ending with Long.MIN_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(new SlowMultiReaderWrapper(searcher.getIndexReader())));\n  }\n\n","sourceOld":"  @Test\n  public void testInverseRange() throws Exception {\n    NumericRangeFilter<Long> f = NumericRangeFilter.newLongRange(\"field8\", 8, 1000L, -1000L, true, true);\n    assertSame(\"A inverse range should return the EMPTY_DOCIDSET instance\", DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(searcher.getIndexReader()));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, Long.MAX_VALUE, null, false, false);\n    assertSame(\"A exclusive range starting with Long.MAX_VALUE should return the EMPTY_DOCIDSET instance\",\n      DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(searcher.getIndexReader()));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, null, Long.MIN_VALUE, false, false);\n    assertSame(\"A exclusive range ending with Long.MIN_VALUE should return the EMPTY_DOCIDSET instance\",\n      DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(searcher.getIndexReader()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInverseRange().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInverseRange().mjava","sourceNew":"  @Test\n  public void testInverseRange() throws Exception {\n    NumericRangeFilter<Long> f = NumericRangeFilter.newLongRange(\"field8\", 8, 1000L, -1000L, true, true);\n    assertSame(\"A inverse range should return the EMPTY_DOCIDSET instance\", DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(new SlowMultiReaderWrapper(searcher.getIndexReader())));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, Long.MAX_VALUE, null, false, false);\n    assertSame(\"A exclusive range starting with Long.MAX_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(new SlowMultiReaderWrapper(searcher.getIndexReader())));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, null, Long.MIN_VALUE, false, false);\n    assertSame(\"A exclusive range ending with Long.MIN_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(new SlowMultiReaderWrapper(searcher.getIndexReader())));\n  }\n\n","sourceOld":"  @Test\n  public void testInverseRange() throws Exception {\n    NumericRangeFilter<Long> f = NumericRangeFilter.newLongRange(\"field8\", 8, 1000L, -1000L, true, true);\n    assertSame(\"A inverse range should return the EMPTY_DOCIDSET instance\", DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(searcher.getIndexReader()));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, Long.MAX_VALUE, null, false, false);\n    assertSame(\"A exclusive range starting with Long.MAX_VALUE should return the EMPTY_DOCIDSET instance\",\n      DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(searcher.getIndexReader()));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, null, Long.MIN_VALUE, false, false);\n    assertSame(\"A exclusive range ending with Long.MIN_VALUE should return the EMPTY_DOCIDSET instance\",\n      DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(searcher.getIndexReader()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInverseRange().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInverseRange().mjava","sourceNew":"  @Test\n  public void testInverseRange() throws Exception {\n    NumericRangeFilter<Long> f = NumericRangeFilter.newLongRange(\"field8\", 8, 1000L, -1000L, true, true);\n    assertSame(\"A inverse range should return the EMPTY_DOCIDSET instance\", DocIdSet.EMPTY_DOCIDSET,\n        f.getDocIdSet(new SlowMultiReaderWrapper(searcher.getIndexReader()).getTopReaderContext()));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, Long.MAX_VALUE, null, false, false);\n    assertSame(\"A exclusive range starting with Long.MAX_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(new SlowMultiReaderWrapper(searcher.getIndexReader()).getTopReaderContext()));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, null, Long.MIN_VALUE, false, false);\n    assertSame(\"A exclusive range ending with Long.MIN_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(new SlowMultiReaderWrapper(searcher.getIndexReader()).getTopReaderContext()));\n  }\n\n","sourceOld":"  @Test\n  public void testInverseRange() throws Exception {\n    NumericRangeFilter<Long> f = NumericRangeFilter.newLongRange(\"field8\", 8, 1000L, -1000L, true, true);\n    assertSame(\"A inverse range should return the EMPTY_DOCIDSET instance\", DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(new SlowMultiReaderWrapper(searcher.getIndexReader())));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, Long.MAX_VALUE, null, false, false);\n    assertSame(\"A exclusive range starting with Long.MAX_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(new SlowMultiReaderWrapper(searcher.getIndexReader())));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, null, Long.MIN_VALUE, false, false);\n    assertSame(\"A exclusive range ending with Long.MIN_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(new SlowMultiReaderWrapper(searcher.getIndexReader())));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","date":1294747166,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInverseRange().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInverseRange().mjava","sourceNew":"  @Test\n  public void testInverseRange() throws Exception {\n    AtomicReaderContext context = (AtomicReaderContext) new SlowMultiReaderWrapper(searcher.getIndexReader()).getTopReaderContext();\n    NumericRangeFilter<Long> f = NumericRangeFilter.newLongRange(\"field8\", 8, 1000L, -1000L, true, true);\n    assertSame(\"A inverse range should return the EMPTY_DOCIDSET instance\", DocIdSet.EMPTY_DOCIDSET,\n        f.getDocIdSet(context));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, Long.MAX_VALUE, null, false, false);\n    assertSame(\"A exclusive range starting with Long.MAX_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, null, Long.MIN_VALUE, false, false);\n    assertSame(\"A exclusive range ending with Long.MIN_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context));\n  }\n\n","sourceOld":"  @Test\n  public void testInverseRange() throws Exception {\n    NumericRangeFilter<Long> f = NumericRangeFilter.newLongRange(\"field8\", 8, 1000L, -1000L, true, true);\n    assertSame(\"A inverse range should return the EMPTY_DOCIDSET instance\", DocIdSet.EMPTY_DOCIDSET,\n        f.getDocIdSet(new SlowMultiReaderWrapper(searcher.getIndexReader()).getTopReaderContext()));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, Long.MAX_VALUE, null, false, false);\n    assertSame(\"A exclusive range starting with Long.MAX_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(new SlowMultiReaderWrapper(searcher.getIndexReader()).getTopReaderContext()));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, null, Long.MIN_VALUE, false, false);\n    assertSame(\"A exclusive range ending with Long.MIN_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(new SlowMultiReaderWrapper(searcher.getIndexReader()).getTopReaderContext()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInverseRange().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInverseRange().mjava","sourceNew":"  @Test\n  public void testInverseRange() throws Exception {\n    AtomicReaderContext context = (AtomicReaderContext) new SlowMultiReaderWrapper(searcher.getIndexReader()).getTopReaderContext();\n    NumericRangeFilter<Long> f = NumericRangeFilter.newLongRange(\"field8\", 8, 1000L, -1000L, true, true);\n    assertSame(\"A inverse range should return the EMPTY_DOCIDSET instance\", DocIdSet.EMPTY_DOCIDSET,\n        f.getDocIdSet(context));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, Long.MAX_VALUE, null, false, false);\n    assertSame(\"A exclusive range starting with Long.MAX_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, null, Long.MIN_VALUE, false, false);\n    assertSame(\"A exclusive range ending with Long.MIN_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context));\n  }\n\n","sourceOld":"  @Test\n  public void testInverseRange() throws Exception {\n    NumericRangeFilter<Long> f = NumericRangeFilter.newLongRange(\"field8\", 8, 1000L, -1000L, true, true);\n    assertSame(\"A inverse range should return the EMPTY_DOCIDSET instance\", DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(searcher.getIndexReader()));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, Long.MAX_VALUE, null, false, false);\n    assertSame(\"A exclusive range starting with Long.MAX_VALUE should return the EMPTY_DOCIDSET instance\",\n      DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(searcher.getIndexReader()));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, null, Long.MIN_VALUE, false, false);\n    assertSame(\"A exclusive range ending with Long.MIN_VALUE should return the EMPTY_DOCIDSET instance\",\n      DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(searcher.getIndexReader()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInverseRange().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInverseRange().mjava","sourceNew":"  @Test\n  public void testInverseRange() throws Exception {\n    AtomicReaderContext context = (AtomicReaderContext) new SlowMultiReaderWrapper(searcher.getIndexReader()).getTopReaderContext();\n    NumericRangeFilter<Long> f = NumericRangeFilter.newLongRange(\"field8\", 8, 1000L, -1000L, true, true);\n    assertSame(\"A inverse range should return the EMPTY_DOCIDSET instance\", DocIdSet.EMPTY_DOCIDSET,\n        f.getDocIdSet(context));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, Long.MAX_VALUE, null, false, false);\n    assertSame(\"A exclusive range starting with Long.MAX_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, null, Long.MIN_VALUE, false, false);\n    assertSame(\"A exclusive range ending with Long.MIN_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context));\n  }\n\n","sourceOld":"  @Test\n  public void testInverseRange() throws Exception {\n    NumericRangeFilter<Long> f = NumericRangeFilter.newLongRange(\"field8\", 8, 1000L, -1000L, true, true);\n    assertSame(\"A inverse range should return the EMPTY_DOCIDSET instance\", DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(new SlowMultiReaderWrapper(searcher.getIndexReader())));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, Long.MAX_VALUE, null, false, false);\n    assertSame(\"A exclusive range starting with Long.MAX_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(new SlowMultiReaderWrapper(searcher.getIndexReader())));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, null, Long.MIN_VALUE, false, false);\n    assertSame(\"A exclusive range ending with Long.MIN_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(new SlowMultiReaderWrapper(searcher.getIndexReader())));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInverseRange().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInverseRange().mjava","sourceNew":"  @Test\n  public void testInverseRange() throws Exception {\n    AtomicReaderContext context = (AtomicReaderContext) new SlowMultiReaderWrapper(searcher.getIndexReader()).getTopReaderContext();\n    NumericRangeFilter<Long> f = NumericRangeFilter.newLongRange(\"field8\", 8, 1000L, -1000L, true, true);\n    assertSame(\"A inverse range should return the EMPTY_DOCIDSET instance\", DocIdSet.EMPTY_DOCIDSET,\n        f.getDocIdSet(context, context.reader.getLiveDocs()));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, Long.MAX_VALUE, null, false, false);\n    assertSame(\"A exclusive range starting with Long.MAX_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader.getLiveDocs()));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, null, Long.MIN_VALUE, false, false);\n    assertSame(\"A exclusive range ending with Long.MIN_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader.getLiveDocs()));\n  }\n\n","sourceOld":"  @Test\n  public void testInverseRange() throws Exception {\n    AtomicReaderContext context = (AtomicReaderContext) new SlowMultiReaderWrapper(searcher.getIndexReader()).getTopReaderContext();\n    NumericRangeFilter<Long> f = NumericRangeFilter.newLongRange(\"field8\", 8, 1000L, -1000L, true, true);\n    assertSame(\"A inverse range should return the EMPTY_DOCIDSET instance\", DocIdSet.EMPTY_DOCIDSET,\n        f.getDocIdSet(context));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, Long.MAX_VALUE, null, false, false);\n    assertSame(\"A exclusive range starting with Long.MAX_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, null, Long.MIN_VALUE, false, false);\n    assertSame(\"A exclusive range ending with Long.MIN_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6fff8f4b218bd0626afcdce82027bafeb84a50a4","date":1327229950,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInverseRange().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInverseRange().mjava","sourceNew":"  @Test\n  public void testInverseRange() throws Exception {\n    AtomicReaderContext context = (AtomicReaderContext) new SlowMultiReaderWrapper(searcher.getIndexReader()).getTopReaderContext();\n    NumericRangeFilter<Long> f = NumericRangeFilter.newLongRange(\"field8\", 8, 1000L, -1000L, true, true);\n    assertSame(\"A inverse range should return the EMPTY_DOCIDSET instance\", DocIdSet.EMPTY_DOCIDSET,\n        f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, Long.MAX_VALUE, null, false, false);\n    assertSame(\"A exclusive range starting with Long.MAX_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, null, Long.MIN_VALUE, false, false);\n    assertSame(\"A exclusive range ending with Long.MIN_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n  }\n\n","sourceOld":"  @Test\n  public void testInverseRange() throws Exception {\n    AtomicReaderContext context = (AtomicReaderContext) new SlowMultiReaderWrapper(searcher.getIndexReader()).getTopReaderContext();\n    NumericRangeFilter<Long> f = NumericRangeFilter.newLongRange(\"field8\", 8, 1000L, -1000L, true, true);\n    assertSame(\"A inverse range should return the EMPTY_DOCIDSET instance\", DocIdSet.EMPTY_DOCIDSET,\n        f.getDocIdSet(context, context.reader.getLiveDocs()));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, Long.MAX_VALUE, null, false, false);\n    assertSame(\"A exclusive range starting with Long.MAX_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader.getLiveDocs()));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, null, Long.MIN_VALUE, false, false);\n    assertSame(\"A exclusive range ending with Long.MIN_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader.getLiveDocs()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"386d1b0dcb065f1bfc494b1407cb41c536b95485","date":1327848512,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInverseRange().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInverseRange().mjava","sourceNew":"  @Test\n  public void testInverseRange() throws Exception {\n    AtomicReaderContext context = SlowCompositeReaderWrapper.wrap(searcher.getIndexReader()).getTopReaderContext();\n    NumericRangeFilter<Long> f = NumericRangeFilter.newLongRange(\"field8\", 8, 1000L, -1000L, true, true);\n    assertSame(\"A inverse range should return the EMPTY_DOCIDSET instance\", DocIdSet.EMPTY_DOCIDSET,\n        f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, Long.MAX_VALUE, null, false, false);\n    assertSame(\"A exclusive range starting with Long.MAX_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, null, Long.MIN_VALUE, false, false);\n    assertSame(\"A exclusive range ending with Long.MIN_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n  }\n\n","sourceOld":"  @Test\n  public void testInverseRange() throws Exception {\n    AtomicReaderContext context = (AtomicReaderContext) new SlowMultiReaderWrapper(searcher.getIndexReader()).getTopReaderContext();\n    NumericRangeFilter<Long> f = NumericRangeFilter.newLongRange(\"field8\", 8, 1000L, -1000L, true, true);\n    assertSame(\"A inverse range should return the EMPTY_DOCIDSET instance\", DocIdSet.EMPTY_DOCIDSET,\n        f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, Long.MAX_VALUE, null, false, false);\n    assertSame(\"A exclusive range starting with Long.MAX_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, null, Long.MIN_VALUE, false, false);\n    assertSame(\"A exclusive range ending with Long.MIN_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInverseRange().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInverseRange().mjava","sourceNew":"  @Test\n  public void testInverseRange() throws Exception {\n    AtomicReaderContext context = SlowCompositeReaderWrapper.wrap(searcher.getIndexReader()).getTopReaderContext();\n    NumericRangeFilter<Long> f = NumericRangeFilter.newLongRange(\"field8\", 8, 1000L, -1000L, true, true);\n    assertSame(\"A inverse range should return the EMPTY_DOCIDSET instance\", DocIdSet.EMPTY_DOCIDSET,\n        f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, Long.MAX_VALUE, null, false, false);\n    assertSame(\"A exclusive range starting with Long.MAX_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, null, Long.MIN_VALUE, false, false);\n    assertSame(\"A exclusive range ending with Long.MIN_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n  }\n\n","sourceOld":"  @Test\n  public void testInverseRange() throws Exception {\n    AtomicReaderContext context = (AtomicReaderContext) new SlowMultiReaderWrapper(searcher.getIndexReader()).getTopReaderContext();\n    NumericRangeFilter<Long> f = NumericRangeFilter.newLongRange(\"field8\", 8, 1000L, -1000L, true, true);\n    assertSame(\"A inverse range should return the EMPTY_DOCIDSET instance\", DocIdSet.EMPTY_DOCIDSET,\n        f.getDocIdSet(context, context.reader.getLiveDocs()));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, Long.MAX_VALUE, null, false, false);\n    assertSame(\"A exclusive range starting with Long.MAX_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader.getLiveDocs()));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, null, Long.MIN_VALUE, false, false);\n    assertSame(\"A exclusive range ending with Long.MIN_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader.getLiveDocs()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInverseRange().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testInverseRange().mjava","sourceNew":"  @Test\n  public void testInverseRange() throws Exception {\n    AtomicReaderContext context = SlowCompositeReaderWrapper.wrap(searcher.getIndexReader()).getTopReaderContext();\n    NumericRangeFilter<Long> f = NumericRangeFilter.newLongRange(\"field8\", 8, 1000L, -1000L, true, true);\n    assertSame(\"A inverse range should return the EMPTY_DOCIDSET instance\", DocIdSet.EMPTY_DOCIDSET,\n        f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, Long.MAX_VALUE, null, false, false);\n    assertSame(\"A exclusive range starting with Long.MAX_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, null, Long.MIN_VALUE, false, false);\n    assertSame(\"A exclusive range ending with Long.MIN_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n  }\n\n","sourceOld":"  @Test\n  public void testInverseRange() throws Exception {\n    AtomicReaderContext context = SlowCompositeReaderWrapper.wrap(searcher.getIndexReader()).getTopReaderContext();\n    NumericRangeFilter<Long> f = NumericRangeFilter.newLongRange(\"field8\", 8, 1000L, -1000L, true, true);\n    assertSame(\"A inverse range should return the EMPTY_DOCIDSET instance\", DocIdSet.EMPTY_DOCIDSET,\n        f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, Long.MAX_VALUE, null, false, false);\n    assertSame(\"A exclusive range starting with Long.MAX_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newLongRange(\"field8\", 8, null, Long.MIN_VALUE, false, false);\n    assertSame(\"A exclusive range ending with Long.MIN_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["9454a6510e2db155fb01faa5c049b06ece95fab9","df3efec034da1483899681baabb1df029e8628c4"],"6620df8541b174097b1133a4fc370adb2e570524":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["6620df8541b174097b1133a4fc370adb2e570524"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["6620df8541b174097b1133a4fc370adb2e570524","386d1b0dcb065f1bfc494b1407cb41c536b95485"],"df3efec034da1483899681baabb1df029e8628c4":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["df3efec034da1483899681baabb1df029e8628c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"386d1b0dcb065f1bfc494b1407cb41c536b95485":["6fff8f4b218bd0626afcdce82027bafeb84a50a4"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["9454a6510e2db155fb01faa5c049b06ece95fab9","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"6620df8541b174097b1133a4fc370adb2e570524":["6fff8f4b218bd0626afcdce82027bafeb84a50a4","5cab9a86bd67202d20b6adc463008c8e982b070a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["386d1b0dcb065f1bfc494b1407cb41c536b95485"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"df3efec034da1483899681baabb1df029e8628c4":["70ad682703b8585f5d0a637efec044d57ec05efb","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"386d1b0dcb065f1bfc494b1407cb41c536b95485":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["6620df8541b174097b1133a4fc370adb2e570524","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["70ad682703b8585f5d0a637efec044d57ec05efb","df3efec034da1483899681baabb1df029e8628c4","868da859b43505d9d2a023bfeae6dd0c795f5295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}