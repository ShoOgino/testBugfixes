{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,int).mjava","commits":[{"id":"322360ac5185a8446d3e0b530b2068bef67cd3d5","date":1343669494,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,boolean).mjava","sourceNew":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n\n      if (!storePositions && !storeOffsets) {\n        return null;\n      }\n      \n      TVDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse != null && reuse instanceof TVDocsAndPositionsEnum) {\n        docsAndPositionsEnum = (TVDocsAndPositionsEnum) reuse;\n      } else {\n        docsAndPositionsEnum = new TVDocsAndPositionsEnum();\n      }\n      docsAndPositionsEnum.reset(liveDocs, positions, startOffsets, endOffsets);\n      return docsAndPositionsEnum;\n    }\n\n","sourceOld":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, boolean needsOffsets) throws IOException {\n      if (needsOffsets && !storeOffsets) {\n        return null;\n      }\n\n      if (!storePositions && !storeOffsets) {\n        return null;\n      }\n      \n      TVDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse != null && reuse instanceof TVDocsAndPositionsEnum) {\n        docsAndPositionsEnum = (TVDocsAndPositionsEnum) reuse;\n      } else {\n        docsAndPositionsEnum = new TVDocsAndPositionsEnum();\n      }\n      docsAndPositionsEnum.reset(liveDocs, positions, startOffsets, endOffsets);\n      return docsAndPositionsEnum;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n\n      if (!storePositions && !storeOffsets) {\n        return null;\n      }\n      \n      TVDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse != null && reuse instanceof TVDocsAndPositionsEnum) {\n        docsAndPositionsEnum = (TVDocsAndPositionsEnum) reuse;\n      } else {\n        docsAndPositionsEnum = new TVDocsAndPositionsEnum();\n      }\n      docsAndPositionsEnum.reset(liveDocs, positions, startOffsets, endOffsets);\n      return docsAndPositionsEnum;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n\n      if (!storePositions && !storeOffsets) {\n        return null;\n      }\n      \n      TVDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse != null && reuse instanceof TVDocsAndPositionsEnum) {\n        docsAndPositionsEnum = (TVDocsAndPositionsEnum) reuse;\n      } else {\n        docsAndPositionsEnum = new TVDocsAndPositionsEnum();\n      }\n      docsAndPositionsEnum.reset(liveDocs, positions, startOffsets, endOffsets);\n      return docsAndPositionsEnum;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0935c850ea562932997b72c69d93e345f21d7f45","date":1344711506,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,int).mjava","sourceNew":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n\n      if (!storePositions && !storeOffsets) {\n        return null;\n      }\n      \n      TVDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse != null && reuse instanceof TVDocsAndPositionsEnum) {\n        docsAndPositionsEnum = (TVDocsAndPositionsEnum) reuse;\n      } else {\n        docsAndPositionsEnum = new TVDocsAndPositionsEnum();\n      }\n      docsAndPositionsEnum.reset(liveDocs, positions, startOffsets, endOffsets, payloadOffsets, payloadData);\n      return docsAndPositionsEnum;\n    }\n\n","sourceOld":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n\n      if (!storePositions && !storeOffsets) {\n        return null;\n      }\n      \n      TVDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse != null && reuse instanceof TVDocsAndPositionsEnum) {\n        docsAndPositionsEnum = (TVDocsAndPositionsEnum) reuse;\n      } else {\n        docsAndPositionsEnum = new TVDocsAndPositionsEnum();\n      }\n      docsAndPositionsEnum.reset(liveDocs, positions, startOffsets, endOffsets);\n      return docsAndPositionsEnum;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,int).mjava","sourceNew":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n\n      if (!storePositions && !storeOffsets) {\n        return null;\n      }\n      \n      TVDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse != null && reuse instanceof TVDocsAndPositionsEnum) {\n        docsAndPositionsEnum = (TVDocsAndPositionsEnum) reuse;\n      } else {\n        docsAndPositionsEnum = new TVDocsAndPositionsEnum();\n      }\n      docsAndPositionsEnum.reset(liveDocs, positions, startOffsets, endOffsets, payloadOffsets, payloadData);\n      return docsAndPositionsEnum;\n    }\n\n","sourceOld":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n\n      if (!storePositions && !storeOffsets) {\n        return null;\n      }\n      \n      TVDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse != null && reuse instanceof TVDocsAndPositionsEnum) {\n        docsAndPositionsEnum = (TVDocsAndPositionsEnum) reuse;\n      } else {\n        docsAndPositionsEnum = new TVDocsAndPositionsEnum();\n      }\n      docsAndPositionsEnum.reset(liveDocs, positions, startOffsets, endOffsets);\n      return docsAndPositionsEnum;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,int).mjava","sourceNew":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n\n      if (!storePositions && !storeOffsets) {\n        return null;\n      }\n      \n      TVDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse != null && reuse instanceof TVDocsAndPositionsEnum) {\n        docsAndPositionsEnum = (TVDocsAndPositionsEnum) reuse;\n      } else {\n        docsAndPositionsEnum = new TVDocsAndPositionsEnum();\n      }\n      docsAndPositionsEnum.reset(liveDocs, positions, startOffsets, endOffsets, payloadOffsets, payloadData);\n      return docsAndPositionsEnum;\n    }\n\n","sourceOld":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n\n      if (!storePositions && !storeOffsets) {\n        return null;\n      }\n      \n      TVDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse != null && reuse instanceof TVDocsAndPositionsEnum) {\n        docsAndPositionsEnum = (TVDocsAndPositionsEnum) reuse;\n      } else {\n        docsAndPositionsEnum = new TVDocsAndPositionsEnum();\n      }\n      docsAndPositionsEnum.reset(liveDocs, positions, startOffsets, endOffsets);\n      return docsAndPositionsEnum;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,int).mjava","sourceNew":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n\n      if (!storePositions && !storeOffsets) {\n        return null;\n      }\n      \n      TVDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse != null && reuse instanceof TVDocsAndPositionsEnum) {\n        docsAndPositionsEnum = (TVDocsAndPositionsEnum) reuse;\n      } else {\n        docsAndPositionsEnum = new TVDocsAndPositionsEnum();\n      }\n      docsAndPositionsEnum.reset(liveDocs, positions, startOffsets, endOffsets, payloadOffsets, payloadData);\n      return docsAndPositionsEnum;\n    }\n\n","sourceOld":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n\n      if (!storePositions && !storeOffsets) {\n        return null;\n      }\n      \n      TVDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse != null && reuse instanceof TVDocsAndPositionsEnum) {\n        docsAndPositionsEnum = (TVDocsAndPositionsEnum) reuse;\n      } else {\n        docsAndPositionsEnum = new TVDocsAndPositionsEnum();\n      }\n      docsAndPositionsEnum.reset(liveDocs, positions, startOffsets, endOffsets, payloadOffsets, payloadData);\n      return docsAndPositionsEnum;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.TVTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,int).mjava","sourceNew":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n\n      if (!storePositions && !storeOffsets) {\n        return null;\n      }\n      \n      TVDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse != null && reuse instanceof TVDocsAndPositionsEnum) {\n        docsAndPositionsEnum = (TVDocsAndPositionsEnum) reuse;\n      } else {\n        docsAndPositionsEnum = new TVDocsAndPositionsEnum();\n      }\n      docsAndPositionsEnum.reset(liveDocs, positions, startOffsets, endOffsets, payloadOffsets, payloadData);\n      return docsAndPositionsEnum;\n    }\n\n","sourceOld":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, int flags) throws IOException {\n\n      if (!storePositions && !storeOffsets) {\n        return null;\n      }\n      \n      TVDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse != null && reuse instanceof TVDocsAndPositionsEnum) {\n        docsAndPositionsEnum = (TVDocsAndPositionsEnum) reuse;\n      } else {\n        docsAndPositionsEnum = new TVDocsAndPositionsEnum();\n      }\n      docsAndPositionsEnum.reset(liveDocs, positions, startOffsets, endOffsets, payloadOffsets, payloadData);\n      return docsAndPositionsEnum;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","0935c850ea562932997b72c69d93e345f21d7f45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["0935c850ea562932997b72c69d93e345f21d7f45"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"0935c850ea562932997b72c69d93e345f21d7f45":["322360ac5185a8446d3e0b530b2068bef67cd3d5"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["d6f074e73200c07d54f242d3880a8da5a35ff97b","0935c850ea562932997b72c69d93e345f21d7f45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["0935c850ea562932997b72c69d93e345f21d7f45","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"0935c850ea562932997b72c69d93e345f21d7f45":["c7869f64c874ebf7f317d22c00baf2b6857797a6","4cc45c615dbb82bf79d5f9550286098367874fbf","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","0935c850ea562932997b72c69d93e345f21d7f45"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}