{"path":"solr/core/src/java/org/apache/solr/rest/RestManager#addRegisteredResource(ManagedResourceRegistration).mjava","commits":[{"id":"bdf16ebe435fc9daea90a73b8683ff001c6d3523","date":1409931231,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/RestManager#addRegisteredResource(ManagedResourceRegistration).mjava","pathOld":"/dev/null","sourceNew":"  // used internally to create and attach a ManagedResource to the Restlet router\n  // the registry also uses this method directly, which is slightly hacky but necessary\n  // in order to support dynamic adding of new fieldTypes using the managed-schema API\n  private synchronized ManagedResource addRegisteredResource(ManagedResourceRegistration reg) {\n    String resourceId = reg.resourceId;\n    ManagedResource res = createManagedResource(reg);\n    managed.put(resourceId, res);\n    log.info(\"Registered new managed resource {}\", resourceId);\n    \n    // attach this new resource to the Restlet router\n    Matcher resourceIdValidator = resourceIdRegex.matcher(resourceId);\n    boolean validated = resourceIdValidator.matches();\n    assert validated : \"managed resourceId '\" + resourceId\n                     + \"' should already be validated by registerManagedResource()\";\n    String routerPath = resourceIdValidator.group(1);      \n    String path = resourceIdValidator.group(2);\n    Router router = SCHEMA_BASE_PATH.equals(routerPath) ? schemaRouter : configRouter;\n    if (router != null) {\n      attachManagedResource(res, path, router);\n    }\n    return res;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b","date":1601832109,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/RestManager#addRegisteredResource(ManagedResourceRegistration).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/RestManager#addRegisteredResource(ManagedResourceRegistration).mjava","sourceNew":"  // cache a mapping of path to ManagedResource\n  private synchronized ManagedResource addRegisteredResource(ManagedResourceRegistration reg) {\n    String resourceId = reg.resourceId;\n    ManagedResource res = createManagedResource(reg);\n    managed.put(resourceId, res);\n    log.info(\"Registered new managed resource {}\", resourceId);\n    return res;\n  }\n\n","sourceOld":"  // used internally to create and attach a ManagedResource to the Restlet router\n  // the registry also uses this method directly, which is slightly hacky but necessary\n  // in order to support dynamic adding of new fieldTypes using the managed-schema API\n  private synchronized ManagedResource addRegisteredResource(ManagedResourceRegistration reg) {\n    String resourceId = reg.resourceId;\n    ManagedResource res = createManagedResource(reg);\n    managed.put(resourceId, res);\n    log.info(\"Registered new managed resource {}\", resourceId);\n    \n    // attach this new resource to the Restlet router\n    Matcher resourceIdValidator = resourceIdRegex.matcher(resourceId);\n    boolean validated = resourceIdValidator.matches();\n    assert validated : \"managed resourceId '\" + resourceId\n                     + \"' should already be validated by registerManagedResource()\";\n    String routerPath = resourceIdValidator.group(1);      \n    String path = resourceIdValidator.group(2);\n    Router router = SCHEMA_BASE_PATH.equals(routerPath) ? schemaRouter : configRouter;\n    if (router != null) {\n      attachManagedResource(res, path, router);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b":["bdf16ebe435fc9daea90a73b8683ff001c6d3523"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b"],"bdf16ebe435fc9daea90a73b8683ff001c6d3523":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bdf16ebe435fc9daea90a73b8683ff001c6d3523"],"bdf16ebe435fc9daea90a73b8683ff001c6d3523":["89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}