{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#readBinaryEntry(IndexInput).mjava","commits":[{"id":"9f2be786bbf3746ffcd9720e0b473f4b121c4228","date":1359663177,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#readBinaryEntry(IndexInput).mjava","pathOld":"/dev/null","sourceNew":"  static BinaryEntry readBinaryEntry(IndexInput meta) throws IOException {\n    BinaryEntry entry = new BinaryEntry();\n    entry.minLength = meta.readVInt();\n    entry.maxLength = meta.readVInt();\n    entry.count = meta.readVInt();\n    entry.offset = meta.readLong();\n    if (entry.minLength != entry.maxLength) {\n      entry.addressesOffset = meta.readLong();\n      entry.packedIntsVersion = meta.readVInt();\n      entry.blockSize = meta.readVInt();\n    }\n    return entry;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#readBinaryEntry(IndexInput).mjava","pathOld":"/dev/null","sourceNew":"  static BinaryEntry readBinaryEntry(IndexInput meta) throws IOException {\n    BinaryEntry entry = new BinaryEntry();\n    entry.minLength = meta.readVInt();\n    entry.maxLength = meta.readVInt();\n    entry.count = meta.readVInt();\n    entry.offset = meta.readLong();\n    if (entry.minLength != entry.maxLength) {\n      entry.addressesOffset = meta.readLong();\n      entry.packedIntsVersion = meta.readVInt();\n      entry.blockSize = meta.readVInt();\n    }\n    return entry;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15adb143a3097f2342f07eb0929f6ce1877ad7e","date":1361027406,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#readBinaryEntry(IndexInput).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#readBinaryEntry(IndexInput).mjava","sourceNew":"  static BinaryEntry readBinaryEntry(IndexInput meta) throws IOException {\n    BinaryEntry entry = new BinaryEntry();\n    entry.minLength = meta.readVInt();\n    entry.maxLength = meta.readVInt();\n    entry.count = meta.readVLong();\n    entry.offset = meta.readLong();\n    if (entry.minLength != entry.maxLength) {\n      entry.addressesOffset = meta.readLong();\n      entry.packedIntsVersion = meta.readVInt();\n      entry.blockSize = meta.readVInt();\n    }\n    return entry;\n  }\n\n","sourceOld":"  static BinaryEntry readBinaryEntry(IndexInput meta) throws IOException {\n    BinaryEntry entry = new BinaryEntry();\n    entry.minLength = meta.readVInt();\n    entry.maxLength = meta.readVInt();\n    entry.count = meta.readVInt();\n    entry.offset = meta.readLong();\n    if (entry.minLength != entry.maxLength) {\n      entry.addressesOffset = meta.readLong();\n      entry.packedIntsVersion = meta.readVInt();\n      entry.blockSize = meta.readVInt();\n    }\n    return entry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#readBinaryEntry(IndexInput).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#readBinaryEntry(IndexInput).mjava","sourceNew":"  static BinaryEntry readBinaryEntry(IndexInput meta) throws IOException {\n    BinaryEntry entry = new BinaryEntry();\n    entry.minLength = meta.readVInt();\n    entry.maxLength = meta.readVInt();\n    entry.count = meta.readVLong();\n    entry.offset = meta.readLong();\n    if (entry.minLength != entry.maxLength) {\n      entry.addressesOffset = meta.readLong();\n      entry.packedIntsVersion = meta.readVInt();\n      entry.blockSize = meta.readVInt();\n    }\n    return entry;\n  }\n\n","sourceOld":"  static BinaryEntry readBinaryEntry(IndexInput meta) throws IOException {\n    BinaryEntry entry = new BinaryEntry();\n    entry.minLength = meta.readVInt();\n    entry.maxLength = meta.readVInt();\n    entry.count = meta.readVInt();\n    entry.offset = meta.readLong();\n    if (entry.minLength != entry.maxLength) {\n      entry.addressesOffset = meta.readLong();\n      entry.packedIntsVersion = meta.readVInt();\n      entry.blockSize = meta.readVInt();\n    }\n    return entry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad01348544f9eb6ee985c300245013a75addfc6","date":1376095061,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#readBinaryEntry(IndexInput).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#readBinaryEntry(IndexInput).mjava","sourceNew":"  static BinaryEntry readBinaryEntry(IndexInput meta) throws IOException {\n    BinaryEntry entry = new BinaryEntry();\n    int format = meta.readVInt();\n    if (format != DiskDocValuesConsumer.BINARY_FIXED_UNCOMPRESSED && format != DiskDocValuesConsumer.BINARY_VARIABLE_UNCOMPRESSED) {\n      throw new CorruptIndexException(\"Unexpected format for binary entry: \" + format + \", input=\" + meta);\n    }\n    entry.minLength = meta.readVInt();\n    entry.maxLength = meta.readVInt();\n    entry.count = meta.readVLong();\n    entry.offset = meta.readLong();\n    if (entry.minLength != entry.maxLength) {\n      entry.addressesOffset = meta.readLong();\n      entry.packedIntsVersion = meta.readVInt();\n      entry.blockSize = meta.readVInt();\n    }\n    return entry;\n  }\n\n","sourceOld":"  static BinaryEntry readBinaryEntry(IndexInput meta) throws IOException {\n    BinaryEntry entry = new BinaryEntry();\n    entry.minLength = meta.readVInt();\n    entry.maxLength = meta.readVInt();\n    entry.count = meta.readVLong();\n    entry.offset = meta.readLong();\n    if (entry.minLength != entry.maxLength) {\n      entry.addressesOffset = meta.readLong();\n      entry.packedIntsVersion = meta.readVInt();\n      entry.blockSize = meta.readVInt();\n    }\n    return entry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#readBinaryEntry(IndexInput).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#readBinaryEntry(IndexInput).mjava","sourceNew":"  static BinaryEntry readBinaryEntry(IndexInput meta) throws IOException {\n    BinaryEntry entry = new BinaryEntry();\n    int format = meta.readVInt();\n    if (format != DiskDocValuesConsumer.BINARY_FIXED_UNCOMPRESSED && format != DiskDocValuesConsumer.BINARY_VARIABLE_UNCOMPRESSED) {\n      throw new CorruptIndexException(\"Unexpected format for binary entry: \" + format + \", input=\" + meta);\n    }\n    entry.minLength = meta.readVInt();\n    entry.maxLength = meta.readVInt();\n    entry.count = meta.readVLong();\n    entry.offset = meta.readLong();\n    if (entry.minLength != entry.maxLength) {\n      entry.addressesOffset = meta.readLong();\n      entry.packedIntsVersion = meta.readVInt();\n      entry.blockSize = meta.readVInt();\n    }\n    return entry;\n  }\n\n","sourceOld":"  static BinaryEntry readBinaryEntry(IndexInput meta) throws IOException {\n    BinaryEntry entry = new BinaryEntry();\n    entry.minLength = meta.readVInt();\n    entry.maxLength = meta.readVInt();\n    entry.count = meta.readVLong();\n    entry.offset = meta.readLong();\n    if (entry.minLength != entry.maxLength) {\n      entry.addressesOffset = meta.readLong();\n      entry.packedIntsVersion = meta.readVInt();\n      entry.blockSize = meta.readVInt();\n    }\n    return entry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11a746437bc5c0a0b3df0337ed249c387c812871","date":1376687959,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#readBinaryEntry(IndexInput).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#readBinaryEntry(IndexInput).mjava","sourceNew":"  static BinaryEntry readBinaryEntry(IndexInput meta) throws IOException {\n    BinaryEntry entry = new BinaryEntry();\n    entry.format = meta.readVInt();\n    entry.minLength = meta.readVInt();\n    entry.maxLength = meta.readVInt();\n    entry.count = meta.readVLong();\n    entry.offset = meta.readLong();\n    switch(entry.format) {\n      case BINARY_FIXED_UNCOMPRESSED:\n        break;\n      case BINARY_PREFIX_COMPRESSED:\n        entry.addressInterval = meta.readVInt();\n        entry.addressesOffset = meta.readLong();\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        break;\n      case BINARY_VARIABLE_UNCOMPRESSED:\n        entry.addressesOffset = meta.readLong();\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\" + meta);\n    }\n    return entry;\n  }\n\n","sourceOld":"  static BinaryEntry readBinaryEntry(IndexInput meta) throws IOException {\n    BinaryEntry entry = new BinaryEntry();\n    int format = meta.readVInt();\n    if (format != DiskDocValuesConsumer.BINARY_FIXED_UNCOMPRESSED && format != DiskDocValuesConsumer.BINARY_VARIABLE_UNCOMPRESSED) {\n      throw new CorruptIndexException(\"Unexpected format for binary entry: \" + format + \", input=\" + meta);\n    }\n    entry.minLength = meta.readVInt();\n    entry.maxLength = meta.readVInt();\n    entry.count = meta.readVLong();\n    entry.offset = meta.readLong();\n    if (entry.minLength != entry.maxLength) {\n      entry.addressesOffset = meta.readLong();\n      entry.packedIntsVersion = meta.readVInt();\n      entry.blockSize = meta.readVInt();\n    }\n    return entry;\n  }\n\n","bugFix":null,"bugIntro":["9a70ce9bddc6f985feb8e5e182aebe20872328d4","9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#readBinaryEntry(IndexInput).mjava","sourceNew":null,"sourceOld":"  static BinaryEntry readBinaryEntry(IndexInput meta) throws IOException {\n    BinaryEntry entry = new BinaryEntry();\n    int format = meta.readVInt();\n    if (format != DiskDocValuesConsumer.BINARY_FIXED_UNCOMPRESSED && format != DiskDocValuesConsumer.BINARY_VARIABLE_UNCOMPRESSED) {\n      throw new CorruptIndexException(\"Unexpected format for binary entry: \" + format + \", input=\" + meta);\n    }\n    entry.minLength = meta.readVInt();\n    entry.maxLength = meta.readVInt();\n    entry.count = meta.readVLong();\n    entry.offset = meta.readLong();\n    if (entry.minLength != entry.maxLength) {\n      entry.addressesOffset = meta.readLong();\n      entry.packedIntsVersion = meta.readVInt();\n      entry.blockSize = meta.readVInt();\n    }\n    return entry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#readBinaryEntry(IndexInput).mjava","sourceNew":null,"sourceOld":"  static BinaryEntry readBinaryEntry(IndexInput meta) throws IOException {\n    BinaryEntry entry = new BinaryEntry();\n    int format = meta.readVInt();\n    if (format != DiskDocValuesConsumer.BINARY_FIXED_UNCOMPRESSED && format != DiskDocValuesConsumer.BINARY_VARIABLE_UNCOMPRESSED) {\n      throw new CorruptIndexException(\"Unexpected format for binary entry: \" + format + \", input=\" + meta);\n    }\n    entry.minLength = meta.readVInt();\n    entry.maxLength = meta.readVInt();\n    entry.count = meta.readVLong();\n    entry.offset = meta.readLong();\n    if (entry.minLength != entry.maxLength) {\n      entry.addressesOffset = meta.readLong();\n      entry.packedIntsVersion = meta.readVInt();\n      entry.blockSize = meta.readVInt();\n    }\n    return entry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"11a746437bc5c0a0b3df0337ed249c387c812871":["0ad01348544f9eb6ee985c300245013a75addfc6"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9f2be786bbf3746ffcd9720e0b473f4b121c4228"],"9f2be786bbf3746ffcd9720e0b473f4b121c4228":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"0ad01348544f9eb6ee985c300245013a75addfc6":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["0ad01348544f9eb6ee985c300245013a75addfc6","11a746437bc5c0a0b3df0337ed249c387c812871"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["d4d69c535930b5cce125cff868d40f6373dc27d4","f15adb143a3097f2342f07eb0929f6ce1877ad7e"],"f15adb143a3097f2342f07eb0929f6ce1877ad7e":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"]},"commit2Childs":{"11a746437bc5c0a0b3df0337ed249c387c812871":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["ddbb72a33557d2b5bc22ee95daf3281c43560502","f15adb143a3097f2342f07eb0929f6ce1877ad7e"],"9f2be786bbf3746ffcd9720e0b473f4b121c4228":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","9f2be786bbf3746ffcd9720e0b473f4b121c4228"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"0ad01348544f9eb6ee985c300245013a75addfc6":["11a746437bc5c0a0b3df0337ed249c387c812871","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","0ad01348544f9eb6ee985c300245013a75addfc6"],"f15adb143a3097f2342f07eb0929f6ce1877ad7e":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}