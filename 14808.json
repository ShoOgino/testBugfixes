{"path":"solr/core/src/java/org/apache/solr/handler/component/StringStatsValues[StatsValuesFactory]#min(String,String).mjava","commits":[{"id":"11982a7b6834a8571852448312db4624c32990b5","date":1321300684,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StringStatsValues[StatsValuesFactory]#min(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Determines which of the given Strings is the minimum, as computed by {@link String#compareTo(Object)}\n   *\n   * @param str1 String to compare against b\n   * @param str2 String compared against a\n   * @return str1 if it is considered less by {@link String#compareTo(Object)}, str2 otherwise\n   */\n  private static String min(String str1, String str2) {\n    if (str1 == null) {\n      return str2;\n    } else if (str2 == null) {\n      return str1;\n    }\n    return (str1.compareTo(str2) < 0) ? str1 : str2;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd9ddb59e9d33950773d186a8b726b5610ae3aad","date":1341258232,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StringStatsValues[StatsValuesFactory]#min(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StringStatsValues[StatsValuesFactory]#min(String,String).mjava","sourceNew":"  /**\n   * Determines which of the given Strings is the minimum, as computed by {@link String#compareTo(String)}\n   *\n   * @param str1 String to compare against b\n   * @param str2 String compared against a\n   * @return str1 if it is considered less by {@link String#compareTo(String)}, str2 otherwise\n   */\n  private static String min(String str1, String str2) {\n    if (str1 == null) {\n      return str2;\n    } else if (str2 == null) {\n      return str1;\n    }\n    return (str1.compareTo(str2) < 0) ? str1 : str2;\n  }\n\n","sourceOld":"  /**\n   * Determines which of the given Strings is the minimum, as computed by {@link String#compareTo(Object)}\n   *\n   * @param str1 String to compare against b\n   * @param str2 String compared against a\n   * @return str1 if it is considered less by {@link String#compareTo(Object)}, str2 otherwise\n   */\n  private static String min(String str1, String str2) {\n    if (str1 == null) {\n      return str2;\n    } else if (str2 == null) {\n      return str1;\n    }\n    return (str1.compareTo(str2) < 0) ? str1 : str2;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StringStatsValues[StatsValuesFactory]#min(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StringStatsValues[StatsValuesFactory]#min(String,String).mjava","sourceNew":"  /**\n   * Determines which of the given Strings is the minimum, as computed by {@link String#compareTo(String)}\n   *\n   * @param str1 String to compare against b\n   * @param str2 String compared against a\n   * @return str1 if it is considered less by {@link String#compareTo(String)}, str2 otherwise\n   */\n  private static String min(String str1, String str2) {\n    if (str1 == null) {\n      return str2;\n    } else if (str2 == null) {\n      return str1;\n    }\n    return (str1.compareTo(str2) < 0) ? str1 : str2;\n  }\n\n","sourceOld":"  /**\n   * Determines which of the given Strings is the minimum, as computed by {@link String#compareTo(Object)}\n   *\n   * @param str1 String to compare against b\n   * @param str2 String compared against a\n   * @return str1 if it is considered less by {@link String#compareTo(Object)}, str2 otherwise\n   */\n  private static String min(String str1, String str2) {\n    if (str1 == null) {\n      return str2;\n    } else if (str2 == null) {\n      return str1;\n    }\n    return (str1.compareTo(str2) < 0) ? str1 : str2;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1002283cfd29923d517db7c33e07bb54aac7acd4","date":1427211199,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StringStatsValues[StatsValuesFactory]#min(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StringStatsValues[StatsValuesFactory]#min(String,String).mjava","sourceNew":"  /**\n   * Determines which of the given Strings is the minimum, as computed by\n   * {@link String#compareTo(String)}\n   *\n   * @param str1\n   *          String to compare against b\n   * @param str2\n   *          String compared against a\n   * @return str1 if it is considered less by {@link String#compareTo(String)},\n   *         str2 otherwise\n   */\n  private static String min(String str1, String str2) {\n    if (str1 == null) {\n      return str2;\n    } else if (str2 == null) {\n      return str1;\n    }\n    return (str1.compareTo(str2) < 0) ? str1 : str2;\n  }\n\n","sourceOld":"  /**\n   * Determines which of the given Strings is the minimum, as computed by {@link String#compareTo(String)}\n   *\n   * @param str1 String to compare against b\n   * @param str2 String compared against a\n   * @return str1 if it is considered less by {@link String#compareTo(String)}, str2 otherwise\n   */\n  private static String min(String str1, String str2) {\n    if (str1 == null) {\n      return str2;\n    } else if (str2 == null) {\n      return str1;\n    }\n    return (str1.compareTo(str2) < 0) ? str1 : str2;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StringStatsValues[StatsValuesFactory]#min(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StringStatsValues[StatsValuesFactory]#min(String,String).mjava","sourceNew":"  /**\n   * Determines which of the given Strings is the minimum, as computed by\n   * {@link String#compareTo(String)}\n   *\n   * @param str1\n   *          String to compare against b\n   * @param str2\n   *          String compared against a\n   * @return str1 if it is considered less by {@link String#compareTo(String)},\n   *         str2 otherwise\n   */\n  private static String min(String str1, String str2) {\n    if (str1 == null) {\n      return str2;\n    } else if (str2 == null) {\n      return str1;\n    }\n    return (str1.compareTo(str2) < 0) ? str1 : str2;\n  }\n\n","sourceOld":"  /**\n   * Determines which of the given Strings is the minimum, as computed by {@link String#compareTo(String)}\n   *\n   * @param str1 String to compare against b\n   * @param str2 String compared against a\n   * @return str1 if it is considered less by {@link String#compareTo(String)}, str2 otherwise\n   */\n  private static String min(String str1, String str2) {\n    if (str1 == null) {\n      return str2;\n    } else if (str2 == null) {\n      return str1;\n    }\n    return (str1.compareTo(str2) < 0) ? str1 : str2;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"248f6ecc900c3a5633fd5ca6f564ea8b717720da","date":1588863846,"type":4,"author":"Mike Drob","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StringStatsValues[StatsValuesFactory]#min(String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Determines which of the given Strings is the minimum, as computed by\n   * {@link String#compareTo(String)}\n   *\n   * @param str1\n   *          String to compare against b\n   * @param str2\n   *          String compared against a\n   * @return str1 if it is considered less by {@link String#compareTo(String)},\n   *         str2 otherwise\n   */\n  private static String min(String str1, String str2) {\n    if (str1 == null) {\n      return str2;\n    } else if (str2 == null) {\n      return str1;\n    }\n    return (str1.compareTo(str2) < 0) ? str1 : str2;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["bd9ddb59e9d33950773d186a8b726b5610ae3aad","1002283cfd29923d517db7c33e07bb54aac7acd4"],"bd9ddb59e9d33950773d186a8b726b5610ae3aad":["11982a7b6834a8571852448312db4624c32990b5"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["11982a7b6834a8571852448312db4624c32990b5","bd9ddb59e9d33950773d186a8b726b5610ae3aad"],"248f6ecc900c3a5633fd5ca6f564ea8b717720da":["1002283cfd29923d517db7c33e07bb54aac7acd4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1002283cfd29923d517db7c33e07bb54aac7acd4":["bd9ddb59e9d33950773d186a8b726b5610ae3aad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["248f6ecc900c3a5633fd5ca6f564ea8b717720da"],"11982a7b6834a8571852448312db4624c32990b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"bd9ddb59e9d33950773d186a8b726b5610ae3aad":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fe33227f6805edab2036cbb80645cc4e2d1fa424","1002283cfd29923d517db7c33e07bb54aac7acd4"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"248f6ecc900c3a5633fd5ca6f564ea8b717720da":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["11982a7b6834a8571852448312db4624c32990b5"],"1002283cfd29923d517db7c33e07bb54aac7acd4":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","248f6ecc900c3a5633fd5ca6f564ea8b717720da"],"11982a7b6834a8571852448312db4624c32990b5":["bd9ddb59e9d33950773d186a8b726b5610ae3aad","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}