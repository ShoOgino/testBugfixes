{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#valuesInOrderAndBounds(int,int,byte[],byte[],IntFunction[BytesRef],int[],int).mjava","commits":[{"id":"9fc0d60683b47b5d922124c31f57c8b34734f9e6","date":1480846684,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#valuesInOrderAndBounds(int,int,byte[],byte[],IntFunction[BytesRef],int[],int).mjava","pathOld":"/dev/null","sourceNew":"  // only called from assert\n  private boolean valuesInOrderAndBounds(int count, int sortedDim, byte[] minPackedValue, byte[] maxPackedValue,\n      IntFunction<BytesRef> values, int[] docs, int docsOffset) throws IOException {\n    byte[] lastPackedValue = new byte[packedBytesLength];\n    int lastDoc = -1;\n    for (int i=0;i<count;i++) {\n      BytesRef packedValue = values.apply(i);\n      assert packedValue.length == packedBytesLength;\n      assert valueInOrder(i, sortedDim, lastPackedValue, packedValue.bytes, packedValue.offset,\n          docs[docsOffset + i], lastDoc);\n      lastDoc = docs[docsOffset + i];\n\n      // Make sure this value does in fact fall within this leaf cell:\n      assert valueInBounds(packedValue, minPackedValue, maxPackedValue);\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#valuesInOrderAndBounds(int,int,byte[],byte[],IntFunction[BytesRef],int[],int).mjava","pathOld":"/dev/null","sourceNew":"  // only called from assert\n  private boolean valuesInOrderAndBounds(int count, int sortedDim, byte[] minPackedValue, byte[] maxPackedValue,\n      IntFunction<BytesRef> values, int[] docs, int docsOffset) throws IOException {\n    byte[] lastPackedValue = new byte[packedBytesLength];\n    int lastDoc = -1;\n    for (int i=0;i<count;i++) {\n      BytesRef packedValue = values.apply(i);\n      assert packedValue.length == packedBytesLength;\n      assert valueInOrder(i, sortedDim, lastPackedValue, packedValue.bytes, packedValue.offset,\n          docs[docsOffset + i], lastDoc);\n      lastDoc = docs[docsOffset + i];\n\n      // Make sure this value does in fact fall within this leaf cell:\n      assert valueInBounds(packedValue, minPackedValue, maxPackedValue);\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#valuesInOrderAndBounds(int,int,byte[],byte[],IntFunction[BytesRef],int[],int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#valuesInOrderAndBounds(int,int,byte[],byte[],IntFunction[BytesRef],int[],int).mjava","sourceNew":"  // only called from assert\n  private boolean valuesInOrderAndBounds(int count, int sortedDim, byte[] minPackedValue, byte[] maxPackedValue,\n      IntFunction<BytesRef> values, int[] docs, int docsOffset) throws IOException {\n    byte[] lastPackedValue = new byte[config.packedBytesLength];\n    int lastDoc = -1;\n    for (int i=0;i<count;i++) {\n      BytesRef packedValue = values.apply(i);\n      assert packedValue.length == config.packedBytesLength;\n      assert valueInOrder(i, sortedDim, lastPackedValue, packedValue.bytes, packedValue.offset,\n          docs[docsOffset + i], lastDoc);\n      lastDoc = docs[docsOffset + i];\n\n      // Make sure this value does in fact fall within this leaf cell:\n      assert valueInBounds(packedValue, minPackedValue, maxPackedValue);\n    }\n    return true;\n  }\n\n","sourceOld":"  // only called from assert\n  private boolean valuesInOrderAndBounds(int count, int sortedDim, byte[] minPackedValue, byte[] maxPackedValue,\n      IntFunction<BytesRef> values, int[] docs, int docsOffset) throws IOException {\n    byte[] lastPackedValue = new byte[packedBytesLength];\n    int lastDoc = -1;\n    for (int i=0;i<count;i++) {\n      BytesRef packedValue = values.apply(i);\n      assert packedValue.length == packedBytesLength;\n      assert valueInOrder(i, sortedDim, lastPackedValue, packedValue.bytes, packedValue.offset,\n          docs[docsOffset + i], lastDoc);\n      lastDoc = docs[docsOffset + i];\n\n      // Make sure this value does in fact fall within this leaf cell:\n      assert valueInBounds(packedValue, minPackedValue, maxPackedValue);\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9","9856095f7afb5a607bf5e65077615ed91273508c"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","9856095f7afb5a607bf5e65077615ed91273508c"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}