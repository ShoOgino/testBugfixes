{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CopyOfEvaluator#doWork(Object...).mjava","commits":[{"id":"ba1e7de64990e3928b90142a52fb92eeff556475","date":1503713257,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CopyOfEvaluator#doWork(Object...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n    if(Arrays.stream(values).anyMatch(item -> null == item)){\n      return null;\n    }\n    \n    List<?> sourceValues;\n    Integer length;\n    \n    if(values.length >= 1){\n      sourceValues = values[0] instanceof List<?> ? (List<?>)values[0] : Arrays.asList(values[0]); \n      \n      // default to full array\n      length = sourceValues.size();\n      \n      if(values.length >= 2){\n        if(values[1] instanceof Number){\n          length = ((Number)values[1]).intValue();\n        }\n        else{\n          throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - if second parameter is provided then it must be a valid number but found %s instead\",toExpression(constructingFactory), values[1].getClass().getSimpleName()));\n        }        \n      }      \n    }\n    else{\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one value but found %d\",toExpression(constructingFactory),containedEvaluators.size()));\n    }\n\n    return sourceValues.subList(0, Math.min(length, sourceValues.size()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45c28dbb559366e1f4ef8077346552bfb3f7ecf6","date":1503738439,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CopyOfEvaluator#doWork(Object...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n    if(Arrays.stream(values).anyMatch(item -> null == item)){\n      return null;\n    }\n    \n    List<?> sourceValues;\n    Integer length;\n    \n    if(values.length >= 1){\n      sourceValues = values[0] instanceof List<?> ? (List<?>)values[0] : Arrays.asList(values[0]); \n      \n      // default to full array\n      length = sourceValues.size();\n      \n      if(values.length >= 2){\n        if(values[1] instanceof Number){\n          length = ((Number)values[1]).intValue();\n        }\n        else{\n          throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - if second parameter is provided then it must be a valid number but found %s instead\",toExpression(constructingFactory), values[1].getClass().getSimpleName()));\n        }        \n      }      \n    }\n    else{\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one value but found %d\",toExpression(constructingFactory),containedEvaluators.size()));\n    }\n\n    return sourceValues.subList(0, Math.min(length, sourceValues.size()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CopyOfEvaluator#doWork(Object...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n    if(Arrays.stream(values).anyMatch(item -> null == item)){\n      return null;\n    }\n    \n    List<?> sourceValues;\n    Integer length;\n    \n    if(values.length >= 1){\n      sourceValues = values[0] instanceof List<?> ? (List<?>)values[0] : Arrays.asList(values[0]); \n      \n      // default to full array\n      length = sourceValues.size();\n      \n      if(values.length >= 2){\n        if(values[1] instanceof Number){\n          length = ((Number)values[1]).intValue();\n        }\n        else{\n          throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - if second parameter is provided then it must be a valid number but found %s instead\",toExpression(constructingFactory), values[1].getClass().getSimpleName()));\n        }        \n      }      \n    }\n    else{\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one value but found %d\",toExpression(constructingFactory),containedEvaluators.size()));\n    }\n\n    return sourceValues.subList(0, Math.min(length, sourceValues.size()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ba1e7de64990e3928b90142a52fb92eeff556475"],"ba1e7de64990e3928b90142a52fb92eeff556475":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"]},"commit2Childs":{"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","45c28dbb559366e1f4ef8077346552bfb3f7ecf6","ba1e7de64990e3928b90142a52fb92eeff556475"],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ba1e7de64990e3928b90142a52fb92eeff556475":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}