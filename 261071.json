{"path":"lucene/core/src/java/org/apache/lucene/index/MergeState#MergeState(List[LeafReader],SegmentInfo,InfoStream,CheckAbort).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergeState#MergeState(List[LeafReader],SegmentInfo,InfoStream,CheckAbort).mjava","pathOld":"/dev/null","sourceNew":"  /** Sole constructor. */\n  MergeState(List<LeafReader> readers, SegmentInfo segmentInfo, InfoStream infoStream, CheckAbort checkAbort) {\n    this.readers = readers;\n    this.segmentInfo = segmentInfo;\n    this.infoStream = infoStream;\n    this.checkAbort = checkAbort;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2131047ecceac64b54ba70feec3d26bbd7e483d7","date":1411862069,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergeState#MergeState(List[LeafReader],SegmentInfo,InfoStream,CheckAbort).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergeState#MergeState(List[LeafReader],SegmentInfo,InfoStream,CheckAbort).mjava","sourceNew":"  /** Sole constructor. */\n  MergeState(List<LeafReader> readers, SegmentInfo segmentInfo, InfoStream infoStream, CheckAbort checkAbort) throws IOException {\n\n    int numReaders = readers.size();\n    docMaps = new DocMap[numReaders];\n    docBase = new int[numReaders];\n    maxDocs = new int[numReaders];\n    fieldsProducers = new FieldsProducer[numReaders];\n    normsProducers = new NormsProducer[numReaders];\n    storedFieldsReaders = new StoredFieldsReader[numReaders];\n    termVectorsReaders = new TermVectorsReader[numReaders];\n    docValuesProducers = new DocValuesProducer[numReaders];\n    fieldInfos = new FieldInfos[numReaders];\n    liveDocs = new Bits[numReaders];\n\n    for(int i=0;i<numReaders;i++) {\n      final LeafReader reader = readers.get(i);\n\n      maxDocs[i] = reader.maxDoc();\n      liveDocs[i] = reader.getLiveDocs();\n      fieldInfos[i] = reader.getFieldInfos();\n\n      NormsProducer normsProducer;\n      DocValuesProducer docValuesProducer;\n      StoredFieldsReader storedFieldsReader;\n      TermVectorsReader termVectorsReader;\n      FieldsProducer fieldsProducer;\n      if (reader instanceof SegmentReader) {\n        SegmentReader segmentReader = (SegmentReader) reader;\n        normsProducer = segmentReader.getNormsReader();\n        docValuesProducer = segmentReader.getDocValuesReader();\n        storedFieldsReader = segmentReader.getFieldsReader();\n        termVectorsReader = segmentReader.getTermVectorsReader();\n        fieldsProducer = segmentReader.fields();\n      } else {\n        // A \"foreign\" reader\n        normsProducer = readerToNormsProducer(reader);\n        docValuesProducer = readerToDocValuesProducer(reader);\n        storedFieldsReader = readerToStoredFieldsReader(reader);\n        termVectorsReader = readerToTermVectorsReader(reader);\n        fieldsProducer = readerToFieldsProducer(reader);\n      }\n\n      normsProducers[i] = normsProducer;\n      docValuesProducers[i] = docValuesProducer;\n      storedFieldsReaders[i] = storedFieldsReader;\n      termVectorsReaders[i] = termVectorsReader;\n      fieldsProducers[i] = fieldsProducer;\n    }\n\n    this.segmentInfo = segmentInfo;\n    this.infoStream = infoStream;\n    this.checkAbort = checkAbort;\n\n    setDocMaps(readers);\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  MergeState(List<LeafReader> readers, SegmentInfo segmentInfo, InfoStream infoStream, CheckAbort checkAbort) {\n    this.readers = readers;\n    this.segmentInfo = segmentInfo;\n    this.infoStream = infoStream;\n    this.checkAbort = checkAbort;\n  }\n\n","bugFix":null,"bugIntro":["8028ab7a24273833d53d35eb160dba5b57283cf5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2970313982bb49a531a8b2b16a5e93872d5248b2","date":1411916508,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergeState#MergeState(List[LeafReader],SegmentInfo,InfoStream,CheckAbort).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergeState#MergeState(List[LeafReader],SegmentInfo,InfoStream,CheckAbort).mjava","sourceNew":"  /** Sole constructor. */\n  MergeState(List<LeafReader> readers, SegmentInfo segmentInfo, InfoStream infoStream, CheckAbort checkAbort) throws IOException {\n\n    int numReaders = readers.size();\n    docMaps = new DocMap[numReaders];\n    docBase = new int[numReaders];\n    maxDocs = new int[numReaders];\n    fieldsProducers = new FieldsProducer[numReaders];\n    normsProducers = new NormsProducer[numReaders];\n    storedFieldsReaders = new StoredFieldsReader[numReaders];\n    termVectorsReaders = new TermVectorsReader[numReaders];\n    docValuesProducers = new DocValuesProducer[numReaders];\n    fieldInfos = new FieldInfos[numReaders];\n    liveDocs = new Bits[numReaders];\n\n    for(int i=0;i<numReaders;i++) {\n      final LeafReader reader = readers.get(i);\n\n      maxDocs[i] = reader.maxDoc();\n      liveDocs[i] = reader.getLiveDocs();\n      fieldInfos[i] = reader.getFieldInfos();\n\n      NormsProducer normsProducer;\n      DocValuesProducer docValuesProducer;\n      StoredFieldsReader storedFieldsReader;\n      TermVectorsReader termVectorsReader;\n      FieldsProducer fieldsProducer;\n      if (reader instanceof SegmentReader) {\n        SegmentReader segmentReader = (SegmentReader) reader;\n        normsProducer = segmentReader.getNormsReader();\n        if (normsProducer != null) {\n          normsProducer = normsProducer.getMergeInstance();\n        }\n        docValuesProducer = segmentReader.getDocValuesReader();\n        if (docValuesProducer != null) {\n          docValuesProducer = docValuesProducer.getMergeInstance();\n        }\n        storedFieldsReader = segmentReader.getFieldsReader();\n        if (storedFieldsReader != null) {\n          storedFieldsReader = storedFieldsReader.getMergeInstance();\n        }\n        termVectorsReader = segmentReader.getTermVectorsReader();\n        if (termVectorsReader != null) {\n          termVectorsReader = termVectorsReader.getMergeInstance();\n        }\n        fieldsProducer = segmentReader.fields();\n        if (fieldsProducer != null) {\n          fieldsProducer = fieldsProducer.getMergeInstance();\n        }\n      } else {\n        // A \"foreign\" reader\n        normsProducer = readerToNormsProducer(reader);\n        docValuesProducer = readerToDocValuesProducer(reader);\n        storedFieldsReader = readerToStoredFieldsReader(reader);\n        termVectorsReader = readerToTermVectorsReader(reader);\n        fieldsProducer = readerToFieldsProducer(reader);\n      }\n\n      normsProducers[i] = normsProducer;\n      docValuesProducers[i] = docValuesProducer;\n      storedFieldsReaders[i] = storedFieldsReader;\n      termVectorsReaders[i] = termVectorsReader;\n      fieldsProducers[i] = fieldsProducer;\n    }\n\n    this.segmentInfo = segmentInfo;\n    this.infoStream = infoStream;\n    this.checkAbort = checkAbort;\n\n    setDocMaps(readers);\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  MergeState(List<LeafReader> readers, SegmentInfo segmentInfo, InfoStream infoStream, CheckAbort checkAbort) throws IOException {\n\n    int numReaders = readers.size();\n    docMaps = new DocMap[numReaders];\n    docBase = new int[numReaders];\n    maxDocs = new int[numReaders];\n    fieldsProducers = new FieldsProducer[numReaders];\n    normsProducers = new NormsProducer[numReaders];\n    storedFieldsReaders = new StoredFieldsReader[numReaders];\n    termVectorsReaders = new TermVectorsReader[numReaders];\n    docValuesProducers = new DocValuesProducer[numReaders];\n    fieldInfos = new FieldInfos[numReaders];\n    liveDocs = new Bits[numReaders];\n\n    for(int i=0;i<numReaders;i++) {\n      final LeafReader reader = readers.get(i);\n\n      maxDocs[i] = reader.maxDoc();\n      liveDocs[i] = reader.getLiveDocs();\n      fieldInfos[i] = reader.getFieldInfos();\n\n      NormsProducer normsProducer;\n      DocValuesProducer docValuesProducer;\n      StoredFieldsReader storedFieldsReader;\n      TermVectorsReader termVectorsReader;\n      FieldsProducer fieldsProducer;\n      if (reader instanceof SegmentReader) {\n        SegmentReader segmentReader = (SegmentReader) reader;\n        normsProducer = segmentReader.getNormsReader();\n        docValuesProducer = segmentReader.getDocValuesReader();\n        storedFieldsReader = segmentReader.getFieldsReader();\n        termVectorsReader = segmentReader.getTermVectorsReader();\n        fieldsProducer = segmentReader.fields();\n      } else {\n        // A \"foreign\" reader\n        normsProducer = readerToNormsProducer(reader);\n        docValuesProducer = readerToDocValuesProducer(reader);\n        storedFieldsReader = readerToStoredFieldsReader(reader);\n        termVectorsReader = readerToTermVectorsReader(reader);\n        fieldsProducer = readerToFieldsProducer(reader);\n      }\n\n      normsProducers[i] = normsProducer;\n      docValuesProducers[i] = docValuesProducer;\n      storedFieldsReaders[i] = storedFieldsReader;\n      termVectorsReaders[i] = termVectorsReader;\n      fieldsProducers[i] = fieldsProducer;\n    }\n\n    this.segmentInfo = segmentInfo;\n    this.infoStream = infoStream;\n    this.checkAbort = checkAbort;\n\n    setDocMaps(readers);\n  }\n\n","bugFix":null,"bugIntro":["8028ab7a24273833d53d35eb160dba5b57283cf5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergeState#MergeState(List[LeafReader],SegmentInfo,InfoStream,CheckAbort).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergeState#MergeState(List[LeafReader],SegmentInfo,InfoStream,CheckAbort).mjava","sourceNew":"  /** Sole constructor. */\n  MergeState(List<LeafReader> readers, SegmentInfo segmentInfo, InfoStream infoStream, CheckAbort checkAbort) throws IOException {\n\n    int numReaders = readers.size();\n    docMaps = new DocMap[numReaders];\n    docBase = new int[numReaders];\n    maxDocs = new int[numReaders];\n    fieldsProducers = new FieldsProducer[numReaders];\n    normsProducers = new NormsProducer[numReaders];\n    storedFieldsReaders = new StoredFieldsReader[numReaders];\n    termVectorsReaders = new TermVectorsReader[numReaders];\n    docValuesProducers = new DocValuesProducer[numReaders];\n    fieldInfos = new FieldInfos[numReaders];\n    liveDocs = new Bits[numReaders];\n\n    for(int i=0;i<numReaders;i++) {\n      final LeafReader reader = readers.get(i);\n\n      maxDocs[i] = reader.maxDoc();\n      liveDocs[i] = reader.getLiveDocs();\n      fieldInfos[i] = reader.getFieldInfos();\n\n      NormsProducer normsProducer;\n      DocValuesProducer docValuesProducer;\n      StoredFieldsReader storedFieldsReader;\n      TermVectorsReader termVectorsReader;\n      FieldsProducer fieldsProducer;\n      if (reader instanceof SegmentReader) {\n        SegmentReader segmentReader = (SegmentReader) reader;\n        normsProducer = segmentReader.getNormsReader();\n        if (normsProducer != null) {\n          normsProducer = normsProducer.getMergeInstance();\n        }\n        docValuesProducer = segmentReader.getDocValuesReader();\n        if (docValuesProducer != null) {\n          docValuesProducer = docValuesProducer.getMergeInstance();\n        }\n        storedFieldsReader = segmentReader.getFieldsReader();\n        if (storedFieldsReader != null) {\n          storedFieldsReader = storedFieldsReader.getMergeInstance();\n        }\n        termVectorsReader = segmentReader.getTermVectorsReader();\n        if (termVectorsReader != null) {\n          termVectorsReader = termVectorsReader.getMergeInstance();\n        }\n        fieldsProducer = segmentReader.fields();\n        if (fieldsProducer != null) {\n          fieldsProducer = fieldsProducer.getMergeInstance();\n        }\n      } else {\n        // A \"foreign\" reader\n        normsProducer = readerToNormsProducer(reader);\n        docValuesProducer = readerToDocValuesProducer(reader);\n        storedFieldsReader = readerToStoredFieldsReader(reader);\n        termVectorsReader = readerToTermVectorsReader(reader);\n        fieldsProducer = readerToFieldsProducer(reader);\n      }\n\n      normsProducers[i] = normsProducer;\n      docValuesProducers[i] = docValuesProducer;\n      storedFieldsReaders[i] = storedFieldsReader;\n      termVectorsReaders[i] = termVectorsReader;\n      fieldsProducers[i] = fieldsProducer;\n    }\n\n    this.segmentInfo = segmentInfo;\n    this.infoStream = infoStream;\n    this.checkAbort = checkAbort;\n\n    setDocMaps(readers);\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  MergeState(List<LeafReader> readers, SegmentInfo segmentInfo, InfoStream infoStream, CheckAbort checkAbort) {\n    this.readers = readers;\n    this.segmentInfo = segmentInfo;\n    this.infoStream = infoStream;\n    this.checkAbort = checkAbort;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8028ab7a24273833d53d35eb160dba5b57283cf5","date":1416767720,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergeState#MergeState(List[LeafReader],SegmentInfo,InfoStream,CheckAbort).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergeState#MergeState(List[LeafReader],SegmentInfo,InfoStream,CheckAbort).mjava","sourceNew":"  /** Sole constructor. */\n  MergeState(List<LeafReader> readers, SegmentInfo segmentInfo, InfoStream infoStream, CheckAbort checkAbort) throws IOException {\n\n    int numReaders = readers.size();\n    docMaps = new DocMap[numReaders];\n    docBase = new int[numReaders];\n    maxDocs = new int[numReaders];\n    fieldsProducers = new FieldsProducer[numReaders];\n    normsProducers = new NormsProducer[numReaders];\n    storedFieldsReaders = new StoredFieldsReader[numReaders];\n    termVectorsReaders = new TermVectorsReader[numReaders];\n    docValuesProducers = new DocValuesProducer[numReaders];\n    fieldInfos = new FieldInfos[numReaders];\n    liveDocs = new Bits[numReaders];\n\n    for(int i=0;i<numReaders;i++) {\n      final LeafReader reader = readers.get(i);\n\n      maxDocs[i] = reader.maxDoc();\n      liveDocs[i] = reader.getLiveDocs();\n      fieldInfos[i] = reader.getFieldInfos();\n\n      NormsProducer normsProducer;\n      DocValuesProducer docValuesProducer;\n      StoredFieldsReader storedFieldsReader;\n      TermVectorsReader termVectorsReader;\n      FieldsProducer fieldsProducer;\n      if (reader instanceof SegmentReader) {\n        SegmentReader segmentReader = (SegmentReader) reader;\n        normsProducer = segmentReader.getNormsReader();\n        if (normsProducer != null) {\n          normsProducer = normsProducer.getMergeInstance();\n        }\n        docValuesProducer = segmentReader.getDocValuesReader();\n        if (docValuesProducer != null) {\n          docValuesProducer = docValuesProducer.getMergeInstance();\n        }\n        storedFieldsReader = segmentReader.getFieldsReader();\n        if (storedFieldsReader != null) {\n          storedFieldsReader = storedFieldsReader.getMergeInstance();\n        }\n        termVectorsReader = segmentReader.getTermVectorsReader();\n        if (termVectorsReader != null) {\n          termVectorsReader = termVectorsReader.getMergeInstance();\n        }\n        fieldsProducer = segmentReader.fields().getMergeInstance();\n      } else {\n        // A \"foreign\" reader\n        normsProducer = readerToNormsProducer(reader);\n        docValuesProducer = readerToDocValuesProducer(reader);\n        storedFieldsReader = readerToStoredFieldsReader(reader);\n        termVectorsReader = readerToTermVectorsReader(reader);\n        fieldsProducer = readerToFieldsProducer(reader);\n      }\n\n      normsProducers[i] = normsProducer;\n      docValuesProducers[i] = docValuesProducer;\n      storedFieldsReaders[i] = storedFieldsReader;\n      termVectorsReaders[i] = termVectorsReader;\n      fieldsProducers[i] = fieldsProducer;\n    }\n\n    this.segmentInfo = segmentInfo;\n    this.infoStream = infoStream;\n    this.checkAbort = checkAbort;\n\n    setDocMaps(readers);\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  MergeState(List<LeafReader> readers, SegmentInfo segmentInfo, InfoStream infoStream, CheckAbort checkAbort) throws IOException {\n\n    int numReaders = readers.size();\n    docMaps = new DocMap[numReaders];\n    docBase = new int[numReaders];\n    maxDocs = new int[numReaders];\n    fieldsProducers = new FieldsProducer[numReaders];\n    normsProducers = new NormsProducer[numReaders];\n    storedFieldsReaders = new StoredFieldsReader[numReaders];\n    termVectorsReaders = new TermVectorsReader[numReaders];\n    docValuesProducers = new DocValuesProducer[numReaders];\n    fieldInfos = new FieldInfos[numReaders];\n    liveDocs = new Bits[numReaders];\n\n    for(int i=0;i<numReaders;i++) {\n      final LeafReader reader = readers.get(i);\n\n      maxDocs[i] = reader.maxDoc();\n      liveDocs[i] = reader.getLiveDocs();\n      fieldInfos[i] = reader.getFieldInfos();\n\n      NormsProducer normsProducer;\n      DocValuesProducer docValuesProducer;\n      StoredFieldsReader storedFieldsReader;\n      TermVectorsReader termVectorsReader;\n      FieldsProducer fieldsProducer;\n      if (reader instanceof SegmentReader) {\n        SegmentReader segmentReader = (SegmentReader) reader;\n        normsProducer = segmentReader.getNormsReader();\n        if (normsProducer != null) {\n          normsProducer = normsProducer.getMergeInstance();\n        }\n        docValuesProducer = segmentReader.getDocValuesReader();\n        if (docValuesProducer != null) {\n          docValuesProducer = docValuesProducer.getMergeInstance();\n        }\n        storedFieldsReader = segmentReader.getFieldsReader();\n        if (storedFieldsReader != null) {\n          storedFieldsReader = storedFieldsReader.getMergeInstance();\n        }\n        termVectorsReader = segmentReader.getTermVectorsReader();\n        if (termVectorsReader != null) {\n          termVectorsReader = termVectorsReader.getMergeInstance();\n        }\n        fieldsProducer = segmentReader.fields();\n        if (fieldsProducer != null) {\n          fieldsProducer = fieldsProducer.getMergeInstance();\n        }\n      } else {\n        // A \"foreign\" reader\n        normsProducer = readerToNormsProducer(reader);\n        docValuesProducer = readerToDocValuesProducer(reader);\n        storedFieldsReader = readerToStoredFieldsReader(reader);\n        termVectorsReader = readerToTermVectorsReader(reader);\n        fieldsProducer = readerToFieldsProducer(reader);\n      }\n\n      normsProducers[i] = normsProducer;\n      docValuesProducers[i] = docValuesProducer;\n      storedFieldsReaders[i] = storedFieldsReader;\n      termVectorsReaders[i] = termVectorsReader;\n      fieldsProducers[i] = fieldsProducer;\n    }\n\n    this.segmentInfo = segmentInfo;\n    this.infoStream = infoStream;\n    this.checkAbort = checkAbort;\n\n    setDocMaps(readers);\n  }\n\n","bugFix":["2131047ecceac64b54ba70feec3d26bbd7e483d7","2970313982bb49a531a8b2b16a5e93872d5248b2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5faf65b6692f15cca0f87bf8666c87899afc619f","date":1420468108,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergeState#MergeState(List[LeafReader],SegmentInfo,InfoStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergeState#MergeState(List[LeafReader],SegmentInfo,InfoStream,CheckAbort).mjava","sourceNew":"  /** Sole constructor. */\n  MergeState(List<LeafReader> readers, SegmentInfo segmentInfo, InfoStream infoStream) throws IOException {\n\n    int numReaders = readers.size();\n    docMaps = new DocMap[numReaders];\n    docBase = new int[numReaders];\n    maxDocs = new int[numReaders];\n    fieldsProducers = new FieldsProducer[numReaders];\n    normsProducers = new NormsProducer[numReaders];\n    storedFieldsReaders = new StoredFieldsReader[numReaders];\n    termVectorsReaders = new TermVectorsReader[numReaders];\n    docValuesProducers = new DocValuesProducer[numReaders];\n    fieldInfos = new FieldInfos[numReaders];\n    liveDocs = new Bits[numReaders];\n\n    for(int i=0;i<numReaders;i++) {\n      final LeafReader reader = readers.get(i);\n\n      maxDocs[i] = reader.maxDoc();\n      liveDocs[i] = reader.getLiveDocs();\n      fieldInfos[i] = reader.getFieldInfos();\n\n      NormsProducer normsProducer;\n      DocValuesProducer docValuesProducer;\n      StoredFieldsReader storedFieldsReader;\n      TermVectorsReader termVectorsReader;\n      FieldsProducer fieldsProducer;\n      if (reader instanceof SegmentReader) {\n        SegmentReader segmentReader = (SegmentReader) reader;\n        normsProducer = segmentReader.getNormsReader();\n        if (normsProducer != null) {\n          normsProducer = normsProducer.getMergeInstance();\n        }\n        docValuesProducer = segmentReader.getDocValuesReader();\n        if (docValuesProducer != null) {\n          docValuesProducer = docValuesProducer.getMergeInstance();\n        }\n        storedFieldsReader = segmentReader.getFieldsReader();\n        if (storedFieldsReader != null) {\n          storedFieldsReader = storedFieldsReader.getMergeInstance();\n        }\n        termVectorsReader = segmentReader.getTermVectorsReader();\n        if (termVectorsReader != null) {\n          termVectorsReader = termVectorsReader.getMergeInstance();\n        }\n        fieldsProducer = segmentReader.fields().getMergeInstance();\n      } else {\n        // A \"foreign\" reader\n        normsProducer = readerToNormsProducer(reader);\n        docValuesProducer = readerToDocValuesProducer(reader);\n        storedFieldsReader = readerToStoredFieldsReader(reader);\n        termVectorsReader = readerToTermVectorsReader(reader);\n        fieldsProducer = readerToFieldsProducer(reader);\n      }\n\n      normsProducers[i] = normsProducer;\n      docValuesProducers[i] = docValuesProducer;\n      storedFieldsReaders[i] = storedFieldsReader;\n      termVectorsReaders[i] = termVectorsReader;\n      fieldsProducers[i] = fieldsProducer;\n    }\n\n    this.segmentInfo = segmentInfo;\n    this.infoStream = infoStream;\n\n    setDocMaps(readers);\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  MergeState(List<LeafReader> readers, SegmentInfo segmentInfo, InfoStream infoStream, CheckAbort checkAbort) throws IOException {\n\n    int numReaders = readers.size();\n    docMaps = new DocMap[numReaders];\n    docBase = new int[numReaders];\n    maxDocs = new int[numReaders];\n    fieldsProducers = new FieldsProducer[numReaders];\n    normsProducers = new NormsProducer[numReaders];\n    storedFieldsReaders = new StoredFieldsReader[numReaders];\n    termVectorsReaders = new TermVectorsReader[numReaders];\n    docValuesProducers = new DocValuesProducer[numReaders];\n    fieldInfos = new FieldInfos[numReaders];\n    liveDocs = new Bits[numReaders];\n\n    for(int i=0;i<numReaders;i++) {\n      final LeafReader reader = readers.get(i);\n\n      maxDocs[i] = reader.maxDoc();\n      liveDocs[i] = reader.getLiveDocs();\n      fieldInfos[i] = reader.getFieldInfos();\n\n      NormsProducer normsProducer;\n      DocValuesProducer docValuesProducer;\n      StoredFieldsReader storedFieldsReader;\n      TermVectorsReader termVectorsReader;\n      FieldsProducer fieldsProducer;\n      if (reader instanceof SegmentReader) {\n        SegmentReader segmentReader = (SegmentReader) reader;\n        normsProducer = segmentReader.getNormsReader();\n        if (normsProducer != null) {\n          normsProducer = normsProducer.getMergeInstance();\n        }\n        docValuesProducer = segmentReader.getDocValuesReader();\n        if (docValuesProducer != null) {\n          docValuesProducer = docValuesProducer.getMergeInstance();\n        }\n        storedFieldsReader = segmentReader.getFieldsReader();\n        if (storedFieldsReader != null) {\n          storedFieldsReader = storedFieldsReader.getMergeInstance();\n        }\n        termVectorsReader = segmentReader.getTermVectorsReader();\n        if (termVectorsReader != null) {\n          termVectorsReader = termVectorsReader.getMergeInstance();\n        }\n        fieldsProducer = segmentReader.fields().getMergeInstance();\n      } else {\n        // A \"foreign\" reader\n        normsProducer = readerToNormsProducer(reader);\n        docValuesProducer = readerToDocValuesProducer(reader);\n        storedFieldsReader = readerToStoredFieldsReader(reader);\n        termVectorsReader = readerToTermVectorsReader(reader);\n        fieldsProducer = readerToFieldsProducer(reader);\n      }\n\n      normsProducers[i] = normsProducer;\n      docValuesProducers[i] = docValuesProducer;\n      storedFieldsReaders[i] = storedFieldsReader;\n      termVectorsReaders[i] = termVectorsReader;\n      fieldsProducers[i] = fieldsProducer;\n    }\n\n    this.segmentInfo = segmentInfo;\n    this.infoStream = infoStream;\n    this.checkAbort = checkAbort;\n\n    setDocMaps(readers);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8028ab7a24273833d53d35eb160dba5b57283cf5":["9bb9a29a5e71a90295f175df8919802993142c9a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["c9fb5f46e264daf5ba3860defe623a89d202dd87","2970313982bb49a531a8b2b16a5e93872d5248b2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2131047ecceac64b54ba70feec3d26bbd7e483d7":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["8028ab7a24273833d53d35eb160dba5b57283cf5"],"2970313982bb49a531a8b2b16a5e93872d5248b2":["2131047ecceac64b54ba70feec3d26bbd7e483d7"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5faf65b6692f15cca0f87bf8666c87899afc619f"]},"commit2Childs":{"8028ab7a24273833d53d35eb160dba5b57283cf5":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"9bb9a29a5e71a90295f175df8919802993142c9a":["8028ab7a24273833d53d35eb160dba5b57283cf5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"2131047ecceac64b54ba70feec3d26bbd7e483d7":["2970313982bb49a531a8b2b16a5e93872d5248b2"],"2970313982bb49a531a8b2b16a5e93872d5248b2":["9bb9a29a5e71a90295f175df8919802993142c9a"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["9bb9a29a5e71a90295f175df8919802993142c9a","2131047ecceac64b54ba70feec3d26bbd7e483d7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}