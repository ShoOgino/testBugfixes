{"path":"lucene/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#getDocIdSet(IndexReader).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#getDocIdSet(IndexReader).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#getDocIdSet(IndexReader).mjava","sourceNew":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException\n  {\n    OpenBitSetDISI res = null;\n  \n    if (shouldFilters != null) {\n      for (int i = 0; i < shouldFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(shouldFilters, i, reader), reader.maxDoc());\n        } else { \n          DocIdSet dis = shouldFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.or((OpenBitSet) dis);\n          } else {\n            res.inPlaceOr(getDISI(shouldFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (notFilters!=null) {\n      for (int i = 0; i < notFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(notFilters, i, reader), reader.maxDoc());\n          res.flip(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        } else {\n          DocIdSet dis = notFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.andNot((OpenBitSet) dis);\n          } else {\n            res.inPlaceNot(getDISI(notFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (mustFilters!=null) {\n      for (int i = 0; i < mustFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(mustFilters, i, reader), reader.maxDoc());\n        } else {\n          DocIdSet dis = mustFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.and((OpenBitSet) dis);\n          } else {\n            res.inPlaceAnd(getDISI(mustFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (res !=null)\n      return finalResult(res, reader.maxDoc());\n\n    return DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","sourceOld":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException\n  {\n    OpenBitSetDISI res = null;\n  \n    if (shouldFilters != null) {\n      for (int i = 0; i < shouldFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(shouldFilters, i, reader), reader.maxDoc());\n        } else { \n          DocIdSet dis = shouldFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.or((OpenBitSet) dis);\n          } else {\n            res.inPlaceOr(getDISI(shouldFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (notFilters!=null) {\n      for (int i = 0; i < notFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(notFilters, i, reader), reader.maxDoc());\n          res.flip(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        } else {\n          DocIdSet dis = notFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.andNot((OpenBitSet) dis);\n          } else {\n            res.inPlaceNot(getDISI(notFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (mustFilters!=null) {\n      for (int i = 0; i < mustFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(mustFilters, i, reader), reader.maxDoc());\n        } else {\n          DocIdSet dis = mustFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.and((OpenBitSet) dis);\n          } else {\n            res.inPlaceAnd(getDISI(mustFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (res !=null)\n      return finalResult(res, reader.maxDoc());\n\n    return DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#getDocIdSet(IndexReader).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#getDocIdSet(IndexReader).mjava","sourceNew":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException\n  {\n    OpenBitSetDISI res = null;\n  \n    if (shouldFilters != null) {\n      for (int i = 0; i < shouldFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(shouldFilters, i, reader), reader.maxDoc());\n        } else { \n          DocIdSet dis = shouldFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.or((OpenBitSet) dis);\n          } else {\n            res.inPlaceOr(getDISI(shouldFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (notFilters!=null) {\n      for (int i = 0; i < notFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(notFilters, i, reader), reader.maxDoc());\n          res.flip(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        } else {\n          DocIdSet dis = notFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.andNot((OpenBitSet) dis);\n          } else {\n            res.inPlaceNot(getDISI(notFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (mustFilters!=null) {\n      for (int i = 0; i < mustFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(mustFilters, i, reader), reader.maxDoc());\n        } else {\n          DocIdSet dis = mustFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.and((OpenBitSet) dis);\n          } else {\n            res.inPlaceAnd(getDISI(mustFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (res !=null)\n      return res;\n\n    return DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","sourceOld":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException\n  {\n    OpenBitSetDISI res = null;\n  \n    if (shouldFilters != null) {\n      for (int i = 0; i < shouldFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(shouldFilters, i, reader), reader.maxDoc());\n        } else { \n          DocIdSet dis = shouldFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.or((OpenBitSet) dis);\n          } else {\n            res.inPlaceOr(getDISI(shouldFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (notFilters!=null) {\n      for (int i = 0; i < notFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(notFilters, i, reader), reader.maxDoc());\n          res.flip(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        } else {\n          DocIdSet dis = notFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.andNot((OpenBitSet) dis);\n          } else {\n            res.inPlaceNot(getDISI(notFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (mustFilters!=null) {\n      for (int i = 0; i < mustFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(mustFilters, i, reader), reader.maxDoc());\n        } else {\n          DocIdSet dis = mustFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.and((OpenBitSet) dis);\n          } else {\n            res.inPlaceAnd(getDISI(mustFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (res !=null)\n      return finalResult(res, reader.maxDoc());\n\n    return DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#getDocIdSet(IndexReader).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#getDocIdSet(IndexReader).mjava","sourceNew":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException\n  {\n    OpenBitSetDISI res = null;\n  \n    if (shouldFilters != null) {\n      for (int i = 0; i < shouldFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(shouldFilters, i, reader), reader.maxDoc());\n        } else { \n          DocIdSet dis = shouldFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.or((OpenBitSet) dis);\n          } else {\n            res.inPlaceOr(getDISI(shouldFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (notFilters!=null) {\n      for (int i = 0; i < notFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(notFilters, i, reader), reader.maxDoc());\n          res.flip(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        } else {\n          DocIdSet dis = notFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.andNot((OpenBitSet) dis);\n          } else {\n            res.inPlaceNot(getDISI(notFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (mustFilters!=null) {\n      for (int i = 0; i < mustFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(mustFilters, i, reader), reader.maxDoc());\n        } else {\n          DocIdSet dis = mustFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.and((OpenBitSet) dis);\n          } else {\n            res.inPlaceAnd(getDISI(mustFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (res !=null)\n      return res;\n\n    return DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","sourceOld":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException\n  {\n    OpenBitSetDISI res = null;\n  \n    if (shouldFilters != null) {\n      for (int i = 0; i < shouldFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(shouldFilters, i, reader), reader.maxDoc());\n        } else { \n          DocIdSet dis = shouldFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.or((OpenBitSet) dis);\n          } else {\n            res.inPlaceOr(getDISI(shouldFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (notFilters!=null) {\n      for (int i = 0; i < notFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(notFilters, i, reader), reader.maxDoc());\n          res.flip(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        } else {\n          DocIdSet dis = notFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.andNot((OpenBitSet) dis);\n          } else {\n            res.inPlaceNot(getDISI(notFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (mustFilters!=null) {\n      for (int i = 0; i < mustFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(mustFilters, i, reader), reader.maxDoc());\n        } else {\n          DocIdSet dis = mustFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.and((OpenBitSet) dis);\n          } else {\n            res.inPlaceAnd(getDISI(mustFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (res !=null)\n      return finalResult(res, reader.maxDoc());\n\n    return DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#getDocIdSet(IndexReader).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#getDocIdSet(IndexReader).mjava","sourceNew":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException\n  {\n    OpenBitSetDISI res = null;\n  \n    if (shouldFilters != null) {\n      for (int i = 0; i < shouldFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(shouldFilters, i, reader), reader.maxDoc());\n        } else { \n          DocIdSet dis = shouldFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.or((OpenBitSet) dis);\n          } else {\n            res.inPlaceOr(getDISI(shouldFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (notFilters!=null) {\n      for (int i = 0; i < notFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(notFilters, i, reader), reader.maxDoc());\n          res.flip(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        } else {\n          DocIdSet dis = notFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.andNot((OpenBitSet) dis);\n          } else {\n            res.inPlaceNot(getDISI(notFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (mustFilters!=null) {\n      for (int i = 0; i < mustFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(mustFilters, i, reader), reader.maxDoc());\n        } else {\n          DocIdSet dis = mustFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.and((OpenBitSet) dis);\n          } else {\n            res.inPlaceAnd(getDISI(mustFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (res !=null)\n      return res;\n\n    return DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","sourceOld":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException\n  {\n    OpenBitSetDISI res = null;\n  \n    if (shouldFilters != null) {\n      for (int i = 0; i < shouldFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(shouldFilters, i, reader), reader.maxDoc());\n        } else { \n          DocIdSet dis = shouldFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.or((OpenBitSet) dis);\n          } else {\n            res.inPlaceOr(getDISI(shouldFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (notFilters!=null) {\n      for (int i = 0; i < notFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(notFilters, i, reader), reader.maxDoc());\n          res.flip(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        } else {\n          DocIdSet dis = notFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.andNot((OpenBitSet) dis);\n          } else {\n            res.inPlaceNot(getDISI(notFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (mustFilters!=null) {\n      for (int i = 0; i < mustFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(mustFilters, i, reader), reader.maxDoc());\n        } else {\n          DocIdSet dis = mustFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.and((OpenBitSet) dis);\n          } else {\n            res.inPlaceAnd(getDISI(mustFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (res !=null)\n      return finalResult(res, reader.maxDoc());\n\n    return DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#getDocIdSet(ReaderContext).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#getDocIdSet(IndexReader).mjava","sourceNew":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(ReaderContext context) throws IOException\n  {\n    OpenBitSetDISI res = null;\n    final IndexReader reader = context.reader;\n    if (shouldFilters != null) {\n      for (int i = 0; i < shouldFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(shouldFilters, i, context), reader.maxDoc());\n        } else { \n          DocIdSet dis = shouldFilters.get(i).getDocIdSet(context);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.or((OpenBitSet) dis);\n          } else {\n            res.inPlaceOr(getDISI(shouldFilters, i, context));\n          }\n        }\n      }\n    }\n    \n    if (notFilters!=null) {\n      for (int i = 0; i < notFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(notFilters, i, context), reader.maxDoc());\n          res.flip(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        } else {\n          DocIdSet dis = notFilters.get(i).getDocIdSet(context);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.andNot((OpenBitSet) dis);\n          } else {\n            res.inPlaceNot(getDISI(notFilters, i, context));\n          }\n        }\n      }\n    }\n    \n    if (mustFilters!=null) {\n      for (int i = 0; i < mustFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(mustFilters, i, context), reader.maxDoc());\n        } else {\n          DocIdSet dis = mustFilters.get(i).getDocIdSet(context);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.and((OpenBitSet) dis);\n          } else {\n            res.inPlaceAnd(getDISI(mustFilters, i, context));\n          }\n        }\n      }\n    }\n    \n    if (res !=null)\n      return res;\n\n    return DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","sourceOld":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException\n  {\n    OpenBitSetDISI res = null;\n  \n    if (shouldFilters != null) {\n      for (int i = 0; i < shouldFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(shouldFilters, i, reader), reader.maxDoc());\n        } else { \n          DocIdSet dis = shouldFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.or((OpenBitSet) dis);\n          } else {\n            res.inPlaceOr(getDISI(shouldFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (notFilters!=null) {\n      for (int i = 0; i < notFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(notFilters, i, reader), reader.maxDoc());\n          res.flip(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        } else {\n          DocIdSet dis = notFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.andNot((OpenBitSet) dis);\n          } else {\n            res.inPlaceNot(getDISI(notFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (mustFilters!=null) {\n      for (int i = 0; i < mustFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(mustFilters, i, reader), reader.maxDoc());\n        } else {\n          DocIdSet dis = mustFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.and((OpenBitSet) dis);\n          } else {\n            res.inPlaceAnd(getDISI(mustFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (res !=null)\n      return res;\n\n    return DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#getDocIdSet(IndexReader).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException\n  {\n    OpenBitSetDISI res = null;\n  \n    if (shouldFilters != null) {\n      for (int i = 0; i < shouldFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(shouldFilters, i, reader), reader.maxDoc());\n        } else { \n          DocIdSet dis = shouldFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.or((OpenBitSet) dis);\n          } else {\n            res.inPlaceOr(getDISI(shouldFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (notFilters!=null) {\n      for (int i = 0; i < notFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(notFilters, i, reader), reader.maxDoc());\n          res.flip(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        } else {\n          DocIdSet dis = notFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.andNot((OpenBitSet) dis);\n          } else {\n            res.inPlaceNot(getDISI(notFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (mustFilters!=null) {\n      for (int i = 0; i < mustFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(mustFilters, i, reader), reader.maxDoc());\n        } else {\n          DocIdSet dis = mustFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.and((OpenBitSet) dis);\n          } else {\n            res.inPlaceAnd(getDISI(mustFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (res !=null)\n      return res;\n\n    return DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#getDocIdSet(IndexReader).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException\n  {\n    OpenBitSetDISI res = null;\n  \n    if (shouldFilters != null) {\n      for (int i = 0; i < shouldFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(shouldFilters, i, reader), reader.maxDoc());\n        } else { \n          DocIdSet dis = shouldFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.or((OpenBitSet) dis);\n          } else {\n            res.inPlaceOr(getDISI(shouldFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (notFilters!=null) {\n      for (int i = 0; i < notFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(notFilters, i, reader), reader.maxDoc());\n          res.flip(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        } else {\n          DocIdSet dis = notFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.andNot((OpenBitSet) dis);\n          } else {\n            res.inPlaceNot(getDISI(notFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (mustFilters!=null) {\n      for (int i = 0; i < mustFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(mustFilters, i, reader), reader.maxDoc());\n        } else {\n          DocIdSet dis = mustFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.and((OpenBitSet) dis);\n          } else {\n            res.inPlaceAnd(getDISI(mustFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (res !=null)\n      return res;\n\n    return DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"3bb13258feba31ab676502787ab2e1779f129b7a":["9454a6510e2db155fb01faa5c049b06ece95fab9","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["2dadf0f3286a34a0fee6e788ffce88624bf2984e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}