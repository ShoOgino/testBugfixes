{"path":"src/test/org/apache/lucene/collation/CollationTestBase#encodeCollationKey(byte[]).mjava","commits":[{"id":"4275990669802f4c50b4de5d3252a0987854ad68","date":1260360486,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"src/test/org/apache/lucene/collation/CollationTestBase#encodeCollationKey(byte[]).mjava","pathOld":"contrib/collation/src/test/org/apache/lucene/collation/CollationTestBase#encodeCollationKey(byte[]).mjava","sourceNew":"  /**\n   * Convenience method to perform the same function as CollationKeyFilter.\n   *  \n   * @param keyBits the result from \n   *  collator.getCollationKey(original).toByteArray()\n   * @return The encoded collation key for the original String\n   */\n  protected String encodeCollationKey(byte[] keyBits) {\n    ByteBuffer begBuf = ByteBuffer.wrap(keyBits);\n    // Ensure that the backing char[] array is large enough to hold the encoded\n    // Binary String\n    char[] encodedBegArray \n      = new char[IndexableBinaryStringTools.getEncodedLength(begBuf)];\n    CharBuffer encodedBegBuf = CharBuffer.wrap(encodedBegArray); \n    IndexableBinaryStringTools.encode(begBuf, encodedBegBuf);\n    return new String(encodedBegArray);\n  }\n\n","sourceOld":"  /**\n   * Convenience method to perform the same function as CollationKeyFilter.\n   *  \n   * @param keyBits the result from \n   *  collator.getCollationKey(original).toByteArray()\n   * @return The encoded collation key for the original String\n   */\n  protected String encodeCollationKey(byte[] keyBits) {\n    ByteBuffer begBuf = ByteBuffer.wrap(keyBits);\n    // Ensure that the backing char[] array is large enough to hold the encoded\n    // Binary String\n    char[] encodedBegArray \n      = new char[IndexableBinaryStringTools.getEncodedLength(begBuf)];\n    CharBuffer encodedBegBuf = CharBuffer.wrap(encodedBegArray); \n    IndexableBinaryStringTools.encode(begBuf, encodedBegBuf);\n    return new String(encodedBegArray);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/collation/CollationTestBase#encodeCollationKey(byte[]).mjava","pathOld":"src/test/org/apache/lucene/collation/CollationTestBase#encodeCollationKey(byte[]).mjava","sourceNew":"  /**\n   * Convenience method to perform the same function as CollationKeyFilter.\n   *  \n   * @param keyBits the result from \n   *  collator.getCollationKey(original).toByteArray()\n   * @return The encoded collation key for the original String\n   */\n  protected String encodeCollationKey(byte[] keyBits) {\n    // Ensure that the backing char[] array is large enough to hold the encoded\n    // Binary String\n    int encodedLength = IndexableBinaryStringTools.getEncodedLength(keyBits, 0, keyBits.length);\n    char[] encodedBegArray = new char[encodedLength];\n    IndexableBinaryStringTools.encode(keyBits, 0, keyBits.length, encodedBegArray, 0, encodedLength);\n    return new String(encodedBegArray);\n  }\n\n","sourceOld":"  /**\n   * Convenience method to perform the same function as CollationKeyFilter.\n   *  \n   * @param keyBits the result from \n   *  collator.getCollationKey(original).toByteArray()\n   * @return The encoded collation key for the original String\n   */\n  protected String encodeCollationKey(byte[] keyBits) {\n    ByteBuffer begBuf = ByteBuffer.wrap(keyBits);\n    // Ensure that the backing char[] array is large enough to hold the encoded\n    // Binary String\n    char[] encodedBegArray \n      = new char[IndexableBinaryStringTools.getEncodedLength(begBuf)];\n    CharBuffer encodedBegBuf = CharBuffer.wrap(encodedBegArray); \n    IndexableBinaryStringTools.encode(begBuf, encodedBegBuf);\n    return new String(encodedBegArray);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/collation/CollationTestBase#encodeCollationKey(byte[]).mjava","pathOld":"src/test/org/apache/lucene/collation/CollationTestBase#encodeCollationKey(byte[]).mjava","sourceNew":"  /**\n   * Convenience method to perform the same function as CollationKeyFilter.\n   *  \n   * @param keyBits the result from \n   *  collator.getCollationKey(original).toByteArray()\n   * @return The encoded collation key for the original String\n   */\n  protected String encodeCollationKey(byte[] keyBits) {\n    // Ensure that the backing char[] array is large enough to hold the encoded\n    // Binary String\n    int encodedLength = IndexableBinaryStringTools.getEncodedLength(keyBits, 0, keyBits.length);\n    char[] encodedBegArray = new char[encodedLength];\n    IndexableBinaryStringTools.encode(keyBits, 0, keyBits.length, encodedBegArray, 0, encodedLength);\n    return new String(encodedBegArray);\n  }\n\n","sourceOld":"  /**\n   * Convenience method to perform the same function as CollationKeyFilter.\n   *  \n   * @param keyBits the result from \n   *  collator.getCollationKey(original).toByteArray()\n   * @return The encoded collation key for the original String\n   */\n  protected String encodeCollationKey(byte[] keyBits) {\n    // Ensure that the backing char[] array is large enough to hold the encoded\n    // Binary String\n    int encodedLength = IndexableBinaryStringTools.getEncodedLength(keyBits, 0, keyBits.length);\n    char[] encodedBegArray = new char[encodedLength];\n    IndexableBinaryStringTools.encode(keyBits, 0, keyBits.length, encodedBegArray, 0, encodedLength);\n    return new String(encodedBegArray);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4275990669802f4c50b4de5d3252a0987854ad68":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["4275990669802f4c50b4de5d3252a0987854ad68"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"4275990669802f4c50b4de5d3252a0987854ad68":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4275990669802f4c50b4de5d3252a0987854ad68"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}