{"path":"lucene/src/test/org/apache/lucene/util/_TestUtil#[T]_assertAttributeReflection(AttributeImpl,Map[String,T]).mjava","commits":[{"id":"ec58fb7921964848d01bea54f8ec4a2ac813eaeb","date":1295476876,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/_TestUtil#[T]_assertAttributeReflection(AttributeImpl,Map[String,T]).mjava","pathOld":"/dev/null","sourceNew":"  /** Checks some basic behaviour of an AttributeImpl\n   * @param reflectedValues contains a map with \"AttributeClass#key\" as values\n   */\n  public static <T> void assertAttributeReflection(final AttributeImpl att, Map<String,T> reflectedValues) {\n    final Map<String,Object> map = new HashMap<String,Object>();\n    att.reflectWith(new AttributeReflector() {\n      public void reflect(Class<? extends Attribute> attClass, String key, Object value) {\n        map.put(attClass.getName() + '#' + key, value);\n      }\n    });\n    Assert.assertEquals(\"Reflection does not produce same map\", reflectedValues, map);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/_TestUtil#[T]_assertAttributeReflection(AttributeImpl,Map[String,T]).mjava","pathOld":"/dev/null","sourceNew":"  /** Checks some basic behaviour of an AttributeImpl\n   * @param reflectedValues contains a map with \"AttributeClass#key\" as values\n   */\n  public static <T> void assertAttributeReflection(final AttributeImpl att, Map<String,T> reflectedValues) {\n    final Map<String,Object> map = new HashMap<String,Object>();\n    att.reflectWith(new AttributeReflector() {\n      public void reflect(Class<? extends Attribute> attClass, String key, Object value) {\n        map.put(attClass.getName() + '#' + key, value);\n      }\n    });\n    Assert.assertEquals(\"Reflection does not produce same map\", reflectedValues, map);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#[T]_assertAttributeReflection(AttributeImpl,Map[String,T]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/_TestUtil#[T]_assertAttributeReflection(AttributeImpl,Map[String,T]).mjava","sourceNew":"  /** Checks some basic behaviour of an AttributeImpl\n   * @param reflectedValues contains a map with \"AttributeClass#key\" as values\n   */\n  public static <T> void assertAttributeReflection(final AttributeImpl att, Map<String,T> reflectedValues) {\n    final Map<String,Object> map = new HashMap<String,Object>();\n    att.reflectWith(new AttributeReflector() {\n      public void reflect(Class<? extends Attribute> attClass, String key, Object value) {\n        map.put(attClass.getName() + '#' + key, value);\n      }\n    });\n    Assert.assertEquals(\"Reflection does not produce same map\", reflectedValues, map);\n  }\n\n","sourceOld":"  /** Checks some basic behaviour of an AttributeImpl\n   * @param reflectedValues contains a map with \"AttributeClass#key\" as values\n   */\n  public static <T> void assertAttributeReflection(final AttributeImpl att, Map<String,T> reflectedValues) {\n    final Map<String,Object> map = new HashMap<String,Object>();\n    att.reflectWith(new AttributeReflector() {\n      public void reflect(Class<? extends Attribute> attClass, String key, Object value) {\n        map.put(attClass.getName() + '#' + key, value);\n      }\n    });\n    Assert.assertEquals(\"Reflection does not produce same map\", reflectedValues, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#[T]_assertAttributeReflection(AttributeImpl,Map[String,T]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/_TestUtil#[T]_assertAttributeReflection(AttributeImpl,Map[String,T]).mjava","sourceNew":"  /** Checks some basic behaviour of an AttributeImpl\n   * @param reflectedValues contains a map with \"AttributeClass#key\" as values\n   */\n  public static <T> void assertAttributeReflection(final AttributeImpl att, Map<String,T> reflectedValues) {\n    final Map<String,Object> map = new HashMap<String,Object>();\n    att.reflectWith(new AttributeReflector() {\n      public void reflect(Class<? extends Attribute> attClass, String key, Object value) {\n        map.put(attClass.getName() + '#' + key, value);\n      }\n    });\n    Assert.assertEquals(\"Reflection does not produce same map\", reflectedValues, map);\n  }\n\n","sourceOld":"  /** Checks some basic behaviour of an AttributeImpl\n   * @param reflectedValues contains a map with \"AttributeClass#key\" as values\n   */\n  public static <T> void assertAttributeReflection(final AttributeImpl att, Map<String,T> reflectedValues) {\n    final Map<String,Object> map = new HashMap<String,Object>();\n    att.reflectWith(new AttributeReflector() {\n      public void reflect(Class<? extends Attribute> attClass, String key, Object value) {\n        map.put(attClass.getName() + '#' + key, value);\n      }\n    });\n    Assert.assertEquals(\"Reflection does not produce same map\", reflectedValues, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ec58fb7921964848d01bea54f8ec4a2ac813eaeb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ec58fb7921964848d01bea54f8ec4a2ac813eaeb"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["e79a6d080bdd5b2a8f56342cf571b5476de04180","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["ec58fb7921964848d01bea54f8ec4a2ac813eaeb"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec58fb7921964848d01bea54f8ec4a2ac813eaeb","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"ec58fb7921964848d01bea54f8ec4a2ac813eaeb":["e79a6d080bdd5b2a8f56342cf571b5476de04180","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}