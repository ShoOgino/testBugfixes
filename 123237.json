{"path":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","sourceNew":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(r3 instanceof ReadOnlyDirectoryReader);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(r2 instanceof ReadOnlyDirectoryReader);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(subs[0] instanceof ReadOnlySegmentReader);\n    assertTrue(subs[1] instanceof ReadOnlySegmentReader);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(r3 instanceof ReadOnlyDirectoryReader);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(r2 instanceof ReadOnlyDirectoryReader);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(subs[0] instanceof ReadOnlySegmentReader);\n    assertTrue(subs[1] instanceof ReadOnlySegmentReader);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","sourceNew":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(r3 instanceof ReadOnlyDirectoryReader);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(r2 instanceof ReadOnlyDirectoryReader);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(subs[0] instanceof ReadOnlySegmentReader);\n    assertTrue(subs[1] instanceof ReadOnlySegmentReader);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(r3 instanceof ReadOnlyDirectoryReader);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(r2 instanceof ReadOnlyDirectoryReader);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(subs[0] instanceof ReadOnlySegmentReader);\n    assertTrue(subs[1] instanceof ReadOnlySegmentReader);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","sourceNew":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(-1));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(r3 instanceof ReadOnlyDirectoryReader);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(r2 instanceof ReadOnlyDirectoryReader);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(subs[0] instanceof ReadOnlySegmentReader);\n    assertTrue(subs[1] instanceof ReadOnlySegmentReader);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(r3 instanceof ReadOnlyDirectoryReader);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(r2 instanceof ReadOnlyDirectoryReader);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(subs[0] instanceof ReadOnlySegmentReader);\n    assertTrue(subs[1] instanceof ReadOnlySegmentReader);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","sourceNew":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = newDirectory(random);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(-1));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(r3 instanceof ReadOnlyDirectoryReader);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(r2 instanceof ReadOnlyDirectoryReader);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(subs[0] instanceof ReadOnlySegmentReader);\n    assertTrue(subs[1] instanceof ReadOnlySegmentReader);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(-1));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(r3 instanceof ReadOnlyDirectoryReader);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(r2 instanceof ReadOnlyDirectoryReader);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(subs[0] instanceof ReadOnlySegmentReader);\n    assertTrue(subs[1] instanceof ReadOnlySegmentReader);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"406e7055a3e99d3fa6ce49a555a51dd18b321806","date":1282520243,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","sourceNew":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = newDirectory(random);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(-1));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(((DirectoryReader) r3).readOnly);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(((DirectoryReader) r2).readOnly);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(((SegmentReader) subs[0]).readOnly);\n    assertTrue(((SegmentReader) subs[1]).readOnly);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = newDirectory(random);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(-1));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(r3 instanceof ReadOnlyDirectoryReader);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(r2 instanceof ReadOnlyDirectoryReader);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(subs[0] instanceof ReadOnlySegmentReader);\n    assertTrue(subs[1] instanceof ReadOnlySegmentReader);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":["c302627a03bb83cf186ac5d7d3239e0c764f4432","0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","sourceNew":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(-1));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(((DirectoryReader) r3).readOnly);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(((DirectoryReader) r2).readOnly);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(((SegmentReader) subs[0]).readOnly);\n    assertTrue(((SegmentReader) subs[1]).readOnly);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = newDirectory(random);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(-1));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(((DirectoryReader) r3).readOnly);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(((DirectoryReader) r2).readOnly);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(((SegmentReader) subs[0]).readOnly);\n    assertTrue(((SegmentReader) subs[1]).readOnly);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","sourceNew":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(-1));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(((DirectoryReader) r3).readOnly);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(((DirectoryReader) r2).readOnly);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(((SegmentReader) subs[0]).readOnly);\n    assertTrue(((SegmentReader) subs[1]).readOnly);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(-1));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(((DirectoryReader) r3).readOnly);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(((DirectoryReader) r2).readOnly);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(((SegmentReader) subs[0]).readOnly);\n    assertTrue(((SegmentReader) subs[1]).readOnly);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","sourceNew":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(((DirectoryReader) r3).readOnly);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(((DirectoryReader) r2).readOnly);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(((SegmentReader) subs[0]).readOnly);\n    assertTrue(((SegmentReader) subs[1]).readOnly);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(-1));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(((DirectoryReader) r3).readOnly);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(((DirectoryReader) r2).readOnly);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(((SegmentReader) subs[0]).readOnly);\n    assertTrue(((SegmentReader) subs[1]).readOnly);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","sourceNew":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(((DirectoryReader) r3).readOnly);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(((DirectoryReader) r2).readOnly);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(((SegmentReader) subs[0]).readOnly);\n    assertTrue(((SegmentReader) subs[1]).readOnly);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(-1));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(10);\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(((DirectoryReader) r3).readOnly);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(((DirectoryReader) r2).readOnly);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(((SegmentReader) subs[0]).readOnly);\n    assertTrue(((SegmentReader) subs[1]).readOnly);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","sourceNew":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(((DirectoryReader) r3).readOnly);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(((DirectoryReader) r2).readOnly);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(((SegmentReader) subs[0]).readOnly);\n    assertTrue(((SegmentReader) subs[1]).readOnly);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = SegmentReader.getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(r3 instanceof ReadOnlyDirectoryReader);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(r2 instanceof ReadOnlyDirectoryReader);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(subs[0] instanceof ReadOnlySegmentReader);\n    assertTrue(subs[1] instanceof ReadOnlySegmentReader);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","sourceNew":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(((DirectoryReader) r3).readOnly);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(((DirectoryReader) r2).readOnly);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(((SegmentReader) subs[0]).readOnly);\n    assertTrue(((SegmentReader) subs[1]).readOnly);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(((DirectoryReader) r3).readOnly);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(((DirectoryReader) r2).readOnly);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(((SegmentReader) subs[0]).readOnly);\n    assertTrue(((SegmentReader) subs[1]).readOnly);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","sourceNew":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(((DirectoryReader) r3).readOnly);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(((DirectoryReader) r2).readOnly);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(((SegmentReader) subs[0]).readOnly);\n    assertTrue(((SegmentReader) subs[1]).readOnly);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(((DirectoryReader) r3).readOnly);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(((DirectoryReader) r2).readOnly);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(((SegmentReader) subs[0]).readOnly);\n    assertTrue(((SegmentReader) subs[1]).readOnly);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","sourceNew":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(((DirectoryReader) r3).readOnly);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(((DirectoryReader) r2).readOnly);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(((SegmentReader) subs[0]).readOnly);\n    assertTrue(((SegmentReader) subs[1]).readOnly);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(((DirectoryReader) r3).readOnly);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(((DirectoryReader) r2).readOnly);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(((SegmentReader) subs[0]).readOnly);\n    assertTrue(((SegmentReader) subs[1]).readOnly);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","sourceNew":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(((DirectoryReader) r3).readOnly);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(((DirectoryReader) r2).readOnly);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(((SegmentReader) subs[0]).readOnly);\n    assertTrue(((SegmentReader) subs[1]).readOnly);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(((DirectoryReader) r3).readOnly);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(((DirectoryReader) r2).readOnly);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(((SegmentReader) subs[0]).readOnly);\n    assertTrue(((SegmentReader) subs[1]).readOnly);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efb7a19703a037c29e30440260d393500febc1f4","date":1306648116,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","sourceNew":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(((DirectoryReader) r3).readOnly);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(((DirectoryReader) r2).readOnly);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(((SegmentReader) subs[0]).readOnly);\n    assertTrue(((SegmentReader) subs[1]).readOnly);\n    assertTrue(ints == ints2);\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(((DirectoryReader) r3).readOnly);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(((DirectoryReader) r2).readOnly);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(((SegmentReader) subs[0]).readOnly);\n    assertTrue(((SegmentReader) subs[1]).readOnly);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","sourceNew":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(((DirectoryReader) r3).readOnly);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(((DirectoryReader) r2).readOnly);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(((SegmentReader) subs[0]).readOnly);\n    assertTrue(((SegmentReader) subs[1]).readOnly);\n    assertTrue(ints == ints2);\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(((DirectoryReader) r3).readOnly);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(((DirectoryReader) r2).readOnly);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(((SegmentReader) subs[0]).readOnly);\n    assertTrue(((SegmentReader) subs[1]).readOnly);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","sourceNew":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(((DirectoryReader) r3).readOnly);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(((DirectoryReader) r2).readOnly);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(((SegmentReader) subs[0]).readOnly);\n    assertTrue(((SegmentReader) subs[1]).readOnly);\n    assertTrue(ints == ints2);\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(((DirectoryReader) r3).readOnly);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(((DirectoryReader) r2).readOnly);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(((SegmentReader) subs[0]).readOnly);\n    assertTrue(((SegmentReader) subs[1]).readOnly);\n    assertTrue(ints == ints2);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenChangeReadonly().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","sourceNew":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(((DirectoryReader) r3).readOnly);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(((DirectoryReader) r2).readOnly);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(((SegmentReader) subs[0]).readOnly);\n    assertTrue(((SegmentReader) subs[1]).readOnly);\n    assertTrue(ints == ints2);\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(((DirectoryReader) r3).readOnly);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(((DirectoryReader) r2).readOnly);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(((SegmentReader) subs[0]).readOnly);\n    assertTrue(((SegmentReader) subs[1]).readOnly);\n    assertTrue(ints == ints2);\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenChangeReadonly().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","sourceNew":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(((DirectoryReader) r3).readOnly);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(((DirectoryReader) r2).readOnly);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(((SegmentReader) subs[0]).readOnly);\n    assertTrue(((SegmentReader) subs[1]).readOnly);\n    assertTrue(ints == ints2);\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(((DirectoryReader) r3).readOnly);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(((DirectoryReader) r2).readOnly);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(((SegmentReader) subs[0]).readOnly);\n    assertTrue(((SegmentReader) subs[1]).readOnly);\n    assertTrue(ints == ints2);\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenChangeReadonly().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReopenChangeReadonly().mjava","sourceNew":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(((DirectoryReader) r3).readOnly);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(((DirectoryReader) r2).readOnly);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(((SegmentReader) subs[0]).readOnly);\n    assertTrue(((SegmentReader) subs[1]).readOnly);\n    assertTrue(ints == ints2);\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1579: Make sure all SegmentReaders are new when\n  // reopen switches readOnly\n  public void testReopenChangeReadonly() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(-1).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    Document doc = new Document();\n    doc.add(newField(\"number\", \"17\", Field.Store.NO, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Open reader1\n    IndexReader r = IndexReader.open(dir, false);\n    assertTrue(r instanceof DirectoryReader);\n    IndexReader r1 = getOnlySegmentReader(r);\n    final int[] ints = FieldCache.DEFAULT.getInts(r1, \"number\");\n    assertEquals(1, ints.length);\n    assertEquals(17, ints[0]);\n\n    // Reopen to readonly w/ no chnages\n    IndexReader r3 = r.reopen(true);\n    assertTrue(((DirectoryReader) r3).readOnly);\n    r3.close();\n\n    // Add new segment\n    writer.addDocument(doc);\n    writer.commit();\n\n    // Reopen reader1 --> reader2\n    IndexReader r2 = r.reopen(true);\n    r.close();\n    assertTrue(((DirectoryReader) r2).readOnly);\n    IndexReader[] subs = r2.getSequentialSubReaders();\n    final int[] ints2 = FieldCache.DEFAULT.getInts(subs[0], \"number\");\n    r2.close();\n\n    assertTrue(((SegmentReader) subs[0]).readOnly);\n    assertTrue(((SegmentReader) subs[1]).readOnly);\n    assertTrue(ints == ints2);\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["efb7a19703a037c29e30440260d393500febc1f4"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"efb7a19703a037c29e30440260d393500febc1f4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["3bb13258feba31ab676502787ab2e1779f129b7a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","efb7a19703a037c29e30440260d393500febc1f4"],"79c2cb24929f2649a8875fb629086171f914d5ce":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["406e7055a3e99d3fa6ce49a555a51dd18b321806"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4e8cc373c801e54cec75daf9f52792cb4b17f536","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["2e10cb22a8bdb44339e282925a29182bb2f3174d","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"406e7055a3e99d3fa6ce49a555a51dd18b321806":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"3bb13258feba31ab676502787ab2e1779f129b7a":["132903c28af3aa6f67284b78de91c0f0a99488c2","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["135621f3a0670a9394eb563224a3b76cc4dddc0f","efb7a19703a037c29e30440260d393500febc1f4"]},"commit2Childs":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["406e7055a3e99d3fa6ce49a555a51dd18b321806"],"efb7a19703a037c29e30440260d393500febc1f4":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["efb7a19703a037c29e30440260d393500febc1f4","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["79c2cb24929f2649a8875fb629086171f914d5ce"],"79c2cb24929f2649a8875fb629086171f914d5ce":[],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"406e7055a3e99d3fa6ce49a555a51dd18b321806":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"3bb13258feba31ab676502787ab2e1779f129b7a":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","3bb13258feba31ab676502787ab2e1779f129b7a"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["962d04139994fce5193143ef35615499a9a96d78","79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}