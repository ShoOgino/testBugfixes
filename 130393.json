{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testAddNode().mjava","commits":[{"id":"a4422b331d00607258b0ed3e43934306e67764aa","date":1513943901,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testAddNode().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAddNode() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with more than 1 replica per node\n    String collectionName = \"testNodeAdded\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 10, NUM_NODES / 10, NUM_NODES / 10, NUM_NODES / 10);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + waitForState(collectionName, 20 * NUM_NODES, TimeUnit.SECONDS, clusterShape(NUM_NODES / 10, NUM_NODES / 10 * 3)) + \" ms\");\n\n    int numAddNode = NUM_NODES / 5;\n    List<String> addNodesList = new ArrayList<>(numAddNode);\n    for (int i = 0; i < numAddNode; i++) {\n      addNodesList.add(cluster.simAddNode());\n      cluster.getTimeSource().sleep(5000);\n    }\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event\", startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int ignored = 0;\n    int lastIgnoredPos = startedEventPos;\n    for (int i = startedEventPos + 1; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\"))) {\n        if (\"IGNORED\".equals(d.getFieldValue(\"stage_s\"))) {\n          ignored++;\n          lastIgnoredPos = i;\n        }\n      }\n    }\n    assertTrue(\"no IGNORED events\", ignored > 0);\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops?\", cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + waitForState(collectionName, 20 * NUM_NODES, TimeUnit.SECONDS, clusterShape(NUM_NODES / 10, NUM_NODES / 10 * 3)) + \" ms\");\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(150000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_added_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes\", finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    log.info(\"#### System stabilized after \" + TimeUnit.NANOSECONDS.toMillis(delta) + \" ms\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops\", cluster.simGetOpCount(\"MOVEREPLICA\") > 1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d5ef2a9b4062088bd74169faad5ae11897a6d77","date":1516279764,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testAddNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testAddNode().mjava","sourceNew":"  @Test\n  public void testAddNode() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with more than 1 replica per node\n    String collectionName = \"testNodeAdded\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 10, NUM_NODES / 10, NUM_NODES / 10, NUM_NODES / 10);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + waitForState(collectionName, 20 * NUM_NODES, TimeUnit.SECONDS, clusterShape(NUM_NODES / 10, NUM_NODES / 10 * 3)) + \" ms\");\n\n    int numAddNode = NUM_NODES / 5;\n    List<String> addNodesList = new ArrayList<>(numAddNode);\n    for (int i = 0; i < numAddNode; i++) {\n      addNodesList.add(cluster.simAddNode());\n      cluster.getTimeSource().sleep(5000);\n    }\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event\", startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int lastIgnoredPos = startedEventPos;\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops?\", cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + waitForState(collectionName, 20 * NUM_NODES, TimeUnit.SECONDS, clusterShape(NUM_NODES / 10, NUM_NODES / 10 * 3)) + \" ms\");\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(150000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_added_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes\", finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    log.info(\"#### System stabilized after \" + TimeUnit.NANOSECONDS.toMillis(delta) + \" ms\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops\", cluster.simGetOpCount(\"MOVEREPLICA\") > 1);\n  }\n\n","sourceOld":"  @Test\n  public void testAddNode() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with more than 1 replica per node\n    String collectionName = \"testNodeAdded\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 10, NUM_NODES / 10, NUM_NODES / 10, NUM_NODES / 10);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + waitForState(collectionName, 20 * NUM_NODES, TimeUnit.SECONDS, clusterShape(NUM_NODES / 10, NUM_NODES / 10 * 3)) + \" ms\");\n\n    int numAddNode = NUM_NODES / 5;\n    List<String> addNodesList = new ArrayList<>(numAddNode);\n    for (int i = 0; i < numAddNode; i++) {\n      addNodesList.add(cluster.simAddNode());\n      cluster.getTimeSource().sleep(5000);\n    }\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event\", startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int ignored = 0;\n    int lastIgnoredPos = startedEventPos;\n    for (int i = startedEventPos + 1; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\"))) {\n        if (\"IGNORED\".equals(d.getFieldValue(\"stage_s\"))) {\n          ignored++;\n          lastIgnoredPos = i;\n        }\n      }\n    }\n    assertTrue(\"no IGNORED events\", ignored > 0);\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops?\", cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + waitForState(collectionName, 20 * NUM_NODES, TimeUnit.SECONDS, clusterShape(NUM_NODES / 10, NUM_NODES / 10 * 3)) + \" ms\");\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(150000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_added_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes\", finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    log.info(\"#### System stabilized after \" + TimeUnit.NANOSECONDS.toMillis(delta) + \" ms\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops\", cluster.simGetOpCount(\"MOVEREPLICA\") > 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testAddNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testAddNode().mjava","sourceNew":"  @Test\n  public void testAddNode() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with more than 1 replica per node\n    String collectionName = \"testNodeAdded\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 10, NUM_NODES / 10, NUM_NODES / 10, NUM_NODES / 10);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + waitForState(collectionName, 20 * NUM_NODES, TimeUnit.SECONDS, clusterShape(NUM_NODES / 10, NUM_NODES / 10 * 3)) + \" ms\");\n\n    int numAddNode = NUM_NODES / 5;\n    List<String> addNodesList = new ArrayList<>(numAddNode);\n    for (int i = 0; i < numAddNode; i++) {\n      addNodesList.add(cluster.simAddNode());\n      cluster.getTimeSource().sleep(5000);\n    }\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event\", startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int lastIgnoredPos = startedEventPos;\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops?\", cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + waitForState(collectionName, 20 * NUM_NODES, TimeUnit.SECONDS, clusterShape(NUM_NODES / 10, NUM_NODES / 10 * 3)) + \" ms\");\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(150000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_added_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes\", finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    log.info(\"#### System stabilized after \" + TimeUnit.NANOSECONDS.toMillis(delta) + \" ms\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops\", cluster.simGetOpCount(\"MOVEREPLICA\") > 1);\n  }\n\n","sourceOld":"  @Test\n  public void testAddNode() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with more than 1 replica per node\n    String collectionName = \"testNodeAdded\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 10, NUM_NODES / 10, NUM_NODES / 10, NUM_NODES / 10);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + waitForState(collectionName, 20 * NUM_NODES, TimeUnit.SECONDS, clusterShape(NUM_NODES / 10, NUM_NODES / 10 * 3)) + \" ms\");\n\n    int numAddNode = NUM_NODES / 5;\n    List<String> addNodesList = new ArrayList<>(numAddNode);\n    for (int i = 0; i < numAddNode; i++) {\n      addNodesList.add(cluster.simAddNode());\n      cluster.getTimeSource().sleep(5000);\n    }\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event\", startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int ignored = 0;\n    int lastIgnoredPos = startedEventPos;\n    for (int i = startedEventPos + 1; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\"))) {\n        if (\"IGNORED\".equals(d.getFieldValue(\"stage_s\"))) {\n          ignored++;\n          lastIgnoredPos = i;\n        }\n      }\n    }\n    assertTrue(\"no IGNORED events\", ignored > 0);\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops?\", cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + waitForState(collectionName, 20 * NUM_NODES, TimeUnit.SECONDS, clusterShape(NUM_NODES / 10, NUM_NODES / 10 * 3)) + \" ms\");\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(150000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_added_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes\", finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    log.info(\"#### System stabilized after \" + TimeUnit.NANOSECONDS.toMillis(delta) + \" ms\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops\", cluster.simGetOpCount(\"MOVEREPLICA\") > 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c6c0dad4932399aec99b4818086cb1772773916","date":1520515900,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testAddNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testAddNode().mjava","sourceNew":"  @Test\n  public void testAddNode() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with more than 1 replica per node\n    String collectionName = \"testNodeAdded\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 10, NUM_NODES / 8, NUM_NODES / 8, NUM_NODES / 8);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3)) + \" ms\");\n\n    int numAddNode = NUM_NODES / 5;\n    List<String> addNodesList = new ArrayList<>(numAddNode);\n    for (int i = 0; i < numAddNode; i++) {\n      addNodesList.add(cluster.simAddNode());\n      cluster.getTimeSource().sleep(5000);\n    }\n    boolean await = triggerFiredLatch.await(1000000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"trigger did not fire\", await);\n\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event\", startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int lastIgnoredPos = startedEventPos;\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops?\", cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3)) + \" ms\");\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(150000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_added_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes\", finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    log.info(\"#### System stabilized after \" + TimeUnit.NANOSECONDS.toMillis(delta) + \" ms\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops\", cluster.simGetOpCount(\"MOVEREPLICA\") > 1);\n  }\n\n","sourceOld":"  @Test\n  public void testAddNode() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with more than 1 replica per node\n    String collectionName = \"testNodeAdded\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 10, NUM_NODES / 10, NUM_NODES / 10, NUM_NODES / 10);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + waitForState(collectionName, 20 * NUM_NODES, TimeUnit.SECONDS, clusterShape(NUM_NODES / 10, NUM_NODES / 10 * 3)) + \" ms\");\n\n    int numAddNode = NUM_NODES / 5;\n    List<String> addNodesList = new ArrayList<>(numAddNode);\n    for (int i = 0; i < numAddNode; i++) {\n      addNodesList.add(cluster.simAddNode());\n      cluster.getTimeSource().sleep(5000);\n    }\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event\", startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int lastIgnoredPos = startedEventPos;\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops?\", cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + waitForState(collectionName, 20 * NUM_NODES, TimeUnit.SECONDS, clusterShape(NUM_NODES / 10, NUM_NODES / 10 * 3)) + \" ms\");\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(150000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_added_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes\", finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    log.info(\"#### System stabilized after \" + TimeUnit.NANOSECONDS.toMillis(delta) + \" ms\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops\", cluster.simGetOpCount(\"MOVEREPLICA\") > 1);\n  }\n\n","bugFix":null,"bugIntro":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1294fc81133ad1c53ea75edf471f5bea39621e68","date":1528194755,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testAddNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testAddNode().mjava","sourceNew":"  @Test\n  public void testAddNode() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with more than 1 replica per node\n    String collectionName = \"testNodeAdded\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 10, NUM_NODES / 8, NUM_NODES / 8, NUM_NODES / 8);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3)) + \" ms\");\n\n    // start adding nodes\n    int numAddNode = NUM_NODES / 5;\n    List<String> addNodesList = new ArrayList<>(numAddNode);\n    for (int i = 0; i < numAddNode; i++) {\n      addNodesList.add(cluster.simAddNode());\n      cluster.getTimeSource().sleep(5000);\n    }\n    // wait until at least one event is generated\n    boolean await = triggerFinishedLatch.await(10000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"trigger did not fire\", await);\n\n    // wait until started == finished\n    TimeOut timeOut = new TimeOut(20 * waitForSeconds * NUM_NODES, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (!timeOut.hasTimedOut()) {\n      if (triggerStartedCount.get() == triggerFinishedCount.get()) {\n        break;\n      }\n      timeOut.sleep(1000);\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"did not finish processing all events in time: started=\" + triggerStartedCount.get() + \", finished=\" + triggerFinishedCount.get());\n    }\n\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event\", startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int lastIgnoredPos = startedEventPos;\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops?\", cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3)) + \" ms\");\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(10000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes\", finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    log.info(\"#### System stabilized after \" + TimeUnit.NANOSECONDS.toMillis(delta) + \" ms\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops\", cluster.simGetOpCount(\"MOVEREPLICA\") > 1);\n  }\n\n","sourceOld":"  @Test\n  public void testAddNode() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with more than 1 replica per node\n    String collectionName = \"testNodeAdded\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 10, NUM_NODES / 8, NUM_NODES / 8, NUM_NODES / 8);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3)) + \" ms\");\n\n    int numAddNode = NUM_NODES / 5;\n    List<String> addNodesList = new ArrayList<>(numAddNode);\n    for (int i = 0; i < numAddNode; i++) {\n      addNodesList.add(cluster.simAddNode());\n      cluster.getTimeSource().sleep(5000);\n    }\n    boolean await = triggerFiredLatch.await(1000000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"trigger did not fire\", await);\n\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event\", startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int lastIgnoredPos = startedEventPos;\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops?\", cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3)) + \" ms\");\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(150000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_added_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes\", finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    log.info(\"#### System stabilized after \" + TimeUnit.NANOSECONDS.toMillis(delta) + \" ms\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops\", cluster.simGetOpCount(\"MOVEREPLICA\") > 1);\n  }\n\n","bugFix":null,"bugIntro":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testAddNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testAddNode().mjava","sourceNew":"  @Test\n  public void testAddNode() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with more than 1 replica per node\n    String collectionName = \"testNodeAdded\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 10, NUM_NODES / 8, NUM_NODES / 8, NUM_NODES / 8);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3)) + \" ms\");\n\n    // start adding nodes\n    int numAddNode = NUM_NODES / 5;\n    List<String> addNodesList = new ArrayList<>(numAddNode);\n    for (int i = 0; i < numAddNode; i++) {\n      addNodesList.add(cluster.simAddNode());\n      cluster.getTimeSource().sleep(5000);\n    }\n    // wait until at least one event is generated\n    boolean await = triggerFinishedLatch.await(10000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"trigger did not fire\", await);\n\n    // wait until started == finished\n    TimeOut timeOut = new TimeOut(20 * waitForSeconds * NUM_NODES, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (!timeOut.hasTimedOut()) {\n      if (triggerStartedCount.get() == triggerFinishedCount.get()) {\n        break;\n      }\n      timeOut.sleep(1000);\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"did not finish processing all events in time: started=\" + triggerStartedCount.get() + \", finished=\" + triggerFinishedCount.get());\n    }\n\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event\", startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int lastIgnoredPos = startedEventPos;\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops?\", cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3)) + \" ms\");\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(10000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes\", finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    log.info(\"#### System stabilized after \" + TimeUnit.NANOSECONDS.toMillis(delta) + \" ms\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops\", cluster.simGetOpCount(\"MOVEREPLICA\") > 1);\n  }\n\n","sourceOld":"  @Test\n  public void testAddNode() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with more than 1 replica per node\n    String collectionName = \"testNodeAdded\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 10, NUM_NODES / 8, NUM_NODES / 8, NUM_NODES / 8);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3)) + \" ms\");\n\n    int numAddNode = NUM_NODES / 5;\n    List<String> addNodesList = new ArrayList<>(numAddNode);\n    for (int i = 0; i < numAddNode; i++) {\n      addNodesList.add(cluster.simAddNode());\n      cluster.getTimeSource().sleep(5000);\n    }\n    boolean await = triggerFiredLatch.await(1000000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"trigger did not fire\", await);\n\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event\", startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int lastIgnoredPos = startedEventPos;\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops?\", cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3)) + \" ms\");\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(150000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_added_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes\", finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    log.info(\"#### System stabilized after \" + TimeUnit.NANOSECONDS.toMillis(delta) + \" ms\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops\", cluster.simGetOpCount(\"MOVEREPLICA\") > 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testAddNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testAddNode().mjava","sourceNew":"  @Test\n  public void testAddNode() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with more than 1 replica per node\n    String collectionName = \"testNodeAdded\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 10, NUM_NODES / 8, NUM_NODES / 8, NUM_NODES / 8);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3)) + \" ms\");\n\n    // start adding nodes\n    int numAddNode = NUM_NODES / 5;\n    List<String> addNodesList = new ArrayList<>(numAddNode);\n    for (int i = 0; i < numAddNode; i++) {\n      addNodesList.add(cluster.simAddNode());\n      cluster.getTimeSource().sleep(5000);\n    }\n    // wait until at least one event is generated\n    boolean await = triggerFinishedLatch.await(10000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"trigger did not fire\", await);\n\n    // wait until started == finished\n    TimeOut timeOut = new TimeOut(20 * waitForSeconds * NUM_NODES, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (!timeOut.hasTimedOut()) {\n      if (triggerStartedCount.get() == triggerFinishedCount.get()) {\n        break;\n      }\n      timeOut.sleep(1000);\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"did not finish processing all events in time: started=\" + triggerStartedCount.get() + \", finished=\" + triggerFinishedCount.get());\n    }\n\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event\", startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int lastIgnoredPos = startedEventPos;\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops?\", cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3)) + \" ms\");\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(10000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes\", finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    log.info(\"#### System stabilized after \" + TimeUnit.NANOSECONDS.toMillis(delta) + \" ms\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops\", cluster.simGetOpCount(\"MOVEREPLICA\") > 1);\n  }\n\n","sourceOld":"  @Test\n  public void testAddNode() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with more than 1 replica per node\n    String collectionName = \"testNodeAdded\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 10, NUM_NODES / 8, NUM_NODES / 8, NUM_NODES / 8);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3)) + \" ms\");\n\n    int numAddNode = NUM_NODES / 5;\n    List<String> addNodesList = new ArrayList<>(numAddNode);\n    for (int i = 0; i < numAddNode; i++) {\n      addNodesList.add(cluster.simAddNode());\n      cluster.getTimeSource().sleep(5000);\n    }\n    boolean await = triggerFiredLatch.await(1000000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"trigger did not fire\", await);\n\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event\", startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int lastIgnoredPos = startedEventPos;\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops?\", cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3)) + \" ms\");\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(150000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_added_trigger\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes\", finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    log.info(\"#### System stabilized after \" + TimeUnit.NANOSECONDS.toMillis(delta) + \" ms\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops\", cluster.simGetOpCount(\"MOVEREPLICA\") > 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11d6f92dfa9251d9da6d80ec5963a9cbecc90180","date":1530559969,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testAddNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testAddNode().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  public void testAddNode() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with more than 1 replica per node\n    String collectionName = \"testNodeAdded\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 10, NUM_NODES / 8, NUM_NODES / 8, NUM_NODES / 8);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3)) + \" ms\");\n\n    // start adding nodes\n    int numAddNode = NUM_NODES / 5;\n    List<String> addNodesList = new ArrayList<>(numAddNode);\n    for (int i = 0; i < numAddNode; i++) {\n      addNodesList.add(cluster.simAddNode());\n      cluster.getTimeSource().sleep(5000);\n    }\n    // wait until at least one event is generated\n    boolean await = triggerFinishedLatch.await(10000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"trigger did not fire\", await);\n\n    // wait until started == finished\n    TimeOut timeOut = new TimeOut(20 * waitForSeconds * NUM_NODES, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (!timeOut.hasTimedOut()) {\n      if (triggerStartedCount.get() == triggerFinishedCount.get()) {\n        break;\n      }\n      timeOut.sleep(1000);\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"did not finish processing all events in time: started=\" + triggerStartedCount.get() + \", finished=\" + triggerFinishedCount.get());\n    }\n\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event\", startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int lastIgnoredPos = startedEventPos;\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops?\", cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3)) + \" ms\");\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(10000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes\", finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    log.info(\"#### System stabilized after \" + TimeUnit.NANOSECONDS.toMillis(delta) + \" ms\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops\", cluster.simGetOpCount(\"MOVEREPLICA\") > 1);\n  }\n\n","sourceOld":"  @Test\n  public void testAddNode() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with more than 1 replica per node\n    String collectionName = \"testNodeAdded\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 10, NUM_NODES / 8, NUM_NODES / 8, NUM_NODES / 8);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3)) + \" ms\");\n\n    // start adding nodes\n    int numAddNode = NUM_NODES / 5;\n    List<String> addNodesList = new ArrayList<>(numAddNode);\n    for (int i = 0; i < numAddNode; i++) {\n      addNodesList.add(cluster.simAddNode());\n      cluster.getTimeSource().sleep(5000);\n    }\n    // wait until at least one event is generated\n    boolean await = triggerFinishedLatch.await(10000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"trigger did not fire\", await);\n\n    // wait until started == finished\n    TimeOut timeOut = new TimeOut(20 * waitForSeconds * NUM_NODES, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (!timeOut.hasTimedOut()) {\n      if (triggerStartedCount.get() == triggerFinishedCount.get()) {\n        break;\n      }\n      timeOut.sleep(1000);\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"did not finish processing all events in time: started=\" + triggerStartedCount.get() + \", finished=\" + triggerFinishedCount.get());\n    }\n\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event\", startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int lastIgnoredPos = startedEventPos;\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops?\", cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3)) + \" ms\");\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(10000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes\", finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    log.info(\"#### System stabilized after \" + TimeUnit.NANOSECONDS.toMillis(delta) + \" ms\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops\", cluster.simGetOpCount(\"MOVEREPLICA\") > 1);\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testAddNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testAddNode().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  public void testAddNode() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with more than 1 replica per node\n    String collectionName = \"testNodeAdded\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 10, NUM_NODES / 8, NUM_NODES / 8, NUM_NODES / 8);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3)) + \" ms\");\n\n    // start adding nodes\n    int numAddNode = NUM_NODES / 5;\n    List<String> addNodesList = new ArrayList<>(numAddNode);\n    for (int i = 0; i < numAddNode; i++) {\n      addNodesList.add(cluster.simAddNode());\n      cluster.getTimeSource().sleep(5000);\n    }\n    // wait until at least one event is generated\n    boolean await = triggerFinishedLatch.await(10000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"trigger did not fire\", await);\n\n    // wait until started == finished\n    TimeOut timeOut = new TimeOut(20 * waitForSeconds * NUM_NODES, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (!timeOut.hasTimedOut()) {\n      if (triggerStartedCount.get() == triggerFinishedCount.get()) {\n        break;\n      }\n      timeOut.sleep(1000);\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"did not finish processing all events in time: started=\" + triggerStartedCount.get() + \", finished=\" + triggerFinishedCount.get());\n    }\n\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event\", startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int lastIgnoredPos = startedEventPos;\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops?\", cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3)) + \" ms\");\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(10000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes\", finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    log.info(\"#### System stabilized after \" + TimeUnit.NANOSECONDS.toMillis(delta) + \" ms\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops\", cluster.simGetOpCount(\"MOVEREPLICA\") > 1);\n  }\n\n","sourceOld":"  @Test\n  public void testAddNode() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with more than 1 replica per node\n    String collectionName = \"testNodeAdded\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 10, NUM_NODES / 8, NUM_NODES / 8, NUM_NODES / 8);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3)) + \" ms\");\n\n    // start adding nodes\n    int numAddNode = NUM_NODES / 5;\n    List<String> addNodesList = new ArrayList<>(numAddNode);\n    for (int i = 0; i < numAddNode; i++) {\n      addNodesList.add(cluster.simAddNode());\n      cluster.getTimeSource().sleep(5000);\n    }\n    // wait until at least one event is generated\n    boolean await = triggerFinishedLatch.await(10000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"trigger did not fire\", await);\n\n    // wait until started == finished\n    TimeOut timeOut = new TimeOut(20 * waitForSeconds * NUM_NODES, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (!timeOut.hasTimedOut()) {\n      if (triggerStartedCount.get() == triggerFinishedCount.get()) {\n        break;\n      }\n      timeOut.sleep(1000);\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"did not finish processing all events in time: started=\" + triggerStartedCount.get() + \", finished=\" + triggerFinishedCount.get());\n    }\n\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event\", startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int lastIgnoredPos = startedEventPos;\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops?\", cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3)) + \" ms\");\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(10000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes\", finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    log.info(\"#### System stabilized after \" + TimeUnit.NANOSECONDS.toMillis(delta) + \" ms\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops\", cluster.simGetOpCount(\"MOVEREPLICA\") > 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testAddNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testAddNode().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  public void testAddNode() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with more than 1 replica per node\n    String collectionName = \"testNodeAdded\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 10, NUM_NODES / 8, NUM_NODES / 8, NUM_NODES / 8);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3)) + \" ms\");\n\n    // start adding nodes\n    int numAddNode = NUM_NODES / 5;\n    List<String> addNodesList = new ArrayList<>(numAddNode);\n    for (int i = 0; i < numAddNode; i++) {\n      addNodesList.add(cluster.simAddNode());\n      cluster.getTimeSource().sleep(5000);\n    }\n    // wait until at least one event is generated\n    boolean await = triggerFinishedLatch.await(10000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"trigger did not fire\", await);\n\n    // wait until started == finished\n    TimeOut timeOut = new TimeOut(20 * waitForSeconds * NUM_NODES, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (!timeOut.hasTimedOut()) {\n      if (triggerStartedCount.get() == triggerFinishedCount.get()) {\n        break;\n      }\n      timeOut.sleep(1000);\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"did not finish processing all events in time: started=\" + triggerStartedCount.get() + \", finished=\" + triggerFinishedCount.get());\n    }\n\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event\", startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int lastIgnoredPos = startedEventPos;\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops?\", cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3)) + \" ms\");\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(10000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes\", finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    log.info(\"#### System stabilized after \" + TimeUnit.NANOSECONDS.toMillis(delta) + \" ms\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops\", cluster.simGetOpCount(\"MOVEREPLICA\") > 1);\n  }\n\n","sourceOld":"  @Test\n  public void testAddNode() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with more than 1 replica per node\n    String collectionName = \"testNodeAdded\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 10, NUM_NODES / 8, NUM_NODES / 8, NUM_NODES / 8);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3)) + \" ms\");\n\n    // start adding nodes\n    int numAddNode = NUM_NODES / 5;\n    List<String> addNodesList = new ArrayList<>(numAddNode);\n    for (int i = 0; i < numAddNode; i++) {\n      addNodesList.add(cluster.simAddNode());\n      cluster.getTimeSource().sleep(5000);\n    }\n    // wait until at least one event is generated\n    boolean await = triggerFinishedLatch.await(10000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"trigger did not fire\", await);\n\n    // wait until started == finished\n    TimeOut timeOut = new TimeOut(20 * waitForSeconds * NUM_NODES, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (!timeOut.hasTimedOut()) {\n      if (triggerStartedCount.get() == triggerFinishedCount.get()) {\n        break;\n      }\n      timeOut.sleep(1000);\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"did not finish processing all events in time: started=\" + triggerStartedCount.get() + \", finished=\" + triggerFinishedCount.get());\n    }\n\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event\", startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int lastIgnoredPos = startedEventPos;\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops?\", cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3)) + \" ms\");\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(10000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes\", finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    log.info(\"#### System stabilized after \" + TimeUnit.NANOSECONDS.toMillis(delta) + \" ms\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops\", cluster.simGetOpCount(\"MOVEREPLICA\") > 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"042b92cf48996255bedb0c3c4bf772d7e06e4dea","date":1534272102,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testAddNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testAddNode().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  public void testAddNode() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with more than 1 replica per node\n    String collectionName = \"testNodeAdded\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 10, NUM_NODES / 8, NUM_NODES / 8, NUM_NODES / 8);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)) + \" ms\");\n\n    // start adding nodes\n    int numAddNode = NUM_NODES / 5;\n    List<String> addNodesList = new ArrayList<>(numAddNode);\n    for (int i = 0; i < numAddNode; i++) {\n      addNodesList.add(cluster.simAddNode());\n      cluster.getTimeSource().sleep(5000);\n    }\n    // wait until at least one event is generated\n    boolean await = triggerStartedLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"trigger did not fire\", await);\n\n    // wait until started == finished\n    TimeOut timeOut = new TimeOut(20 * waitForSeconds * NUM_NODES, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (!timeOut.hasTimedOut()) {\n      if (triggerStartedCount.get() == triggerFinishedCount.get()) {\n        break;\n      }\n      timeOut.sleep(1000);\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"did not finish processing all events in time: started=\" + triggerStartedCount.get() + \", finished=\" + triggerFinishedCount.get());\n    }\n\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event\", startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int lastIgnoredPos = startedEventPos;\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops?\", cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)) + \" ms\");\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(10000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes\", finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    log.info(\"#### System stabilized after \" + TimeUnit.NANOSECONDS.toMillis(delta) + \" ms\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops\", cluster.simGetOpCount(\"MOVEREPLICA\") > 1);\n  }\n\n","sourceOld":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  public void testAddNode() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with more than 1 replica per node\n    String collectionName = \"testNodeAdded\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 10, NUM_NODES / 8, NUM_NODES / 8, NUM_NODES / 8);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3)) + \" ms\");\n\n    // start adding nodes\n    int numAddNode = NUM_NODES / 5;\n    List<String> addNodesList = new ArrayList<>(numAddNode);\n    for (int i = 0; i < numAddNode; i++) {\n      addNodesList.add(cluster.simAddNode());\n      cluster.getTimeSource().sleep(5000);\n    }\n    // wait until at least one event is generated\n    boolean await = triggerFinishedLatch.await(10000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"trigger did not fire\", await);\n\n    // wait until started == finished\n    TimeOut timeOut = new TimeOut(20 * waitForSeconds * NUM_NODES, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (!timeOut.hasTimedOut()) {\n      if (triggerStartedCount.get() == triggerFinishedCount.get()) {\n        break;\n      }\n      timeOut.sleep(1000);\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"did not finish processing all events in time: started=\" + triggerStartedCount.get() + \", finished=\" + triggerFinishedCount.get());\n    }\n\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event\", startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int lastIgnoredPos = startedEventPos;\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops?\", cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3)) + \" ms\");\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(10000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes\", finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    log.info(\"#### System stabilized after \" + TimeUnit.NANOSECONDS.toMillis(delta) + \" ms\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops\", cluster.simGetOpCount(\"MOVEREPLICA\") > 1);\n  }\n\n","bugFix":["9c6c0dad4932399aec99b4818086cb1772773916","1294fc81133ad1c53ea75edf471f5bea39621e68"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimLargeCluster#testAddNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestLargeCluster#testAddNode().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  public void testAddNode() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with more than 1 replica per node\n    String collectionName = \"testNodeAdded\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 10, NUM_NODES / 8, NUM_NODES / 8, NUM_NODES / 8);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)) + \" ms\");\n\n    // start adding nodes\n    int numAddNode = NUM_NODES / 5;\n    List<String> addNodesList = new ArrayList<>(numAddNode);\n    for (int i = 0; i < numAddNode; i++) {\n      addNodesList.add(cluster.simAddNode());\n      cluster.getTimeSource().sleep(5000);\n    }\n    // wait until at least one event is generated\n    boolean await = triggerStartedLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"trigger did not fire\", await);\n\n    // wait until started == finished\n    TimeOut timeOut = new TimeOut(20 * waitForSeconds * NUM_NODES, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (!timeOut.hasTimedOut()) {\n      if (triggerStartedCount.get() == triggerFinishedCount.get()) {\n        break;\n      }\n      timeOut.sleep(1000);\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"did not finish processing all events in time: started=\" + triggerStartedCount.get() + \", finished=\" + triggerFinishedCount.get());\n    }\n\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event\", startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int lastIgnoredPos = startedEventPos;\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops?\", cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)) + \" ms\");\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(10000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes\", finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    log.info(\"#### System stabilized after \" + TimeUnit.NANOSECONDS.toMillis(delta) + \" ms\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops\", cluster.simGetOpCount(\"MOVEREPLICA\") > 1);\n  }\n\n","sourceOld":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  public void testAddNode() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'start','class':'\" + StartTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + FinishTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // create a collection with more than 1 replica per node\n    String collectionName = \"testNodeAdded\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", NUM_NODES / 10, NUM_NODES / 8, NUM_NODES / 8, NUM_NODES / 8);\n    create.setMaxShardsPerNode(5);\n    create.setAutoAddReplicas(false);\n    create.process(solrClient);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)) + \" ms\");\n\n    // start adding nodes\n    int numAddNode = NUM_NODES / 5;\n    List<String> addNodesList = new ArrayList<>(numAddNode);\n    for (int i = 0; i < numAddNode; i++) {\n      addNodesList.add(cluster.simAddNode());\n      cluster.getTimeSource().sleep(5000);\n    }\n    // wait until at least one event is generated\n    boolean await = triggerStartedLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"trigger did not fire\", await);\n\n    // wait until started == finished\n    TimeOut timeOut = new TimeOut(20 * waitForSeconds * NUM_NODES, TimeUnit.SECONDS, cluster.getTimeSource());\n    while (!timeOut.hasTimedOut()) {\n      if (triggerStartedCount.get() == triggerFinishedCount.get()) {\n        break;\n      }\n      timeOut.sleep(1000);\n    }\n    if (timeOut.hasTimedOut()) {\n      fail(\"did not finish processing all events in time: started=\" + triggerStartedCount.get() + \", finished=\" + triggerFinishedCount.get());\n    }\n\n    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();\n    int startedEventPos = -1;\n    for (int i = 0; i < systemColl.size(); i++) {\n      SolrInputDocument d = systemColl.get(i);\n      if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n        continue;\n      }\n      if (\"NODEADDED\".equals(d.getFieldValue(\"event.type_s\")) &&\n          \"STARTED\".equals(d.getFieldValue(\"stage_s\"))) {\n        startedEventPos = i;\n        break;\n      }\n    }\n    assertTrue(\"no STARTED event\", startedEventPos > -1);\n    SolrInputDocument startedEvent = systemColl.get(startedEventPos);\n    int lastIgnoredPos = startedEventPos;\n    // make sure some replicas have been moved\n    assertTrue(\"no MOVEREPLICA ops?\", cluster.simGetOpCount(\"MOVEREPLICA\") > 0);\n\n    log.info(\"Ready after \" + CloudTestUtils.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)) + \" ms\");\n\n    int count = 50;\n    SolrInputDocument finishedEvent = null;\n    long lastNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n    while (count-- > 0) {\n      cluster.getTimeSource().sleep(10000);\n      long currentNumOps = cluster.simGetOpCount(\"MOVEREPLICA\");\n      if (currentNumOps == lastNumOps) {\n        int size = systemColl.size() - 1;\n        for (int i = size; i > lastIgnoredPos; i--) {\n          SolrInputDocument d = systemColl.get(i);\n          if (!\"node_added_trigger2\".equals(d.getFieldValue(\"event.source_s\"))) {\n            continue;\n          }\n          if (\"SUCCEEDED\".equals(d.getFieldValue(\"stage_s\"))) {\n            finishedEvent = d;\n            break;\n          }\n        }\n        break;\n      } else {\n        lastNumOps = currentNumOps;\n      }\n    }\n\n    assertTrue(\"did not finish processing changes\", finishedEvent != null);\n    long delta = (Long)finishedEvent.getFieldValue(\"event.time_l\") - (Long)startedEvent.getFieldValue(\"event.time_l\");\n    log.info(\"#### System stabilized after \" + TimeUnit.NANOSECONDS.toMillis(delta) + \" ms\");\n    assertTrue(\"unexpected number of MOVEREPLICA ops\", cluster.simGetOpCount(\"MOVEREPLICA\") > 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"b94236357aaa22b76c10629851fe4e376e0cea82":["a4422b331d00607258b0ed3e43934306e67764aa","0d5ef2a9b4062088bd74169faad5ae11897a6d77"],"1294fc81133ad1c53ea75edf471f5bea39621e68":["9c6c0dad4932399aec99b4818086cb1772773916"],"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["11d6f92dfa9251d9da6d80ec5963a9cbecc90180"],"9c6c0dad4932399aec99b4818086cb1772773916":["b94236357aaa22b76c10629851fe4e376e0cea82"],"11d6f92dfa9251d9da6d80ec5963a9cbecc90180":["1294fc81133ad1c53ea75edf471f5bea39621e68"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["b70042a8a492f7054d480ccdd2be9796510d4327","11d6f92dfa9251d9da6d80ec5963a9cbecc90180"],"0d5ef2a9b4062088bd74169faad5ae11897a6d77":["a4422b331d00607258b0ed3e43934306e67764aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["9c6c0dad4932399aec99b4818086cb1772773916","1294fc81133ad1c53ea75edf471f5bea39621e68"],"a4422b331d00607258b0ed3e43934306e67764aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f592209545c71895260367152601e9200399776d":["9c6c0dad4932399aec99b4818086cb1772773916","1294fc81133ad1c53ea75edf471f5bea39621e68"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["f592209545c71895260367152601e9200399776d","11d6f92dfa9251d9da6d80ec5963a9cbecc90180"]},"commit2Childs":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b94236357aaa22b76c10629851fe4e376e0cea82":["9c6c0dad4932399aec99b4818086cb1772773916"],"1294fc81133ad1c53ea75edf471f5bea39621e68":["11d6f92dfa9251d9da6d80ec5963a9cbecc90180","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"9c6c0dad4932399aec99b4818086cb1772773916":["1294fc81133ad1c53ea75edf471f5bea39621e68","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"11d6f92dfa9251d9da6d80ec5963a9cbecc90180":["042b92cf48996255bedb0c3c4bf772d7e06e4dea","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"0d5ef2a9b4062088bd74169faad5ae11897a6d77":["b94236357aaa22b76c10629851fe4e376e0cea82"],"b70042a8a492f7054d480ccdd2be9796510d4327":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a4422b331d00607258b0ed3e43934306e67764aa"],"a4422b331d00607258b0ed3e43934306e67764aa":["b94236357aaa22b76c10629851fe4e376e0cea82","0d5ef2a9b4062088bd74169faad5ae11897a6d77"],"f592209545c71895260367152601e9200399776d":["7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}