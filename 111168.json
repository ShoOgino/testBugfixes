{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#buildReplicaPositions(SolrCloudManager,ClusterState,ZkNodeProps,List[String],List[String],AtomicReference[PolicyHelper.SessionWrapper]).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#buildReplicaPositions(SolrCloudManager,ClusterState,ZkNodeProps,List[String],List[String],AtomicReference[PolicyHelper.SessionWrapper]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#buildReplicaPositions(SolrCloudManager,ClusterState,ZkNodeProps,List[String],List[String],AtomicReference[PolicyHelper.SessionWrapper]).mjava","sourceNew":"  public static List<ReplicaPosition> buildReplicaPositions(SolrCloudManager cloudManager, ClusterState clusterState,\n                                                            ZkNodeProps message,\n                                                            List<String> nodeList, List<String> shardNames,\n                                                            AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper) throws IOException, InterruptedException {\n    final String collectionName = message.getStr(NAME);\n    // look at the replication factor and see if it matches reality\n    // if it does not, find best nodes to create more cores\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, 0);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, numTlogReplicas>0?0:1));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, 0);\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n    String policy = message.getStr(Policy.POLICY);\n    boolean usePolicyFramework = !autoScalingConfig.getPolicy().getClusterPolicy().isEmpty() || policy != null;\n\n    Integer numSlices = message.getInt(OverseerCollectionMessageHandler.NUM_SLICES, null);\n    String router = message.getStr(\"router.name\", DocRouter.DEFAULT_NAME);\n    if(ImplicitDocRouter.NAME.equals(router)){\n      ClusterStateMutator.getShardNames(shardNames, message.getStr(\"shards\", null));\n      numSlices = shardNames.size();\n    } else {\n      if (numSlices == null ) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, OverseerCollectionMessageHandler.NUM_SLICES + \" is a required param (when using CompositeId router).\");\n      }\n      if (numSlices <= 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, OverseerCollectionMessageHandler.NUM_SLICES + \" must be > 0\");\n      }\n      ClusterStateMutator.getShardNames(numSlices, shardNames);\n    }\n\n    int maxShardsPerNode = message.getInt(MAX_SHARDS_PER_NODE, 1);\n    if (usePolicyFramework && message.getStr(MAX_SHARDS_PER_NODE) != null && maxShardsPerNode > 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"'maxShardsPerNode>0' is not supported when autoScaling policies are used\");\n    }\n    if (maxShardsPerNode == -1 || usePolicyFramework) maxShardsPerNode = Integer.MAX_VALUE;\n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n\n    // we need to look at every node and see how many cores it serves\n    // add our new cores to existing nodes serving the least number of cores\n    // but (for now) require that each core goes on a distinct node.\n\n    List<ReplicaPosition> replicaPositions;\n    nodeList.addAll(Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, OverseerCollectionMessageHandler.RANDOM));\n    if (nodeList.isEmpty()) {\n      log.warn(\"It is unusual to create a collection (\"+collectionName+\") without cores.\");\n\n      replicaPositions = new ArrayList<>();\n    } else {\n      int totalNumReplicas = numNrtReplicas + numTlogReplicas + numPullReplicas;\n      if (totalNumReplicas > nodeList.size()) {\n        log.warn(\"Specified number of replicas of \"\n            + totalNumReplicas\n            + \" on collection \"\n            + collectionName\n            + \" is higher than the number of Solr instances currently live or live and part of your \" + OverseerCollectionMessageHandler.CREATE_NODE_SET + \"(\"\n            + nodeList.size()\n            + \"). It's unusual to run two replica of the same slice on the same Solr-instance.\");\n      }\n\n      int maxShardsAllowedToCreate = maxShardsPerNode == Integer.MAX_VALUE ?\n          Integer.MAX_VALUE :\n          maxShardsPerNode * nodeList.size();\n      int requestedShardsToCreate = numSlices * totalNumReplicas;\n      if (maxShardsAllowedToCreate < requestedShardsToCreate) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot create collection \" + collectionName + \". Value of \"\n            + MAX_SHARDS_PER_NODE + \" is \" + maxShardsPerNode\n            + \", and the number of nodes currently live or live and part of your \"+OverseerCollectionMessageHandler.CREATE_NODE_SET+\" is \" + nodeList.size()\n            + \". This allows a maximum of \" + maxShardsAllowedToCreate\n            + \" to be created. Value of \" + OverseerCollectionMessageHandler.NUM_SLICES + \" is \" + numSlices\n            + \", value of \" + NRT_REPLICAS + \" is \" + numNrtReplicas\n            + \", value of \" + TLOG_REPLICAS + \" is \" + numTlogReplicas\n            + \" and value of \" + PULL_REPLICAS + \" is \" + numPullReplicas\n            + \". This requires \" + requestedShardsToCreate\n            + \" shards to be created (higher than the allowed number)\");\n      }\n      replicaPositions = Assign.identifyNodes(cloudManager\n          , clusterState, nodeList, collectionName, message, shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas);\n      sessionWrapper.set(PolicyHelper.getLastSessionWrapper(true));\n    }\n    return replicaPositions;\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> buildReplicaPositions(SolrCloudManager cloudManager, ClusterState clusterState,\n                                                            ZkNodeProps message,\n                                                            List<String> nodeList, List<String> shardNames,\n                                                            AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper) throws IOException, InterruptedException {\n    final String collectionName = message.getStr(NAME);\n    // look at the replication factor and see if it matches reality\n    // if it does not, find best nodes to create more cores\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, 0);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, numTlogReplicas>0?0:1));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, 0);\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n    String policy = message.getStr(Policy.POLICY);\n    boolean usePolicyFramework = !autoScalingConfig.getPolicy().getClusterPolicy().isEmpty() || policy != null;\n\n    Integer numSlices = message.getInt(NUM_SLICES, null);\n    String router = message.getStr(\"router.name\", DocRouter.DEFAULT_NAME);\n    if(ImplicitDocRouter.NAME.equals(router)){\n      ClusterStateMutator.getShardNames(shardNames, message.getStr(\"shards\", null));\n      numSlices = shardNames.size();\n    } else {\n      if (numSlices == null ) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NUM_SLICES + \" is a required param (when using CompositeId router).\");\n      }\n      if (numSlices <= 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NUM_SLICES + \" must be > 0\");\n      }\n      ClusterStateMutator.getShardNames(numSlices, shardNames);\n    }\n\n    int maxShardsPerNode = message.getInt(MAX_SHARDS_PER_NODE, 1);\n    if (usePolicyFramework && message.getStr(MAX_SHARDS_PER_NODE) != null && maxShardsPerNode > 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"'maxShardsPerNode>0' is not supported when autoScaling policies are used\");\n    }\n    if (maxShardsPerNode == -1 || usePolicyFramework) maxShardsPerNode = Integer.MAX_VALUE;\n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n\n    // we need to look at every node and see how many cores it serves\n    // add our new cores to existing nodes serving the least number of cores\n    // but (for now) require that each core goes on a distinct node.\n\n    List<ReplicaPosition> replicaPositions;\n    nodeList.addAll(Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, RANDOM));\n    if (nodeList.isEmpty()) {\n      log.warn(\"It is unusual to create a collection (\"+collectionName+\") without cores.\");\n\n      replicaPositions = new ArrayList<>();\n    } else {\n      int totalNumReplicas = numNrtReplicas + numTlogReplicas + numPullReplicas;\n      if (totalNumReplicas > nodeList.size()) {\n        log.warn(\"Specified number of replicas of \"\n            + totalNumReplicas\n            + \" on collection \"\n            + collectionName\n            + \" is higher than the number of Solr instances currently live or live and part of your \" + CREATE_NODE_SET + \"(\"\n            + nodeList.size()\n            + \"). It's unusual to run two replica of the same slice on the same Solr-instance.\");\n      }\n\n      int maxShardsAllowedToCreate = maxShardsPerNode == Integer.MAX_VALUE ?\n          Integer.MAX_VALUE :\n          maxShardsPerNode * nodeList.size();\n      int requestedShardsToCreate = numSlices * totalNumReplicas;\n      if (maxShardsAllowedToCreate < requestedShardsToCreate) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot create collection \" + collectionName + \". Value of \"\n            + MAX_SHARDS_PER_NODE + \" is \" + maxShardsPerNode\n            + \", and the number of nodes currently live or live and part of your \"+CREATE_NODE_SET+\" is \" + nodeList.size()\n            + \". This allows a maximum of \" + maxShardsAllowedToCreate\n            + \" to be created. Value of \" + NUM_SLICES + \" is \" + numSlices\n            + \", value of \" + NRT_REPLICAS + \" is \" + numNrtReplicas\n            + \", value of \" + TLOG_REPLICAS + \" is \" + numTlogReplicas\n            + \" and value of \" + PULL_REPLICAS + \" is \" + numPullReplicas\n            + \". This requires \" + requestedShardsToCreate\n            + \" shards to be created (higher than the allowed number)\");\n      }\n      replicaPositions = Assign.identifyNodes(cloudManager\n          , clusterState, nodeList, collectionName, message, shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas);\n      sessionWrapper.set(PolicyHelper.getLastSessionWrapper(true));\n    }\n    return replicaPositions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#buildReplicaPositions(SolrCloudManager,ClusterState,ZkNodeProps,List[String],List[String],AtomicReference[PolicyHelper.SessionWrapper]).mjava","pathOld":"/dev/null","sourceNew":"  public static List<ReplicaPosition> buildReplicaPositions(SolrCloudManager cloudManager, ClusterState clusterState,\n                                                            ZkNodeProps message,\n                                                            List<String> nodeList, List<String> shardNames,\n                                                            AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper) throws IOException, InterruptedException {\n    final String collectionName = message.getStr(NAME);\n    // look at the replication factor and see if it matches reality\n    // if it does not, find best nodes to create more cores\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, 0);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, numTlogReplicas>0?0:1));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, 0);\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n    String policy = message.getStr(Policy.POLICY);\n    boolean usePolicyFramework = !autoScalingConfig.getPolicy().getClusterPolicy().isEmpty() || policy != null;\n\n    Integer numSlices = message.getInt(OverseerCollectionMessageHandler.NUM_SLICES, null);\n    String router = message.getStr(\"router.name\", DocRouter.DEFAULT_NAME);\n    if(ImplicitDocRouter.NAME.equals(router)){\n      ClusterStateMutator.getShardNames(shardNames, message.getStr(\"shards\", null));\n      numSlices = shardNames.size();\n    } else {\n      if (numSlices == null ) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, OverseerCollectionMessageHandler.NUM_SLICES + \" is a required param (when using CompositeId router).\");\n      }\n      if (numSlices <= 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, OverseerCollectionMessageHandler.NUM_SLICES + \" must be > 0\");\n      }\n      ClusterStateMutator.getShardNames(numSlices, shardNames);\n    }\n\n    int maxShardsPerNode = message.getInt(MAX_SHARDS_PER_NODE, 1);\n    if (usePolicyFramework && message.getStr(MAX_SHARDS_PER_NODE) != null && maxShardsPerNode > 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"'maxShardsPerNode>0' is not supported when autoScaling policies are used\");\n    }\n    if (maxShardsPerNode == -1 || usePolicyFramework) maxShardsPerNode = Integer.MAX_VALUE;\n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n\n    // we need to look at every node and see how many cores it serves\n    // add our new cores to existing nodes serving the least number of cores\n    // but (for now) require that each core goes on a distinct node.\n\n    List<ReplicaPosition> replicaPositions;\n    nodeList.addAll(Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, OverseerCollectionMessageHandler.RANDOM));\n    if (nodeList.isEmpty()) {\n      log.warn(\"It is unusual to create a collection (\"+collectionName+\") without cores.\");\n\n      replicaPositions = new ArrayList<>();\n    } else {\n      int totalNumReplicas = numNrtReplicas + numTlogReplicas + numPullReplicas;\n      if (totalNumReplicas > nodeList.size()) {\n        log.warn(\"Specified number of replicas of \"\n            + totalNumReplicas\n            + \" on collection \"\n            + collectionName\n            + \" is higher than the number of Solr instances currently live or live and part of your \" + OverseerCollectionMessageHandler.CREATE_NODE_SET + \"(\"\n            + nodeList.size()\n            + \"). It's unusual to run two replica of the same slice on the same Solr-instance.\");\n      }\n\n      int maxShardsAllowedToCreate = maxShardsPerNode == Integer.MAX_VALUE ?\n          Integer.MAX_VALUE :\n          maxShardsPerNode * nodeList.size();\n      int requestedShardsToCreate = numSlices * totalNumReplicas;\n      if (maxShardsAllowedToCreate < requestedShardsToCreate) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot create collection \" + collectionName + \". Value of \"\n            + MAX_SHARDS_PER_NODE + \" is \" + maxShardsPerNode\n            + \", and the number of nodes currently live or live and part of your \"+OverseerCollectionMessageHandler.CREATE_NODE_SET+\" is \" + nodeList.size()\n            + \". This allows a maximum of \" + maxShardsAllowedToCreate\n            + \" to be created. Value of \" + OverseerCollectionMessageHandler.NUM_SLICES + \" is \" + numSlices\n            + \", value of \" + NRT_REPLICAS + \" is \" + numNrtReplicas\n            + \", value of \" + TLOG_REPLICAS + \" is \" + numTlogReplicas\n            + \" and value of \" + PULL_REPLICAS + \" is \" + numPullReplicas\n            + \". This requires \" + requestedShardsToCreate\n            + \" shards to be created (higher than the allowed number)\");\n      }\n      replicaPositions = Assign.identifyNodes(cloudManager\n          , clusterState, nodeList, collectionName, message, shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas);\n      sessionWrapper.set(PolicyHelper.getLastSessionWrapper(true));\n    }\n    return replicaPositions;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"27639bb5e041490ce599065875dd2f6d8beef62a","date":1532829373,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#buildReplicaPositions(SolrCloudManager,ClusterState,ZkNodeProps,List[String],List[String],AtomicReference[PolicyHelper.SessionWrapper]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#buildReplicaPositions(SolrCloudManager,ClusterState,ZkNodeProps,List[String],List[String],AtomicReference[PolicyHelper.SessionWrapper]).mjava","sourceNew":"  public static List<ReplicaPosition> buildReplicaPositions(SolrCloudManager cloudManager, ClusterState clusterState,\n                                                            ZkNodeProps message,\n                                                            List<String> nodeList, List<String> shardNames,\n                                                            AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper) throws IOException, InterruptedException {\n    final String collectionName = message.getStr(NAME);\n    // look at the replication factor and see if it matches reality\n    // if it does not, find best nodes to create more cores\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, 0);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, numTlogReplicas>0?0:1));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, 0);\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n    String policy = message.getStr(Policy.POLICY);\n    boolean usePolicyFramework = !autoScalingConfig.getPolicy().getClusterPolicy().isEmpty() || policy != null;\n\n    Integer numSlices = shardNames.size();\n    int maxShardsPerNode = checkMaxShardsPerNode(message, usePolicyFramework);\n\n    // we need to look at every node and see how many cores it serves\n    // add our new cores to existing nodes serving the least number of cores\n    // but (for now) require that each core goes on a distinct node.\n\n    List<ReplicaPosition> replicaPositions;\n    nodeList.addAll(Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, OverseerCollectionMessageHandler.RANDOM));\n    if (nodeList.isEmpty()) {\n      log.warn(\"It is unusual to create a collection (\"+collectionName+\") without cores.\");\n\n      replicaPositions = new ArrayList<>();\n    } else {\n      int totalNumReplicas = numNrtReplicas + numTlogReplicas + numPullReplicas;\n      if (totalNumReplicas > nodeList.size()) {\n        log.warn(\"Specified number of replicas of \"\n            + totalNumReplicas\n            + \" on collection \"\n            + collectionName\n            + \" is higher than the number of Solr instances currently live or live and part of your \" + OverseerCollectionMessageHandler.CREATE_NODE_SET + \"(\"\n            + nodeList.size()\n            + \"). It's unusual to run two replica of the same slice on the same Solr-instance.\");\n      }\n\n      int maxShardsAllowedToCreate = maxShardsPerNode == Integer.MAX_VALUE ?\n          Integer.MAX_VALUE :\n          maxShardsPerNode * nodeList.size();\n      int requestedShardsToCreate = numSlices * totalNumReplicas;\n      if (maxShardsAllowedToCreate < requestedShardsToCreate) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot create collection \" + collectionName + \". Value of \"\n            + MAX_SHARDS_PER_NODE + \" is \" + maxShardsPerNode\n            + \", and the number of nodes currently live or live and part of your \"+OverseerCollectionMessageHandler.CREATE_NODE_SET+\" is \" + nodeList.size()\n            + \". This allows a maximum of \" + maxShardsAllowedToCreate\n            + \" to be created. Value of \" + OverseerCollectionMessageHandler.NUM_SLICES + \" is \" + numSlices\n            + \", value of \" + NRT_REPLICAS + \" is \" + numNrtReplicas\n            + \", value of \" + TLOG_REPLICAS + \" is \" + numTlogReplicas\n            + \" and value of \" + PULL_REPLICAS + \" is \" + numPullReplicas\n            + \". This requires \" + requestedShardsToCreate\n            + \" shards to be created (higher than the allowed number)\");\n      }\n      replicaPositions = Assign.identifyNodes(cloudManager\n          , clusterState, nodeList, collectionName, message, shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas);\n      sessionWrapper.set(PolicyHelper.getLastSessionWrapper(true));\n    }\n    return replicaPositions;\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> buildReplicaPositions(SolrCloudManager cloudManager, ClusterState clusterState,\n                                                            ZkNodeProps message,\n                                                            List<String> nodeList, List<String> shardNames,\n                                                            AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper) throws IOException, InterruptedException {\n    final String collectionName = message.getStr(NAME);\n    // look at the replication factor and see if it matches reality\n    // if it does not, find best nodes to create more cores\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, 0);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, numTlogReplicas>0?0:1));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, 0);\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n    String policy = message.getStr(Policy.POLICY);\n    boolean usePolicyFramework = !autoScalingConfig.getPolicy().getClusterPolicy().isEmpty() || policy != null;\n\n    Integer numSlices = message.getInt(OverseerCollectionMessageHandler.NUM_SLICES, null);\n    String router = message.getStr(\"router.name\", DocRouter.DEFAULT_NAME);\n    if(ImplicitDocRouter.NAME.equals(router)){\n      ClusterStateMutator.getShardNames(shardNames, message.getStr(\"shards\", null));\n      numSlices = shardNames.size();\n    } else {\n      if (numSlices == null ) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, OverseerCollectionMessageHandler.NUM_SLICES + \" is a required param (when using CompositeId router).\");\n      }\n      if (numSlices <= 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, OverseerCollectionMessageHandler.NUM_SLICES + \" must be > 0\");\n      }\n      ClusterStateMutator.getShardNames(numSlices, shardNames);\n    }\n\n    int maxShardsPerNode = message.getInt(MAX_SHARDS_PER_NODE, 1);\n    if (usePolicyFramework && message.getStr(MAX_SHARDS_PER_NODE) != null && maxShardsPerNode > 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"'maxShardsPerNode>0' is not supported when autoScaling policies are used\");\n    }\n    if (maxShardsPerNode == -1 || usePolicyFramework) maxShardsPerNode = Integer.MAX_VALUE;\n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n\n    // we need to look at every node and see how many cores it serves\n    // add our new cores to existing nodes serving the least number of cores\n    // but (for now) require that each core goes on a distinct node.\n\n    List<ReplicaPosition> replicaPositions;\n    nodeList.addAll(Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, OverseerCollectionMessageHandler.RANDOM));\n    if (nodeList.isEmpty()) {\n      log.warn(\"It is unusual to create a collection (\"+collectionName+\") without cores.\");\n\n      replicaPositions = new ArrayList<>();\n    } else {\n      int totalNumReplicas = numNrtReplicas + numTlogReplicas + numPullReplicas;\n      if (totalNumReplicas > nodeList.size()) {\n        log.warn(\"Specified number of replicas of \"\n            + totalNumReplicas\n            + \" on collection \"\n            + collectionName\n            + \" is higher than the number of Solr instances currently live or live and part of your \" + OverseerCollectionMessageHandler.CREATE_NODE_SET + \"(\"\n            + nodeList.size()\n            + \"). It's unusual to run two replica of the same slice on the same Solr-instance.\");\n      }\n\n      int maxShardsAllowedToCreate = maxShardsPerNode == Integer.MAX_VALUE ?\n          Integer.MAX_VALUE :\n          maxShardsPerNode * nodeList.size();\n      int requestedShardsToCreate = numSlices * totalNumReplicas;\n      if (maxShardsAllowedToCreate < requestedShardsToCreate) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot create collection \" + collectionName + \". Value of \"\n            + MAX_SHARDS_PER_NODE + \" is \" + maxShardsPerNode\n            + \", and the number of nodes currently live or live and part of your \"+OverseerCollectionMessageHandler.CREATE_NODE_SET+\" is \" + nodeList.size()\n            + \". This allows a maximum of \" + maxShardsAllowedToCreate\n            + \" to be created. Value of \" + OverseerCollectionMessageHandler.NUM_SLICES + \" is \" + numSlices\n            + \", value of \" + NRT_REPLICAS + \" is \" + numNrtReplicas\n            + \", value of \" + TLOG_REPLICAS + \" is \" + numTlogReplicas\n            + \" and value of \" + PULL_REPLICAS + \" is \" + numPullReplicas\n            + \". This requires \" + requestedShardsToCreate\n            + \" shards to be created (higher than the allowed number)\");\n      }\n      replicaPositions = Assign.identifyNodes(cloudManager\n          , clusterState, nodeList, collectionName, message, shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas);\n      sessionWrapper.set(PolicyHelper.getLastSessionWrapper(true));\n    }\n    return replicaPositions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bf8a7ced1e96b646081915c332618d854944666e","date":1535687605,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#buildReplicaPositions(SolrCloudManager,ClusterState,ZkNodeProps,List[String],List[String],AtomicReference[PolicyHelper.SessionWrapper]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#buildReplicaPositions(SolrCloudManager,ClusterState,ZkNodeProps,List[String],List[String],AtomicReference[PolicyHelper.SessionWrapper]).mjava","sourceNew":"  public static List<ReplicaPosition> buildReplicaPositions(SolrCloudManager cloudManager, ClusterState clusterState,\n                                                            ZkNodeProps message,\n                                                            List<String> nodeList, List<String> shardNames,\n                                                            AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper) throws IOException, InterruptedException, Assign.AssignmentException {\n    final String collectionName = message.getStr(NAME);\n    // look at the replication factor and see if it matches reality\n    // if it does not, find best nodes to create more cores\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, 0);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, numTlogReplicas>0?0:1));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, 0);\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n    String policy = message.getStr(Policy.POLICY);\n    boolean usePolicyFramework = !autoScalingConfig.getPolicy().getClusterPolicy().isEmpty() || policy != null;\n\n    Integer numSlices = shardNames.size();\n    int maxShardsPerNode = checkMaxShardsPerNode(message, usePolicyFramework);\n\n    // we need to look at every node and see how many cores it serves\n    // add our new cores to existing nodes serving the least number of cores\n    // but (for now) require that each core goes on a distinct node.\n\n    List<ReplicaPosition> replicaPositions;\n    nodeList.addAll(Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, OverseerCollectionMessageHandler.RANDOM));\n    if (nodeList.isEmpty()) {\n      log.warn(\"It is unusual to create a collection (\"+collectionName+\") without cores.\");\n\n      replicaPositions = new ArrayList<>();\n    } else {\n      int totalNumReplicas = numNrtReplicas + numTlogReplicas + numPullReplicas;\n      if (totalNumReplicas > nodeList.size()) {\n        log.warn(\"Specified number of replicas of \"\n            + totalNumReplicas\n            + \" on collection \"\n            + collectionName\n            + \" is higher than the number of Solr instances currently live or live and part of your \" + OverseerCollectionMessageHandler.CREATE_NODE_SET + \"(\"\n            + nodeList.size()\n            + \"). It's unusual to run two replica of the same slice on the same Solr-instance.\");\n      }\n\n      int maxShardsAllowedToCreate = maxShardsPerNode == Integer.MAX_VALUE ?\n          Integer.MAX_VALUE :\n          maxShardsPerNode * nodeList.size();\n      int requestedShardsToCreate = numSlices * totalNumReplicas;\n      if (maxShardsAllowedToCreate < requestedShardsToCreate) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot create collection \" + collectionName + \". Value of \"\n            + MAX_SHARDS_PER_NODE + \" is \" + maxShardsPerNode\n            + \", and the number of nodes currently live or live and part of your \"+OverseerCollectionMessageHandler.CREATE_NODE_SET+\" is \" + nodeList.size()\n            + \". This allows a maximum of \" + maxShardsAllowedToCreate\n            + \" to be created. Value of \" + OverseerCollectionMessageHandler.NUM_SLICES + \" is \" + numSlices\n            + \", value of \" + NRT_REPLICAS + \" is \" + numNrtReplicas\n            + \", value of \" + TLOG_REPLICAS + \" is \" + numTlogReplicas\n            + \" and value of \" + PULL_REPLICAS + \" is \" + numPullReplicas\n            + \". This requires \" + requestedShardsToCreate\n            + \" shards to be created (higher than the allowed number)\");\n      }\n      replicaPositions = Assign.identifyNodes(cloudManager\n          , clusterState, nodeList, collectionName, message, shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas);\n      sessionWrapper.set(PolicyHelper.getLastSessionWrapper(true));\n    }\n    return replicaPositions;\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> buildReplicaPositions(SolrCloudManager cloudManager, ClusterState clusterState,\n                                                            ZkNodeProps message,\n                                                            List<String> nodeList, List<String> shardNames,\n                                                            AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper) throws IOException, InterruptedException {\n    final String collectionName = message.getStr(NAME);\n    // look at the replication factor and see if it matches reality\n    // if it does not, find best nodes to create more cores\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, 0);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, numTlogReplicas>0?0:1));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, 0);\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n    String policy = message.getStr(Policy.POLICY);\n    boolean usePolicyFramework = !autoScalingConfig.getPolicy().getClusterPolicy().isEmpty() || policy != null;\n\n    Integer numSlices = shardNames.size();\n    int maxShardsPerNode = checkMaxShardsPerNode(message, usePolicyFramework);\n\n    // we need to look at every node and see how many cores it serves\n    // add our new cores to existing nodes serving the least number of cores\n    // but (for now) require that each core goes on a distinct node.\n\n    List<ReplicaPosition> replicaPositions;\n    nodeList.addAll(Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, OverseerCollectionMessageHandler.RANDOM));\n    if (nodeList.isEmpty()) {\n      log.warn(\"It is unusual to create a collection (\"+collectionName+\") without cores.\");\n\n      replicaPositions = new ArrayList<>();\n    } else {\n      int totalNumReplicas = numNrtReplicas + numTlogReplicas + numPullReplicas;\n      if (totalNumReplicas > nodeList.size()) {\n        log.warn(\"Specified number of replicas of \"\n            + totalNumReplicas\n            + \" on collection \"\n            + collectionName\n            + \" is higher than the number of Solr instances currently live or live and part of your \" + OverseerCollectionMessageHandler.CREATE_NODE_SET + \"(\"\n            + nodeList.size()\n            + \"). It's unusual to run two replica of the same slice on the same Solr-instance.\");\n      }\n\n      int maxShardsAllowedToCreate = maxShardsPerNode == Integer.MAX_VALUE ?\n          Integer.MAX_VALUE :\n          maxShardsPerNode * nodeList.size();\n      int requestedShardsToCreate = numSlices * totalNumReplicas;\n      if (maxShardsAllowedToCreate < requestedShardsToCreate) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot create collection \" + collectionName + \". Value of \"\n            + MAX_SHARDS_PER_NODE + \" is \" + maxShardsPerNode\n            + \", and the number of nodes currently live or live and part of your \"+OverseerCollectionMessageHandler.CREATE_NODE_SET+\" is \" + nodeList.size()\n            + \". This allows a maximum of \" + maxShardsAllowedToCreate\n            + \" to be created. Value of \" + OverseerCollectionMessageHandler.NUM_SLICES + \" is \" + numSlices\n            + \", value of \" + NRT_REPLICAS + \" is \" + numNrtReplicas\n            + \", value of \" + TLOG_REPLICAS + \" is \" + numTlogReplicas\n            + \" and value of \" + PULL_REPLICAS + \" is \" + numPullReplicas\n            + \". This requires \" + requestedShardsToCreate\n            + \" shards to be created (higher than the allowed number)\");\n      }\n      replicaPositions = Assign.identifyNodes(cloudManager\n          , clusterState, nodeList, collectionName, message, shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas);\n      sessionWrapper.set(PolicyHelper.getLastSessionWrapper(true));\n    }\n    return replicaPositions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9f71a1c6c905e9489b4d25c83c8d628d978a8ea","date":1538045138,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#buildReplicaPositions(SolrCloudManager,ClusterState,DocCollection,ZkNodeProps,List[String],AtomicReference[PolicyHelper.SessionWrapper]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#buildReplicaPositions(SolrCloudManager,ClusterState,ZkNodeProps,List[String],List[String],AtomicReference[PolicyHelper.SessionWrapper]).mjava","sourceNew":"  public static List<ReplicaPosition> buildReplicaPositions(SolrCloudManager cloudManager, ClusterState clusterState,\n                                                            DocCollection docCollection,\n                                                            ZkNodeProps message,\n                                                            List<String> shardNames,\n                                                            AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper) throws IOException, InterruptedException, Assign.AssignmentException {\n    final String collectionName = message.getStr(NAME);\n    // look at the replication factor and see if it matches reality\n    // if it does not, find best nodes to create more cores\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, 0);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, numTlogReplicas>0?0:1));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, 0);\n    boolean usePolicyFramework = CloudUtil.usePolicyFramework(docCollection, cloudManager);\n\n    int numSlices = shardNames.size();\n    int maxShardsPerNode = checkMaxShardsPerNode(message, usePolicyFramework);\n\n    // we need to look at every node and see how many cores it serves\n    // add our new cores to existing nodes serving the least number of cores\n    // but (for now) require that each core goes on a distinct node.\n\n    List<ReplicaPosition> replicaPositions;\n    List<String> nodeList = Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, OverseerCollectionMessageHandler.RANDOM);\n    if (nodeList.isEmpty()) {\n      log.warn(\"It is unusual to create a collection (\"+collectionName+\") without cores.\");\n\n      replicaPositions = new ArrayList<>();\n    } else {\n      int totalNumReplicas = numNrtReplicas + numTlogReplicas + numPullReplicas;\n      if (totalNumReplicas > nodeList.size()) {\n        log.warn(\"Specified number of replicas of \"\n            + totalNumReplicas\n            + \" on collection \"\n            + collectionName\n            + \" is higher than the number of Solr instances currently live or live and part of your \" + OverseerCollectionMessageHandler.CREATE_NODE_SET + \"(\"\n            + nodeList.size()\n            + \"). It's unusual to run two replica of the same slice on the same Solr-instance.\");\n      }\n\n      int maxShardsAllowedToCreate = maxShardsPerNode == Integer.MAX_VALUE ?\n          Integer.MAX_VALUE :\n          maxShardsPerNode * nodeList.size();\n      int requestedShardsToCreate = numSlices * totalNumReplicas;\n      if (maxShardsAllowedToCreate < requestedShardsToCreate) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot create collection \" + collectionName + \". Value of \"\n            + MAX_SHARDS_PER_NODE + \" is \" + maxShardsPerNode\n            + \", and the number of nodes currently live or live and part of your \"+OverseerCollectionMessageHandler.CREATE_NODE_SET+\" is \" + nodeList.size()\n            + \". This allows a maximum of \" + maxShardsAllowedToCreate\n            + \" to be created. Value of \" + OverseerCollectionMessageHandler.NUM_SLICES + \" is \" + numSlices\n            + \", value of \" + NRT_REPLICAS + \" is \" + numNrtReplicas\n            + \", value of \" + TLOG_REPLICAS + \" is \" + numTlogReplicas\n            + \" and value of \" + PULL_REPLICAS + \" is \" + numPullReplicas\n            + \". This requires \" + requestedShardsToCreate\n            + \" shards to be created (higher than the allowed number)\");\n      }\n      Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n          .forCollection(collectionName)\n          .forShard(shardNames)\n          .assignNrtReplicas(numNrtReplicas)\n          .assignTlogReplicas(numTlogReplicas)\n          .assignPullReplicas(numPullReplicas)\n          .onNodes(nodeList)\n          .build();\n      Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(cloudManager);\n      Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(clusterState, docCollection);\n      replicaPositions = assignStrategy.assign(cloudManager, assignRequest);\n      sessionWrapper.set(PolicyHelper.getLastSessionWrapper(true));\n    }\n    return replicaPositions;\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> buildReplicaPositions(SolrCloudManager cloudManager, ClusterState clusterState,\n                                                            ZkNodeProps message,\n                                                            List<String> nodeList, List<String> shardNames,\n                                                            AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper) throws IOException, InterruptedException, Assign.AssignmentException {\n    final String collectionName = message.getStr(NAME);\n    // look at the replication factor and see if it matches reality\n    // if it does not, find best nodes to create more cores\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, 0);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, numTlogReplicas>0?0:1));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, 0);\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n    String policy = message.getStr(Policy.POLICY);\n    boolean usePolicyFramework = !autoScalingConfig.getPolicy().getClusterPolicy().isEmpty() || policy != null;\n\n    Integer numSlices = shardNames.size();\n    int maxShardsPerNode = checkMaxShardsPerNode(message, usePolicyFramework);\n\n    // we need to look at every node and see how many cores it serves\n    // add our new cores to existing nodes serving the least number of cores\n    // but (for now) require that each core goes on a distinct node.\n\n    List<ReplicaPosition> replicaPositions;\n    nodeList.addAll(Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, OverseerCollectionMessageHandler.RANDOM));\n    if (nodeList.isEmpty()) {\n      log.warn(\"It is unusual to create a collection (\"+collectionName+\") without cores.\");\n\n      replicaPositions = new ArrayList<>();\n    } else {\n      int totalNumReplicas = numNrtReplicas + numTlogReplicas + numPullReplicas;\n      if (totalNumReplicas > nodeList.size()) {\n        log.warn(\"Specified number of replicas of \"\n            + totalNumReplicas\n            + \" on collection \"\n            + collectionName\n            + \" is higher than the number of Solr instances currently live or live and part of your \" + OverseerCollectionMessageHandler.CREATE_NODE_SET + \"(\"\n            + nodeList.size()\n            + \"). It's unusual to run two replica of the same slice on the same Solr-instance.\");\n      }\n\n      int maxShardsAllowedToCreate = maxShardsPerNode == Integer.MAX_VALUE ?\n          Integer.MAX_VALUE :\n          maxShardsPerNode * nodeList.size();\n      int requestedShardsToCreate = numSlices * totalNumReplicas;\n      if (maxShardsAllowedToCreate < requestedShardsToCreate) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot create collection \" + collectionName + \". Value of \"\n            + MAX_SHARDS_PER_NODE + \" is \" + maxShardsPerNode\n            + \", and the number of nodes currently live or live and part of your \"+OverseerCollectionMessageHandler.CREATE_NODE_SET+\" is \" + nodeList.size()\n            + \". This allows a maximum of \" + maxShardsAllowedToCreate\n            + \" to be created. Value of \" + OverseerCollectionMessageHandler.NUM_SLICES + \" is \" + numSlices\n            + \", value of \" + NRT_REPLICAS + \" is \" + numNrtReplicas\n            + \", value of \" + TLOG_REPLICAS + \" is \" + numTlogReplicas\n            + \" and value of \" + PULL_REPLICAS + \" is \" + numPullReplicas\n            + \". This requires \" + requestedShardsToCreate\n            + \" shards to be created (higher than the allowed number)\");\n      }\n      replicaPositions = Assign.identifyNodes(cloudManager\n          , clusterState, nodeList, collectionName, message, shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas);\n      sessionWrapper.set(PolicyHelper.getLastSessionWrapper(true));\n    }\n    return replicaPositions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"bf8a7ced1e96b646081915c332618d854944666e":["27639bb5e041490ce599065875dd2f6d8beef62a"],"e9f71a1c6c905e9489b4d25c83c8d628d978a8ea":["bf8a7ced1e96b646081915c332618d854944666e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"27639bb5e041490ce599065875dd2f6d8beef62a":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e9f71a1c6c905e9489b4d25c83c8d628d978a8ea"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["27639bb5e041490ce599065875dd2f6d8beef62a"],"bf8a7ced1e96b646081915c332618d854944666e":["e9f71a1c6c905e9489b4d25c83c8d628d978a8ea"],"e9f71a1c6c905e9489b4d25c83c8d628d978a8ea":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"27639bb5e041490ce599065875dd2f6d8beef62a":["bf8a7ced1e96b646081915c332618d854944666e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}