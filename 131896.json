{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,IOContext).mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    BytesRef scratch = new BytesRef();\n    \n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValues.Type normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValues.Type docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<String,String>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, Collections.unmodifiableMap(atts));\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      return new FieldInfos(infos);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    BytesRef scratch = new BytesRef();\n    \n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValues.Type normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValues.Type docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<String,String>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, Collections.unmodifiableMap(atts));\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      return new FieldInfos(infos);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bf819846fb54a635eb297e36e7c6196d67f8273","date":1349447995,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    BytesRef scratch = new BytesRef();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValues.Type normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValues.Type docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<String,String>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, Collections.unmodifiableMap(atts));\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    BytesRef scratch = new BytesRef();\n    \n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValues.Type normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValues.Type docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<String,String>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, Collections.unmodifiableMap(atts));\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      return new FieldInfos(infos);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    BytesRef scratch = new BytesRef();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValuesType normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<String,String>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, Collections.unmodifiableMap(atts));\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    BytesRef scratch = new BytesRef();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValues.Type normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValues.Type docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<String,String>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, Collections.unmodifiableMap(atts));\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    BytesRef scratch = new BytesRef();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValuesType normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<String,String>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, Collections.unmodifiableMap(atts));\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    BytesRef scratch = new BytesRef();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValues.Type normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValues.Type docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<String,String>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, Collections.unmodifiableMap(atts));\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8435160e9702b19398118ddf76b61c846612b6a4","date":1380349140,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    BytesRef scratch = new BytesRef();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValuesType normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<String,String>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, Collections.unmodifiableMap(atts));\n        infos[i].setDocValuesGen(dvGen);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    BytesRef scratch = new BytesRef();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValuesType normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<String,String>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, Collections.unmodifiableMap(atts));\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","ca02c6cbb1ba28fd0bd36bd0f8a2ac84be5f0e71"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["1bf819846fb54a635eb297e36e7c6196d67f8273","0837ab0472feecb3a54260729d845f839e1cbd72"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8435160e9702b19398118ddf76b61c846612b6a4":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"0837ab0472feecb3a54260729d845f839e1cbd72":["1bf819846fb54a635eb297e36e7c6196d67f8273"],"1bf819846fb54a635eb297e36e7c6196d67f8273":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8435160e9702b19398118ddf76b61c846612b6a4"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["8435160e9702b19398118ddf76b61c846612b6a4"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["1bf819846fb54a635eb297e36e7c6196d67f8273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"8435160e9702b19398118ddf76b61c846612b6a4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"1bf819846fb54a635eb297e36e7c6196d67f8273":["d4d69c535930b5cce125cff868d40f6373dc27d4","0837ab0472feecb3a54260729d845f839e1cbd72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}