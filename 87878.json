{"path":"lucene/core/src/java/org/apache/lucene/util/fst/BytesStore#getForwardReader().mjava","commits":[{"id":"87e78f3c129251e74ecc2ff73a32de0f27cf09d5","date":1358006150,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/BytesStore#getForwardReader().mjava","pathOld":"/dev/null","sourceNew":"  public FST.BytesReader getForwardReader() {\n    if (blocks.size() == 1) {\n      return new ForwardBytesReader(blocks.get(0));\n    }\n    return new FST.BytesReader() {\n      private byte[] current;\n      private int nextBuffer;\n      private int nextRead = blockSize;\n\n      @Override\n      public byte readByte() {\n        if (nextRead == blockSize) {\n          current = blocks.get(nextBuffer++);\n          nextRead = 0;\n        }\n        return current[nextRead++];\n      }\n\n      @Override\n      public void skipBytes(int count) {\n        setPosition(getPosition() + count);\n      }\n\n      @Override\n      public void readBytes(byte[] b, int offset, int len) {\n        while(len > 0) {\n          int chunkLeft = blockSize - nextRead;\n          if (len <= chunkLeft) {\n            System.arraycopy(current, nextRead, b, offset, len);\n            nextRead += len;\n            break;\n          } else {\n            if (chunkLeft > 0) {\n              System.arraycopy(current, nextRead, b, offset, chunkLeft);\n              offset += chunkLeft;\n              len -= chunkLeft;\n            }\n            current = blocks.get(nextBuffer++);\n            nextRead = 0;\n          }\n        }\n      }\n\n      @Override\n      public int getPosition() {\n        return (nextBuffer-1)*blockSize + nextRead;\n      }\n\n      @Override\n      public void setPosition(int pos) {\n        int bufferIndex = pos >> blockBits;\n        nextBuffer = bufferIndex+1;\n        current = blocks.get(bufferIndex);\n        nextRead = pos & blockMask;\n        assert getPosition() == pos;\n      }\n\n      @Override\n      public boolean reversed() {\n        return false;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0","date":1358188277,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/BytesStore#getForwardReader().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/BytesStore#getForwardReader().mjava","sourceNew":"  public FST.BytesReader getForwardReader() {\n    if (blocks.size() == 1) {\n      return new ForwardBytesReader(blocks.get(0));\n    }\n    return new FST.BytesReader() {\n      private byte[] current;\n      private int nextBuffer;\n      private int nextRead = blockSize;\n\n      @Override\n      public byte readByte() {\n        if (nextRead == blockSize) {\n          current = blocks.get(nextBuffer++);\n          nextRead = 0;\n        }\n        return current[nextRead++];\n      }\n\n      @Override\n      public void skipBytes(int count) {\n        setPosition(getPosition() + count);\n      }\n\n      @Override\n      public void readBytes(byte[] b, int offset, int len) {\n        while(len > 0) {\n          int chunkLeft = blockSize - nextRead;\n          if (len <= chunkLeft) {\n            System.arraycopy(current, nextRead, b, offset, len);\n            nextRead += len;\n            break;\n          } else {\n            if (chunkLeft > 0) {\n              System.arraycopy(current, nextRead, b, offset, chunkLeft);\n              offset += chunkLeft;\n              len -= chunkLeft;\n            }\n            current = blocks.get(nextBuffer++);\n            nextRead = 0;\n          }\n        }\n      }\n\n      @Override\n      public long getPosition() {\n        return ((long) nextBuffer-1)*blockSize + nextRead;\n      }\n\n      @Override\n      public void setPosition(long pos) {\n        int bufferIndex = (int) (pos >> blockBits);\n        nextBuffer = bufferIndex+1;\n        current = blocks.get(bufferIndex);\n        nextRead = (int) (pos & blockMask);\n        assert getPosition() == pos;\n      }\n\n      @Override\n      public boolean reversed() {\n        return false;\n      }\n    };\n  }\n\n","sourceOld":"  public FST.BytesReader getForwardReader() {\n    if (blocks.size() == 1) {\n      return new ForwardBytesReader(blocks.get(0));\n    }\n    return new FST.BytesReader() {\n      private byte[] current;\n      private int nextBuffer;\n      private int nextRead = blockSize;\n\n      @Override\n      public byte readByte() {\n        if (nextRead == blockSize) {\n          current = blocks.get(nextBuffer++);\n          nextRead = 0;\n        }\n        return current[nextRead++];\n      }\n\n      @Override\n      public void skipBytes(int count) {\n        setPosition(getPosition() + count);\n      }\n\n      @Override\n      public void readBytes(byte[] b, int offset, int len) {\n        while(len > 0) {\n          int chunkLeft = blockSize - nextRead;\n          if (len <= chunkLeft) {\n            System.arraycopy(current, nextRead, b, offset, len);\n            nextRead += len;\n            break;\n          } else {\n            if (chunkLeft > 0) {\n              System.arraycopy(current, nextRead, b, offset, chunkLeft);\n              offset += chunkLeft;\n              len -= chunkLeft;\n            }\n            current = blocks.get(nextBuffer++);\n            nextRead = 0;\n          }\n        }\n      }\n\n      @Override\n      public int getPosition() {\n        return (nextBuffer-1)*blockSize + nextRead;\n      }\n\n      @Override\n      public void setPosition(int pos) {\n        int bufferIndex = pos >> blockBits;\n        nextBuffer = bufferIndex+1;\n        current = blocks.get(bufferIndex);\n        nextRead = pos & blockMask;\n        assert getPosition() == pos;\n      }\n\n      @Override\n      public boolean reversed() {\n        return false;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/BytesStore#getForwardReader().mjava","pathOld":"/dev/null","sourceNew":"  public FST.BytesReader getForwardReader() {\n    if (blocks.size() == 1) {\n      return new ForwardBytesReader(blocks.get(0));\n    }\n    return new FST.BytesReader() {\n      private byte[] current;\n      private int nextBuffer;\n      private int nextRead = blockSize;\n\n      @Override\n      public byte readByte() {\n        if (nextRead == blockSize) {\n          current = blocks.get(nextBuffer++);\n          nextRead = 0;\n        }\n        return current[nextRead++];\n      }\n\n      @Override\n      public void skipBytes(int count) {\n        setPosition(getPosition() + count);\n      }\n\n      @Override\n      public void readBytes(byte[] b, int offset, int len) {\n        while(len > 0) {\n          int chunkLeft = blockSize - nextRead;\n          if (len <= chunkLeft) {\n            System.arraycopy(current, nextRead, b, offset, len);\n            nextRead += len;\n            break;\n          } else {\n            if (chunkLeft > 0) {\n              System.arraycopy(current, nextRead, b, offset, chunkLeft);\n              offset += chunkLeft;\n              len -= chunkLeft;\n            }\n            current = blocks.get(nextBuffer++);\n            nextRead = 0;\n          }\n        }\n      }\n\n      @Override\n      public long getPosition() {\n        return ((long) nextBuffer-1)*blockSize + nextRead;\n      }\n\n      @Override\n      public void setPosition(long pos) {\n        int bufferIndex = (int) (pos >> blockBits);\n        nextBuffer = bufferIndex+1;\n        current = blocks.get(bufferIndex);\n        nextRead = (int) (pos & blockMask);\n        assert getPosition() == pos;\n      }\n\n      @Override\n      public boolean reversed() {\n        return false;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"775c2566119fc914aaa5f131744dd2810a204565","date":1400612867,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/BytesStore#getForwardReader().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/BytesStore#getForwardReader().mjava","sourceNew":"  public FST.BytesReader getForwardReader() {\n    if (blocks.size() == 1) {\n      return new ForwardBytesReader(blocks.get(0));\n    }\n    return new FST.BytesReader() {\n      private byte[] current;\n      private int nextBuffer;\n      private int nextRead = blockSize;\n\n      @Override\n      public byte readByte() {\n        if (nextRead == blockSize) {\n          current = blocks.get(nextBuffer++);\n          nextRead = 0;\n        }\n        return current[nextRead++];\n      }\n\n      @Override\n      public void skipBytes(long count) {\n        setPosition(getPosition() + count);\n      }\n\n      @Override\n      public void readBytes(byte[] b, int offset, int len) {\n        while(len > 0) {\n          int chunkLeft = blockSize - nextRead;\n          if (len <= chunkLeft) {\n            System.arraycopy(current, nextRead, b, offset, len);\n            nextRead += len;\n            break;\n          } else {\n            if (chunkLeft > 0) {\n              System.arraycopy(current, nextRead, b, offset, chunkLeft);\n              offset += chunkLeft;\n              len -= chunkLeft;\n            }\n            current = blocks.get(nextBuffer++);\n            nextRead = 0;\n          }\n        }\n      }\n\n      @Override\n      public long getPosition() {\n        return ((long) nextBuffer-1)*blockSize + nextRead;\n      }\n\n      @Override\n      public void setPosition(long pos) {\n        int bufferIndex = (int) (pos >> blockBits);\n        nextBuffer = bufferIndex+1;\n        current = blocks.get(bufferIndex);\n        nextRead = (int) (pos & blockMask);\n        assert getPosition() == pos;\n      }\n\n      @Override\n      public boolean reversed() {\n        return false;\n      }\n    };\n  }\n\n","sourceOld":"  public FST.BytesReader getForwardReader() {\n    if (blocks.size() == 1) {\n      return new ForwardBytesReader(blocks.get(0));\n    }\n    return new FST.BytesReader() {\n      private byte[] current;\n      private int nextBuffer;\n      private int nextRead = blockSize;\n\n      @Override\n      public byte readByte() {\n        if (nextRead == blockSize) {\n          current = blocks.get(nextBuffer++);\n          nextRead = 0;\n        }\n        return current[nextRead++];\n      }\n\n      @Override\n      public void skipBytes(int count) {\n        setPosition(getPosition() + count);\n      }\n\n      @Override\n      public void readBytes(byte[] b, int offset, int len) {\n        while(len > 0) {\n          int chunkLeft = blockSize - nextRead;\n          if (len <= chunkLeft) {\n            System.arraycopy(current, nextRead, b, offset, len);\n            nextRead += len;\n            break;\n          } else {\n            if (chunkLeft > 0) {\n              System.arraycopy(current, nextRead, b, offset, chunkLeft);\n              offset += chunkLeft;\n              len -= chunkLeft;\n            }\n            current = blocks.get(nextBuffer++);\n            nextRead = 0;\n          }\n        }\n      }\n\n      @Override\n      public long getPosition() {\n        return ((long) nextBuffer-1)*blockSize + nextRead;\n      }\n\n      @Override\n      public void setPosition(long pos) {\n        int bufferIndex = (int) (pos >> blockBits);\n        nextBuffer = bufferIndex+1;\n        current = blocks.get(bufferIndex);\n        nextRead = (int) (pos & blockMask);\n        assert getPosition() == pos;\n      }\n\n      @Override\n      public boolean reversed() {\n        return false;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/BytesStore#getForwardReader().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/BytesStore#getForwardReader().mjava","sourceNew":"  public FST.BytesReader getForwardReader() {\n    if (blocks.size() == 1) {\n      return new ForwardBytesReader(blocks.get(0));\n    }\n    return new FST.BytesReader() {\n      private byte[] current;\n      private int nextBuffer;\n      private int nextRead = blockSize;\n\n      @Override\n      public byte readByte() {\n        if (nextRead == blockSize) {\n          current = blocks.get(nextBuffer++);\n          nextRead = 0;\n        }\n        return current[nextRead++];\n      }\n\n      @Override\n      public void skipBytes(long count) {\n        setPosition(getPosition() + count);\n      }\n\n      @Override\n      public void readBytes(byte[] b, int offset, int len) {\n        while(len > 0) {\n          int chunkLeft = blockSize - nextRead;\n          if (len <= chunkLeft) {\n            System.arraycopy(current, nextRead, b, offset, len);\n            nextRead += len;\n            break;\n          } else {\n            if (chunkLeft > 0) {\n              System.arraycopy(current, nextRead, b, offset, chunkLeft);\n              offset += chunkLeft;\n              len -= chunkLeft;\n            }\n            current = blocks.get(nextBuffer++);\n            nextRead = 0;\n          }\n        }\n      }\n\n      @Override\n      public long getPosition() {\n        return ((long) nextBuffer-1)*blockSize + nextRead;\n      }\n\n      @Override\n      public void setPosition(long pos) {\n        int bufferIndex = (int) (pos >> blockBits);\n        nextBuffer = bufferIndex+1;\n        current = blocks.get(bufferIndex);\n        nextRead = (int) (pos & blockMask);\n        assert getPosition() == pos;\n      }\n\n      @Override\n      public boolean reversed() {\n        return false;\n      }\n    };\n  }\n\n","sourceOld":"  public FST.BytesReader getForwardReader() {\n    if (blocks.size() == 1) {\n      return new ForwardBytesReader(blocks.get(0));\n    }\n    return new FST.BytesReader() {\n      private byte[] current;\n      private int nextBuffer;\n      private int nextRead = blockSize;\n\n      @Override\n      public byte readByte() {\n        if (nextRead == blockSize) {\n          current = blocks.get(nextBuffer++);\n          nextRead = 0;\n        }\n        return current[nextRead++];\n      }\n\n      @Override\n      public void skipBytes(int count) {\n        setPosition(getPosition() + count);\n      }\n\n      @Override\n      public void readBytes(byte[] b, int offset, int len) {\n        while(len > 0) {\n          int chunkLeft = blockSize - nextRead;\n          if (len <= chunkLeft) {\n            System.arraycopy(current, nextRead, b, offset, len);\n            nextRead += len;\n            break;\n          } else {\n            if (chunkLeft > 0) {\n              System.arraycopy(current, nextRead, b, offset, chunkLeft);\n              offset += chunkLeft;\n              len -= chunkLeft;\n            }\n            current = blocks.get(nextBuffer++);\n            nextRead = 0;\n          }\n        }\n      }\n\n      @Override\n      public long getPosition() {\n        return ((long) nextBuffer-1)*blockSize + nextRead;\n      }\n\n      @Override\n      public void setPosition(long pos) {\n        int bufferIndex = (int) (pos >> blockBits);\n        nextBuffer = bufferIndex+1;\n        current = blocks.get(bufferIndex);\n        nextRead = (int) (pos & blockMask);\n        assert getPosition() == pos;\n      }\n\n      @Override\n      public boolean reversed() {\n        return false;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"775c2566119fc914aaa5f131744dd2810a204565":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0":["87e78f3c129251e74ecc2ff73a32de0f27cf09d5"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"87e78f3c129251e74ecc2ff73a32de0f27cf09d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b7605579001505896d48b07160075a5c8b8e128e":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0","775c2566119fc914aaa5f131744dd2810a204565"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["775c2566119fc914aaa5f131744dd2810a204565"]},"commit2Childs":{"775c2566119fc914aaa5f131744dd2810a204565":["b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0":["775c2566119fc914aaa5f131744dd2810a204565","8917bfede3b4ca30f4305c1e391e9218959cd723","b7605579001505896d48b07160075a5c8b8e128e"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8917bfede3b4ca30f4305c1e391e9218959cd723","87e78f3c129251e74ecc2ff73a32de0f27cf09d5"],"87e78f3c129251e74ecc2ff73a32de0f27cf09d5":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"b7605579001505896d48b07160075a5c8b8e128e":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8917bfede3b4ca30f4305c1e391e9218959cd723","b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}