{"path":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#BlockPackedReader(IndexInput,int,int,long,boolean).mjava","commits":[{"id":"37b84753dc1f66eba4973779932885fe42cde001","date":1358812051,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#BlockPackedReader(IndexInput,int,int,long,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Sole constructor. */\n  public BlockPackedReader(IndexInput in, int packedIntsVersion, int blockSize, long valueCount, boolean direct) throws IOException {\n    checkBlockSize(blockSize);\n    this.valueCount = valueCount;\n    blockShift = Long.numberOfTrailingZeros(blockSize);\n    blockMask = blockSize - 1;\n    final int numBlocks = (int) (valueCount / blockSize) + (valueCount % blockSize == 0 ? 0 : 1);\n    if (numBlocks * blockSize < valueCount) {\n      throw new IllegalArgumentException(\"valueCount is too large for this block size\");\n    }\n    long[] minValues = null;\n    subReaders = new PackedInts.Reader[numBlocks];\n    for (int i = 0; i < numBlocks; ++i) {\n      final int token = in.readByte() & 0xFF;\n      final int bitsPerValue = token >>> BPV_SHIFT;\n      if (bitsPerValue > 64) {\n        throw new IOException(\"Corrupted\");\n      }\n      if ((token & MIN_VALUE_EQUALS_0) == 0) {\n        if (minValues == null) {\n          minValues = new long[numBlocks];\n        }\n        minValues[i] = zigZagDecode(1L + readVLong(in));\n      }\n      if (bitsPerValue != 0) {\n        final int size = (int) Math.min(blockSize, valueCount - (long) i * blockSize);\n        if (direct) {\n          final long pointer = in.getFilePointer();\n          subReaders[i] = PackedInts.getDirectReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n          in.seek(pointer + PackedInts.Format.PACKED.byteCount(packedIntsVersion, size, bitsPerValue));\n        } else {\n          subReaders[i] = PackedInts.getReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n        }\n      }\n    }\n    this.minValues = minValues;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e76d3450662dab47d54e3f462c7b3eba4e38b9ac","date":1358866496,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#BlockPackedReader(IndexInput,int,int,long,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#BlockPackedReader(IndexInput,int,int,long,boolean).mjava","sourceNew":"  /** Sole constructor. */\n  public BlockPackedReader(IndexInput in, int packedIntsVersion, int blockSize, long valueCount, boolean direct) throws IOException {\n    checkBlockSize(blockSize);\n    this.valueCount = valueCount;\n    blockShift = Integer.numberOfTrailingZeros(blockSize);\n    blockMask = blockSize - 1;\n    final int numBlocks = (int) (valueCount / blockSize) + (valueCount % blockSize == 0 ? 0 : 1);\n    if (numBlocks * blockSize < valueCount) {\n      throw new IllegalArgumentException(\"valueCount is too large for this block size\");\n    }\n    long[] minValues = null;\n    subReaders = new PackedInts.Reader[numBlocks];\n    for (int i = 0; i < numBlocks; ++i) {\n      final int token = in.readByte() & 0xFF;\n      final int bitsPerValue = token >>> BPV_SHIFT;\n      if (bitsPerValue > 64) {\n        throw new IOException(\"Corrupted\");\n      }\n      if ((token & MIN_VALUE_EQUALS_0) == 0) {\n        if (minValues == null) {\n          minValues = new long[numBlocks];\n        }\n        minValues[i] = zigZagDecode(1L + readVLong(in));\n      }\n      if (bitsPerValue == 0) {\n        subReaders[i] = new PackedInts.NullReader(blockSize);\n      } else {\n        final int size = (int) Math.min(blockSize, valueCount - (long) i * blockSize);\n        if (direct) {\n          final long pointer = in.getFilePointer();\n          subReaders[i] = PackedInts.getDirectReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n          in.seek(pointer + PackedInts.Format.PACKED.byteCount(packedIntsVersion, size, bitsPerValue));\n        } else {\n          subReaders[i] = PackedInts.getReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n        }\n      }\n    }\n    this.minValues = minValues;\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public BlockPackedReader(IndexInput in, int packedIntsVersion, int blockSize, long valueCount, boolean direct) throws IOException {\n    checkBlockSize(blockSize);\n    this.valueCount = valueCount;\n    blockShift = Long.numberOfTrailingZeros(blockSize);\n    blockMask = blockSize - 1;\n    final int numBlocks = (int) (valueCount / blockSize) + (valueCount % blockSize == 0 ? 0 : 1);\n    if (numBlocks * blockSize < valueCount) {\n      throw new IllegalArgumentException(\"valueCount is too large for this block size\");\n    }\n    long[] minValues = null;\n    subReaders = new PackedInts.Reader[numBlocks];\n    for (int i = 0; i < numBlocks; ++i) {\n      final int token = in.readByte() & 0xFF;\n      final int bitsPerValue = token >>> BPV_SHIFT;\n      if (bitsPerValue > 64) {\n        throw new IOException(\"Corrupted\");\n      }\n      if ((token & MIN_VALUE_EQUALS_0) == 0) {\n        if (minValues == null) {\n          minValues = new long[numBlocks];\n        }\n        minValues[i] = zigZagDecode(1L + readVLong(in));\n      }\n      if (bitsPerValue != 0) {\n        final int size = (int) Math.min(blockSize, valueCount - (long) i * blockSize);\n        if (direct) {\n          final long pointer = in.getFilePointer();\n          subReaders[i] = PackedInts.getDirectReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n          in.seek(pointer + PackedInts.Format.PACKED.byteCount(packedIntsVersion, size, bitsPerValue));\n        } else {\n          subReaders[i] = PackedInts.getReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n        }\n      }\n    }\n    this.minValues = minValues;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38ed11981e9035384eaae7fb49013b8156d7a977","date":1359112895,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#BlockPackedReader(IndexInput,int,int,long,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#BlockPackedReader(IndexInput,int,int,long,boolean).mjava","sourceNew":"  /** Sole constructor. */\n  public BlockPackedReader(IndexInput in, int packedIntsVersion, int blockSize, long valueCount, boolean direct) throws IOException {\n    checkBlockSize(blockSize);\n    this.valueCount = valueCount;\n    blockShift = Integer.numberOfTrailingZeros(blockSize);\n    blockMask = blockSize - 1;\n    final int numBlocks = (int) (valueCount / blockSize) + (valueCount % blockSize == 0 ? 0 : 1);\n    if ((long) numBlocks * blockSize < valueCount) {\n      throw new IllegalArgumentException(\"valueCount is too large for this block size\");\n    }\n    long[] minValues = null;\n    subReaders = new PackedInts.Reader[numBlocks];\n    for (int i = 0; i < numBlocks; ++i) {\n      final int token = in.readByte() & 0xFF;\n      final int bitsPerValue = token >>> BPV_SHIFT;\n      if (bitsPerValue > 64) {\n        throw new IOException(\"Corrupted\");\n      }\n      if ((token & MIN_VALUE_EQUALS_0) == 0) {\n        if (minValues == null) {\n          minValues = new long[numBlocks];\n        }\n        minValues[i] = zigZagDecode(1L + readVLong(in));\n      }\n      if (bitsPerValue == 0) {\n        subReaders[i] = new PackedInts.NullReader(blockSize);\n      } else {\n        final int size = (int) Math.min(blockSize, valueCount - (long) i * blockSize);\n        if (direct) {\n          final long pointer = in.getFilePointer();\n          subReaders[i] = PackedInts.getDirectReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n          in.seek(pointer + PackedInts.Format.PACKED.byteCount(packedIntsVersion, size, bitsPerValue));\n        } else {\n          subReaders[i] = PackedInts.getReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n        }\n      }\n    }\n    this.minValues = minValues;\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public BlockPackedReader(IndexInput in, int packedIntsVersion, int blockSize, long valueCount, boolean direct) throws IOException {\n    checkBlockSize(blockSize);\n    this.valueCount = valueCount;\n    blockShift = Integer.numberOfTrailingZeros(blockSize);\n    blockMask = blockSize - 1;\n    final int numBlocks = (int) (valueCount / blockSize) + (valueCount % blockSize == 0 ? 0 : 1);\n    if (numBlocks * blockSize < valueCount) {\n      throw new IllegalArgumentException(\"valueCount is too large for this block size\");\n    }\n    long[] minValues = null;\n    subReaders = new PackedInts.Reader[numBlocks];\n    for (int i = 0; i < numBlocks; ++i) {\n      final int token = in.readByte() & 0xFF;\n      final int bitsPerValue = token >>> BPV_SHIFT;\n      if (bitsPerValue > 64) {\n        throw new IOException(\"Corrupted\");\n      }\n      if ((token & MIN_VALUE_EQUALS_0) == 0) {\n        if (minValues == null) {\n          minValues = new long[numBlocks];\n        }\n        minValues[i] = zigZagDecode(1L + readVLong(in));\n      }\n      if (bitsPerValue == 0) {\n        subReaders[i] = new PackedInts.NullReader(blockSize);\n      } else {\n        final int size = (int) Math.min(blockSize, valueCount - (long) i * blockSize);\n        if (direct) {\n          final long pointer = in.getFilePointer();\n          subReaders[i] = PackedInts.getDirectReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n          in.seek(pointer + PackedInts.Format.PACKED.byteCount(packedIntsVersion, size, bitsPerValue));\n        } else {\n          subReaders[i] = PackedInts.getReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n        }\n      }\n    }\n    this.minValues = minValues;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#BlockPackedReader(IndexInput,int,int,long,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Sole constructor. */\n  public BlockPackedReader(IndexInput in, int packedIntsVersion, int blockSize, long valueCount, boolean direct) throws IOException {\n    checkBlockSize(blockSize);\n    this.valueCount = valueCount;\n    blockShift = Integer.numberOfTrailingZeros(blockSize);\n    blockMask = blockSize - 1;\n    final int numBlocks = (int) (valueCount / blockSize) + (valueCount % blockSize == 0 ? 0 : 1);\n    if ((long) numBlocks * blockSize < valueCount) {\n      throw new IllegalArgumentException(\"valueCount is too large for this block size\");\n    }\n    long[] minValues = null;\n    subReaders = new PackedInts.Reader[numBlocks];\n    for (int i = 0; i < numBlocks; ++i) {\n      final int token = in.readByte() & 0xFF;\n      final int bitsPerValue = token >>> BPV_SHIFT;\n      if (bitsPerValue > 64) {\n        throw new IOException(\"Corrupted\");\n      }\n      if ((token & MIN_VALUE_EQUALS_0) == 0) {\n        if (minValues == null) {\n          minValues = new long[numBlocks];\n        }\n        minValues[i] = zigZagDecode(1L + readVLong(in));\n      }\n      if (bitsPerValue == 0) {\n        subReaders[i] = new PackedInts.NullReader(blockSize);\n      } else {\n        final int size = (int) Math.min(blockSize, valueCount - (long) i * blockSize);\n        if (direct) {\n          final long pointer = in.getFilePointer();\n          subReaders[i] = PackedInts.getDirectReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n          in.seek(pointer + PackedInts.Format.PACKED.byteCount(packedIntsVersion, size, bitsPerValue));\n        } else {\n          subReaders[i] = PackedInts.getReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n        }\n      }\n    }\n    this.minValues = minValues;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f375a9203c9124207e176f4dc59bd8e832b239a0","date":1370270173,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#BlockPackedReader(IndexInput,int,int,long,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#BlockPackedReader(IndexInput,int,int,long,boolean).mjava","sourceNew":"  /** Sole constructor. */\n  public BlockPackedReader(IndexInput in, int packedIntsVersion, int blockSize, long valueCount, boolean direct) throws IOException {\n    this.valueCount = valueCount;\n    blockShift = checkBlockSize(blockSize, MIN_BLOCK_SIZE, MAX_BLOCK_SIZE);\n    blockMask = blockSize - 1;\n    final int numBlocks = numBlocks(valueCount, blockSize);\n    long[] minValues = null;\n    subReaders = new PackedInts.Reader[numBlocks];\n    for (int i = 0; i < numBlocks; ++i) {\n      final int token = in.readByte() & 0xFF;\n      final int bitsPerValue = token >>> BPV_SHIFT;\n      if (bitsPerValue > 64) {\n        throw new IOException(\"Corrupted\");\n      }\n      if ((token & MIN_VALUE_EQUALS_0) == 0) {\n        if (minValues == null) {\n          minValues = new long[numBlocks];\n        }\n        minValues[i] = zigZagDecode(1L + readVLong(in));\n      }\n      if (bitsPerValue == 0) {\n        subReaders[i] = new PackedInts.NullReader(blockSize);\n      } else {\n        final int size = (int) Math.min(blockSize, valueCount - (long) i * blockSize);\n        if (direct) {\n          final long pointer = in.getFilePointer();\n          subReaders[i] = PackedInts.getDirectReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n          in.seek(pointer + PackedInts.Format.PACKED.byteCount(packedIntsVersion, size, bitsPerValue));\n        } else {\n          subReaders[i] = PackedInts.getReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n        }\n      }\n    }\n    this.minValues = minValues;\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public BlockPackedReader(IndexInput in, int packedIntsVersion, int blockSize, long valueCount, boolean direct) throws IOException {\n    checkBlockSize(blockSize);\n    this.valueCount = valueCount;\n    blockShift = Integer.numberOfTrailingZeros(blockSize);\n    blockMask = blockSize - 1;\n    final int numBlocks = (int) (valueCount / blockSize) + (valueCount % blockSize == 0 ? 0 : 1);\n    if ((long) numBlocks * blockSize < valueCount) {\n      throw new IllegalArgumentException(\"valueCount is too large for this block size\");\n    }\n    long[] minValues = null;\n    subReaders = new PackedInts.Reader[numBlocks];\n    for (int i = 0; i < numBlocks; ++i) {\n      final int token = in.readByte() & 0xFF;\n      final int bitsPerValue = token >>> BPV_SHIFT;\n      if (bitsPerValue > 64) {\n        throw new IOException(\"Corrupted\");\n      }\n      if ((token & MIN_VALUE_EQUALS_0) == 0) {\n        if (minValues == null) {\n          minValues = new long[numBlocks];\n        }\n        minValues[i] = zigZagDecode(1L + readVLong(in));\n      }\n      if (bitsPerValue == 0) {\n        subReaders[i] = new PackedInts.NullReader(blockSize);\n      } else {\n        final int size = (int) Math.min(blockSize, valueCount - (long) i * blockSize);\n        if (direct) {\n          final long pointer = in.getFilePointer();\n          subReaders[i] = PackedInts.getDirectReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n          in.seek(pointer + PackedInts.Format.PACKED.byteCount(packedIntsVersion, size, bitsPerValue));\n        } else {\n          subReaders[i] = PackedInts.getReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n        }\n      }\n    }\n    this.minValues = minValues;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0936055c0eed56be3e4ae5c9db5b0e355390736a","date":1410874015,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#BlockPackedReader(IndexInput,int,int,long,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#BlockPackedReader(IndexInput,int,int,long,boolean).mjava","sourceNew":"  /** Sole constructor. */\n  public BlockPackedReader(IndexInput in, int packedIntsVersion, int blockSize, long valueCount, boolean direct) throws IOException {\n    this.valueCount = valueCount;\n    blockShift = checkBlockSize(blockSize, MIN_BLOCK_SIZE, MAX_BLOCK_SIZE);\n    blockMask = blockSize - 1;\n    final int numBlocks = numBlocks(valueCount, blockSize);\n    long[] minValues = null;\n    subReaders = new PackedInts.Reader[numBlocks];\n    long sumBPV = 0;\n    for (int i = 0; i < numBlocks; ++i) {\n      final int token = in.readByte() & 0xFF;\n      final int bitsPerValue = token >>> BPV_SHIFT;\n      sumBPV += bitsPerValue;\n      if (bitsPerValue > 64) {\n        throw new IOException(\"Corrupted\");\n      }\n      if ((token & MIN_VALUE_EQUALS_0) == 0) {\n        if (minValues == null) {\n          minValues = new long[numBlocks];\n        }\n        minValues[i] = zigZagDecode(1L + readVLong(in));\n      }\n      if (bitsPerValue == 0) {\n        subReaders[i] = new PackedInts.NullReader(blockSize);\n      } else {\n        final int size = (int) Math.min(blockSize, valueCount - (long) i * blockSize);\n        if (direct) {\n          final long pointer = in.getFilePointer();\n          subReaders[i] = PackedInts.getDirectReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n          in.seek(pointer + PackedInts.Format.PACKED.byteCount(packedIntsVersion, size, bitsPerValue));\n        } else {\n          subReaders[i] = PackedInts.getReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n        }\n      }\n    }\n    this.minValues = minValues;\n    this.sumBPV = sumBPV;\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public BlockPackedReader(IndexInput in, int packedIntsVersion, int blockSize, long valueCount, boolean direct) throws IOException {\n    this.valueCount = valueCount;\n    blockShift = checkBlockSize(blockSize, MIN_BLOCK_SIZE, MAX_BLOCK_SIZE);\n    blockMask = blockSize - 1;\n    final int numBlocks = numBlocks(valueCount, blockSize);\n    long[] minValues = null;\n    subReaders = new PackedInts.Reader[numBlocks];\n    for (int i = 0; i < numBlocks; ++i) {\n      final int token = in.readByte() & 0xFF;\n      final int bitsPerValue = token >>> BPV_SHIFT;\n      if (bitsPerValue > 64) {\n        throw new IOException(\"Corrupted\");\n      }\n      if ((token & MIN_VALUE_EQUALS_0) == 0) {\n        if (minValues == null) {\n          minValues = new long[numBlocks];\n        }\n        minValues[i] = zigZagDecode(1L + readVLong(in));\n      }\n      if (bitsPerValue == 0) {\n        subReaders[i] = new PackedInts.NullReader(blockSize);\n      } else {\n        final int size = (int) Math.min(blockSize, valueCount - (long) i * blockSize);\n        if (direct) {\n          final long pointer = in.getFilePointer();\n          subReaders[i] = PackedInts.getDirectReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n          in.seek(pointer + PackedInts.Format.PACKED.byteCount(packedIntsVersion, size, bitsPerValue));\n        } else {\n          subReaders[i] = PackedInts.getReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n        }\n      }\n    }\n    this.minValues = minValues;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d9feb8c9f25bc8c1ce2d57d23ed4e4409f160d3","date":1487974429,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#BlockPackedReader(IndexInput,int,int,long,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#BlockPackedReader(IndexInput,int,int,long,boolean).mjava","sourceNew":"  /** Sole constructor. */\n  public BlockPackedReader(IndexInput in, int packedIntsVersion, int blockSize, long valueCount, boolean direct) throws IOException {\n    this.valueCount = valueCount;\n    blockShift = checkBlockSize(blockSize, MIN_BLOCK_SIZE, MAX_BLOCK_SIZE);\n    blockMask = blockSize - 1;\n    final int numBlocks = numBlocks(valueCount, blockSize);\n    long[] minValues = null;\n    subReaders = new PackedInts.Reader[numBlocks];\n    long sumBPV = 0;\n    for (int i = 0; i < numBlocks; ++i) {\n      final int token = in.readByte() & 0xFF;\n      final int bitsPerValue = token >>> BPV_SHIFT;\n      sumBPV += bitsPerValue;\n      if (bitsPerValue > 64) {\n        throw new CorruptIndexException(\"Corrupted Block#\" + i, in);\n      }\n      if ((token & MIN_VALUE_EQUALS_0) == 0) {\n        if (minValues == null) {\n          minValues = new long[numBlocks];\n        }\n        minValues[i] = zigZagDecode(1L + readVLong(in));\n      }\n      if (bitsPerValue == 0) {\n        subReaders[i] = new PackedInts.NullReader(blockSize);\n      } else {\n        final int size = (int) Math.min(blockSize, valueCount - (long) i * blockSize);\n        if (direct) {\n          final long pointer = in.getFilePointer();\n          subReaders[i] = PackedInts.getDirectReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n          in.seek(pointer + PackedInts.Format.PACKED.byteCount(packedIntsVersion, size, bitsPerValue));\n        } else {\n          subReaders[i] = PackedInts.getReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n        }\n      }\n    }\n    this.minValues = minValues;\n    this.sumBPV = sumBPV;\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public BlockPackedReader(IndexInput in, int packedIntsVersion, int blockSize, long valueCount, boolean direct) throws IOException {\n    this.valueCount = valueCount;\n    blockShift = checkBlockSize(blockSize, MIN_BLOCK_SIZE, MAX_BLOCK_SIZE);\n    blockMask = blockSize - 1;\n    final int numBlocks = numBlocks(valueCount, blockSize);\n    long[] minValues = null;\n    subReaders = new PackedInts.Reader[numBlocks];\n    long sumBPV = 0;\n    for (int i = 0; i < numBlocks; ++i) {\n      final int token = in.readByte() & 0xFF;\n      final int bitsPerValue = token >>> BPV_SHIFT;\n      sumBPV += bitsPerValue;\n      if (bitsPerValue > 64) {\n        throw new IOException(\"Corrupted\");\n      }\n      if ((token & MIN_VALUE_EQUALS_0) == 0) {\n        if (minValues == null) {\n          minValues = new long[numBlocks];\n        }\n        minValues[i] = zigZagDecode(1L + readVLong(in));\n      }\n      if (bitsPerValue == 0) {\n        subReaders[i] = new PackedInts.NullReader(blockSize);\n      } else {\n        final int size = (int) Math.min(blockSize, valueCount - (long) i * blockSize);\n        if (direct) {\n          final long pointer = in.getFilePointer();\n          subReaders[i] = PackedInts.getDirectReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n          in.seek(pointer + PackedInts.Format.PACKED.byteCount(packedIntsVersion, size, bitsPerValue));\n        } else {\n          subReaders[i] = PackedInts.getReaderNoHeader(in, PackedInts.Format.PACKED, packedIntsVersion, size, bitsPerValue);\n        }\n      }\n    }\n    this.minValues = minValues;\n    this.sumBPV = sumBPV;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e76d3450662dab47d54e3f462c7b3eba4e38b9ac":["37b84753dc1f66eba4973779932885fe42cde001"],"38ed11981e9035384eaae7fb49013b8156d7a977":["e76d3450662dab47d54e3f462c7b3eba4e38b9ac"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","38ed11981e9035384eaae7fb49013b8156d7a977"],"6d9feb8c9f25bc8c1ce2d57d23ed4e4409f160d3":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"37b84753dc1f66eba4973779932885fe42cde001":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f375a9203c9124207e176f4dc59bd8e832b239a0":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["f375a9203c9124207e176f4dc59bd8e832b239a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6d9feb8c9f25bc8c1ce2d57d23ed4e4409f160d3"]},"commit2Childs":{"e76d3450662dab47d54e3f462c7b3eba4e38b9ac":["38ed11981e9035384eaae7fb49013b8156d7a977"],"38ed11981e9035384eaae7fb49013b8156d7a977":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["f375a9203c9124207e176f4dc59bd8e832b239a0"],"6d9feb8c9f25bc8c1ce2d57d23ed4e4409f160d3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37b84753dc1f66eba4973779932885fe42cde001":["e76d3450662dab47d54e3f462c7b3eba4e38b9ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","37b84753dc1f66eba4973779932885fe42cde001"],"f375a9203c9124207e176f4dc59bd8e832b239a0":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["6d9feb8c9f25bc8c1ce2d57d23ed4e4409f160d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}