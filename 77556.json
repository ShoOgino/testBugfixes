{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/LetStream#open().mjava","commits":[{"id":"fea36811326410bd8200ab06f9067dcea141d903","date":1493079557,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/LetStream#open().mjava","pathOld":"/dev/null","sourceNew":"  public void open() throws IOException {\n    Map<String, List<Tuple>> lets = streamContext.getLets();\n    for(CellStream cellStream : cellStreams) {\n      try {\n        cellStream.setStreamContext(streamContext);\n        cellStream.open();\n        Tuple tup = cellStream.read();\n        String name = cellStream.getName();\n        List<Tuple> tuples = (List<Tuple>)tup.get(name);\n        lets.put(name, tuples);\n      } finally {\n        cellStream.close();\n      }\n    }\n    stream.open();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7","date":1493327009,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/LetStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/LetStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    Map<String, Object> lets = streamContext.getLets();\n    Set<Map.Entry<String, Object>> entries = letParams.entrySet();\n\n    //Load up the StreamContext with the data created by the letParams.\n    for(Map.Entry<String, Object> entry : entries) {\n      String name = entry.getKey();\n      Object o = entry.getValue();\n      if(o instanceof TupleStream) {\n        List<Tuple> tuples = new ArrayList();\n        TupleStream tStream = (TupleStream)o;\n        tStream.setStreamContext(streamContext);\n        try {\n          tStream.open();\n          TUPLES:\n          while(true) {\n            Tuple tuple = tStream.read();\n            if (tuple.EOF) {\n              break TUPLES;\n            } else {\n              tuples.add(tuple);\n            }\n          }\n          lets.put(name, tuples);\n        } finally {\n          tStream.close();\n        }\n      } else {\n        //Add the data from the StreamContext to a tuple.\n        //Let the evaluator work from this tuple.\n        //This will allow columns to be created from tuples already in the StreamContext.\n        Tuple eTuple = new Tuple(lets);\n        StreamEvaluator evaluator = (StreamEvaluator)o;\n        Object eo = evaluator.evaluate(eTuple);\n        lets.put(name, eo);\n      }\n    }\n    stream.open();\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    Map<String, List<Tuple>> lets = streamContext.getLets();\n    for(CellStream cellStream : cellStreams) {\n      try {\n        cellStream.setStreamContext(streamContext);\n        cellStream.open();\n        Tuple tup = cellStream.read();\n        String name = cellStream.getName();\n        List<Tuple> tuples = (List<Tuple>)tup.get(name);\n        lets.put(name, tuples);\n      } finally {\n        cellStream.close();\n      }\n    }\n    stream.open();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/LetStream#open().mjava","pathOld":"/dev/null","sourceNew":"  public void open() throws IOException {\n    Map<String, Object> lets = streamContext.getLets();\n    Set<Map.Entry<String, Object>> entries = letParams.entrySet();\n\n    //Load up the StreamContext with the data created by the letParams.\n    for(Map.Entry<String, Object> entry : entries) {\n      String name = entry.getKey();\n      Object o = entry.getValue();\n      if(o instanceof TupleStream) {\n        List<Tuple> tuples = new ArrayList();\n        TupleStream tStream = (TupleStream)o;\n        tStream.setStreamContext(streamContext);\n        try {\n          tStream.open();\n          TUPLES:\n          while(true) {\n            Tuple tuple = tStream.read();\n            if (tuple.EOF) {\n              break TUPLES;\n            } else {\n              tuples.add(tuple);\n            }\n          }\n          lets.put(name, tuples);\n        } finally {\n          tStream.close();\n        }\n      } else {\n        //Add the data from the StreamContext to a tuple.\n        //Let the evaluator work from this tuple.\n        //This will allow columns to be created from tuples already in the StreamContext.\n        Tuple eTuple = new Tuple(lets);\n        StreamEvaluator evaluator = (StreamEvaluator)o;\n        Object eo = evaluator.evaluate(eTuple);\n        lets.put(name, eo);\n      }\n    }\n    stream.open();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e70d554d88e3aea4d497d35dc15dbb191a5d2bc","date":1524237108,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/LetStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/LetStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    Map<String, Object> lets = streamContext.getLets();\n    Set<Map.Entry<String, Object>> entries = letParams.entrySet();\n\n    //Load up the StreamContext with the data created by the letParams.\n    for(Map.Entry<String, Object> entry : entries) {\n      String name = entry.getKey();\n      Object o = entry.getValue();\n      if(o instanceof TupleStream) {\n        List<Tuple> tuples = new ArrayList();\n        TupleStream tStream = (TupleStream)o;\n        tStream.setStreamContext(streamContext);\n        try {\n          tStream.open();\n          TUPLES:\n          while(true) {\n            Tuple tuple = tStream.read();\n            if (tuple.EOF) {\n              break TUPLES;\n            } else {\n              tuples.add(tuple);\n            }\n          }\n          lets.put(name, tuples);\n        } finally {\n          tStream.close();\n        }\n      } else {\n        //Add the data from the StreamContext to a tuple.\n        //Let the evaluator works from this tuple.\n        //This will allow columns to be created from tuples already in the StreamContext.\n        Tuple eTuple = new Tuple(lets);\n        StreamEvaluator evaluator = (StreamEvaluator)o;\n        evaluator.setStreamContext(streamContext);\n        Object eo = evaluator.evaluate(eTuple);\n        if(evaluator instanceof MemsetEvaluator) {\n          Map mem = (Map)eo;\n          lets.putAll(mem);\n        } else {\n          lets.put(name, eo);\n        }\n      }\n    }\n    stream.open();\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    Map<String, Object> lets = streamContext.getLets();\n    Set<Map.Entry<String, Object>> entries = letParams.entrySet();\n\n    //Load up the StreamContext with the data created by the letParams.\n    for(Map.Entry<String, Object> entry : entries) {\n      String name = entry.getKey();\n      Object o = entry.getValue();\n      if(o instanceof TupleStream) {\n        List<Tuple> tuples = new ArrayList();\n        TupleStream tStream = (TupleStream)o;\n        tStream.setStreamContext(streamContext);\n        try {\n          tStream.open();\n          TUPLES:\n          while(true) {\n            Tuple tuple = tStream.read();\n            if (tuple.EOF) {\n              break TUPLES;\n            } else {\n              tuples.add(tuple);\n            }\n          }\n          lets.put(name, tuples);\n        } finally {\n          tStream.close();\n        }\n      } else {\n        //Add the data from the StreamContext to a tuple.\n        //Let the evaluator work from this tuple.\n        //This will allow columns to be created from tuples already in the StreamContext.\n        Tuple eTuple = new Tuple(lets);\n        StreamEvaluator evaluator = (StreamEvaluator)o;\n        Object eo = evaluator.evaluate(eTuple);\n        lets.put(name, eo);\n      }\n    }\n    stream.open();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1df12fdfa92024c9bc6b6b0e70abb6f5a0cb61cc","date":1539269037,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/LetStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/LetStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    Map<String, Object> lets = streamContext.getLets();\n    Set<Map.Entry<String, Object>> entries = letParams.entrySet();\n\n    //Load up the StreamContext with the data created by the letParams.\n    for(Map.Entry<String, Object> entry : entries) {\n      String name = entry.getKey();\n      Object o = entry.getValue();\n      if(o instanceof TupleStream) {\n        List<Tuple> tuples = new ArrayList();\n        TupleStream tStream = (TupleStream)o;\n        tStream.setStreamContext(streamContext);\n        try {\n          tStream.open();\n          TUPLES:\n          while(true) {\n            Tuple tuple = tStream.read();\n            if (tuple.EOF) {\n              break TUPLES;\n            } else {\n              tuples.add(tuple);\n            }\n          }\n          lets.put(name, tuples);\n        } finally {\n          tStream.close();\n        }\n      } else if(o instanceof StreamEvaluator) {\n        //Add the data from the StreamContext to a tuple.\n        //Let the evaluator works from this tuple.\n        //This will allow columns to be created from tuples already in the StreamContext.\n        Tuple eTuple = new Tuple(lets);\n        StreamEvaluator evaluator = (StreamEvaluator)o;\n        evaluator.setStreamContext(streamContext);\n        Object eo = evaluator.evaluate(eTuple);\n        if(evaluator instanceof MemsetEvaluator) {\n          Map mem = (Map)eo;\n          lets.putAll(mem);\n        } else {\n          lets.put(name, eo);\n        }\n      } else {\n        lets.put(name, o);\n      }\n    }\n    stream.open();\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    Map<String, Object> lets = streamContext.getLets();\n    Set<Map.Entry<String, Object>> entries = letParams.entrySet();\n\n    //Load up the StreamContext with the data created by the letParams.\n    for(Map.Entry<String, Object> entry : entries) {\n      String name = entry.getKey();\n      Object o = entry.getValue();\n      if(o instanceof TupleStream) {\n        List<Tuple> tuples = new ArrayList();\n        TupleStream tStream = (TupleStream)o;\n        tStream.setStreamContext(streamContext);\n        try {\n          tStream.open();\n          TUPLES:\n          while(true) {\n            Tuple tuple = tStream.read();\n            if (tuple.EOF) {\n              break TUPLES;\n            } else {\n              tuples.add(tuple);\n            }\n          }\n          lets.put(name, tuples);\n        } finally {\n          tStream.close();\n        }\n      } else {\n        //Add the data from the StreamContext to a tuple.\n        //Let the evaluator works from this tuple.\n        //This will allow columns to be created from tuples already in the StreamContext.\n        Tuple eTuple = new Tuple(lets);\n        StreamEvaluator evaluator = (StreamEvaluator)o;\n        evaluator.setStreamContext(streamContext);\n        Object eo = evaluator.evaluate(eTuple);\n        if(evaluator instanceof MemsetEvaluator) {\n          Map mem = (Map)eo;\n          lets.putAll(mem);\n        } else {\n          lets.put(name, eo);\n        }\n      }\n    }\n    stream.open();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75","date":1591744896,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/LetStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/LetStream#open().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public void open() throws IOException {\n    Map<String, Object> lets = streamContext.getLets();\n    Set<Map.Entry<String, Object>> entries = letParams.entrySet();\n\n    //Load up the StreamContext with the data created by the letParams.\n    for(Map.Entry<String, Object> entry : entries) {\n      String name = entry.getKey();\n      Object o = entry.getValue();\n      if(o instanceof TupleStream) {\n        List<Tuple> tuples = new ArrayList<>();\n        TupleStream tStream = (TupleStream)o;\n        tStream.setStreamContext(streamContext);\n        try {\n          tStream.open();\n          TUPLES:\n          while(true) {\n            Tuple tuple = tStream.read();\n            if (tuple.EOF) {\n              break TUPLES;\n            } else {\n              tuples.add(tuple);\n            }\n          }\n          lets.put(name, tuples);\n        } finally {\n          tStream.close();\n        }\n      } else if(o instanceof StreamEvaluator) {\n        //Add the data from the StreamContext to a tuple.\n        //Let the evaluator works from this tuple.\n        //This will allow columns to be created from tuples already in the StreamContext.\n        Tuple eTuple = new Tuple(lets);\n        StreamEvaluator evaluator = (StreamEvaluator)o;\n        evaluator.setStreamContext(streamContext);\n        Object eo = evaluator.evaluate(eTuple);\n        if(evaluator instanceof MemsetEvaluator) {\n          @SuppressWarnings({\"rawtypes\"})\n          Map mem = (Map)eo;\n          lets.putAll(mem);\n        } else {\n          lets.put(name, eo);\n        }\n      } else {\n        lets.put(name, o);\n      }\n    }\n    stream.open();\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    Map<String, Object> lets = streamContext.getLets();\n    Set<Map.Entry<String, Object>> entries = letParams.entrySet();\n\n    //Load up the StreamContext with the data created by the letParams.\n    for(Map.Entry<String, Object> entry : entries) {\n      String name = entry.getKey();\n      Object o = entry.getValue();\n      if(o instanceof TupleStream) {\n        List<Tuple> tuples = new ArrayList();\n        TupleStream tStream = (TupleStream)o;\n        tStream.setStreamContext(streamContext);\n        try {\n          tStream.open();\n          TUPLES:\n          while(true) {\n            Tuple tuple = tStream.read();\n            if (tuple.EOF) {\n              break TUPLES;\n            } else {\n              tuples.add(tuple);\n            }\n          }\n          lets.put(name, tuples);\n        } finally {\n          tStream.close();\n        }\n      } else if(o instanceof StreamEvaluator) {\n        //Add the data from the StreamContext to a tuple.\n        //Let the evaluator works from this tuple.\n        //This will allow columns to be created from tuples already in the StreamContext.\n        Tuple eTuple = new Tuple(lets);\n        StreamEvaluator evaluator = (StreamEvaluator)o;\n        evaluator.setStreamContext(streamContext);\n        Object eo = evaluator.evaluate(eTuple);\n        if(evaluator instanceof MemsetEvaluator) {\n          Map mem = (Map)eo;\n          lets.putAll(mem);\n        } else {\n          lets.put(name, eo);\n        }\n      } else {\n        lets.put(name, o);\n      }\n    }\n    stream.open();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7":["fea36811326410bd8200ab06f9067dcea141d903"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7"],"0e70d554d88e3aea4d497d35dc15dbb191a5d2bc":["ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fea36811326410bd8200ab06f9067dcea141d903":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["1df12fdfa92024c9bc6b6b0e70abb6f5a0cb61cc"],"1df12fdfa92024c9bc6b6b0e70abb6f5a0cb61cc":["0e70d554d88e3aea4d497d35dc15dbb191a5d2bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"]},"commit2Childs":{"ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7":["e9017cf144952056066919f1ebc7897ff9bd71b1","0e70d554d88e3aea4d497d35dc15dbb191a5d2bc"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","fea36811326410bd8200ab06f9067dcea141d903"],"0e70d554d88e3aea4d497d35dc15dbb191a5d2bc":["1df12fdfa92024c9bc6b6b0e70abb6f5a0cb61cc"],"fea36811326410bd8200ab06f9067dcea141d903":["ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1df12fdfa92024c9bc6b6b0e70abb6f5a0cb61cc":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}