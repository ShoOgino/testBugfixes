{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReader#testLockObtainFailed().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReader#testLockObtainFailed().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexReader#testLockObtainFailed().mjava","sourceNew":"    // Make sure we get lock obtain failed exception with 2 writers:\n    public void testLockObtainFailed() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 11 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 11; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n\n        // Create reader:\n        reader = IndexReader.open(dir, false);\n\n        // Try to make changes\n        try {\n          reader.deleteDocument(4);\n          fail(\"deleteDocument should have hit LockObtainFailedException\");\n        } catch (LockObtainFailedException e) {\n          // expected\n        }\n\n        try {\n          reader.setNorm(5, \"aaa\", 2.0f);\n          fail(\"setNorm should have hit LockObtainFailedException\");\n        } catch (LockObtainFailedException e) {\n          // expected\n        }\n\n        try {\n          reader.undeleteAll();\n          fail(\"undeleteAll should have hit LockObtainFailedException\");\n        } catch (LockObtainFailedException e) {\n          // expected\n        }\n        writer.close();\n        reader.close();\n    }\n\n","sourceOld":"    // Make sure we get lock obtain failed exception with 2 writers:\n    public void testLockObtainFailed() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 11 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 11; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n\n        // Create reader:\n        reader = IndexReader.open(dir, false);\n\n        // Try to make changes\n        try {\n          reader.deleteDocument(4);\n          fail(\"deleteDocument should have hit LockObtainFailedException\");\n        } catch (LockObtainFailedException e) {\n          // expected\n        }\n\n        try {\n          reader.setNorm(5, \"aaa\", 2.0f);\n          fail(\"setNorm should have hit LockObtainFailedException\");\n        } catch (LockObtainFailedException e) {\n          // expected\n        }\n\n        try {\n          reader.undeleteAll();\n          fail(\"undeleteAll should have hit LockObtainFailedException\");\n        } catch (LockObtainFailedException e) {\n          // expected\n        }\n        writer.close();\n        reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9","date":1270985469,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReader#testLockObtainFailed().mjava","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReader#testLockObtainFailed().mjava","sourceNew":"    // Make sure we get lock obtain failed exception with 2 writers:\n    public void testLockObtainFailed() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 11 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.commit();\n        for (int i = 0; i < 11; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n\n        // Create reader:\n        reader = IndexReader.open(dir, false);\n\n        // Try to make changes\n        try {\n          reader.deleteDocument(4);\n          fail(\"deleteDocument should have hit LockObtainFailedException\");\n        } catch (LockObtainFailedException e) {\n          // expected\n        }\n\n        try {\n          reader.setNorm(5, \"aaa\", 2.0f);\n          fail(\"setNorm should have hit LockObtainFailedException\");\n        } catch (LockObtainFailedException e) {\n          // expected\n        }\n\n        try {\n          reader.undeleteAll();\n          fail(\"undeleteAll should have hit LockObtainFailedException\");\n        } catch (LockObtainFailedException e) {\n          // expected\n        }\n        writer.close();\n        reader.close();\n    }\n\n","sourceOld":"    // Make sure we get lock obtain failed exception with 2 writers:\n    public void testLockObtainFailed() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 11 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 11; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n\n        // Create reader:\n        reader = IndexReader.open(dir, false);\n\n        // Try to make changes\n        try {\n          reader.deleteDocument(4);\n          fail(\"deleteDocument should have hit LockObtainFailedException\");\n        } catch (LockObtainFailedException e) {\n          // expected\n        }\n\n        try {\n          reader.setNorm(5, \"aaa\", 2.0f);\n          fail(\"setNorm should have hit LockObtainFailedException\");\n        } catch (LockObtainFailedException e) {\n          // expected\n        }\n\n        try {\n          reader.undeleteAll();\n          fail(\"undeleteAll should have hit LockObtainFailedException\");\n        } catch (LockObtainFailedException e) {\n          // expected\n        }\n        writer.close();\n        reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10","date":1270996866,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReader#testLockObtainFailed().mjava","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReader#testLockObtainFailed().mjava","sourceNew":"    // Make sure we get lock obtain failed exception with 2 writers:\n    public void testLockObtainFailed() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 11 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 11; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n\n        // Create reader:\n        reader = IndexReader.open(dir, false);\n\n        // Try to make changes\n        try {\n          reader.deleteDocument(4);\n          fail(\"deleteDocument should have hit LockObtainFailedException\");\n        } catch (LockObtainFailedException e) {\n          // expected\n        }\n\n        try {\n          reader.setNorm(5, \"aaa\", 2.0f);\n          fail(\"setNorm should have hit LockObtainFailedException\");\n        } catch (LockObtainFailedException e) {\n          // expected\n        }\n\n        try {\n          reader.undeleteAll();\n          fail(\"undeleteAll should have hit LockObtainFailedException\");\n        } catch (LockObtainFailedException e) {\n          // expected\n        }\n        writer.close();\n        reader.close();\n    }\n\n","sourceOld":"    // Make sure we get lock obtain failed exception with 2 writers:\n    public void testLockObtainFailed() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 11 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.commit();\n        for (int i = 0; i < 11; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n\n        // Create reader:\n        reader = IndexReader.open(dir, false);\n\n        // Try to make changes\n        try {\n          reader.deleteDocument(4);\n          fail(\"deleteDocument should have hit LockObtainFailedException\");\n        } catch (LockObtainFailedException e) {\n          // expected\n        }\n\n        try {\n          reader.setNorm(5, \"aaa\", 2.0f);\n          fail(\"setNorm should have hit LockObtainFailedException\");\n        } catch (LockObtainFailedException e) {\n          // expected\n        }\n\n        try {\n          reader.undeleteAll();\n          fail(\"undeleteAll should have hit LockObtainFailedException\");\n        } catch (LockObtainFailedException e) {\n          // expected\n        }\n        writer.close();\n        reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4","date":1271167458,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReader#testLockObtainFailed().mjava","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReader#testLockObtainFailed().mjava","sourceNew":"    // Make sure we get lock obtain failed exception with 2 writers:\n    public void testLockObtainFailed() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 11 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.commit();\n        for (int i = 0; i < 11; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n\n        // Create reader:\n        reader = IndexReader.open(dir, false);\n\n        // Try to make changes\n        try {\n          reader.deleteDocument(4);\n          fail(\"deleteDocument should have hit LockObtainFailedException\");\n        } catch (LockObtainFailedException e) {\n          // expected\n        }\n\n        try {\n          reader.setNorm(5, \"aaa\", 2.0f);\n          fail(\"setNorm should have hit LockObtainFailedException\");\n        } catch (LockObtainFailedException e) {\n          // expected\n        }\n\n        try {\n          reader.undeleteAll();\n          fail(\"undeleteAll should have hit LockObtainFailedException\");\n        } catch (LockObtainFailedException e) {\n          // expected\n        }\n        writer.close();\n        reader.close();\n    }\n\n","sourceOld":"    // Make sure we get lock obtain failed exception with 2 writers:\n    public void testLockObtainFailed() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 11 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 11; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n\n        // Create reader:\n        reader = IndexReader.open(dir, false);\n\n        // Try to make changes\n        try {\n          reader.deleteDocument(4);\n          fail(\"deleteDocument should have hit LockObtainFailedException\");\n        } catch (LockObtainFailedException e) {\n          // expected\n        }\n\n        try {\n          reader.setNorm(5, \"aaa\", 2.0f);\n          fail(\"setNorm should have hit LockObtainFailedException\");\n        } catch (LockObtainFailedException e) {\n          // expected\n        }\n\n        try {\n          reader.undeleteAll();\n          fail(\"undeleteAll should have hit LockObtainFailedException\");\n        } catch (LockObtainFailedException e) {\n          // expected\n        }\n        writer.close();\n        reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReader#testLockObtainFailed().mjava","sourceNew":null,"sourceOld":"    // Make sure we get lock obtain failed exception with 2 writers:\n    public void testLockObtainFailed() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 11 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.commit();\n        for (int i = 0; i < 11; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n\n        // Create reader:\n        reader = IndexReader.open(dir, false);\n\n        // Try to make changes\n        try {\n          reader.deleteDocument(4);\n          fail(\"deleteDocument should have hit LockObtainFailedException\");\n        } catch (LockObtainFailedException e) {\n          // expected\n        }\n\n        try {\n          reader.setNorm(5, \"aaa\", 2.0f);\n          fail(\"setNorm should have hit LockObtainFailedException\");\n        } catch (LockObtainFailedException e) {\n          // expected\n        }\n\n        try {\n          reader.undeleteAll();\n          fail(\"undeleteAll should have hit LockObtainFailedException\");\n        } catch (LockObtainFailedException e) {\n          // expected\n        }\n        writer.close();\n        reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10":["b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}