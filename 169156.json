{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimClusterStateProvider#testAddRemoveNode().mjava","commits":[{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimClusterStateProvider#testAddRemoveNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestClusterStateProvider#testAddRemoveNode().mjava","sourceNew":"  @Test\n  public void testAddRemoveNode() throws Exception {\n    Set<String> lastNodes = new HashSet<>(cloudManager.getClusterStateProvider().getLiveNodes());\n    List<String> liveNodes = cloudManager.getDistribStateManager().listData(ZkStateReader.LIVE_NODES_ZKNODE);\n    assertEquals(lastNodes.size(), liveNodes.size());\n    liveNodes.removeAll(lastNodes);\n    assertTrue(liveNodes.isEmpty());\n\n    String node = addNode();\n    cloudManager.getTimeSource().sleep(2000);\n    assertFalse(lastNodes.contains(node));\n    lastNodes = new HashSet<>(cloudManager.getClusterStateProvider().getLiveNodes());\n    assertTrue(lastNodes.contains(node));\n    liveNodes = cloudManager.getDistribStateManager().listData(ZkStateReader.LIVE_NODES_ZKNODE);\n    assertEquals(lastNodes.size(), liveNodes.size());\n    liveNodes.removeAll(lastNodes);\n    assertTrue(liveNodes.isEmpty());\n\n    node = deleteNode();\n    cloudManager.getTimeSource().sleep(2000);\n    assertTrue(lastNodes.contains(node));\n    lastNodes = new HashSet<>(cloudManager.getClusterStateProvider().getLiveNodes());\n    assertFalse(lastNodes.contains(node));\n    liveNodes = cloudManager.getDistribStateManager().listData(ZkStateReader.LIVE_NODES_ZKNODE);\n    assertEquals(lastNodes.size(), liveNodes.size());\n    liveNodes.removeAll(lastNodes);\n    assertTrue(liveNodes.isEmpty());  }\n\n","sourceOld":"  @Test\n  public void testAddRemoveNode() throws Exception {\n    Set<String> lastNodes = new HashSet<>(cloudManager.getClusterStateProvider().getLiveNodes());\n    List<String> liveNodes = cloudManager.getDistribStateManager().listData(ZkStateReader.LIVE_NODES_ZKNODE);\n    assertEquals(lastNodes.size(), liveNodes.size());\n    liveNodes.removeAll(lastNodes);\n    assertTrue(liveNodes.isEmpty());\n\n    String node = addNode();\n    cloudManager.getTimeSource().sleep(2000);\n    assertFalse(lastNodes.contains(node));\n    lastNodes = new HashSet<>(cloudManager.getClusterStateProvider().getLiveNodes());\n    assertTrue(lastNodes.contains(node));\n    liveNodes = cloudManager.getDistribStateManager().listData(ZkStateReader.LIVE_NODES_ZKNODE);\n    assertEquals(lastNodes.size(), liveNodes.size());\n    liveNodes.removeAll(lastNodes);\n    assertTrue(liveNodes.isEmpty());\n\n    node = deleteNode();\n    cloudManager.getTimeSource().sleep(2000);\n    assertTrue(lastNodes.contains(node));\n    lastNodes = new HashSet<>(cloudManager.getClusterStateProvider().getLiveNodes());\n    assertFalse(lastNodes.contains(node));\n    liveNodes = cloudManager.getDistribStateManager().listData(ZkStateReader.LIVE_NODES_ZKNODE);\n    assertEquals(lastNodes.size(), liveNodes.size());\n    liveNodes.removeAll(lastNodes);\n    assertTrue(liveNodes.isEmpty());  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimClusterStateProvider#testAddRemoveNode().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testAddRemoveNode() throws Exception {\n    Set<String> lastNodes = new HashSet<>(cloudManager.getClusterStateProvider().getLiveNodes());\n    List<String> liveNodes = cloudManager.getDistribStateManager().listData(ZkStateReader.LIVE_NODES_ZKNODE);\n    assertEquals(lastNodes.size(), liveNodes.size());\n    liveNodes.removeAll(lastNodes);\n    assertTrue(liveNodes.isEmpty());\n\n    String node = addNode();\n    cloudManager.getTimeSource().sleep(2000);\n    assertFalse(lastNodes.contains(node));\n    lastNodes = new HashSet<>(cloudManager.getClusterStateProvider().getLiveNodes());\n    assertTrue(lastNodes.contains(node));\n    liveNodes = cloudManager.getDistribStateManager().listData(ZkStateReader.LIVE_NODES_ZKNODE);\n    assertEquals(lastNodes.size(), liveNodes.size());\n    liveNodes.removeAll(lastNodes);\n    assertTrue(liveNodes.isEmpty());\n\n    node = deleteNode();\n    cloudManager.getTimeSource().sleep(2000);\n    assertTrue(lastNodes.contains(node));\n    lastNodes = new HashSet<>(cloudManager.getClusterStateProvider().getLiveNodes());\n    assertFalse(lastNodes.contains(node));\n    liveNodes = cloudManager.getDistribStateManager().listData(ZkStateReader.LIVE_NODES_ZKNODE);\n    assertEquals(lastNodes.size(), liveNodes.size());\n    liveNodes.removeAll(lastNodes);\n    assertTrue(liveNodes.isEmpty());  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}