{"path":"sandbox/contributions/WordNet/src/java/org/apache/lucene/wordnet/SynLookup#main(String[]).mjava","commits":[{"id":"c6ca581d764bbde3148bee393785ac392174d9c3","date":1075138175,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"sandbox/contributions/WordNet/src/java/org/apache/lucene/wordnet/SynLookup#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  public static void main(String[] args) throws IOException {\n    if (args.length != 2) {\n      System.out.println(\n    \"java org.apache.lucene.wordnet.SynLookup <index path> <word>\");\n    }\n\n    FSDirectory directory = FSDirectory.getDirectory(args[0], false);\n    IndexSearcher searcher = new IndexSearcher(directory);\n\n    String word = args[1];\n    Hits hits = searcher.search(\n      new TermQuery(new Term(\"word\", word)));\n\n    if (hits.length() == 0) {\n      System.out.println(\"No synonyms found for \" + word);\n    } else {\n      System.out.println(\"Synonyms found for \\\"\" + word + \"\\\":\");\n    }\n\n    for (int i = 0; i < hits.length(); i++) {\n      Document doc = hits.doc(i);\n\n      String[] values = doc.getValues(\"syn\");\n\n      for (int j = 0; j < values.length; j++) {\n        System.out.println(values[j]);\n      }\n    }\n\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c66ea4e08d5b7e32ff205b48896a4da9bf70ac7a","date":1105477091,"type":3,"author":"David Spencer","isMerge":false,"pathNew":"sandbox/contributions/WordNet/src/java/org/apache/lucene/wordnet/SynLookup#main(String[]).mjava","pathOld":"sandbox/contributions/WordNet/src/java/org/apache/lucene/wordnet/SynLookup#main(String[]).mjava","sourceNew":"\tpublic static void main(String[] args) throws IOException {\n\t\tif (args.length != 2) {\n\t\t\tSystem.out.println(\n\t\t\t\t\t\t\t   \"java org.apache.lucene.wordnet.SynLookup <index path> <word>\");\n\t\t}\n\n\t\tFSDirectory directory = FSDirectory.getDirectory(args[0], false);\n\t\tIndexSearcher searcher = new IndexSearcher(directory);\n\n\t\tString word = args[1];\n\t\tHits hits = searcher.search(\n\t\t\t\t\t\t\t\t\tnew TermQuery(new Term(Syns2Index.F_WORD, word)));\n\n\t\tif (hits.length() == 0) {\n\t\t\tSystem.out.println(\"No synonyms found for \" + word);\n\t\t} else {\n\t\t\tSystem.out.println(\"Synonyms found for \\\"\" + word + \"\\\":\");\n\t\t}\n\n\t\tfor (int i = 0; i < hits.length(); i++) {\n\t\t\tDocument doc = hits.doc(i);\n\n\t\t\tString[] values = doc.getValues(Syns2Index.F_SYN);\n\n\t\t\tfor (int j = 0; j < values.length; j++) {\n\t\t\t\tSystem.out.println(values[j]);\n\t\t\t}\n\t\t}\n\n\t\tsearcher.close();\n\t\tdirectory.close();\n\t}\n\n","sourceOld":"  public static void main(String[] args) throws IOException {\n    if (args.length != 2) {\n      System.out.println(\n    \"java org.apache.lucene.wordnet.SynLookup <index path> <word>\");\n    }\n\n    FSDirectory directory = FSDirectory.getDirectory(args[0], false);\n    IndexSearcher searcher = new IndexSearcher(directory);\n\n    String word = args[1];\n    Hits hits = searcher.search(\n      new TermQuery(new Term(\"word\", word)));\n\n    if (hits.length() == 0) {\n      System.out.println(\"No synonyms found for \" + word);\n    } else {\n      System.out.println(\"Synonyms found for \\\"\" + word + \"\\\":\");\n    }\n\n    for (int i = 0; i < hits.length(); i++) {\n      Document doc = hits.doc(i);\n\n      String[] values = doc.getValues(\"syn\");\n\n      for (int j = 0; j < values.length; j++) {\n        System.out.println(values[j]);\n      }\n    }\n\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"043c298cb215f13ba7b9b81d20760704e8f93d66","date":1107566743,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/WordNet/src/java/org/apache/lucene/wordnet/SynLookup#main(String[]).mjava","pathOld":"sandbox/contributions/WordNet/src/java/org/apache/lucene/wordnet/SynLookup#main(String[]).mjava","sourceNew":"\tpublic static void main(String[] args) throws IOException {\n\t\tif (args.length != 2) {\n\t\t\tSystem.out.println(\n\t\t\t\t\t\t\t   \"java org.apache.lucene.wordnet.SynLookup <index path> <word>\");\n\t\t}\n\n\t\tFSDirectory directory = FSDirectory.getDirectory(args[0], false);\n\t\tIndexSearcher searcher = new IndexSearcher(directory);\n\n\t\tString word = args[1];\n\t\tHits hits = searcher.search(\n\t\t\t\t\t\t\t\t\tnew TermQuery(new Term(Syns2Index.F_WORD, word)));\n\n\t\tif (hits.length() == 0) {\n\t\t\tSystem.out.println(\"No synonyms found for \" + word);\n\t\t} else {\n\t\t\tSystem.out.println(\"Synonyms found for \\\"\" + word + \"\\\":\");\n\t\t}\n\n\t\tfor (int i = 0; i < hits.length(); i++) {\n\t\t\tDocument doc = hits.doc(i);\n\n\t\t\tString[] values = doc.getValues(Syns2Index.F_SYN);\n\n\t\t\tfor (int j = 0; j < values.length; j++) {\n\t\t\t\tSystem.out.println(values[j]);\n\t\t\t}\n\t\t}\n\n\t\tsearcher.close();\n\t\tdirectory.close();\n\t}\n\n","sourceOld":"\tpublic static void main(String[] args) throws IOException {\n\t\tif (args.length != 2) {\n\t\t\tSystem.out.println(\n\t\t\t\t\t\t\t   \"java org.apache.lucene.wordnet.SynLookup <index path> <word>\");\n\t\t}\n\n\t\tFSDirectory directory = FSDirectory.getDirectory(args[0], false);\n\t\tIndexSearcher searcher = new IndexSearcher(directory);\n\n\t\tString word = args[1];\n\t\tHits hits = searcher.search(\n\t\t\t\t\t\t\t\t\tnew TermQuery(new Term(Syns2Index.F_WORD, word)));\n\n\t\tif (hits.length() == 0) {\n\t\t\tSystem.out.println(\"No synonyms found for \" + word);\n\t\t} else {\n\t\t\tSystem.out.println(\"Synonyms found for \\\"\" + word + \"\\\":\");\n\t\t}\n\n\t\tfor (int i = 0; i < hits.length(); i++) {\n\t\t\tDocument doc = hits.doc(i);\n\n\t\t\tString[] values = doc.getValues(Syns2Index.F_SYN);\n\n\t\t\tfor (int j = 0; j < values.length; j++) {\n\t\t\t\tSystem.out.println(values[j]);\n\t\t\t}\n\t\t}\n\n\t\tsearcher.close();\n\t\tdirectory.close();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["c66ea4e08d5b7e32ff205b48896a4da9bf70ac7a"],"c6ca581d764bbde3148bee393785ac392174d9c3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c66ea4e08d5b7e32ff205b48896a4da9bf70ac7a":["c6ca581d764bbde3148bee393785ac392174d9c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["043c298cb215f13ba7b9b81d20760704e8f93d66"]},"commit2Childs":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c6ca581d764bbde3148bee393785ac392174d9c3":["c66ea4e08d5b7e32ff205b48896a4da9bf70ac7a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c6ca581d764bbde3148bee393785ac392174d9c3"],"c66ea4e08d5b7e32ff205b48896a4da9bf70ac7a":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}