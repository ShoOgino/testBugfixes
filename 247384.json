{"path":"lucene/backwards/src/java/org/apache/lucene/search/FilterManager.FilterCleaner#run().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/FilterManager.FilterCleaner#run().mjava","pathOld":"backwards/src/java/org/apache/lucene/search/FilterManager.FilterCleaner#run().mjava","sourceNew":"    public void run () {\n      while (running) {\n\n        // sort items from oldest to newest \n        // we delete the oldest filters \n        if (cache.size() > cacheCleanSize) {\n          // empty the temporary set\n          sortedFilterItems.clear();\n          synchronized (cache) {\n            sortedFilterItems.addAll(cache.entrySet());\n            Iterator<Map.Entry<Integer,FilterItem>> it = sortedFilterItems.iterator();\n            int numToDelete = (int) ((cache.size() - cacheCleanSize) * 1.5);\n            int counter = 0;\n            // loop over the set and delete all of the cache entries not used in a while\n            while (it.hasNext() && counter++ < numToDelete) {\n              Map.Entry<Integer,FilterItem> entry = it.next();\n              cache.remove(entry.getKey());\n            }\n          }\n          // empty the set so we don't tie up the memory\n          sortedFilterItems.clear();\n        }\n        // take a nap\n        try {\n          Thread.sleep(cleanSleepTime);\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n      }\n    }\n\n","sourceOld":"    public void run () {\n      while (running) {\n\n        // sort items from oldest to newest \n        // we delete the oldest filters \n        if (cache.size() > cacheCleanSize) {\n          // empty the temporary set\n          sortedFilterItems.clear();\n          synchronized (cache) {\n            sortedFilterItems.addAll(cache.entrySet());\n            Iterator<Map.Entry<Integer,FilterItem>> it = sortedFilterItems.iterator();\n            int numToDelete = (int) ((cache.size() - cacheCleanSize) * 1.5);\n            int counter = 0;\n            // loop over the set and delete all of the cache entries not used in a while\n            while (it.hasNext() && counter++ < numToDelete) {\n              Map.Entry<Integer,FilterItem> entry = it.next();\n              cache.remove(entry.getKey());\n            }\n          }\n          // empty the set so we don't tie up the memory\n          sortedFilterItems.clear();\n        }\n        // take a nap\n        try {\n          Thread.sleep(cleanSleepTime);\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/search/FilterManager.FilterCleaner#run().mjava","sourceNew":null,"sourceOld":"    public void run () {\n      while (running) {\n\n        // sort items from oldest to newest \n        // we delete the oldest filters \n        if (cache.size() > cacheCleanSize) {\n          // empty the temporary set\n          sortedFilterItems.clear();\n          synchronized (cache) {\n            sortedFilterItems.addAll(cache.entrySet());\n            Iterator<Map.Entry<Integer,FilterItem>> it = sortedFilterItems.iterator();\n            int numToDelete = (int) ((cache.size() - cacheCleanSize) * 1.5);\n            int counter = 0;\n            // loop over the set and delete all of the cache entries not used in a while\n            while (it.hasNext() && counter++ < numToDelete) {\n              Map.Entry<Integer,FilterItem> entry = it.next();\n              cache.remove(entry.getKey());\n            }\n          }\n          // empty the set so we don't tie up the memory\n          sortedFilterItems.clear();\n        }\n        // take a nap\n        try {\n          Thread.sleep(cleanSleepTime);\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}