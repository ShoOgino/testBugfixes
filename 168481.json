{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","sourceNew":" @Test\n public void testContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update/csv\");\n    up.addFile(getFile(\"books.csv\"));\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n  }\n\n","sourceOld":" @Test\n public void testContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update/csv\");\n    up.addFile(getFile(\"books.csv\"));\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","sourceNew":" @Test\n public void testContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update/csv\");\n    up.addFile(getFile(\"books.csv\"));\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n }\n\n","sourceOld":" @Test\n public void testContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update/csv\");\n    up.addFile(getFile(\"books.csv\"));\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","sourceNew":" @Test\n public void testContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update/csv\");\n    up.addFile(getFile(\"books.csv\"));\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n }\n\n","sourceOld":" @Test\n public void testContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update/csv\");\n    up.addFile(getFile(\"books.csv\"));\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","sourceNew":" @Test\n public void testContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update/csv\");\n    up.addFile(getFile(\"books.csv\"));\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n }\n\n","sourceOld":" @Test\n public void testContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update/csv\");\n    up.addFile(getFile(\"books.csv\"));\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abd55340ba9df8b62edcd692b34e46cf0614a52e","date":1311341057,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","sourceNew":" @Test\n public void testContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update/csv\");\n    up.addFile(getFile(\"solrj/books.csv\"));\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n }\n\n","sourceOld":" @Test\n public void testContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update/csv\");\n    up.addFile(getFile(\"books.csv\"));\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"042e4d934397657ba04c82b46cc5665076bc5c58","date":1336511170,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","sourceNew":" @Test\n public void testContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update\");\n    up.addFile(getFile(\"solrj/books.csv\"), \"application/csv\");\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n }\n\n","sourceOld":" @Test\n public void testContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update/csv\");\n    up.addFile(getFile(\"solrj/books.csv\"));\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n }\n\n","bugFix":null,"bugIntro":["2fa09af38078ac45810ddc861bd3b4f9acc96d0d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","sourceNew":" @Test\n public void testContentStreamRequest() throws Exception {\n    SolrClient client = getSolrClient();\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    QueryResponse rsp = client.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals(0, rsp.getResults().getNumFound());\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update\");\n    up.addFile(getFile(\"solrj/books.csv\"), \"application/csv\");\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = client.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = client.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n }\n\n","sourceOld":" @Test\n public void testContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update\");\n    up.addFile(getFile(\"solrj/books.csv\"), \"application/csv\");\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2fa09af38078ac45810ddc861bd3b4f9acc96d0d","date":1561149488,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","sourceNew":" @Test\n public void testContentStreamRequest() throws Exception {\n    SolrClient client = getSolrClient();\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    QueryResponse rsp = client.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals(0, rsp.getResults().getNumFound());\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update\");\n    var file = getFile(\"solrj/books.csv\");\n    final int opened[] =  new int[] {0};\n    final int closed[] =  new int[] {0};\n\n    var assertClosed = random().nextBoolean();\n    if (assertClosed) {\n      var allBytes = Files.readAllBytes(file.toPath());\n      \n      var contentStreamMock = new ContentStreamBase.ByteArrayStream(allBytes, \"solrj/books.csv\", \"application/csv\") {\n        @Override\n        public InputStream getStream() throws IOException {\n          opened [0]++;\n          return new ByteArrayInputStream( allBytes ) {\n            @Override\n            public void close() throws IOException {\n              super.close();\n              closed[0]++;\n            }\n          };\n        }\n      };\n      up.addContentStream(contentStreamMock);\n    } else {\n      up.addFile(file, \"application/csv\");\n    }\n    \n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = client.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    \n    if (assertClosed) {\n      assertEquals(\"open only once\",1, opened[0]);\n      assertEquals(\"close exactly once\",1, closed[0]);\n    }\n    rsp = client.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n }\n\n","sourceOld":" @Test\n public void testContentStreamRequest() throws Exception {\n    SolrClient client = getSolrClient();\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    QueryResponse rsp = client.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals(0, rsp.getResults().getNumFound());\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update\");\n    up.addFile(getFile(\"solrj/books.csv\"), \"application/csv\");\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = client.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = client.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n }\n\n","bugFix":["042e4d934397657ba04c82b46cc5665076bc5c58"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a92658f4d164e8a46ecbd08a44b6bf7bef1b5cc","date":1565538594,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","sourceNew":" @Test\n public void testContentStreamRequest() throws Exception {\n    SolrClient client = getSolrClient();\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    QueryResponse rsp = client.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals(0, rsp.getResults().getNumFound());\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update\");\n    File file = getFile(\"solrj/books.csv\");\n    final int opened[] =  new int[] {0};\n    final int closed[] =  new int[] {0};\n\n    boolean assertClosed = random().nextBoolean();\n    if (assertClosed) {\n      byte[] allBytes = Files.readAllBytes(file.toPath());\n\n      ContentStreamBase.ByteArrayStream contentStreamMock = new ContentStreamBase.ByteArrayStream(allBytes, \"solrj/books.csv\", \"application/csv\") {\n        @Override\n        public InputStream getStream() throws IOException {\n          opened [0]++;\n          return new ByteArrayInputStream( allBytes ) {\n            @Override\n            public void close() throws IOException {\n              super.close();\n              closed[0]++;\n            }\n          };\n        }\n      };\n      up.addContentStream(contentStreamMock);\n    } else {\n      up.addFile(file, \"application/csv\");\n    }\n    \n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = client.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    \n    if (assertClosed) {\n      assertEquals(\"open only once\",1, opened[0]);\n      assertEquals(\"close exactly once\",1, closed[0]);\n    }\n    rsp = client.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n }\n\n","sourceOld":" @Test\n public void testContentStreamRequest() throws Exception {\n    SolrClient client = getSolrClient();\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    QueryResponse rsp = client.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals(0, rsp.getResults().getNumFound());\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update\");\n    var file = getFile(\"solrj/books.csv\");\n    final int opened[] =  new int[] {0};\n    final int closed[] =  new int[] {0};\n\n    var assertClosed = random().nextBoolean();\n    if (assertClosed) {\n      var allBytes = Files.readAllBytes(file.toPath());\n      \n      var contentStreamMock = new ContentStreamBase.ByteArrayStream(allBytes, \"solrj/books.csv\", \"application/csv\") {\n        @Override\n        public InputStream getStream() throws IOException {\n          opened [0]++;\n          return new ByteArrayInputStream( allBytes ) {\n            @Override\n            public void close() throws IOException {\n              super.close();\n              closed[0]++;\n            }\n          };\n        }\n      };\n      up.addContentStream(contentStreamMock);\n    } else {\n      up.addFile(file, \"application/csv\");\n    }\n    \n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = client.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    \n    if (assertClosed) {\n      assertEquals(\"open only once\",1, opened[0]);\n      assertEquals(\"close exactly once\",1, closed[0]);\n    }\n    rsp = client.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f0b9507caf22f292ac0e5e59f62db4275adf4511":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"042e4d934397657ba04c82b46cc5665076bc5c58":["abd55340ba9df8b62edcd692b34e46cf0614a52e"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9507caf22f292ac0e5e59f62db4275adf4511"],"4a92658f4d164e8a46ecbd08a44b6bf7bef1b5cc":["2fa09af38078ac45810ddc861bd3b4f9acc96d0d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["042e4d934397657ba04c82b46cc5665076bc5c58"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2fa09af38078ac45810ddc861bd3b4f9acc96d0d":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4a92658f4d164e8a46ecbd08a44b6bf7bef1b5cc"],"abd55340ba9df8b62edcd692b34e46cf0614a52e":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"f0b9507caf22f292ac0e5e59f62db4275adf4511":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["f0b9507caf22f292ac0e5e59f62db4275adf4511"],"042e4d934397657ba04c82b46cc5665076bc5c58":["bafca15d8e408346a67f4282ad1143b88023893b"],"c26f00b574427b55127e869b935845554afde1fa":["abd55340ba9df8b62edcd692b34e46cf0614a52e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"4a92658f4d164e8a46ecbd08a44b6bf7bef1b5cc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["f0b9507caf22f292ac0e5e59f62db4275adf4511"],"bafca15d8e408346a67f4282ad1143b88023893b":["2fa09af38078ac45810ddc861bd3b4f9acc96d0d"],"2fa09af38078ac45810ddc861bd3b4f9acc96d0d":["4a92658f4d164e8a46ecbd08a44b6bf7bef1b5cc"],"abd55340ba9df8b62edcd692b34e46cf0614a52e":["042e4d934397657ba04c82b46cc5665076bc5c58"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}