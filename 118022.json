{"path":"solr/core/src/test/org/apache/solr/util/PrimUtilsTest#testSort().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/PrimUtilsTest#testSort().mjava","pathOld":"solr/src/test/org/apache/solr/util/PrimUtilsTest#testSort().mjava","sourceNew":"  public void testSort() {\n    int maxSize = 100;\n    int maxVal = 100;\n    int[] a = new int[maxSize];\n    int[] b = new int[maxSize];\n\n    PrimUtils.IntComparator comparator = new PrimUtils.IntComparator() {\n      @Override\n      public int compare(int a, int b) {\n        return b - a;     // sort in reverse\n      }\n    };\n\n    for (int iter=0; iter<100; iter++) {\n      int start = random.nextInt(maxSize+1);\n      int end = start==maxSize ? maxSize : start + random.nextInt(maxSize-start);\n      for (int i=start; i<end; i++) {\n        a[i] = b[i] = random.nextInt(maxVal);\n      }\n      PrimUtils.sort(start, end, a, comparator);\n      Arrays.sort(b, start, end);\n      for (int i=start; i<end; i++) {\n        assertEquals(a[i], b[end-(i-start+1)]);\n      }\n    }\n  }\n\n","sourceOld":"  public void testSort() {\n    int maxSize = 100;\n    int maxVal = 100;\n    int[] a = new int[maxSize];\n    int[] b = new int[maxSize];\n\n    PrimUtils.IntComparator comparator = new PrimUtils.IntComparator() {\n      @Override\n      public int compare(int a, int b) {\n        return b - a;     // sort in reverse\n      }\n    };\n\n    for (int iter=0; iter<100; iter++) {\n      int start = random.nextInt(maxSize+1);\n      int end = start==maxSize ? maxSize : start + random.nextInt(maxSize-start);\n      for (int i=start; i<end; i++) {\n        a[i] = b[i] = random.nextInt(maxVal);\n      }\n      PrimUtils.sort(start, end, a, comparator);\n      Arrays.sort(b, start, end);\n      for (int i=start; i<end; i++) {\n        assertEquals(a[i], b[end-(i-start+1)]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/PrimUtilsTest#testSort().mjava","pathOld":"solr/src/test/org/apache/solr/util/PrimUtilsTest#testSort().mjava","sourceNew":"  public void testSort() {\n    int maxSize = 100;\n    int maxVal = 100;\n    int[] a = new int[maxSize];\n    int[] b = new int[maxSize];\n\n    PrimUtils.IntComparator comparator = new PrimUtils.IntComparator() {\n      @Override\n      public int compare(int a, int b) {\n        return b - a;     // sort in reverse\n      }\n    };\n\n    for (int iter=0; iter<100; iter++) {\n      int start = random.nextInt(maxSize+1);\n      int end = start==maxSize ? maxSize : start + random.nextInt(maxSize-start);\n      for (int i=start; i<end; i++) {\n        a[i] = b[i] = random.nextInt(maxVal);\n      }\n      PrimUtils.sort(start, end, a, comparator);\n      Arrays.sort(b, start, end);\n      for (int i=start; i<end; i++) {\n        assertEquals(a[i], b[end-(i-start+1)]);\n      }\n    }\n  }\n\n","sourceOld":"  public void testSort() {\n    int maxSize = 100;\n    int maxVal = 100;\n    int[] a = new int[maxSize];\n    int[] b = new int[maxSize];\n\n    PrimUtils.IntComparator comparator = new PrimUtils.IntComparator() {\n      @Override\n      public int compare(int a, int b) {\n        return b - a;     // sort in reverse\n      }\n    };\n\n    for (int iter=0; iter<100; iter++) {\n      int start = random.nextInt(maxSize+1);\n      int end = start==maxSize ? maxSize : start + random.nextInt(maxSize-start);\n      for (int i=start; i<end; i++) {\n        a[i] = b[i] = random.nextInt(maxVal);\n      }\n      PrimUtils.sort(start, end, a, comparator);\n      Arrays.sort(b, start, end);\n      for (int i=start; i<end; i++) {\n        assertEquals(a[i], b[end-(i-start+1)]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/PrimUtilsTest#testSort().mjava","pathOld":"solr/src/test/org/apache/solr/util/PrimUtilsTest#testSort().mjava","sourceNew":"  public void testSort() {\n    int maxSize = 100;\n    int maxVal = 100;\n    int[] a = new int[maxSize];\n    int[] b = new int[maxSize];\n\n    PrimUtils.IntComparator comparator = new PrimUtils.IntComparator() {\n      @Override\n      public int compare(int a, int b) {\n        return b - a;     // sort in reverse\n      }\n    };\n\n    for (int iter=0; iter<100; iter++) {\n      int start = random.nextInt(maxSize+1);\n      int end = start==maxSize ? maxSize : start + random.nextInt(maxSize-start);\n      for (int i=start; i<end; i++) {\n        a[i] = b[i] = random.nextInt(maxVal);\n      }\n      PrimUtils.sort(start, end, a, comparator);\n      Arrays.sort(b, start, end);\n      for (int i=start; i<end; i++) {\n        assertEquals(a[i], b[end-(i-start+1)]);\n      }\n    }\n  }\n\n","sourceOld":"  public void testSort() {\n    int maxSize = 100;\n    int maxVal = 100;\n    int[] a = new int[maxSize];\n    int[] b = new int[maxSize];\n\n    PrimUtils.IntComparator comparator = new PrimUtils.IntComparator() {\n      @Override\n      public int compare(int a, int b) {\n        return b - a;     // sort in reverse\n      }\n    };\n\n    for (int iter=0; iter<100; iter++) {\n      int start = random.nextInt(maxSize+1);\n      int end = start==maxSize ? maxSize : start + random.nextInt(maxSize-start);\n      for (int i=start; i<end; i++) {\n        a[i] = b[i] = random.nextInt(maxVal);\n      }\n      PrimUtils.sort(start, end, a, comparator);\n      Arrays.sort(b, start, end);\n      for (int i=start; i<end; i++) {\n        assertEquals(a[i], b[end-(i-start+1)]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/PrimUtilsTest#testSort().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/PrimUtilsTest#testSort().mjava","sourceNew":"  public void testSort() {\n    int maxSize = 100;\n    int maxVal = 100;\n    int[] a = new int[maxSize];\n    int[] b = new int[maxSize];\n\n    PrimUtils.IntComparator comparator = new PrimUtils.IntComparator() {\n      @Override\n      public int compare(int a, int b) {\n        return b - a;     // sort in reverse\n      }\n    };\n\n    for (int iter=0; iter<100; iter++) {\n      int start = random().nextInt(maxSize+1);\n      int end = start==maxSize ? maxSize : start + random().nextInt(maxSize-start);\n      for (int i=start; i<end; i++) {\n        a[i] = b[i] = random().nextInt(maxVal);\n      }\n      PrimUtils.sort(start, end, a, comparator);\n      Arrays.sort(b, start, end);\n      for (int i=start; i<end; i++) {\n        assertEquals(a[i], b[end-(i-start+1)]);\n      }\n    }\n  }\n\n","sourceOld":"  public void testSort() {\n    int maxSize = 100;\n    int maxVal = 100;\n    int[] a = new int[maxSize];\n    int[] b = new int[maxSize];\n\n    PrimUtils.IntComparator comparator = new PrimUtils.IntComparator() {\n      @Override\n      public int compare(int a, int b) {\n        return b - a;     // sort in reverse\n      }\n    };\n\n    for (int iter=0; iter<100; iter++) {\n      int start = random.nextInt(maxSize+1);\n      int end = start==maxSize ? maxSize : start + random.nextInt(maxSize-start);\n      for (int i=start; i<end; i++) {\n        a[i] = b[i] = random.nextInt(maxVal);\n      }\n      PrimUtils.sort(start, end, a, comparator);\n      Arrays.sort(b, start, end);\n      for (int i=start; i<end; i++) {\n        assertEquals(a[i], b[end-(i-start+1)]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}