{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/response/json/NestableJsonFacet#NestableJsonFacet(NamedList[Object]).mjava","commits":[{"id":"07feaa572dd3645c2013be127176350b3f4cd6a2","date":1542492880,"type":0,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/json/NestableJsonFacet#NestableJsonFacet(NamedList[Object]).mjava","pathOld":"/dev/null","sourceNew":"  public NestableJsonFacet(NamedList<Object> facetNL) {\n    queryFacetsByName = new HashMap<>();\n    bucketBasedFacetByName = new HashMap<>();\n    statFacetsByName = new HashMap<>();\n    heatmapFacetsByName = new HashMap<>();\n\n    for (Map.Entry<String, Object> entry : facetNL) {\n      final String key = entry.getKey();\n      if (getKeysToSkip().contains(key)) {\n        continue;\n      } else if (\"count\".equals(key)) {\n        domainCount = (int) entry.getValue();\n      } else if(entry.getValue() instanceof Number) { // Stat/agg facet value\n        statFacetsByName.put(key, (Number)entry.getValue());\n      } else if(entry.getValue() instanceof NamedList) { // Either heatmap/query/range/terms facet\n        final NamedList<Object> facet = (NamedList<Object>) entry.getValue();\n        final boolean isBucketBased = facet.get(\"buckets\") != null;\n        final boolean isHeatmap = HeatmapJsonFacet.isHeatmapFacet(facet);\n        if (isBucketBased) {\n          bucketBasedFacetByName.put(key, new BucketBasedJsonFacet(facet));\n        } else if (isHeatmap) {\n          heatmapFacetsByName.put(key, new HeatmapJsonFacet(facet));\n        } else { // \"query\" facet\n          queryFacetsByName.put(key, new NestableJsonFacet(facet));\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["304ab40a1554eb7b290d2d6d3cfa3daf743e6b00","040d6388aba0e320fdd8c82cf685799e39ac30d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"304ab40a1554eb7b290d2d6d3cfa3daf743e6b00","date":1569043711,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/json/NestableJsonFacet#NestableJsonFacet(NamedList[Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/json/NestableJsonFacet#NestableJsonFacet(NamedList[Object]).mjava","sourceNew":"  public NestableJsonFacet(NamedList<Object> facetNL) {\n    queryFacetsByName = new HashMap<>();\n    bucketBasedFacetByName = new HashMap<>();\n    statFacetsByName = new HashMap<>();\n    heatmapFacetsByName = new HashMap<>();\n\n    for (Map.Entry<String, Object> entry : facetNL) {\n      final String key = entry.getKey();\n      if (getKeysToSkip().contains(key)) {\n        continue;\n      } else if (\"count\".equals(key)) {\n        domainCount = ((Number) entry.getValue()).longValue();\n      } else if(entry.getValue() instanceof Number) { // Stat/agg facet value\n        statFacetsByName.put(key, (Number)entry.getValue());\n      } else if(entry.getValue() instanceof NamedList) { // Either heatmap/query/range/terms facet\n        final NamedList<Object> facet = (NamedList<Object>) entry.getValue();\n        final boolean isBucketBased = facet.get(\"buckets\") != null;\n        final boolean isHeatmap = HeatmapJsonFacet.isHeatmapFacet(facet);\n        if (isBucketBased) {\n          bucketBasedFacetByName.put(key, new BucketBasedJsonFacet(facet));\n        } else if (isHeatmap) {\n          heatmapFacetsByName.put(key, new HeatmapJsonFacet(facet));\n        } else { // \"query\" facet\n          queryFacetsByName.put(key, new NestableJsonFacet(facet));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public NestableJsonFacet(NamedList<Object> facetNL) {\n    queryFacetsByName = new HashMap<>();\n    bucketBasedFacetByName = new HashMap<>();\n    statFacetsByName = new HashMap<>();\n    heatmapFacetsByName = new HashMap<>();\n\n    for (Map.Entry<String, Object> entry : facetNL) {\n      final String key = entry.getKey();\n      if (getKeysToSkip().contains(key)) {\n        continue;\n      } else if (\"count\".equals(key)) {\n        domainCount = (int) entry.getValue();\n      } else if(entry.getValue() instanceof Number) { // Stat/agg facet value\n        statFacetsByName.put(key, (Number)entry.getValue());\n      } else if(entry.getValue() instanceof NamedList) { // Either heatmap/query/range/terms facet\n        final NamedList<Object> facet = (NamedList<Object>) entry.getValue();\n        final boolean isBucketBased = facet.get(\"buckets\") != null;\n        final boolean isHeatmap = HeatmapJsonFacet.isHeatmapFacet(facet);\n        if (isBucketBased) {\n          bucketBasedFacetByName.put(key, new BucketBasedJsonFacet(facet));\n        } else if (isHeatmap) {\n          heatmapFacetsByName.put(key, new HeatmapJsonFacet(facet));\n        } else { // \"query\" facet\n          queryFacetsByName.put(key, new NestableJsonFacet(facet));\n        }\n      }\n    }\n  }\n\n","bugFix":["07feaa572dd3645c2013be127176350b3f4cd6a2"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"040d6388aba0e320fdd8c82cf685799e39ac30d4","date":1569652735,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/json/NestableJsonFacet#NestableJsonFacet(NamedList[Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/json/NestableJsonFacet#NestableJsonFacet(NamedList[Object]).mjava","sourceNew":"  public NestableJsonFacet(NamedList<Object> facetNL) {\n    queryFacetsByName = new HashMap<>();\n    bucketBasedFacetByName = new HashMap<>();\n    heatmapFacetsByName = new HashMap<>();\n    statsByName = new HashMap<>();\n\n    for (Map.Entry<String, Object> entry : facetNL) {\n      final String key = entry.getKey();\n      if (getKeysToSkip().contains(key)) {\n        continue;\n      } else if (\"count\".equals(key)) {\n        domainCount = ((Number) entry.getValue()).longValue();\n      } else  if (entry.getValue() instanceof Number || entry.getValue() instanceof String ||\n          entry.getValue() instanceof Date) {\n        // Stat/agg facet value\n        statsByName.put(key, entry.getValue());\n      } else if(entry.getValue() instanceof NamedList) { // Either heatmap/query/range/terms facet\n        final NamedList<Object> facet = (NamedList<Object>) entry.getValue();\n        final boolean isBucketBased = facet.get(\"buckets\") != null;\n        final boolean isHeatmap = HeatmapJsonFacet.isHeatmapFacet(facet);\n        if (isBucketBased) {\n          bucketBasedFacetByName.put(key, new BucketBasedJsonFacet(facet));\n        } else if (isHeatmap) {\n          heatmapFacetsByName.put(key, new HeatmapJsonFacet(facet));\n        } else { // \"query\" facet\n          queryFacetsByName.put(key, new NestableJsonFacet(facet));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public NestableJsonFacet(NamedList<Object> facetNL) {\n    queryFacetsByName = new HashMap<>();\n    bucketBasedFacetByName = new HashMap<>();\n    statFacetsByName = new HashMap<>();\n    heatmapFacetsByName = new HashMap<>();\n\n    for (Map.Entry<String, Object> entry : facetNL) {\n      final String key = entry.getKey();\n      if (getKeysToSkip().contains(key)) {\n        continue;\n      } else if (\"count\".equals(key)) {\n        domainCount = ((Number) entry.getValue()).longValue();\n      } else if(entry.getValue() instanceof Number) { // Stat/agg facet value\n        statFacetsByName.put(key, (Number)entry.getValue());\n      } else if(entry.getValue() instanceof NamedList) { // Either heatmap/query/range/terms facet\n        final NamedList<Object> facet = (NamedList<Object>) entry.getValue();\n        final boolean isBucketBased = facet.get(\"buckets\") != null;\n        final boolean isHeatmap = HeatmapJsonFacet.isHeatmapFacet(facet);\n        if (isBucketBased) {\n          bucketBasedFacetByName.put(key, new BucketBasedJsonFacet(facet));\n        } else if (isHeatmap) {\n          heatmapFacetsByName.put(key, new HeatmapJsonFacet(facet));\n        } else { // \"query\" facet\n          queryFacetsByName.put(key, new NestableJsonFacet(facet));\n        }\n      }\n    }\n  }\n\n","bugFix":["07feaa572dd3645c2013be127176350b3f4cd6a2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b9f74021389e2b32ee750fa5a24281c87951ec3","date":1569845983,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/json/NestableJsonFacet#NestableJsonFacet(NamedList[Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/json/NestableJsonFacet#NestableJsonFacet(NamedList[Object]).mjava","sourceNew":"  public NestableJsonFacet(NamedList<Object> facetNL) {\n    queryFacetsByName = new HashMap<>();\n    bucketBasedFacetByName = new HashMap<>();\n    heatmapFacetsByName = new HashMap<>();\n    statsByName = new HashMap<>();\n\n    for (Map.Entry<String, Object> entry : facetNL) {\n      final String key = entry.getKey();\n      if (getKeysToSkip().contains(key)) {\n        continue;\n      } else if (\"count\".equals(key)) {\n        domainCount = ((Number) entry.getValue()).longValue();\n      } else  if (entry.getValue() instanceof Number || entry.getValue() instanceof String ||\n          entry.getValue() instanceof Date) {\n        // Stat/agg facet value\n        statsByName.put(key, entry.getValue());\n      } else if(entry.getValue() instanceof NamedList) { // Either heatmap/query/range/terms facet\n        final NamedList<Object> facet = (NamedList<Object>) entry.getValue();\n        final boolean isBucketBased = facet.get(\"buckets\") != null;\n        final boolean isHeatmap = HeatmapJsonFacet.isHeatmapFacet(facet);\n        if (isBucketBased) {\n          bucketBasedFacetByName.put(key, new BucketBasedJsonFacet(facet));\n        } else if (isHeatmap) {\n          heatmapFacetsByName.put(key, new HeatmapJsonFacet(facet));\n        } else { // \"query\" facet\n          queryFacetsByName.put(key, new NestableJsonFacet(facet));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public NestableJsonFacet(NamedList<Object> facetNL) {\n    queryFacetsByName = new HashMap<>();\n    bucketBasedFacetByName = new HashMap<>();\n    statFacetsByName = new HashMap<>();\n    heatmapFacetsByName = new HashMap<>();\n\n    for (Map.Entry<String, Object> entry : facetNL) {\n      final String key = entry.getKey();\n      if (getKeysToSkip().contains(key)) {\n        continue;\n      } else if (\"count\".equals(key)) {\n        domainCount = ((Number) entry.getValue()).longValue();\n      } else if(entry.getValue() instanceof Number) { // Stat/agg facet value\n        statFacetsByName.put(key, (Number)entry.getValue());\n      } else if(entry.getValue() instanceof NamedList) { // Either heatmap/query/range/terms facet\n        final NamedList<Object> facet = (NamedList<Object>) entry.getValue();\n        final boolean isBucketBased = facet.get(\"buckets\") != null;\n        final boolean isHeatmap = HeatmapJsonFacet.isHeatmapFacet(facet);\n        if (isBucketBased) {\n          bucketBasedFacetByName.put(key, new BucketBasedJsonFacet(facet));\n        } else if (isHeatmap) {\n          heatmapFacetsByName.put(key, new HeatmapJsonFacet(facet));\n        } else { // \"query\" facet\n          queryFacetsByName.put(key, new NestableJsonFacet(facet));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7dfea4f7c80813344b0152e37fc18b31369e8ff","date":1592136683,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/json/NestableJsonFacet#NestableJsonFacet(NamedList[Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/json/NestableJsonFacet#NestableJsonFacet(NamedList[Object]).mjava","sourceNew":"  public NestableJsonFacet(NamedList<Object> facetNL) {\n    queryFacetsByName = new HashMap<>();\n    bucketBasedFacetByName = new HashMap<>();\n    heatmapFacetsByName = new HashMap<>();\n    statsByName = new HashMap<>();\n\n    for (Map.Entry<String, Object> entry : facetNL) {\n      final String key = entry.getKey();\n      if (getKeysToSkip().contains(key)) {\n        continue;\n      } else if (\"count\".equals(key)) {\n        domainCount = ((Number) entry.getValue()).longValue();\n      } else  if (entry.getValue() instanceof Number || entry.getValue() instanceof String ||\n          entry.getValue() instanceof Date) {\n        // Stat/agg facet value\n        statsByName.put(key, entry.getValue());\n      } else if(entry.getValue() instanceof NamedList) { // Either heatmap/query/range/terms facet\n        @SuppressWarnings({\"unchecked\"})\n        final NamedList<Object> facet = (NamedList<Object>) entry.getValue();\n        final boolean isBucketBased = facet.get(\"buckets\") != null;\n        final boolean isHeatmap = HeatmapJsonFacet.isHeatmapFacet(facet);\n        if (isBucketBased) {\n          bucketBasedFacetByName.put(key, new BucketBasedJsonFacet(facet));\n        } else if (isHeatmap) {\n          heatmapFacetsByName.put(key, new HeatmapJsonFacet(facet));\n        } else { // \"query\" facet\n          queryFacetsByName.put(key, new NestableJsonFacet(facet));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public NestableJsonFacet(NamedList<Object> facetNL) {\n    queryFacetsByName = new HashMap<>();\n    bucketBasedFacetByName = new HashMap<>();\n    heatmapFacetsByName = new HashMap<>();\n    statsByName = new HashMap<>();\n\n    for (Map.Entry<String, Object> entry : facetNL) {\n      final String key = entry.getKey();\n      if (getKeysToSkip().contains(key)) {\n        continue;\n      } else if (\"count\".equals(key)) {\n        domainCount = ((Number) entry.getValue()).longValue();\n      } else  if (entry.getValue() instanceof Number || entry.getValue() instanceof String ||\n          entry.getValue() instanceof Date) {\n        // Stat/agg facet value\n        statsByName.put(key, entry.getValue());\n      } else if(entry.getValue() instanceof NamedList) { // Either heatmap/query/range/terms facet\n        final NamedList<Object> facet = (NamedList<Object>) entry.getValue();\n        final boolean isBucketBased = facet.get(\"buckets\") != null;\n        final boolean isHeatmap = HeatmapJsonFacet.isHeatmapFacet(facet);\n        if (isBucketBased) {\n          bucketBasedFacetByName.put(key, new BucketBasedJsonFacet(facet));\n        } else if (isHeatmap) {\n          heatmapFacetsByName.put(key, new HeatmapJsonFacet(facet));\n        } else { // \"query\" facet\n          queryFacetsByName.put(key, new NestableJsonFacet(facet));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["040d6388aba0e320fdd8c82cf685799e39ac30d4"],"4b9f74021389e2b32ee750fa5a24281c87951ec3":["304ab40a1554eb7b290d2d6d3cfa3daf743e6b00","040d6388aba0e320fdd8c82cf685799e39ac30d4"],"304ab40a1554eb7b290d2d6d3cfa3daf743e6b00":["07feaa572dd3645c2013be127176350b3f4cd6a2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"],"040d6388aba0e320fdd8c82cf685799e39ac30d4":["304ab40a1554eb7b290d2d6d3cfa3daf743e6b00"],"07feaa572dd3645c2013be127176350b3f4cd6a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["07feaa572dd3645c2013be127176350b3f4cd6a2"],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4b9f74021389e2b32ee750fa5a24281c87951ec3":[],"304ab40a1554eb7b290d2d6d3cfa3daf743e6b00":["4b9f74021389e2b32ee750fa5a24281c87951ec3","040d6388aba0e320fdd8c82cf685799e39ac30d4"],"040d6388aba0e320fdd8c82cf685799e39ac30d4":["a7dfea4f7c80813344b0152e37fc18b31369e8ff","4b9f74021389e2b32ee750fa5a24281c87951ec3"],"07feaa572dd3645c2013be127176350b3f4cd6a2":["304ab40a1554eb7b290d2d6d3cfa3daf743e6b00"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4b9f74021389e2b32ee750fa5a24281c87951ec3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}