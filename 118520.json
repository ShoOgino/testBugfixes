{"path":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanNearQuery#testNoPositions().mjava","commits":[{"id":"d14e5699abc6d0854ab3a692587156cb84f189de","date":1428897312,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanNearQuery#testNoPositions().mjava","pathOld":"/dev/null","sourceNew":"  public void testNoPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher is = new IndexSearcher(ir);\n    SpanTermQuery query = new SpanTermQuery(new Term(\"foo\", \"bar\"));\n    SpanTermQuery query2 = new SpanTermQuery(new Term(\"foo\", \"baz\"));\n\n    try {\n      is.search(new SpanNearQuery(new SpanQuery[] { query, query2 }, 10, true), 5);\n      fail(\"didn't get expected exception\");\n    } catch (IllegalStateException expected) {\n      assertTrue(expected.getMessage().contains(\"was indexed without position data\"));\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanNearQuery#testNoPositions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanNearQuery#testNoPositions().mjava","sourceNew":"  public void testNoPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher is = new IndexSearcher(ir);\n    SpanTermQuery query = new SpanTermQuery(new Term(\"foo\", \"bar\"));\n    SpanTermQuery query2 = new SpanTermQuery(new Term(\"foo\", \"baz\"));\n\n    IllegalStateException expected = expectThrows(IllegalStateException.class, () -> {\n      is.search(new SpanNearQuery(new SpanQuery[] { query, query2 }, 10, true), 5);\n    });\n    assertTrue(expected.getMessage().contains(\"was indexed without position data\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNoPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher is = new IndexSearcher(ir);\n    SpanTermQuery query = new SpanTermQuery(new Term(\"foo\", \"bar\"));\n    SpanTermQuery query2 = new SpanTermQuery(new Term(\"foo\", \"baz\"));\n\n    try {\n      is.search(new SpanNearQuery(new SpanQuery[] { query, query2 }, 10, true), 5);\n      fail(\"didn't get expected exception\");\n    } catch (IllegalStateException expected) {\n      assertTrue(expected.getMessage().contains(\"was indexed without position data\"));\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":["d14e5699abc6d0854ab3a692587156cb84f189de"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["d14e5699abc6d0854ab3a692587156cb84f189de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"],"d14e5699abc6d0854ab3a692587156cb84f189de":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d14e5699abc6d0854ab3a692587156cb84f189de"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d14e5699abc6d0854ab3a692587156cb84f189de":["05fe562aa248790944d43cdd478f512572835ba0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}