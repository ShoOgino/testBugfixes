{"path":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#setUp().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n\n    for (int i = 0; i < docs.length; i++) {\n      Document d = new Document();\n      FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setIndexed(false);\n      d.add(newField(FIELD_ID, Integer.toString(i), ft));\n      d.add(newField(FIELD_BODY, docs[i], TextField.TYPE_STORED));\n      writer.addDocument(d);\n    }\n    \n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n    \n    sims = new ArrayList<SimilarityBase>();\n    for (BasicModel basicModel : BASIC_MODELS) {\n      for (AfterEffect afterEffect : AFTER_EFFECTS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new DFRSimilarity(basicModel, afterEffect, normalization));\n        }\n      }\n    }\n    for (Distribution distribution : DISTRIBUTIONS) {\n      for (Lambda lambda : LAMBDAS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new IBSimilarity(distribution, lambda, normalization));\n        }\n      }\n    }\n    sims.add(new LMDirichletSimilarity());\n    sims.add(new LMJelinekMercerSimilarity(0.1f));\n    sims.add(new LMJelinekMercerSimilarity(0.7f));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n\n    for (int i = 0; i < docs.length; i++) {\n      Document d = new Document();\n      FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setIndexed(false);\n      d.add(newField(FIELD_ID, Integer.toString(i), ft));\n      d.add(newField(FIELD_BODY, docs[i], TextField.TYPE_STORED));\n      writer.addDocument(d);\n    }\n    \n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n    \n    sims = new ArrayList<SimilarityBase>();\n    for (BasicModel basicModel : BASIC_MODELS) {\n      for (AfterEffect afterEffect : AFTER_EFFECTS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new DFRSimilarity(basicModel, afterEffect, normalization));\n        }\n      }\n    }\n    for (Distribution distribution : DISTRIBUTIONS) {\n      for (Lambda lambda : LAMBDAS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new IBSimilarity(distribution, lambda, normalization));\n        }\n      }\n    }\n    sims.add(new LMDirichletSimilarity());\n    sims.add(new LMJelinekMercerSimilarity(0.1f));\n    sims.add(new LMJelinekMercerSimilarity(0.7f));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    for (int i = 0; i < docs.length; i++) {\n      Document d = new Document();\n      FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setIndexed(false);\n      d.add(newField(FIELD_ID, Integer.toString(i), ft));\n      d.add(newField(FIELD_BODY, docs[i], TextField.TYPE_STORED));\n      writer.addDocument(d);\n    }\n    \n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n    \n    sims = new ArrayList<SimilarityBase>();\n    for (BasicModel basicModel : BASIC_MODELS) {\n      for (AfterEffect afterEffect : AFTER_EFFECTS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new DFRSimilarity(basicModel, afterEffect, normalization));\n        }\n      }\n    }\n    for (Distribution distribution : DISTRIBUTIONS) {\n      for (Lambda lambda : LAMBDAS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new IBSimilarity(distribution, lambda, normalization));\n        }\n      }\n    }\n    sims.add(new LMDirichletSimilarity());\n    sims.add(new LMJelinekMercerSimilarity(0.1f));\n    sims.add(new LMJelinekMercerSimilarity(0.7f));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n\n    for (int i = 0; i < docs.length; i++) {\n      Document d = new Document();\n      FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setIndexed(false);\n      d.add(newField(FIELD_ID, Integer.toString(i), ft));\n      d.add(newField(FIELD_BODY, docs[i], TextField.TYPE_STORED));\n      writer.addDocument(d);\n    }\n    \n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n    \n    sims = new ArrayList<SimilarityBase>();\n    for (BasicModel basicModel : BASIC_MODELS) {\n      for (AfterEffect afterEffect : AFTER_EFFECTS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new DFRSimilarity(basicModel, afterEffect, normalization));\n        }\n      }\n    }\n    for (Distribution distribution : DISTRIBUTIONS) {\n      for (Lambda lambda : LAMBDAS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new IBSimilarity(distribution, lambda, normalization));\n        }\n      }\n    }\n    sims.add(new LMDirichletSimilarity());\n    sims.add(new LMJelinekMercerSimilarity(0.1f));\n    sims.add(new LMJelinekMercerSimilarity(0.7f));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    for (int i = 0; i < docs.length; i++) {\n      Document d = new Document();\n      FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setIndexed(false);\n      d.add(newField(FIELD_ID, Integer.toString(i), ft));\n      d.add(newTextField(FIELD_BODY, docs[i], Field.Store.YES));\n      writer.addDocument(d);\n    }\n    \n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n    \n    sims = new ArrayList<SimilarityBase>();\n    for (BasicModel basicModel : BASIC_MODELS) {\n      for (AfterEffect afterEffect : AFTER_EFFECTS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new DFRSimilarity(basicModel, afterEffect, normalization));\n        }\n      }\n    }\n    for (Distribution distribution : DISTRIBUTIONS) {\n      for (Lambda lambda : LAMBDAS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new IBSimilarity(distribution, lambda, normalization));\n        }\n      }\n    }\n    sims.add(new LMDirichletSimilarity());\n    sims.add(new LMJelinekMercerSimilarity(0.1f));\n    sims.add(new LMJelinekMercerSimilarity(0.7f));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    for (int i = 0; i < docs.length; i++) {\n      Document d = new Document();\n      FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setIndexed(false);\n      d.add(newField(FIELD_ID, Integer.toString(i), ft));\n      d.add(newField(FIELD_BODY, docs[i], TextField.TYPE_STORED));\n      writer.addDocument(d);\n    }\n    \n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n    \n    sims = new ArrayList<SimilarityBase>();\n    for (BasicModel basicModel : BASIC_MODELS) {\n      for (AfterEffect afterEffect : AFTER_EFFECTS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new DFRSimilarity(basicModel, afterEffect, normalization));\n        }\n      }\n    }\n    for (Distribution distribution : DISTRIBUTIONS) {\n      for (Lambda lambda : LAMBDAS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new IBSimilarity(distribution, lambda, normalization));\n        }\n      }\n    }\n    sims.add(new LMDirichletSimilarity());\n    sims.add(new LMJelinekMercerSimilarity(0.1f));\n    sims.add(new LMJelinekMercerSimilarity(0.7f));\n  }\n\n","bugFix":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    for (int i = 0; i < docs.length; i++) {\n      Document d = new Document();\n      FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setIndexed(false);\n      d.add(newField(FIELD_ID, Integer.toString(i), ft));\n      d.add(newTextField(FIELD_BODY, docs[i], Field.Store.YES));\n      writer.addDocument(d);\n    }\n    \n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n    \n    sims = new ArrayList<>();\n    for (BasicModel basicModel : BASIC_MODELS) {\n      for (AfterEffect afterEffect : AFTER_EFFECTS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new DFRSimilarity(basicModel, afterEffect, normalization));\n        }\n      }\n    }\n    for (Distribution distribution : DISTRIBUTIONS) {\n      for (Lambda lambda : LAMBDAS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new IBSimilarity(distribution, lambda, normalization));\n        }\n      }\n    }\n    sims.add(new LMDirichletSimilarity());\n    sims.add(new LMJelinekMercerSimilarity(0.1f));\n    sims.add(new LMJelinekMercerSimilarity(0.7f));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    for (int i = 0; i < docs.length; i++) {\n      Document d = new Document();\n      FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setIndexed(false);\n      d.add(newField(FIELD_ID, Integer.toString(i), ft));\n      d.add(newTextField(FIELD_BODY, docs[i], Field.Store.YES));\n      writer.addDocument(d);\n    }\n    \n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n    \n    sims = new ArrayList<SimilarityBase>();\n    for (BasicModel basicModel : BASIC_MODELS) {\n      for (AfterEffect afterEffect : AFTER_EFFECTS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new DFRSimilarity(basicModel, afterEffect, normalization));\n        }\n      }\n    }\n    for (Distribution distribution : DISTRIBUTIONS) {\n      for (Lambda lambda : LAMBDAS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new IBSimilarity(distribution, lambda, normalization));\n        }\n      }\n    }\n    sims.add(new LMDirichletSimilarity());\n    sims.add(new LMJelinekMercerSimilarity(0.1f));\n    sims.add(new LMJelinekMercerSimilarity(0.7f));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    for (int i = 0; i < docs.length; i++) {\n      Document d = new Document();\n      FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setIndexed(false);\n      d.add(newField(FIELD_ID, Integer.toString(i), ft));\n      d.add(newTextField(FIELD_BODY, docs[i], Field.Store.YES));\n      writer.addDocument(d);\n    }\n    \n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.shutdown();\n    \n    sims = new ArrayList<>();\n    for (BasicModel basicModel : BASIC_MODELS) {\n      for (AfterEffect afterEffect : AFTER_EFFECTS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new DFRSimilarity(basicModel, afterEffect, normalization));\n        }\n      }\n    }\n    for (Distribution distribution : DISTRIBUTIONS) {\n      for (Lambda lambda : LAMBDAS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new IBSimilarity(distribution, lambda, normalization));\n        }\n      }\n    }\n    sims.add(new LMDirichletSimilarity());\n    sims.add(new LMJelinekMercerSimilarity(0.1f));\n    sims.add(new LMJelinekMercerSimilarity(0.7f));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    for (int i = 0; i < docs.length; i++) {\n      Document d = new Document();\n      FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setIndexed(false);\n      d.add(newField(FIELD_ID, Integer.toString(i), ft));\n      d.add(newTextField(FIELD_BODY, docs[i], Field.Store.YES));\n      writer.addDocument(d);\n    }\n    \n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n    \n    sims = new ArrayList<>();\n    for (BasicModel basicModel : BASIC_MODELS) {\n      for (AfterEffect afterEffect : AFTER_EFFECTS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new DFRSimilarity(basicModel, afterEffect, normalization));\n        }\n      }\n    }\n    for (Distribution distribution : DISTRIBUTIONS) {\n      for (Lambda lambda : LAMBDAS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new IBSimilarity(distribution, lambda, normalization));\n        }\n      }\n    }\n    sims.add(new LMDirichletSimilarity());\n    sims.add(new LMJelinekMercerSimilarity(0.1f));\n    sims.add(new LMJelinekMercerSimilarity(0.7f));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    for (int i = 0; i < docs.length; i++) {\n      Document d = new Document();\n      FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setIndexed(false);\n      d.add(newField(FIELD_ID, Integer.toString(i), ft));\n      d.add(newTextField(FIELD_BODY, docs[i], Field.Store.YES));\n      writer.addDocument(d);\n    }\n    \n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n    \n    sims = new ArrayList<>();\n    for (BasicModel basicModel : BASIC_MODELS) {\n      for (AfterEffect afterEffect : AFTER_EFFECTS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new DFRSimilarity(basicModel, afterEffect, normalization));\n        }\n      }\n    }\n    for (Distribution distribution : DISTRIBUTIONS) {\n      for (Lambda lambda : LAMBDAS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new IBSimilarity(distribution, lambda, normalization));\n        }\n      }\n    }\n    sims.add(new LMDirichletSimilarity());\n    sims.add(new LMJelinekMercerSimilarity(0.1f));\n    sims.add(new LMJelinekMercerSimilarity(0.7f));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    for (int i = 0; i < docs.length; i++) {\n      Document d = new Document();\n      FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setIndexed(false);\n      d.add(newField(FIELD_ID, Integer.toString(i), ft));\n      d.add(newTextField(FIELD_BODY, docs[i], Field.Store.YES));\n      writer.addDocument(d);\n    }\n    \n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.shutdown();\n    \n    sims = new ArrayList<>();\n    for (BasicModel basicModel : BASIC_MODELS) {\n      for (AfterEffect afterEffect : AFTER_EFFECTS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new DFRSimilarity(basicModel, afterEffect, normalization));\n        }\n      }\n    }\n    for (Distribution distribution : DISTRIBUTIONS) {\n      for (Lambda lambda : LAMBDAS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new IBSimilarity(distribution, lambda, normalization));\n        }\n      }\n    }\n    sims.add(new LMDirichletSimilarity());\n    sims.add(new LMJelinekMercerSimilarity(0.1f));\n    sims.add(new LMJelinekMercerSimilarity(0.7f));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3184874f7f3aca850248483485b4995343066875","date":1413876758,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    for (int i = 0; i < docs.length; i++) {\n      Document d = new Document();\n      FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setIndexOptions(null);\n      d.add(newField(FIELD_ID, Integer.toString(i), ft));\n      d.add(newTextField(FIELD_BODY, docs[i], Field.Store.YES));\n      writer.addDocument(d);\n    }\n    \n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n    \n    sims = new ArrayList<>();\n    for (BasicModel basicModel : BASIC_MODELS) {\n      for (AfterEffect afterEffect : AFTER_EFFECTS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new DFRSimilarity(basicModel, afterEffect, normalization));\n        }\n      }\n    }\n    for (Distribution distribution : DISTRIBUTIONS) {\n      for (Lambda lambda : LAMBDAS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new IBSimilarity(distribution, lambda, normalization));\n        }\n      }\n    }\n    sims.add(new LMDirichletSimilarity());\n    sims.add(new LMJelinekMercerSimilarity(0.1f));\n    sims.add(new LMJelinekMercerSimilarity(0.7f));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    for (int i = 0; i < docs.length; i++) {\n      Document d = new Document();\n      FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setIndexed(false);\n      d.add(newField(FIELD_ID, Integer.toString(i), ft));\n      d.add(newTextField(FIELD_BODY, docs[i], Field.Store.YES));\n      writer.addDocument(d);\n    }\n    \n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n    \n    sims = new ArrayList<>();\n    for (BasicModel basicModel : BASIC_MODELS) {\n      for (AfterEffect afterEffect : AFTER_EFFECTS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new DFRSimilarity(basicModel, afterEffect, normalization));\n        }\n      }\n    }\n    for (Distribution distribution : DISTRIBUTIONS) {\n      for (Lambda lambda : LAMBDAS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new IBSimilarity(distribution, lambda, normalization));\n        }\n      }\n    }\n    sims.add(new LMDirichletSimilarity());\n    sims.add(new LMJelinekMercerSimilarity(0.1f));\n    sims.add(new LMJelinekMercerSimilarity(0.7f));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    for (int i = 0; i < docs.length; i++) {\n      Document d = new Document();\n      FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setIndexOptions(null);\n      d.add(newField(FIELD_ID, Integer.toString(i), ft));\n      d.add(newTextField(FIELD_BODY, docs[i], Field.Store.YES));\n      writer.addDocument(d);\n    }\n    \n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n    \n    sims = new ArrayList<>();\n    for (BasicModel basicModel : BASIC_MODELS) {\n      for (AfterEffect afterEffect : AFTER_EFFECTS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new DFRSimilarity(basicModel, afterEffect, normalization));\n        }\n      }\n    }\n    for (Distribution distribution : DISTRIBUTIONS) {\n      for (Lambda lambda : LAMBDAS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new IBSimilarity(distribution, lambda, normalization));\n        }\n      }\n    }\n    sims.add(new LMDirichletSimilarity());\n    sims.add(new LMJelinekMercerSimilarity(0.1f));\n    sims.add(new LMJelinekMercerSimilarity(0.7f));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    for (int i = 0; i < docs.length; i++) {\n      Document d = new Document();\n      FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setIndexed(false);\n      d.add(newField(FIELD_ID, Integer.toString(i), ft));\n      d.add(newTextField(FIELD_BODY, docs[i], Field.Store.YES));\n      writer.addDocument(d);\n    }\n    \n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n    \n    sims = new ArrayList<>();\n    for (BasicModel basicModel : BASIC_MODELS) {\n      for (AfterEffect afterEffect : AFTER_EFFECTS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new DFRSimilarity(basicModel, afterEffect, normalization));\n        }\n      }\n    }\n    for (Distribution distribution : DISTRIBUTIONS) {\n      for (Lambda lambda : LAMBDAS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new IBSimilarity(distribution, lambda, normalization));\n        }\n      }\n    }\n    sims.add(new LMDirichletSimilarity());\n    sims.add(new LMJelinekMercerSimilarity(0.1f));\n    sims.add(new LMJelinekMercerSimilarity(0.7f));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    for (int i = 0; i < docs.length; i++) {\n      Document d = new Document();\n      FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setIndexOptions(IndexOptions.NO);\n      d.add(newField(FIELD_ID, Integer.toString(i), ft));\n      d.add(newTextField(FIELD_BODY, docs[i], Field.Store.YES));\n      writer.addDocument(d);\n    }\n    \n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n    \n    sims = new ArrayList<>();\n    for (BasicModel basicModel : BASIC_MODELS) {\n      for (AfterEffect afterEffect : AFTER_EFFECTS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new DFRSimilarity(basicModel, afterEffect, normalization));\n        }\n      }\n    }\n    for (Distribution distribution : DISTRIBUTIONS) {\n      for (Lambda lambda : LAMBDAS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new IBSimilarity(distribution, lambda, normalization));\n        }\n      }\n    }\n    sims.add(new LMDirichletSimilarity());\n    sims.add(new LMJelinekMercerSimilarity(0.1f));\n    sims.add(new LMJelinekMercerSimilarity(0.7f));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    for (int i = 0; i < docs.length; i++) {\n      Document d = new Document();\n      FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setIndexOptions(null);\n      d.add(newField(FIELD_ID, Integer.toString(i), ft));\n      d.add(newTextField(FIELD_BODY, docs[i], Field.Store.YES));\n      writer.addDocument(d);\n    }\n    \n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n    \n    sims = new ArrayList<>();\n    for (BasicModel basicModel : BASIC_MODELS) {\n      for (AfterEffect afterEffect : AFTER_EFFECTS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new DFRSimilarity(basicModel, afterEffect, normalization));\n        }\n      }\n    }\n    for (Distribution distribution : DISTRIBUTIONS) {\n      for (Lambda lambda : LAMBDAS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new IBSimilarity(distribution, lambda, normalization));\n        }\n      }\n    }\n    sims.add(new LMDirichletSimilarity());\n    sims.add(new LMJelinekMercerSimilarity(0.1f));\n    sims.add(new LMJelinekMercerSimilarity(0.7f));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95ce1375367b92d411a06175eab3915fe93c6bc","date":1414788502,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    for (int i = 0; i < docs.length; i++) {\n      Document d = new Document();\n      FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setIndexOptions(IndexOptions.NONE);\n      d.add(newField(FIELD_ID, Integer.toString(i), ft));\n      d.add(newTextField(FIELD_BODY, docs[i], Field.Store.YES));\n      writer.addDocument(d);\n    }\n    \n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n    \n    sims = new ArrayList<>();\n    for (BasicModel basicModel : BASIC_MODELS) {\n      for (AfterEffect afterEffect : AFTER_EFFECTS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new DFRSimilarity(basicModel, afterEffect, normalization));\n        }\n      }\n    }\n    for (Distribution distribution : DISTRIBUTIONS) {\n      for (Lambda lambda : LAMBDAS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new IBSimilarity(distribution, lambda, normalization));\n        }\n      }\n    }\n    sims.add(new LMDirichletSimilarity());\n    sims.add(new LMJelinekMercerSimilarity(0.1f));\n    sims.add(new LMJelinekMercerSimilarity(0.7f));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    for (int i = 0; i < docs.length; i++) {\n      Document d = new Document();\n      FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setIndexOptions(IndexOptions.NO);\n      d.add(newField(FIELD_ID, Integer.toString(i), ft));\n      d.add(newTextField(FIELD_BODY, docs[i], Field.Store.YES));\n      writer.addDocument(d);\n    }\n    \n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n    \n    sims = new ArrayList<>();\n    for (BasicModel basicModel : BASIC_MODELS) {\n      for (AfterEffect afterEffect : AFTER_EFFECTS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new DFRSimilarity(basicModel, afterEffect, normalization));\n        }\n      }\n    }\n    for (Distribution distribution : DISTRIBUTIONS) {\n      for (Lambda lambda : LAMBDAS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new IBSimilarity(distribution, lambda, normalization));\n        }\n      }\n    }\n    sims.add(new LMDirichletSimilarity());\n    sims.add(new LMJelinekMercerSimilarity(0.1f));\n    sims.add(new LMJelinekMercerSimilarity(0.7f));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a836deab3a09546740b8ee2f1f776e83062f39e7","date":1453109062,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    for (int i = 0; i < docs.length; i++) {\n      Document d = new Document();\n      FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setIndexOptions(IndexOptions.NONE);\n      d.add(newField(FIELD_ID, Integer.toString(i), ft));\n      d.add(newTextField(FIELD_BODY, docs[i], Field.Store.YES));\n      writer.addDocument(d);\n    }\n    \n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n    \n    sims = new ArrayList<>();\n    for (BasicModel basicModel : BASIC_MODELS) {\n      for (AfterEffect afterEffect : AFTER_EFFECTS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new DFRSimilarity(basicModel, afterEffect, normalization));\n        }\n      }\n    }\n    for (Distribution distribution : DISTRIBUTIONS) {\n      for (Lambda lambda : LAMBDAS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new IBSimilarity(distribution, lambda, normalization));\n        }\n      }\n    }\n    sims.add(new LMDirichletSimilarity());\n    sims.add(new LMJelinekMercerSimilarity(0.1f));\n    sims.add(new LMJelinekMercerSimilarity(0.7f));\n    sims.add(new DFISimilarity());\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    for (int i = 0; i < docs.length; i++) {\n      Document d = new Document();\n      FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setIndexOptions(IndexOptions.NONE);\n      d.add(newField(FIELD_ID, Integer.toString(i), ft));\n      d.add(newTextField(FIELD_BODY, docs[i], Field.Store.YES));\n      writer.addDocument(d);\n    }\n    \n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n    \n    sims = new ArrayList<>();\n    for (BasicModel basicModel : BASIC_MODELS) {\n      for (AfterEffect afterEffect : AFTER_EFFECTS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new DFRSimilarity(basicModel, afterEffect, normalization));\n        }\n      }\n    }\n    for (Distribution distribution : DISTRIBUTIONS) {\n      for (Lambda lambda : LAMBDAS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new IBSimilarity(distribution, lambda, normalization));\n        }\n      }\n    }\n    sims.add(new LMDirichletSimilarity());\n    sims.add(new LMJelinekMercerSimilarity(0.1f));\n    sims.add(new LMJelinekMercerSimilarity(0.7f));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd5c7feba82d3857622c10a26e9391ffcebe04a","date":1453469412,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestSimilarityBase#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    for (int i = 0; i < docs.length; i++) {\n      Document d = new Document();\n      FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setIndexOptions(IndexOptions.NONE);\n      d.add(newField(FIELD_ID, Integer.toString(i), ft));\n      d.add(newTextField(FIELD_BODY, docs[i], Field.Store.YES));\n      writer.addDocument(d);\n    }\n    \n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n    \n    sims = new ArrayList<>();\n    for (BasicModel basicModel : BASIC_MODELS) {\n      for (AfterEffect afterEffect : AFTER_EFFECTS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new DFRSimilarity(basicModel, afterEffect, normalization));\n        }\n      }\n    }\n    for (Distribution distribution : DISTRIBUTIONS) {\n      for (Lambda lambda : LAMBDAS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new IBSimilarity(distribution, lambda, normalization));\n        }\n      }\n    }\n    sims.add(new LMDirichletSimilarity());\n    sims.add(new LMJelinekMercerSimilarity(0.1f));\n    sims.add(new LMJelinekMercerSimilarity(0.7f));\n    for (Independence independence : INDEPENDENCE_MEASURES) {\n      sims.add(new DFISimilarity(independence));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    for (int i = 0; i < docs.length; i++) {\n      Document d = new Document();\n      FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setIndexOptions(IndexOptions.NONE);\n      d.add(newField(FIELD_ID, Integer.toString(i), ft));\n      d.add(newTextField(FIELD_BODY, docs[i], Field.Store.YES));\n      writer.addDocument(d);\n    }\n    \n    reader = writer.getReader();\n    searcher = newSearcher(reader);\n    writer.close();\n    \n    sims = new ArrayList<>();\n    for (BasicModel basicModel : BASIC_MODELS) {\n      for (AfterEffect afterEffect : AFTER_EFFECTS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new DFRSimilarity(basicModel, afterEffect, normalization));\n        }\n      }\n    }\n    for (Distribution distribution : DISTRIBUTIONS) {\n      for (Lambda lambda : LAMBDAS) {\n        for (Normalization normalization : NORMALIZATIONS) {\n          sims.add(new IBSimilarity(distribution, lambda, normalization));\n        }\n      }\n    }\n    sims.add(new LMDirichletSimilarity());\n    sims.add(new LMJelinekMercerSimilarity(0.1f));\n    sims.add(new LMJelinekMercerSimilarity(0.7f));\n    sims.add(new DFISimilarity());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7dd5c7feba82d3857622c10a26e9391ffcebe04a":["a836deab3a09546740b8ee2f1f776e83062f39e7"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"a836deab3a09546740b8ee2f1f776e83062f39e7":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["3184874f7f3aca850248483485b4995343066875"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"3184874f7f3aca850248483485b4995343066875":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["d0ef034a4f10871667ae75181537775ddcf8ade4","3184874f7f3aca850248483485b4995343066875"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dd5c7feba82d3857622c10a26e9391ffcebe04a"]},"commit2Childs":{"7dd5c7feba82d3857622c10a26e9391ffcebe04a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a836deab3a09546740b8ee2f1f776e83062f39e7":["7dd5c7feba82d3857622c10a26e9391ffcebe04a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["a836deab3a09546740b8ee2f1f776e83062f39e7"],"3184874f7f3aca850248483485b4995343066875":["2bb2842e561df4e8e9ad89010605fc86ac265465","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["3184874f7f3aca850248483485b4995343066875","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}