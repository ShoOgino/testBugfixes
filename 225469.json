{"path":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/MultiTermIntervalsSource#intervals(String,LeafReaderContext).mjava","commits":[{"id":"e3c9188b2bff41b228f06f721e7da193b96f895b","date":1548164162,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/MultiTermIntervalsSource#intervals(String,LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public IntervalIterator intervals(String field, LeafReaderContext ctx) throws IOException {\n    Terms terms = ctx.reader().terms(field);\n    if (terms == null) {\n      return null;\n    }\n    List<IntervalIterator> subSources = new ArrayList<>();\n    TermsEnum te = automaton.getTermsEnum(terms);\n    BytesRef term;\n    int count = 0;\n    while ((term = te.next()) != null) {\n      subSources.add(TermIntervalsSource.intervals(term, te));\n      if (count++ > maxExpansions) {\n        throw new IllegalStateException(\"Automaton \" + this.pattern + \" expanded to too many terms (limit \" + maxExpansions + \")\");\n      }\n    }\n    if (subSources.size() == 0) {\n      return null;\n    }\n    return new DisjunctionIntervalsSource.DisjunctionIntervalIterator(subSources);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2682a1cd25864ccdc1b44bf047bd08700f28ba06","date":1548321910,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/MultiTermIntervalsSource#intervals(String,LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public IntervalIterator intervals(String field, LeafReaderContext ctx) throws IOException {\n    Terms terms = ctx.reader().terms(field);\n    if (terms == null) {\n      return null;\n    }\n    List<IntervalIterator> subSources = new ArrayList<>();\n    TermsEnum te = automaton.getTermsEnum(terms);\n    BytesRef term;\n    int count = 0;\n    while ((term = te.next()) != null) {\n      subSources.add(TermIntervalsSource.intervals(term, te));\n      if (count++ > maxExpansions) {\n        throw new IllegalStateException(\"Automaton \" + this.pattern + \" expanded to too many terms (limit \" + maxExpansions + \")\");\n      }\n    }\n    if (subSources.size() == 0) {\n      return null;\n    }\n    return new DisjunctionIntervalsSource.DisjunctionIntervalIterator(subSources);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de83feac39749388139af49796b399fc1033cde2","date":1560179682,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/MultiTermIntervalsSource#intervals(String,LeafReaderContext).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/MultiTermIntervalsSource#intervals(String,LeafReaderContext).mjava","sourceNew":"  @Override\n  public IntervalIterator intervals(String field, LeafReaderContext ctx) throws IOException {\n    Terms terms = ctx.reader().terms(field);\n    if (terms == null) {\n      return null;\n    }\n    List<IntervalIterator> subSources = new ArrayList<>();\n    TermsEnum te = automaton.getTermsEnum(terms);\n    BytesRef term;\n    int count = 0;\n    while ((term = te.next()) != null) {\n      subSources.add(TermIntervalsSource.intervals(term, te));\n      if (++count > maxExpansions) {\n        throw new IllegalStateException(\"Automaton [\" + this.pattern + \"] expanded to too many terms (limit \" + maxExpansions + \")\");\n      }\n    }\n    if (subSources.size() == 0) {\n      return null;\n    }\n    return new DisjunctionIntervalsSource.DisjunctionIntervalIterator(subSources);\n  }\n\n","sourceOld":"  @Override\n  public IntervalIterator intervals(String field, LeafReaderContext ctx) throws IOException {\n    Terms terms = ctx.reader().terms(field);\n    if (terms == null) {\n      return null;\n    }\n    List<IntervalIterator> subSources = new ArrayList<>();\n    TermsEnum te = automaton.getTermsEnum(terms);\n    BytesRef term;\n    int count = 0;\n    while ((term = te.next()) != null) {\n      subSources.add(TermIntervalsSource.intervals(term, te));\n      if (count++ > maxExpansions) {\n        throw new IllegalStateException(\"Automaton \" + this.pattern + \" expanded to too many terms (limit \" + maxExpansions + \")\");\n      }\n    }\n    if (subSources.size() == 0) {\n      return null;\n    }\n    return new DisjunctionIntervalsSource.DisjunctionIntervalIterator(subSources);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97ee2282ff806e9bc9d705f389cf40451ab81c3e","date":1561721333,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/intervals/MultiTermIntervalsSource#intervals(String,LeafReaderContext).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/MultiTermIntervalsSource#intervals(String,LeafReaderContext).mjava","sourceNew":"  @Override\n  public IntervalIterator intervals(String field, LeafReaderContext ctx) throws IOException {\n    Terms terms = ctx.reader().terms(field);\n    if (terms == null) {\n      return null;\n    }\n    List<IntervalIterator> subSources = new ArrayList<>();\n    TermsEnum te = automaton.getTermsEnum(terms);\n    BytesRef term;\n    int count = 0;\n    while ((term = te.next()) != null) {\n      subSources.add(TermIntervalsSource.intervals(term, te));\n      if (++count > maxExpansions) {\n        throw new IllegalStateException(\"Automaton [\" + this.pattern + \"] expanded to too many terms (limit \" + maxExpansions + \")\");\n      }\n    }\n    if (subSources.size() == 0) {\n      return null;\n    }\n    return new DisjunctionIntervalsSource.DisjunctionIntervalIterator(subSources);\n  }\n\n","sourceOld":"  @Override\n  public IntervalIterator intervals(String field, LeafReaderContext ctx) throws IOException {\n    Terms terms = ctx.reader().terms(field);\n    if (terms == null) {\n      return null;\n    }\n    List<IntervalIterator> subSources = new ArrayList<>();\n    TermsEnum te = automaton.getTermsEnum(terms);\n    BytesRef term;\n    int count = 0;\n    while ((term = te.next()) != null) {\n      subSources.add(TermIntervalsSource.intervals(term, te));\n      if (++count > maxExpansions) {\n        throw new IllegalStateException(\"Automaton [\" + this.pattern + \"] expanded to too many terms (limit \" + maxExpansions + \")\");\n      }\n    }\n    if (subSources.size() == 0) {\n      return null;\n    }\n    return new DisjunctionIntervalsSource.DisjunctionIntervalIterator(subSources);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["de83feac39749388139af49796b399fc1033cde2"],"de83feac39749388139af49796b399fc1033cde2":["e3c9188b2bff41b228f06f721e7da193b96f895b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3c9188b2bff41b228f06f721e7da193b96f895b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e3c9188b2bff41b228f06f721e7da193b96f895b"]},"commit2Childs":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"de83feac39749388139af49796b399fc1033cde2":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e3c9188b2bff41b228f06f721e7da193b96f895b","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"e3c9188b2bff41b228f06f721e7da193b96f895b":["de83feac39749388139af49796b399fc1033cde2","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}