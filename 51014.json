{"path":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#getFieldWriters(String[],SolrIndexSearcher).mjava","commits":[{"id":"16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80","date":1532111887,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#getFieldWriters(String[],SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ExportWriter#getFieldWriters(String[],SolrIndexSearcher).mjava","sourceNew":"  protected FieldWriter[] getFieldWriters(String[] fields, SolrIndexSearcher searcher) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    FieldWriter[] writers = new FieldWriter[fields.length];\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SchemaField schemaField = null;\n\n      try {\n        schemaField = schema.getField(field);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n\n      if (!schemaField.hasDocValues()) {\n        throw new IOException(field + \" must have DocValues to use this feature.\");\n      }\n\n      boolean multiValued = schemaField.multiValued();\n      FieldType fieldType = schemaField.getType();\n      if (fieldType instanceof IntValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new IntFieldWriter(field);\n        }\n      } else if (fieldType instanceof LongValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new LongFieldWriter(field);\n        }\n      } else if (fieldType instanceof FloatValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new FloatFieldWriter(field);\n        }\n      } else if (fieldType instanceof DoubleValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new DoubleFieldWriter(field);\n        }\n      } else if (fieldType instanceof StrField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new StringFieldWriter(field, fieldType);\n        }\n      } else if (fieldType instanceof DateValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new DateFieldWriter(field);\n        }\n      } else if (fieldType instanceof BoolField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new BoolFieldWriter(field, fieldType);\n        }\n      } else {\n        throw new IOException(\"Export fields must either be one of the following types: int,float,long,double,string,date,boolean\");\n      }\n    }\n    return writers;\n  }\n\n","sourceOld":"  protected FieldWriter[] getFieldWriters(String[] fields, SolrIndexSearcher searcher) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    FieldWriter[] writers = new FieldWriter[fields.length];\n    for(int i=0; i<fields.length; i++) {\n      String field = fields[i];\n      SchemaField schemaField = null;\n\n      try {\n        schemaField = schema.getField(field);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n\n      if(!schemaField.hasDocValues()) {\n        throw new IOException(field+\" must have DocValues to use this feature.\");\n      }\n\n      boolean multiValued = schemaField.multiValued();\n      FieldType fieldType = schemaField.getType();\n      if (fieldType instanceof IntValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new IntFieldWriter(field);\n        }\n      } else if (fieldType instanceof LongValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new LongFieldWriter(field);\n        }\n      } else if (fieldType instanceof FloatValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new FloatFieldWriter(field);\n        }\n      } else if (fieldType instanceof DoubleValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new DoubleFieldWriter(field);\n        }\n      } else if (fieldType instanceof StrField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new StringFieldWriter(field, fieldType);\n        }\n      } else if (fieldType instanceof DateValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new DateFieldWriter(field);\n        }\n      } else if (fieldType instanceof BoolField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new BoolFieldWriter(field, fieldType);\n        }\n      } else {\n        throw new IOException(\"Export fields must either be one of the following types: int,float,long,double,string,date,boolean\");\n      }\n    }\n    return writers;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9baa90b3d6a105fb7653b916f12c490f4949bb8","date":1544060053,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#getFieldWriters(String[],SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#getFieldWriters(String[],SolrIndexSearcher).mjava","sourceNew":"  protected FieldWriter[] getFieldWriters(String[] fields, SolrIndexSearcher searcher) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    FieldWriter[] writers = new FieldWriter[fields.length];\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SchemaField schemaField = null;\n\n      try {\n        schemaField = schema.getField(field);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n\n      if (!schemaField.hasDocValues()) {\n        throw new IOException(schemaField + \" must have DocValues to use this feature.\");\n      }\n\n      boolean multiValued = schemaField.multiValued();\n      FieldType fieldType = schemaField.getType();\n      if (fieldType instanceof IntValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new IntFieldWriter(field);\n        }\n      } else if (fieldType instanceof LongValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new LongFieldWriter(field);\n        }\n      } else if (fieldType instanceof FloatValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new FloatFieldWriter(field);\n        }\n      } else if (fieldType instanceof DoubleValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new DoubleFieldWriter(field);\n        }\n      } else if (fieldType instanceof StrField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new StringFieldWriter(field, fieldType);\n        }\n      } else if (fieldType instanceof DateValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new DateFieldWriter(field);\n        }\n      } else if (fieldType instanceof BoolField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new BoolFieldWriter(field, fieldType);\n        }\n      } else {\n        throw new IOException(\"Export fields must either be one of the following types: int,float,long,double,string,date,boolean\");\n      }\n    }\n    return writers;\n  }\n\n","sourceOld":"  protected FieldWriter[] getFieldWriters(String[] fields, SolrIndexSearcher searcher) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    FieldWriter[] writers = new FieldWriter[fields.length];\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SchemaField schemaField = null;\n\n      try {\n        schemaField = schema.getField(field);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n\n      if (!schemaField.hasDocValues()) {\n        throw new IOException(field + \" must have DocValues to use this feature.\");\n      }\n\n      boolean multiValued = schemaField.multiValued();\n      FieldType fieldType = schemaField.getType();\n      if (fieldType instanceof IntValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new IntFieldWriter(field);\n        }\n      } else if (fieldType instanceof LongValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new LongFieldWriter(field);\n        }\n      } else if (fieldType instanceof FloatValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new FloatFieldWriter(field);\n        }\n      } else if (fieldType instanceof DoubleValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new DoubleFieldWriter(field);\n        }\n      } else if (fieldType instanceof StrField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new StringFieldWriter(field, fieldType);\n        }\n      } else if (fieldType instanceof DateValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new DateFieldWriter(field);\n        }\n      } else if (fieldType instanceof BoolField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new BoolFieldWriter(field, fieldType);\n        }\n      } else {\n        throw new IOException(\"Export fields must either be one of the following types: int,float,long,double,string,date,boolean\");\n      }\n    }\n    return writers;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab3edb4bdcf1695b3c43f8584d7473f9516a34e4","date":1550862271,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#getFieldWriters(String[],SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#getFieldWriters(String[],SolrIndexSearcher).mjava","sourceNew":"  protected FieldWriter[] getFieldWriters(String[] fields, SolrIndexSearcher searcher) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    FieldWriter[] writers = new FieldWriter[fields.length];\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SchemaField schemaField = null;\n\n      try {\n        schemaField = schema.getField(field);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n\n      if (!schemaField.hasDocValues()) {\n        throw new IOException(schemaField + \" must have DocValues to use this feature.\");\n      }\n\n      boolean multiValued = schemaField.multiValued();\n      FieldType fieldType = schemaField.getType();\n      if (fieldType instanceof IntValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new IntFieldWriter(field);\n        }\n      } else if (fieldType instanceof LongValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new LongFieldWriter(field);\n        }\n      } else if (fieldType instanceof FloatValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new FloatFieldWriter(field);\n        }\n      } else if (fieldType instanceof DoubleValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new DoubleFieldWriter(field);\n        }\n      } else if (fieldType instanceof StrField || fieldType instanceof SortableTextField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new StringFieldWriter(field, fieldType);\n        }\n      } else if (fieldType instanceof DateValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new DateFieldWriter(field);\n        }\n      } else if (fieldType instanceof BoolField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new BoolFieldWriter(field, fieldType);\n        }\n      } else {\n        throw new IOException(\"Export fields must be one of the following types: int,float,long,double,string,date,boolean,SortableText\");\n      }\n    }\n    return writers;\n  }\n\n","sourceOld":"  protected FieldWriter[] getFieldWriters(String[] fields, SolrIndexSearcher searcher) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    FieldWriter[] writers = new FieldWriter[fields.length];\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SchemaField schemaField = null;\n\n      try {\n        schemaField = schema.getField(field);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n\n      if (!schemaField.hasDocValues()) {\n        throw new IOException(schemaField + \" must have DocValues to use this feature.\");\n      }\n\n      boolean multiValued = schemaField.multiValued();\n      FieldType fieldType = schemaField.getType();\n      if (fieldType instanceof IntValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new IntFieldWriter(field);\n        }\n      } else if (fieldType instanceof LongValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new LongFieldWriter(field);\n        }\n      } else if (fieldType instanceof FloatValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new FloatFieldWriter(field);\n        }\n      } else if (fieldType instanceof DoubleValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new DoubleFieldWriter(field);\n        }\n      } else if (fieldType instanceof StrField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new StringFieldWriter(field, fieldType);\n        }\n      } else if (fieldType instanceof DateValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new DateFieldWriter(field);\n        }\n      } else if (fieldType instanceof BoolField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new BoolFieldWriter(field, fieldType);\n        }\n      } else {\n        throw new IOException(\"Export fields must either be one of the following types: int,float,long,double,string,date,boolean\");\n      }\n    }\n    return writers;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4","date":1551083645,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#getFieldWriters(String[],SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#getFieldWriters(String[],SolrIndexSearcher).mjava","sourceNew":"  protected FieldWriter[] getFieldWriters(String[] fields, SolrIndexSearcher searcher) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    FieldWriter[] writers = new FieldWriter[fields.length];\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SchemaField schemaField = null;\n\n      try {\n        schemaField = schema.getField(field);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n\n      if (!schemaField.hasDocValues()) {\n        throw new IOException(schemaField + \" must have DocValues to use this feature.\");\n      }\n\n      boolean multiValued = schemaField.multiValued();\n      FieldType fieldType = schemaField.getType();\n      if (fieldType instanceof IntValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new IntFieldWriter(field);\n        }\n      } else if (fieldType instanceof LongValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new LongFieldWriter(field);\n        }\n      } else if (fieldType instanceof FloatValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new FloatFieldWriter(field);\n        }\n      } else if (fieldType instanceof DoubleValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new DoubleFieldWriter(field);\n        }\n      } else if (fieldType instanceof StrField || fieldType instanceof SortableTextField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new StringFieldWriter(field, fieldType);\n        }\n      } else if (fieldType instanceof DateValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new DateFieldWriter(field);\n        }\n      } else if (fieldType instanceof BoolField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new BoolFieldWriter(field, fieldType);\n        }\n      } else {\n        throw new IOException(\"Export fields must be one of the following types: int,float,long,double,string,date,boolean,SortableText\");\n      }\n    }\n    return writers;\n  }\n\n","sourceOld":"  protected FieldWriter[] getFieldWriters(String[] fields, SolrIndexSearcher searcher) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    FieldWriter[] writers = new FieldWriter[fields.length];\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SchemaField schemaField = null;\n\n      try {\n        schemaField = schema.getField(field);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n\n      if (!schemaField.hasDocValues()) {\n        throw new IOException(schemaField + \" must have DocValues to use this feature.\");\n      }\n\n      boolean multiValued = schemaField.multiValued();\n      FieldType fieldType = schemaField.getType();\n      if (fieldType instanceof IntValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new IntFieldWriter(field);\n        }\n      } else if (fieldType instanceof LongValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new LongFieldWriter(field);\n        }\n      } else if (fieldType instanceof FloatValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new FloatFieldWriter(field);\n        }\n      } else if (fieldType instanceof DoubleValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new DoubleFieldWriter(field);\n        }\n      } else if (fieldType instanceof StrField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new StringFieldWriter(field, fieldType);\n        }\n      } else if (fieldType instanceof DateValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new DateFieldWriter(field);\n        }\n      } else if (fieldType instanceof BoolField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new BoolFieldWriter(field, fieldType);\n        }\n      } else {\n        throw new IOException(\"Export fields must either be one of the following types: int,float,long,double,string,date,boolean\");\n      }\n    }\n    return writers;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f41185456d46fbf1ec09366323d7c6f7e8293f","date":1551985160,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#getFieldWriters(String[],SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#getFieldWriters(String[],SolrIndexSearcher).mjava","sourceNew":"  protected FieldWriter[] getFieldWriters(String[] fields, SolrIndexSearcher searcher) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    FieldWriter[] writers = new FieldWriter[fields.length];\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SchemaField schemaField = null;\n\n      try {\n        schemaField = schema.getField(field);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n\n      if (!schemaField.hasDocValues()) {\n        throw new IOException(schemaField + \" must have DocValues to use this feature.\");\n      }\n      boolean multiValued = schemaField.multiValued();\n      FieldType fieldType = schemaField.getType();\n\n      if (fieldType instanceof SortableTextField && schemaField.useDocValuesAsStored() == false) {\n        throw new IOException(schemaField + \" Must have useDocValuesAsStored='true' to be used with export writer\");\n      }\n\n      if (fieldType instanceof IntValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new IntFieldWriter(field);\n        }\n      } else if (fieldType instanceof LongValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new LongFieldWriter(field);\n        }\n      } else if (fieldType instanceof FloatValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new FloatFieldWriter(field);\n        }\n      } else if (fieldType instanceof DoubleValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new DoubleFieldWriter(field);\n        }\n      } else if (fieldType instanceof StrField || fieldType instanceof SortableTextField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new StringFieldWriter(field, fieldType);\n        }\n      } else if (fieldType instanceof DateValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new DateFieldWriter(field);\n        }\n      } else if (fieldType instanceof BoolField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new BoolFieldWriter(field, fieldType);\n        }\n      } else {\n        throw new IOException(\"Export fields must be one of the following types: int,float,long,double,string,date,boolean,SortableText\");\n      }\n    }\n    return writers;\n  }\n\n","sourceOld":"  protected FieldWriter[] getFieldWriters(String[] fields, SolrIndexSearcher searcher) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    FieldWriter[] writers = new FieldWriter[fields.length];\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SchemaField schemaField = null;\n\n      try {\n        schemaField = schema.getField(field);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n\n      if (!schemaField.hasDocValues()) {\n        throw new IOException(schemaField + \" must have DocValues to use this feature.\");\n      }\n\n      boolean multiValued = schemaField.multiValued();\n      FieldType fieldType = schemaField.getType();\n      if (fieldType instanceof IntValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new IntFieldWriter(field);\n        }\n      } else if (fieldType instanceof LongValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new LongFieldWriter(field);\n        }\n      } else if (fieldType instanceof FloatValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new FloatFieldWriter(field);\n        }\n      } else if (fieldType instanceof DoubleValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new DoubleFieldWriter(field);\n        }\n      } else if (fieldType instanceof StrField || fieldType instanceof SortableTextField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new StringFieldWriter(field, fieldType);\n        }\n      } else if (fieldType instanceof DateValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new DateFieldWriter(field);\n        }\n      } else if (fieldType instanceof BoolField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new BoolFieldWriter(field, fieldType);\n        }\n      } else {\n        throw new IOException(\"Export fields must be one of the following types: int,float,long,double,string,date,boolean,SortableText\");\n      }\n    }\n    return writers;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee","date":1593704090,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#getFieldWriters(String[],SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#getFieldWriters(String[],SolrIndexSearcher).mjava","sourceNew":"  public FieldWriter[] getFieldWriters(String[] fields, SolrIndexSearcher searcher) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    FieldWriter[] writers = new FieldWriter[fields.length];\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SchemaField schemaField = null;\n\n      try {\n        schemaField = schema.getField(field);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n\n      if (!schemaField.hasDocValues()) {\n        throw new IOException(schemaField + \" must have DocValues to use this feature.\");\n      }\n      boolean multiValued = schemaField.multiValued();\n      FieldType fieldType = schemaField.getType();\n\n      if (fieldType instanceof SortableTextField && schemaField.useDocValuesAsStored() == false) {\n        throw new IOException(schemaField + \" Must have useDocValuesAsStored='true' to be used with export writer\");\n      }\n\n      if (fieldType instanceof IntValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new IntFieldWriter(field);\n        }\n      } else if (fieldType instanceof LongValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new LongFieldWriter(field);\n        }\n      } else if (fieldType instanceof FloatValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new FloatFieldWriter(field);\n        }\n      } else if (fieldType instanceof DoubleValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new DoubleFieldWriter(field);\n        }\n      } else if (fieldType instanceof StrField || fieldType instanceof SortableTextField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new StringFieldWriter(field, fieldType);\n        }\n      } else if (fieldType instanceof DateValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new DateFieldWriter(field);\n        }\n      } else if (fieldType instanceof BoolField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new BoolFieldWriter(field, fieldType);\n        }\n      } else {\n        throw new IOException(\"Export fields must be one of the following types: int,float,long,double,string,date,boolean,SortableText\");\n      }\n    }\n    return writers;\n  }\n\n","sourceOld":"  protected FieldWriter[] getFieldWriters(String[] fields, SolrIndexSearcher searcher) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    FieldWriter[] writers = new FieldWriter[fields.length];\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SchemaField schemaField = null;\n\n      try {\n        schemaField = schema.getField(field);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n\n      if (!schemaField.hasDocValues()) {\n        throw new IOException(schemaField + \" must have DocValues to use this feature.\");\n      }\n      boolean multiValued = schemaField.multiValued();\n      FieldType fieldType = schemaField.getType();\n\n      if (fieldType instanceof SortableTextField && schemaField.useDocValuesAsStored() == false) {\n        throw new IOException(schemaField + \" Must have useDocValuesAsStored='true' to be used with export writer\");\n      }\n\n      if (fieldType instanceof IntValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new IntFieldWriter(field);\n        }\n      } else if (fieldType instanceof LongValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new LongFieldWriter(field);\n        }\n      } else if (fieldType instanceof FloatValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new FloatFieldWriter(field);\n        }\n      } else if (fieldType instanceof DoubleValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new DoubleFieldWriter(field);\n        }\n      } else if (fieldType instanceof StrField || fieldType instanceof SortableTextField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new StringFieldWriter(field, fieldType);\n        }\n      } else if (fieldType instanceof DateValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new DateFieldWriter(field);\n        }\n      } else if (fieldType instanceof BoolField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new BoolFieldWriter(field, fieldType);\n        }\n      } else {\n        throw new IOException(\"Export fields must be one of the following types: int,float,long,double,string,date,boolean,SortableText\");\n      }\n    }\n    return writers;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee":["74f41185456d46fbf1ec09366323d7c6f7e8293f"],"ab3edb4bdcf1695b3c43f8584d7473f9516a34e4":["f9baa90b3d6a105fb7653b916f12c490f4949bb8"],"16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f41185456d46fbf1ec09366323d7c6f7e8293f":["0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"f9baa90b3d6a105fb7653b916f12c490f4949bb8":["16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80"],"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4":["f9baa90b3d6a105fb7653b916f12c490f4949bb8","ab3edb4bdcf1695b3c43f8584d7473f9516a34e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee"]},"commit2Childs":{"1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab3edb4bdcf1695b3c43f8584d7473f9516a34e4":["0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80":["f9baa90b3d6a105fb7653b916f12c490f4949bb8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80"],"74f41185456d46fbf1ec09366323d7c6f7e8293f":["1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee"],"f9baa90b3d6a105fb7653b916f12c490f4949bb8":["ab3edb4bdcf1695b3c43f8584d7473f9516a34e4","0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4":["74f41185456d46fbf1ec09366323d7c6f7e8293f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}