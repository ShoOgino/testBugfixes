{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#loadTransformers().mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#loadTransformers().mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#loadTransformers().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      @Override\n      public boolean add(Transformer transformer) {\n        if (docBuilder != null && docBuilder.verboseDebug) {\n          transformer = docBuilder.writer.getDebugLogger().wrapTransformer(transformer);\n        }\n        return super.add(transformer);\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (Transformer.class.isAssignableFrom(clazz)) {\n          transformers.add((Transformer) clazz.newInstance());\n        } else {\n          Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (NoSuchMethodException nsme){\n         String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map<String.Object> m)method\";\n            log.error(msg);\n            wrapAndThrow(SEVERE, nsme,msg);        \n      } catch (Exception e) {\n        log.error(\"Unable to load Transformer: \" + aTransArr, e);\n        wrapAndThrow(SEVERE, e,\"Unable to load Transformer: \" + trans);\n      }\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      @Override\n      public boolean add(Transformer transformer) {\n        if (docBuilder != null && docBuilder.verboseDebug) {\n          transformer = docBuilder.writer.getDebugLogger().wrapTransformer(transformer);\n        }\n        return super.add(transformer);\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (Transformer.class.isAssignableFrom(clazz)) {\n          transformers.add((Transformer) clazz.newInstance());\n        } else {\n          Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (NoSuchMethodException nsme){\n         String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map<String.Object> m)method\";\n            log.error(msg);\n            wrapAndThrow(SEVERE, nsme,msg);        \n      } catch (Exception e) {\n        log.error(\"Unable to load Transformer: \" + aTransArr, e);\n        wrapAndThrow(SEVERE, e,\"Unable to load Transformer: \" + trans);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#loadTransformers().mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#loadTransformers().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      @Override\n      public boolean add(Transformer transformer) {\n        if (docBuilder != null && docBuilder.verboseDebug) {\n          transformer = docBuilder.writer.getDebugLogger().wrapTransformer(transformer);\n        }\n        return super.add(transformer);\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (Transformer.class.isAssignableFrom(clazz)) {\n          transformers.add((Transformer) clazz.newInstance());\n        } else {\n          Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (NoSuchMethodException nsme){\n         String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map<String.Object> m)method\";\n            log.error(msg);\n            wrapAndThrow(SEVERE, nsme,msg);        \n      } catch (Exception e) {\n        log.error(\"Unable to load Transformer: \" + aTransArr, e);\n        wrapAndThrow(SEVERE, e,\"Unable to load Transformer: \" + trans);\n      }\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      @Override\n      public boolean add(Transformer transformer) {\n        if (docBuilder != null && docBuilder.verboseDebug) {\n          transformer = docBuilder.writer.getDebugLogger().wrapTransformer(transformer);\n        }\n        return super.add(transformer);\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (Transformer.class.isAssignableFrom(clazz)) {\n          transformers.add((Transformer) clazz.newInstance());\n        } else {\n          Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (NoSuchMethodException nsme){\n         String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map<String.Object> m)method\";\n            log.error(msg);\n            wrapAndThrow(SEVERE, nsme,msg);        \n      } catch (Exception e) {\n        log.error(\"Unable to load Transformer: \" + aTransArr, e);\n        wrapAndThrow(SEVERE, e,\"Unable to load Transformer: \" + trans);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7bedd63933040e88a07397e8a0fda8f3aae2a8db","date":1311328450,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#loadTransformers().mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#loadTransformers().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      @Override\n      public boolean add(Transformer transformer) {\n        if (docBuilder != null && docBuilder.verboseDebug) {\n          transformer = docBuilder.getDebugLogger().wrapTransformer(transformer);\n        }\n        return super.add(transformer);\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (Transformer.class.isAssignableFrom(clazz)) {\n          transformers.add((Transformer) clazz.newInstance());\n        } else {\n          Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (NoSuchMethodException nsme){\n         String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map<String.Object> m)method\";\n            log.error(msg);\n            wrapAndThrow(SEVERE, nsme,msg);        \n      } catch (Exception e) {\n        log.error(\"Unable to load Transformer: \" + aTransArr, e);\n        wrapAndThrow(SEVERE, e,\"Unable to load Transformer: \" + trans);\n      }\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      @Override\n      public boolean add(Transformer transformer) {\n        if (docBuilder != null && docBuilder.verboseDebug) {\n          transformer = docBuilder.writer.getDebugLogger().wrapTransformer(transformer);\n        }\n        return super.add(transformer);\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (Transformer.class.isAssignableFrom(clazz)) {\n          transformers.add((Transformer) clazz.newInstance());\n        } else {\n          Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (NoSuchMethodException nsme){\n         String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map<String.Object> m)method\";\n            log.error(msg);\n            wrapAndThrow(SEVERE, nsme,msg);        \n      } catch (Exception e) {\n        log.error(\"Unable to load Transformer: \" + aTransArr, e);\n        wrapAndThrow(SEVERE, e,\"Unable to load Transformer: \" + trans);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"917e62f3497c83634a13edd833e8e21dd6cc6496","date":1490728467,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#loadTransformers().mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#loadTransformers().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      @Override\n      public boolean add(Transformer transformer) {\n        if (docBuilder != null && docBuilder.verboseDebug) {\n          transformer = docBuilder.getDebugLogger().wrapTransformer(transformer);\n        }\n        return super.add(transformer);\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        // The script transformer is a potential vulnerability, esp. when the script is\n        // provided from an untrusted source. Check and don't proceed if source is untrusted.\n        checkIfTrusted(trans);\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (Transformer.class.isAssignableFrom(clazz)) {\n          transformers.add((Transformer) clazz.newInstance());\n        } else {\n          Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (NoSuchMethodException nsme){\n         String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map<String.Object> m)method\";\n            log.error(msg);\n            wrapAndThrow(SEVERE, nsme,msg);        \n      } catch (Exception e) {\n        log.error(\"Unable to load Transformer: \" + aTransArr, e);\n        wrapAndThrow(SEVERE, e,\"Unable to load Transformer: \" + trans);\n      }\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      @Override\n      public boolean add(Transformer transformer) {\n        if (docBuilder != null && docBuilder.verboseDebug) {\n          transformer = docBuilder.getDebugLogger().wrapTransformer(transformer);\n        }\n        return super.add(transformer);\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (Transformer.class.isAssignableFrom(clazz)) {\n          transformers.add((Transformer) clazz.newInstance());\n        } else {\n          Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (NoSuchMethodException nsme){\n         String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map<String.Object> m)method\";\n            log.error(msg);\n            wrapAndThrow(SEVERE, nsme,msg);        \n      } catch (Exception e) {\n        log.error(\"Unable to load Transformer: \" + aTransArr, e);\n        wrapAndThrow(SEVERE, e,\"Unable to load Transformer: \" + trans);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3732e34f27916e98704736cc6924a34fffca249a","date":1490873946,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#loadTransformers().mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#loadTransformers().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      @Override\n      public boolean add(Transformer transformer) {\n        if (docBuilder != null && docBuilder.verboseDebug) {\n          transformer = docBuilder.getDebugLogger().wrapTransformer(transformer);\n        }\n        return super.add(transformer);\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        // The script transformer is a potential vulnerability, esp. when the script is\n        // provided from an untrusted source. Check and don't proceed if source is untrusted.\n        checkIfTrusted(trans);\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (Transformer.class.isAssignableFrom(clazz)) {\n          transformers.add((Transformer) clazz.newInstance());\n        } else {\n          Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (NoSuchMethodException nsme){\n         String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map<String.Object> m)method\";\n            log.error(msg);\n            wrapAndThrow(SEVERE, nsme,msg);        \n      } catch (Exception e) {\n        log.error(\"Unable to load Transformer: \" + aTransArr, e);\n        wrapAndThrow(SEVERE, e,\"Unable to load Transformer: \" + trans);\n      }\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      @Override\n      public boolean add(Transformer transformer) {\n        if (docBuilder != null && docBuilder.verboseDebug) {\n          transformer = docBuilder.getDebugLogger().wrapTransformer(transformer);\n        }\n        return super.add(transformer);\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (Transformer.class.isAssignableFrom(clazz)) {\n          transformers.add((Transformer) clazz.newInstance());\n        } else {\n          Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (NoSuchMethodException nsme){\n         String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map<String.Object> m)method\";\n            log.error(msg);\n            wrapAndThrow(SEVERE, nsme,msg);        \n      } catch (Exception e) {\n        log.error(\"Unable to load Transformer: \" + aTransArr, e);\n        wrapAndThrow(SEVERE, e,\"Unable to load Transformer: \" + trans);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#loadTransformers().mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#loadTransformers().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      @Override\n      public boolean add(Transformer transformer) {\n        if (docBuilder != null && docBuilder.verboseDebug) {\n          transformer = docBuilder.getDebugLogger().wrapTransformer(transformer);\n        }\n        return super.add(transformer);\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        // The script transformer is a potential vulnerability, esp. when the script is\n        // provided from an untrusted source. Check and don't proceed if source is untrusted.\n        checkIfTrusted(trans);\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (Transformer.class.isAssignableFrom(clazz)) {\n          transformers.add((Transformer) clazz.getConstructor().newInstance());\n        } else {\n          Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (NoSuchMethodException nsme){\n         String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map<String.Object> m)method\";\n            log.error(msg);\n            wrapAndThrow(SEVERE, nsme,msg);        \n      } catch (Exception e) {\n        log.error(\"Unable to load Transformer: \" + aTransArr, e);\n        wrapAndThrow(SEVERE, e,\"Unable to load Transformer: \" + trans);\n      }\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      @Override\n      public boolean add(Transformer transformer) {\n        if (docBuilder != null && docBuilder.verboseDebug) {\n          transformer = docBuilder.getDebugLogger().wrapTransformer(transformer);\n        }\n        return super.add(transformer);\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        // The script transformer is a potential vulnerability, esp. when the script is\n        // provided from an untrusted source. Check and don't proceed if source is untrusted.\n        checkIfTrusted(trans);\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (Transformer.class.isAssignableFrom(clazz)) {\n          transformers.add((Transformer) clazz.newInstance());\n        } else {\n          Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (NoSuchMethodException nsme){\n         String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map<String.Object> m)method\";\n            log.error(msg);\n            wrapAndThrow(SEVERE, nsme,msg);        \n      } catch (Exception e) {\n        log.error(\"Unable to load Transformer: \" + aTransArr, e);\n        wrapAndThrow(SEVERE, e,\"Unable to load Transformer: \" + trans);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#loadTransformers().mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#loadTransformers().mjava","sourceNew":"  @SuppressWarnings(\"serial\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      @Override\n      public boolean add(Transformer transformer) {\n        if (docBuilder != null && docBuilder.verboseDebug) {\n          transformer = docBuilder.getDebugLogger().wrapTransformer(transformer);\n        }\n        return super.add(transformer);\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        // The script transformer is a potential vulnerability, esp. when the script is\n        // provided from an untrusted source. Check and don't proceed if source is untrusted.\n        checkIfTrusted(trans);\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (Transformer.class.isAssignableFrom(clazz)) {\n          transformers.add((Transformer) clazz.getConstructor().newInstance());\n        } else {\n          Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (NoSuchMethodException nsme){\n         String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map<String.Object> m)method\";\n            log.error(msg);\n            wrapAndThrow(SEVERE, nsme,msg);        \n      } catch (Exception e) {\n        log.error(\"Unable to load Transformer: \" + aTransArr, e);\n        wrapAndThrow(SEVERE, e,\"Unable to load Transformer: \" + trans);\n      }\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      @Override\n      public boolean add(Transformer transformer) {\n        if (docBuilder != null && docBuilder.verboseDebug) {\n          transformer = docBuilder.getDebugLogger().wrapTransformer(transformer);\n        }\n        return super.add(transformer);\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        // The script transformer is a potential vulnerability, esp. when the script is\n        // provided from an untrusted source. Check and don't proceed if source is untrusted.\n        checkIfTrusted(trans);\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (Transformer.class.isAssignableFrom(clazz)) {\n          transformers.add((Transformer) clazz.getConstructor().newInstance());\n        } else {\n          Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (NoSuchMethodException nsme){\n         String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map<String.Object> m)method\";\n            log.error(msg);\n            wrapAndThrow(SEVERE, nsme,msg);        \n      } catch (Exception e) {\n        log.error(\"Unable to load Transformer: \" + aTransArr, e);\n        wrapAndThrow(SEVERE, e,\"Unable to load Transformer: \" + trans);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#loadTransformers().mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#loadTransformers().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      @Override\n      public boolean add(Transformer transformer) {\n        if (docBuilder != null && docBuilder.verboseDebug) {\n          transformer = docBuilder.getDebugLogger().wrapTransformer(transformer);\n        }\n        return super.add(transformer);\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        // The script transformer is a potential vulnerability, esp. when the script is\n        // provided from an untrusted source. Check and don't proceed if source is untrusted.\n        checkIfTrusted(trans);\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (Transformer.class.isAssignableFrom(clazz)) {\n          transformers.add((Transformer) clazz.getConstructor().newInstance());\n        } else {\n          Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (NoSuchMethodException nsme){\n         String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map<String.Object> m)method\";\n            log.error(msg);\n            wrapAndThrow(SEVERE, nsme,msg);        \n      } catch (Exception e) {\n        log.error(\"Unable to load Transformer: \" + aTransArr, e);\n        wrapAndThrow(SEVERE, e,\"Unable to load Transformer: \" + trans);\n      }\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"serial\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      @Override\n      public boolean add(Transformer transformer) {\n        if (docBuilder != null && docBuilder.verboseDebug) {\n          transformer = docBuilder.getDebugLogger().wrapTransformer(transformer);\n        }\n        return super.add(transformer);\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        // The script transformer is a potential vulnerability, esp. when the script is\n        // provided from an untrusted source. Check and don't proceed if source is untrusted.\n        checkIfTrusted(trans);\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (Transformer.class.isAssignableFrom(clazz)) {\n          transformers.add((Transformer) clazz.getConstructor().newInstance());\n        } else {\n          Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (NoSuchMethodException nsme){\n         String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map<String.Object> m)method\";\n            log.error(msg);\n            wrapAndThrow(SEVERE, nsme,msg);        \n      } catch (Exception e) {\n        log.error(\"Unable to load Transformer: \" + aTransArr, e);\n        wrapAndThrow(SEVERE, e,\"Unable to load Transformer: \" + trans);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#loadTransformers().mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#loadTransformers().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      @Override\n      public boolean add(Transformer transformer) {\n        if (docBuilder != null && docBuilder.verboseDebug) {\n          transformer = docBuilder.getDebugLogger().wrapTransformer(transformer);\n        }\n        return super.add(transformer);\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        // The script transformer is a potential vulnerability, esp. when the script is\n        // provided from an untrusted source. Check and don't proceed if source is untrusted.\n        checkIfTrusted(trans);\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (Transformer.class.isAssignableFrom(clazz)) {\n          transformers.add((Transformer) clazz.getConstructor().newInstance());\n        } else {\n          Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (NoSuchMethodException nsme){\n         String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map<String.Object> m)method\";\n            log.error(msg);\n            wrapAndThrow(SEVERE, nsme,msg);        \n      } catch (Exception e) {\n        log.error(\"Unable to load Transformer: {}\", aTransArr, e);\n        wrapAndThrow(SEVERE, e,\"Unable to load Transformer: \" + trans);\n      }\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      @Override\n      public boolean add(Transformer transformer) {\n        if (docBuilder != null && docBuilder.verboseDebug) {\n          transformer = docBuilder.getDebugLogger().wrapTransformer(transformer);\n        }\n        return super.add(transformer);\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        // The script transformer is a potential vulnerability, esp. when the script is\n        // provided from an untrusted source. Check and don't proceed if source is untrusted.\n        checkIfTrusted(trans);\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (Transformer.class.isAssignableFrom(clazz)) {\n          transformers.add((Transformer) clazz.getConstructor().newInstance());\n        } else {\n          Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (NoSuchMethodException nsme){\n         String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map<String.Object> m)method\";\n            log.error(msg);\n            wrapAndThrow(SEVERE, nsme,msg);        \n      } catch (Exception e) {\n        log.error(\"Unable to load Transformer: \" + aTransArr, e);\n        wrapAndThrow(SEVERE, e,\"Unable to load Transformer: \" + trans);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"024e13388acbf5562fcbb77a129620982a5e2d79","date":1591531835,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#loadTransformers().mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#loadTransformers().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      @Override\n      public boolean add(Transformer transformer) {\n        if (docBuilder != null && docBuilder.verboseDebug) {\n          transformer = docBuilder.getDebugLogger().wrapTransformer(transformer);\n        }\n        return super.add(transformer);\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        // The script transformer is a potential vulnerability, esp. when the script is\n        // provided from an untrusted source. Check and don't proceed if source is untrusted.\n        checkIfTrusted(trans);\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        @SuppressWarnings({\"rawtypes\"})\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (Transformer.class.isAssignableFrom(clazz)) {\n          transformers.add((Transformer) clazz.getConstructor().newInstance());\n        } else {\n          Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (NoSuchMethodException nsme){\n         String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map<String.Object> m)method\";\n            log.error(msg);\n            wrapAndThrow(SEVERE, nsme,msg);        \n      } catch (Exception e) {\n        log.error(\"Unable to load Transformer: {}\", aTransArr, e);\n        wrapAndThrow(SEVERE, e,\"Unable to load Transformer: \" + trans);\n      }\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      @Override\n      public boolean add(Transformer transformer) {\n        if (docBuilder != null && docBuilder.verboseDebug) {\n          transformer = docBuilder.getDebugLogger().wrapTransformer(transformer);\n        }\n        return super.add(transformer);\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        // The script transformer is a potential vulnerability, esp. when the script is\n        // provided from an untrusted source. Check and don't proceed if source is untrusted.\n        checkIfTrusted(trans);\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (Transformer.class.isAssignableFrom(clazz)) {\n          transformers.add((Transformer) clazz.getConstructor().newInstance());\n        } else {\n          Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (NoSuchMethodException nsme){\n         String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map<String.Object> m)method\";\n            log.error(msg);\n            wrapAndThrow(SEVERE, nsme,msg);        \n      } catch (Exception e) {\n        log.error(\"Unable to load Transformer: {}\", aTransArr, e);\n        wrapAndThrow(SEVERE, e,\"Unable to load Transformer: \" + trans);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3adc4d119a7deba35b2721853853464857d9d0a9","date":1594608068,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#loadTransformers().mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#loadTransformers().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.emptyList();\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      @Override\n      public boolean add(Transformer transformer) {\n        if (docBuilder != null && docBuilder.verboseDebug) {\n          transformer = docBuilder.getDebugLogger().wrapTransformer(transformer);\n        }\n        return super.add(transformer);\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        // The script transformer is a potential vulnerability, esp. when the script is\n        // provided from an untrusted source. Check and don't proceed if source is untrusted.\n        checkIfTrusted(trans);\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        @SuppressWarnings({\"rawtypes\"})\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (Transformer.class.isAssignableFrom(clazz)) {\n          transformers.add((Transformer) clazz.getConstructor().newInstance());\n        } else {\n          Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (NoSuchMethodException nsme){\n         String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map<String.Object> m)method\";\n            log.error(msg);\n            wrapAndThrow(SEVERE, nsme,msg);        \n      } catch (Exception e) {\n        log.error(\"Unable to load Transformer: {}\", aTransArr, e);\n        wrapAndThrow(SEVERE, e,\"Unable to load Transformer: \" + trans);\n      }\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      @Override\n      public boolean add(Transformer transformer) {\n        if (docBuilder != null && docBuilder.verboseDebug) {\n          transformer = docBuilder.getDebugLogger().wrapTransformer(transformer);\n        }\n        return super.add(transformer);\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        // The script transformer is a potential vulnerability, esp. when the script is\n        // provided from an untrusted source. Check and don't proceed if source is untrusted.\n        checkIfTrusted(trans);\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        @SuppressWarnings({\"rawtypes\"})\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (Transformer.class.isAssignableFrom(clazz)) {\n          transformers.add((Transformer) clazz.getConstructor().newInstance());\n        } else {\n          Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (NoSuchMethodException nsme){\n         String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map<String.Object> m)method\";\n            log.error(msg);\n            wrapAndThrow(SEVERE, nsme,msg);        \n      } catch (Exception e) {\n        log.error(\"Unable to load Transformer: {}\", aTransArr, e);\n        wrapAndThrow(SEVERE, e,\"Unable to load Transformer: \" + trans);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#loadTransformers().mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"unchecked\"})\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.emptyList();\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      @Override\n      public boolean add(Transformer transformer) {\n        if (docBuilder != null && docBuilder.verboseDebug) {\n          transformer = docBuilder.getDebugLogger().wrapTransformer(transformer);\n        }\n        return super.add(transformer);\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        // The script transformer is a potential vulnerability, esp. when the script is\n        // provided from an untrusted source. Check and don't proceed if source is untrusted.\n        checkIfTrusted(trans);\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        @SuppressWarnings({\"rawtypes\"})\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (Transformer.class.isAssignableFrom(clazz)) {\n          transformers.add((Transformer) clazz.getConstructor().newInstance());\n        } else {\n          Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (NoSuchMethodException nsme){\n         String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map<String.Object> m)method\";\n            log.error(msg);\n            wrapAndThrow(SEVERE, nsme,msg);        \n      } catch (Exception e) {\n        log.error(\"Unable to load Transformer: {}\", aTransArr, e);\n        wrapAndThrow(SEVERE, e,\"Unable to load Transformer: \" + trans);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"024e13388acbf5562fcbb77a129620982a5e2d79":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"917e62f3497c83634a13edd833e8e21dd6cc6496":["7bedd63933040e88a07397e8a0fda8f3aae2a8db"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["3adc4d119a7deba35b2721853853464857d9d0a9"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["917e62f3497c83634a13edd833e8e21dd6cc6496"],"3adc4d119a7deba35b2721853853464857d9d0a9":["024e13388acbf5562fcbb77a129620982a5e2d79"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"3732e34f27916e98704736cc6924a34fffca249a":["7bedd63933040e88a07397e8a0fda8f3aae2a8db"],"7bedd63933040e88a07397e8a0fda8f3aae2a8db":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"024e13388acbf5562fcbb77a129620982a5e2d79":["3adc4d119a7deba35b2721853853464857d9d0a9"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"c26f00b574427b55127e869b935845554afde1fa":["7bedd63933040e88a07397e8a0fda8f3aae2a8db"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["024e13388acbf5562fcbb77a129620982a5e2d79"],"917e62f3497c83634a13edd833e8e21dd6cc6496":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3adc4d119a7deba35b2721853853464857d9d0a9":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"3732e34f27916e98704736cc6924a34fffca249a":[],"7bedd63933040e88a07397e8a0fda8f3aae2a8db":["917e62f3497c83634a13edd833e8e21dd6cc6496","3732e34f27916e98704736cc6924a34fffca249a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3732e34f27916e98704736cc6924a34fffca249a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}