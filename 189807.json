{"path":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testFormatWithMatchExceedingContentLength().mjava","commits":[{"id":"71393760b816981b3e59704441c8bd6f32276046","date":1376329629,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testFormatWithMatchExceedingContentLength().mjava","pathOld":"/dev/null","sourceNew":"  public void testFormatWithMatchExceedingContentLength() throws Exception {\n          \n    int maxLength = 17;\n    String bodyText = \"123 5678 01234 TEST\";\n    \n    final Analyzer analyzer = new MockAnalyzer(random());\n    \n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    final FieldType fieldType = new FieldType(TextField.TYPE_STORED);\n    fieldType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    final Field body = new Field(\"body\", bodyText, fieldType);\n    \n    Document doc = new Document();\n    doc.add(body);\n    \n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    \n    Query query = new TermQuery(new Term(\"body\", \"test\"));\n    \n    TopDocs topDocs = searcher.search(query, null, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    \n    PostingsHighlighter highlighter = new PostingsHighlighter(maxLength);\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, topDocs);\n    \n    \n    assertEquals(1, snippets.length);\n    // LUCENE-5166: no snippet\n    assertEquals(\"123 5678 01234 TE\", snippets[0]);\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testFormatWithMatchExceedingContentLength().mjava","pathOld":"/dev/null","sourceNew":"  public void testFormatWithMatchExceedingContentLength() throws Exception {\n          \n    int maxLength = 17;\n    String bodyText = \"123 5678 01234 TEST\";\n    \n    final Analyzer analyzer = new MockAnalyzer(random());\n    \n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    final FieldType fieldType = new FieldType(TextField.TYPE_STORED);\n    fieldType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    final Field body = new Field(\"body\", bodyText, fieldType);\n    \n    Document doc = new Document();\n    doc.add(body);\n    \n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    \n    Query query = new TermQuery(new Term(\"body\", \"test\"));\n    \n    TopDocs topDocs = searcher.search(query, null, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    \n    PostingsHighlighter highlighter = new PostingsHighlighter(maxLength);\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, topDocs);\n    \n    \n    assertEquals(1, snippets.length);\n    // LUCENE-5166: no snippet\n    assertEquals(\"123 5678 01234 TE\", snippets[0]);\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4dcface3bab82444afcba8add9fb24a2d7276330","date":1376585535,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testFormatWithMatchExceedingContentLength().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testFormatWithMatchExceedingContentLength().mjava","sourceNew":"  public void testFormatWithMatchExceedingContentLength() throws Exception {\n    \n    String bodyText = \"123 5678 01234 TEST\";\n    \n    String[] snippets = formatWithMatchExceedingContentLength(bodyText);\n    \n    assertEquals(1, snippets.length);\n    // LUCENE-5166: no snippet\n    assertEquals(\"123 5678 01234 TE\", snippets[0]);\n  }\n\n","sourceOld":"  public void testFormatWithMatchExceedingContentLength() throws Exception {\n          \n    int maxLength = 17;\n    String bodyText = \"123 5678 01234 TEST\";\n    \n    final Analyzer analyzer = new MockAnalyzer(random());\n    \n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    final FieldType fieldType = new FieldType(TextField.TYPE_STORED);\n    fieldType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    final Field body = new Field(\"body\", bodyText, fieldType);\n    \n    Document doc = new Document();\n    doc.add(body);\n    \n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    \n    Query query = new TermQuery(new Term(\"body\", \"test\"));\n    \n    TopDocs topDocs = searcher.search(query, null, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    \n    PostingsHighlighter highlighter = new PostingsHighlighter(maxLength);\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, topDocs);\n    \n    \n    assertEquals(1, snippets.length);\n    // LUCENE-5166: no snippet\n    assertEquals(\"123 5678 01234 TE\", snippets[0]);\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testFormatWithMatchExceedingContentLength().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testFormatWithMatchExceedingContentLength().mjava","sourceNew":"  public void testFormatWithMatchExceedingContentLength() throws Exception {\n    \n    String bodyText = \"123 5678 01234 TEST\";\n    \n    String[] snippets = formatWithMatchExceedingContentLength(bodyText);\n    \n    assertEquals(1, snippets.length);\n    // LUCENE-5166: no snippet\n    assertEquals(\"123 5678 01234 TE\", snippets[0]);\n  }\n\n","sourceOld":"  public void testFormatWithMatchExceedingContentLength() throws Exception {\n          \n    int maxLength = 17;\n    String bodyText = \"123 5678 01234 TEST\";\n    \n    final Analyzer analyzer = new MockAnalyzer(random());\n    \n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    final FieldType fieldType = new FieldType(TextField.TYPE_STORED);\n    fieldType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    final Field body = new Field(\"body\", bodyText, fieldType);\n    \n    Document doc = new Document();\n    doc.add(body);\n    \n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    \n    Query query = new TermQuery(new Term(\"body\", \"test\"));\n    \n    TopDocs topDocs = searcher.search(query, null, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    \n    PostingsHighlighter highlighter = new PostingsHighlighter(maxLength);\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, topDocs);\n    \n    \n    assertEquals(1, snippets.length);\n    // LUCENE-5166: no snippet\n    assertEquals(\"123 5678 01234 TE\", snippets[0]);\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"381618eac2691bb34ab9a3fca76ad55c6274517e","date":1495564791,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testFormatWithMatchExceedingContentLength().mjava","sourceNew":null,"sourceOld":"  public void testFormatWithMatchExceedingContentLength() throws Exception {\n    \n    String bodyText = \"123 5678 01234 TEST\";\n    \n    String[] snippets = formatWithMatchExceedingContentLength(bodyText);\n    \n    assertEquals(1, snippets.length);\n    // LUCENE-5166: no snippet\n    assertEquals(\"123 5678 01234 TE\", snippets[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testFormatWithMatchExceedingContentLength().mjava","sourceNew":null,"sourceOld":"  public void testFormatWithMatchExceedingContentLength() throws Exception {\n    \n    String bodyText = \"123 5678 01234 TEST\";\n    \n    String[] snippets = formatWithMatchExceedingContentLength(bodyText);\n    \n    assertEquals(1, snippets.length);\n    // LUCENE-5166: no snippet\n    assertEquals(\"123 5678 01234 TE\", snippets[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"381618eac2691bb34ab9a3fca76ad55c6274517e":["4dcface3bab82444afcba8add9fb24a2d7276330"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["4dcface3bab82444afcba8add9fb24a2d7276330","381618eac2691bb34ab9a3fca76ad55c6274517e"],"4dcface3bab82444afcba8add9fb24a2d7276330":["71393760b816981b3e59704441c8bd6f32276046"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","4dcface3bab82444afcba8add9fb24a2d7276330"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71393760b816981b3e59704441c8bd6f32276046":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["381618eac2691bb34ab9a3fca76ad55c6274517e"]},"commit2Childs":{"381618eac2691bb34ab9a3fca76ad55c6274517e":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"4dcface3bab82444afcba8add9fb24a2d7276330":["381618eac2691bb34ab9a3fca76ad55c6274517e","e9017cf144952056066919f1ebc7897ff9bd71b1","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","71393760b816981b3e59704441c8bd6f32276046"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"71393760b816981b3e59704441c8bd6f32276046":["4dcface3bab82444afcba8add9fb24a2d7276330"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}