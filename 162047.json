{"path":"src/java/org/apache/lucene/analysis/CharTokenizer#isTokenChar(int).mjava","commits":[{"id":"966b079690131e434b39530d82cc413f5aff4cd5","date":1264751025,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/CharTokenizer#isTokenChar(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns true iff a codepoint should be included in a token. This tokenizer\n   * generates as tokens adjacent sequences of codepoints which satisfy this\n   * predicate. Codepoints for which this is false are used to define token\n   * boundaries and are not included in tokens.\n   * <p>\n   * As of Lucene 3.1 the char based API ({@link #isTokenChar(char)} and\n   * {@link #normalize(char)}) has been depreciated in favor of a Unicode 4.0\n   * compatible int based API to support codepoints instead of UTF-16 code\n   * units. Subclasses of {@link CharTokenizer} must not override the char based\n   * methods if a {@link Version} >= 3.1 is passed to the constructor.\n   * <p>\n   * <p>\n   * NOTE: This method will be marked <i>abstract</i> in Lucene 4.0.\n   * </p>\n   */\n  protected boolean isTokenChar(int c) {\n    throw new UnsupportedOperationException(\"since LUCENE_3_1 subclasses of CharTokenizer must implement isTokenChar(int)\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/analysis/CharTokenizer#isTokenChar(int).mjava","pathOld":"src/java/org/apache/lucene/analysis/CharTokenizer#isTokenChar(int).mjava","sourceNew":"  /**\n   * Returns true iff a codepoint should be included in a token. This tokenizer\n   * generates as tokens adjacent sequences of codepoints which satisfy this\n   * predicate. Codepoints for which this is false are used to define token\n   * boundaries and are not included in tokens.\n   * <p>\n   * As of Lucene 3.1 the char based API ({@link #isTokenChar(char)} and\n   * {@link #normalize(char)}) has been depreciated in favor of a Unicode 4.0\n   * compatible int based API to support codepoints instead of UTF-16 code\n   * units. Subclasses of {@link CharTokenizer} must not override the char based\n   * methods if a {@link Version} >= 3.1 is passed to the constructor.\n   * <p>\n   * <p>\n   * NOTE: This method will be marked <i>abstract</i> in Lucene 4.0.\n   * </p>\n   */\n  protected boolean isTokenChar(int c) {\n    throw new UnsupportedOperationException(\"since LUCENE_3_1 subclasses of CharTokenizer must implement isTokenChar(int)\");\n  }\n\n","sourceOld":"  /**\n   * Returns true iff a codepoint should be included in a token. This tokenizer\n   * generates as tokens adjacent sequences of codepoints which satisfy this\n   * predicate. Codepoints for which this is false are used to define token\n   * boundaries and are not included in tokens.\n   * <p>\n   * As of Lucene 3.1 the char based API ({@link #isTokenChar(char)} and\n   * {@link #normalize(char)}) has been depreciated in favor of a Unicode 4.0\n   * compatible int based API to support codepoints instead of UTF-16 code\n   * units. Subclasses of {@link CharTokenizer} must not override the char based\n   * methods if a {@link Version} >= 3.1 is passed to the constructor.\n   * <p>\n   * <p>\n   * NOTE: This method will be marked <i>abstract</i> in Lucene 4.0.\n   * </p>\n   */\n  protected boolean isTokenChar(int c) {\n    throw new UnsupportedOperationException(\"since LUCENE_3_1 subclasses of CharTokenizer must implement isTokenChar(int)\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"966b079690131e434b39530d82cc413f5aff4cd5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["966b079690131e434b39530d82cc413f5aff4cd5"]},"commit2Childs":{"966b079690131e434b39530d82cc413f5aff4cd5":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["966b079690131e434b39530d82cc413f5aff4cd5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}