{"path":"contrib/analyzers/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter#ngram(Token).mjava","commits":[{"id":"342c2472c1ae168beaaa48cb95efccb003fa4160","date":1173745813,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter#ngram(Token).mjava","pathOld":"/dev/null","sourceNew":"  private void ngram(Token token) {\n    String inStr = token.termText();\n    int inLen = inStr.length();\n    int gramSize = minGram;\n    while (gramSize <= maxGram) {\n      // if the remaining input is too short, we can't generate any n-grams\n      if (gramSize > inLen) {\n        return;\n      }\n\n      // if we have hit the end of our n-gram size range, quit\n      if (gramSize > maxGram) {\n        return;\n      }\n\n      Token tok;\n      if (side == Side.FRONT) {\n        tok = new Token(inStr.substring(0, gramSize), 0, gramSize);\n      }\n      else {\n        tok = new Token(inStr.substring(inLen-gramSize), inLen-gramSize, inLen);\n      }\n      ngrams.add(tok);\n      gramSize++;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter#ngram(Token).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter#ngram(Token).mjava","sourceNew":"  private void ngram(final Token token) {\n    int termLength = token.termLength();\n    char[] termBuffer = token.termBuffer();\n    int gramSize = minGram;\n    while (gramSize <= maxGram) {\n      // if the remaining input is too short, we can't generate any n-grams\n      if (gramSize > termLength) {\n        return;\n      }\n\n      // if we have hit the end of our n-gram size range, quit\n      if (gramSize > maxGram) {\n        return;\n      }\n\n      // grab gramSize chars from front or back\n      int start = side == Side.FRONT ? 0 : termLength - gramSize;\n      int end = start + gramSize;\n      Token tok = (Token) token.clone();\n      tok.setStartOffset(start);\n      tok.setEndOffset(end);\n      tok.setTermBuffer(termBuffer, start, gramSize);\n      ngrams.add(tok);\n      gramSize++;\n    }\n  }\n\n","sourceOld":"  private void ngram(Token token) {\n    String inStr = token.termText();\n    int inLen = inStr.length();\n    int gramSize = minGram;\n    while (gramSize <= maxGram) {\n      // if the remaining input is too short, we can't generate any n-grams\n      if (gramSize > inLen) {\n        return;\n      }\n\n      // if we have hit the end of our n-gram size range, quit\n      if (gramSize > maxGram) {\n        return;\n      }\n\n      Token tok;\n      if (side == Side.FRONT) {\n        tok = new Token(inStr.substring(0, gramSize), 0, gramSize);\n      }\n      else {\n        tok = new Token(inStr.substring(inLen-gramSize), inLen-gramSize, inLen);\n      }\n      ngrams.add(tok);\n      gramSize++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter#ngram(Token).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter#ngram(Token).mjava","sourceNew":"  private void ngram(final Token token) {\n    int termLength = token.termLength();\n    char[] termBuffer = token.termBuffer();\n    int gramSize = minGram;\n    while (gramSize <= maxGram) {\n      // if the remaining input is too short, we can't generate any n-grams\n      if (gramSize > termLength) {\n        return;\n      }\n\n      // if we have hit the end of our n-gram size range, quit\n      if (gramSize > maxGram) {\n        return;\n      }\n\n      // grab gramSize chars from front or back\n      int start = side == Side.FRONT ? 0 : termLength - gramSize;\n      int end = start + gramSize;\n      Token tok = (Token) token.clone();\n      tok.setStartOffset(start);\n      tok.setEndOffset(end);\n      tok.setTermBuffer(termBuffer, start, gramSize);\n      ngrams.add(tok);\n      gramSize++;\n    }\n  }\n\n","sourceOld":"  private void ngram(final Token token) {\n    int termLength = token.termLength();\n    char[] termBuffer = token.termBuffer();\n    int gramSize = minGram;\n    while (gramSize <= maxGram) {\n      // if the remaining input is too short, we can't generate any n-grams\n      if (gramSize > termLength) {\n        return;\n      }\n\n      // if we have hit the end of our n-gram size range, quit\n      if (gramSize > maxGram) {\n        return;\n      }\n\n      // grab gramSize chars from front or back\n      int start = side == Side.FRONT ? 0 : termLength - gramSize;\n      int end = start + gramSize;\n      Token tok = (Token) token.clone();\n      tok.setStartOffset(start);\n      tok.setEndOffset(end);\n      tok.setTermBuffer(termBuffer, start, gramSize);\n      ngrams.add(tok);\n      gramSize++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["342c2472c1ae168beaaa48cb95efccb003fa4160"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"342c2472c1ae168beaaa48cb95efccb003fa4160":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd745d580729e528151b58aeda87ef82f1b95c9b"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"342c2472c1ae168beaaa48cb95efccb003fa4160":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["342c2472c1ae168beaaa48cb95efccb003fa4160"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}