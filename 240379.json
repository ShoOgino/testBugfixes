{"path":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testSize().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testSize().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBytesRefHash#testSize().mjava","sourceNew":"  /**\n   * Test method for {@link org.apache.lucene.util.BytesRefHash#size()}.\n   */\n  @Test\n  public void testSize() {\n    BytesRef ref = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      final int mod = 1+random.nextInt(39);\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random, 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n        if (key < 0)\n          assertEquals(hash.size(), count);\n        else\n          assertEquals(hash.size(), count + 1);\n        if(i % mod == 0) {\n          hash.clear();\n          assertEquals(0, hash.size());\n          hash.reinit();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Test method for {@link org.apache.lucene.util.BytesRefHash#size()}.\n   */\n  @Test\n  public void testSize() {\n    BytesRef ref = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      final int mod = 1+random.nextInt(39);\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random, 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n        if (key < 0)\n          assertEquals(hash.size(), count);\n        else\n          assertEquals(hash.size(), count + 1);\n        if(i % mod == 0) {\n          hash.clear();\n          assertEquals(0, hash.size());\n          hash.reinit();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testSize().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testSize().mjava","sourceNew":"  /**\n   * Test method for {@link org.apache.lucene.util.BytesRefHash#size()}.\n   */\n  @Test\n  public void testSize() {\n    BytesRef ref = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      final int mod = 1+random().nextInt(39);\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random(), 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n        if (key < 0)\n          assertEquals(hash.size(), count);\n        else\n          assertEquals(hash.size(), count + 1);\n        if(i % mod == 0) {\n          hash.clear();\n          assertEquals(0, hash.size());\n          hash.reinit();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Test method for {@link org.apache.lucene.util.BytesRefHash#size()}.\n   */\n  @Test\n  public void testSize() {\n    BytesRef ref = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      final int mod = 1+random.nextInt(39);\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random, 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n        if (key < 0)\n          assertEquals(hash.size(), count);\n        else\n          assertEquals(hash.size(), count + 1);\n        if(i % mod == 0) {\n          hash.clear();\n          assertEquals(0, hash.size());\n          hash.reinit();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testSize().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testSize().mjava","sourceNew":"  /**\n   * Test method for {@link org.apache.lucene.util.BytesRefHash#size()}.\n   */\n  @Test\n  public void testSize() {\n    BytesRef ref = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      final int mod = 1+random().nextInt(39);\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = TestUtil.randomRealisticUnicodeString(random(), 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n        if (key < 0)\n          assertEquals(hash.size(), count);\n        else\n          assertEquals(hash.size(), count + 1);\n        if(i % mod == 0) {\n          hash.clear();\n          assertEquals(0, hash.size());\n          hash.reinit();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Test method for {@link org.apache.lucene.util.BytesRefHash#size()}.\n   */\n  @Test\n  public void testSize() {\n    BytesRef ref = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      final int mod = 1+random().nextInt(39);\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random(), 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n        if (key < 0)\n          assertEquals(hash.size(), count);\n        else\n          assertEquals(hash.size(), count + 1);\n        if(i % mod == 0) {\n          hash.clear();\n          assertEquals(0, hash.size());\n          hash.reinit();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testSize().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testSize().mjava","sourceNew":"  /**\n   * Test method for {@link org.apache.lucene.util.BytesRefHash#size()}.\n   */\n  @Test\n  public void testSize() {\n    BytesRefBuilder ref = new BytesRefBuilder();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      final int mod = 1+random().nextInt(39);\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = TestUtil.randomRealisticUnicodeString(random(), 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        int count = hash.size();\n        int key = hash.add(ref.get());\n        if (key < 0)\n          assertEquals(hash.size(), count);\n        else\n          assertEquals(hash.size(), count + 1);\n        if(i % mod == 0) {\n          hash.clear();\n          assertEquals(0, hash.size());\n          hash.reinit();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Test method for {@link org.apache.lucene.util.BytesRefHash#size()}.\n   */\n  @Test\n  public void testSize() {\n    BytesRef ref = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      final int mod = 1+random().nextInt(39);\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = TestUtil.randomRealisticUnicodeString(random(), 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n        if (key < 0)\n          assertEquals(hash.size(), count);\n        else\n          assertEquals(hash.size(), count + 1);\n        if(i % mod == 0) {\n          hash.clear();\n          assertEquals(0, hash.size());\n          hash.reinit();\n        }\n      }\n    }\n  }\n\n","bugFix":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6613659748fe4411a7dcf85266e55db1f95f7315":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["6613659748fe4411a7dcf85266e55db1f95f7315"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"]},"commit2Childs":{"6613659748fe4411a7dcf85266e55db1f95f7315":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["6613659748fe4411a7dcf85266e55db1f95f7315"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}