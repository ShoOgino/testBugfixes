{"path":"solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateProcessorFactory.AtomicUpdateProcessor#processAddWithRetry(AddUpdateCommand,int).mjava","commits":[{"id":"f1de703f36b1071144037c80ca5fe118aa5e96fd","date":1493947151,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateProcessorFactory.AtomicUpdateProcessor#processAddWithRetry(AddUpdateCommand,int).mjava","pathOld":"/dev/null","sourceNew":"    private void processAddWithRetry(AddUpdateCommand cmd, int attempts) throws IOException {\n      try {\n        super.processAdd(cmd);\n      } catch (SolrException e) {\n        if (attempts++ >= MAX_ATTEMPTS) {//maximum number of attempts allowed: 5\n          throw new SolrException(SERVER_ERROR,\n              \"Atomic update failed after multiple attempts due to \" + e.getMessage());\n        }\n        if (e.code() == ErrorCode.CONFLICT.code) { // version conflict\n          log.warn(\"Atomic update failed due to \" + e.getMessage() +\n              \"Retrying with new version .... (\" + attempts + \")\");\n          Long lastVersion = vinfo.lookupVersion(cmd.getIndexedId());\n          if (lastVersion != null) {\n            cmd.solrDoc.setField(VERSION, lastVersion);\n          }\n          processAddWithRetry(cmd, attempts);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateProcessorFactory.AtomicUpdateProcessor#processAddWithRetry(AddUpdateCommand,int).mjava","pathOld":"/dev/null","sourceNew":"    private void processAddWithRetry(AddUpdateCommand cmd, int attempts) throws IOException {\n      try {\n        super.processAdd(cmd);\n      } catch (SolrException e) {\n        if (attempts++ >= MAX_ATTEMPTS) {//maximum number of attempts allowed: 5\n          throw new SolrException(SERVER_ERROR,\n              \"Atomic update failed after multiple attempts due to \" + e.getMessage());\n        }\n        if (e.code() == ErrorCode.CONFLICT.code) { // version conflict\n          log.warn(\"Atomic update failed due to \" + e.getMessage() +\n              \"Retrying with new version .... (\" + attempts + \")\");\n          Long lastVersion = vinfo.lookupVersion(cmd.getIndexedId());\n          if (lastVersion != null) {\n            cmd.solrDoc.setField(VERSION, lastVersion);\n          }\n          processAddWithRetry(cmd, attempts);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29f58859ae799964a6d229bf545960d9077932db","date":1501135078,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateProcessorFactory.AtomicUpdateProcessor#processAddWithRetry(AddUpdateCommand,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateProcessorFactory.AtomicUpdateProcessor#processAddWithRetry(AddUpdateCommand,int).mjava","sourceNew":"    private void processAddWithRetry(AddUpdateCommand cmd, int attempts) throws IOException {\n      try {\n        super.processAdd(cmd);\n      } catch (SolrException e) {\n        if (attempts++ >= MAX_ATTEMPTS) {//maximum number of attempts allowed: 25\n          throw new SolrException(SERVER_ERROR,\n              \"Atomic update failed after multiple attempts due to \" + e.getMessage());\n        }\n        if (e.code() == ErrorCode.CONFLICT.code) { // version conflict\n          log.warn(\"Atomic update failed due to \" + e.getMessage() +\n              \"Retrying with new version .... (\" + attempts + \")\");\n          Long lastVersion = vinfo.lookupVersion(cmd.getIndexedId());\n          if (lastVersion != null) {\n            cmd.solrDoc.setField(VERSION, lastVersion);\n          }\n          processAddWithRetry(cmd, attempts);\n        }\n      }\n    }\n\n","sourceOld":"    private void processAddWithRetry(AddUpdateCommand cmd, int attempts) throws IOException {\n      try {\n        super.processAdd(cmd);\n      } catch (SolrException e) {\n        if (attempts++ >= MAX_ATTEMPTS) {//maximum number of attempts allowed: 5\n          throw new SolrException(SERVER_ERROR,\n              \"Atomic update failed after multiple attempts due to \" + e.getMessage());\n        }\n        if (e.code() == ErrorCode.CONFLICT.code) { // version conflict\n          log.warn(\"Atomic update failed due to \" + e.getMessage() +\n              \"Retrying with new version .... (\" + attempts + \")\");\n          Long lastVersion = vinfo.lookupVersion(cmd.getIndexedId());\n          if (lastVersion != null) {\n            cmd.solrDoc.setField(VERSION, lastVersion);\n          }\n          processAddWithRetry(cmd, attempts);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateProcessorFactory.AtomicUpdateProcessor#processAddWithRetry(AddUpdateCommand,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateProcessorFactory.AtomicUpdateProcessor#processAddWithRetry(AddUpdateCommand,int).mjava","sourceNew":"    private void processAddWithRetry(AddUpdateCommand cmd, int attempts) throws IOException {\n      try {\n        super.processAdd(cmd);\n      } catch (SolrException e) {\n        if (attempts++ >= MAX_ATTEMPTS) {//maximum number of attempts allowed: 25\n          throw new SolrException(SERVER_ERROR,\n              \"Atomic update failed after multiple attempts due to \" + e.getMessage());\n        }\n        if (e.code() == ErrorCode.CONFLICT.code) { // version conflict\n          log.warn(\"Atomic update failed due to \" + e.getMessage() +\n              \"Retrying with new version .... (\" + attempts + \")\");\n          Long lastVersion = vinfo.lookupVersion(cmd.getIndexedId());\n          if (lastVersion != null) {\n            cmd.solrDoc.setField(VERSION, lastVersion);\n          }\n          processAddWithRetry(cmd, attempts);\n        }\n      }\n    }\n\n","sourceOld":"    private void processAddWithRetry(AddUpdateCommand cmd, int attempts) throws IOException {\n      try {\n        super.processAdd(cmd);\n      } catch (SolrException e) {\n        if (attempts++ >= MAX_ATTEMPTS) {//maximum number of attempts allowed: 5\n          throw new SolrException(SERVER_ERROR,\n              \"Atomic update failed after multiple attempts due to \" + e.getMessage());\n        }\n        if (e.code() == ErrorCode.CONFLICT.code) { // version conflict\n          log.warn(\"Atomic update failed due to \" + e.getMessage() +\n              \"Retrying with new version .... (\" + attempts + \")\");\n          Long lastVersion = vinfo.lookupVersion(cmd.getIndexedId());\n          if (lastVersion != null) {\n            cmd.solrDoc.setField(VERSION, lastVersion);\n          }\n          processAddWithRetry(cmd, attempts);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78c4170c235dc5c6ceb6cdba24c7df20aaee19a2","date":1522143323,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateProcessorFactory.AtomicUpdateProcessor#processAddWithRetry(AddUpdateCommand,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateProcessorFactory.AtomicUpdateProcessor#processAddWithRetry(AddUpdateCommand,int).mjava","sourceNew":"    private void processAddWithRetry(AddUpdateCommand cmd, int attempts) throws IOException {\n      try {\n        super.processAdd(cmd);\n      } catch (SolrException e) {\n        if (attempts++ >= MAX_ATTEMPTS) {//maximum number of attempts allowed: 25\n          throw new SolrException(SERVER_ERROR,\n              \"Atomic update failed after multiple attempts due to \" + e.getMessage());\n        }\n        if (e.code() == ErrorCode.CONFLICT.code) { // version conflict\n          log.warn(\"Atomic update failed due to \" + e.getMessage() +\n              \" Retrying with new version .... (\" + attempts + \")\");\n          Long lastVersion = vinfo.lookupVersion(cmd.getIndexedId());\n          if (lastVersion != null) {\n            cmd.solrDoc.setField(VERSION, lastVersion);\n          }\n          processAddWithRetry(cmd, attempts);\n        }\n      }\n    }\n\n","sourceOld":"    private void processAddWithRetry(AddUpdateCommand cmd, int attempts) throws IOException {\n      try {\n        super.processAdd(cmd);\n      } catch (SolrException e) {\n        if (attempts++ >= MAX_ATTEMPTS) {//maximum number of attempts allowed: 25\n          throw new SolrException(SERVER_ERROR,\n              \"Atomic update failed after multiple attempts due to \" + e.getMessage());\n        }\n        if (e.code() == ErrorCode.CONFLICT.code) { // version conflict\n          log.warn(\"Atomic update failed due to \" + e.getMessage() +\n              \"Retrying with new version .... (\" + attempts + \")\");\n          Long lastVersion = vinfo.lookupVersion(cmd.getIndexedId());\n          if (lastVersion != null) {\n            cmd.solrDoc.setField(VERSION, lastVersion);\n          }\n          processAddWithRetry(cmd, attempts);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7","date":1522191940,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateProcessorFactory.AtomicUpdateProcessor#processAddWithRetry(AddUpdateCommand,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateProcessorFactory.AtomicUpdateProcessor#processAddWithRetry(AddUpdateCommand,int).mjava","sourceNew":"    private void processAddWithRetry(AddUpdateCommand cmd, int attempts) throws IOException {\n      try {\n        super.processAdd(cmd);\n      } catch (SolrException e) {\n        if (attempts++ >= MAX_ATTEMPTS) {//maximum number of attempts allowed: 25\n          throw new SolrException(SERVER_ERROR,\n              \"Atomic update failed after multiple attempts due to \" + e.getMessage());\n        }\n        if (e.code() == ErrorCode.CONFLICT.code) { // version conflict\n          log.warn(\"Atomic update failed due to \" + e.getMessage() +\n              \" Retrying with new version .... (\" + attempts + \")\");\n          Long lastVersion = vinfo.lookupVersion(cmd.getIndexedId());\n          if (lastVersion != null) {\n            cmd.solrDoc.setField(VERSION, lastVersion);\n          }\n          processAddWithRetry(cmd, attempts);\n        }\n      }\n    }\n\n","sourceOld":"    private void processAddWithRetry(AddUpdateCommand cmd, int attempts) throws IOException {\n      try {\n        super.processAdd(cmd);\n      } catch (SolrException e) {\n        if (attempts++ >= MAX_ATTEMPTS) {//maximum number of attempts allowed: 25\n          throw new SolrException(SERVER_ERROR,\n              \"Atomic update failed after multiple attempts due to \" + e.getMessage());\n        }\n        if (e.code() == ErrorCode.CONFLICT.code) { // version conflict\n          log.warn(\"Atomic update failed due to \" + e.getMessage() +\n              \"Retrying with new version .... (\" + attempts + \")\");\n          Long lastVersion = vinfo.lookupVersion(cmd.getIndexedId());\n          if (lastVersion != null) {\n            cmd.solrDoc.setField(VERSION, lastVersion);\n          }\n          processAddWithRetry(cmd, attempts);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"392e007070227c0fd1c28259a11f55a06a9bd7c2","date":1522221057,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateProcessorFactory.AtomicUpdateProcessor#processAddWithRetry(AddUpdateCommand,int,SolrInputDocument).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateProcessorFactory.AtomicUpdateProcessor#processAddWithRetry(AddUpdateCommand,int).mjava","sourceNew":"    private void processAddWithRetry(AddUpdateCommand cmd, int attempts, SolrInputDocument clonedOriginalDoc) throws IOException {\n      try {\n        super.processAdd(cmd);\n      } catch (SolrException e) {\n        if (attempts++ >= MAX_ATTEMPTS) {//maximum number of attempts allowed: 25\n          throw new SolrException(SERVER_ERROR,\n              \"Atomic update failed after multiple attempts due to \" + e.getMessage());\n        }\n        if (e.code() == ErrorCode.CONFLICT.code) { // version conflict\n          log.warn(\"Atomic update failed due to \" + e.getMessage() +\n              \" Retrying with new version .... (\" + attempts + \")\");\n\n          Long lastVersion = vinfo.lookupVersion(cmd.getIndexedId());\n          // if lastVersion is null then we put -1 to assert that document must not exist\n          lastVersion = lastVersion == null ? -1 : lastVersion;\n\n          // The AtomicUpdateDocumentMerger modifies the AddUpdateCommand.solrDoc to populate the real values of the\n          // modified fields. We don't want those absolute values because they are out-of-date due to the conflict\n          // so we restore the original document created in processAdd method and set the right version on it\n          cmd.solrDoc = clonedOriginalDoc;\n          cmd.solrDoc.setField(VERSION, lastVersion);\n\n          processAddWithRetry(cmd, attempts, clonedOriginalDoc);\n        }\n      }\n    }\n\n","sourceOld":"    private void processAddWithRetry(AddUpdateCommand cmd, int attempts) throws IOException {\n      try {\n        super.processAdd(cmd);\n      } catch (SolrException e) {\n        if (attempts++ >= MAX_ATTEMPTS) {//maximum number of attempts allowed: 25\n          throw new SolrException(SERVER_ERROR,\n              \"Atomic update failed after multiple attempts due to \" + e.getMessage());\n        }\n        if (e.code() == ErrorCode.CONFLICT.code) { // version conflict\n          log.warn(\"Atomic update failed due to \" + e.getMessage() +\n              \" Retrying with new version .... (\" + attempts + \")\");\n          Long lastVersion = vinfo.lookupVersion(cmd.getIndexedId());\n          if (lastVersion != null) {\n            cmd.solrDoc.setField(VERSION, lastVersion);\n          }\n          processAddWithRetry(cmd, attempts);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateProcessorFactory.AtomicUpdateProcessor#processAddWithRetry(AddUpdateCommand,int,SolrInputDocument).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateProcessorFactory.AtomicUpdateProcessor#processAddWithRetry(AddUpdateCommand,int).mjava","sourceNew":"    private void processAddWithRetry(AddUpdateCommand cmd, int attempts, SolrInputDocument clonedOriginalDoc) throws IOException {\n      try {\n        super.processAdd(cmd);\n      } catch (SolrException e) {\n        if (attempts++ >= MAX_ATTEMPTS) {//maximum number of attempts allowed: 25\n          throw new SolrException(SERVER_ERROR,\n              \"Atomic update failed after multiple attempts due to \" + e.getMessage());\n        }\n        if (e.code() == ErrorCode.CONFLICT.code) { // version conflict\n          log.warn(\"Atomic update failed due to \" + e.getMessage() +\n              \" Retrying with new version .... (\" + attempts + \")\");\n\n          Long lastVersion = vinfo.lookupVersion(cmd.getIndexedId());\n          // if lastVersion is null then we put -1 to assert that document must not exist\n          lastVersion = lastVersion == null ? -1 : lastVersion;\n\n          // The AtomicUpdateDocumentMerger modifies the AddUpdateCommand.solrDoc to populate the real values of the\n          // modified fields. We don't want those absolute values because they are out-of-date due to the conflict\n          // so we restore the original document created in processAdd method and set the right version on it\n          cmd.solrDoc = clonedOriginalDoc;\n          clonedOriginalDoc = clonedOriginalDoc.deepCopy(); // copy again because the old cloned ref will be modified during processAdd\n          cmd.solrDoc.setField(VERSION, lastVersion);\n\n          processAddWithRetry(cmd, attempts, clonedOriginalDoc);\n        }\n      }\n    }\n\n","sourceOld":"    private void processAddWithRetry(AddUpdateCommand cmd, int attempts) throws IOException {\n      try {\n        super.processAdd(cmd);\n      } catch (SolrException e) {\n        if (attempts++ >= MAX_ATTEMPTS) {//maximum number of attempts allowed: 25\n          throw new SolrException(SERVER_ERROR,\n              \"Atomic update failed after multiple attempts due to \" + e.getMessage());\n        }\n        if (e.code() == ErrorCode.CONFLICT.code) { // version conflict\n          log.warn(\"Atomic update failed due to \" + e.getMessage() +\n              \" Retrying with new version .... (\" + attempts + \")\");\n          Long lastVersion = vinfo.lookupVersion(cmd.getIndexedId());\n          if (lastVersion != null) {\n            cmd.solrDoc.setField(VERSION, lastVersion);\n          }\n          processAddWithRetry(cmd, attempts);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f1de703f36b1071144037c80ca5fe118aa5e96fd"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["e9017cf144952056066919f1ebc7897ff9bd71b1","29f58859ae799964a6d229bf545960d9077932db"],"392e007070227c0fd1c28259a11f55a06a9bd7c2":["d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7"],"43564cbb30b064675027cfb569564e8531096e97":["d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7","392e007070227c0fd1c28259a11f55a06a9bd7c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7":["29f58859ae799964a6d229bf545960d9077932db","78c4170c235dc5c6ceb6cdba24c7df20aaee19a2"],"f1de703f36b1071144037c80ca5fe118aa5e96fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29f58859ae799964a6d229bf545960d9077932db":["f1de703f36b1071144037c80ca5fe118aa5e96fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43564cbb30b064675027cfb569564e8531096e97"],"78c4170c235dc5c6ceb6cdba24c7df20aaee19a2":["29f58859ae799964a6d229bf545960d9077932db"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"392e007070227c0fd1c28259a11f55a06a9bd7c2":["43564cbb30b064675027cfb569564e8531096e97"],"43564cbb30b064675027cfb569564e8531096e97":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","f1de703f36b1071144037c80ca5fe118aa5e96fd"],"d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7":["392e007070227c0fd1c28259a11f55a06a9bd7c2","43564cbb30b064675027cfb569564e8531096e97"],"f1de703f36b1071144037c80ca5fe118aa5e96fd":["e9017cf144952056066919f1ebc7897ff9bd71b1","29f58859ae799964a6d229bf545960d9077932db"],"29f58859ae799964a6d229bf545960d9077932db":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7","78c4170c235dc5c6ceb6cdba24c7df20aaee19a2"],"78c4170c235dc5c6ceb6cdba24c7df20aaee19a2":["d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}