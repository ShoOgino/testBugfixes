{"path":"lucene/src/java/org/apache/lucene/util/packed/PackedInts#getReader(DataInput).mjava","commits":[{"id":"25f4e7603b223ce22ed6ce764fb665989313410a","date":1317061501,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/packed/PackedInts#getReader(DataInput).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/packed/PackedInts#getReader(IndexInput).mjava","sourceNew":"  /**\n   * Retrieve PackedInt data from the DataInput and return a packed int\n   * structure based on it.\n   * @param in positioned at the beginning of a stored packed int structure.\n   * @return a read only random access capable array of positive integers.\n   * @throws IOException if the structure could not be retrieved.\n   * @lucene.internal\n   */\n  public static Reader getReader(DataInput in) throws IOException {\n    CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n\n    switch (bitsPerValue) {\n    case 8:\n      return new Direct8(in, valueCount);\n    case 16:\n      return new Direct16(in, valueCount);\n    case 32:\n      return new Direct32(in, valueCount);\n    case 64:\n      return new Direct64(in, valueCount);\n    default:\n      if (Constants.JRE_IS_64BIT || bitsPerValue >= 32) {\n        return new Packed64(in, valueCount, bitsPerValue);\n      } else {\n        return new Packed32(in, valueCount, bitsPerValue);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Retrieve PackedInt data from the IndexInput and return a packed int\n   * structure based on it.\n   * @param in positioned at the beginning of a stored packed int structure.\n   * @return a read only random access capable array of positive integers.\n   * @throws IOException if the structure could not be retrieved.\n   * @lucene.internal\n   */\n  public static Reader getReader(IndexInput in) throws IOException {\n    CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n\n    switch (bitsPerValue) {\n    case 8:\n      return new Direct8(in, valueCount);\n    case 16:\n      return new Direct16(in, valueCount);\n    case 32:\n      return new Direct32(in, valueCount);\n    case 64:\n      return new Direct64(in, valueCount);\n    default:\n      if (Constants.JRE_IS_64BIT || bitsPerValue >= 32) {\n        return new Packed64(in, valueCount, bitsPerValue);\n      } else {\n        return new Packed32(in, valueCount, bitsPerValue);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getReader(DataInput).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/packed/PackedInts#getReader(DataInput).mjava","sourceNew":"  /**\n   * Retrieve PackedInt data from the DataInput and return a packed int\n   * structure based on it.\n   * @param in positioned at the beginning of a stored packed int structure.\n   * @return a read only random access capable array of positive integers.\n   * @throws IOException if the structure could not be retrieved.\n   * @lucene.internal\n   */\n  public static Reader getReader(DataInput in) throws IOException {\n    CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n\n    switch (bitsPerValue) {\n    case 8:\n      return new Direct8(in, valueCount);\n    case 16:\n      return new Direct16(in, valueCount);\n    case 32:\n      return new Direct32(in, valueCount);\n    case 64:\n      return new Direct64(in, valueCount);\n    default:\n      if (Constants.JRE_IS_64BIT || bitsPerValue >= 32) {\n        return new Packed64(in, valueCount, bitsPerValue);\n      } else {\n        return new Packed32(in, valueCount, bitsPerValue);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Retrieve PackedInt data from the DataInput and return a packed int\n   * structure based on it.\n   * @param in positioned at the beginning of a stored packed int structure.\n   * @return a read only random access capable array of positive integers.\n   * @throws IOException if the structure could not be retrieved.\n   * @lucene.internal\n   */\n  public static Reader getReader(DataInput in) throws IOException {\n    CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n\n    switch (bitsPerValue) {\n    case 8:\n      return new Direct8(in, valueCount);\n    case 16:\n      return new Direct16(in, valueCount);\n    case 32:\n      return new Direct32(in, valueCount);\n    case 64:\n      return new Direct64(in, valueCount);\n    default:\n      if (Constants.JRE_IS_64BIT || bitsPerValue >= 32) {\n        return new Packed64(in, valueCount, bitsPerValue);\n      } else {\n        return new Packed32(in, valueCount, bitsPerValue);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["25f4e7603b223ce22ed6ce764fb665989313410a"],"25f4e7603b223ce22ed6ce764fb665989313410a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"25f4e7603b223ce22ed6ce764fb665989313410a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["25f4e7603b223ce22ed6ce764fb665989313410a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}