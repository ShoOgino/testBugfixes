{"path":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,Map[String,Object],String,ClusterDataProvider,List[String],int).mjava","commits":[{"id":"653c1ca305e0065ee988a09e59c8316b8cde02fd","date":1492506780,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,Map[String,Object],String,ClusterDataProvider,List[String],int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/recipe/PolicyHelper#getReplicaLocations(String,Map[String,Object],String,ClusterDataProvider,List[String],int).mjava","sourceNew":"  public static Map<String, List<String>> getReplicaLocations(String collName, Map<String, Object> autoScalingJson,\n                                                              String policyName, ClusterDataProvider cdp,\n                                                              List<String> shardNames,\n                                                              int repFactor) {\n    Map<String, List<String>> positionMapping = new HashMap<>();\n    for (String shardName : shardNames) positionMapping.put(shardName, new ArrayList<>(repFactor));\n    Map policyJson = (Map) Utils.getObjectByPath(autoScalingJson, false, asList(\"policies\", policyName));\n    if (policyJson == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"no such policy exists \" + policyName);\n    }\n    Map defaultPolicy = (Map) Utils.getObjectByPath(autoScalingJson, false, asList(\"policies\", \"default\"));\n\n    Map<String, Object> merged = Policy.mergePolicies(collName, policyJson, defaultPolicy);\n    Policy policy = new Policy(merged);\n    Policy.Session session = policy.createSession(cdp);\n    for (String shardName : shardNames) {\n      for (int i = 0; i < repFactor; i++) {\n        Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n            .hint(COLL, collName)\n            .hint(SHARD, shardName);\n        Map op = suggester.getOperation();\n        if (op == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No node can satisfy the rules \"+ Utils.toJSONString(policy));\n        }\n        session = suggester.getSession();\n        positionMapping.get(shardName).add((String) op.get(CoreAdminParams.NODE));\n      }\n    }\n\n    return positionMapping;\n  }\n\n","sourceOld":"  public static Map<String, List<String>> getReplicaLocations(String collName, Map<String, Object> autoScalingJson,\n                                                              String policyName, ClusterDataProvider cdp,\n                                                              List<String> shardNames,\n                                                              int repFactor) {\n    Map<String, List<String>> positionMapping = new HashMap<>();\n    for (String shardName : shardNames) positionMapping.put(shardName, new ArrayList<>(repFactor));\n    Map policyJson = (Map) Utils.getObjectByPath(autoScalingJson, false, asList(\"policies\", policyName));\n    if (policyJson == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"no such policy exists \" + policyName);\n    }\n    Map defaultPolicy = (Map) Utils.getObjectByPath(autoScalingJson, false, asList(\"policies\", \"default\"));\n\n    Map<String, Object> merged = Policy.mergePolicies(collName, policyJson, defaultPolicy);\n    Policy policy = new Policy(merged);\n    Policy.Session session = policy.createSession(cdp);\n    for (String shardName : shardNames) {\n      for (int i = 0; i < repFactor; i++) {\n        Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n            .hint(COLL, collName)\n            .hint(SHARD, shardName);\n        Map op = suggester.getOperation();\n        if (op == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No node can satisfy the rules \"+ Utils.toJSONString(policy));\n        }\n        session = suggester.getSession();\n        positionMapping.get(shardName).add((String) op.get(CoreAdminParams.NODE));\n      }\n    }\n\n    return positionMapping;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00a8b9c19c63f51cbe4dffa68b800edb2b4f3fdd","date":1492507049,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,Map[String,Object],String,ClusterDataProvider,List[String],int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,Map[String,Object],String,ClusterDataProvider,List[String],int).mjava","sourceNew":"  public static Map<String, List<String>> getReplicaLocations(String collName, Map<String, Object> autoScalingJson,\n                                                              String policyName, ClusterDataProvider cdp,\n                                                              List<String> shardNames,\n                                                              int repFactor) {\n    Map<String, List<String>> positionMapping = new HashMap<>();\n    for (String shardName : shardNames) positionMapping.put(shardName, new ArrayList<>(repFactor));\n    Map policyJson = (Map) Utils.getObjectByPath(autoScalingJson, false, asList(\"policies\", policyName));\n    if (policyJson == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"no such policy exists \" + policyName);\n    }\n    Map defaultPolicy = (Map) Utils.getObjectByPath(autoScalingJson, false, asList(\"policies\", \"default\"));\n\n    Map<String, Object> merged = Policy.mergePolicies(collName, policyJson, defaultPolicy);\n    Policy policy = new Policy(merged);\n    Policy.Session session = policy.createSession(cdp);\n    for (String shardName : shardNames) {\n      for (int i = 0; i < repFactor; i++) {\n        Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n            .hint(Hint.COLL, collName)\n            .hint(Hint.SHARD, shardName);\n        Map op = suggester.getOperation();\n        if (op == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No node can satisfy the rules \"+ Utils.toJSONString(policy));\n        }\n        session = suggester.getSession();\n        positionMapping.get(shardName).add((String) op.get(CoreAdminParams.NODE));\n      }\n    }\n\n    return positionMapping;\n  }\n\n","sourceOld":"  public static Map<String, List<String>> getReplicaLocations(String collName, Map<String, Object> autoScalingJson,\n                                                              String policyName, ClusterDataProvider cdp,\n                                                              List<String> shardNames,\n                                                              int repFactor) {\n    Map<String, List<String>> positionMapping = new HashMap<>();\n    for (String shardName : shardNames) positionMapping.put(shardName, new ArrayList<>(repFactor));\n    Map policyJson = (Map) Utils.getObjectByPath(autoScalingJson, false, asList(\"policies\", policyName));\n    if (policyJson == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"no such policy exists \" + policyName);\n    }\n    Map defaultPolicy = (Map) Utils.getObjectByPath(autoScalingJson, false, asList(\"policies\", \"default\"));\n\n    Map<String, Object> merged = Policy.mergePolicies(collName, policyJson, defaultPolicy);\n    Policy policy = new Policy(merged);\n    Policy.Session session = policy.createSession(cdp);\n    for (String shardName : shardNames) {\n      for (int i = 0; i < repFactor; i++) {\n        Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n            .hint(COLL, collName)\n            .hint(SHARD, shardName);\n        Map op = suggester.getOperation();\n        if (op == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No node can satisfy the rules \"+ Utils.toJSONString(policy));\n        }\n        session = suggester.getSession();\n        positionMapping.get(shardName).add((String) op.get(CoreAdminParams.NODE));\n      }\n    }\n\n    return positionMapping;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86fff6c123a5a1d38adb665dd045347219798da9","date":1493623721,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,Map[String,Object],ClusterDataProvider,List[String],int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,Map[String,Object],String,ClusterDataProvider,List[String],int).mjava","sourceNew":"  public static Map<String, List<String>> getReplicaLocations(String collName, Map<String, Object> autoScalingJson,\n                                                              ClusterDataProvider cdp,\n                                                              List<String> shardNames,\n                                                              int repFactor) {\n    Map<String, List<String>> positionMapping = new HashMap<>();\n    for (String shardName : shardNames) positionMapping.put(shardName, new ArrayList<>(repFactor));\n\n\n//    Map<String, Object> merged = Policy.mergePolicies(collName, policyJson, defaultPolicy);\n    Policy policy = new Policy(autoScalingJson);\n    Policy.Session session = policy.createSession(cdp);\n    for (String shardName : shardNames) {\n      for (int i = 0; i < repFactor; i++) {\n        Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n            .hint(Hint.COLL, collName)\n            .hint(Hint.SHARD, shardName);\n        Map op = suggester.getOperation();\n        if (op == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No node can satisfy the rules \"+ Utils.toJSONString(policy));\n        }\n        session = suggester.getSession();\n        positionMapping.get(shardName).add((String) op.get(CoreAdminParams.NODE));\n      }\n    }\n\n    return positionMapping;\n  }\n\n","sourceOld":"  public static Map<String, List<String>> getReplicaLocations(String collName, Map<String, Object> autoScalingJson,\n                                                              String policyName, ClusterDataProvider cdp,\n                                                              List<String> shardNames,\n                                                              int repFactor) {\n    Map<String, List<String>> positionMapping = new HashMap<>();\n    for (String shardName : shardNames) positionMapping.put(shardName, new ArrayList<>(repFactor));\n    Map policyJson = (Map) Utils.getObjectByPath(autoScalingJson, false, asList(\"policies\", policyName));\n    if (policyJson == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"no such policy exists \" + policyName);\n    }\n    Map defaultPolicy = (Map) Utils.getObjectByPath(autoScalingJson, false, asList(\"policies\", \"default\"));\n\n    Map<String, Object> merged = Policy.mergePolicies(collName, policyJson, defaultPolicy);\n    Policy policy = new Policy(merged);\n    Policy.Session session = policy.createSession(cdp);\n    for (String shardName : shardNames) {\n      for (int i = 0; i < repFactor; i++) {\n        Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n            .hint(Hint.COLL, collName)\n            .hint(Hint.SHARD, shardName);\n        Map op = suggester.getOperation();\n        if (op == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No node can satisfy the rules \"+ Utils.toJSONString(policy));\n        }\n        session = suggester.getSession();\n        positionMapping.get(shardName).add((String) op.get(CoreAdminParams.NODE));\n      }\n    }\n\n    return positionMapping;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"00a8b9c19c63f51cbe4dffa68b800edb2b4f3fdd":["653c1ca305e0065ee988a09e59c8316b8cde02fd"],"86fff6c123a5a1d38adb665dd045347219798da9":["00a8b9c19c63f51cbe4dffa68b800edb2b4f3fdd"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["653c1ca305e0065ee988a09e59c8316b8cde02fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"00a8b9c19c63f51cbe4dffa68b800edb2b4f3fdd":["86fff6c123a5a1d38adb665dd045347219798da9"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["00a8b9c19c63f51cbe4dffa68b800edb2b4f3fdd"],"86fff6c123a5a1d38adb665dd045347219798da9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["86fff6c123a5a1d38adb665dd045347219798da9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}