{"path":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomSlice().mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomSlice().mjava","pathOld":"/dev/null","sourceNew":"  private String getRandomSlice() {\n    Map<String,Slice> slices = zkStateReader.getCloudState().getSlices(collection);\n    \n    List<String> sliceKeyList = new ArrayList<String>(slices.size());\n    sliceKeyList.addAll(slices.keySet());\n    String sliceName = sliceKeyList.get(random.nextInt(sliceKeyList.size()));\n    return sliceName;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomSlice().mjava","pathOld":"/dev/null","sourceNew":"  private String getRandomSlice() {\n    Map<String,Slice> slices = zkStateReader.getCloudState().getSlices(collection);\n    \n    List<String> sliceKeyList = new ArrayList<String>(slices.size());\n    sliceKeyList.addAll(slices.keySet());\n    String sliceName = sliceKeyList.get(random.nextInt(sliceKeyList.size()));\n    return sliceName;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomSlice().mjava","pathOld":"/dev/null","sourceNew":"  private String getRandomSlice() {\n    Map<String,Slice> slices = zkStateReader.getCloudState().getSlices(collection);\n    \n    List<String> sliceKeyList = new ArrayList<String>(slices.size());\n    sliceKeyList.addAll(slices.keySet());\n    String sliceName = sliceKeyList.get(random.nextInt(sliceKeyList.size()));\n    return sliceName;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0c46c486d300cbb600e170f5b68cd8e42e94ea0","date":1342363102,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomSlice().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomSlice().mjava","sourceNew":"  private String getRandomSlice() {\n    Map<String,Slice> slices = zkStateReader.getCloudState().getSlices(collection);\n    \n    List<String> sliceKeyList = new ArrayList<String>(slices.size());\n    sliceKeyList.addAll(slices.keySet());\n    String sliceName = sliceKeyList.get(LuceneTestCase.random().nextInt(sliceKeyList.size()));\n    return sliceName;\n  }\n\n","sourceOld":"  private String getRandomSlice() {\n    Map<String,Slice> slices = zkStateReader.getCloudState().getSlices(collection);\n    \n    List<String> sliceKeyList = new ArrayList<String>(slices.size());\n    sliceKeyList.addAll(slices.keySet());\n    String sliceName = sliceKeyList.get(random.nextInt(sliceKeyList.size()));\n    return sliceName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomSlice().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomSlice().mjava","sourceNew":"  private String getRandomSlice() {\n    Map<String,Slice> slices = zkStateReader.getCloudState().getSlices(collection);\n    \n    List<String> sliceKeyList = new ArrayList<String>(slices.size());\n    sliceKeyList.addAll(slices.keySet());\n    String sliceName = sliceKeyList.get(LuceneTestCase.random().nextInt(sliceKeyList.size()));\n    return sliceName;\n  }\n\n","sourceOld":"  private String getRandomSlice() {\n    Map<String,Slice> slices = zkStateReader.getCloudState().getSlices(collection);\n    \n    List<String> sliceKeyList = new ArrayList<String>(slices.size());\n    sliceKeyList.addAll(slices.keySet());\n    String sliceName = sliceKeyList.get(random.nextInt(sliceKeyList.size()));\n    return sliceName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomSlice().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomSlice().mjava","sourceNew":"  private String getRandomSlice() {\n    Map<String,Slice> slices = zkStateReader.getCloudState().getSlices(collection);\n    \n    List<String> sliceKeyList = new ArrayList<String>(slices.size());\n    sliceKeyList.addAll(slices.keySet());\n    String sliceName = sliceKeyList.get(LuceneTestCase.random().nextInt(sliceKeyList.size()));\n    return sliceName;\n  }\n\n","sourceOld":"  private String getRandomSlice() {\n    Map<String,Slice> slices = zkStateReader.getCloudState().getSlices(collection);\n    \n    List<String> sliceKeyList = new ArrayList<String>(slices.size());\n    sliceKeyList.addAll(slices.keySet());\n    String sliceName = sliceKeyList.get(random.nextInt(sliceKeyList.size()));\n    return sliceName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomSlice().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomSlice().mjava","sourceNew":"  private String getRandomSlice() {\n    Map<String,Slice> slices = zkStateReader.getClusterState().getSlices(collection);\n    \n    List<String> sliceKeyList = new ArrayList<String>(slices.size());\n    sliceKeyList.addAll(slices.keySet());\n    String sliceName = sliceKeyList.get(LuceneTestCase.random().nextInt(sliceKeyList.size()));\n    return sliceName;\n  }\n\n","sourceOld":"  private String getRandomSlice() {\n    Map<String,Slice> slices = zkStateReader.getCloudState().getSlices(collection);\n    \n    List<String> sliceKeyList = new ArrayList<String>(slices.size());\n    sliceKeyList.addAll(slices.keySet());\n    String sliceName = sliceKeyList.get(LuceneTestCase.random().nextInt(sliceKeyList.size()));\n    return sliceName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomSlice().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomSlice().mjava","sourceNew":"  private String getRandomSlice() {\n    Map<String,Slice> slices = zkStateReader.getClusterState().getSlices(collection);\n    \n    List<String> sliceKeyList = new ArrayList<String>(slices.size());\n    sliceKeyList.addAll(slices.keySet());\n    String sliceName = sliceKeyList.get(LuceneTestCase.random().nextInt(sliceKeyList.size()));\n    return sliceName;\n  }\n\n","sourceOld":"  private String getRandomSlice() {\n    Map<String,Slice> slices = zkStateReader.getCloudState().getSlices(collection);\n    \n    List<String> sliceKeyList = new ArrayList<String>(slices.size());\n    sliceKeyList.addAll(slices.keySet());\n    String sliceName = sliceKeyList.get(LuceneTestCase.random().nextInt(sliceKeyList.size()));\n    return sliceName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#getRandomSlice().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomSlice().mjava","sourceNew":"  private String getRandomSlice() {\n    Map<String,Slice> slices = zkStateReader.getClusterState().getSlices(collection);\n    \n    List<String> sliceKeyList = new ArrayList<String>(slices.size());\n    sliceKeyList.addAll(slices.keySet());\n    String sliceName = sliceKeyList.get(LuceneTestCase.random().nextInt(sliceKeyList.size()));\n    return sliceName;\n  }\n\n","sourceOld":"  private String getRandomSlice() {\n    Map<String,Slice> slices = zkStateReader.getClusterState().getSlices(collection);\n    \n    List<String> sliceKeyList = new ArrayList<String>(slices.size());\n    sliceKeyList.addAll(slices.keySet());\n    String sliceName = sliceKeyList.get(LuceneTestCase.random().nextInt(sliceKeyList.size()));\n    return sliceName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomSlice().mjava","sourceNew":null,"sourceOld":"  private String getRandomSlice() {\n    Map<String,Slice> slices = zkStateReader.getCloudState().getSlices(collection);\n    \n    List<String> sliceKeyList = new ArrayList<String>(slices.size());\n    sliceKeyList.addAll(slices.keySet());\n    String sliceName = sliceKeyList.get(LuceneTestCase.random().nextInt(sliceKeyList.size()));\n    return sliceName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#getRandomSlice().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#getRandomSlice().mjava","sourceNew":"  private String getRandomSlice() {\n    Map<String,Slice> slices = zkStateReader.getClusterState().getSlices(collection);\n    \n    List<String> sliceKeyList = new ArrayList<String>(slices.size());\n    sliceKeyList.addAll(slices.keySet());\n    String sliceName = sliceKeyList.get(LuceneTestCase.random().nextInt(sliceKeyList.size()));\n    return sliceName;\n  }\n\n","sourceOld":"  private String getRandomSlice() {\n    Map<String,Slice> slices = zkStateReader.getClusterState().getSlices(collection);\n    \n    List<String> sliceKeyList = new ArrayList<String>(slices.size());\n    sliceKeyList.addAll(slices.keySet());\n    String sliceName = sliceKeyList.get(LuceneTestCase.random().nextInt(sliceKeyList.size()));\n    return sliceName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0c46c486d300cbb600e170f5b68cd8e42e94ea0":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["fe33227f6805edab2036cbb80645cc4e2d1fa424","3f767f8c99eaedb984df754fe61f21c5de260f94"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["c0c46c486d300cbb600e170f5b68cd8e42e94ea0"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["8fd5be977c105554c6a7b68afcdbc511439723ab","2c30e4c1cee08b3b229a77991882594fe7250b66"],"aba371508186796cc6151d8223a5b4e16d02e26e":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","c0c46c486d300cbb600e170f5b68cd8e42e94ea0"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","c0c46c486d300cbb600e170f5b68cd8e42e94ea0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["aba371508186796cc6151d8223a5b4e16d02e26e","2c30e4c1cee08b3b229a77991882594fe7250b66"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["3f767f8c99eaedb984df754fe61f21c5de260f94"]},"commit2Childs":{"c0c46c486d300cbb600e170f5b68cd8e42e94ea0":["3f767f8c99eaedb984df754fe61f21c5de260f94","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["8fd5be977c105554c6a7b68afcdbc511439723ab","2c30e4c1cee08b3b229a77991882594fe7250b66"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"aba371508186796cc6151d8223a5b4e16d02e26e":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["8fd5be977c105554c6a7b68afcdbc511439723ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c0c46c486d300cbb600e170f5b68cd8e42e94ea0","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}