{"path":"backwards/src/test/org/apache/lucene/index/TestIndexReader#assertIndexEquals(IndexReader,IndexReader).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestIndexReader#assertIndexEquals(IndexReader,IndexReader).mjava","pathOld":"/dev/null","sourceNew":"    public static void assertIndexEquals(IndexReader index1, IndexReader index2) throws IOException {\n      assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n      assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n      assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n      assertEquals(\"Only one index is optimized.\", index1.isOptimized(), index2.isOptimized());\n      \n      // check field names\n      Collection fields1 = index1.getFieldNames(FieldOption.ALL);\n      Collection fields2 = index1.getFieldNames(FieldOption.ALL);\n      assertEquals(\"IndexReaders have different numbers of fields.\", fields1.size(), fields2.size());\n      Iterator it1 = fields1.iterator();\n      Iterator it2 = fields1.iterator();\n      while (it1.hasNext()) {\n        assertEquals(\"Different field names.\", (String) it1.next(), (String) it2.next());\n      }\n      \n      // check norms\n      it1 = fields1.iterator();\n      while (it1.hasNext()) {\n        String curField = (String) it1.next();\n        byte[] norms1 = index1.norms(curField);\n        byte[] norms2 = index2.norms(curField);\n        if (norms1 != null && norms2 != null)\n        {\n          assertEquals(norms1.length, norms2.length);\n\t        for (int i = 0; i < norms1.length; i++) {\n\t          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1[i], norms2[i]);\n\t        }\n        }\n        else\n        {\n          assertSame(norms1, norms2);\n        }\n      }\n      \n      // check deletions\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        assertEquals(\"Doc \" + i + \" only deleted in one index.\", index1.isDeleted(i), index2.isDeleted(i));\n      }\n      \n      // check stored fields\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        if (!index1.isDeleted(i)) {\n          Document doc1 = index1.document(i);\n          Document doc2 = index2.document(i);\n          fields1 = doc1.getFields();\n          fields2 = doc2.getFields();\n          assertEquals(\"Different numbers of fields for doc \" + i + \".\", fields1.size(), fields2.size());\n          it1 = fields1.iterator();\n          it2 = fields2.iterator();\n          while (it1.hasNext()) {\n            Field curField1 = (Field) it1.next();\n            Field curField2 = (Field) it2.next();\n            assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n            assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n          }          \n        }\n      }\n      \n      // check dictionary and posting lists\n      TermEnum enum1 = index1.terms();\n      TermEnum enum2 = index2.terms();\n      TermPositions tp1 = index1.termPositions();\n      TermPositions tp2 = index2.termPositions();\n      while(enum1.next()) {\n        assertTrue(enum2.next());\n        assertEquals(\"Different term in dictionary.\", enum1.term(), enum2.term());\n        tp1.seek(enum1.term());\n        tp2.seek(enum1.term());\n        while(tp1.next()) {\n          assertTrue(tp2.next());\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.doc(), tp2.doc());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReader#assertIndexEquals(IndexReader,IndexReader).mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexReader#assertIndexEquals(IndexReader,IndexReader).mjava","sourceNew":"    public static void assertIndexEquals(IndexReader index1, IndexReader index2) throws IOException {\n      assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n      assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n      assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n      assertEquals(\"Only one index is optimized.\", index1.isOptimized(), index2.isOptimized());\n      \n      // check field names\n      Collection fields1 = index1.getFieldNames(FieldOption.ALL);\n      Collection fields2 = index1.getFieldNames(FieldOption.ALL);\n      assertEquals(\"IndexReaders have different numbers of fields.\", fields1.size(), fields2.size());\n      Iterator it1 = fields1.iterator();\n      Iterator it2 = fields1.iterator();\n      while (it1.hasNext()) {\n        assertEquals(\"Different field names.\", (String) it1.next(), (String) it2.next());\n      }\n      \n      // check norms\n      it1 = fields1.iterator();\n      while (it1.hasNext()) {\n        String curField = (String) it1.next();\n        byte[] norms1 = index1.norms(curField);\n        byte[] norms2 = index2.norms(curField);\n        if (norms1 != null && norms2 != null)\n        {\n          assertEquals(norms1.length, norms2.length);\n\t        for (int i = 0; i < norms1.length; i++) {\n\t          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1[i], norms2[i]);\n\t        }\n        }\n        else\n        {\n          assertSame(norms1, norms2);\n        }\n      }\n      \n      // check deletions\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        assertEquals(\"Doc \" + i + \" only deleted in one index.\", index1.isDeleted(i), index2.isDeleted(i));\n      }\n      \n      // check stored fields\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        if (!index1.isDeleted(i)) {\n          Document doc1 = index1.document(i);\n          Document doc2 = index2.document(i);\n          fields1 = doc1.getFields();\n          fields2 = doc2.getFields();\n          assertEquals(\"Different numbers of fields for doc \" + i + \".\", fields1.size(), fields2.size());\n          it1 = fields1.iterator();\n          it2 = fields2.iterator();\n          while (it1.hasNext()) {\n            Field curField1 = (Field) it1.next();\n            Field curField2 = (Field) it2.next();\n            assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n            assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n          }          \n        }\n      }\n      \n      // check dictionary and posting lists\n      TermEnum enum1 = index1.terms();\n      TermEnum enum2 = index2.terms();\n      TermPositions tp1 = index1.termPositions();\n      TermPositions tp2 = index2.termPositions();\n      while(enum1.next()) {\n        assertTrue(enum2.next());\n        assertEquals(\"Different term in dictionary.\", enum1.term(), enum2.term());\n        tp1.seek(enum1.term());\n        tp2.seek(enum1.term());\n        while(tp1.next()) {\n          assertTrue(tp2.next());\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.doc(), tp2.doc());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public static void assertIndexEquals(IndexReader index1, IndexReader index2) throws IOException {\n      assertEquals(\"IndexReaders have different values for numDocs.\", index1.numDocs(), index2.numDocs());\n      assertEquals(\"IndexReaders have different values for maxDoc.\", index1.maxDoc(), index2.maxDoc());\n      assertEquals(\"Only one IndexReader has deletions.\", index1.hasDeletions(), index2.hasDeletions());\n      assertEquals(\"Only one index is optimized.\", index1.isOptimized(), index2.isOptimized());\n      \n      // check field names\n      Collection fields1 = index1.getFieldNames(FieldOption.ALL);\n      Collection fields2 = index1.getFieldNames(FieldOption.ALL);\n      assertEquals(\"IndexReaders have different numbers of fields.\", fields1.size(), fields2.size());\n      Iterator it1 = fields1.iterator();\n      Iterator it2 = fields1.iterator();\n      while (it1.hasNext()) {\n        assertEquals(\"Different field names.\", (String) it1.next(), (String) it2.next());\n      }\n      \n      // check norms\n      it1 = fields1.iterator();\n      while (it1.hasNext()) {\n        String curField = (String) it1.next();\n        byte[] norms1 = index1.norms(curField);\n        byte[] norms2 = index2.norms(curField);\n        if (norms1 != null && norms2 != null)\n        {\n          assertEquals(norms1.length, norms2.length);\n\t        for (int i = 0; i < norms1.length; i++) {\n\t          assertEquals(\"Norm different for doc \" + i + \" and field '\" + curField + \"'.\", norms1[i], norms2[i]);\n\t        }\n        }\n        else\n        {\n          assertSame(norms1, norms2);\n        }\n      }\n      \n      // check deletions\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        assertEquals(\"Doc \" + i + \" only deleted in one index.\", index1.isDeleted(i), index2.isDeleted(i));\n      }\n      \n      // check stored fields\n      for (int i = 0; i < index1.maxDoc(); i++) {\n        if (!index1.isDeleted(i)) {\n          Document doc1 = index1.document(i);\n          Document doc2 = index2.document(i);\n          fields1 = doc1.getFields();\n          fields2 = doc2.getFields();\n          assertEquals(\"Different numbers of fields for doc \" + i + \".\", fields1.size(), fields2.size());\n          it1 = fields1.iterator();\n          it2 = fields2.iterator();\n          while (it1.hasNext()) {\n            Field curField1 = (Field) it1.next();\n            Field curField2 = (Field) it2.next();\n            assertEquals(\"Different fields names for doc \" + i + \".\", curField1.name(), curField2.name());\n            assertEquals(\"Different field values for doc \" + i + \".\", curField1.stringValue(), curField2.stringValue());\n          }          \n        }\n      }\n      \n      // check dictionary and posting lists\n      TermEnum enum1 = index1.terms();\n      TermEnum enum2 = index2.terms();\n      TermPositions tp1 = index1.termPositions();\n      TermPositions tp2 = index2.termPositions();\n      while(enum1.next()) {\n        assertTrue(enum2.next());\n        assertEquals(\"Different term in dictionary.\", enum1.term(), enum2.term());\n        tp1.seek(enum1.term());\n        tp2.seek(enum1.term());\n        while(tp1.next()) {\n          assertTrue(tp2.next());\n          assertEquals(\"Different doc id in postinglist of term \" + enum1.term() + \".\", tp1.doc(), tp2.doc());\n          assertEquals(\"Different term frequence in postinglist of term \" + enum1.term() + \".\", tp1.freq(), tp2.freq());\n          for (int i = 0; i < tp1.freq(); i++) {\n            assertEquals(\"Different positions in postinglist of term \" + enum1.term() + \".\", tp1.nextPosition(), tp2.nextPosition());\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}