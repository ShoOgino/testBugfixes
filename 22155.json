{"path":"src/test/org/apache/solr/util/SolrPluginUtilsTest#testMinShouldMatchCalculator().mjava","commits":[{"id":"e4b5867a57b32674ce740e66e6a7da8db3d4dd33","date":1148163441,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/solr/util/SolrPluginUtilsTest#testMinShouldMatchCalculator().mjava","pathOld":"/dev/null","sourceNew":"  public void testMinShouldMatchCalculator() {\n\n    /* zero is zero is zero */\n    assertEquals(0, calcMSM(5, \"0\"));\n    assertEquals(0, calcMSM(5, \"0%\"));\n    assertEquals(0, calcMSM(5, \"-5\"));\n    assertEquals(0, calcMSM(5, \"-100%\"));\n\n    /* basic integers */\n    assertEquals(3, calcMSM(5, \"3\"));\n    assertEquals(2, calcMSM(5, \"-3\"));\n    assertEquals(3, calcMSM(3, \"3\"));\n    assertEquals(0, calcMSM(3, \"-3\"));\n    assertEquals(3, calcMSM(3, \"5\"));\n    assertEquals(0, calcMSM(3, \"-5\"));\n\n    /* positive percentages with rounding */\n    assertEquals(0, calcMSM(3, \"25%\"));\n    assertEquals(1, calcMSM(4, \"25%\"));\n    assertEquals(1, calcMSM(5, \"25%\"));\n    assertEquals(2, calcMSM(10, \"25%\"));\n        \n    /* negative percentages with rounding */\n    assertEquals(3, calcMSM(3, \"-25%\"));\n    assertEquals(3, calcMSM(4, \"-25%\"));\n    assertEquals(4, calcMSM(5, \"-25%\"));\n    assertEquals(8, calcMSM(10, \"-25%\"));\n\n    /* conditional */\n    assertEquals(1, calcMSM(1, \"3<0\"));\n    assertEquals(2, calcMSM(2, \"3<0\"));\n    assertEquals(3, calcMSM(3, \"3<0\"));\n    assertEquals(0, calcMSM(4, \"3<0\"));\n    assertEquals(0, calcMSM(5, \"3<0\"));\n    assertEquals(1, calcMSM(1, \"3<25%\"));\n    assertEquals(2, calcMSM(2, \"3<25%\"));\n    assertEquals(3, calcMSM(3, \"3<25%\"));\n    assertEquals(1, calcMSM(4, \"3<25%\"));\n    assertEquals(1, calcMSM(5, \"3<25%\"));\n\n    /* multiple conditionals */\n    assertEquals(1, calcMSM(1, \"3<-25% 10<-3\"));\n    assertEquals(2, calcMSM(2, \"3<-25% 10<-3\"));\n    assertEquals(3, calcMSM(3, \"3<-25% 10<-3\"));\n    assertEquals(3, calcMSM(4, \"3<-25% 10<-3\"));\n    assertEquals(4, calcMSM(5, \"3<-25% 10<-3\"));\n    assertEquals(5, calcMSM(6, \"3<-25% 10<-3\"));\n    assertEquals(6, calcMSM(7, \"3<-25% 10<-3\"));\n    assertEquals(6, calcMSM(8, \"3<-25% 10<-3\"));\n    assertEquals(7, calcMSM(9, \"3<-25% 10<-3\"));\n    assertEquals(8, calcMSM(10, \"3<-25% 10<-3\"));\n    assertEquals(8, calcMSM(11, \"3<-25% 10<-3\"));\n    assertEquals(9, calcMSM(12, \"3<-25% 10<-3\"));\n    assertEquals(97, calcMSM(100, \"3<-25% 10<-3\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"a\",\"b\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"c\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"0\");\n    assertEquals(0, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"1\");\n    assertEquals(1, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n\n    SolrPluginUtils.setMinShouldMatch(q, \"99\");\n    assertEquals(4, q.getMinimumNumberShouldMatch());\n\n    q.add(new TermQuery(new Term(\"a\",\"e\")), Occur.MUST);\n    q.add(new TermQuery(new Term(\"a\",\"f\")), Occur.MUST);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n        \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testMinShouldMatchCalculator().mjava","pathOld":"src/test/org/apache/solr/util/SolrPluginUtilsTest#testMinShouldMatchCalculator().mjava","sourceNew":"  public void testMinShouldMatchCalculator() {\n\n    /* zero is zero is zero */\n    assertEquals(0, calcMSM(5, \"0\"));\n    assertEquals(0, calcMSM(5, \"0%\"));\n    assertEquals(0, calcMSM(5, \"-5\"));\n    assertEquals(0, calcMSM(5, \"-100%\"));\n\n    /* basic integers */\n    assertEquals(3, calcMSM(5, \"3\"));\n    assertEquals(2, calcMSM(5, \"-3\"));\n    assertEquals(3, calcMSM(3, \"3\"));\n    assertEquals(0, calcMSM(3, \"-3\"));\n    assertEquals(3, calcMSM(3, \"5\"));\n    assertEquals(0, calcMSM(3, \"-5\"));\n\n    /* positive percentages with rounding */\n    assertEquals(0, calcMSM(3, \"25%\"));\n    assertEquals(1, calcMSM(4, \"25%\"));\n    assertEquals(1, calcMSM(5, \"25%\"));\n    assertEquals(2, calcMSM(10, \"25%\"));\n        \n    /* negative percentages with rounding */\n    assertEquals(3, calcMSM(3, \"-25%\"));\n    assertEquals(3, calcMSM(4, \"-25%\"));\n    assertEquals(4, calcMSM(5, \"-25%\"));\n    assertEquals(8, calcMSM(10, \"-25%\"));\n\n    /* conditional */\n    assertEquals(1, calcMSM(1, \"3<0\"));\n    assertEquals(2, calcMSM(2, \"3<0\"));\n    assertEquals(3, calcMSM(3, \"3<0\"));\n    assertEquals(0, calcMSM(4, \"3<0\"));\n    assertEquals(0, calcMSM(5, \"3<0\"));\n    assertEquals(1, calcMSM(1, \"3<25%\"));\n    assertEquals(2, calcMSM(2, \"3<25%\"));\n    assertEquals(3, calcMSM(3, \"3<25%\"));\n    assertEquals(1, calcMSM(4, \"3<25%\"));\n    assertEquals(1, calcMSM(5, \"3<25%\"));\n\n    /* multiple conditionals */\n    assertEquals(1, calcMSM(1, \"3<-25% 10<-3\"));\n    assertEquals(2, calcMSM(2, \"3<-25% 10<-3\"));\n    assertEquals(3, calcMSM(3, \"3<-25% 10<-3\"));\n    assertEquals(3, calcMSM(4, \"3<-25% 10<-3\"));\n    assertEquals(4, calcMSM(5, \"3<-25% 10<-3\"));\n    assertEquals(5, calcMSM(6, \"3<-25% 10<-3\"));\n    assertEquals(6, calcMSM(7, \"3<-25% 10<-3\"));\n    assertEquals(6, calcMSM(8, \"3<-25% 10<-3\"));\n    assertEquals(7, calcMSM(9, \"3<-25% 10<-3\"));\n    assertEquals(8, calcMSM(10, \"3<-25% 10<-3\"));\n    assertEquals(8, calcMSM(11, \"3<-25% 10<-3\"));\n    assertEquals(9, calcMSM(12, \"3<-25% 10<-3\"));\n    assertEquals(97, calcMSM(100, \"3<-25% 10<-3\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"a\",\"b\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"c\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"0\");\n    assertEquals(0, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"1\");\n    assertEquals(1, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n\n    SolrPluginUtils.setMinShouldMatch(q, \"99\");\n    assertEquals(4, q.getMinimumNumberShouldMatch());\n\n    q.add(new TermQuery(new Term(\"a\",\"e\")), Occur.MUST);\n    q.add(new TermQuery(new Term(\"a\",\"f\")), Occur.MUST);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n        \n  }\n\n","sourceOld":"  public void testMinShouldMatchCalculator() {\n\n    /* zero is zero is zero */\n    assertEquals(0, calcMSM(5, \"0\"));\n    assertEquals(0, calcMSM(5, \"0%\"));\n    assertEquals(0, calcMSM(5, \"-5\"));\n    assertEquals(0, calcMSM(5, \"-100%\"));\n\n    /* basic integers */\n    assertEquals(3, calcMSM(5, \"3\"));\n    assertEquals(2, calcMSM(5, \"-3\"));\n    assertEquals(3, calcMSM(3, \"3\"));\n    assertEquals(0, calcMSM(3, \"-3\"));\n    assertEquals(3, calcMSM(3, \"5\"));\n    assertEquals(0, calcMSM(3, \"-5\"));\n\n    /* positive percentages with rounding */\n    assertEquals(0, calcMSM(3, \"25%\"));\n    assertEquals(1, calcMSM(4, \"25%\"));\n    assertEquals(1, calcMSM(5, \"25%\"));\n    assertEquals(2, calcMSM(10, \"25%\"));\n        \n    /* negative percentages with rounding */\n    assertEquals(3, calcMSM(3, \"-25%\"));\n    assertEquals(3, calcMSM(4, \"-25%\"));\n    assertEquals(4, calcMSM(5, \"-25%\"));\n    assertEquals(8, calcMSM(10, \"-25%\"));\n\n    /* conditional */\n    assertEquals(1, calcMSM(1, \"3<0\"));\n    assertEquals(2, calcMSM(2, \"3<0\"));\n    assertEquals(3, calcMSM(3, \"3<0\"));\n    assertEquals(0, calcMSM(4, \"3<0\"));\n    assertEquals(0, calcMSM(5, \"3<0\"));\n    assertEquals(1, calcMSM(1, \"3<25%\"));\n    assertEquals(2, calcMSM(2, \"3<25%\"));\n    assertEquals(3, calcMSM(3, \"3<25%\"));\n    assertEquals(1, calcMSM(4, \"3<25%\"));\n    assertEquals(1, calcMSM(5, \"3<25%\"));\n\n    /* multiple conditionals */\n    assertEquals(1, calcMSM(1, \"3<-25% 10<-3\"));\n    assertEquals(2, calcMSM(2, \"3<-25% 10<-3\"));\n    assertEquals(3, calcMSM(3, \"3<-25% 10<-3\"));\n    assertEquals(3, calcMSM(4, \"3<-25% 10<-3\"));\n    assertEquals(4, calcMSM(5, \"3<-25% 10<-3\"));\n    assertEquals(5, calcMSM(6, \"3<-25% 10<-3\"));\n    assertEquals(6, calcMSM(7, \"3<-25% 10<-3\"));\n    assertEquals(6, calcMSM(8, \"3<-25% 10<-3\"));\n    assertEquals(7, calcMSM(9, \"3<-25% 10<-3\"));\n    assertEquals(8, calcMSM(10, \"3<-25% 10<-3\"));\n    assertEquals(8, calcMSM(11, \"3<-25% 10<-3\"));\n    assertEquals(9, calcMSM(12, \"3<-25% 10<-3\"));\n    assertEquals(97, calcMSM(100, \"3<-25% 10<-3\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"a\",\"b\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"c\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"0\");\n    assertEquals(0, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"1\");\n    assertEquals(1, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n\n    SolrPluginUtils.setMinShouldMatch(q, \"99\");\n    assertEquals(4, q.getMinimumNumberShouldMatch());\n\n    q.add(new TermQuery(new Term(\"a\",\"e\")), Occur.MUST);\n    q.add(new TermQuery(new Term(\"a\",\"f\")), Occur.MUST);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e4b5867a57b32674ce740e66e6a7da8db3d4dd33":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["e4b5867a57b32674ce740e66e6a7da8db3d4dd33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e4b5867a57b32674ce740e66e6a7da8db3d4dd33":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e4b5867a57b32674ce740e66e6a7da8db3d4dd33"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}