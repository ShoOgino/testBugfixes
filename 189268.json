{"path":"lucene/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#expand(Collection[Query]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#expand(Collection[Query]).mjava","pathOld":"contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#expand(Collection[Query]).mjava","sourceNew":"  /*\n   * Create expandQueries from flatQueries.\n   * \n   * expandQueries := flatQueries + overlapped phrase queries\n   * \n   * ex1) flatQueries={a,b,c}\n   *      => expandQueries={a,b,c}\n   * ex2) flatQueries={a,\"b c\",\"c d\"}\n   *      => expandQueries={a,\"b c\",\"c d\",\"b c d\"}\n   */\n  Collection<Query> expand( Collection<Query> flatQueries ){\n    Set<Query> expandQueries = new HashSet<Query>();\n    for( Iterator<Query> i = flatQueries.iterator(); i.hasNext(); ){\n      Query query = i.next();\n      i.remove();\n      expandQueries.add( query );\n      if( !( query instanceof PhraseQuery ) ) continue;\n      for( Iterator<Query> j = flatQueries.iterator(); j.hasNext(); ){\n        Query qj = j.next();\n        if( !( qj instanceof PhraseQuery ) ) continue;\n        checkOverlap( expandQueries, (PhraseQuery)query, (PhraseQuery)qj );\n      }\n    }\n    return expandQueries;\n  }\n\n","sourceOld":"  /*\n   * Create expandQueries from flatQueries.\n   * \n   * expandQueries := flatQueries + overlapped phrase queries\n   * \n   * ex1) flatQueries={a,b,c}\n   *      => expandQueries={a,b,c}\n   * ex2) flatQueries={a,\"b c\",\"c d\"}\n   *      => expandQueries={a,\"b c\",\"c d\",\"b c d\"}\n   */\n  Collection<Query> expand( Collection<Query> flatQueries ){\n    Set<Query> expandQueries = new HashSet<Query>();\n    for( Iterator<Query> i = flatQueries.iterator(); i.hasNext(); ){\n      Query query = i.next();\n      i.remove();\n      expandQueries.add( query );\n      if( !( query instanceof PhraseQuery ) ) continue;\n      for( Iterator<Query> j = flatQueries.iterator(); j.hasNext(); ){\n        Query qj = j.next();\n        if( !( qj instanceof PhraseQuery ) ) continue;\n        checkOverlap( expandQueries, (PhraseQuery)query, (PhraseQuery)qj );\n      }\n    }\n    return expandQueries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36f91bf9cfc9d0c3155edab43359e7670ea8a5af","date":1269580873,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#expand(Collection[Query]).mjava","pathOld":"lucene/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#expand(Collection[Query]).mjava","sourceNew":"  /*\n   * Create expandQueries from flatQueries.\n   * \n   * expandQueries := flatQueries + overlapped phrase queries\n   * \n   * ex1) flatQueries={a,b,c}\n   *      => expandQueries={a,b,c}\n   * ex2) flatQueries={a,\"b c\",\"c d\"}\n   *      => expandQueries={a,\"b c\",\"c d\",\"b c d\"}\n   */\n  Collection<Query> expand( Collection<Query> flatQueries ){\n    Set<Query> expandQueries = new HashSet<Query>();\n    for( Iterator<Query> i = flatQueries.iterator(); i.hasNext(); ){\n      Query query = i.next();\n      i.remove();\n      expandQueries.add( query );\n      if( !( query instanceof PhraseQuery ) ) continue;\n      for( Iterator<Query> j = flatQueries.iterator(); j.hasNext(); ){\n        Query qj = j.next();\n        if( !( qj instanceof PhraseQuery ) ) continue;\n        checkOverlap( expandQueries, (PhraseQuery)query, (PhraseQuery)qj );\n      }\n    }\n    return expandQueries;\n  }\n\n","sourceOld":"  /*\n   * Create expandQueries from flatQueries.\n   * \n   * expandQueries := flatQueries + overlapped phrase queries\n   * \n   * ex1) flatQueries={a,b,c}\n   *      => expandQueries={a,b,c}\n   * ex2) flatQueries={a,\"b c\",\"c d\"}\n   *      => expandQueries={a,\"b c\",\"c d\",\"b c d\"}\n   */\n  Collection<Query> expand( Collection<Query> flatQueries ){\n    Set<Query> expandQueries = new HashSet<Query>();\n    for( Iterator<Query> i = flatQueries.iterator(); i.hasNext(); ){\n      Query query = i.next();\n      i.remove();\n      expandQueries.add( query );\n      if( !( query instanceof PhraseQuery ) ) continue;\n      for( Iterator<Query> j = flatQueries.iterator(); j.hasNext(); ){\n        Query qj = j.next();\n        if( !( qj instanceof PhraseQuery ) ) continue;\n        checkOverlap( expandQueries, (PhraseQuery)query, (PhraseQuery)qj );\n      }\n    }\n    return expandQueries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}