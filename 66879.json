{"path":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#andNot(DocIdSetIterator).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#andNot(DocIdSetIterator).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/FixedBitSet#andNot(DocIdSetIterator).mjava","sourceNew":"  /** Does in-place AND NOT of the bits provided by the\n   *  iterator. */\n  public void andNot(DocIdSetIterator iter) throws IOException {\n    if (iter instanceof OpenBitSetIterator && iter.docID() == -1) {\n      final OpenBitSetIterator obs = (OpenBitSetIterator) iter;\n      andNot(obs.arr, obs.words);\n      // advance after last doc that would be accepted if standard\n      // iteration is used (to exhaust it):\n      obs.advance(numBits);\n    } else {\n      int doc;\n      while ((doc = iter.nextDoc()) < numBits) {\n        clear(doc);\n      }\n    }\n  }\n\n","sourceOld":"  /** Does in-place AND NOT of the bits provided by the\n   *  iterator. */\n  public void andNot(DocIdSetIterator iter) throws IOException {\n    if (iter instanceof OpenBitSetIterator && iter.docID() == -1) {\n      final OpenBitSetIterator obs = (OpenBitSetIterator) iter;\n      andNot(obs.arr, obs.words);\n      // advance after last doc that would be accepted if standard\n      // iteration is used (to exhaust it):\n      obs.advance(numBits);\n    } else {\n      int doc;\n      while ((doc = iter.nextDoc()) < numBits) {\n        clear(doc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3995f83351082af8ae83bb017e63c56818fc1568","date":1392047063,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#andNot(DocIdSetIterator).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#andNot(DocIdSetIterator).mjava","sourceNew":"  /** Does in-place AND NOT of the bits provided by the\n   *  iterator. */\n  public void andNot(DocIdSetIterator iter) throws IOException {\n    if (iter instanceof OpenBitSetIterator && iter.docID() == -1) {\n      final OpenBitSetIterator obs = (OpenBitSetIterator) iter;\n      andNot(obs.arr, obs.words);\n      // advance after last doc that would be accepted if standard\n      // iteration is used (to exhaust it):\n      obs.advance(numBits);\n    } else if (iter instanceof FixedBitSetIterator && iter.docID() == -1) {\n      final FixedBitSetIterator fbs = (FixedBitSetIterator) iter;\n      andNot(fbs.bits, fbs.numWords);\n      // advance after last doc that would be accepted if standard\n      // iteration is used (to exhaust it):\n      fbs.advance(numBits);\n    } else {\n      int doc;\n      while ((doc = iter.nextDoc()) < numBits) {\n        clear(doc);\n      }\n    }\n  }\n\n","sourceOld":"  /** Does in-place AND NOT of the bits provided by the\n   *  iterator. */\n  public void andNot(DocIdSetIterator iter) throws IOException {\n    if (iter instanceof OpenBitSetIterator && iter.docID() == -1) {\n      final OpenBitSetIterator obs = (OpenBitSetIterator) iter;\n      andNot(obs.arr, obs.words);\n      // advance after last doc that would be accepted if standard\n      // iteration is used (to exhaust it):\n      obs.advance(numBits);\n    } else {\n      int doc;\n      while ((doc = iter.nextDoc()) < numBits) {\n        clear(doc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3d7af8c4d849bdb50dbc2e78e88495a22c008f4","date":1413466868,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#andNot(DocIdSetIterator).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#andNot(DocIdSetIterator).mjava","sourceNew":"  /** Does in-place AND NOT of the bits provided by the\n   *  iterator. */\n  public void andNot(DocIdSetIterator iter) throws IOException {\n    if (iter instanceof FixedBitSetIterator && iter.docID() == -1) {\n      final FixedBitSetIterator fbs = (FixedBitSetIterator) iter;\n      andNot(fbs.bits, fbs.numWords);\n      // advance after last doc that would be accepted if standard\n      // iteration is used (to exhaust it):\n      fbs.advance(numBits);\n    } else {\n      int doc;\n      while ((doc = iter.nextDoc()) < numBits) {\n        clear(doc);\n      }\n    }\n  }\n\n","sourceOld":"  /** Does in-place AND NOT of the bits provided by the\n   *  iterator. */\n  public void andNot(DocIdSetIterator iter) throws IOException {\n    if (iter instanceof OpenBitSetIterator && iter.docID() == -1) {\n      final OpenBitSetIterator obs = (OpenBitSetIterator) iter;\n      andNot(obs.arr, obs.words);\n      // advance after last doc that would be accepted if standard\n      // iteration is used (to exhaust it):\n      obs.advance(numBits);\n    } else if (iter instanceof FixedBitSetIterator && iter.docID() == -1) {\n      final FixedBitSetIterator fbs = (FixedBitSetIterator) iter;\n      andNot(fbs.bits, fbs.numWords);\n      // advance after last doc that would be accepted if standard\n      // iteration is used (to exhaust it):\n      fbs.advance(numBits);\n    } else {\n      int doc;\n      while ((doc = iter.nextDoc()) < numBits) {\n        clear(doc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#andNot(DocIdSetIterator).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#andNot(DocIdSetIterator).mjava","sourceNew":"  /** Does in-place AND NOT of the bits provided by the\n   *  iterator. */\n  public void andNot(DocIdSetIterator iter) throws IOException {\n    if (iter instanceof FixedBitSetIterator && iter.docID() == -1) {\n      final FixedBitSetIterator fbs = (FixedBitSetIterator) iter;\n      andNot(fbs.bits, fbs.numWords);\n      // advance after last doc that would be accepted if standard\n      // iteration is used (to exhaust it):\n      fbs.advance(numBits);\n    } else {\n      int doc;\n      while ((doc = iter.nextDoc()) < numBits) {\n        clear(doc);\n      }\n    }\n  }\n\n","sourceOld":"  /** Does in-place AND NOT of the bits provided by the\n   *  iterator. */\n  public void andNot(DocIdSetIterator iter) throws IOException {\n    if (iter instanceof OpenBitSetIterator && iter.docID() == -1) {\n      final OpenBitSetIterator obs = (OpenBitSetIterator) iter;\n      andNot(obs.arr, obs.words);\n      // advance after last doc that would be accepted if standard\n      // iteration is used (to exhaust it):\n      obs.advance(numBits);\n    } else if (iter instanceof FixedBitSetIterator && iter.docID() == -1) {\n      final FixedBitSetIterator fbs = (FixedBitSetIterator) iter;\n      andNot(fbs.bits, fbs.numWords);\n      // advance after last doc that would be accepted if standard\n      // iteration is used (to exhaust it):\n      fbs.advance(numBits);\n    } else {\n      int doc;\n      while ((doc = iter.nextDoc()) < numBits) {\n        clear(doc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e","date":1414135939,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#andNot(DocIdSetIterator).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#andNot(DocIdSetIterator).mjava","sourceNew":"  @Override\n  public void andNot(DocIdSetIterator iter) throws IOException {\n    if (BitSetIterator.getFixedBitSetOrNull(iter) != null && iter.docID() == -1) {\n      final FixedBitSet bits = BitSetIterator.getFixedBitSetOrNull(iter); \n      andNot(bits);\n      // advance after last doc that would be accepted if standard\n      // iteration is used (to exhaust it):\n      iter.advance(numBits);\n    } else {\n      super.andNot(iter);\n    }\n  }\n\n","sourceOld":"  /** Does in-place AND NOT of the bits provided by the\n   *  iterator. */\n  public void andNot(DocIdSetIterator iter) throws IOException {\n    if (iter instanceof FixedBitSetIterator && iter.docID() == -1) {\n      final FixedBitSetIterator fbs = (FixedBitSetIterator) iter;\n      andNot(fbs.bits, fbs.numWords);\n      // advance after last doc that would be accepted if standard\n      // iteration is used (to exhaust it):\n      fbs.advance(numBits);\n    } else {\n      int doc;\n      while ((doc = iter.nextDoc()) < numBits) {\n        clear(doc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b","date":1414400081,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#andNot(DocIdSetIterator).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#andNot(DocIdSetIterator).mjava","sourceNew":"  @Override\n  public void andNot(DocIdSetIterator iter) throws IOException {\n    if (BitSetIterator.getFixedBitSetOrNull(iter) != null) {\n      assertUnpositioned(iter);\n      final FixedBitSet bits = BitSetIterator.getFixedBitSetOrNull(iter); \n      andNot(bits);\n    } else {\n      super.andNot(iter);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void andNot(DocIdSetIterator iter) throws IOException {\n    if (BitSetIterator.getFixedBitSetOrNull(iter) != null && iter.docID() == -1) {\n      final FixedBitSet bits = BitSetIterator.getFixedBitSetOrNull(iter); \n      andNot(bits);\n      // advance after last doc that would be accepted if standard\n      // iteration is used (to exhaust it):\n      iter.advance(numBits);\n    } else {\n      super.andNot(iter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"099c774ddd27f4ad437ca5df14d153bab0a3affe","date":1424527689,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#andNot(DocIdSetIterator).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void andNot(DocIdSetIterator iter) throws IOException {\n    if (BitSetIterator.getFixedBitSetOrNull(iter) != null) {\n      assertUnpositioned(iter);\n      final FixedBitSet bits = BitSetIterator.getFixedBitSetOrNull(iter); \n      andNot(bits);\n    } else {\n      super.andNot(iter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["3995f83351082af8ae83bb017e63c56818fc1568","a3d7af8c4d849bdb50dbc2e78e88495a22c008f4"],"099c774ddd27f4ad437ca5df14d153bab0a3affe":["22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b"],"22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3d7af8c4d849bdb50dbc2e78e88495a22c008f4":["3995f83351082af8ae83bb017e63c56818fc1568"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["a3d7af8c4d849bdb50dbc2e78e88495a22c008f4"],"3995f83351082af8ae83bb017e63c56818fc1568":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["099c774ddd27f4ad437ca5df14d153bab0a3affe"]},"commit2Childs":{"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"099c774ddd27f4ad437ca5df14d153bab0a3affe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b":["099c774ddd27f4ad437ca5df14d153bab0a3affe"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3995f83351082af8ae83bb017e63c56818fc1568"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a3d7af8c4d849bdb50dbc2e78e88495a22c008f4":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b"],"3995f83351082af8ae83bb017e63c56818fc1568":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","a3d7af8c4d849bdb50dbc2e78e88495a22c008f4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}