{"path":"lucene/test-framework/src/java/org/apache/lucene/mockfile/HandleTrackingFS.TrackingSecureDirectoryStream#newByteChannel(Path,Set[#-extends-OpenOption],FileAttribute[#]...).mjava","commits":[{"id":"7cefb6c0aa217f293070c43e7a77682dd56e0a33","date":1416928878,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/mockfile/HandleTrackingFS.TrackingSecureDirectoryStream#newByteChannel(Path,Set[#-extends-OpenOption],FileAttribute[#]...).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public SeekableByteChannel newByteChannel(Path path, Set<? extends OpenOption> options, FileAttribute<?>... attrs) throws IOException {\n      SeekableByteChannel channel = new FilterSeekableByteChannel(super.newByteChannel(path, options, attrs)) {\n        @Override\n        public void close() throws IOException {\n          onClose(path, this);\n          super.close();\n        }\n\n        @Override\n        public String toString() {\n          return \"SeekableByteChannel(\" + path.toString() + \")\";\n        }\n        \n        @Override\n        public int hashCode() {\n          return System.identityHashCode(this);\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n          return this == obj;\n        }\n      };\n      onOpen(path, channel);\n      return channel;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f26ca208d257c1aab942fa766374731b62328b8a","date":1417011743,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/mockfile/HandleTrackingFS.TrackingSecureDirectoryStream#newByteChannel(Path,Set[#-extends-OpenOption],FileAttribute[#]...).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/mockfile/HandleTrackingFS.TrackingSecureDirectoryStream#newByteChannel(Path,Set[#-extends-OpenOption],FileAttribute[#]...).mjava","sourceNew":"    @Override\n    public SeekableByteChannel newByteChannel(Path path, Set<? extends OpenOption> options, FileAttribute<?>... attrs) throws IOException {\n      SeekableByteChannel channel = new FilterSeekableByteChannel(super.newByteChannel(path, options, attrs)) {\n        @Override\n        public void close() throws IOException {\n          onClose(path, this);\n          super.close();\n        }\n\n        @Override\n        public String toString() {\n          return \"SeekableByteChannel(\" + path.toString() + \")\";\n        }\n        \n        @Override\n        public int hashCode() {\n          return System.identityHashCode(this);\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n          return this == obj;\n        }\n      };\n      callOpenHook(path, channel);\n      return channel;\n    }\n\n","sourceOld":"    @Override\n    public SeekableByteChannel newByteChannel(Path path, Set<? extends OpenOption> options, FileAttribute<?>... attrs) throws IOException {\n      SeekableByteChannel channel = new FilterSeekableByteChannel(super.newByteChannel(path, options, attrs)) {\n        @Override\n        public void close() throws IOException {\n          onClose(path, this);\n          super.close();\n        }\n\n        @Override\n        public String toString() {\n          return \"SeekableByteChannel(\" + path.toString() + \")\";\n        }\n        \n        @Override\n        public int hashCode() {\n          return System.identityHashCode(this);\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n          return this == obj;\n        }\n      };\n      onOpen(path, channel);\n      return channel;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a86169d3f0af2780bbf728a7fc8180b24d6a3f","date":1419027502,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/mockfile/HandleTrackingFS.TrackingSecureDirectoryStream#newByteChannel(Path,Set[#-extends-OpenOption],FileAttribute[#]...).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/mockfile/HandleTrackingFS.TrackingSecureDirectoryStream#newByteChannel(Path,Set[#-extends-OpenOption],FileAttribute[#]...).mjava","sourceNew":"    @Override\n    public SeekableByteChannel newByteChannel(Path path, Set<? extends OpenOption> options, FileAttribute<?>... attrs) throws IOException {\n      SeekableByteChannel channel = new FilterSeekableByteChannel(super.newByteChannel(path, options, attrs)) {\n        \n        boolean closed;\n        \n        @Override\n        public void close() throws IOException {\n          if (!closed) {\n            closed = true;\n            onClose(path, this);\n          }\n          super.close();\n        }\n\n        @Override\n        public String toString() {\n          return \"SeekableByteChannel(\" + path.toString() + \")\";\n        }\n        \n        @Override\n        public int hashCode() {\n          return System.identityHashCode(this);\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n          return this == obj;\n        }\n      };\n      callOpenHook(path, channel);\n      return channel;\n    }\n\n","sourceOld":"    @Override\n    public SeekableByteChannel newByteChannel(Path path, Set<? extends OpenOption> options, FileAttribute<?>... attrs) throws IOException {\n      SeekableByteChannel channel = new FilterSeekableByteChannel(super.newByteChannel(path, options, attrs)) {\n        @Override\n        public void close() throws IOException {\n          onClose(path, this);\n          super.close();\n        }\n\n        @Override\n        public String toString() {\n          return \"SeekableByteChannel(\" + path.toString() + \")\";\n        }\n        \n        @Override\n        public int hashCode() {\n          return System.identityHashCode(this);\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n          return this == obj;\n        }\n      };\n      callOpenHook(path, channel);\n      return channel;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16c4d4800310f2b63211f8c7538c896ee01332e5","date":1429094194,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/mockfile/HandleTrackingFS.TrackingSecureDirectoryStream#newByteChannel(Path,Set[#-extends-OpenOption],FileAttribute[#]...).mjava","sourceNew":null,"sourceOld":"    @Override\n    public SeekableByteChannel newByteChannel(Path path, Set<? extends OpenOption> options, FileAttribute<?>... attrs) throws IOException {\n      SeekableByteChannel channel = new FilterSeekableByteChannel(super.newByteChannel(path, options, attrs)) {\n        \n        boolean closed;\n        \n        @Override\n        public void close() throws IOException {\n          if (!closed) {\n            closed = true;\n            onClose(path, this);\n          }\n          super.close();\n        }\n\n        @Override\n        public String toString() {\n          return \"SeekableByteChannel(\" + path.toString() + \")\";\n        }\n        \n        @Override\n        public int hashCode() {\n          return System.identityHashCode(this);\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n          return this == obj;\n        }\n      };\n      callOpenHook(path, channel);\n      return channel;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a86169d3f0af2780bbf728a7fc8180b24d6a3f":["f26ca208d257c1aab942fa766374731b62328b8a"],"16c4d4800310f2b63211f8c7538c896ee01332e5":["54a86169d3f0af2780bbf728a7fc8180b24d6a3f"],"f26ca208d257c1aab942fa766374731b62328b8a":["7cefb6c0aa217f293070c43e7a77682dd56e0a33"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7cefb6c0aa217f293070c43e7a77682dd56e0a33":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["16c4d4800310f2b63211f8c7538c896ee01332e5"]},"commit2Childs":{"54a86169d3f0af2780bbf728a7fc8180b24d6a3f":["16c4d4800310f2b63211f8c7538c896ee01332e5"],"16c4d4800310f2b63211f8c7538c896ee01332e5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f26ca208d257c1aab942fa766374731b62328b8a":["54a86169d3f0af2780bbf728a7fc8180b24d6a3f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7cefb6c0aa217f293070c43e7a77682dd56e0a33"],"7cefb6c0aa217f293070c43e7a77682dd56e0a33":["f26ca208d257c1aab942fa766374731b62328b8a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}