{"path":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#SynonymWeight(Query,IndexSearcher).mjava","commits":[{"id":"81d0720146de53dd3a4a023d2a3d1089d86d748d","date":1442268215,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#SynonymWeight(Query,IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"    SynonymWeight(Query query, IndexSearcher searcher) throws IOException {\n      super(query);\n      CollectionStatistics collectionStats = searcher.collectionStatistics(terms[0].field());\n      long docFreq = 0;\n      long totalTermFreq = 0;\n      termContexts = new TermContext[terms.length];\n      for (int i = 0; i < termContexts.length; i++) {\n        termContexts[i] = TermContext.build(searcher.getTopReaderContext(), terms[i]);\n        TermStatistics termStats = searcher.termStatistics(terms[i], termContexts[i]);\n        docFreq = Math.max(termStats.docFreq(), docFreq);\n        if (termStats.totalTermFreq() == -1) {\n          totalTermFreq = -1;\n        } else if (totalTermFreq != -1) {\n          totalTermFreq += termStats.totalTermFreq();\n        }\n      }\n      TermStatistics pseudoStats = new TermStatistics(null, docFreq, totalTermFreq);\n      this.similarity = searcher.getSimilarity(true);\n      this.simWeight = similarity.computeWeight(collectionStats, pseudoStats);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#SynonymWeight(Query,IndexSearcher,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#SynonymWeight(Query,IndexSearcher).mjava","sourceNew":"    SynonymWeight(Query query, IndexSearcher searcher, float boost) throws IOException {\n      super(query);\n      CollectionStatistics collectionStats = searcher.collectionStatistics(terms[0].field());\n      long docFreq = 0;\n      long totalTermFreq = 0;\n      termContexts = new TermContext[terms.length];\n      for (int i = 0; i < termContexts.length; i++) {\n        termContexts[i] = TermContext.build(searcher.getTopReaderContext(), terms[i]);\n        TermStatistics termStats = searcher.termStatistics(terms[i], termContexts[i]);\n        docFreq = Math.max(termStats.docFreq(), docFreq);\n        if (termStats.totalTermFreq() == -1) {\n          totalTermFreq = -1;\n        } else if (totalTermFreq != -1) {\n          totalTermFreq += termStats.totalTermFreq();\n        }\n      }\n      TermStatistics pseudoStats = new TermStatistics(null, docFreq, totalTermFreq);\n      this.similarity = searcher.getSimilarity(true);\n      this.simWeight = similarity.computeWeight(boost, collectionStats, pseudoStats);\n    }\n\n","sourceOld":"    SynonymWeight(Query query, IndexSearcher searcher) throws IOException {\n      super(query);\n      CollectionStatistics collectionStats = searcher.collectionStatistics(terms[0].field());\n      long docFreq = 0;\n      long totalTermFreq = 0;\n      termContexts = new TermContext[terms.length];\n      for (int i = 0; i < termContexts.length; i++) {\n        termContexts[i] = TermContext.build(searcher.getTopReaderContext(), terms[i]);\n        TermStatistics termStats = searcher.termStatistics(terms[i], termContexts[i]);\n        docFreq = Math.max(termStats.docFreq(), docFreq);\n        if (termStats.totalTermFreq() == -1) {\n          totalTermFreq = -1;\n        } else if (totalTermFreq != -1) {\n          totalTermFreq += termStats.totalTermFreq();\n        }\n      }\n      TermStatistics pseudoStats = new TermStatistics(null, docFreq, totalTermFreq);\n      this.similarity = searcher.getSimilarity(true);\n      this.simWeight = similarity.computeWeight(collectionStats, pseudoStats);\n    }\n\n","bugFix":null,"bugIntro":["c3119ed4143b91eaf5ac74a4dc4625f5036d472c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/SynonymQuery.SynonymWeight#SynonymWeight(Query,IndexSearcher).mjava","sourceNew":null,"sourceOld":"    SynonymWeight(Query query, IndexSearcher searcher) throws IOException {\n      super(query);\n      CollectionStatistics collectionStats = searcher.collectionStatistics(terms[0].field());\n      long docFreq = 0;\n      long totalTermFreq = 0;\n      termContexts = new TermContext[terms.length];\n      for (int i = 0; i < termContexts.length; i++) {\n        termContexts[i] = TermContext.build(searcher.getTopReaderContext(), terms[i]);\n        TermStatistics termStats = searcher.termStatistics(terms[i], termContexts[i]);\n        docFreq = Math.max(termStats.docFreq(), docFreq);\n        if (termStats.totalTermFreq() == -1) {\n          totalTermFreq = -1;\n        } else if (totalTermFreq != -1) {\n          totalTermFreq += termStats.totalTermFreq();\n        }\n      }\n      TermStatistics pseudoStats = new TermStatistics(null, docFreq, totalTermFreq);\n      this.similarity = searcher.getSimilarity(true);\n      this.simWeight = similarity.computeWeight(collectionStats, pseudoStats);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["81d0720146de53dd3a4a023d2a3d1089d86d748d","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}