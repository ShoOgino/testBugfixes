{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplicasInMultipleCollections().mjava","commits":[{"id":"717e5ceb2acae36d422ec75e5a4ce9fac40506e1","date":1501239603,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplicasInMultipleCollections().mjava","pathOld":"/dev/null","sourceNew":"  public void testMoveReplicasInMultipleCollections() {\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:2},\" +\n        \"node3:{cores:4}\" +\n        \"}\");\n    String clusterState = \"{\\n\" +\n        \"'collection1' : {\\n\" +\n        \"  'pullReplicas':'0',\\n\" +\n        \"  'replicationFactor':'2',\\n\" +\n        \"  'shards':{\\n\" +\n        \"    'shard1':{\\n\" +\n        \"      'range':'80000000-ffffffff',\\n\" +\n        \"      'state':'active',\\n\" +\n        \"      'replicas':{\\n\" +\n        \"        'core_node1':{\\n\" +\n        \"          'core':'collection1_shard1_replica_n1',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51650/solr',\\n\" +\n        \"          'node_name':'node1',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT',\\n\" +\n        \"          'leader':'true'},\\n\" +\n        \"        'core_node6':{\\n\" +\n        \"          'core':'collection1_shard1_replica_n3',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51651/solr',\\n\" +\n        \"          'node_name':'node3',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT'}}},\\n\" +\n        \"    'shard2':{\\n\" +\n        \"      'range':'0-7fffffff',\\n\" +\n        \"      'state':'active',\\n\" +\n        \"      'replicas':{\\n\" +\n        \"        'core_node3':{\\n\" +\n        \"          'core':'collection1_shard2_replica_n1',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51650/solr',\\n\" +\n        \"          'node_name':'node1',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT',\\n\" +\n        \"          'leader':'true'},\\n\" +\n        \"        'core_node5':{\\n\" +\n        \"          'core':'collection1_shard2_replica_n3',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51651/solr',\\n\" +\n        \"          'node_name':'node3',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT'}}}},\\n\" +\n        \"  'router':{'name':'compositeId'},\\n\" +\n        \"  'maxShardsPerNode':'2',\\n\" +\n        \"  'autoAddReplicas':'true',\\n\" +\n        \"  'nrtReplicas':'2',\\n\" +\n        \"  'tlogReplicas':'0'},\\n\" +\n        \"'collection2' : {\\n\" +\n        \"  'pullReplicas':'0',\\n\" +\n        \"  'replicationFactor':'2',\\n\" +\n        \"  'shards':{\\n\" +\n        \"    'shard1':{\\n\" +\n        \"      'range':'80000000-ffffffff',\\n\" +\n        \"      'state':'active',\\n\" +\n        \"      'replicas':{\\n\" +\n        \"        'core_node1':{\\n\" +\n        \"          'core':'collection2_shard1_replica_n1',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51649/solr',\\n\" +\n        \"          'node_name':'node2',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT'},\\n\" +\n        \"        'core_node2':{\\n\" +\n        \"          'core':'collection2_shard1_replica_n2',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51651/solr',\\n\" +\n        \"          'node_name':'node3',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT',\\n\" +\n        \"          'leader':'true'}}},\\n\" +\n        \"    'shard2':{\\n\" +\n        \"      'range':'0-7fffffff',\\n\" +\n        \"      'state':'active',\\n\" +\n        \"      'replicas':{\\n\" +\n        \"        'core_node3':{\\n\" +\n        \"          'core':'collection2_shard2_replica_n1',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51649/solr',\\n\" +\n        \"          'node_name':'node2',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT'},\\n\" +\n        \"        'core_node4':{\\n\" +\n        \"          'core':'collection2_shard2_replica_n2',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51651/solr',\\n\" +\n        \"          'node_name':'node3',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT',\\n\" +\n        \"          'leader':'true'}}}},\\n\" +\n        \"  'router':{'name':'compositeId'},\\n\" +\n        \"  'maxShardsPerNode':'2',\\n\" +\n        \"  'autoAddReplicas':'true',\\n\" +\n        \"  'nrtReplicas':'2',\\n\" +\n        \"  'tlogReplicas':'0'}\\n\" +\n        \"}\";\n    Policy policy = new Policy(new HashMap<>());\n    Policy.Suggester suggester = policy.createSession(getClusterDataProvider(nodeValues, clusterState))\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Policy.Suggester.Hint.SRC_NODE, \"node2\");\n    SolrRequest op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"collection2\", op.getParams().get(\"collection\"));\n    assertEquals(\"node1\", op.getParams().get(\"targetNode\"));\n    String coreNodeName = op.getParams().get(\"replica\");\n    assertTrue(coreNodeName.equals(\"core_node3\") || coreNodeName.equals(\"core_node1\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Policy.Suggester.Hint.SRC_NODE, \"node2\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"collection2\", op.getParams().get(\"collection\"));\n    assertEquals(\"node1\", op.getParams().get(\"targetNode\"));\n    coreNodeName = op.getParams().get(\"replica\");\n    assertTrue(coreNodeName.equals(\"core_node3\") || coreNodeName.equals(\"core_node1\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Policy.Suggester.Hint.SRC_NODE, \"node2\");\n    op = suggester.getOperation();\n    assertNull(op);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplicasInMultipleCollections().mjava","pathOld":"/dev/null","sourceNew":"  public void testMoveReplicasInMultipleCollections() {\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:2},\" +\n        \"node3:{cores:4}\" +\n        \"}\");\n    String clusterState = \"{\\n\" +\n        \"'collection1' : {\\n\" +\n        \"  'pullReplicas':'0',\\n\" +\n        \"  'replicationFactor':'2',\\n\" +\n        \"  'shards':{\\n\" +\n        \"    'shard1':{\\n\" +\n        \"      'range':'80000000-ffffffff',\\n\" +\n        \"      'state':'active',\\n\" +\n        \"      'replicas':{\\n\" +\n        \"        'core_node1':{\\n\" +\n        \"          'core':'collection1_shard1_replica_n1',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51650/solr',\\n\" +\n        \"          'node_name':'node1',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT',\\n\" +\n        \"          'leader':'true'},\\n\" +\n        \"        'core_node6':{\\n\" +\n        \"          'core':'collection1_shard1_replica_n3',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51651/solr',\\n\" +\n        \"          'node_name':'node3',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT'}}},\\n\" +\n        \"    'shard2':{\\n\" +\n        \"      'range':'0-7fffffff',\\n\" +\n        \"      'state':'active',\\n\" +\n        \"      'replicas':{\\n\" +\n        \"        'core_node3':{\\n\" +\n        \"          'core':'collection1_shard2_replica_n1',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51650/solr',\\n\" +\n        \"          'node_name':'node1',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT',\\n\" +\n        \"          'leader':'true'},\\n\" +\n        \"        'core_node5':{\\n\" +\n        \"          'core':'collection1_shard2_replica_n3',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51651/solr',\\n\" +\n        \"          'node_name':'node3',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT'}}}},\\n\" +\n        \"  'router':{'name':'compositeId'},\\n\" +\n        \"  'maxShardsPerNode':'2',\\n\" +\n        \"  'autoAddReplicas':'true',\\n\" +\n        \"  'nrtReplicas':'2',\\n\" +\n        \"  'tlogReplicas':'0'},\\n\" +\n        \"'collection2' : {\\n\" +\n        \"  'pullReplicas':'0',\\n\" +\n        \"  'replicationFactor':'2',\\n\" +\n        \"  'shards':{\\n\" +\n        \"    'shard1':{\\n\" +\n        \"      'range':'80000000-ffffffff',\\n\" +\n        \"      'state':'active',\\n\" +\n        \"      'replicas':{\\n\" +\n        \"        'core_node1':{\\n\" +\n        \"          'core':'collection2_shard1_replica_n1',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51649/solr',\\n\" +\n        \"          'node_name':'node2',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT'},\\n\" +\n        \"        'core_node2':{\\n\" +\n        \"          'core':'collection2_shard1_replica_n2',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51651/solr',\\n\" +\n        \"          'node_name':'node3',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT',\\n\" +\n        \"          'leader':'true'}}},\\n\" +\n        \"    'shard2':{\\n\" +\n        \"      'range':'0-7fffffff',\\n\" +\n        \"      'state':'active',\\n\" +\n        \"      'replicas':{\\n\" +\n        \"        'core_node3':{\\n\" +\n        \"          'core':'collection2_shard2_replica_n1',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51649/solr',\\n\" +\n        \"          'node_name':'node2',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT'},\\n\" +\n        \"        'core_node4':{\\n\" +\n        \"          'core':'collection2_shard2_replica_n2',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51651/solr',\\n\" +\n        \"          'node_name':'node3',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT',\\n\" +\n        \"          'leader':'true'}}}},\\n\" +\n        \"  'router':{'name':'compositeId'},\\n\" +\n        \"  'maxShardsPerNode':'2',\\n\" +\n        \"  'autoAddReplicas':'true',\\n\" +\n        \"  'nrtReplicas':'2',\\n\" +\n        \"  'tlogReplicas':'0'}\\n\" +\n        \"}\";\n    Policy policy = new Policy(new HashMap<>());\n    Policy.Suggester suggester = policy.createSession(getClusterDataProvider(nodeValues, clusterState))\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Policy.Suggester.Hint.SRC_NODE, \"node2\");\n    SolrRequest op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"collection2\", op.getParams().get(\"collection\"));\n    assertEquals(\"node1\", op.getParams().get(\"targetNode\"));\n    String coreNodeName = op.getParams().get(\"replica\");\n    assertTrue(coreNodeName.equals(\"core_node3\") || coreNodeName.equals(\"core_node1\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Policy.Suggester.Hint.SRC_NODE, \"node2\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"collection2\", op.getParams().get(\"collection\"));\n    assertEquals(\"node1\", op.getParams().get(\"targetNode\"));\n    coreNodeName = op.getParams().get(\"replica\");\n    assertTrue(coreNodeName.equals(\"core_node3\") || coreNodeName.equals(\"core_node1\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Policy.Suggester.Hint.SRC_NODE, \"node2\");\n    op = suggester.getOperation();\n    assertNull(op);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplicasInMultipleCollections().mjava","pathOld":"/dev/null","sourceNew":"  public void testMoveReplicasInMultipleCollections() {\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:2},\" +\n        \"node3:{cores:4}\" +\n        \"}\");\n    String clusterState = \"{\\n\" +\n        \"'collection1' : {\\n\" +\n        \"  'pullReplicas':'0',\\n\" +\n        \"  'replicationFactor':'2',\\n\" +\n        \"  'shards':{\\n\" +\n        \"    'shard1':{\\n\" +\n        \"      'range':'80000000-ffffffff',\\n\" +\n        \"      'state':'active',\\n\" +\n        \"      'replicas':{\\n\" +\n        \"        'core_node1':{\\n\" +\n        \"          'core':'collection1_shard1_replica_n1',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51650/solr',\\n\" +\n        \"          'node_name':'node1',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT',\\n\" +\n        \"          'leader':'true'},\\n\" +\n        \"        'core_node6':{\\n\" +\n        \"          'core':'collection1_shard1_replica_n3',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51651/solr',\\n\" +\n        \"          'node_name':'node3',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT'}}},\\n\" +\n        \"    'shard2':{\\n\" +\n        \"      'range':'0-7fffffff',\\n\" +\n        \"      'state':'active',\\n\" +\n        \"      'replicas':{\\n\" +\n        \"        'core_node3':{\\n\" +\n        \"          'core':'collection1_shard2_replica_n1',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51650/solr',\\n\" +\n        \"          'node_name':'node1',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT',\\n\" +\n        \"          'leader':'true'},\\n\" +\n        \"        'core_node5':{\\n\" +\n        \"          'core':'collection1_shard2_replica_n3',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51651/solr',\\n\" +\n        \"          'node_name':'node3',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT'}}}},\\n\" +\n        \"  'router':{'name':'compositeId'},\\n\" +\n        \"  'maxShardsPerNode':'2',\\n\" +\n        \"  'autoAddReplicas':'true',\\n\" +\n        \"  'nrtReplicas':'2',\\n\" +\n        \"  'tlogReplicas':'0'},\\n\" +\n        \"'collection2' : {\\n\" +\n        \"  'pullReplicas':'0',\\n\" +\n        \"  'replicationFactor':'2',\\n\" +\n        \"  'shards':{\\n\" +\n        \"    'shard1':{\\n\" +\n        \"      'range':'80000000-ffffffff',\\n\" +\n        \"      'state':'active',\\n\" +\n        \"      'replicas':{\\n\" +\n        \"        'core_node1':{\\n\" +\n        \"          'core':'collection2_shard1_replica_n1',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51649/solr',\\n\" +\n        \"          'node_name':'node2',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT'},\\n\" +\n        \"        'core_node2':{\\n\" +\n        \"          'core':'collection2_shard1_replica_n2',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51651/solr',\\n\" +\n        \"          'node_name':'node3',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT',\\n\" +\n        \"          'leader':'true'}}},\\n\" +\n        \"    'shard2':{\\n\" +\n        \"      'range':'0-7fffffff',\\n\" +\n        \"      'state':'active',\\n\" +\n        \"      'replicas':{\\n\" +\n        \"        'core_node3':{\\n\" +\n        \"          'core':'collection2_shard2_replica_n1',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51649/solr',\\n\" +\n        \"          'node_name':'node2',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT'},\\n\" +\n        \"        'core_node4':{\\n\" +\n        \"          'core':'collection2_shard2_replica_n2',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51651/solr',\\n\" +\n        \"          'node_name':'node3',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT',\\n\" +\n        \"          'leader':'true'}}}},\\n\" +\n        \"  'router':{'name':'compositeId'},\\n\" +\n        \"  'maxShardsPerNode':'2',\\n\" +\n        \"  'autoAddReplicas':'true',\\n\" +\n        \"  'nrtReplicas':'2',\\n\" +\n        \"  'tlogReplicas':'0'}\\n\" +\n        \"}\";\n    Policy policy = new Policy(new HashMap<>());\n    Policy.Suggester suggester = policy.createSession(getClusterDataProvider(nodeValues, clusterState))\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Policy.Suggester.Hint.SRC_NODE, \"node2\");\n    SolrRequest op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"collection2\", op.getParams().get(\"collection\"));\n    assertEquals(\"node1\", op.getParams().get(\"targetNode\"));\n    String coreNodeName = op.getParams().get(\"replica\");\n    assertTrue(coreNodeName.equals(\"core_node3\") || coreNodeName.equals(\"core_node1\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Policy.Suggester.Hint.SRC_NODE, \"node2\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"collection2\", op.getParams().get(\"collection\"));\n    assertEquals(\"node1\", op.getParams().get(\"targetNode\"));\n    coreNodeName = op.getParams().get(\"replica\");\n    assertTrue(coreNodeName.equals(\"core_node3\") || coreNodeName.equals(\"core_node1\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Policy.Suggester.Hint.SRC_NODE, \"node2\");\n    op = suggester.getOperation();\n    assertNull(op);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplicasInMultipleCollections().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplicasInMultipleCollections().mjava","sourceNew":"  public void testMoveReplicasInMultipleCollections() {\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:2},\" +\n        \"node3:{cores:4}\" +\n        \"}\");\n    String clusterState = \"{\\n\" +\n        \"'collection1' : {\\n\" +\n        \"  'pullReplicas':'0',\\n\" +\n        \"  'replicationFactor':'2',\\n\" +\n        \"  'shards':{\\n\" +\n        \"    'shard1':{\\n\" +\n        \"      'range':'80000000-ffffffff',\\n\" +\n        \"      'state':'active',\\n\" +\n        \"      'replicas':{\\n\" +\n        \"        'core_node1':{\\n\" +\n        \"          'core':'collection1_shard1_replica_n1',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51650/solr',\\n\" +\n        \"          'node_name':'node1',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT',\\n\" +\n        \"          'leader':'true'},\\n\" +\n        \"        'core_node6':{\\n\" +\n        \"          'core':'collection1_shard1_replica_n3',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51651/solr',\\n\" +\n        \"          'node_name':'node3',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT'}}},\\n\" +\n        \"    'shard2':{\\n\" +\n        \"      'range':'0-7fffffff',\\n\" +\n        \"      'state':'active',\\n\" +\n        \"      'replicas':{\\n\" +\n        \"        'core_node3':{\\n\" +\n        \"          'core':'collection1_shard2_replica_n1',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51650/solr',\\n\" +\n        \"          'node_name':'node1',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT',\\n\" +\n        \"          'leader':'true'},\\n\" +\n        \"        'core_node5':{\\n\" +\n        \"          'core':'collection1_shard2_replica_n3',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51651/solr',\\n\" +\n        \"          'node_name':'node3',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT'}}}},\\n\" +\n        \"  'router':{'name':'compositeId'},\\n\" +\n        \"  'maxShardsPerNode':'2',\\n\" +\n        \"  'autoAddReplicas':'true',\\n\" +\n        \"  'nrtReplicas':'2',\\n\" +\n        \"  'tlogReplicas':'0'},\\n\" +\n        \"'collection2' : {\\n\" +\n        \"  'pullReplicas':'0',\\n\" +\n        \"  'replicationFactor':'2',\\n\" +\n        \"  'shards':{\\n\" +\n        \"    'shard1':{\\n\" +\n        \"      'range':'80000000-ffffffff',\\n\" +\n        \"      'state':'active',\\n\" +\n        \"      'replicas':{\\n\" +\n        \"        'core_node1':{\\n\" +\n        \"          'core':'collection2_shard1_replica_n1',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51649/solr',\\n\" +\n        \"          'node_name':'node2',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT'},\\n\" +\n        \"        'core_node2':{\\n\" +\n        \"          'core':'collection2_shard1_replica_n2',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51651/solr',\\n\" +\n        \"          'node_name':'node3',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT',\\n\" +\n        \"          'leader':'true'}}},\\n\" +\n        \"    'shard2':{\\n\" +\n        \"      'range':'0-7fffffff',\\n\" +\n        \"      'state':'active',\\n\" +\n        \"      'replicas':{\\n\" +\n        \"        'core_node3':{\\n\" +\n        \"          'core':'collection2_shard2_replica_n1',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51649/solr',\\n\" +\n        \"          'node_name':'node2',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT'},\\n\" +\n        \"        'core_node4':{\\n\" +\n        \"          'core':'collection2_shard2_replica_n2',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51651/solr',\\n\" +\n        \"          'node_name':'node3',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT',\\n\" +\n        \"          'leader':'true'}}}},\\n\" +\n        \"  'router':{'name':'compositeId'},\\n\" +\n        \"  'maxShardsPerNode':'2',\\n\" +\n        \"  'autoAddReplicas':'true',\\n\" +\n        \"  'nrtReplicas':'2',\\n\" +\n        \"  'tlogReplicas':'0'}\\n\" +\n        \"}\";\n    Policy policy = new Policy(new HashMap<>());\n    Policy.Suggester suggester = policy.createSession(getSolrCloudManager(nodeValues, clusterState))\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Policy.Suggester.Hint.SRC_NODE, \"node2\");\n    SolrRequest op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"collection2\", op.getParams().get(\"collection\"));\n    assertEquals(\"node1\", op.getParams().get(\"targetNode\"));\n    String coreNodeName = op.getParams().get(\"replica\");\n    assertTrue(coreNodeName.equals(\"core_node3\") || coreNodeName.equals(\"core_node1\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Policy.Suggester.Hint.SRC_NODE, \"node2\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"collection2\", op.getParams().get(\"collection\"));\n    assertEquals(\"node1\", op.getParams().get(\"targetNode\"));\n    coreNodeName = op.getParams().get(\"replica\");\n    assertTrue(coreNodeName.equals(\"core_node3\") || coreNodeName.equals(\"core_node1\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Policy.Suggester.Hint.SRC_NODE, \"node2\");\n    op = suggester.getOperation();\n    assertNull(op);\n  }\n\n","sourceOld":"  public void testMoveReplicasInMultipleCollections() {\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:2},\" +\n        \"node3:{cores:4}\" +\n        \"}\");\n    String clusterState = \"{\\n\" +\n        \"'collection1' : {\\n\" +\n        \"  'pullReplicas':'0',\\n\" +\n        \"  'replicationFactor':'2',\\n\" +\n        \"  'shards':{\\n\" +\n        \"    'shard1':{\\n\" +\n        \"      'range':'80000000-ffffffff',\\n\" +\n        \"      'state':'active',\\n\" +\n        \"      'replicas':{\\n\" +\n        \"        'core_node1':{\\n\" +\n        \"          'core':'collection1_shard1_replica_n1',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51650/solr',\\n\" +\n        \"          'node_name':'node1',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT',\\n\" +\n        \"          'leader':'true'},\\n\" +\n        \"        'core_node6':{\\n\" +\n        \"          'core':'collection1_shard1_replica_n3',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51651/solr',\\n\" +\n        \"          'node_name':'node3',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT'}}},\\n\" +\n        \"    'shard2':{\\n\" +\n        \"      'range':'0-7fffffff',\\n\" +\n        \"      'state':'active',\\n\" +\n        \"      'replicas':{\\n\" +\n        \"        'core_node3':{\\n\" +\n        \"          'core':'collection1_shard2_replica_n1',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51650/solr',\\n\" +\n        \"          'node_name':'node1',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT',\\n\" +\n        \"          'leader':'true'},\\n\" +\n        \"        'core_node5':{\\n\" +\n        \"          'core':'collection1_shard2_replica_n3',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51651/solr',\\n\" +\n        \"          'node_name':'node3',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT'}}}},\\n\" +\n        \"  'router':{'name':'compositeId'},\\n\" +\n        \"  'maxShardsPerNode':'2',\\n\" +\n        \"  'autoAddReplicas':'true',\\n\" +\n        \"  'nrtReplicas':'2',\\n\" +\n        \"  'tlogReplicas':'0'},\\n\" +\n        \"'collection2' : {\\n\" +\n        \"  'pullReplicas':'0',\\n\" +\n        \"  'replicationFactor':'2',\\n\" +\n        \"  'shards':{\\n\" +\n        \"    'shard1':{\\n\" +\n        \"      'range':'80000000-ffffffff',\\n\" +\n        \"      'state':'active',\\n\" +\n        \"      'replicas':{\\n\" +\n        \"        'core_node1':{\\n\" +\n        \"          'core':'collection2_shard1_replica_n1',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51649/solr',\\n\" +\n        \"          'node_name':'node2',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT'},\\n\" +\n        \"        'core_node2':{\\n\" +\n        \"          'core':'collection2_shard1_replica_n2',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51651/solr',\\n\" +\n        \"          'node_name':'node3',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT',\\n\" +\n        \"          'leader':'true'}}},\\n\" +\n        \"    'shard2':{\\n\" +\n        \"      'range':'0-7fffffff',\\n\" +\n        \"      'state':'active',\\n\" +\n        \"      'replicas':{\\n\" +\n        \"        'core_node3':{\\n\" +\n        \"          'core':'collection2_shard2_replica_n1',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51649/solr',\\n\" +\n        \"          'node_name':'node2',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT'},\\n\" +\n        \"        'core_node4':{\\n\" +\n        \"          'core':'collection2_shard2_replica_n2',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51651/solr',\\n\" +\n        \"          'node_name':'node3',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT',\\n\" +\n        \"          'leader':'true'}}}},\\n\" +\n        \"  'router':{'name':'compositeId'},\\n\" +\n        \"  'maxShardsPerNode':'2',\\n\" +\n        \"  'autoAddReplicas':'true',\\n\" +\n        \"  'nrtReplicas':'2',\\n\" +\n        \"  'tlogReplicas':'0'}\\n\" +\n        \"}\";\n    Policy policy = new Policy(new HashMap<>());\n    Policy.Suggester suggester = policy.createSession(getClusterDataProvider(nodeValues, clusterState))\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Policy.Suggester.Hint.SRC_NODE, \"node2\");\n    SolrRequest op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"collection2\", op.getParams().get(\"collection\"));\n    assertEquals(\"node1\", op.getParams().get(\"targetNode\"));\n    String coreNodeName = op.getParams().get(\"replica\");\n    assertTrue(coreNodeName.equals(\"core_node3\") || coreNodeName.equals(\"core_node1\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Policy.Suggester.Hint.SRC_NODE, \"node2\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"collection2\", op.getParams().get(\"collection\"));\n    assertEquals(\"node1\", op.getParams().get(\"targetNode\"));\n    coreNodeName = op.getParams().get(\"replica\");\n    assertTrue(coreNodeName.equals(\"core_node3\") || coreNodeName.equals(\"core_node1\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Policy.Suggester.Hint.SRC_NODE, \"node2\");\n    op = suggester.getOperation();\n    assertNull(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaca6a0674512222004d9a2b0ca95d86bda20f1c","date":1508160449,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplicasInMultipleCollections().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplicasInMultipleCollections().mjava","sourceNew":"  public void testMoveReplicasInMultipleCollections() {\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:2},\" +\n        \"node3:{cores:4}\" +\n        \"}\");\n    String clusterState = \"{\\n\" +\n        \"'collection1' : {\\n\" +\n        \"  'pullReplicas':'0',\\n\" +\n        \"  'replicationFactor':'2',\\n\" +\n        \"  'shards':{\\n\" +\n        \"    'shard1':{\\n\" +\n        \"      'range':'80000000-ffffffff',\\n\" +\n        \"      'state':'active',\\n\" +\n        \"      'replicas':{\\n\" +\n        \"        'core_node1':{\\n\" +\n        \"          'core':'collection1_shard1_replica_n1',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51650/solr',\\n\" +\n        \"          'node_name':'node1',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT',\\n\" +\n        \"          'leader':'true'},\\n\" +\n        \"        'core_node6':{\\n\" +\n        \"          'core':'collection1_shard1_replica_n3',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51651/solr',\\n\" +\n        \"          'node_name':'node3',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT'}}},\\n\" +\n        \"    'shard2':{\\n\" +\n        \"      'range':'0-7fffffff',\\n\" +\n        \"      'state':'active',\\n\" +\n        \"      'replicas':{\\n\" +\n        \"        'core_node3':{\\n\" +\n        \"          'core':'collection1_shard2_replica_n1',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51650/solr',\\n\" +\n        \"          'node_name':'node1',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT',\\n\" +\n        \"          'leader':'true'},\\n\" +\n        \"        'core_node5':{\\n\" +\n        \"          'core':'collection1_shard2_replica_n3',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51651/solr',\\n\" +\n        \"          'node_name':'node3',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT'}}}},\\n\" +\n        \"  'router':{'name':'compositeId'},\\n\" +\n        \"  'maxShardsPerNode':'2',\\n\" +\n        \"  'autoAddReplicas':'true',\\n\" +\n        \"  'nrtReplicas':'2',\\n\" +\n        \"  'tlogReplicas':'0'},\\n\" +\n        \"'collection2' : {\\n\" +\n        \"  'pullReplicas':'0',\\n\" +\n        \"  'replicationFactor':'2',\\n\" +\n        \"  'shards':{\\n\" +\n        \"    'shard1':{\\n\" +\n        \"      'range':'80000000-ffffffff',\\n\" +\n        \"      'state':'active',\\n\" +\n        \"      'replicas':{\\n\" +\n        \"        'core_node1':{\\n\" +\n        \"          'core':'collection2_shard1_replica_n1',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51649/solr',\\n\" +\n        \"          'node_name':'node2',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT'},\\n\" +\n        \"        'core_node2':{\\n\" +\n        \"          'core':'collection2_shard1_replica_n2',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51651/solr',\\n\" +\n        \"          'node_name':'node3',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT',\\n\" +\n        \"          'leader':'true'}}},\\n\" +\n        \"    'shard2':{\\n\" +\n        \"      'range':'0-7fffffff',\\n\" +\n        \"      'state':'active',\\n\" +\n        \"      'replicas':{\\n\" +\n        \"        'core_node3':{\\n\" +\n        \"          'core':'collection2_shard2_replica_n1',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51649/solr',\\n\" +\n        \"          'node_name':'node2',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT'},\\n\" +\n        \"        'core_node4':{\\n\" +\n        \"          'core':'collection2_shard2_replica_n2',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51651/solr',\\n\" +\n        \"          'node_name':'node3',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT',\\n\" +\n        \"          'leader':'true'}}}},\\n\" +\n        \"  'router':{'name':'compositeId'},\\n\" +\n        \"  'maxShardsPerNode':'2',\\n\" +\n        \"  'autoAddReplicas':'true',\\n\" +\n        \"  'nrtReplicas':'2',\\n\" +\n        \"  'tlogReplicas':'0'}\\n\" +\n        \"}\";\n    Policy policy = new Policy(new HashMap<>());\n    Suggester suggester = policy.createSession(getSolrCloudManager(nodeValues, clusterState))\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Suggester.Hint.SRC_NODE, \"node2\");\n    SolrRequest op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"collection2\", op.getParams().get(\"collection\"));\n    assertEquals(\"node1\", op.getParams().get(\"targetNode\"));\n    String coreNodeName = op.getParams().get(\"replica\");\n    assertTrue(coreNodeName.equals(\"core_node3\") || coreNodeName.equals(\"core_node1\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Suggester.Hint.SRC_NODE, \"node2\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"collection2\", op.getParams().get(\"collection\"));\n    assertEquals(\"node1\", op.getParams().get(\"targetNode\"));\n    coreNodeName = op.getParams().get(\"replica\");\n    assertTrue(coreNodeName.equals(\"core_node3\") || coreNodeName.equals(\"core_node1\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Suggester.Hint.SRC_NODE, \"node2\");\n    op = suggester.getOperation();\n    assertNull(op);\n  }\n\n","sourceOld":"  public void testMoveReplicasInMultipleCollections() {\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:2},\" +\n        \"node3:{cores:4}\" +\n        \"}\");\n    String clusterState = \"{\\n\" +\n        \"'collection1' : {\\n\" +\n        \"  'pullReplicas':'0',\\n\" +\n        \"  'replicationFactor':'2',\\n\" +\n        \"  'shards':{\\n\" +\n        \"    'shard1':{\\n\" +\n        \"      'range':'80000000-ffffffff',\\n\" +\n        \"      'state':'active',\\n\" +\n        \"      'replicas':{\\n\" +\n        \"        'core_node1':{\\n\" +\n        \"          'core':'collection1_shard1_replica_n1',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51650/solr',\\n\" +\n        \"          'node_name':'node1',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT',\\n\" +\n        \"          'leader':'true'},\\n\" +\n        \"        'core_node6':{\\n\" +\n        \"          'core':'collection1_shard1_replica_n3',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51651/solr',\\n\" +\n        \"          'node_name':'node3',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT'}}},\\n\" +\n        \"    'shard2':{\\n\" +\n        \"      'range':'0-7fffffff',\\n\" +\n        \"      'state':'active',\\n\" +\n        \"      'replicas':{\\n\" +\n        \"        'core_node3':{\\n\" +\n        \"          'core':'collection1_shard2_replica_n1',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51650/solr',\\n\" +\n        \"          'node_name':'node1',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT',\\n\" +\n        \"          'leader':'true'},\\n\" +\n        \"        'core_node5':{\\n\" +\n        \"          'core':'collection1_shard2_replica_n3',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51651/solr',\\n\" +\n        \"          'node_name':'node3',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT'}}}},\\n\" +\n        \"  'router':{'name':'compositeId'},\\n\" +\n        \"  'maxShardsPerNode':'2',\\n\" +\n        \"  'autoAddReplicas':'true',\\n\" +\n        \"  'nrtReplicas':'2',\\n\" +\n        \"  'tlogReplicas':'0'},\\n\" +\n        \"'collection2' : {\\n\" +\n        \"  'pullReplicas':'0',\\n\" +\n        \"  'replicationFactor':'2',\\n\" +\n        \"  'shards':{\\n\" +\n        \"    'shard1':{\\n\" +\n        \"      'range':'80000000-ffffffff',\\n\" +\n        \"      'state':'active',\\n\" +\n        \"      'replicas':{\\n\" +\n        \"        'core_node1':{\\n\" +\n        \"          'core':'collection2_shard1_replica_n1',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51649/solr',\\n\" +\n        \"          'node_name':'node2',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT'},\\n\" +\n        \"        'core_node2':{\\n\" +\n        \"          'core':'collection2_shard1_replica_n2',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51651/solr',\\n\" +\n        \"          'node_name':'node3',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT',\\n\" +\n        \"          'leader':'true'}}},\\n\" +\n        \"    'shard2':{\\n\" +\n        \"      'range':'0-7fffffff',\\n\" +\n        \"      'state':'active',\\n\" +\n        \"      'replicas':{\\n\" +\n        \"        'core_node3':{\\n\" +\n        \"          'core':'collection2_shard2_replica_n1',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51649/solr',\\n\" +\n        \"          'node_name':'node2',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT'},\\n\" +\n        \"        'core_node4':{\\n\" +\n        \"          'core':'collection2_shard2_replica_n2',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51651/solr',\\n\" +\n        \"          'node_name':'node3',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT',\\n\" +\n        \"          'leader':'true'}}}},\\n\" +\n        \"  'router':{'name':'compositeId'},\\n\" +\n        \"  'maxShardsPerNode':'2',\\n\" +\n        \"  'autoAddReplicas':'true',\\n\" +\n        \"  'nrtReplicas':'2',\\n\" +\n        \"  'tlogReplicas':'0'}\\n\" +\n        \"}\";\n    Policy policy = new Policy(new HashMap<>());\n    Policy.Suggester suggester = policy.createSession(getSolrCloudManager(nodeValues, clusterState))\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Policy.Suggester.Hint.SRC_NODE, \"node2\");\n    SolrRequest op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"collection2\", op.getParams().get(\"collection\"));\n    assertEquals(\"node1\", op.getParams().get(\"targetNode\"));\n    String coreNodeName = op.getParams().get(\"replica\");\n    assertTrue(coreNodeName.equals(\"core_node3\") || coreNodeName.equals(\"core_node1\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Policy.Suggester.Hint.SRC_NODE, \"node2\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"collection2\", op.getParams().get(\"collection\"));\n    assertEquals(\"node1\", op.getParams().get(\"targetNode\"));\n    coreNodeName = op.getParams().get(\"replica\");\n    assertTrue(coreNodeName.equals(\"core_node3\") || coreNodeName.equals(\"core_node1\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Policy.Suggester.Hint.SRC_NODE, \"node2\");\n    op = suggester.getOperation();\n    assertNull(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bbcda32e5cd37ef61ea1190bacd080308e22070","date":1508850553,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplicasInMultipleCollections().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplicasInMultipleCollections().mjava","sourceNew":"  public void testMoveReplicasInMultipleCollections() {\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:2},\" +\n        \"node3:{cores:4}\" +\n        \"}\");\n    String clusterState = \"{\\n\" +\n        \"'collection1' : {\\n\" +\n        \"  'pullReplicas':'0',\\n\" +\n        \"  'replicationFactor':'2',\\n\" +\n        \"  'shards':{\\n\" +\n        \"    'shard1':{\\n\" +\n        \"      'range':'80000000-ffffffff',\\n\" +\n        \"      'state':'active',\\n\" +\n        \"      'replicas':{\\n\" +\n        \"        'core_node1':{\\n\" +\n        \"          'core':'collection1_shard1_replica_n1',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51650/solr',\\n\" +\n        \"          'node_name':'node1',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT',\\n\" +\n        \"          'leader':'true'},\\n\" +\n        \"        'core_node6':{\\n\" +\n        \"          'core':'collection1_shard1_replica_n3',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51651/solr',\\n\" +\n        \"          'node_name':'node3',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT'}}},\\n\" +\n        \"    'shard2':{\\n\" +\n        \"      'range':'0-7fffffff',\\n\" +\n        \"      'state':'active',\\n\" +\n        \"      'replicas':{\\n\" +\n        \"        'core_node3':{\\n\" +\n        \"          'core':'collection1_shard2_replica_n1',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51650/solr',\\n\" +\n        \"          'node_name':'node1',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT',\\n\" +\n        \"          'leader':'true'},\\n\" +\n        \"        'core_node5':{\\n\" +\n        \"          'core':'collection1_shard2_replica_n3',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51651/solr',\\n\" +\n        \"          'node_name':'node3',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT'}}}},\\n\" +\n        \"  'router':{'name':'compositeId'},\\n\" +\n        \"  'maxShardsPerNode':'2',\\n\" +\n        \"  'autoAddReplicas':'true',\\n\" +\n        \"  'nrtReplicas':'2',\\n\" +\n        \"  'tlogReplicas':'0'},\\n\" +\n        \"'collection2' : {\\n\" +\n        \"  'pullReplicas':'0',\\n\" +\n        \"  'replicationFactor':'2',\\n\" +\n        \"  'shards':{\\n\" +\n        \"    'shard1':{\\n\" +\n        \"      'range':'80000000-ffffffff',\\n\" +\n        \"      'state':'active',\\n\" +\n        \"      'replicas':{\\n\" +\n        \"        'core_node1':{\\n\" +\n        \"          'core':'collection2_shard1_replica_n1',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51649/solr',\\n\" +\n        \"          'node_name':'node2',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT'},\\n\" +\n        \"        'core_node2':{\\n\" +\n        \"          'core':'collection2_shard1_replica_n2',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51651/solr',\\n\" +\n        \"          'node_name':'node3',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT',\\n\" +\n        \"          'leader':'true'}}},\\n\" +\n        \"    'shard2':{\\n\" +\n        \"      'range':'0-7fffffff',\\n\" +\n        \"      'state':'active',\\n\" +\n        \"      'replicas':{\\n\" +\n        \"        'core_node3':{\\n\" +\n        \"          'core':'collection2_shard2_replica_n1',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51649/solr',\\n\" +\n        \"          'node_name':'node2',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT'},\\n\" +\n        \"        'core_node4':{\\n\" +\n        \"          'core':'collection2_shard2_replica_n2',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51651/solr',\\n\" +\n        \"          'node_name':'node3',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT',\\n\" +\n        \"          'leader':'true'}}}},\\n\" +\n        \"  'router':{'name':'compositeId'},\\n\" +\n        \"  'maxShardsPerNode':'2',\\n\" +\n        \"  'autoAddReplicas':'true',\\n\" +\n        \"  'nrtReplicas':'2',\\n\" +\n        \"  'tlogReplicas':'0'}\\n\" +\n        \"}\";\n    Policy policy = new Policy(new HashMap<>());\n    Suggester suggester = policy.createSession(getSolrCloudManager(nodeValues, clusterState))\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Suggester.Hint.SRC_NODE, \"node2\");\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"collection2\", op.getParams().get(\"collection\"));\n    assertEquals(\"node1\", op.getParams().get(\"targetNode\"));\n    String coreNodeName = op.getParams().get(\"replica\");\n    assertTrue(coreNodeName.equals(\"core_node3\") || coreNodeName.equals(\"core_node1\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Suggester.Hint.SRC_NODE, \"node2\");\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"collection2\", op.getParams().get(\"collection\"));\n    assertEquals(\"node1\", op.getParams().get(\"targetNode\"));\n    coreNodeName = op.getParams().get(\"replica\");\n    assertTrue(coreNodeName.equals(\"core_node3\") || coreNodeName.equals(\"core_node1\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Suggester.Hint.SRC_NODE, \"node2\");\n    op = suggester.getSuggestion();\n    assertNull(op);\n  }\n\n","sourceOld":"  public void testMoveReplicasInMultipleCollections() {\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:2},\" +\n        \"node3:{cores:4}\" +\n        \"}\");\n    String clusterState = \"{\\n\" +\n        \"'collection1' : {\\n\" +\n        \"  'pullReplicas':'0',\\n\" +\n        \"  'replicationFactor':'2',\\n\" +\n        \"  'shards':{\\n\" +\n        \"    'shard1':{\\n\" +\n        \"      'range':'80000000-ffffffff',\\n\" +\n        \"      'state':'active',\\n\" +\n        \"      'replicas':{\\n\" +\n        \"        'core_node1':{\\n\" +\n        \"          'core':'collection1_shard1_replica_n1',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51650/solr',\\n\" +\n        \"          'node_name':'node1',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT',\\n\" +\n        \"          'leader':'true'},\\n\" +\n        \"        'core_node6':{\\n\" +\n        \"          'core':'collection1_shard1_replica_n3',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51651/solr',\\n\" +\n        \"          'node_name':'node3',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT'}}},\\n\" +\n        \"    'shard2':{\\n\" +\n        \"      'range':'0-7fffffff',\\n\" +\n        \"      'state':'active',\\n\" +\n        \"      'replicas':{\\n\" +\n        \"        'core_node3':{\\n\" +\n        \"          'core':'collection1_shard2_replica_n1',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51650/solr',\\n\" +\n        \"          'node_name':'node1',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT',\\n\" +\n        \"          'leader':'true'},\\n\" +\n        \"        'core_node5':{\\n\" +\n        \"          'core':'collection1_shard2_replica_n3',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51651/solr',\\n\" +\n        \"          'node_name':'node3',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT'}}}},\\n\" +\n        \"  'router':{'name':'compositeId'},\\n\" +\n        \"  'maxShardsPerNode':'2',\\n\" +\n        \"  'autoAddReplicas':'true',\\n\" +\n        \"  'nrtReplicas':'2',\\n\" +\n        \"  'tlogReplicas':'0'},\\n\" +\n        \"'collection2' : {\\n\" +\n        \"  'pullReplicas':'0',\\n\" +\n        \"  'replicationFactor':'2',\\n\" +\n        \"  'shards':{\\n\" +\n        \"    'shard1':{\\n\" +\n        \"      'range':'80000000-ffffffff',\\n\" +\n        \"      'state':'active',\\n\" +\n        \"      'replicas':{\\n\" +\n        \"        'core_node1':{\\n\" +\n        \"          'core':'collection2_shard1_replica_n1',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51649/solr',\\n\" +\n        \"          'node_name':'node2',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT'},\\n\" +\n        \"        'core_node2':{\\n\" +\n        \"          'core':'collection2_shard1_replica_n2',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51651/solr',\\n\" +\n        \"          'node_name':'node3',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT',\\n\" +\n        \"          'leader':'true'}}},\\n\" +\n        \"    'shard2':{\\n\" +\n        \"      'range':'0-7fffffff',\\n\" +\n        \"      'state':'active',\\n\" +\n        \"      'replicas':{\\n\" +\n        \"        'core_node3':{\\n\" +\n        \"          'core':'collection2_shard2_replica_n1',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51649/solr',\\n\" +\n        \"          'node_name':'node2',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT'},\\n\" +\n        \"        'core_node4':{\\n\" +\n        \"          'core':'collection2_shard2_replica_n2',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51651/solr',\\n\" +\n        \"          'node_name':'node3',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT',\\n\" +\n        \"          'leader':'true'}}}},\\n\" +\n        \"  'router':{'name':'compositeId'},\\n\" +\n        \"  'maxShardsPerNode':'2',\\n\" +\n        \"  'autoAddReplicas':'true',\\n\" +\n        \"  'nrtReplicas':'2',\\n\" +\n        \"  'tlogReplicas':'0'}\\n\" +\n        \"}\";\n    Policy policy = new Policy(new HashMap<>());\n    Suggester suggester = policy.createSession(getSolrCloudManager(nodeValues, clusterState))\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Suggester.Hint.SRC_NODE, \"node2\");\n    SolrRequest op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"collection2\", op.getParams().get(\"collection\"));\n    assertEquals(\"node1\", op.getParams().get(\"targetNode\"));\n    String coreNodeName = op.getParams().get(\"replica\");\n    assertTrue(coreNodeName.equals(\"core_node3\") || coreNodeName.equals(\"core_node1\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Suggester.Hint.SRC_NODE, \"node2\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"collection2\", op.getParams().get(\"collection\"));\n    assertEquals(\"node1\", op.getParams().get(\"targetNode\"));\n    coreNodeName = op.getParams().get(\"replica\");\n    assertTrue(coreNodeName.equals(\"core_node3\") || coreNodeName.equals(\"core_node1\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Suggester.Hint.SRC_NODE, \"node2\");\n    op = suggester.getOperation();\n    assertNull(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"536bafb7a33a91ae703a78de9f6bd5c7e32471d9","date":1538395209,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplicasInMultipleCollections().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplicasInMultipleCollections().mjava","sourceNew":"  public void testMoveReplicasInMultipleCollections() throws IOException {\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:2},\" +\n        \"node3:{cores:4}\" +\n        \"}\");\n    Policy policy = new Policy(new HashMap<>());\n    Suggester suggester = policy.createSession(getSolrCloudManager(nodeValues,\n        (Map<String, Object>) TestPolicy2.loadFromResource(\"testMoveReplicasInMultipleCollections.json\")))\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Suggester.Hint.SRC_NODE, \"node2\");\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"collection2\", op.getParams().get(\"collection\"));\n    assertEquals(\"node1\", op.getParams().get(\"targetNode\"));\n    String coreNodeName = op.getParams().get(\"replica\");\n    assertTrue(coreNodeName.equals(\"core_node3\") || coreNodeName.equals(\"core_node1\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Suggester.Hint.SRC_NODE, \"node2\");\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"collection2\", op.getParams().get(\"collection\"));\n    assertEquals(\"node1\", op.getParams().get(\"targetNode\"));\n    coreNodeName = op.getParams().get(\"replica\");\n    assertTrue(coreNodeName.equals(\"core_node3\") || coreNodeName.equals(\"core_node1\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Suggester.Hint.SRC_NODE, \"node2\");\n    op = suggester.getSuggestion();\n    assertNull(op);\n  }\n\n","sourceOld":"  public void testMoveReplicasInMultipleCollections() {\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:2},\" +\n        \"node3:{cores:4}\" +\n        \"}\");\n    String clusterState = \"{\\n\" +\n        \"'collection1' : {\\n\" +\n        \"  'pullReplicas':'0',\\n\" +\n        \"  'replicationFactor':'2',\\n\" +\n        \"  'shards':{\\n\" +\n        \"    'shard1':{\\n\" +\n        \"      'range':'80000000-ffffffff',\\n\" +\n        \"      'state':'active',\\n\" +\n        \"      'replicas':{\\n\" +\n        \"        'core_node1':{\\n\" +\n        \"          'core':'collection1_shard1_replica_n1',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51650/solr',\\n\" +\n        \"          'node_name':'node1',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT',\\n\" +\n        \"          'leader':'true'},\\n\" +\n        \"        'core_node6':{\\n\" +\n        \"          'core':'collection1_shard1_replica_n3',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51651/solr',\\n\" +\n        \"          'node_name':'node3',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT'}}},\\n\" +\n        \"    'shard2':{\\n\" +\n        \"      'range':'0-7fffffff',\\n\" +\n        \"      'state':'active',\\n\" +\n        \"      'replicas':{\\n\" +\n        \"        'core_node3':{\\n\" +\n        \"          'core':'collection1_shard2_replica_n1',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51650/solr',\\n\" +\n        \"          'node_name':'node1',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT',\\n\" +\n        \"          'leader':'true'},\\n\" +\n        \"        'core_node5':{\\n\" +\n        \"          'core':'collection1_shard2_replica_n3',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51651/solr',\\n\" +\n        \"          'node_name':'node3',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT'}}}},\\n\" +\n        \"  'router':{'name':'compositeId'},\\n\" +\n        \"  'maxShardsPerNode':'2',\\n\" +\n        \"  'autoAddReplicas':'true',\\n\" +\n        \"  'nrtReplicas':'2',\\n\" +\n        \"  'tlogReplicas':'0'},\\n\" +\n        \"'collection2' : {\\n\" +\n        \"  'pullReplicas':'0',\\n\" +\n        \"  'replicationFactor':'2',\\n\" +\n        \"  'shards':{\\n\" +\n        \"    'shard1':{\\n\" +\n        \"      'range':'80000000-ffffffff',\\n\" +\n        \"      'state':'active',\\n\" +\n        \"      'replicas':{\\n\" +\n        \"        'core_node1':{\\n\" +\n        \"          'core':'collection2_shard1_replica_n1',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51649/solr',\\n\" +\n        \"          'node_name':'node2',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT'},\\n\" +\n        \"        'core_node2':{\\n\" +\n        \"          'core':'collection2_shard1_replica_n2',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51651/solr',\\n\" +\n        \"          'node_name':'node3',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT',\\n\" +\n        \"          'leader':'true'}}},\\n\" +\n        \"    'shard2':{\\n\" +\n        \"      'range':'0-7fffffff',\\n\" +\n        \"      'state':'active',\\n\" +\n        \"      'replicas':{\\n\" +\n        \"        'core_node3':{\\n\" +\n        \"          'core':'collection2_shard2_replica_n1',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51649/solr',\\n\" +\n        \"          'node_name':'node2',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT'},\\n\" +\n        \"        'core_node4':{\\n\" +\n        \"          'core':'collection2_shard2_replica_n2',\\n\" +\n        \"          'base_url':'http://127.0.0.1:51651/solr',\\n\" +\n        \"          'node_name':'node3',\\n\" +\n        \"          'state':'active',\\n\" +\n        \"          'type':'NRT',\\n\" +\n        \"          'leader':'true'}}}},\\n\" +\n        \"  'router':{'name':'compositeId'},\\n\" +\n        \"  'maxShardsPerNode':'2',\\n\" +\n        \"  'autoAddReplicas':'true',\\n\" +\n        \"  'nrtReplicas':'2',\\n\" +\n        \"  'tlogReplicas':'0'}\\n\" +\n        \"}\";\n    Policy policy = new Policy(new HashMap<>());\n    Suggester suggester = policy.createSession(getSolrCloudManager(nodeValues, clusterState))\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Suggester.Hint.SRC_NODE, \"node2\");\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"collection2\", op.getParams().get(\"collection\"));\n    assertEquals(\"node1\", op.getParams().get(\"targetNode\"));\n    String coreNodeName = op.getParams().get(\"replica\");\n    assertTrue(coreNodeName.equals(\"core_node3\") || coreNodeName.equals(\"core_node1\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Suggester.Hint.SRC_NODE, \"node2\");\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"collection2\", op.getParams().get(\"collection\"));\n    assertEquals(\"node1\", op.getParams().get(\"targetNode\"));\n    coreNodeName = op.getParams().get(\"replica\");\n    assertTrue(coreNodeName.equals(\"core_node3\") || coreNodeName.equals(\"core_node1\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Suggester.Hint.SRC_NODE, \"node2\");\n    op = suggester.getSuggestion();\n    assertNull(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5a27e78e3d29dee02bab19ded25336471e96882","date":1539677468,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplicasInMultipleCollections().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplicasInMultipleCollections().mjava","sourceNew":"  public void testMoveReplicasInMultipleCollections() throws IOException {\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:2},\" +\n        \"node3:{cores:4}\" +\n        \"}\");\n    Policy policy = new Policy(new HashMap<>());\n    Suggester suggester = policy.createSession(getSolrCloudManager(nodeValues,\n        (Map<String, Object>) loadFromResource(\"testMoveReplicasInMultipleCollections.json\")))\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Suggester.Hint.SRC_NODE, \"node2\");\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"collection2\", op.getParams().get(\"collection\"));\n    assertEquals(\"node1\", op.getParams().get(\"targetNode\"));\n    String coreNodeName = op.getParams().get(\"replica\");\n    assertTrue(coreNodeName.equals(\"core_node3\") || coreNodeName.equals(\"core_node1\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Suggester.Hint.SRC_NODE, \"node2\");\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"collection2\", op.getParams().get(\"collection\"));\n    assertEquals(\"node1\", op.getParams().get(\"targetNode\"));\n    coreNodeName = op.getParams().get(\"replica\");\n    assertTrue(coreNodeName.equals(\"core_node3\") || coreNodeName.equals(\"core_node1\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Suggester.Hint.SRC_NODE, \"node2\");\n    op = suggester.getSuggestion();\n    assertNull(op);\n  }\n\n","sourceOld":"  public void testMoveReplicasInMultipleCollections() throws IOException {\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:2},\" +\n        \"node3:{cores:4}\" +\n        \"}\");\n    Policy policy = new Policy(new HashMap<>());\n    Suggester suggester = policy.createSession(getSolrCloudManager(nodeValues,\n        (Map<String, Object>) TestPolicy2.loadFromResource(\"testMoveReplicasInMultipleCollections.json\")))\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Suggester.Hint.SRC_NODE, \"node2\");\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"collection2\", op.getParams().get(\"collection\"));\n    assertEquals(\"node1\", op.getParams().get(\"targetNode\"));\n    String coreNodeName = op.getParams().get(\"replica\");\n    assertTrue(coreNodeName.equals(\"core_node3\") || coreNodeName.equals(\"core_node1\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Suggester.Hint.SRC_NODE, \"node2\");\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"collection2\", op.getParams().get(\"collection\"));\n    assertEquals(\"node1\", op.getParams().get(\"targetNode\"));\n    coreNodeName = op.getParams().get(\"replica\");\n    assertTrue(coreNodeName.equals(\"core_node3\") || coreNodeName.equals(\"core_node1\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Suggester.Hint.SRC_NODE, \"node2\");\n    op = suggester.getSuggestion();\n    assertNull(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"067ba8c807b0f23eae8bf41bc27046a87b548134","date":1587570399,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplicasInMultipleCollections().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplicasInMultipleCollections().mjava","sourceNew":"  public void testMoveReplicasInMultipleCollections() throws IOException {\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:2},\" +\n        \"node3:{cores:4}\" +\n        \"node2:{cores:2}\" +\n        \"}\");\n    Policy policy = new Policy(new HashMap<>());\n    Suggester suggester = policy.createSession(getSolrCloudManager(nodeValues,\n        (Map<String, Object>) loadFromResource(\"testMoveReplicasInMultipleCollections.json\")))\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Suggester.Hint.SRC_NODE, \"node2\")\n        .forceOperation(true);\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"collection2\", op.getParams().get(\"collection\"));\n    assertEquals(\"node1\", op.getParams().get(\"targetNode\"));\n    String coreNodeName = op.getParams().get(\"replica\");\n    assertTrue(coreNodeName.equals(\"core_node3\") || coreNodeName.equals(\"core_node1\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Suggester.Hint.SRC_NODE, \"node2\")\n        .forceOperation(true);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"collection2\", op.getParams().get(\"collection\"));\n    assertEquals(\"node1\", op.getParams().get(\"targetNode\"));\n    coreNodeName = op.getParams().get(\"replica\");\n    assertTrue(coreNodeName.equals(\"core_node3\") || coreNodeName.equals(\"core_node1\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Suggester.Hint.SRC_NODE, \"node2\");\n    op = suggester.getSuggestion();\n    assertNull(op);\n  }\n\n","sourceOld":"  public void testMoveReplicasInMultipleCollections() throws IOException {\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:2},\" +\n        \"node3:{cores:4}\" +\n        \"}\");\n    Policy policy = new Policy(new HashMap<>());\n    Suggester suggester = policy.createSession(getSolrCloudManager(nodeValues,\n        (Map<String, Object>) loadFromResource(\"testMoveReplicasInMultipleCollections.json\")))\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Suggester.Hint.SRC_NODE, \"node2\");\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"collection2\", op.getParams().get(\"collection\"));\n    assertEquals(\"node1\", op.getParams().get(\"targetNode\"));\n    String coreNodeName = op.getParams().get(\"replica\");\n    assertTrue(coreNodeName.equals(\"core_node3\") || coreNodeName.equals(\"core_node1\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Suggester.Hint.SRC_NODE, \"node2\");\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"collection2\", op.getParams().get(\"collection\"));\n    assertEquals(\"node1\", op.getParams().get(\"targetNode\"));\n    coreNodeName = op.getParams().get(\"replica\");\n    assertTrue(coreNodeName.equals(\"core_node3\") || coreNodeName.equals(\"core_node1\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Suggester.Hint.SRC_NODE, \"node2\");\n    op = suggester.getSuggestion();\n    assertNull(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplicasInMultipleCollections().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplicasInMultipleCollections().mjava","sourceNew":"  public void testMoveReplicasInMultipleCollections() throws IOException {\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:2},\" +\n        \"node3:{cores:4}\" +\n        \"node2:{cores:2}\" +\n        \"}\");\n    Policy policy = new Policy(new HashMap<>());\n    @SuppressWarnings({\"unchecked\"})\n    Suggester suggester = policy.createSession(getSolrCloudManager(nodeValues,\n        (Map<String, Object>) loadFromResource(\"testMoveReplicasInMultipleCollections.json\")))\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Suggester.Hint.SRC_NODE, \"node2\")\n        .forceOperation(true);\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"collection2\", op.getParams().get(\"collection\"));\n    assertEquals(\"node1\", op.getParams().get(\"targetNode\"));\n    String coreNodeName = op.getParams().get(\"replica\");\n    assertTrue(coreNodeName.equals(\"core_node3\") || coreNodeName.equals(\"core_node1\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Suggester.Hint.SRC_NODE, \"node2\")\n        .forceOperation(true);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"collection2\", op.getParams().get(\"collection\"));\n    assertEquals(\"node1\", op.getParams().get(\"targetNode\"));\n    coreNodeName = op.getParams().get(\"replica\");\n    assertTrue(coreNodeName.equals(\"core_node3\") || coreNodeName.equals(\"core_node1\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Suggester.Hint.SRC_NODE, \"node2\");\n    op = suggester.getSuggestion();\n    assertNull(op);\n  }\n\n","sourceOld":"  public void testMoveReplicasInMultipleCollections() throws IOException {\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:2},\" +\n        \"node3:{cores:4}\" +\n        \"node2:{cores:2}\" +\n        \"}\");\n    Policy policy = new Policy(new HashMap<>());\n    Suggester suggester = policy.createSession(getSolrCloudManager(nodeValues,\n        (Map<String, Object>) loadFromResource(\"testMoveReplicasInMultipleCollections.json\")))\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Suggester.Hint.SRC_NODE, \"node2\")\n        .forceOperation(true);\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"collection2\", op.getParams().get(\"collection\"));\n    assertEquals(\"node1\", op.getParams().get(\"targetNode\"));\n    String coreNodeName = op.getParams().get(\"replica\");\n    assertTrue(coreNodeName.equals(\"core_node3\") || coreNodeName.equals(\"core_node1\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Suggester.Hint.SRC_NODE, \"node2\")\n        .forceOperation(true);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"collection2\", op.getParams().get(\"collection\"));\n    assertEquals(\"node1\", op.getParams().get(\"targetNode\"));\n    coreNodeName = op.getParams().get(\"replica\");\n    assertTrue(coreNodeName.equals(\"core_node3\") || coreNodeName.equals(\"core_node1\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Suggester.Hint.SRC_NODE, \"node2\");\n    op = suggester.getSuggestion();\n    assertNull(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplicasInMultipleCollections().mjava","sourceNew":null,"sourceOld":"  public void testMoveReplicasInMultipleCollections() throws IOException {\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:2},\" +\n        \"node3:{cores:4}\" +\n        \"node2:{cores:2}\" +\n        \"}\");\n    Policy policy = new Policy(new HashMap<>());\n    @SuppressWarnings({\"unchecked\"})\n    Suggester suggester = policy.createSession(getSolrCloudManager(nodeValues,\n        (Map<String, Object>) loadFromResource(\"testMoveReplicasInMultipleCollections.json\")))\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Suggester.Hint.SRC_NODE, \"node2\")\n        .forceOperation(true);\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"collection2\", op.getParams().get(\"collection\"));\n    assertEquals(\"node1\", op.getParams().get(\"targetNode\"));\n    String coreNodeName = op.getParams().get(\"replica\");\n    assertTrue(coreNodeName.equals(\"core_node3\") || coreNodeName.equals(\"core_node1\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Suggester.Hint.SRC_NODE, \"node2\")\n        .forceOperation(true);\n    op = suggester.getSuggestion();\n    assertNotNull(op);\n    assertEquals(\"collection2\", op.getParams().get(\"collection\"));\n    assertEquals(\"node1\", op.getParams().get(\"targetNode\"));\n    coreNodeName = op.getParams().get(\"replica\");\n    assertTrue(coreNodeName.equals(\"core_node3\") || coreNodeName.equals(\"core_node1\"));\n\n    suggester = suggester.getSession()\n        .getSuggester(MOVEREPLICA)\n        .hint(Hint.COLL, \"collection1\")\n        .hint(Hint.COLL, \"collection2\")\n        .hint(Suggester.Hint.SRC_NODE, \"node2\");\n    op = suggester.getSuggestion();\n    assertNull(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["067ba8c807b0f23eae8bf41bc27046a87b548134"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","717e5ceb2acae36d422ec75e5a4ce9fac40506e1"],"717e5ceb2acae36d422ec75e5a4ce9fac40506e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["9ba1b632c041956c93c41aa1143d16a567014891"],"536bafb7a33a91ae703a78de9f6bd5c7e32471d9":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"067ba8c807b0f23eae8bf41bc27046a87b548134":["f5a27e78e3d29dee02bab19ded25336471e96882"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"f5a27e78e3d29dee02bab19ded25336471e96882":["536bafb7a33a91ae703a78de9f6bd5c7e32471d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["3f504512a03d978990cbff30db0522b354e846db"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"717e5ceb2acae36d422ec75e5a4ce9fac40506e1":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"536bafb7a33a91ae703a78de9f6bd5c7e32471d9":["f5a27e78e3d29dee02bab19ded25336471e96882"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"],"067ba8c807b0f23eae8bf41bc27046a87b548134":["9ba1b632c041956c93c41aa1143d16a567014891"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","717e5ceb2acae36d422ec75e5a4ce9fac40506e1","560c18d71dad43d675158783c3840f8c80d6d39c"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["536bafb7a33a91ae703a78de9f6bd5c7e32471d9"],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"f5a27e78e3d29dee02bab19ded25336471e96882":["067ba8c807b0f23eae8bf41bc27046a87b548134"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}