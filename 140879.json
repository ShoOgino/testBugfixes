{"path":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testBooleanFunctions().mjava","commits":[{"id":"80f6925d29ae169407185d52267ba1969126e1e2","date":1307134127,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testBooleanFunctions().mjava","pathOld":"/dev/null","sourceNew":"    @Test\n  public void testBooleanFunctions() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\", \"foo_ti\", \"0\", \"foo_tl\",\"0\"));\n    assertU(adoc(\"id\", \"2\"                              , \"foo_ti\",\"10\", \"foo_tl\",\"11\"));\n    assertU(commit());\n\n    // true and false functions and constants\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:true(),f:false(),tt:{!func}true,ff:{!func}false\")\n        , \"/response/docs/[0]=={'t':true,'f':false,'tt':true,'ff':false}\");\n\n    // test that exists(query) depends on the query matching the document\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:exists(query($q1)),f:exists(query($q2))\", \"q1\",\"text:hello\", \"q2\",\"text:there\")\n        , \"/response/docs/[0]=={'t':true,'f':false}\");\n\n    // test if()\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a1:if(true,'A','B')\", \"fl\",\"b1:if(false,'A','B')\")\n        , \"/response/docs/[0]=={'a1':'A', 'b1':'B'}\");\n\n    // test boolean operators\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:and(true,true)\", \"fl\",\"f1:and(true,false)\", \"fl\",\"f2:and(false,true)\", \"fl\",\"f3:and(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 'f1':false, 'f2':false, 'f3':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:or(true,true)\", \"fl\",\"t2:or(true,false)\", \"fl\",\"t3:or(false,true)\", \"fl\",\"f1:or(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 't3':true, 'f1':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"f1:xor(true,true)\", \"fl\",\"t1:xor(true,false)\", \"fl\",\"t2:xor(false,true)\", \"fl\",\"f2:xor(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 'f1':false, 'f2':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:not(false),f:not(true)\")\n        , \"/response/docs/[0]=={'t':true, 'f':false}\");\n\n\n    // def(), the default function that returns the first value that exists\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(id,123.0), y:def(foo_f,234.0)\")\n        , \"/response/docs/[0]=={'x':1.0, 'y':234.0}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(foo_s,'Q'), y:def(missing_s,'W')\")\n        , \"/response/docs/[0]=={'x':'A', 'y':'W'}\");\n\n    // test constant conversion to boolean\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:not(0), b:not(1), c:not(0.0), d:not(1.1), e:not('A')\")\n        , \"/response/docs/[0]=={'a':true, 'b':false, 'c':true, 'd':false, 'e':false}\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1863090ece9f7d49f0d21a4711350751c6b7e5ad","1863090ece9f7d49f0d21a4711350751c6b7e5ad","1863090ece9f7d49f0d21a4711350751c6b7e5ad"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c03daa6ddcb4768a702115ec63799cab5fff3d92","date":1307140842,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testBooleanFunctions().mjava","pathOld":"/dev/null","sourceNew":"    @Test\n  public void testBooleanFunctions() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\", \"foo_ti\", \"0\", \"foo_tl\",\"0\"));\n    assertU(adoc(\"id\", \"2\"                              , \"foo_ti\",\"10\", \"foo_tl\",\"11\"));\n    assertU(commit());\n\n    // true and false functions and constants\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:true(),f:false(),tt:{!func}true,ff:{!func}false\")\n        , \"/response/docs/[0]=={'t':true,'f':false,'tt':true,'ff':false}\");\n\n    // test that exists(query) depends on the query matching the document\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:exists(query($q1)),f:exists(query($q2))\", \"q1\",\"text:hello\", \"q2\",\"text:there\")\n        , \"/response/docs/[0]=={'t':true,'f':false}\");\n\n    // test if()\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a1:if(true,'A','B')\", \"fl\",\"b1:if(false,'A','B')\")\n        , \"/response/docs/[0]=={'a1':'A', 'b1':'B'}\");\n\n    // test boolean operators\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:and(true,true)\", \"fl\",\"f1:and(true,false)\", \"fl\",\"f2:and(false,true)\", \"fl\",\"f3:and(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 'f1':false, 'f2':false, 'f3':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:or(true,true)\", \"fl\",\"t2:or(true,false)\", \"fl\",\"t3:or(false,true)\", \"fl\",\"f1:or(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 't3':true, 'f1':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"f1:xor(true,true)\", \"fl\",\"t1:xor(true,false)\", \"fl\",\"t2:xor(false,true)\", \"fl\",\"f2:xor(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 'f1':false, 'f2':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:not(false),f:not(true)\")\n        , \"/response/docs/[0]=={'t':true, 'f':false}\");\n\n\n    // def(), the default function that returns the first value that exists\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(id,123.0), y:def(foo_f,234.0)\")\n        , \"/response/docs/[0]=={'x':1.0, 'y':234.0}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(foo_s,'Q'), y:def(missing_s,'W')\")\n        , \"/response/docs/[0]=={'x':'A', 'y':'W'}\");\n\n    // test constant conversion to boolean\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:not(0), b:not(1), c:not(0.0), d:not(1.1), e:not('A')\")\n        , \"/response/docs/[0]=={'a':true, 'b':false, 'c':true, 'd':false, 'e':false}\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e7c99bd45fa88a3d93a03fdd773053bef72268e","date":1307218088,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testBooleanFunctions().mjava","pathOld":"/dev/null","sourceNew":"    @Test\n  public void testBooleanFunctions() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\", \"foo_ti\", \"0\", \"foo_tl\",\"0\"));\n    assertU(adoc(\"id\", \"2\"                              , \"foo_ti\",\"10\", \"foo_tl\",\"11\"));\n    assertU(commit());\n\n    // true and false functions and constants\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:true(),f:false(),tt:{!func}true,ff:{!func}false\")\n        , \"/response/docs/[0]=={'t':true,'f':false,'tt':true,'ff':false}\");\n\n    // test that exists(query) depends on the query matching the document\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:exists(query($q1)),f:exists(query($q2))\", \"q1\",\"text:hello\", \"q2\",\"text:there\")\n        , \"/response/docs/[0]=={'t':true,'f':false}\");\n\n    // test if()\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a1:if(true,'A','B')\", \"fl\",\"b1:if(false,'A','B')\")\n        , \"/response/docs/[0]=={'a1':'A', 'b1':'B'}\");\n\n    // test boolean operators\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:and(true,true)\", \"fl\",\"f1:and(true,false)\", \"fl\",\"f2:and(false,true)\", \"fl\",\"f3:and(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 'f1':false, 'f2':false, 'f3':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:or(true,true)\", \"fl\",\"t2:or(true,false)\", \"fl\",\"t3:or(false,true)\", \"fl\",\"f1:or(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 't3':true, 'f1':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"f1:xor(true,true)\", \"fl\",\"t1:xor(true,false)\", \"fl\",\"t2:xor(false,true)\", \"fl\",\"f2:xor(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 'f1':false, 'f2':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:not(false),f:not(true)\")\n        , \"/response/docs/[0]=={'t':true, 'f':false}\");\n\n\n    // def(), the default function that returns the first value that exists\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(id,123.0), y:def(foo_f,234.0)\")\n        , \"/response/docs/[0]=={'x':1.0, 'y':234.0}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(foo_s,'Q'), y:def(missing_s,'W')\")\n        , \"/response/docs/[0]=={'x':'A', 'y':'W'}\");\n\n    // test constant conversion to boolean\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:not(0), b:not(1), c:not(0.0), d:not(1.1), e:not('A')\")\n        , \"/response/docs/[0]=={'a':true, 'b':false, 'c':true, 'd':false, 'e':false}\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testBooleanFunctions().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testBooleanFunctions().mjava","sourceNew":"    @Test\n  public void testBooleanFunctions() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\", \"foo_ti\", \"0\", \"foo_tl\",\"0\"));\n    assertU(adoc(\"id\", \"2\"                              , \"foo_ti\",\"10\", \"foo_tl\",\"11\"));\n    assertU(commit());\n\n    // true and false functions and constants\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:true(),f:false(),tt:{!func}true,ff:{!func}false\")\n        , \"/response/docs/[0]=={'t':true,'f':false,'tt':true,'ff':false}\");\n\n    // test that exists(query) depends on the query matching the document\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:exists(query($q1)),f:exists(query($q2))\", \"q1\",\"text:hello\", \"q2\",\"text:there\")\n        , \"/response/docs/[0]=={'t':true,'f':false}\");\n\n    // test if()\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a1:if(true,'A','B')\", \"fl\",\"b1:if(false,'A','B')\")\n        , \"/response/docs/[0]=={'a1':'A', 'b1':'B'}\");\n\n    // test boolean operators\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:and(true,true)\", \"fl\",\"f1:and(true,false)\", \"fl\",\"f2:and(false,true)\", \"fl\",\"f3:and(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 'f1':false, 'f2':false, 'f3':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:or(true,true)\", \"fl\",\"t2:or(true,false)\", \"fl\",\"t3:or(false,true)\", \"fl\",\"f1:or(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 't3':true, 'f1':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"f1:xor(true,true)\", \"fl\",\"t1:xor(true,false)\", \"fl\",\"t2:xor(false,true)\", \"fl\",\"f2:xor(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 'f1':false, 'f2':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:not(false),f:not(true)\")\n        , \"/response/docs/[0]=={'t':true, 'f':false}\");\n\n\n    // def(), the default function that returns the first value that exists\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(id,123.0), y:def(foo_f,234.0)\")\n        , \"/response/docs/[0]=={'x':1.0, 'y':234.0}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(foo_s,'Q'), y:def(missing_s,'W')\")\n        , \"/response/docs/[0]=={'x':'A', 'y':'W'}\");\n\n    // test constant conversion to boolean\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:not(0), b:not(1), c:not(0.0), d:not(1.1), e:not('A')\")\n        , \"/response/docs/[0]=={'a':true, 'b':false, 'c':true, 'd':false, 'e':false}\");\n\n  }\n\n","sourceOld":"    @Test\n  public void testBooleanFunctions() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\", \"foo_ti\", \"0\", \"foo_tl\",\"0\"));\n    assertU(adoc(\"id\", \"2\"                              , \"foo_ti\",\"10\", \"foo_tl\",\"11\"));\n    assertU(commit());\n\n    // true and false functions and constants\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:true(),f:false(),tt:{!func}true,ff:{!func}false\")\n        , \"/response/docs/[0]=={'t':true,'f':false,'tt':true,'ff':false}\");\n\n    // test that exists(query) depends on the query matching the document\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:exists(query($q1)),f:exists(query($q2))\", \"q1\",\"text:hello\", \"q2\",\"text:there\")\n        , \"/response/docs/[0]=={'t':true,'f':false}\");\n\n    // test if()\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a1:if(true,'A','B')\", \"fl\",\"b1:if(false,'A','B')\")\n        , \"/response/docs/[0]=={'a1':'A', 'b1':'B'}\");\n\n    // test boolean operators\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:and(true,true)\", \"fl\",\"f1:and(true,false)\", \"fl\",\"f2:and(false,true)\", \"fl\",\"f3:and(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 'f1':false, 'f2':false, 'f3':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:or(true,true)\", \"fl\",\"t2:or(true,false)\", \"fl\",\"t3:or(false,true)\", \"fl\",\"f1:or(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 't3':true, 'f1':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"f1:xor(true,true)\", \"fl\",\"t1:xor(true,false)\", \"fl\",\"t2:xor(false,true)\", \"fl\",\"f2:xor(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 'f1':false, 'f2':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:not(false),f:not(true)\")\n        , \"/response/docs/[0]=={'t':true, 'f':false}\");\n\n\n    // def(), the default function that returns the first value that exists\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(id,123.0), y:def(foo_f,234.0)\")\n        , \"/response/docs/[0]=={'x':1.0, 'y':234.0}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(foo_s,'Q'), y:def(missing_s,'W')\")\n        , \"/response/docs/[0]=={'x':'A', 'y':'W'}\");\n\n    // test constant conversion to boolean\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:not(0), b:not(1), c:not(0.0), d:not(1.1), e:not('A')\")\n        , \"/response/docs/[0]=={'a':true, 'b':false, 'c':true, 'd':false, 'e':false}\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testBooleanFunctions().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testBooleanFunctions().mjava","sourceNew":"    @Test\n  public void testBooleanFunctions() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\", \"foo_ti\", \"0\", \"foo_tl\",\"0\"));\n    assertU(adoc(\"id\", \"2\"                              , \"foo_ti\",\"10\", \"foo_tl\",\"11\"));\n    assertU(commit());\n\n    // true and false functions and constants\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:true(),f:false(),tt:{!func}true,ff:{!func}false\")\n        , \"/response/docs/[0]=={'t':true,'f':false,'tt':true,'ff':false}\");\n\n    // test that exists(query) depends on the query matching the document\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:exists(query($q1)),f:exists(query($q2))\", \"q1\",\"text:hello\", \"q2\",\"text:there\")\n        , \"/response/docs/[0]=={'t':true,'f':false}\");\n\n    // test if()\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a1:if(true,'A','B')\", \"fl\",\"b1:if(false,'A','B')\")\n        , \"/response/docs/[0]=={'a1':'A', 'b1':'B'}\");\n\n    // test boolean operators\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:and(true,true)\", \"fl\",\"f1:and(true,false)\", \"fl\",\"f2:and(false,true)\", \"fl\",\"f3:and(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 'f1':false, 'f2':false, 'f3':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:or(true,true)\", \"fl\",\"t2:or(true,false)\", \"fl\",\"t3:or(false,true)\", \"fl\",\"f1:or(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 't3':true, 'f1':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"f1:xor(true,true)\", \"fl\",\"t1:xor(true,false)\", \"fl\",\"t2:xor(false,true)\", \"fl\",\"f2:xor(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 'f1':false, 'f2':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:not(false),f:not(true)\")\n        , \"/response/docs/[0]=={'t':true, 'f':false}\");\n\n\n    // def(), the default function that returns the first value that exists\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(id,123.0), y:def(foo_f,234.0)\")\n        , \"/response/docs/[0]=={'x':1.0, 'y':234.0}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(foo_s,'Q'), y:def(missing_s,'W')\")\n        , \"/response/docs/[0]=={'x':'A', 'y':'W'}\");\n\n    // test constant conversion to boolean\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:not(0), b:not(1), c:not(0.0), d:not(1.1), e:not('A')\")\n        , \"/response/docs/[0]=={'a':true, 'b':false, 'c':true, 'd':false, 'e':false}\");\n\n  }\n\n","sourceOld":"    @Test\n  public void testBooleanFunctions() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\", \"foo_ti\", \"0\", \"foo_tl\",\"0\"));\n    assertU(adoc(\"id\", \"2\"                              , \"foo_ti\",\"10\", \"foo_tl\",\"11\"));\n    assertU(commit());\n\n    // true and false functions and constants\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:true(),f:false(),tt:{!func}true,ff:{!func}false\")\n        , \"/response/docs/[0]=={'t':true,'f':false,'tt':true,'ff':false}\");\n\n    // test that exists(query) depends on the query matching the document\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:exists(query($q1)),f:exists(query($q2))\", \"q1\",\"text:hello\", \"q2\",\"text:there\")\n        , \"/response/docs/[0]=={'t':true,'f':false}\");\n\n    // test if()\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a1:if(true,'A','B')\", \"fl\",\"b1:if(false,'A','B')\")\n        , \"/response/docs/[0]=={'a1':'A', 'b1':'B'}\");\n\n    // test boolean operators\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:and(true,true)\", \"fl\",\"f1:and(true,false)\", \"fl\",\"f2:and(false,true)\", \"fl\",\"f3:and(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 'f1':false, 'f2':false, 'f3':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:or(true,true)\", \"fl\",\"t2:or(true,false)\", \"fl\",\"t3:or(false,true)\", \"fl\",\"f1:or(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 't3':true, 'f1':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"f1:xor(true,true)\", \"fl\",\"t1:xor(true,false)\", \"fl\",\"t2:xor(false,true)\", \"fl\",\"f2:xor(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 'f1':false, 'f2':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:not(false),f:not(true)\")\n        , \"/response/docs/[0]=={'t':true, 'f':false}\");\n\n\n    // def(), the default function that returns the first value that exists\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(id,123.0), y:def(foo_f,234.0)\")\n        , \"/response/docs/[0]=={'x':1.0, 'y':234.0}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(foo_s,'Q'), y:def(missing_s,'W')\")\n        , \"/response/docs/[0]=={'x':'A', 'y':'W'}\");\n\n    // test constant conversion to boolean\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:not(0), b:not(1), c:not(0.0), d:not(1.1), e:not('A')\")\n        , \"/response/docs/[0]=={'a':true, 'b':false, 'c':true, 'd':false, 'e':false}\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testBooleanFunctions().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testBooleanFunctions().mjava","sourceNew":"    @Test\n  public void testBooleanFunctions() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\", \"foo_ti\", \"0\", \"foo_tl\",\"0\"));\n    assertU(adoc(\"id\", \"2\"                              , \"foo_ti\",\"10\", \"foo_tl\",\"11\"));\n    assertU(commit());\n\n    // true and false functions and constants\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:true(),f:false(),tt:{!func}true,ff:{!func}false\")\n        , \"/response/docs/[0]=={'t':true,'f':false,'tt':true,'ff':false}\");\n\n    // test that exists(query) depends on the query matching the document\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:exists(query($q1)),f:exists(query($q2))\", \"q1\",\"text:hello\", \"q2\",\"text:there\")\n        , \"/response/docs/[0]=={'t':true,'f':false}\");\n\n    // test if()\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a1:if(true,'A','B')\", \"fl\",\"b1:if(false,'A','B')\")\n        , \"/response/docs/[0]=={'a1':'A', 'b1':'B'}\");\n\n    // test boolean operators\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:and(true,true)\", \"fl\",\"f1:and(true,false)\", \"fl\",\"f2:and(false,true)\", \"fl\",\"f3:and(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 'f1':false, 'f2':false, 'f3':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:or(true,true)\", \"fl\",\"t2:or(true,false)\", \"fl\",\"t3:or(false,true)\", \"fl\",\"f1:or(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 't3':true, 'f1':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"f1:xor(true,true)\", \"fl\",\"t1:xor(true,false)\", \"fl\",\"t2:xor(false,true)\", \"fl\",\"f2:xor(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 'f1':false, 'f2':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:not(false),f:not(true)\")\n        , \"/response/docs/[0]=={'t':true, 'f':false}\");\n\n\n    // def(), the default function that returns the first value that exists\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(id,123.0), y:def(foo_f,234.0)\")\n        , \"/response/docs/[0]=={'x':1.0, 'y':234.0}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(foo_s,'Q'), y:def(missing_s,'W')\")\n        , \"/response/docs/[0]=={'x':'A', 'y':'W'}\");\n\n    // test constant conversion to boolean\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:not(0), b:not(1), c:not(0.0), d:not(1.1), e:not('A')\")\n        , \"/response/docs/[0]=={'a':true, 'b':false, 'c':true, 'd':false, 'e':false}\");\n\n  }\n\n","sourceOld":"    @Test\n  public void testBooleanFunctions() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"text\", \"hello\", \"foo_s\",\"A\", \"foo_ti\", \"0\", \"foo_tl\",\"0\"));\n    assertU(adoc(\"id\", \"2\"                              , \"foo_ti\",\"10\", \"foo_tl\",\"11\"));\n    assertU(commit());\n\n    // true and false functions and constants\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:true(),f:false(),tt:{!func}true,ff:{!func}false\")\n        , \"/response/docs/[0]=={'t':true,'f':false,'tt':true,'ff':false}\");\n\n    // test that exists(query) depends on the query matching the document\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:exists(query($q1)),f:exists(query($q2))\", \"q1\",\"text:hello\", \"q2\",\"text:there\")\n        , \"/response/docs/[0]=={'t':true,'f':false}\");\n\n    // test if()\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a1:if(true,'A','B')\", \"fl\",\"b1:if(false,'A','B')\")\n        , \"/response/docs/[0]=={'a1':'A', 'b1':'B'}\");\n\n    // test boolean operators\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:and(true,true)\", \"fl\",\"f1:and(true,false)\", \"fl\",\"f2:and(false,true)\", \"fl\",\"f3:and(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 'f1':false, 'f2':false, 'f3':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t1:or(true,true)\", \"fl\",\"t2:or(true,false)\", \"fl\",\"t3:or(false,true)\", \"fl\",\"f1:or(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 't3':true, 'f1':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"f1:xor(true,true)\", \"fl\",\"t1:xor(true,false)\", \"fl\",\"t2:xor(false,true)\", \"fl\",\"f2:xor(false,false)\")\n        , \"/response/docs/[0]=={'t1':true, 't2':true, 'f1':false, 'f2':false}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"t:not(false),f:not(true)\")\n        , \"/response/docs/[0]=={'t':true, 'f':false}\");\n\n\n    // def(), the default function that returns the first value that exists\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(id,123.0), y:def(foo_f,234.0)\")\n        , \"/response/docs/[0]=={'x':1.0, 'y':234.0}\");\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"x:def(foo_s,'Q'), y:def(missing_s,'W')\")\n        , \"/response/docs/[0]=={'x':'A', 'y':'W'}\");\n\n    // test constant conversion to boolean\n    assertJQ(req(\"q\", \"id:1\", \"fl\", \"a:not(0), b:not(1), c:not(0.0), d:not(1.1), e:not('A')\")\n        , \"/response/docs/[0]=={'a':true, 'b':false, 'c':true, 'd':false, 'e':false}\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"80f6925d29ae169407185d52267ba1969126e1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["1e7c99bd45fa88a3d93a03fdd773053bef72268e"],"c26f00b574427b55127e869b935845554afde1fa":["80f6925d29ae169407185d52267ba1969126e1e2","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["80f6925d29ae169407185d52267ba1969126e1e2"],"c03daa6ddcb4768a702115ec63799cab5fff3d92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","80f6925d29ae169407185d52267ba1969126e1e2"],"1e7c99bd45fa88a3d93a03fdd773053bef72268e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","80f6925d29ae169407185d52267ba1969126e1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"80f6925d29ae169407185d52267ba1969126e1e2":["c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","c03daa6ddcb4768a702115ec63799cab5fff3d92","1e7c99bd45fa88a3d93a03fdd773053bef72268e"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["80f6925d29ae169407185d52267ba1969126e1e2","c03daa6ddcb4768a702115ec63799cab5fff3d92","1e7c99bd45fa88a3d93a03fdd773053bef72268e"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"c03daa6ddcb4768a702115ec63799cab5fff3d92":[],"1e7c99bd45fa88a3d93a03fdd773053bef72268e":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","c03daa6ddcb4768a702115ec63799cab5fff3d92","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}