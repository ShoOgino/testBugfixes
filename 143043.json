{"path":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#addTermFrequencies(Map[String,Map[String,Int]],Terms,String).mjava","commits":[{"id":"e562682007e295029696e354ac6947531b083c79","date":1459152450,"type":1,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#addTermFrequencies(Map[String,Map[String,Int]],Terms,String).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#addTermFrequencies(Map[String,Int],Terms).mjava","sourceNew":"  /**\n   * Adds terms and frequencies found in vector into the Map termFreqMap\n   *\n   * @param field2termFreqMap a Map of terms and their frequencies per field\n   * @param vector List of terms and their frequencies for a doc/field\n   */\n  private void addTermFrequencies(Map<String, Map<String, Int>> field2termFreqMap, Terms vector, String fieldName) throws IOException {\n    Map<String, Int> termFreqMap = field2termFreqMap.get(fieldName);\n    if (termFreqMap == null) {\n      termFreqMap = new HashMap<>();\n      field2termFreqMap.put(fieldName, termFreqMap);\n    }\n    final TermsEnum termsEnum = vector.iterator();\n    final CharsRefBuilder spare = new CharsRefBuilder();\n    BytesRef text;\n    while((text = termsEnum.next()) != null) {\n      spare.copyUTF8Bytes(text);\n      final String term = spare.toString();\n      if (isNoiseWord(term)) {\n        continue;\n      }\n      final int freq = (int) termsEnum.totalTermFreq();\n\n      // increment frequency\n      Int cnt = termFreqMap.get(term);\n      if (cnt == null) {\n        cnt = new Int();\n        termFreqMap.put(term, cnt);\n        cnt.x = freq;\n      } else {\n        cnt.x += freq;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds terms and frequencies found in vector into the Map termFreqMap\n   *\n   * @param termFreqMap a Map of terms and their frequencies\n   * @param vector List of terms and their frequencies for a doc/field\n   */\n  private void addTermFrequencies(Map<String, Int> termFreqMap, Terms vector) throws IOException {\n    final TermsEnum termsEnum = vector.iterator();\n    final CharsRefBuilder spare = new CharsRefBuilder();\n    BytesRef text;\n    while((text = termsEnum.next()) != null) {\n      spare.copyUTF8Bytes(text);\n      final String term = spare.toString();\n      if (isNoiseWord(term)) {\n        continue;\n      }\n      final int freq = (int) termsEnum.totalTermFreq();\n\n      // increment frequency\n      Int cnt = termFreqMap.get(term);\n      if (cnt == null) {\n        cnt = new Int();\n        termFreqMap.put(term, cnt);\n        cnt.x = freq;\n      } else {\n        cnt.x += freq;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a2ec5c4aea62b49cb9b5986524f8aee431470a3","date":1506692092,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#addTermFrequencies(Map[String,Map[String,Int]],Terms,String).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#addTermFrequencies(Map[String,Map[String,Int]],Terms,String).mjava","sourceNew":"  /**\n   * Adds terms and frequencies found in vector into the Map termFreqMap\n   *\n   * @param field2termFreqMap a Map of terms and their frequencies per field\n   * @param vector List of terms and their frequencies for a doc/field\n   */\n  private void addTermFrequencies(Map<String, Map<String, Int>> field2termFreqMap, Terms vector, String fieldName) throws IOException {\n    Map<String, Int> termFreqMap = field2termFreqMap.computeIfAbsent(fieldName, k -> new HashMap<>());\n    final TermsEnum termsEnum = vector.iterator();\n    final CharsRefBuilder spare = new CharsRefBuilder();\n    BytesRef text;\n    while((text = termsEnum.next()) != null) {\n      spare.copyUTF8Bytes(text);\n      final String term = spare.toString();\n      if (isNoiseWord(term)) {\n        continue;\n      }\n      final int freq = (int) termsEnum.totalTermFreq();\n\n      // increment frequency\n      Int cnt = termFreqMap.get(term);\n      if (cnt == null) {\n        cnt = new Int();\n        termFreqMap.put(term, cnt);\n        cnt.x = freq;\n      } else {\n        cnt.x += freq;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds terms and frequencies found in vector into the Map termFreqMap\n   *\n   * @param field2termFreqMap a Map of terms and their frequencies per field\n   * @param vector List of terms and their frequencies for a doc/field\n   */\n  private void addTermFrequencies(Map<String, Map<String, Int>> field2termFreqMap, Terms vector, String fieldName) throws IOException {\n    Map<String, Int> termFreqMap = field2termFreqMap.get(fieldName);\n    if (termFreqMap == null) {\n      termFreqMap = new HashMap<>();\n      field2termFreqMap.put(fieldName, termFreqMap);\n    }\n    final TermsEnum termsEnum = vector.iterator();\n    final CharsRefBuilder spare = new CharsRefBuilder();\n    BytesRef text;\n    while((text = termsEnum.next()) != null) {\n      spare.copyUTF8Bytes(text);\n      final String term = spare.toString();\n      if (isNoiseWord(term)) {\n        continue;\n      }\n      final int freq = (int) termsEnum.totalTermFreq();\n\n      // increment frequency\n      Int cnt = termFreqMap.get(term);\n      if (cnt == null) {\n        cnt = new Int();\n        termFreqMap.put(term, cnt);\n        cnt.x = freq;\n      } else {\n        cnt.x += freq;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#addTermFrequencies(Map[String,Map[String,Int]],Terms,String).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#addTermFrequencies(Map[String,Map[String,Int]],Terms,String).mjava","sourceNew":"  /**\n   * Adds terms and frequencies found in vector into the Map termFreqMap\n   *\n   * @param field2termFreqMap a Map of terms and their frequencies per field\n   * @param vector List of terms and their frequencies for a doc/field\n   */\n  private void addTermFrequencies(Map<String, Map<String, Int>> field2termFreqMap, Terms vector, String fieldName) throws IOException {\n    Map<String, Int> termFreqMap = field2termFreqMap.computeIfAbsent(fieldName, k -> new HashMap<>());\n    final TermsEnum termsEnum = vector.iterator();\n    final CharsRefBuilder spare = new CharsRefBuilder();\n    BytesRef text;\n    while((text = termsEnum.next()) != null) {\n      spare.copyUTF8Bytes(text);\n      final String term = spare.toString();\n      if (isNoiseWord(term)) {\n        continue;\n      }\n      final int freq = (int) termsEnum.totalTermFreq();\n\n      // increment frequency\n      Int cnt = termFreqMap.get(term);\n      if (cnt == null) {\n        cnt = new Int();\n        termFreqMap.put(term, cnt);\n        cnt.x = freq;\n      } else {\n        cnt.x += freq;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds terms and frequencies found in vector into the Map termFreqMap\n   *\n   * @param field2termFreqMap a Map of terms and their frequencies per field\n   * @param vector List of terms and their frequencies for a doc/field\n   */\n  private void addTermFrequencies(Map<String, Map<String, Int>> field2termFreqMap, Terms vector, String fieldName) throws IOException {\n    Map<String, Int> termFreqMap = field2termFreqMap.get(fieldName);\n    if (termFreqMap == null) {\n      termFreqMap = new HashMap<>();\n      field2termFreqMap.put(fieldName, termFreqMap);\n    }\n    final TermsEnum termsEnum = vector.iterator();\n    final CharsRefBuilder spare = new CharsRefBuilder();\n    BytesRef text;\n    while((text = termsEnum.next()) != null) {\n      spare.copyUTF8Bytes(text);\n      final String term = spare.toString();\n      if (isNoiseWord(term)) {\n        continue;\n      }\n      final int freq = (int) termsEnum.totalTermFreq();\n\n      // increment frequency\n      Int cnt = termFreqMap.get(term);\n      if (cnt == null) {\n        cnt = new Int();\n        termFreqMap.put(term, cnt);\n        cnt.x = freq;\n      } else {\n        cnt.x += freq;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6240b74b884c5587f2a4062dd27d6c32bf228889":["e562682007e295029696e354ac6947531b083c79","6a2ec5c4aea62b49cb9b5986524f8aee431470a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6a2ec5c4aea62b49cb9b5986524f8aee431470a3":["e562682007e295029696e354ac6947531b083c79"],"e562682007e295029696e354ac6947531b083c79":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6a2ec5c4aea62b49cb9b5986524f8aee431470a3"]},"commit2Childs":{"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e562682007e295029696e354ac6947531b083c79"],"6a2ec5c4aea62b49cb9b5986524f8aee431470a3":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e562682007e295029696e354ac6947531b083c79":["6240b74b884c5587f2a4062dd27d6c32bf228889","6a2ec5c4aea62b49cb9b5986524f8aee431470a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}