{"path":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/BreakIteratorBoundaryScannerTest#testLineBoundary().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/BreakIteratorBoundaryScannerTest#testLineBoundary().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/BreakIteratorBoundaryScannerTest#testLineBoundary().mjava","sourceNew":"  public void testLineBoundary() throws Exception {\n    StringBuilder text = new StringBuilder(TEXT);\n    BreakIterator bi = BreakIterator.getLineInstance();\n    BoundaryScanner scanner = new BreakIteratorBoundaryScanner(bi);\n    \n    int start = TEXT.indexOf(\"any application\");\n    int expected = TEXT.indexOf(\"nearly\");\n    testFindStartOffset(text, start, expected, scanner);\n\n    expected = TEXT.indexOf(\"application that requires\");\n    testFindEndOffset(text, start, expected, scanner);\n  }\n\n","sourceOld":"  public void testLineBoundary() throws Exception {\n    StringBuilder text = new StringBuilder(TEXT);\n    BreakIterator bi = BreakIterator.getLineInstance();\n    BoundaryScanner scanner = new BreakIteratorBoundaryScanner(bi);\n    \n    int start = TEXT.indexOf(\"any application\");\n    int expected = TEXT.indexOf(\"nearly\");\n    testFindStartOffset(text, start, expected, scanner);\n\n    expected = TEXT.indexOf(\"application that requires\");\n    testFindEndOffset(text, start, expected, scanner);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2b76edbed7b2d5a7680e7121e75ab2abca3c0ee","date":1341757467,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/BreakIteratorBoundaryScannerTest#testLineBoundary().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/BreakIteratorBoundaryScannerTest#testLineBoundary().mjava","sourceNew":"  public void testLineBoundary() throws Exception {\n    StringBuilder text = new StringBuilder(TEXT);\n    // we test this with default locale, its randomized by LuceneTestCase\n    BreakIterator bi = BreakIterator.getLineInstance(Locale.getDefault());\n    BoundaryScanner scanner = new BreakIteratorBoundaryScanner(bi);\n    \n    int start = TEXT.indexOf(\"any application\");\n    int expected = TEXT.indexOf(\"nearly\");\n    testFindStartOffset(text, start, expected, scanner);\n\n    expected = TEXT.indexOf(\"application that requires\");\n    testFindEndOffset(text, start, expected, scanner);\n  }\n\n","sourceOld":"  public void testLineBoundary() throws Exception {\n    StringBuilder text = new StringBuilder(TEXT);\n    BreakIterator bi = BreakIterator.getLineInstance();\n    BoundaryScanner scanner = new BreakIteratorBoundaryScanner(bi);\n    \n    int start = TEXT.indexOf(\"any application\");\n    int expected = TEXT.indexOf(\"nearly\");\n    testFindStartOffset(text, start, expected, scanner);\n\n    expected = TEXT.indexOf(\"application that requires\");\n    testFindEndOffset(text, start, expected, scanner);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/BreakIteratorBoundaryScannerTest#testLineBoundary().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/BreakIteratorBoundaryScannerTest#testLineBoundary().mjava","sourceNew":"  public void testLineBoundary() throws Exception {\n    StringBuilder text = new StringBuilder(TEXT);\n    // we test this with default locale, its randomized by LuceneTestCase\n    BreakIterator bi = BreakIterator.getLineInstance(Locale.getDefault());\n    BoundaryScanner scanner = new BreakIteratorBoundaryScanner(bi);\n    \n    int start = TEXT.indexOf(\"any application\");\n    int expected = TEXT.indexOf(\"nearly\");\n    testFindStartOffset(text, start, expected, scanner);\n\n    expected = TEXT.indexOf(\"application that requires\");\n    testFindEndOffset(text, start, expected, scanner);\n  }\n\n","sourceOld":"  public void testLineBoundary() throws Exception {\n    StringBuilder text = new StringBuilder(TEXT);\n    BreakIterator bi = BreakIterator.getLineInstance();\n    BoundaryScanner scanner = new BreakIteratorBoundaryScanner(bi);\n    \n    int start = TEXT.indexOf(\"any application\");\n    int expected = TEXT.indexOf(\"nearly\");\n    testFindStartOffset(text, start, expected, scanner);\n\n    expected = TEXT.indexOf(\"application that requires\");\n    testFindEndOffset(text, start, expected, scanner);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/BreakIteratorBoundaryScannerTest#testLineBoundary().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/BreakIteratorBoundaryScannerTest#testLineBoundary().mjava","sourceNew":"  public void testLineBoundary() throws Exception {\n    StringBuilder text = new StringBuilder(TEXT);\n    // we test this with default locale, its randomized by LuceneTestCase\n    BreakIterator bi = BreakIterator.getLineInstance(Locale.getDefault());\n    BoundaryScanner scanner = new BreakIteratorBoundaryScanner(bi);\n    \n    int start = TEXT.indexOf(\"any application\");\n    int expected = TEXT.indexOf(\"nearly\");\n    testFindStartOffset(text, start, expected, scanner);\n\n    expected = TEXT.indexOf(\"application that requires\");\n    testFindEndOffset(text, start, expected, scanner);\n  }\n\n","sourceOld":"  public void testLineBoundary() throws Exception {\n    StringBuilder text = new StringBuilder(TEXT);\n    BreakIterator bi = BreakIterator.getLineInstance();\n    BoundaryScanner scanner = new BreakIteratorBoundaryScanner(bi);\n    \n    int start = TEXT.indexOf(\"any application\");\n    int expected = TEXT.indexOf(\"nearly\");\n    testFindStartOffset(text, start, expected, scanner);\n\n    expected = TEXT.indexOf(\"application that requires\");\n    testFindEndOffset(text, start, expected, scanner);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/BreakIteratorBoundaryScannerTest#testLineBoundary().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/BreakIteratorBoundaryScannerTest#testLineBoundary().mjava","sourceNew":"  public void testLineBoundary() throws Exception {\n    StringBuilder text = new StringBuilder(TEXT);\n    // we test this with default locale, its randomized by LuceneTestCase\n    BreakIterator bi = BreakIterator.getLineInstance(Locale.getDefault());\n    BoundaryScanner scanner = new BreakIteratorBoundaryScanner(bi);\n    \n    int start = TEXT.indexOf(\"any application\");\n    int expected = TEXT.indexOf(\"nearly\");\n    testFindStartOffset(text, start, expected, scanner);\n\n    expected = TEXT.indexOf(\"application that requires\");\n    testFindEndOffset(text, start, expected, scanner);\n  }\n\n","sourceOld":"  public void testLineBoundary() throws Exception {\n    StringBuilder text = new StringBuilder(TEXT);\n    BreakIterator bi = BreakIterator.getLineInstance();\n    BoundaryScanner scanner = new BreakIteratorBoundaryScanner(bi);\n    \n    int start = TEXT.indexOf(\"any application\");\n    int expected = TEXT.indexOf(\"nearly\");\n    testFindStartOffset(text, start, expected, scanner);\n\n    expected = TEXT.indexOf(\"application that requires\");\n    testFindEndOffset(text, start, expected, scanner);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/BreakIteratorBoundaryScannerTest#testLineBoundary().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/BreakIteratorBoundaryScannerTest#testLineBoundary().mjava","sourceNew":"  public void testLineBoundary() throws Exception {\n    StringBuilder text = new StringBuilder(TEXT);\n    // we test this with default locale, it's randomized by LuceneTestCase\n    BreakIterator bi = BreakIterator.getLineInstance(Locale.getDefault());\n    BoundaryScanner scanner = new BreakIteratorBoundaryScanner(bi);\n    \n    int start = TEXT.indexOf(\"any application\");\n    int expected = TEXT.indexOf(\"nearly\");\n    testFindStartOffset(text, start, expected, scanner);\n\n    expected = TEXT.indexOf(\"application that requires\");\n    testFindEndOffset(text, start, expected, scanner);\n  }\n\n","sourceOld":"  public void testLineBoundary() throws Exception {\n    StringBuilder text = new StringBuilder(TEXT);\n    // we test this with default locale, its randomized by LuceneTestCase\n    BreakIterator bi = BreakIterator.getLineInstance(Locale.getDefault());\n    BoundaryScanner scanner = new BreakIteratorBoundaryScanner(bi);\n    \n    int start = TEXT.indexOf(\"any application\");\n    int expected = TEXT.indexOf(\"nearly\");\n    testFindStartOffset(text, start, expected, scanner);\n\n    expected = TEXT.indexOf(\"application that requires\");\n    testFindEndOffset(text, start, expected, scanner);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e2b76edbed7b2d5a7680e7121e75ab2abca3c0ee":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["2acf500f78aa12b92e371fd89c719291986b6b90"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2acf500f78aa12b92e371fd89c719291986b6b90":["b89678825b68eccaf09e6ab71675fc0b0af1e099","e2b76edbed7b2d5a7680e7121e75ab2abca3c0ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"46d8ada1fff8d18cb197c38c7983225162599948":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"e2b76edbed7b2d5a7680e7121e75ab2abca3c0ee":["2acf500f78aa12b92e371fd89c719291986b6b90"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e2b76edbed7b2d5a7680e7121e75ab2abca3c0ee","fe33227f6805edab2036cbb80645cc4e2d1fa424","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2acf500f78aa12b92e371fd89c719291986b6b90":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","fe33227f6805edab2036cbb80645cc4e2d1fa424","46d8ada1fff8d18cb197c38c7983225162599948"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}