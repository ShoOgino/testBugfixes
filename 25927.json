{"path":"lucene/src/java/org/apache/lucene/search/FieldCacheDocIdSet#iterator().mjava","commits":[{"id":"d55536a3153c541924af58559781c36228d25420","date":1322184113,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheDocIdSet#iterator().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public final DocIdSetIterator iterator() throws IOException {\n    if (acceptDocs == null) {\n      // Specialization optimization disregard acceptDocs\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!matchDoc(doc));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n      };\n    } else if (acceptDocs instanceof FixedBitSet || acceptDocs instanceof OpenBitSet) {\n      // special case for FixedBitSet / OpenBitSet: use the iterator and filter it\n      // (used e.g. when Filters are chained by FilteredQuery)\n      return new FilteredDocIdSetIterator(((DocIdSet) acceptDocs).iterator()) {\n        @Override\n        protected boolean match(int doc) {\n          return FieldCacheDocIdSet.this.matchDoc(doc);\n        }\n      };\n    } else {\n      // Stupid consultation of acceptDocs and matchDoc()\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!acceptDocs.get(doc) || !matchDoc(doc));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (acceptDocs.get(doc) && matchDoc(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n      };\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"383c8043f3934f08218f21baad3193e1cc108c3b","date":1322227712,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheDocIdSet#iterator().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheDocIdSet#iterator().mjava","sourceNew":"  @Override\n  public final DocIdSetIterator iterator() throws IOException {\n    if (acceptDocs == null) {\n      // Specialization optimization disregard acceptDocs\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!matchDoc(doc));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n      };\n    } else if (acceptDocs instanceof FixedBitSet || acceptDocs instanceof OpenBitSet) {\n      // special case for FixedBitSet / OpenBitSet: use the iterator and filter it\n      // (used e.g. when Filters are chained by FilteredQuery)\n      return new FilteredDocIdSetIterator(((DocIdSet) acceptDocs).iterator()) {\n        @Override\n        protected boolean match(int doc) {\n          return FieldCacheDocIdSet.this.matchDoc(doc);\n        }\n      };\n    } else {\n      // Stupid consultation of acceptDocs and matchDoc()\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!(matchDoc(doc) && acceptDocs.get(doc)));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc) && acceptDocs.get(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public final DocIdSetIterator iterator() throws IOException {\n    if (acceptDocs == null) {\n      // Specialization optimization disregard acceptDocs\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!matchDoc(doc));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n      };\n    } else if (acceptDocs instanceof FixedBitSet || acceptDocs instanceof OpenBitSet) {\n      // special case for FixedBitSet / OpenBitSet: use the iterator and filter it\n      // (used e.g. when Filters are chained by FilteredQuery)\n      return new FilteredDocIdSetIterator(((DocIdSet) acceptDocs).iterator()) {\n        @Override\n        protected boolean match(int doc) {\n          return FieldCacheDocIdSet.this.matchDoc(doc);\n        }\n      };\n    } else {\n      // Stupid consultation of acceptDocs and matchDoc()\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!acceptDocs.get(doc) || !matchDoc(doc));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (acceptDocs.get(doc) && matchDoc(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheDocIdSet#iterator().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheDocIdSet#iterator().mjava","sourceNew":"  @Override\n  public final DocIdSetIterator iterator() throws IOException {\n    if (acceptDocs == null) {\n      // Specialization optimization disregard acceptDocs\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!matchDoc(doc));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n      };\n    } else if (acceptDocs instanceof FixedBitSet || acceptDocs instanceof OpenBitSet) {\n      // special case for FixedBitSet / OpenBitSet: use the iterator and filter it\n      // (used e.g. when Filters are chained by FilteredQuery)\n      return new FilteredDocIdSetIterator(((DocIdSet) acceptDocs).iterator()) {\n        @Override\n        protected boolean match(int doc) {\n          return FieldCacheDocIdSet.this.matchDoc(doc);\n        }\n      };\n    } else {\n      // Stupid consultation of acceptDocs and matchDoc()\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!(matchDoc(doc) && acceptDocs.get(doc)));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc) && acceptDocs.get(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public final DocIdSetIterator iterator() throws IOException {\n    if (acceptDocs == null) {\n      // Specialization optimization disregard acceptDocs\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!matchDoc(doc));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n      };\n    } else if (acceptDocs instanceof FixedBitSet || acceptDocs instanceof OpenBitSet) {\n      // special case for FixedBitSet / OpenBitSet: use the iterator and filter it\n      // (used e.g. when Filters are chained by FilteredQuery)\n      return new FilteredDocIdSetIterator(((DocIdSet) acceptDocs).iterator()) {\n        @Override\n        protected boolean match(int doc) {\n          return FieldCacheDocIdSet.this.matchDoc(doc);\n        }\n      };\n    } else {\n      // Stupid consultation of acceptDocs and matchDoc()\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!(matchDoc(doc) && acceptDocs.get(doc)));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc) && acceptDocs.get(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"383c8043f3934f08218f21baad3193e1cc108c3b":["d55536a3153c541924af58559781c36228d25420"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["383c8043f3934f08218f21baad3193e1cc108c3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d55536a3153c541924af58559781c36228d25420":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"383c8043f3934f08218f21baad3193e1cc108c3b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d55536a3153c541924af58559781c36228d25420"],"d55536a3153c541924af58559781c36228d25420":["383c8043f3934f08218f21baad3193e1cc108c3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}