{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicAutomata#makeStringLight(int[],int,int).mjava","commits":[{"id":"75ac8571c2d82c574e446c3729251b994c69a55c","date":1402523781,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicAutomata#makeStringLight(int[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  public static LightAutomaton makeStringLight(int[] word, int offset, int length) {\n    LightAutomaton a = new LightAutomaton();\n    a.createState();\n    int s = 0;\n    for (int i = offset; i < offset+length; i++) {\n      int s2 = a.createState();\n      a.addTransition(s, s2, word[i]);\n      s = s2;\n    }\n    a.setAccept(s, true);\n    a.finish();\n\n    return a;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicAutomata#makeStringLight(int[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicAutomata#makeStringLight(int[],int,int).mjava","sourceNew":"  /**\n   * Returns a new (deterministic) automaton that accepts the single given\n   * string from the specified unicode code points.\n   */\n  public static LightAutomaton makeStringLight(int[] word, int offset, int length) {\n    LightAutomaton a = new LightAutomaton();\n    a.createState();\n    int s = 0;\n    for (int i = offset; i < offset+length; i++) {\n      int s2 = a.createState();\n      a.addTransition(s, s2, word[i]);\n      s = s2;\n    }\n    a.setAccept(s, true);\n    a.finish();\n\n    return a;\n  }\n\n","sourceOld":"  public static LightAutomaton makeStringLight(int[] word, int offset, int length) {\n    LightAutomaton a = new LightAutomaton();\n    a.createState();\n    int s = 0;\n    for (int i = offset; i < offset+length; i++) {\n      int s2 = a.createState();\n      a.addTransition(s, s2, word[i]);\n      s = s2;\n    }\n    a.setAccept(s, true);\n    a.finish();\n\n    return a;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9","date":1402946522,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicAutomata#makeStringLight(int[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicAutomata#makeStringLight(int[],int,int).mjava","sourceNew":"  /**\n   * Returns a new (deterministic) automaton that accepts the single given\n   * string from the specified unicode code points.\n   */\n  public static LightAutomaton makeStringLight(int[] word, int offset, int length) {\n    LightAutomaton a = new LightAutomaton();\n    a.createState();\n    int s = 0;\n    for (int i = offset; i < offset+length; i++) {\n      int s2 = a.createState();\n      a.addTransition(s, s2, word[i]);\n      s = s2;\n    }\n    a.setAccept(s, true);\n    a.finishState();\n\n    return a;\n  }\n\n","sourceOld":"  /**\n   * Returns a new (deterministic) automaton that accepts the single given\n   * string from the specified unicode code points.\n   */\n  public static LightAutomaton makeStringLight(int[] word, int offset, int length) {\n    LightAutomaton a = new LightAutomaton();\n    a.createState();\n    int s = 0;\n    for (int i = offset; i < offset+length; i++) {\n      int s2 = a.createState();\n      a.addTransition(s, s2, word[i]);\n      s = s2;\n    }\n    a.setAccept(s, true);\n    a.finish();\n\n    return a;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automata#makeString(int[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicAutomata#makeStringLight(int[],int,int).mjava","sourceNew":"  /**\n   * Returns a new (deterministic) automaton that accepts the single given\n   * string from the specified unicode code points.\n   */\n  public static Automaton makeString(int[] word, int offset, int length) {\n    Automaton a = new Automaton();\n    a.createState();\n    int s = 0;\n    for (int i = offset; i < offset+length; i++) {\n      int s2 = a.createState();\n      a.addTransition(s, s2, word[i]);\n      s = s2;\n    }\n    a.setAccept(s, true);\n    a.finishState();\n\n    return a;\n  }\n\n","sourceOld":"  /**\n   * Returns a new (deterministic) automaton that accepts the single given\n   * string from the specified unicode code points.\n   */\n  public static LightAutomaton makeStringLight(int[] word, int offset, int length) {\n    LightAutomaton a = new LightAutomaton();\n    a.createState();\n    int s = 0;\n    for (int i = offset; i < offset+length; i++) {\n      int s2 = a.createState();\n      a.addTransition(s, s2, word[i]);\n      s = s2;\n    }\n    a.setAccept(s, true);\n    a.finishState();\n\n    return a;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"75ac8571c2d82c574e446c3729251b994c69a55c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["75ac8571c2d82c574e446c3729251b994c69a55c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"75ac8571c2d82c574e446c3729251b994c69a55c":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["75ac8571c2d82c574e446c3729251b994c69a55c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}