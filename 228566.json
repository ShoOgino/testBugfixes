{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.CollectionsChildWatcher#refreshAndWatch().mjava","commits":[{"id":"8bf04c3f77a2936f29948b9c0dd215d82d43f5cf","date":1440482195,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.CollectionsChildWatcher#refreshAndWatch().mjava","pathOld":"/dev/null","sourceNew":"    /** Must hold {@link #getUpdateLock()} before calling this method. */\n    public void refreshAndWatch() {\n      try {\n        refreshCollectionList(this);\n      } catch (KeeperException e) {\n        if (e.code() == KeeperException.Code.SESSIONEXPIRED\n            || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n          log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n          return;\n        }\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.warn(\"\", e);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7477015ee104ad8144fba06b9b0a8ea93aea50f8","date":1450790907,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.CollectionsChildWatcher#refreshAndWatch().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.CollectionsChildWatcher#refreshAndWatch().mjava","sourceNew":"    /** Must hold {@link #getUpdateLock()} before calling this method. */\n    public void refreshAndWatch() {\n      try {\n        refreshCollectionList(this);\n      } catch (KeeperException.SessionExpiredException | KeeperException.ConnectionLossException e) {\n        LOG.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n      } catch (KeeperException e) {\n        LOG.error(\"A ZK error has occurred\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"A ZK error has occurred\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        LOG.warn(\"Interrupted\", e);\n      }\n    }\n\n","sourceOld":"    /** Must hold {@link #getUpdateLock()} before calling this method. */\n    public void refreshAndWatch() {\n      try {\n        refreshCollectionList(this);\n      } catch (KeeperException e) {\n        if (e.code() == KeeperException.Code.SESSIONEXPIRED\n            || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n          log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n          return;\n        }\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.warn(\"\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.CollectionsChildWatcher#refreshAndWatch().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.CollectionsChildWatcher#refreshAndWatch().mjava","sourceNew":"    /** Must hold {@link #getUpdateLock()} before calling this method. */\n    public void refreshAndWatch() {\n      try {\n        refreshCollectionList(this);\n      } catch (KeeperException.SessionExpiredException | KeeperException.ConnectionLossException e) {\n        log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n      } catch (KeeperException e) {\n        log.error(\"A ZK error has occurred\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"A ZK error has occurred\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.warn(\"Interrupted\", e);\n      }\n    }\n\n","sourceOld":"    /** Must hold {@link #getUpdateLock()} before calling this method. */\n    public void refreshAndWatch() {\n      try {\n        refreshCollectionList(this);\n      } catch (KeeperException.SessionExpiredException | KeeperException.ConnectionLossException e) {\n        LOG.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n      } catch (KeeperException e) {\n        LOG.error(\"A ZK error has occurred\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"A ZK error has occurred\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        LOG.warn(\"Interrupted\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.CollectionsChildWatcher#refreshAndWatch().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.CollectionsChildWatcher#refreshAndWatch().mjava","sourceNew":"    /**\n     * Must hold {@link #getUpdateLock()} before calling this method.\n     */\n    public void refreshAndWatch() {\n      try {\n        refreshCollectionList(this);\n      } catch (KeeperException.SessionExpiredException | KeeperException.ConnectionLossException e) {\n        log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n      } catch (KeeperException e) {\n        log.error(\"A ZK error has occurred\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"A ZK error has occurred\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.warn(\"Interrupted\", e);\n      }\n    }\n\n","sourceOld":"    /** Must hold {@link #getUpdateLock()} before calling this method. */\n    public void refreshAndWatch() {\n      try {\n        refreshCollectionList(this);\n      } catch (KeeperException.SessionExpiredException | KeeperException.ConnectionLossException e) {\n        log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n      } catch (KeeperException e) {\n        log.error(\"A ZK error has occurred\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"A ZK error has occurred\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.warn(\"Interrupted\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57c238f5fb83803b49b37b3a1a12224a64d47542","date":1593655679,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.CollectionsChildWatcher#refreshAndWatch().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.CollectionsChildWatcher#refreshAndWatch().mjava","sourceNew":"    /**\n     * Must hold {@link #getUpdateLock()} before calling this method.\n     */\n    public void refreshAndWatch() {\n      try {\n        refreshCollectionList(this);\n      } catch (KeeperException.SessionExpiredException | KeeperException.ConnectionLossException e) {\n        log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: \", e);\n      } catch (KeeperException e) {\n        log.error(\"A ZK error has occurred\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"A ZK error has occurred\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.warn(\"Interrupted\", e);\n      }\n    }\n\n","sourceOld":"    /**\n     * Must hold {@link #getUpdateLock()} before calling this method.\n     */\n    public void refreshAndWatch() {\n      try {\n        refreshCollectionList(this);\n      } catch (KeeperException.SessionExpiredException | KeeperException.ConnectionLossException e) {\n        log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n      } catch (KeeperException e) {\n        log.error(\"A ZK error has occurred\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"A ZK error has occurred\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.warn(\"Interrupted\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2668c99990e4c94a78bac005aa682b7c5986d23a":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57c238f5fb83803b49b37b3a1a12224a64d47542":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"8bf04c3f77a2936f29948b9c0dd215d82d43f5cf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7477015ee104ad8144fba06b9b0a8ea93aea50f8":["8bf04c3f77a2936f29948b9c0dd215d82d43f5cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57c238f5fb83803b49b37b3a1a12224a64d47542"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["7477015ee104ad8144fba06b9b0a8ea93aea50f8"]},"commit2Childs":{"2668c99990e4c94a78bac005aa682b7c5986d23a":["57c238f5fb83803b49b37b3a1a12224a64d47542"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8bf04c3f77a2936f29948b9c0dd215d82d43f5cf"],"57c238f5fb83803b49b37b3a1a12224a64d47542":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8bf04c3f77a2936f29948b9c0dd215d82d43f5cf":["7477015ee104ad8144fba06b9b0a8ea93aea50f8"],"7477015ee104ad8144fba06b9b0a8ea93aea50f8":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}