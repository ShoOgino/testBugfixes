{"path":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#getChildren(long).mjava","commits":[{"id":"0ada2a0b40c19e896a9d20355e13cae9601c251c","date":1407460596,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#getChildren(long).mjava","pathOld":"/dev/null","sourceNew":"  private TreeMap<Long, String> getChildren(long wait) throws InterruptedException, KeeperException\n  {\n    LatchChildWatcher watcher = childrenWatcher;\n    TreeMap<Long,String> children = new TreeMap<> ();\n    if (watcher == null ||  watcher.getWatchedEvent() != null) {\n      watcher = new LatchChildWatcher();\n      while (true) {\n        try {\n          children = orderedChildren(watcher);\n          break;\n        } catch (KeeperException.NoNodeException e) {\n          zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);\n          // go back to the loop and try again\n        }\n      }\n      childrenWatcher = watcher;\n    }\n\n    while (true) {\n      if (!children.isEmpty()) break;\n      watcher.await(wait == Long.MAX_VALUE ? DEFAULT_TIMEOUT : wait);\n      if (watcher.getWatchedEvent() != null) {\n        children = orderedChildren(null);\n      }\n      if (wait != Long.MAX_VALUE) break;\n    }\n    return children;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["aa7843ca6910809c5d95c44205d1b78ebee893da","3f1a0016e65424cb251992c72022616d73753b7e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aa7843ca6910809c5d95c44205d1b78ebee893da","date":1407507547,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#getChildren(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#getChildren(long).mjava","sourceNew":"  private Map<Long, String> getChildren(long wait) throws InterruptedException, KeeperException\n  {\n    LatchChildWatcher watcher;\n    TreeMap<Long,String> children;\n    synchronized (childrenWatcherLock) {\n      watcher = childrenWatcher;\n      children = fetchedChildren;\n    }\n\n    if (watcher == null ||  watcher.getWatchedEvent() != null) {\n      watcher = new LatchChildWatcher();\n      while (true) {\n        try {\n          children = orderedChildren(watcher);\n          break;\n        } catch (KeeperException.NoNodeException e) {\n          zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);\n          // go back to the loop and try again\n        }\n      }\n      synchronized (childrenWatcherLock) {\n        childrenWatcher = watcher;\n        fetchedChildren = children;\n      }\n    }\n\n    while (true) {\n      if (!children.isEmpty()) break;\n      watcher.await(wait == Long.MAX_VALUE ? DEFAULT_TIMEOUT : wait);\n      if (watcher.getWatchedEvent() != null) {\n        children = orderedChildren(null);\n      }\n      if (wait != Long.MAX_VALUE) break;\n    }\n    return Collections.unmodifiableMap(children);\n  }\n\n","sourceOld":"  private TreeMap<Long, String> getChildren(long wait) throws InterruptedException, KeeperException\n  {\n    LatchChildWatcher watcher = childrenWatcher;\n    TreeMap<Long,String> children = new TreeMap<> ();\n    if (watcher == null ||  watcher.getWatchedEvent() != null) {\n      watcher = new LatchChildWatcher();\n      while (true) {\n        try {\n          children = orderedChildren(watcher);\n          break;\n        } catch (KeeperException.NoNodeException e) {\n          zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);\n          // go back to the loop and try again\n        }\n      }\n      childrenWatcher = watcher;\n    }\n\n    while (true) {\n      if (!children.isEmpty()) break;\n      watcher.await(wait == Long.MAX_VALUE ? DEFAULT_TIMEOUT : wait);\n      if (watcher.getWatchedEvent() != null) {\n        children = orderedChildren(null);\n      }\n      if (wait != Long.MAX_VALUE) break;\n    }\n    return children;\n  }\n\n","bugFix":["0ada2a0b40c19e896a9d20355e13cae9601c251c"],"bugIntro":["3f1a0016e65424cb251992c72022616d73753b7e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c83f985d9828d30801541f1eed26aa3169646baf","date":1409315453,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#getChildren(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#getChildren(long).mjava","sourceNew":"  private Map<Long, String> getChildren(long wait) throws InterruptedException, KeeperException\n  {\n    LatchChildWatcher watcher;\n    TreeMap<Long,String> children;\n    synchronized (childrenWatcherLock) {\n      watcher = childrenWatcher;\n      children = fetchedChildren;\n    }\n\n    if (watcher == null ||  watcher.getWatchedEvent() != null) {\n      watcher = new LatchChildWatcher();\n      while (true) {\n        try {\n          children = orderedChildren(watcher);\n          break;\n        } catch (KeeperException.NoNodeException e) {\n          zookeeper.create(dir, new byte[0], CreateMode.PERSISTENT, true);\n          // go back to the loop and try again\n        }\n      }\n      synchronized (childrenWatcherLock) {\n        childrenWatcher = watcher;\n        fetchedChildren = children;\n      }\n    }\n\n    while (true) {\n      if (!children.isEmpty()) break;\n      watcher.await(wait == Long.MAX_VALUE ? DEFAULT_TIMEOUT : wait);\n      if (watcher.getWatchedEvent() != null) {\n        children = orderedChildren(null);\n      }\n      if (wait != Long.MAX_VALUE) break;\n    }\n    return Collections.unmodifiableMap(children);\n  }\n\n","sourceOld":"  private Map<Long, String> getChildren(long wait) throws InterruptedException, KeeperException\n  {\n    LatchChildWatcher watcher;\n    TreeMap<Long,String> children;\n    synchronized (childrenWatcherLock) {\n      watcher = childrenWatcher;\n      children = fetchedChildren;\n    }\n\n    if (watcher == null ||  watcher.getWatchedEvent() != null) {\n      watcher = new LatchChildWatcher();\n      while (true) {\n        try {\n          children = orderedChildren(watcher);\n          break;\n        } catch (KeeperException.NoNodeException e) {\n          zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);\n          // go back to the loop and try again\n        }\n      }\n      synchronized (childrenWatcherLock) {\n        childrenWatcher = watcher;\n        fetchedChildren = children;\n      }\n    }\n\n    while (true) {\n      if (!children.isEmpty()) break;\n      watcher.await(wait == Long.MAX_VALUE ? DEFAULT_TIMEOUT : wait);\n      if (watcher.getWatchedEvent() != null) {\n        children = orderedChildren(null);\n      }\n      if (wait != Long.MAX_VALUE) break;\n    }\n    return Collections.unmodifiableMap(children);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3f1a0016e65424cb251992c72022616d73753b7e","date":1414693186,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#getChildren(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#getChildren(long).mjava","sourceNew":"  private Map<Long, String> getChildren(long wait) throws InterruptedException, KeeperException\n  {\n    LatchWatcher watcher;\n    TreeMap<Long,String> children;\n    synchronized (childrenWatcherLock) {\n      watcher = childrenWatcher;\n      children = fetchedChildren;\n    }\n\n    if (watcher == null ||  watcher.getWatchedEvent() != null) {\n      // this watcher is only interested in child change events\n      watcher = new LatchWatcher(Watcher.Event.EventType.NodeChildrenChanged);\n      while (true) {\n        try {\n          children = orderedChildren(watcher);\n          break;\n        } catch (KeeperException.NoNodeException e) {\n          zookeeper.create(dir, new byte[0], CreateMode.PERSISTENT, true);\n          // go back to the loop and try again\n        }\n      }\n      synchronized (childrenWatcherLock) {\n        childrenWatcher = watcher;\n        fetchedChildren = children;\n      }\n    }\n\n    while (true) {\n      if (!children.isEmpty()) break;\n      watcher.await(wait == Long.MAX_VALUE ? DEFAULT_TIMEOUT : wait);\n      if (watcher.getWatchedEvent() != null) {\n        children = orderedChildren(null);\n      }\n      if (wait != Long.MAX_VALUE) break;\n    }\n    return Collections.unmodifiableMap(children);\n  }\n\n","sourceOld":"  private Map<Long, String> getChildren(long wait) throws InterruptedException, KeeperException\n  {\n    LatchChildWatcher watcher;\n    TreeMap<Long,String> children;\n    synchronized (childrenWatcherLock) {\n      watcher = childrenWatcher;\n      children = fetchedChildren;\n    }\n\n    if (watcher == null ||  watcher.getWatchedEvent() != null) {\n      watcher = new LatchChildWatcher();\n      while (true) {\n        try {\n          children = orderedChildren(watcher);\n          break;\n        } catch (KeeperException.NoNodeException e) {\n          zookeeper.create(dir, new byte[0], CreateMode.PERSISTENT, true);\n          // go back to the loop and try again\n        }\n      }\n      synchronized (childrenWatcherLock) {\n        childrenWatcher = watcher;\n        fetchedChildren = children;\n      }\n    }\n\n    while (true) {\n      if (!children.isEmpty()) break;\n      watcher.await(wait == Long.MAX_VALUE ? DEFAULT_TIMEOUT : wait);\n      if (watcher.getWatchedEvent() != null) {\n        children = orderedChildren(null);\n      }\n      if (wait != Long.MAX_VALUE) break;\n    }\n    return Collections.unmodifiableMap(children);\n  }\n\n","bugFix":["0ada2a0b40c19e896a9d20355e13cae9601c251c","aa7843ca6910809c5d95c44205d1b78ebee893da"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a282020d6c9a4ea32a359539e283e4771a2fda8","date":1440047542,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#getChildren(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#getChildren(long).mjava","sourceNew":"  /**\n   * Return the currently-known set of children from memory. If there are no children,\n   * waits up to {@code waitMillis} for at least one child to become available. May\n   * update the set of known children.\n   */\n  SortedSet<String> getChildren(long waitMillis) throws KeeperException, InterruptedException {\n    long waitNanos = TimeUnit.MILLISECONDS.toNanos(waitMillis);\n    while (waitNanos > 0) {\n      // Trigger a fetch if needed.\n      firstElement();\n      updateLock.lockInterruptibly();\n      try {\n        if (!knownChildren.isEmpty()) {\n          return new TreeSet<>(knownChildren);\n        }\n        waitNanos = notEmpty.awaitNanos(waitNanos);\n      } finally {\n        updateLock.unlock();\n      }\n    }\n    return Collections.emptySortedSet();\n  }\n\n","sourceOld":"  private Map<Long, String> getChildren(long wait) throws InterruptedException, KeeperException\n  {\n    LatchWatcher watcher;\n    TreeMap<Long,String> children;\n    synchronized (childrenWatcherLock) {\n      watcher = childrenWatcher;\n      children = fetchedChildren;\n    }\n\n    if (watcher == null ||  watcher.getWatchedEvent() != null) {\n      // this watcher is only interested in child change events\n      watcher = new LatchWatcher(Watcher.Event.EventType.NodeChildrenChanged);\n      while (true) {\n        try {\n          children = orderedChildren(watcher);\n          break;\n        } catch (KeeperException.NoNodeException e) {\n          zookeeper.create(dir, new byte[0], CreateMode.PERSISTENT, true);\n          // go back to the loop and try again\n        }\n      }\n      synchronized (childrenWatcherLock) {\n        childrenWatcher = watcher;\n        fetchedChildren = children;\n      }\n    }\n\n    while (true) {\n      if (!children.isEmpty()) break;\n      watcher.await(wait == Long.MAX_VALUE ? DEFAULT_TIMEOUT : wait);\n      if (watcher.getWatchedEvent() != null) {\n        children = orderedChildren(null);\n      }\n      if (wait != Long.MAX_VALUE) break;\n    }\n    return Collections.unmodifiableMap(children);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7fd147f6ec145b926803480f62aa12e2aad258e","date":1465448343,"type":4,"author":"Scott Blum","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#getChildren(long).mjava","sourceNew":null,"sourceOld":"  /**\n   * Return the currently-known set of children from memory. If there are no children,\n   * waits up to {@code waitMillis} for at least one child to become available. May\n   * update the set of known children.\n   */\n  SortedSet<String> getChildren(long waitMillis) throws KeeperException, InterruptedException {\n    long waitNanos = TimeUnit.MILLISECONDS.toNanos(waitMillis);\n    while (waitNanos > 0) {\n      // Trigger a fetch if needed.\n      firstElement();\n      updateLock.lockInterruptibly();\n      try {\n        if (!knownChildren.isEmpty()) {\n          return new TreeSet<>(knownChildren);\n        }\n        waitNanos = notEmpty.awaitNanos(waitNanos);\n      } finally {\n        updateLock.unlock();\n      }\n    }\n    return Collections.emptySortedSet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77c9633f72998c3815ffe21baa5f16d6e50f1e4a","date":1465453043,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#getChildren(long).mjava","sourceNew":null,"sourceOld":"  /**\n   * Return the currently-known set of children from memory. If there are no children,\n   * waits up to {@code waitMillis} for at least one child to become available. May\n   * update the set of known children.\n   */\n  SortedSet<String> getChildren(long waitMillis) throws KeeperException, InterruptedException {\n    long waitNanos = TimeUnit.MILLISECONDS.toNanos(waitMillis);\n    while (waitNanos > 0) {\n      // Trigger a fetch if needed.\n      firstElement();\n      updateLock.lockInterruptibly();\n      try {\n        if (!knownChildren.isEmpty()) {\n          return new TreeSet<>(knownChildren);\n        }\n        waitNanos = notEmpty.awaitNanos(waitNanos);\n      } finally {\n        updateLock.unlock();\n      }\n    }\n    return Collections.emptySortedSet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#getChildren(long).mjava","sourceNew":null,"sourceOld":"  /**\n   * Return the currently-known set of children from memory. If there are no children,\n   * waits up to {@code waitMillis} for at least one child to become available. May\n   * update the set of known children.\n   */\n  SortedSet<String> getChildren(long waitMillis) throws KeeperException, InterruptedException {\n    long waitNanos = TimeUnit.MILLISECONDS.toNanos(waitMillis);\n    while (waitNanos > 0) {\n      // Trigger a fetch if needed.\n      firstElement();\n      updateLock.lockInterruptibly();\n      try {\n        if (!knownChildren.isEmpty()) {\n          return new TreeSet<>(knownChildren);\n        }\n        waitNanos = notEmpty.awaitNanos(waitNanos);\n      } finally {\n        updateLock.unlock();\n      }\n    }\n    return Collections.emptySortedSet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f7fd147f6ec145b926803480f62aa12e2aad258e":["2a282020d6c9a4ea32a359539e283e4771a2fda8"],"0ada2a0b40c19e896a9d20355e13cae9601c251c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aa7843ca6910809c5d95c44205d1b78ebee893da":["0ada2a0b40c19e896a9d20355e13cae9601c251c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77c9633f72998c3815ffe21baa5f16d6e50f1e4a":["2a282020d6c9a4ea32a359539e283e4771a2fda8","f7fd147f6ec145b926803480f62aa12e2aad258e"],"3f1a0016e65424cb251992c72022616d73753b7e":["c83f985d9828d30801541f1eed26aa3169646baf"],"2a282020d6c9a4ea32a359539e283e4771a2fda8":["3f1a0016e65424cb251992c72022616d73753b7e"],"c83f985d9828d30801541f1eed26aa3169646baf":["aa7843ca6910809c5d95c44205d1b78ebee893da"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2a282020d6c9a4ea32a359539e283e4771a2fda8","77c9633f72998c3815ffe21baa5f16d6e50f1e4a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["77c9633f72998c3815ffe21baa5f16d6e50f1e4a"]},"commit2Childs":{"f7fd147f6ec145b926803480f62aa12e2aad258e":["77c9633f72998c3815ffe21baa5f16d6e50f1e4a"],"0ada2a0b40c19e896a9d20355e13cae9601c251c":["aa7843ca6910809c5d95c44205d1b78ebee893da"],"aa7843ca6910809c5d95c44205d1b78ebee893da":["c83f985d9828d30801541f1eed26aa3169646baf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ada2a0b40c19e896a9d20355e13cae9601c251c"],"77c9633f72998c3815ffe21baa5f16d6e50f1e4a":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3f1a0016e65424cb251992c72022616d73753b7e":["2a282020d6c9a4ea32a359539e283e4771a2fda8"],"2a282020d6c9a4ea32a359539e283e4771a2fda8":["f7fd147f6ec145b926803480f62aa12e2aad258e","77c9633f72998c3815ffe21baa5f16d6e50f1e4a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c83f985d9828d30801541f1eed26aa3169646baf":["3f1a0016e65424cb251992c72022616d73753b7e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}