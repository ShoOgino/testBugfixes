{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getDiagnostics(Policy,SolrClientCloudManager).mjava","commits":[{"id":"eaca6a0674512222004d9a2b0ca95d86bda20f1c","date":1508160449,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getDiagnostics(Policy,SolrClientCloudManager).mjava","pathOld":"/dev/null","sourceNew":"  public static MapWriter getDiagnostics(Policy policy, SolrClientCloudManager cloudManager) {\n    Policy.Session session = policy.createSession(cloudManager);\n    List<Row> sorted = session.getSorted();\n    List<Clause.Violation> violations = session.getViolations();\n\n    List<Preference> clusterPreferences = policy.getClusterPreferences();\n\n    List<Map<String, Object>> sortedNodes = new ArrayList<>(sorted.size());\n    for (Row row : sorted) {\n      Map<String, Object> map = Utils.makeMap(\"node\", row.node);\n      for (Cell cell : row.getCells()) {\n        for (Preference clusterPreference : clusterPreferences) {\n          Policy.SortParam name = clusterPreference.getName();\n          if (cell.getName().equalsIgnoreCase(name.name())) {\n            map.put(name.name(), cell.getValue());\n            break;\n          }\n        }\n      }\n      sortedNodes.add(map);\n    }\n\n    return ew -> {\n      ew.put(\"sortedNodes\", sortedNodes);\n      ew.put(\"violations\", violations);\n    };\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c721fca3c540a91b445e6c57e51e2fcb64af01a7","date":1508161002,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getDiagnostics(Policy,SolrClientCloudManager).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getDiagnostics(Policy,SolrClientCloudManager).mjava","sourceNew":"  public static MapWriter getDiagnostics(Policy policy, SolrClientCloudManager cloudManager) {\n    Policy.Session session = policy.createSession(cloudManager);\n    List<Row> sorted = session.getSorted();\n    List<Violation> violations = session.getViolations();\n\n    List<Preference> clusterPreferences = policy.getClusterPreferences();\n\n    List<Map<String, Object>> sortedNodes = new ArrayList<>(sorted.size());\n    for (Row row : sorted) {\n      Map<String, Object> map = Utils.makeMap(\"node\", row.node);\n      for (Cell cell : row.getCells()) {\n        for (Preference clusterPreference : clusterPreferences) {\n          Policy.SortParam name = clusterPreference.getName();\n          if (cell.getName().equalsIgnoreCase(name.name())) {\n            map.put(name.name(), cell.getValue());\n            break;\n          }\n        }\n      }\n      sortedNodes.add(map);\n    }\n\n    return ew -> {\n      ew.put(\"sortedNodes\", sortedNodes);\n      ew.put(\"violations\", violations);\n    };\n\n\n  }\n\n","sourceOld":"  public static MapWriter getDiagnostics(Policy policy, SolrClientCloudManager cloudManager) {\n    Policy.Session session = policy.createSession(cloudManager);\n    List<Row> sorted = session.getSorted();\n    List<Clause.Violation> violations = session.getViolations();\n\n    List<Preference> clusterPreferences = policy.getClusterPreferences();\n\n    List<Map<String, Object>> sortedNodes = new ArrayList<>(sorted.size());\n    for (Row row : sorted) {\n      Map<String, Object> map = Utils.makeMap(\"node\", row.node);\n      for (Cell cell : row.getCells()) {\n        for (Preference clusterPreference : clusterPreferences) {\n          Policy.SortParam name = clusterPreference.getName();\n          if (cell.getName().equalsIgnoreCase(name.name())) {\n            map.put(name.name(), cell.getValue());\n            break;\n          }\n        }\n      }\n      sortedNodes.add(map);\n    }\n\n    return ew -> {\n      ew.put(\"sortedNodes\", sortedNodes);\n      ew.put(\"violations\", violations);\n    };\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getDiagnostics(Policy,SolrCloudManager).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getDiagnostics(Policy,SolrClientCloudManager).mjava","sourceNew":"  public static MapWriter getDiagnostics(Policy policy, SolrCloudManager cloudManager) {\n    Policy.Session session = policy.createSession(cloudManager);\n    List<Row> sorted = session.getSorted();\n    List<Violation> violations = session.getViolations();\n\n    List<Preference> clusterPreferences = policy.getClusterPreferences();\n\n    List<Map<String, Object>> sortedNodes = new ArrayList<>(sorted.size());\n    for (Row row : sorted) {\n      Map<String, Object> map = Utils.makeMap(\"node\", row.node);\n      for (Cell cell : row.getCells()) {\n        for (Preference clusterPreference : clusterPreferences) {\n          Policy.SortParam name = clusterPreference.getName();\n          if (cell.getName().equalsIgnoreCase(name.name())) {\n            map.put(name.name(), cell.getValue());\n            break;\n          }\n        }\n      }\n      sortedNodes.add(map);\n    }\n\n    return ew -> {\n      ew.put(\"sortedNodes\", sortedNodes);\n      ew.put(\"violations\", violations);\n    };\n\n\n  }\n\n","sourceOld":"  public static MapWriter getDiagnostics(Policy policy, SolrClientCloudManager cloudManager) {\n    Policy.Session session = policy.createSession(cloudManager);\n    List<Row> sorted = session.getSorted();\n    List<Violation> violations = session.getViolations();\n\n    List<Preference> clusterPreferences = policy.getClusterPreferences();\n\n    List<Map<String, Object>> sortedNodes = new ArrayList<>(sorted.size());\n    for (Row row : sorted) {\n      Map<String, Object> map = Utils.makeMap(\"node\", row.node);\n      for (Cell cell : row.getCells()) {\n        for (Preference clusterPreference : clusterPreferences) {\n          Policy.SortParam name = clusterPreference.getName();\n          if (cell.getName().equalsIgnoreCase(name.name())) {\n            map.put(name.name(), cell.getValue());\n            break;\n          }\n        }\n      }\n      sortedNodes.add(map);\n    }\n\n    return ew -> {\n      ew.put(\"sortedNodes\", sortedNodes);\n      ew.put(\"violations\", violations);\n    };\n\n\n  }\n\n","bugFix":null,"bugIntro":["042da0877b8e28fd372a8ed80d11c4506a466ad7"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c721fca3c540a91b445e6c57e51e2fcb64af01a7":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["c721fca3c540a91b445e6c57e51e2fcb64af01a7"],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"]},"commit2Childs":{"c721fca3c540a91b445e6c57e51e2fcb64af01a7":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["c721fca3c540a91b445e6c57e51e2fcb64af01a7"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}