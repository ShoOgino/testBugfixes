{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","sourceNew":"  public final void visitDocument(int n, StoredFieldVisitor visitor) throws CorruptIndexException, IOException {\n    seekIndex(n);\n    fieldsStream.seek(indexStream.readLong());\n\n    final int numFields = fieldsStream.readVInt();\n    for (int fieldIDX = 0; fieldIDX < numFields; fieldIDX++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      \n      int bits = fieldsStream.readByte() & 0xFF;\n      assert bits <= (Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_MASK | Lucene40StoredFieldsWriter.FIELD_IS_BINARY): \"bits=\" + Integer.toHexString(bits);\n\n      switch(visitor.needsField(fieldInfo)) {\n        case YES:\n          readField(visitor, fieldInfo, bits);\n          break;\n        case NO: \n          skipField(bits);\n          break;\n        case STOP: \n          return;\n      }\n    }\n  }\n\n","sourceOld":"  public final void visitDocument(int n, StoredFieldVisitor visitor) throws CorruptIndexException, IOException {\n    seekIndex(n);\n    fieldsStream.seek(indexStream.readLong());\n\n    final int numFields = fieldsStream.readVInt();\n    for (int fieldIDX = 0; fieldIDX < numFields; fieldIDX++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      \n      int bits = fieldsStream.readByte() & 0xFF;\n      assert bits <= (Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_MASK | Lucene40StoredFieldsWriter.FIELD_IS_BINARY): \"bits=\" + Integer.toHexString(bits);\n\n      switch(visitor.needsField(fieldInfo)) {\n        case YES:\n          readField(visitor, fieldInfo, bits);\n          break;\n        case NO: \n          skipField(bits);\n          break;\n        case STOP: \n          return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32e43f282bea25b8cc26e4a842d98deafd617e9b","date":1337759516,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","sourceNew":"  public final void visitDocument(int n, StoredFieldVisitor visitor) throws CorruptIndexException, IOException {\n    seekIndex(n);\n    fieldsStream.seek(indexStream.readLong());\n\n    final int numFields = fieldsStream.readVInt();\n    for (int fieldIDX = 0; fieldIDX < numFields; fieldIDX++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      \n      int bits = fieldsStream.readByte() & 0xFF;\n      assert bits <= (FIELD_IS_NUMERIC_MASK | FIELD_IS_BINARY): \"bits=\" + Integer.toHexString(bits);\n\n      switch(visitor.needsField(fieldInfo)) {\n        case YES:\n          readField(visitor, fieldInfo, bits);\n          break;\n        case NO: \n          skipField(bits);\n          break;\n        case STOP: \n          return;\n      }\n    }\n  }\n\n","sourceOld":"  public final void visitDocument(int n, StoredFieldVisitor visitor) throws CorruptIndexException, IOException {\n    seekIndex(n);\n    fieldsStream.seek(indexStream.readLong());\n\n    final int numFields = fieldsStream.readVInt();\n    for (int fieldIDX = 0; fieldIDX < numFields; fieldIDX++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      \n      int bits = fieldsStream.readByte() & 0xFF;\n      assert bits <= (Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_MASK | Lucene40StoredFieldsWriter.FIELD_IS_BINARY): \"bits=\" + Integer.toHexString(bits);\n\n      switch(visitor.needsField(fieldInfo)) {\n        case YES:\n          readField(visitor, fieldInfo, bits);\n          break;\n        case NO: \n          skipField(bits);\n          break;\n        case STOP: \n          return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3599646b4d4c346cf74d334813488b8b337b5bf5","date":1337790261,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","sourceNew":"  public final void visitDocument(int n, StoredFieldVisitor visitor) throws CorruptIndexException, IOException {\n    seekIndex(n);\n    fieldsStream.seek(indexStream.readLong());\n\n    final int numFields = fieldsStream.readVInt();\n    for (int fieldIDX = 0; fieldIDX < numFields; fieldIDX++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      \n      int bits = fieldsStream.readByte() & 0xFF;\n      assert bits <= (FIELD_IS_NUMERIC_MASK | FIELD_IS_BINARY): \"bits=\" + Integer.toHexString(bits);\n\n      switch(visitor.needsField(fieldInfo)) {\n        case YES:\n          readField(visitor, fieldInfo, bits);\n          break;\n        case NO: \n          skipField(bits);\n          break;\n        case STOP: \n          return;\n      }\n    }\n  }\n\n","sourceOld":"  public final void visitDocument(int n, StoredFieldVisitor visitor) throws CorruptIndexException, IOException {\n    seekIndex(n);\n    fieldsStream.seek(indexStream.readLong());\n\n    final int numFields = fieldsStream.readVInt();\n    for (int fieldIDX = 0; fieldIDX < numFields; fieldIDX++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      \n      int bits = fieldsStream.readByte() & 0xFF;\n      assert bits <= (Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_MASK | Lucene40StoredFieldsWriter.FIELD_IS_BINARY): \"bits=\" + Integer.toHexString(bits);\n\n      switch(visitor.needsField(fieldInfo)) {\n        case YES:\n          readField(visitor, fieldInfo, bits);\n          break;\n        case NO: \n          skipField(bits);\n          break;\n        case STOP: \n          return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","sourceNew":"  public final void visitDocument(int n, StoredFieldVisitor visitor) throws IOException {\n    seekIndex(n);\n    fieldsStream.seek(indexStream.readLong());\n\n    final int numFields = fieldsStream.readVInt();\n    for (int fieldIDX = 0; fieldIDX < numFields; fieldIDX++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      \n      int bits = fieldsStream.readByte() & 0xFF;\n      assert bits <= (FIELD_IS_NUMERIC_MASK | FIELD_IS_BINARY): \"bits=\" + Integer.toHexString(bits);\n\n      switch(visitor.needsField(fieldInfo)) {\n        case YES:\n          readField(visitor, fieldInfo, bits);\n          break;\n        case NO: \n          skipField(bits);\n          break;\n        case STOP: \n          return;\n      }\n    }\n  }\n\n","sourceOld":"  public final void visitDocument(int n, StoredFieldVisitor visitor) throws CorruptIndexException, IOException {\n    seekIndex(n);\n    fieldsStream.seek(indexStream.readLong());\n\n    final int numFields = fieldsStream.readVInt();\n    for (int fieldIDX = 0; fieldIDX < numFields; fieldIDX++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      \n      int bits = fieldsStream.readByte() & 0xFF;\n      assert bits <= (FIELD_IS_NUMERIC_MASK | FIELD_IS_BINARY): \"bits=\" + Integer.toHexString(bits);\n\n      switch(visitor.needsField(fieldInfo)) {\n        case YES:\n          readField(visitor, fieldInfo, bits);\n          break;\n        case NO: \n          skipField(bits);\n          break;\n        case STOP: \n          return;\n      }\n    }\n  }\n\n","bugFix":["06584e6e98d592b34e1329b384182f368d2025e8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","sourceNew":"  public final void visitDocument(int n, StoredFieldVisitor visitor) throws IOException {\n    seekIndex(n);\n    fieldsStream.seek(indexStream.readLong());\n\n    final int numFields = fieldsStream.readVInt();\n    for (int fieldIDX = 0; fieldIDX < numFields; fieldIDX++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      \n      int bits = fieldsStream.readByte() & 0xFF;\n      assert bits <= (FIELD_IS_NUMERIC_MASK | FIELD_IS_BINARY): \"bits=\" + Integer.toHexString(bits);\n\n      switch(visitor.needsField(fieldInfo)) {\n        case YES:\n          readField(visitor, fieldInfo, bits);\n          break;\n        case NO: \n          skipField(bits);\n          break;\n        case STOP: \n          return;\n      }\n    }\n  }\n\n","sourceOld":"  public final void visitDocument(int n, StoredFieldVisitor visitor) throws CorruptIndexException, IOException {\n    seekIndex(n);\n    fieldsStream.seek(indexStream.readLong());\n\n    final int numFields = fieldsStream.readVInt();\n    for (int fieldIDX = 0; fieldIDX < numFields; fieldIDX++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      \n      int bits = fieldsStream.readByte() & 0xFF;\n      assert bits <= (FIELD_IS_NUMERIC_MASK | FIELD_IS_BINARY): \"bits=\" + Integer.toHexString(bits);\n\n      switch(visitor.needsField(fieldInfo)) {\n        case YES:\n          readField(visitor, fieldInfo, bits);\n          break;\n        case NO: \n          skipField(bits);\n          break;\n        case STOP: \n          return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"519435fc0d6082a1b8081f9492b714f716877437","date":1348258553,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","sourceNew":"  @Override\n  public final void visitDocument(int n, StoredFieldVisitor visitor) throws IOException {\n    seekIndex(n);\n    fieldsStream.seek(indexStream.readLong());\n\n    final int numFields = fieldsStream.readVInt();\n    for (int fieldIDX = 0; fieldIDX < numFields; fieldIDX++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      \n      int bits = fieldsStream.readByte() & 0xFF;\n      assert bits <= (FIELD_IS_NUMERIC_MASK | FIELD_IS_BINARY): \"bits=\" + Integer.toHexString(bits);\n\n      switch(visitor.needsField(fieldInfo)) {\n        case YES:\n          readField(visitor, fieldInfo, bits);\n          break;\n        case NO: \n          skipField(bits);\n          break;\n        case STOP: \n          return;\n      }\n    }\n  }\n\n","sourceOld":"  public final void visitDocument(int n, StoredFieldVisitor visitor) throws IOException {\n    seekIndex(n);\n    fieldsStream.seek(indexStream.readLong());\n\n    final int numFields = fieldsStream.readVInt();\n    for (int fieldIDX = 0; fieldIDX < numFields; fieldIDX++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      \n      int bits = fieldsStream.readByte() & 0xFF;\n      assert bits <= (FIELD_IS_NUMERIC_MASK | FIELD_IS_BINARY): \"bits=\" + Integer.toHexString(bits);\n\n      switch(visitor.needsField(fieldInfo)) {\n        case YES:\n          readField(visitor, fieldInfo, bits);\n          break;\n        case NO: \n          skipField(bits);\n          break;\n        case STOP: \n          return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","sourceNew":"  @Override\n  public final void visitDocument(int n, StoredFieldVisitor visitor) throws IOException {\n    seekIndex(n);\n    fieldsStream.seek(indexStream.readLong());\n\n    final int numFields = fieldsStream.readVInt();\n    for (int fieldIDX = 0; fieldIDX < numFields; fieldIDX++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      \n      int bits = fieldsStream.readByte() & 0xFF;\n      assert bits <= (FIELD_IS_NUMERIC_MASK | FIELD_IS_BINARY): \"bits=\" + Integer.toHexString(bits);\n\n      switch(visitor.needsField(fieldInfo)) {\n        case YES:\n          readField(visitor, fieldInfo, bits);\n          break;\n        case NO: \n          skipField(bits);\n          break;\n        case STOP: \n          return;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public final void visitDocument(int n, StoredFieldVisitor visitor) throws IOException {\n    seekIndex(n);\n    fieldsStream.seek(indexStream.readLong());\n\n    final int numFields = fieldsStream.readVInt();\n    for (int fieldIDX = 0; fieldIDX < numFields; fieldIDX++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      \n      int bits = fieldsStream.readByte() & 0xFF;\n      assert bits <= (FIELD_IS_NUMERIC_MASK | FIELD_IS_BINARY): \"bits=\" + Integer.toHexString(bits);\n\n      switch(visitor.needsField(fieldInfo)) {\n        case YES:\n          readField(visitor, fieldInfo, bits);\n          break;\n        case NO: \n          skipField(bits);\n          break;\n        case STOP: \n          return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","sourceNew":"  @Override\n  public final void visitDocument(int n, StoredFieldVisitor visitor) throws IOException {\n    seekIndex(n);\n    fieldsStream.seek(indexStream.readLong());\n\n    final int numFields = fieldsStream.readVInt();\n    for (int fieldIDX = 0; fieldIDX < numFields; fieldIDX++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      \n      int bits = fieldsStream.readByte() & 0xFF;\n      assert bits <= (FIELD_IS_NUMERIC_MASK | FIELD_IS_BINARY): \"bits=\" + Integer.toHexString(bits);\n\n      switch(visitor.needsField(fieldInfo)) {\n        case YES:\n          readField(visitor, fieldInfo, bits);\n          break;\n        case NO: \n          skipField(bits);\n          break;\n        case STOP: \n          return;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public final void visitDocument(int n, StoredFieldVisitor visitor) throws IOException {\n    seekIndex(n);\n    fieldsStream.seek(indexStream.readLong());\n\n    final int numFields = fieldsStream.readVInt();\n    for (int fieldIDX = 0; fieldIDX < numFields; fieldIDX++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      \n      int bits = fieldsStream.readByte() & 0xFF;\n      assert bits <= (FIELD_IS_NUMERIC_MASK | FIELD_IS_BINARY): \"bits=\" + Integer.toHexString(bits);\n\n      switch(visitor.needsField(fieldInfo)) {\n        case YES:\n          readField(visitor, fieldInfo, bits);\n          break;\n        case NO: \n          skipField(bits);\n          break;\n        case STOP: \n          return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"519435fc0d6082a1b8081f9492b714f716877437":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["32e43f282bea25b8cc26e4a842d98deafd617e9b","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["519435fc0d6082a1b8081f9492b714f716877437"],"3599646b4d4c346cf74d334813488b8b337b5bf5":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","32e43f282bea25b8cc26e4a842d98deafd617e9b"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["32e43f282bea25b8cc26e4a842d98deafd617e9b"],"32e43f282bea25b8cc26e4a842d98deafd617e9b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["519435fc0d6082a1b8081f9492b714f716877437","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"519435fc0d6082a1b8081f9492b714f716877437":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3599646b4d4c346cf74d334813488b8b337b5bf5","32e43f282bea25b8cc26e4a842d98deafd617e9b"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"3599646b4d4c346cf74d334813488b8b337b5bf5":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["519435fc0d6082a1b8081f9492b714f716877437","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"32e43f282bea25b8cc26e4a842d98deafd617e9b":["fe33227f6805edab2036cbb80645cc4e2d1fa424","3599646b4d4c346cf74d334813488b8b337b5bf5","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","3599646b4d4c346cf74d334813488b8b337b5bf5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}