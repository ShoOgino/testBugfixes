{"path":"solr/core/src/java/org/apache/solr/analysis/SynonymFilterFactory#loadSolrSynonyms(ResourceLoader,boolean,Analyzer).mjava","commits":[{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/SynonymFilterFactory#loadSolrSynonyms(ResourceLoader,boolean,Analyzer).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/FSTSynonymFilterFactory#loadSolrSynonyms(ResourceLoader,boolean,Analyzer).mjava","sourceNew":"  /**\n   * Load synonyms from the solr format, \"format=solr\".\n   */\n  private SynonymMap loadSolrSynonyms(ResourceLoader loader, boolean dedup, Analyzer analyzer) throws IOException, ParseException {\n    final boolean expand = getBoolean(\"expand\", true);\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new InitializationException(\"Missing required argument 'synonyms'.\");\n    \n    CharsetDecoder decoder = Charset.forName(\"UTF-8\").newDecoder()\n      .onMalformedInput(CodingErrorAction.REPORT)\n      .onUnmappableCharacter(CodingErrorAction.REPORT);\n    \n    SolrSynonymParser parser = new SolrSynonymParser(dedup, expand, analyzer);\n    File synonymFile = new File(synonyms);\n    if (synonymFile.exists()) {\n      decoder.reset();\n      parser.add(new InputStreamReader(loader.openResource(synonyms), decoder));\n    } else {\n      List<String> files = StrUtils.splitFileNames(synonyms);\n      for (String file : files) {\n        decoder.reset();\n        parser.add(new InputStreamReader(loader.openResource(file), decoder));\n      }\n    }\n    return parser.build();\n  }\n\n","sourceOld":"  /**\n   * Load synonyms from the solr format, \"format=solr\".\n   */\n  private SynonymMap loadSolrSynonyms(ResourceLoader loader, boolean dedup, Analyzer analyzer) throws IOException, ParseException {\n    final boolean expand = getBoolean(\"expand\", true);\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new InitializationException(\"Missing required argument 'synonyms'.\");\n    \n    CharsetDecoder decoder = Charset.forName(\"UTF-8\").newDecoder()\n      .onMalformedInput(CodingErrorAction.REPORT)\n      .onUnmappableCharacter(CodingErrorAction.REPORT);\n    \n    SolrSynonymParser parser = new SolrSynonymParser(dedup, expand, analyzer);\n    File synonymFile = new File(synonyms);\n    if (synonymFile.exists()) {\n      decoder.reset();\n      parser.add(new InputStreamReader(loader.openResource(synonyms), decoder));\n    } else {\n      List<String> files = StrUtils.splitFileNames(synonyms);\n      for (String file : files) {\n        decoder.reset();\n        parser.add(new InputStreamReader(loader.openResource(file), decoder));\n      }\n    }\n    return parser.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05464f071eda06541fd9ed6f04aaca99b131dfa","date":1343110729,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#loadSolrSynonyms(ResourceLoader,boolean,Analyzer).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/SynonymFilterFactory#loadSolrSynonyms(ResourceLoader,boolean,Analyzer).mjava","sourceNew":"  /**\n   * Load synonyms from the solr format, \"format=solr\".\n   */\n  private SynonymMap loadSolrSynonyms(ResourceLoader loader, boolean dedup, Analyzer analyzer) throws IOException, ParseException {\n    final boolean expand = getBoolean(\"expand\", true);\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new InitializationException(\"Missing required argument 'synonyms'.\");\n    \n    CharsetDecoder decoder = Charset.forName(\"UTF-8\").newDecoder()\n      .onMalformedInput(CodingErrorAction.REPORT)\n      .onUnmappableCharacter(CodingErrorAction.REPORT);\n    \n    SolrSynonymParser parser = new SolrSynonymParser(dedup, expand, analyzer);\n    File synonymFile = new File(synonyms);\n    if (synonymFile.exists()) {\n      decoder.reset();\n      parser.add(new InputStreamReader(loader.openResource(synonyms), decoder));\n    } else {\n      List<String> files = splitFileNames(synonyms);\n      for (String file : files) {\n        decoder.reset();\n        parser.add(new InputStreamReader(loader.openResource(file), decoder));\n      }\n    }\n    return parser.build();\n  }\n\n","sourceOld":"  /**\n   * Load synonyms from the solr format, \"format=solr\".\n   */\n  private SynonymMap loadSolrSynonyms(ResourceLoader loader, boolean dedup, Analyzer analyzer) throws IOException, ParseException {\n    final boolean expand = getBoolean(\"expand\", true);\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new InitializationException(\"Missing required argument 'synonyms'.\");\n    \n    CharsetDecoder decoder = Charset.forName(\"UTF-8\").newDecoder()\n      .onMalformedInput(CodingErrorAction.REPORT)\n      .onUnmappableCharacter(CodingErrorAction.REPORT);\n    \n    SolrSynonymParser parser = new SolrSynonymParser(dedup, expand, analyzer);\n    File synonymFile = new File(synonyms);\n    if (synonymFile.exists()) {\n      decoder.reset();\n      parser.add(new InputStreamReader(loader.openResource(synonyms), decoder));\n    } else {\n      List<String> files = StrUtils.splitFileNames(synonyms);\n      for (String file : files) {\n        decoder.reset();\n        parser.add(new InputStreamReader(loader.openResource(file), decoder));\n      }\n    }\n    return parser.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#loadSolrSynonyms(ResourceLoader,boolean,Analyzer).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/SynonymFilterFactory#loadSolrSynonyms(ResourceLoader,boolean,Analyzer).mjava","sourceNew":"  /**\n   * Load synonyms from the solr format, \"format=solr\".\n   */\n  private SynonymMap loadSolrSynonyms(ResourceLoader loader, boolean dedup, Analyzer analyzer) throws IOException, ParseException {\n    final boolean expand = getBoolean(\"expand\", true);\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new InitializationException(\"Missing required argument 'synonyms'.\");\n    \n    CharsetDecoder decoder = Charset.forName(\"UTF-8\").newDecoder()\n      .onMalformedInput(CodingErrorAction.REPORT)\n      .onUnmappableCharacter(CodingErrorAction.REPORT);\n    \n    SolrSynonymParser parser = new SolrSynonymParser(dedup, expand, analyzer);\n    File synonymFile = new File(synonyms);\n    if (synonymFile.exists()) {\n      decoder.reset();\n      parser.add(new InputStreamReader(loader.openResource(synonyms), decoder));\n    } else {\n      List<String> files = splitFileNames(synonyms);\n      for (String file : files) {\n        decoder.reset();\n        parser.add(new InputStreamReader(loader.openResource(file), decoder));\n      }\n    }\n    return parser.build();\n  }\n\n","sourceOld":"  /**\n   * Load synonyms from the solr format, \"format=solr\".\n   */\n  private SynonymMap loadSolrSynonyms(ResourceLoader loader, boolean dedup, Analyzer analyzer) throws IOException, ParseException {\n    final boolean expand = getBoolean(\"expand\", true);\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new InitializationException(\"Missing required argument 'synonyms'.\");\n    \n    CharsetDecoder decoder = Charset.forName(\"UTF-8\").newDecoder()\n      .onMalformedInput(CodingErrorAction.REPORT)\n      .onUnmappableCharacter(CodingErrorAction.REPORT);\n    \n    SolrSynonymParser parser = new SolrSynonymParser(dedup, expand, analyzer);\n    File synonymFile = new File(synonyms);\n    if (synonymFile.exists()) {\n      decoder.reset();\n      parser.add(new InputStreamReader(loader.openResource(synonyms), decoder));\n    } else {\n      List<String> files = StrUtils.splitFileNames(synonyms);\n      for (String file : files) {\n        decoder.reset();\n        parser.add(new InputStreamReader(loader.openResource(file), decoder));\n      }\n    }\n    return parser.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/analysis/SynonymFilterFactory#loadSolrSynonyms(ResourceLoader,boolean,Analyzer).mjava","sourceNew":null,"sourceOld":"  /**\n   * Load synonyms from the solr format, \"format=solr\".\n   */\n  private SynonymMap loadSolrSynonyms(ResourceLoader loader, boolean dedup, Analyzer analyzer) throws IOException, ParseException {\n    final boolean expand = getBoolean(\"expand\", true);\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new InitializationException(\"Missing required argument 'synonyms'.\");\n    \n    CharsetDecoder decoder = Charset.forName(\"UTF-8\").newDecoder()\n      .onMalformedInput(CodingErrorAction.REPORT)\n      .onUnmappableCharacter(CodingErrorAction.REPORT);\n    \n    SolrSynonymParser parser = new SolrSynonymParser(dedup, expand, analyzer);\n    File synonymFile = new File(synonyms);\n    if (synonymFile.exists()) {\n      decoder.reset();\n      parser.add(new InputStreamReader(loader.openResource(synonyms), decoder));\n    } else {\n      List<String> files = StrUtils.splitFileNames(synonyms);\n      for (String file : files) {\n        decoder.reset();\n        parser.add(new InputStreamReader(loader.openResource(file), decoder));\n      }\n    }\n    return parser.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/analysis/SynonymFilterFactory#loadSolrSynonyms(ResourceLoader,boolean,Analyzer).mjava","sourceNew":null,"sourceOld":"  /**\n   * Load synonyms from the solr format, \"format=solr\".\n   */\n  private SynonymMap loadSolrSynonyms(ResourceLoader loader, boolean dedup, Analyzer analyzer) throws IOException, ParseException {\n    final boolean expand = getBoolean(\"expand\", true);\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new InitializationException(\"Missing required argument 'synonyms'.\");\n    \n    CharsetDecoder decoder = Charset.forName(\"UTF-8\").newDecoder()\n      .onMalformedInput(CodingErrorAction.REPORT)\n      .onUnmappableCharacter(CodingErrorAction.REPORT);\n    \n    SolrSynonymParser parser = new SolrSynonymParser(dedup, expand, analyzer);\n    File synonymFile = new File(synonyms);\n    if (synonymFile.exists()) {\n      decoder.reset();\n      parser.add(new InputStreamReader(loader.openResource(synonyms), decoder));\n    } else {\n      List<String> files = StrUtils.splitFileNames(synonyms);\n      for (String file : files) {\n        decoder.reset();\n        parser.add(new InputStreamReader(loader.openResource(file), decoder));\n      }\n    }\n    return parser.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","5a1a22b1ad88b436661458df567f3fdb446392a4"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","5a1a22b1ad88b436661458df567f3fdb446392a4"],"a05464f071eda06541fd9ed6f04aaca99b131dfa":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","a05464f071eda06541fd9ed6f04aaca99b131dfa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a1a22b1ad88b436661458df567f3fdb446392a4"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","a05464f071eda06541fd9ed6f04aaca99b131dfa","5a1a22b1ad88b436661458df567f3fdb446392a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"a05464f071eda06541fd9ed6f04aaca99b131dfa":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}