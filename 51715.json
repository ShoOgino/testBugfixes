{"path":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader#CompressingStoredFieldsIndexReader(IndexInput,SegmentInfo).mjava","commits":[{"id":"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69","date":1352818449,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader#CompressingStoredFieldsIndexReader(IndexInput,SegmentInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader#CompressingStoredFieldsIndexReader(IndexInput,SegmentInfo).mjava","sourceNew":"  CompressingStoredFieldsIndexReader(IndexInput fieldsIndexIn, SegmentInfo si) throws IOException {\n    this.fieldsIndexIn = fieldsIndexIn;\n    maxDoc = si.getDocCount();\n    int[] docBases = new int[16];\n    long[] startPointers = new long[16];\n    int[] avgChunkDocs = new int[16];\n    long[] avgChunkSizes = new long[16];\n    PackedInts.Reader[] docBasesDeltas = new PackedInts.Reader[16];\n    PackedInts.Reader[] startPointersDeltas = new PackedInts.Reader[16];\n\n    final int packedIntsVersion = fieldsIndexIn.readVInt();\n\n    int blockCount = 0;\n\n    for (;;) {\n      final int numChunks = fieldsIndexIn.readVInt();\n      if (numChunks == 0) {\n        break;\n      }\n      if (blockCount == docBases.length) {\n        final int newSize = ArrayUtil.oversize(blockCount + 1, 8);\n        docBases = Arrays.copyOf(docBases, newSize);\n        startPointers = Arrays.copyOf(startPointers, newSize);\n        avgChunkDocs = Arrays.copyOf(avgChunkDocs, newSize);\n        avgChunkSizes = Arrays.copyOf(avgChunkSizes, newSize);\n        docBasesDeltas = Arrays.copyOf(docBasesDeltas, newSize);\n        startPointersDeltas = Arrays.copyOf(startPointersDeltas, newSize);\n      }\n\n      // doc bases\n      docBases[blockCount] = fieldsIndexIn.readVInt();\n      avgChunkDocs[blockCount] = fieldsIndexIn.readVInt();\n      final int bitsPerDocBase = fieldsIndexIn.readVInt();\n      if (bitsPerDocBase > 32) {\n        throw new CorruptIndexException(\"Corrupted\");\n      }\n      docBasesDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerDocBase);\n\n      // start pointers\n      startPointers[blockCount] = fieldsIndexIn.readVLong();\n      avgChunkSizes[blockCount] = fieldsIndexIn.readVLong();\n      final int bitsPerStartPointer = fieldsIndexIn.readVInt();\n      if (bitsPerStartPointer > 64) {\n        throw new CorruptIndexException(\"Corrupted\");\n      }\n      startPointersDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerStartPointer);\n\n      ++blockCount;\n    }\n\n    this.docBases = Arrays.copyOf(docBases, blockCount);\n    this.startPointers = Arrays.copyOf(startPointers, blockCount);\n    this.avgChunkDocs = Arrays.copyOf(avgChunkDocs, blockCount);\n    this.avgChunkSizes = Arrays.copyOf(avgChunkSizes, blockCount);\n    this.docBasesDeltas = Arrays.copyOf(docBasesDeltas, blockCount);\n    this.startPointersDeltas = Arrays.copyOf(startPointersDeltas, blockCount);\n  }\n\n","sourceOld":"  CompressingStoredFieldsIndexReader(IndexInput fieldsIndexIn, SegmentInfo si) throws IOException {\n    this.fieldsIndexIn = fieldsIndexIn;\n    maxDoc = si.getDocCount();\n    int[] docBases = new int[16];\n    long[] startPointers = new long[16];\n    int[] avgChunkDocs = new int[16];\n    long[] avgChunkSizes = new long[16];\n    PackedInts.Reader[] docBasesDeltas = new PackedInts.Reader[16];\n    PackedInts.Reader[] startPointersDeltas = new PackedInts.Reader[16];\n\n    final int packedIntsVersion = fieldsIndexIn.readVInt();\n\n    int blockCount = 0;\n\n    for (;;) {\n      final int numChunks = fieldsIndexIn.readVInt();\n      if (numChunks == 0) {\n        break;\n      }\n      if (blockCount == docBases.length) {\n        final int newSize = ArrayUtil.oversize(blockCount + 1, 8);\n        docBases = Arrays.copyOf(docBases, newSize);\n        startPointers = Arrays.copyOf(startPointers, newSize);\n        avgChunkDocs = Arrays.copyOf(avgChunkDocs, newSize);\n        avgChunkSizes = Arrays.copyOf(avgChunkSizes, newSize);\n        docBasesDeltas = Arrays.copyOf(docBasesDeltas, newSize);\n        startPointersDeltas = Arrays.copyOf(startPointersDeltas, newSize);\n      }\n\n      // doc bases\n      docBases[blockCount] = fieldsIndexIn.readVInt();\n      avgChunkDocs[blockCount] = fieldsIndexIn.readVInt();\n      final int bitsPerDocBase = fieldsIndexIn.readVInt();\n      if (bitsPerDocBase > 32) {\n        throw new CorruptIndexException(\"Corrupted\");\n      }\n      docBasesDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerDocBase);\n\n      // start pointers\n      startPointers[blockCount] = fieldsIndexIn.readVLong();\n      avgChunkSizes[blockCount] = fieldsIndexIn.readVLong();\n      final int bitsPerStartPointer = fieldsIndexIn.readVInt();\n      if (bitsPerStartPointer > 64) {\n        throw new CorruptIndexException(\"Corrupted\");\n      }\n      startPointersDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerStartPointer);\n\n      ++blockCount;\n    }\n\n    this.docBases = Arrays.copyOf(docBases, blockCount);\n    this.startPointers = Arrays.copyOf(startPointers, blockCount);\n    this.avgChunkDocs = Arrays.copyOf(avgChunkDocs, blockCount);\n    this.avgChunkSizes = Arrays.copyOf(avgChunkSizes, blockCount);\n    this.docBasesDeltas = Arrays.copyOf(docBasesDeltas, blockCount);\n    this.startPointersDeltas = Arrays.copyOf(startPointersDeltas, blockCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader#CompressingStoredFieldsIndexReader(IndexInput,SegmentInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader#CompressingStoredFieldsIndexReader(IndexInput,SegmentInfo).mjava","sourceNew":"  CompressingStoredFieldsIndexReader(IndexInput fieldsIndexIn, SegmentInfo si) throws IOException {\n    this.fieldsIndexIn = fieldsIndexIn;\n    maxDoc = si.getDocCount();\n    int[] docBases = new int[16];\n    long[] startPointers = new long[16];\n    int[] avgChunkDocs = new int[16];\n    long[] avgChunkSizes = new long[16];\n    PackedInts.Reader[] docBasesDeltas = new PackedInts.Reader[16];\n    PackedInts.Reader[] startPointersDeltas = new PackedInts.Reader[16];\n\n    final int packedIntsVersion = fieldsIndexIn.readVInt();\n\n    int blockCount = 0;\n\n    for (;;) {\n      final int numChunks = fieldsIndexIn.readVInt();\n      if (numChunks == 0) {\n        break;\n      }\n      if (blockCount == docBases.length) {\n        final int newSize = ArrayUtil.oversize(blockCount + 1, 8);\n        docBases = Arrays.copyOf(docBases, newSize);\n        startPointers = Arrays.copyOf(startPointers, newSize);\n        avgChunkDocs = Arrays.copyOf(avgChunkDocs, newSize);\n        avgChunkSizes = Arrays.copyOf(avgChunkSizes, newSize);\n        docBasesDeltas = Arrays.copyOf(docBasesDeltas, newSize);\n        startPointersDeltas = Arrays.copyOf(startPointersDeltas, newSize);\n      }\n\n      // doc bases\n      docBases[blockCount] = fieldsIndexIn.readVInt();\n      avgChunkDocs[blockCount] = fieldsIndexIn.readVInt();\n      final int bitsPerDocBase = fieldsIndexIn.readVInt();\n      if (bitsPerDocBase > 32) {\n        throw new CorruptIndexException(\"Corrupted\");\n      }\n      docBasesDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerDocBase);\n\n      // start pointers\n      startPointers[blockCount] = fieldsIndexIn.readVLong();\n      avgChunkSizes[blockCount] = fieldsIndexIn.readVLong();\n      final int bitsPerStartPointer = fieldsIndexIn.readVInt();\n      if (bitsPerStartPointer > 64) {\n        throw new CorruptIndexException(\"Corrupted\");\n      }\n      startPointersDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerStartPointer);\n\n      ++blockCount;\n    }\n\n    this.docBases = Arrays.copyOf(docBases, blockCount);\n    this.startPointers = Arrays.copyOf(startPointers, blockCount);\n    this.avgChunkDocs = Arrays.copyOf(avgChunkDocs, blockCount);\n    this.avgChunkSizes = Arrays.copyOf(avgChunkSizes, blockCount);\n    this.docBasesDeltas = Arrays.copyOf(docBasesDeltas, blockCount);\n    this.startPointersDeltas = Arrays.copyOf(startPointersDeltas, blockCount);\n  }\n\n","sourceOld":"  CompressingStoredFieldsIndexReader(IndexInput fieldsIndexIn, SegmentInfo si) throws IOException {\n    this.fieldsIndexIn = fieldsIndexIn;\n    maxDoc = si.getDocCount();\n    int[] docBases = new int[16];\n    long[] startPointers = new long[16];\n    int[] avgChunkDocs = new int[16];\n    long[] avgChunkSizes = new long[16];\n    PackedInts.Reader[] docBasesDeltas = new PackedInts.Reader[16];\n    PackedInts.Reader[] startPointersDeltas = new PackedInts.Reader[16];\n\n    final int packedIntsVersion = fieldsIndexIn.readVInt();\n\n    int blockCount = 0;\n\n    for (;;) {\n      final int numChunks = fieldsIndexIn.readVInt();\n      if (numChunks == 0) {\n        break;\n      }\n      if (blockCount == docBases.length) {\n        final int newSize = ArrayUtil.oversize(blockCount + 1, 8);\n        docBases = Arrays.copyOf(docBases, newSize);\n        startPointers = Arrays.copyOf(startPointers, newSize);\n        avgChunkDocs = Arrays.copyOf(avgChunkDocs, newSize);\n        avgChunkSizes = Arrays.copyOf(avgChunkSizes, newSize);\n        docBasesDeltas = Arrays.copyOf(docBasesDeltas, newSize);\n        startPointersDeltas = Arrays.copyOf(startPointersDeltas, newSize);\n      }\n\n      // doc bases\n      docBases[blockCount] = fieldsIndexIn.readVInt();\n      avgChunkDocs[blockCount] = fieldsIndexIn.readVInt();\n      final int bitsPerDocBase = fieldsIndexIn.readVInt();\n      if (bitsPerDocBase > 32) {\n        throw new CorruptIndexException(\"Corrupted\");\n      }\n      docBasesDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerDocBase);\n\n      // start pointers\n      startPointers[blockCount] = fieldsIndexIn.readVLong();\n      avgChunkSizes[blockCount] = fieldsIndexIn.readVLong();\n      final int bitsPerStartPointer = fieldsIndexIn.readVInt();\n      if (bitsPerStartPointer > 64) {\n        throw new CorruptIndexException(\"Corrupted\");\n      }\n      startPointersDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerStartPointer);\n\n      ++blockCount;\n    }\n\n    this.docBases = Arrays.copyOf(docBases, blockCount);\n    this.startPointers = Arrays.copyOf(startPointers, blockCount);\n    this.avgChunkDocs = Arrays.copyOf(avgChunkDocs, blockCount);\n    this.avgChunkSizes = Arrays.copyOf(avgChunkSizes, blockCount);\n    this.docBasesDeltas = Arrays.copyOf(docBasesDeltas, blockCount);\n    this.startPointersDeltas = Arrays.copyOf(startPointersDeltas, blockCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90f762b9c981401224de7f0a7c1ffc8fbc67574f","date":1366475889,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader#CompressingStoredFieldsIndexReader(IndexInput,SegmentInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader#CompressingStoredFieldsIndexReader(IndexInput,SegmentInfo).mjava","sourceNew":"  CompressingStoredFieldsIndexReader(IndexInput fieldsIndexIn, SegmentInfo si) throws IOException {\n    this.fieldsIndexIn = fieldsIndexIn;\n    maxDoc = si.getDocCount();\n    int[] docBases = new int[16];\n    long[] startPointers = new long[16];\n    int[] avgChunkDocs = new int[16];\n    long[] avgChunkSizes = new long[16];\n    PackedInts.Reader[] docBasesDeltas = new PackedInts.Reader[16];\n    PackedInts.Reader[] startPointersDeltas = new PackedInts.Reader[16];\n\n    final int packedIntsVersion = fieldsIndexIn.readVInt();\n\n    int blockCount = 0;\n\n    for (;;) {\n      final int numChunks = fieldsIndexIn.readVInt();\n      if (numChunks == 0) {\n        break;\n      }\n      if (blockCount == docBases.length) {\n        final int newSize = ArrayUtil.oversize(blockCount + 1, 8);\n        docBases = Arrays.copyOf(docBases, newSize);\n        startPointers = Arrays.copyOf(startPointers, newSize);\n        avgChunkDocs = Arrays.copyOf(avgChunkDocs, newSize);\n        avgChunkSizes = Arrays.copyOf(avgChunkSizes, newSize);\n        docBasesDeltas = Arrays.copyOf(docBasesDeltas, newSize);\n        startPointersDeltas = Arrays.copyOf(startPointersDeltas, newSize);\n      }\n\n      // doc bases\n      docBases[blockCount] = fieldsIndexIn.readVInt();\n      avgChunkDocs[blockCount] = fieldsIndexIn.readVInt();\n      final int bitsPerDocBase = fieldsIndexIn.readVInt();\n      if (bitsPerDocBase > 32) {\n        throw new CorruptIndexException(\"Corrupted bitsPerDocBase (resource=\" + fieldsIndexIn + \")\");\n      }\n      docBasesDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerDocBase);\n\n      // start pointers\n      startPointers[blockCount] = fieldsIndexIn.readVLong();\n      avgChunkSizes[blockCount] = fieldsIndexIn.readVLong();\n      final int bitsPerStartPointer = fieldsIndexIn.readVInt();\n      if (bitsPerStartPointer > 64) {\n        throw new CorruptIndexException(\"Corrupted bitsPerStartPointer (resource=\" + fieldsIndexIn + \")\");\n      }\n      startPointersDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerStartPointer);\n\n      ++blockCount;\n    }\n\n    this.docBases = Arrays.copyOf(docBases, blockCount);\n    this.startPointers = Arrays.copyOf(startPointers, blockCount);\n    this.avgChunkDocs = Arrays.copyOf(avgChunkDocs, blockCount);\n    this.avgChunkSizes = Arrays.copyOf(avgChunkSizes, blockCount);\n    this.docBasesDeltas = Arrays.copyOf(docBasesDeltas, blockCount);\n    this.startPointersDeltas = Arrays.copyOf(startPointersDeltas, blockCount);\n  }\n\n","sourceOld":"  CompressingStoredFieldsIndexReader(IndexInput fieldsIndexIn, SegmentInfo si) throws IOException {\n    this.fieldsIndexIn = fieldsIndexIn;\n    maxDoc = si.getDocCount();\n    int[] docBases = new int[16];\n    long[] startPointers = new long[16];\n    int[] avgChunkDocs = new int[16];\n    long[] avgChunkSizes = new long[16];\n    PackedInts.Reader[] docBasesDeltas = new PackedInts.Reader[16];\n    PackedInts.Reader[] startPointersDeltas = new PackedInts.Reader[16];\n\n    final int packedIntsVersion = fieldsIndexIn.readVInt();\n\n    int blockCount = 0;\n\n    for (;;) {\n      final int numChunks = fieldsIndexIn.readVInt();\n      if (numChunks == 0) {\n        break;\n      }\n      if (blockCount == docBases.length) {\n        final int newSize = ArrayUtil.oversize(blockCount + 1, 8);\n        docBases = Arrays.copyOf(docBases, newSize);\n        startPointers = Arrays.copyOf(startPointers, newSize);\n        avgChunkDocs = Arrays.copyOf(avgChunkDocs, newSize);\n        avgChunkSizes = Arrays.copyOf(avgChunkSizes, newSize);\n        docBasesDeltas = Arrays.copyOf(docBasesDeltas, newSize);\n        startPointersDeltas = Arrays.copyOf(startPointersDeltas, newSize);\n      }\n\n      // doc bases\n      docBases[blockCount] = fieldsIndexIn.readVInt();\n      avgChunkDocs[blockCount] = fieldsIndexIn.readVInt();\n      final int bitsPerDocBase = fieldsIndexIn.readVInt();\n      if (bitsPerDocBase > 32) {\n        throw new CorruptIndexException(\"Corrupted\");\n      }\n      docBasesDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerDocBase);\n\n      // start pointers\n      startPointers[blockCount] = fieldsIndexIn.readVLong();\n      avgChunkSizes[blockCount] = fieldsIndexIn.readVLong();\n      final int bitsPerStartPointer = fieldsIndexIn.readVInt();\n      if (bitsPerStartPointer > 64) {\n        throw new CorruptIndexException(\"Corrupted\");\n      }\n      startPointersDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerStartPointer);\n\n      ++blockCount;\n    }\n\n    this.docBases = Arrays.copyOf(docBases, blockCount);\n    this.startPointers = Arrays.copyOf(startPointers, blockCount);\n    this.avgChunkDocs = Arrays.copyOf(avgChunkDocs, blockCount);\n    this.avgChunkSizes = Arrays.copyOf(avgChunkSizes, blockCount);\n    this.docBasesDeltas = Arrays.copyOf(docBasesDeltas, blockCount);\n    this.startPointersDeltas = Arrays.copyOf(startPointersDeltas, blockCount);\n  }\n\n","bugFix":null,"bugIntro":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"818c86419d333447415a4e14fec4365320992e26","date":1370973407,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader#CompressingStoredFieldsIndexReader(IndexInput,SegmentInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader#CompressingStoredFieldsIndexReader(IndexInput,SegmentInfo).mjava","sourceNew":"  // It is the responsibility of the caller to close fieldsIndexIn after this constructor\n  // has been called\n  CompressingStoredFieldsIndexReader(IndexInput fieldsIndexIn, SegmentInfo si) throws IOException {\n    maxDoc = si.getDocCount();\n    int[] docBases = new int[16];\n    long[] startPointers = new long[16];\n    int[] avgChunkDocs = new int[16];\n    long[] avgChunkSizes = new long[16];\n    PackedInts.Reader[] docBasesDeltas = new PackedInts.Reader[16];\n    PackedInts.Reader[] startPointersDeltas = new PackedInts.Reader[16];\n\n    final int packedIntsVersion = fieldsIndexIn.readVInt();\n\n    int blockCount = 0;\n\n    for (;;) {\n      final int numChunks = fieldsIndexIn.readVInt();\n      if (numChunks == 0) {\n        break;\n      }\n      if (blockCount == docBases.length) {\n        final int newSize = ArrayUtil.oversize(blockCount + 1, 8);\n        docBases = Arrays.copyOf(docBases, newSize);\n        startPointers = Arrays.copyOf(startPointers, newSize);\n        avgChunkDocs = Arrays.copyOf(avgChunkDocs, newSize);\n        avgChunkSizes = Arrays.copyOf(avgChunkSizes, newSize);\n        docBasesDeltas = Arrays.copyOf(docBasesDeltas, newSize);\n        startPointersDeltas = Arrays.copyOf(startPointersDeltas, newSize);\n      }\n\n      // doc bases\n      docBases[blockCount] = fieldsIndexIn.readVInt();\n      avgChunkDocs[blockCount] = fieldsIndexIn.readVInt();\n      final int bitsPerDocBase = fieldsIndexIn.readVInt();\n      if (bitsPerDocBase > 32) {\n        throw new CorruptIndexException(\"Corrupted bitsPerDocBase (resource=\" + fieldsIndexIn + \")\");\n      }\n      docBasesDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerDocBase);\n\n      // start pointers\n      startPointers[blockCount] = fieldsIndexIn.readVLong();\n      avgChunkSizes[blockCount] = fieldsIndexIn.readVLong();\n      final int bitsPerStartPointer = fieldsIndexIn.readVInt();\n      if (bitsPerStartPointer > 64) {\n        throw new CorruptIndexException(\"Corrupted bitsPerStartPointer (resource=\" + fieldsIndexIn + \")\");\n      }\n      startPointersDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerStartPointer);\n\n      ++blockCount;\n    }\n\n    this.docBases = Arrays.copyOf(docBases, blockCount);\n    this.startPointers = Arrays.copyOf(startPointers, blockCount);\n    this.avgChunkDocs = Arrays.copyOf(avgChunkDocs, blockCount);\n    this.avgChunkSizes = Arrays.copyOf(avgChunkSizes, blockCount);\n    this.docBasesDeltas = Arrays.copyOf(docBasesDeltas, blockCount);\n    this.startPointersDeltas = Arrays.copyOf(startPointersDeltas, blockCount);\n  }\n\n","sourceOld":"  CompressingStoredFieldsIndexReader(IndexInput fieldsIndexIn, SegmentInfo si) throws IOException {\n    this.fieldsIndexIn = fieldsIndexIn;\n    maxDoc = si.getDocCount();\n    int[] docBases = new int[16];\n    long[] startPointers = new long[16];\n    int[] avgChunkDocs = new int[16];\n    long[] avgChunkSizes = new long[16];\n    PackedInts.Reader[] docBasesDeltas = new PackedInts.Reader[16];\n    PackedInts.Reader[] startPointersDeltas = new PackedInts.Reader[16];\n\n    final int packedIntsVersion = fieldsIndexIn.readVInt();\n\n    int blockCount = 0;\n\n    for (;;) {\n      final int numChunks = fieldsIndexIn.readVInt();\n      if (numChunks == 0) {\n        break;\n      }\n      if (blockCount == docBases.length) {\n        final int newSize = ArrayUtil.oversize(blockCount + 1, 8);\n        docBases = Arrays.copyOf(docBases, newSize);\n        startPointers = Arrays.copyOf(startPointers, newSize);\n        avgChunkDocs = Arrays.copyOf(avgChunkDocs, newSize);\n        avgChunkSizes = Arrays.copyOf(avgChunkSizes, newSize);\n        docBasesDeltas = Arrays.copyOf(docBasesDeltas, newSize);\n        startPointersDeltas = Arrays.copyOf(startPointersDeltas, newSize);\n      }\n\n      // doc bases\n      docBases[blockCount] = fieldsIndexIn.readVInt();\n      avgChunkDocs[blockCount] = fieldsIndexIn.readVInt();\n      final int bitsPerDocBase = fieldsIndexIn.readVInt();\n      if (bitsPerDocBase > 32) {\n        throw new CorruptIndexException(\"Corrupted bitsPerDocBase (resource=\" + fieldsIndexIn + \")\");\n      }\n      docBasesDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerDocBase);\n\n      // start pointers\n      startPointers[blockCount] = fieldsIndexIn.readVLong();\n      avgChunkSizes[blockCount] = fieldsIndexIn.readVLong();\n      final int bitsPerStartPointer = fieldsIndexIn.readVInt();\n      if (bitsPerStartPointer > 64) {\n        throw new CorruptIndexException(\"Corrupted bitsPerStartPointer (resource=\" + fieldsIndexIn + \")\");\n      }\n      startPointersDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerStartPointer);\n\n      ++blockCount;\n    }\n\n    this.docBases = Arrays.copyOf(docBases, blockCount);\n    this.startPointers = Arrays.copyOf(startPointers, blockCount);\n    this.avgChunkDocs = Arrays.copyOf(avgChunkDocs, blockCount);\n    this.avgChunkSizes = Arrays.copyOf(avgChunkSizes, blockCount);\n    this.docBasesDeltas = Arrays.copyOf(docBasesDeltas, blockCount);\n    this.startPointersDeltas = Arrays.copyOf(startPointersDeltas, blockCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9a70ce9bddc6f985feb8e5e182aebe20872328d4","date":1411172748,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader#CompressingStoredFieldsIndexReader(IndexInput,SegmentInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader#CompressingStoredFieldsIndexReader(IndexInput,SegmentInfo).mjava","sourceNew":"  // It is the responsibility of the caller to close fieldsIndexIn after this constructor\n  // has been called\n  CompressingStoredFieldsIndexReader(IndexInput fieldsIndexIn, SegmentInfo si) throws IOException {\n    maxDoc = si.getDocCount();\n    int[] docBases = new int[16];\n    long[] startPointers = new long[16];\n    int[] avgChunkDocs = new int[16];\n    long[] avgChunkSizes = new long[16];\n    PackedInts.Reader[] docBasesDeltas = new PackedInts.Reader[16];\n    PackedInts.Reader[] startPointersDeltas = new PackedInts.Reader[16];\n\n    final int packedIntsVersion = fieldsIndexIn.readVInt();\n\n    int blockCount = 0;\n\n    for (;;) {\n      final int numChunks = fieldsIndexIn.readVInt();\n      if (numChunks == 0) {\n        break;\n      }\n      if (blockCount == docBases.length) {\n        final int newSize = ArrayUtil.oversize(blockCount + 1, 8);\n        docBases = Arrays.copyOf(docBases, newSize);\n        startPointers = Arrays.copyOf(startPointers, newSize);\n        avgChunkDocs = Arrays.copyOf(avgChunkDocs, newSize);\n        avgChunkSizes = Arrays.copyOf(avgChunkSizes, newSize);\n        docBasesDeltas = Arrays.copyOf(docBasesDeltas, newSize);\n        startPointersDeltas = Arrays.copyOf(startPointersDeltas, newSize);\n      }\n\n      // doc bases\n      docBases[blockCount] = fieldsIndexIn.readVInt();\n      avgChunkDocs[blockCount] = fieldsIndexIn.readVInt();\n      final int bitsPerDocBase = fieldsIndexIn.readVInt();\n      if (bitsPerDocBase > 32) {\n        throw new CorruptIndexException(\"Corrupted bitsPerDocBase: \" + bitsPerDocBase, fieldsIndexIn);\n      }\n      docBasesDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerDocBase);\n\n      // start pointers\n      startPointers[blockCount] = fieldsIndexIn.readVLong();\n      avgChunkSizes[blockCount] = fieldsIndexIn.readVLong();\n      final int bitsPerStartPointer = fieldsIndexIn.readVInt();\n      if (bitsPerStartPointer > 64) {\n        throw new CorruptIndexException(\"Corrupted bitsPerStartPointer: \" + bitsPerStartPointer, fieldsIndexIn);\n      }\n      startPointersDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerStartPointer);\n\n      ++blockCount;\n    }\n\n    this.docBases = Arrays.copyOf(docBases, blockCount);\n    this.startPointers = Arrays.copyOf(startPointers, blockCount);\n    this.avgChunkDocs = Arrays.copyOf(avgChunkDocs, blockCount);\n    this.avgChunkSizes = Arrays.copyOf(avgChunkSizes, blockCount);\n    this.docBasesDeltas = Arrays.copyOf(docBasesDeltas, blockCount);\n    this.startPointersDeltas = Arrays.copyOf(startPointersDeltas, blockCount);\n  }\n\n","sourceOld":"  // It is the responsibility of the caller to close fieldsIndexIn after this constructor\n  // has been called\n  CompressingStoredFieldsIndexReader(IndexInput fieldsIndexIn, SegmentInfo si) throws IOException {\n    maxDoc = si.getDocCount();\n    int[] docBases = new int[16];\n    long[] startPointers = new long[16];\n    int[] avgChunkDocs = new int[16];\n    long[] avgChunkSizes = new long[16];\n    PackedInts.Reader[] docBasesDeltas = new PackedInts.Reader[16];\n    PackedInts.Reader[] startPointersDeltas = new PackedInts.Reader[16];\n\n    final int packedIntsVersion = fieldsIndexIn.readVInt();\n\n    int blockCount = 0;\n\n    for (;;) {\n      final int numChunks = fieldsIndexIn.readVInt();\n      if (numChunks == 0) {\n        break;\n      }\n      if (blockCount == docBases.length) {\n        final int newSize = ArrayUtil.oversize(blockCount + 1, 8);\n        docBases = Arrays.copyOf(docBases, newSize);\n        startPointers = Arrays.copyOf(startPointers, newSize);\n        avgChunkDocs = Arrays.copyOf(avgChunkDocs, newSize);\n        avgChunkSizes = Arrays.copyOf(avgChunkSizes, newSize);\n        docBasesDeltas = Arrays.copyOf(docBasesDeltas, newSize);\n        startPointersDeltas = Arrays.copyOf(startPointersDeltas, newSize);\n      }\n\n      // doc bases\n      docBases[blockCount] = fieldsIndexIn.readVInt();\n      avgChunkDocs[blockCount] = fieldsIndexIn.readVInt();\n      final int bitsPerDocBase = fieldsIndexIn.readVInt();\n      if (bitsPerDocBase > 32) {\n        throw new CorruptIndexException(\"Corrupted bitsPerDocBase (resource=\" + fieldsIndexIn + \")\");\n      }\n      docBasesDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerDocBase);\n\n      // start pointers\n      startPointers[blockCount] = fieldsIndexIn.readVLong();\n      avgChunkSizes[blockCount] = fieldsIndexIn.readVLong();\n      final int bitsPerStartPointer = fieldsIndexIn.readVInt();\n      if (bitsPerStartPointer > 64) {\n        throw new CorruptIndexException(\"Corrupted bitsPerStartPointer (resource=\" + fieldsIndexIn + \")\");\n      }\n      startPointersDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerStartPointer);\n\n      ++blockCount;\n    }\n\n    this.docBases = Arrays.copyOf(docBases, blockCount);\n    this.startPointers = Arrays.copyOf(startPointers, blockCount);\n    this.avgChunkDocs = Arrays.copyOf(avgChunkDocs, blockCount);\n    this.avgChunkSizes = Arrays.copyOf(avgChunkSizes, blockCount);\n    this.docBasesDeltas = Arrays.copyOf(docBasesDeltas, blockCount);\n    this.startPointersDeltas = Arrays.copyOf(startPointersDeltas, blockCount);\n  }\n\n","bugFix":["90f762b9c981401224de7f0a7c1ffc8fbc67574f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0267c69e2456a3477a1ad785723f2135da3117e","date":1425317087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader#CompressingStoredFieldsIndexReader(IndexInput,SegmentInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader#CompressingStoredFieldsIndexReader(IndexInput,SegmentInfo).mjava","sourceNew":"  // It is the responsibility of the caller to close fieldsIndexIn after this constructor\n  // has been called\n  CompressingStoredFieldsIndexReader(IndexInput fieldsIndexIn, SegmentInfo si) throws IOException {\n    maxDoc = si.maxDoc();\n    int[] docBases = new int[16];\n    long[] startPointers = new long[16];\n    int[] avgChunkDocs = new int[16];\n    long[] avgChunkSizes = new long[16];\n    PackedInts.Reader[] docBasesDeltas = new PackedInts.Reader[16];\n    PackedInts.Reader[] startPointersDeltas = new PackedInts.Reader[16];\n\n    final int packedIntsVersion = fieldsIndexIn.readVInt();\n\n    int blockCount = 0;\n\n    for (;;) {\n      final int numChunks = fieldsIndexIn.readVInt();\n      if (numChunks == 0) {\n        break;\n      }\n      if (blockCount == docBases.length) {\n        final int newSize = ArrayUtil.oversize(blockCount + 1, 8);\n        docBases = Arrays.copyOf(docBases, newSize);\n        startPointers = Arrays.copyOf(startPointers, newSize);\n        avgChunkDocs = Arrays.copyOf(avgChunkDocs, newSize);\n        avgChunkSizes = Arrays.copyOf(avgChunkSizes, newSize);\n        docBasesDeltas = Arrays.copyOf(docBasesDeltas, newSize);\n        startPointersDeltas = Arrays.copyOf(startPointersDeltas, newSize);\n      }\n\n      // doc bases\n      docBases[blockCount] = fieldsIndexIn.readVInt();\n      avgChunkDocs[blockCount] = fieldsIndexIn.readVInt();\n      final int bitsPerDocBase = fieldsIndexIn.readVInt();\n      if (bitsPerDocBase > 32) {\n        throw new CorruptIndexException(\"Corrupted bitsPerDocBase: \" + bitsPerDocBase, fieldsIndexIn);\n      }\n      docBasesDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerDocBase);\n\n      // start pointers\n      startPointers[blockCount] = fieldsIndexIn.readVLong();\n      avgChunkSizes[blockCount] = fieldsIndexIn.readVLong();\n      final int bitsPerStartPointer = fieldsIndexIn.readVInt();\n      if (bitsPerStartPointer > 64) {\n        throw new CorruptIndexException(\"Corrupted bitsPerStartPointer: \" + bitsPerStartPointer, fieldsIndexIn);\n      }\n      startPointersDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerStartPointer);\n\n      ++blockCount;\n    }\n\n    this.docBases = Arrays.copyOf(docBases, blockCount);\n    this.startPointers = Arrays.copyOf(startPointers, blockCount);\n    this.avgChunkDocs = Arrays.copyOf(avgChunkDocs, blockCount);\n    this.avgChunkSizes = Arrays.copyOf(avgChunkSizes, blockCount);\n    this.docBasesDeltas = Arrays.copyOf(docBasesDeltas, blockCount);\n    this.startPointersDeltas = Arrays.copyOf(startPointersDeltas, blockCount);\n  }\n\n","sourceOld":"  // It is the responsibility of the caller to close fieldsIndexIn after this constructor\n  // has been called\n  CompressingStoredFieldsIndexReader(IndexInput fieldsIndexIn, SegmentInfo si) throws IOException {\n    maxDoc = si.getDocCount();\n    int[] docBases = new int[16];\n    long[] startPointers = new long[16];\n    int[] avgChunkDocs = new int[16];\n    long[] avgChunkSizes = new long[16];\n    PackedInts.Reader[] docBasesDeltas = new PackedInts.Reader[16];\n    PackedInts.Reader[] startPointersDeltas = new PackedInts.Reader[16];\n\n    final int packedIntsVersion = fieldsIndexIn.readVInt();\n\n    int blockCount = 0;\n\n    for (;;) {\n      final int numChunks = fieldsIndexIn.readVInt();\n      if (numChunks == 0) {\n        break;\n      }\n      if (blockCount == docBases.length) {\n        final int newSize = ArrayUtil.oversize(blockCount + 1, 8);\n        docBases = Arrays.copyOf(docBases, newSize);\n        startPointers = Arrays.copyOf(startPointers, newSize);\n        avgChunkDocs = Arrays.copyOf(avgChunkDocs, newSize);\n        avgChunkSizes = Arrays.copyOf(avgChunkSizes, newSize);\n        docBasesDeltas = Arrays.copyOf(docBasesDeltas, newSize);\n        startPointersDeltas = Arrays.copyOf(startPointersDeltas, newSize);\n      }\n\n      // doc bases\n      docBases[blockCount] = fieldsIndexIn.readVInt();\n      avgChunkDocs[blockCount] = fieldsIndexIn.readVInt();\n      final int bitsPerDocBase = fieldsIndexIn.readVInt();\n      if (bitsPerDocBase > 32) {\n        throw new CorruptIndexException(\"Corrupted bitsPerDocBase: \" + bitsPerDocBase, fieldsIndexIn);\n      }\n      docBasesDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerDocBase);\n\n      // start pointers\n      startPointers[blockCount] = fieldsIndexIn.readVLong();\n      avgChunkSizes[blockCount] = fieldsIndexIn.readVLong();\n      final int bitsPerStartPointer = fieldsIndexIn.readVInt();\n      if (bitsPerStartPointer > 64) {\n        throw new CorruptIndexException(\"Corrupted bitsPerStartPointer: \" + bitsPerStartPointer, fieldsIndexIn);\n      }\n      startPointersDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerStartPointer);\n\n      ++blockCount;\n    }\n\n    this.docBases = Arrays.copyOf(docBases, blockCount);\n    this.startPointers = Arrays.copyOf(startPointers, blockCount);\n    this.avgChunkDocs = Arrays.copyOf(avgChunkDocs, blockCount);\n    this.avgChunkSizes = Arrays.copyOf(avgChunkSizes, blockCount);\n    this.docBasesDeltas = Arrays.copyOf(docBasesDeltas, blockCount);\n    this.startPointersDeltas = Arrays.copyOf(startPointersDeltas, blockCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b06445ae1731e049327712db0454e5643ca9b7fe","date":1425329139,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader#CompressingStoredFieldsIndexReader(IndexInput,SegmentInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader#CompressingStoredFieldsIndexReader(IndexInput,SegmentInfo).mjava","sourceNew":"  // It is the responsibility of the caller to close fieldsIndexIn after this constructor\n  // has been called\n  CompressingStoredFieldsIndexReader(IndexInput fieldsIndexIn, SegmentInfo si) throws IOException {\n    maxDoc = si.maxDoc();\n    int[] docBases = new int[16];\n    long[] startPointers = new long[16];\n    int[] avgChunkDocs = new int[16];\n    long[] avgChunkSizes = new long[16];\n    PackedInts.Reader[] docBasesDeltas = new PackedInts.Reader[16];\n    PackedInts.Reader[] startPointersDeltas = new PackedInts.Reader[16];\n\n    final int packedIntsVersion = fieldsIndexIn.readVInt();\n\n    int blockCount = 0;\n\n    for (;;) {\n      final int numChunks = fieldsIndexIn.readVInt();\n      if (numChunks == 0) {\n        break;\n      }\n      if (blockCount == docBases.length) {\n        final int newSize = ArrayUtil.oversize(blockCount + 1, 8);\n        docBases = Arrays.copyOf(docBases, newSize);\n        startPointers = Arrays.copyOf(startPointers, newSize);\n        avgChunkDocs = Arrays.copyOf(avgChunkDocs, newSize);\n        avgChunkSizes = Arrays.copyOf(avgChunkSizes, newSize);\n        docBasesDeltas = Arrays.copyOf(docBasesDeltas, newSize);\n        startPointersDeltas = Arrays.copyOf(startPointersDeltas, newSize);\n      }\n\n      // doc bases\n      docBases[blockCount] = fieldsIndexIn.readVInt();\n      avgChunkDocs[blockCount] = fieldsIndexIn.readVInt();\n      final int bitsPerDocBase = fieldsIndexIn.readVInt();\n      if (bitsPerDocBase > 32) {\n        throw new CorruptIndexException(\"Corrupted bitsPerDocBase: \" + bitsPerDocBase, fieldsIndexIn);\n      }\n      docBasesDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerDocBase);\n\n      // start pointers\n      startPointers[blockCount] = fieldsIndexIn.readVLong();\n      avgChunkSizes[blockCount] = fieldsIndexIn.readVLong();\n      final int bitsPerStartPointer = fieldsIndexIn.readVInt();\n      if (bitsPerStartPointer > 64) {\n        throw new CorruptIndexException(\"Corrupted bitsPerStartPointer: \" + bitsPerStartPointer, fieldsIndexIn);\n      }\n      startPointersDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerStartPointer);\n\n      ++blockCount;\n    }\n\n    this.docBases = Arrays.copyOf(docBases, blockCount);\n    this.startPointers = Arrays.copyOf(startPointers, blockCount);\n    this.avgChunkDocs = Arrays.copyOf(avgChunkDocs, blockCount);\n    this.avgChunkSizes = Arrays.copyOf(avgChunkSizes, blockCount);\n    this.docBasesDeltas = Arrays.copyOf(docBasesDeltas, blockCount);\n    this.startPointersDeltas = Arrays.copyOf(startPointersDeltas, blockCount);\n  }\n\n","sourceOld":"  // It is the responsibility of the caller to close fieldsIndexIn after this constructor\n  // has been called\n  CompressingStoredFieldsIndexReader(IndexInput fieldsIndexIn, SegmentInfo si) throws IOException {\n    maxDoc = si.getDocCount();\n    int[] docBases = new int[16];\n    long[] startPointers = new long[16];\n    int[] avgChunkDocs = new int[16];\n    long[] avgChunkSizes = new long[16];\n    PackedInts.Reader[] docBasesDeltas = new PackedInts.Reader[16];\n    PackedInts.Reader[] startPointersDeltas = new PackedInts.Reader[16];\n\n    final int packedIntsVersion = fieldsIndexIn.readVInt();\n\n    int blockCount = 0;\n\n    for (;;) {\n      final int numChunks = fieldsIndexIn.readVInt();\n      if (numChunks == 0) {\n        break;\n      }\n      if (blockCount == docBases.length) {\n        final int newSize = ArrayUtil.oversize(blockCount + 1, 8);\n        docBases = Arrays.copyOf(docBases, newSize);\n        startPointers = Arrays.copyOf(startPointers, newSize);\n        avgChunkDocs = Arrays.copyOf(avgChunkDocs, newSize);\n        avgChunkSizes = Arrays.copyOf(avgChunkSizes, newSize);\n        docBasesDeltas = Arrays.copyOf(docBasesDeltas, newSize);\n        startPointersDeltas = Arrays.copyOf(startPointersDeltas, newSize);\n      }\n\n      // doc bases\n      docBases[blockCount] = fieldsIndexIn.readVInt();\n      avgChunkDocs[blockCount] = fieldsIndexIn.readVInt();\n      final int bitsPerDocBase = fieldsIndexIn.readVInt();\n      if (bitsPerDocBase > 32) {\n        throw new CorruptIndexException(\"Corrupted bitsPerDocBase: \" + bitsPerDocBase, fieldsIndexIn);\n      }\n      docBasesDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerDocBase);\n\n      // start pointers\n      startPointers[blockCount] = fieldsIndexIn.readVLong();\n      avgChunkSizes[blockCount] = fieldsIndexIn.readVLong();\n      final int bitsPerStartPointer = fieldsIndexIn.readVInt();\n      if (bitsPerStartPointer > 64) {\n        throw new CorruptIndexException(\"Corrupted bitsPerStartPointer: \" + bitsPerStartPointer, fieldsIndexIn);\n      }\n      startPointersDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerStartPointer);\n\n      ++blockCount;\n    }\n\n    this.docBases = Arrays.copyOf(docBases, blockCount);\n    this.startPointers = Arrays.copyOf(startPointers, blockCount);\n    this.avgChunkDocs = Arrays.copyOf(avgChunkDocs, blockCount);\n    this.avgChunkSizes = Arrays.copyOf(avgChunkSizes, blockCount);\n    this.docBasesDeltas = Arrays.copyOf(docBasesDeltas, blockCount);\n    this.startPointersDeltas = Arrays.copyOf(startPointersDeltas, blockCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader#CompressingStoredFieldsIndexReader(IndexInput,SegmentInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader#CompressingStoredFieldsIndexReader(IndexInput,SegmentInfo).mjava","sourceNew":"  // It is the responsibility of the caller to close fieldsIndexIn after this constructor\n  // has been called\n  CompressingStoredFieldsIndexReader(IndexInput fieldsIndexIn, SegmentInfo si) throws IOException {\n    maxDoc = si.maxDoc();\n    int[] docBases = new int[16];\n    long[] startPointers = new long[16];\n    int[] avgChunkDocs = new int[16];\n    long[] avgChunkSizes = new long[16];\n    PackedInts.Reader[] docBasesDeltas = new PackedInts.Reader[16];\n    PackedInts.Reader[] startPointersDeltas = new PackedInts.Reader[16];\n\n    final int packedIntsVersion = fieldsIndexIn.readVInt();\n\n    int blockCount = 0;\n\n    for (;;) {\n      final int numChunks = fieldsIndexIn.readVInt();\n      if (numChunks == 0) {\n        break;\n      }\n      if (blockCount == docBases.length) {\n        final int newSize = ArrayUtil.oversize(blockCount + 1, 8);\n        docBases = Arrays.copyOf(docBases, newSize);\n        startPointers = Arrays.copyOf(startPointers, newSize);\n        avgChunkDocs = Arrays.copyOf(avgChunkDocs, newSize);\n        avgChunkSizes = Arrays.copyOf(avgChunkSizes, newSize);\n        docBasesDeltas = Arrays.copyOf(docBasesDeltas, newSize);\n        startPointersDeltas = Arrays.copyOf(startPointersDeltas, newSize);\n      }\n\n      // doc bases\n      docBases[blockCount] = fieldsIndexIn.readVInt();\n      avgChunkDocs[blockCount] = fieldsIndexIn.readVInt();\n      final int bitsPerDocBase = fieldsIndexIn.readVInt();\n      if (bitsPerDocBase > 32) {\n        throw new CorruptIndexException(\"Corrupted bitsPerDocBase: \" + bitsPerDocBase, fieldsIndexIn);\n      }\n      docBasesDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerDocBase);\n\n      // start pointers\n      startPointers[blockCount] = fieldsIndexIn.readVLong();\n      avgChunkSizes[blockCount] = fieldsIndexIn.readVLong();\n      final int bitsPerStartPointer = fieldsIndexIn.readVInt();\n      if (bitsPerStartPointer > 64) {\n        throw new CorruptIndexException(\"Corrupted bitsPerStartPointer: \" + bitsPerStartPointer, fieldsIndexIn);\n      }\n      startPointersDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerStartPointer);\n\n      ++blockCount;\n    }\n\n    this.docBases = Arrays.copyOf(docBases, blockCount);\n    this.startPointers = Arrays.copyOf(startPointers, blockCount);\n    this.avgChunkDocs = Arrays.copyOf(avgChunkDocs, blockCount);\n    this.avgChunkSizes = Arrays.copyOf(avgChunkSizes, blockCount);\n    this.docBasesDeltas = Arrays.copyOf(docBasesDeltas, blockCount);\n    this.startPointersDeltas = Arrays.copyOf(startPointersDeltas, blockCount);\n  }\n\n","sourceOld":"  // It is the responsibility of the caller to close fieldsIndexIn after this constructor\n  // has been called\n  CompressingStoredFieldsIndexReader(IndexInput fieldsIndexIn, SegmentInfo si) throws IOException {\n    maxDoc = si.getDocCount();\n    int[] docBases = new int[16];\n    long[] startPointers = new long[16];\n    int[] avgChunkDocs = new int[16];\n    long[] avgChunkSizes = new long[16];\n    PackedInts.Reader[] docBasesDeltas = new PackedInts.Reader[16];\n    PackedInts.Reader[] startPointersDeltas = new PackedInts.Reader[16];\n\n    final int packedIntsVersion = fieldsIndexIn.readVInt();\n\n    int blockCount = 0;\n\n    for (;;) {\n      final int numChunks = fieldsIndexIn.readVInt();\n      if (numChunks == 0) {\n        break;\n      }\n      if (blockCount == docBases.length) {\n        final int newSize = ArrayUtil.oversize(blockCount + 1, 8);\n        docBases = Arrays.copyOf(docBases, newSize);\n        startPointers = Arrays.copyOf(startPointers, newSize);\n        avgChunkDocs = Arrays.copyOf(avgChunkDocs, newSize);\n        avgChunkSizes = Arrays.copyOf(avgChunkSizes, newSize);\n        docBasesDeltas = Arrays.copyOf(docBasesDeltas, newSize);\n        startPointersDeltas = Arrays.copyOf(startPointersDeltas, newSize);\n      }\n\n      // doc bases\n      docBases[blockCount] = fieldsIndexIn.readVInt();\n      avgChunkDocs[blockCount] = fieldsIndexIn.readVInt();\n      final int bitsPerDocBase = fieldsIndexIn.readVInt();\n      if (bitsPerDocBase > 32) {\n        throw new CorruptIndexException(\"Corrupted bitsPerDocBase: \" + bitsPerDocBase, fieldsIndexIn);\n      }\n      docBasesDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerDocBase);\n\n      // start pointers\n      startPointers[blockCount] = fieldsIndexIn.readVLong();\n      avgChunkSizes[blockCount] = fieldsIndexIn.readVLong();\n      final int bitsPerStartPointer = fieldsIndexIn.readVInt();\n      if (bitsPerStartPointer > 64) {\n        throw new CorruptIndexException(\"Corrupted bitsPerStartPointer: \" + bitsPerStartPointer, fieldsIndexIn);\n      }\n      startPointersDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerStartPointer);\n\n      ++blockCount;\n    }\n\n    this.docBases = Arrays.copyOf(docBases, blockCount);\n    this.startPointers = Arrays.copyOf(startPointers, blockCount);\n    this.avgChunkDocs = Arrays.copyOf(avgChunkDocs, blockCount);\n    this.avgChunkSizes = Arrays.copyOf(avgChunkSizes, blockCount);\n    this.docBasesDeltas = Arrays.copyOf(docBasesDeltas, blockCount);\n    this.startPointersDeltas = Arrays.copyOf(startPointersDeltas, blockCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9798d0818e7a880546802b509792d3f3d57babd2","date":1528358901,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader#CompressingStoredFieldsIndexReader(IndexInput,SegmentInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader#CompressingStoredFieldsIndexReader(IndexInput,SegmentInfo).mjava","sourceNew":"  // It is the responsibility of the caller to close fieldsIndexIn after this constructor\n  // has been called\n  CompressingStoredFieldsIndexReader(IndexInput fieldsIndexIn, SegmentInfo si) throws IOException {\n    maxDoc = si.maxDoc();\n    int[] docBases = new int[16];\n    long[] startPointers = new long[16];\n    int[] avgChunkDocs = new int[16];\n    long[] avgChunkSizes = new long[16];\n    PackedInts.Reader[] docBasesDeltas = new PackedInts.Reader[16];\n    PackedInts.Reader[] startPointersDeltas = new PackedInts.Reader[16];\n\n    final int packedIntsVersion = fieldsIndexIn.readVInt();\n\n    int blockCount = 0;\n\n    for (;;) {\n      final int numChunks = fieldsIndexIn.readVInt();\n      if (numChunks == 0) {\n        break;\n      }\n      if (blockCount == docBases.length) {\n        final int newSize = ArrayUtil.oversize(blockCount + 1, 8);\n        docBases = ArrayUtil.growExact(docBases, newSize);\n        startPointers = ArrayUtil.growExact(startPointers, newSize);\n        avgChunkDocs = ArrayUtil.growExact(avgChunkDocs, newSize);\n        avgChunkSizes = ArrayUtil.growExact(avgChunkSizes, newSize);\n        docBasesDeltas = ArrayUtil.growExact(docBasesDeltas, newSize);\n        startPointersDeltas = ArrayUtil.growExact(startPointersDeltas, newSize);\n      }\n\n      // doc bases\n      docBases[blockCount] = fieldsIndexIn.readVInt();\n      avgChunkDocs[blockCount] = fieldsIndexIn.readVInt();\n      final int bitsPerDocBase = fieldsIndexIn.readVInt();\n      if (bitsPerDocBase > 32) {\n        throw new CorruptIndexException(\"Corrupted bitsPerDocBase: \" + bitsPerDocBase, fieldsIndexIn);\n      }\n      docBasesDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerDocBase);\n\n      // start pointers\n      startPointers[blockCount] = fieldsIndexIn.readVLong();\n      avgChunkSizes[blockCount] = fieldsIndexIn.readVLong();\n      final int bitsPerStartPointer = fieldsIndexIn.readVInt();\n      if (bitsPerStartPointer > 64) {\n        throw new CorruptIndexException(\"Corrupted bitsPerStartPointer: \" + bitsPerStartPointer, fieldsIndexIn);\n      }\n      startPointersDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerStartPointer);\n\n      ++blockCount;\n    }\n\n    this.docBases = ArrayUtil.copyOfSubArray(docBases, 0, blockCount);\n    this.startPointers = ArrayUtil.copyOfSubArray(startPointers, 0, blockCount);\n    this.avgChunkDocs = ArrayUtil.copyOfSubArray(avgChunkDocs, 0, blockCount);\n    this.avgChunkSizes = ArrayUtil.copyOfSubArray(avgChunkSizes, 0, blockCount);\n    this.docBasesDeltas = ArrayUtil.copyOfSubArray(docBasesDeltas, 0, blockCount);\n    this.startPointersDeltas = ArrayUtil.copyOfSubArray(startPointersDeltas, 0, blockCount);\n  }\n\n","sourceOld":"  // It is the responsibility of the caller to close fieldsIndexIn after this constructor\n  // has been called\n  CompressingStoredFieldsIndexReader(IndexInput fieldsIndexIn, SegmentInfo si) throws IOException {\n    maxDoc = si.maxDoc();\n    int[] docBases = new int[16];\n    long[] startPointers = new long[16];\n    int[] avgChunkDocs = new int[16];\n    long[] avgChunkSizes = new long[16];\n    PackedInts.Reader[] docBasesDeltas = new PackedInts.Reader[16];\n    PackedInts.Reader[] startPointersDeltas = new PackedInts.Reader[16];\n\n    final int packedIntsVersion = fieldsIndexIn.readVInt();\n\n    int blockCount = 0;\n\n    for (;;) {\n      final int numChunks = fieldsIndexIn.readVInt();\n      if (numChunks == 0) {\n        break;\n      }\n      if (blockCount == docBases.length) {\n        final int newSize = ArrayUtil.oversize(blockCount + 1, 8);\n        docBases = Arrays.copyOf(docBases, newSize);\n        startPointers = Arrays.copyOf(startPointers, newSize);\n        avgChunkDocs = Arrays.copyOf(avgChunkDocs, newSize);\n        avgChunkSizes = Arrays.copyOf(avgChunkSizes, newSize);\n        docBasesDeltas = Arrays.copyOf(docBasesDeltas, newSize);\n        startPointersDeltas = Arrays.copyOf(startPointersDeltas, newSize);\n      }\n\n      // doc bases\n      docBases[blockCount] = fieldsIndexIn.readVInt();\n      avgChunkDocs[blockCount] = fieldsIndexIn.readVInt();\n      final int bitsPerDocBase = fieldsIndexIn.readVInt();\n      if (bitsPerDocBase > 32) {\n        throw new CorruptIndexException(\"Corrupted bitsPerDocBase: \" + bitsPerDocBase, fieldsIndexIn);\n      }\n      docBasesDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerDocBase);\n\n      // start pointers\n      startPointers[blockCount] = fieldsIndexIn.readVLong();\n      avgChunkSizes[blockCount] = fieldsIndexIn.readVLong();\n      final int bitsPerStartPointer = fieldsIndexIn.readVInt();\n      if (bitsPerStartPointer > 64) {\n        throw new CorruptIndexException(\"Corrupted bitsPerStartPointer: \" + bitsPerStartPointer, fieldsIndexIn);\n      }\n      startPointersDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerStartPointer);\n\n      ++blockCount;\n    }\n\n    this.docBases = Arrays.copyOf(docBases, blockCount);\n    this.startPointers = Arrays.copyOf(startPointers, blockCount);\n    this.avgChunkDocs = Arrays.copyOf(avgChunkDocs, blockCount);\n    this.avgChunkSizes = Arrays.copyOf(avgChunkSizes, blockCount);\n    this.docBasesDeltas = Arrays.copyOf(docBasesDeltas, blockCount);\n    this.startPointersDeltas = Arrays.copyOf(startPointersDeltas, blockCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader#CompressingStoredFieldsIndexReader(IndexInput,SegmentInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader#CompressingStoredFieldsIndexReader(IndexInput,SegmentInfo).mjava","sourceNew":"  // It is the responsibility of the caller to close fieldsIndexIn after this constructor\n  // has been called\n  CompressingStoredFieldsIndexReader(IndexInput fieldsIndexIn, SegmentInfo si) throws IOException {\n    maxDoc = si.maxDoc();\n    int[] docBases = new int[16];\n    long[] startPointers = new long[16];\n    int[] avgChunkDocs = new int[16];\n    long[] avgChunkSizes = new long[16];\n    PackedInts.Reader[] docBasesDeltas = new PackedInts.Reader[16];\n    PackedInts.Reader[] startPointersDeltas = new PackedInts.Reader[16];\n\n    final int packedIntsVersion = fieldsIndexIn.readVInt();\n\n    int blockCount = 0;\n\n    for (;;) {\n      final int numChunks = fieldsIndexIn.readVInt();\n      if (numChunks == 0) {\n        break;\n      }\n      if (blockCount == docBases.length) {\n        final int newSize = ArrayUtil.oversize(blockCount + 1, 8);\n        docBases = ArrayUtil.growExact(docBases, newSize);\n        startPointers = ArrayUtil.growExact(startPointers, newSize);\n        avgChunkDocs = ArrayUtil.growExact(avgChunkDocs, newSize);\n        avgChunkSizes = ArrayUtil.growExact(avgChunkSizes, newSize);\n        docBasesDeltas = ArrayUtil.growExact(docBasesDeltas, newSize);\n        startPointersDeltas = ArrayUtil.growExact(startPointersDeltas, newSize);\n      }\n\n      // doc bases\n      docBases[blockCount] = fieldsIndexIn.readVInt();\n      avgChunkDocs[blockCount] = fieldsIndexIn.readVInt();\n      final int bitsPerDocBase = fieldsIndexIn.readVInt();\n      if (bitsPerDocBase > 32) {\n        throw new CorruptIndexException(\"Corrupted bitsPerDocBase: \" + bitsPerDocBase, fieldsIndexIn);\n      }\n      docBasesDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerDocBase);\n\n      // start pointers\n      startPointers[blockCount] = fieldsIndexIn.readVLong();\n      avgChunkSizes[blockCount] = fieldsIndexIn.readVLong();\n      final int bitsPerStartPointer = fieldsIndexIn.readVInt();\n      if (bitsPerStartPointer > 64) {\n        throw new CorruptIndexException(\"Corrupted bitsPerStartPointer: \" + bitsPerStartPointer, fieldsIndexIn);\n      }\n      startPointersDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerStartPointer);\n\n      ++blockCount;\n    }\n\n    this.docBases = ArrayUtil.copyOfSubArray(docBases, 0, blockCount);\n    this.startPointers = ArrayUtil.copyOfSubArray(startPointers, 0, blockCount);\n    this.avgChunkDocs = ArrayUtil.copyOfSubArray(avgChunkDocs, 0, blockCount);\n    this.avgChunkSizes = ArrayUtil.copyOfSubArray(avgChunkSizes, 0, blockCount);\n    this.docBasesDeltas = ArrayUtil.copyOfSubArray(docBasesDeltas, 0, blockCount);\n    this.startPointersDeltas = ArrayUtil.copyOfSubArray(startPointersDeltas, 0, blockCount);\n  }\n\n","sourceOld":"  // It is the responsibility of the caller to close fieldsIndexIn after this constructor\n  // has been called\n  CompressingStoredFieldsIndexReader(IndexInput fieldsIndexIn, SegmentInfo si) throws IOException {\n    maxDoc = si.maxDoc();\n    int[] docBases = new int[16];\n    long[] startPointers = new long[16];\n    int[] avgChunkDocs = new int[16];\n    long[] avgChunkSizes = new long[16];\n    PackedInts.Reader[] docBasesDeltas = new PackedInts.Reader[16];\n    PackedInts.Reader[] startPointersDeltas = new PackedInts.Reader[16];\n\n    final int packedIntsVersion = fieldsIndexIn.readVInt();\n\n    int blockCount = 0;\n\n    for (;;) {\n      final int numChunks = fieldsIndexIn.readVInt();\n      if (numChunks == 0) {\n        break;\n      }\n      if (blockCount == docBases.length) {\n        final int newSize = ArrayUtil.oversize(blockCount + 1, 8);\n        docBases = Arrays.copyOf(docBases, newSize);\n        startPointers = Arrays.copyOf(startPointers, newSize);\n        avgChunkDocs = Arrays.copyOf(avgChunkDocs, newSize);\n        avgChunkSizes = Arrays.copyOf(avgChunkSizes, newSize);\n        docBasesDeltas = Arrays.copyOf(docBasesDeltas, newSize);\n        startPointersDeltas = Arrays.copyOf(startPointersDeltas, newSize);\n      }\n\n      // doc bases\n      docBases[blockCount] = fieldsIndexIn.readVInt();\n      avgChunkDocs[blockCount] = fieldsIndexIn.readVInt();\n      final int bitsPerDocBase = fieldsIndexIn.readVInt();\n      if (bitsPerDocBase > 32) {\n        throw new CorruptIndexException(\"Corrupted bitsPerDocBase: \" + bitsPerDocBase, fieldsIndexIn);\n      }\n      docBasesDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerDocBase);\n\n      // start pointers\n      startPointers[blockCount] = fieldsIndexIn.readVLong();\n      avgChunkSizes[blockCount] = fieldsIndexIn.readVLong();\n      final int bitsPerStartPointer = fieldsIndexIn.readVInt();\n      if (bitsPerStartPointer > 64) {\n        throw new CorruptIndexException(\"Corrupted bitsPerStartPointer: \" + bitsPerStartPointer, fieldsIndexIn);\n      }\n      startPointersDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerStartPointer);\n\n      ++blockCount;\n    }\n\n    this.docBases = Arrays.copyOf(docBases, blockCount);\n    this.startPointers = Arrays.copyOf(startPointers, blockCount);\n    this.avgChunkDocs = Arrays.copyOf(avgChunkDocs, blockCount);\n    this.avgChunkSizes = Arrays.copyOf(avgChunkSizes, blockCount);\n    this.docBasesDeltas = Arrays.copyOf(docBasesDeltas, blockCount);\n    this.startPointersDeltas = Arrays.copyOf(startPointersDeltas, blockCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader#CompressingStoredFieldsIndexReader(IndexInput,SegmentInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader#CompressingStoredFieldsIndexReader(IndexInput,SegmentInfo).mjava","sourceNew":"  // It is the responsibility of the caller to close fieldsIndexIn after this constructor\n  // has been called\n  CompressingStoredFieldsIndexReader(IndexInput fieldsIndexIn, SegmentInfo si) throws IOException {\n    maxDoc = si.maxDoc();\n    int[] docBases = new int[16];\n    long[] startPointers = new long[16];\n    int[] avgChunkDocs = new int[16];\n    long[] avgChunkSizes = new long[16];\n    PackedInts.Reader[] docBasesDeltas = new PackedInts.Reader[16];\n    PackedInts.Reader[] startPointersDeltas = new PackedInts.Reader[16];\n\n    final int packedIntsVersion = fieldsIndexIn.readVInt();\n\n    int blockCount = 0;\n\n    for (;;) {\n      final int numChunks = fieldsIndexIn.readVInt();\n      if (numChunks == 0) {\n        break;\n      }\n      if (blockCount == docBases.length) {\n        final int newSize = ArrayUtil.oversize(blockCount + 1, 8);\n        docBases = ArrayUtil.growExact(docBases, newSize);\n        startPointers = ArrayUtil.growExact(startPointers, newSize);\n        avgChunkDocs = ArrayUtil.growExact(avgChunkDocs, newSize);\n        avgChunkSizes = ArrayUtil.growExact(avgChunkSizes, newSize);\n        docBasesDeltas = ArrayUtil.growExact(docBasesDeltas, newSize);\n        startPointersDeltas = ArrayUtil.growExact(startPointersDeltas, newSize);\n      }\n\n      // doc bases\n      docBases[blockCount] = fieldsIndexIn.readVInt();\n      avgChunkDocs[blockCount] = fieldsIndexIn.readVInt();\n      final int bitsPerDocBase = fieldsIndexIn.readVInt();\n      if (bitsPerDocBase > 32) {\n        throw new CorruptIndexException(\"Corrupted bitsPerDocBase: \" + bitsPerDocBase, fieldsIndexIn);\n      }\n      docBasesDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerDocBase);\n\n      // start pointers\n      startPointers[blockCount] = fieldsIndexIn.readVLong();\n      avgChunkSizes[blockCount] = fieldsIndexIn.readVLong();\n      final int bitsPerStartPointer = fieldsIndexIn.readVInt();\n      if (bitsPerStartPointer > 64) {\n        throw new CorruptIndexException(\"Corrupted bitsPerStartPointer: \" + bitsPerStartPointer, fieldsIndexIn);\n      }\n      startPointersDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerStartPointer);\n\n      ++blockCount;\n    }\n\n    this.docBases = ArrayUtil.copyOfSubArray(docBases, 0, blockCount);\n    this.startPointers = ArrayUtil.copyOfSubArray(startPointers, 0, blockCount);\n    this.avgChunkDocs = ArrayUtil.copyOfSubArray(avgChunkDocs, 0, blockCount);\n    this.avgChunkSizes = ArrayUtil.copyOfSubArray(avgChunkSizes, 0, blockCount);\n    this.docBasesDeltas = ArrayUtil.copyOfSubArray(docBasesDeltas, 0, blockCount);\n    this.startPointersDeltas = ArrayUtil.copyOfSubArray(startPointersDeltas, 0, blockCount);\n  }\n\n","sourceOld":"  // It is the responsibility of the caller to close fieldsIndexIn after this constructor\n  // has been called\n  CompressingStoredFieldsIndexReader(IndexInput fieldsIndexIn, SegmentInfo si) throws IOException {\n    maxDoc = si.maxDoc();\n    int[] docBases = new int[16];\n    long[] startPointers = new long[16];\n    int[] avgChunkDocs = new int[16];\n    long[] avgChunkSizes = new long[16];\n    PackedInts.Reader[] docBasesDeltas = new PackedInts.Reader[16];\n    PackedInts.Reader[] startPointersDeltas = new PackedInts.Reader[16];\n\n    final int packedIntsVersion = fieldsIndexIn.readVInt();\n\n    int blockCount = 0;\n\n    for (;;) {\n      final int numChunks = fieldsIndexIn.readVInt();\n      if (numChunks == 0) {\n        break;\n      }\n      if (blockCount == docBases.length) {\n        final int newSize = ArrayUtil.oversize(blockCount + 1, 8);\n        docBases = Arrays.copyOf(docBases, newSize);\n        startPointers = Arrays.copyOf(startPointers, newSize);\n        avgChunkDocs = Arrays.copyOf(avgChunkDocs, newSize);\n        avgChunkSizes = Arrays.copyOf(avgChunkSizes, newSize);\n        docBasesDeltas = Arrays.copyOf(docBasesDeltas, newSize);\n        startPointersDeltas = Arrays.copyOf(startPointersDeltas, newSize);\n      }\n\n      // doc bases\n      docBases[blockCount] = fieldsIndexIn.readVInt();\n      avgChunkDocs[blockCount] = fieldsIndexIn.readVInt();\n      final int bitsPerDocBase = fieldsIndexIn.readVInt();\n      if (bitsPerDocBase > 32) {\n        throw new CorruptIndexException(\"Corrupted bitsPerDocBase: \" + bitsPerDocBase, fieldsIndexIn);\n      }\n      docBasesDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerDocBase);\n\n      // start pointers\n      startPointers[blockCount] = fieldsIndexIn.readVLong();\n      avgChunkSizes[blockCount] = fieldsIndexIn.readVLong();\n      final int bitsPerStartPointer = fieldsIndexIn.readVInt();\n      if (bitsPerStartPointer > 64) {\n        throw new CorruptIndexException(\"Corrupted bitsPerStartPointer: \" + bitsPerStartPointer, fieldsIndexIn);\n      }\n      startPointersDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerStartPointer);\n\n      ++blockCount;\n    }\n\n    this.docBases = Arrays.copyOf(docBases, blockCount);\n    this.startPointers = Arrays.copyOf(startPointers, blockCount);\n    this.avgChunkDocs = Arrays.copyOf(avgChunkDocs, blockCount);\n    this.avgChunkSizes = Arrays.copyOf(avgChunkSizes, blockCount);\n    this.docBasesDeltas = Arrays.copyOf(docBasesDeltas, blockCount);\n    this.startPointersDeltas = Arrays.copyOf(startPointersDeltas, blockCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70a4487b07c49a1861c05720e04624826ecbe9fa","date":1580924108,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LegacyFieldsIndexReader#LegacyFieldsIndexReader(IndexInput,SegmentInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader#CompressingStoredFieldsIndexReader(IndexInput,SegmentInfo).mjava","sourceNew":"  // It is the responsibility of the caller to close fieldsIndexIn after this constructor\n  // has been called\n  LegacyFieldsIndexReader(IndexInput fieldsIndexIn, SegmentInfo si) throws IOException {\n    maxDoc = si.maxDoc();\n    int[] docBases = new int[16];\n    long[] startPointers = new long[16];\n    int[] avgChunkDocs = new int[16];\n    long[] avgChunkSizes = new long[16];\n    PackedInts.Reader[] docBasesDeltas = new PackedInts.Reader[16];\n    PackedInts.Reader[] startPointersDeltas = new PackedInts.Reader[16];\n\n    final int packedIntsVersion = fieldsIndexIn.readVInt();\n\n    int blockCount = 0;\n\n    for (;;) {\n      final int numChunks = fieldsIndexIn.readVInt();\n      if (numChunks == 0) {\n        break;\n      }\n      if (blockCount == docBases.length) {\n        final int newSize = ArrayUtil.oversize(blockCount + 1, 8);\n        docBases = ArrayUtil.growExact(docBases, newSize);\n        startPointers = ArrayUtil.growExact(startPointers, newSize);\n        avgChunkDocs = ArrayUtil.growExact(avgChunkDocs, newSize);\n        avgChunkSizes = ArrayUtil.growExact(avgChunkSizes, newSize);\n        docBasesDeltas = ArrayUtil.growExact(docBasesDeltas, newSize);\n        startPointersDeltas = ArrayUtil.growExact(startPointersDeltas, newSize);\n      }\n\n      // doc bases\n      docBases[blockCount] = fieldsIndexIn.readVInt();\n      avgChunkDocs[blockCount] = fieldsIndexIn.readVInt();\n      final int bitsPerDocBase = fieldsIndexIn.readVInt();\n      if (bitsPerDocBase > 32) {\n        throw new CorruptIndexException(\"Corrupted bitsPerDocBase: \" + bitsPerDocBase, fieldsIndexIn);\n      }\n      docBasesDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerDocBase);\n\n      // start pointers\n      startPointers[blockCount] = fieldsIndexIn.readVLong();\n      avgChunkSizes[blockCount] = fieldsIndexIn.readVLong();\n      final int bitsPerStartPointer = fieldsIndexIn.readVInt();\n      if (bitsPerStartPointer > 64) {\n        throw new CorruptIndexException(\"Corrupted bitsPerStartPointer: \" + bitsPerStartPointer, fieldsIndexIn);\n      }\n      startPointersDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerStartPointer);\n\n      ++blockCount;\n    }\n\n    this.docBases = ArrayUtil.copyOfSubArray(docBases, 0, blockCount);\n    this.startPointers = ArrayUtil.copyOfSubArray(startPointers, 0, blockCount);\n    this.avgChunkDocs = ArrayUtil.copyOfSubArray(avgChunkDocs, 0, blockCount);\n    this.avgChunkSizes = ArrayUtil.copyOfSubArray(avgChunkSizes, 0, blockCount);\n    this.docBasesDeltas = ArrayUtil.copyOfSubArray(docBasesDeltas, 0, blockCount);\n    this.startPointersDeltas = ArrayUtil.copyOfSubArray(startPointersDeltas, 0, blockCount);\n  }\n\n","sourceOld":"  // It is the responsibility of the caller to close fieldsIndexIn after this constructor\n  // has been called\n  CompressingStoredFieldsIndexReader(IndexInput fieldsIndexIn, SegmentInfo si) throws IOException {\n    maxDoc = si.maxDoc();\n    int[] docBases = new int[16];\n    long[] startPointers = new long[16];\n    int[] avgChunkDocs = new int[16];\n    long[] avgChunkSizes = new long[16];\n    PackedInts.Reader[] docBasesDeltas = new PackedInts.Reader[16];\n    PackedInts.Reader[] startPointersDeltas = new PackedInts.Reader[16];\n\n    final int packedIntsVersion = fieldsIndexIn.readVInt();\n\n    int blockCount = 0;\n\n    for (;;) {\n      final int numChunks = fieldsIndexIn.readVInt();\n      if (numChunks == 0) {\n        break;\n      }\n      if (blockCount == docBases.length) {\n        final int newSize = ArrayUtil.oversize(blockCount + 1, 8);\n        docBases = ArrayUtil.growExact(docBases, newSize);\n        startPointers = ArrayUtil.growExact(startPointers, newSize);\n        avgChunkDocs = ArrayUtil.growExact(avgChunkDocs, newSize);\n        avgChunkSizes = ArrayUtil.growExact(avgChunkSizes, newSize);\n        docBasesDeltas = ArrayUtil.growExact(docBasesDeltas, newSize);\n        startPointersDeltas = ArrayUtil.growExact(startPointersDeltas, newSize);\n      }\n\n      // doc bases\n      docBases[blockCount] = fieldsIndexIn.readVInt();\n      avgChunkDocs[blockCount] = fieldsIndexIn.readVInt();\n      final int bitsPerDocBase = fieldsIndexIn.readVInt();\n      if (bitsPerDocBase > 32) {\n        throw new CorruptIndexException(\"Corrupted bitsPerDocBase: \" + bitsPerDocBase, fieldsIndexIn);\n      }\n      docBasesDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerDocBase);\n\n      // start pointers\n      startPointers[blockCount] = fieldsIndexIn.readVLong();\n      avgChunkSizes[blockCount] = fieldsIndexIn.readVLong();\n      final int bitsPerStartPointer = fieldsIndexIn.readVInt();\n      if (bitsPerStartPointer > 64) {\n        throw new CorruptIndexException(\"Corrupted bitsPerStartPointer: \" + bitsPerStartPointer, fieldsIndexIn);\n      }\n      startPointersDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerStartPointer);\n\n      ++blockCount;\n    }\n\n    this.docBases = ArrayUtil.copyOfSubArray(docBases, 0, blockCount);\n    this.startPointers = ArrayUtil.copyOfSubArray(startPointers, 0, blockCount);\n    this.avgChunkDocs = ArrayUtil.copyOfSubArray(avgChunkDocs, 0, blockCount);\n    this.avgChunkSizes = ArrayUtil.copyOfSubArray(avgChunkSizes, 0, blockCount);\n    this.docBasesDeltas = ArrayUtil.copyOfSubArray(docBasesDeltas, 0, blockCount);\n    this.startPointersDeltas = ArrayUtil.copyOfSubArray(startPointersDeltas, 0, blockCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90f762b9c981401224de7f0a7c1ffc8fbc67574f":["5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69"],"b0267c69e2456a3477a1ad785723f2135da3117e":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69"],"70a4487b07c49a1861c05720e04624826ecbe9fa":["9798d0818e7a880546802b509792d3f3d57babd2"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["9a70ce9bddc6f985feb8e5e182aebe20872328d4","b0267c69e2456a3477a1ad785723f2135da3117e"],"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["818c86419d333447415a4e14fec4365320992e26"],"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b06445ae1731e049327712db0454e5643ca9b7fe":["9a70ce9bddc6f985feb8e5e182aebe20872328d4","b0267c69e2456a3477a1ad785723f2135da3117e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["b0267c69e2456a3477a1ad785723f2135da3117e","9798d0818e7a880546802b509792d3f3d57babd2"],"818c86419d333447415a4e14fec4365320992e26":["90f762b9c981401224de7f0a7c1ffc8fbc67574f"],"9798d0818e7a880546802b509792d3f3d57babd2":["b0267c69e2456a3477a1ad785723f2135da3117e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70a4487b07c49a1861c05720e04624826ecbe9fa"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["b0267c69e2456a3477a1ad785723f2135da3117e","9798d0818e7a880546802b509792d3f3d57babd2"]},"commit2Childs":{"90f762b9c981401224de7f0a7c1ffc8fbc67574f":["818c86419d333447415a4e14fec4365320992e26"],"b0267c69e2456a3477a1ad785723f2135da3117e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","b70042a8a492f7054d480ccdd2be9796510d4327","9798d0818e7a880546802b509792d3f3d57babd2","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"70a4487b07c49a1861c05720e04624826ecbe9fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["b0267c69e2456a3477a1ad785723f2135da3117e","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe"],"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69":["90f762b9c981401224de7f0a7c1ffc8fbc67574f","407687e67faf6e1f02a211ca078d8e3eed631027"],"b06445ae1731e049327712db0454e5643ca9b7fe":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["407687e67faf6e1f02a211ca078d8e3eed631027","5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"818c86419d333447415a4e14fec4365320992e26":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"9798d0818e7a880546802b509792d3f3d57babd2":["70a4487b07c49a1861c05720e04624826ecbe9fa","b70042a8a492f7054d480ccdd2be9796510d4327","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}