{"path":"solr/core/src/test/org/apache/solr/cloud/TestRandomFlRTGCloud#addRandomDocument(int).mjava","commits":[{"id":"136796946c32863f11b97ebec6b4091cdfe3a20b","date":1468862468,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRandomFlRTGCloud#addRandomDocument(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Adds one randomly generated document with the specified docId, asserting success, and returns \n   * the document added\n   */\n  private SolrInputDocument addRandomDocument(final int docId) throws IOException, SolrServerException {\n    final SolrClient client = getRandClient(random());\n    \n    final SolrInputDocument doc = sdoc(\"id\", \"\" + docId,\n                                       \"aaa_i\", random().nextInt(),\n                                       \"bbb_i\", random().nextInt(),\n                                       //\n                                       \"ccc_s\", TestUtil.randomSimpleString(random()),\n                                       \"ddd_s\", TestUtil.randomSimpleString(random()),\n                                       //\n                                       \"axx_i\", random().nextInt(),\n                                       \"ayy_i\", random().nextInt(),\n                                       \"azz_s\", TestUtil.randomSimpleString(random()));\n    \n    log.info(\"ADD: {} = {}\", docId, doc);\n    assertEquals(0, client.add(doc).getStatus());\n    return doc;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbfb6ddad2ec9fa9128265741535450c3cbc4344","date":1470329280,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRandomFlRTGCloud#addRandomDocument(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRandomFlRTGCloud#addRandomDocument(int).mjava","sourceNew":"  /**\n   * Adds one randomly generated document with the specified docId, asserting success, and returns \n   * the document added\n   */\n  private SolrInputDocument addRandomDocument(final int docId) throws IOException, SolrServerException {\n    final SolrClient client = getRandClient(random());\n\n    final SolrInputDocument doc = sdoc(\"id\", \"\" + docId,\n                                       \"aaa_i\", random().nextInt(),\n                                       \"bbb_i\", random().nextInt(),\n                                       //\n                                       \"ccc_s\", TestUtil.randomSimpleString(random()),\n                                       \"ddd_s\", TestUtil.randomSimpleString(random()),\n                                       \"eee_s\", TestUtil.randomSimpleString(random()),\n                                       \"fff_s\", TestUtil.randomSimpleString(random()),\n                                       \"ggg_s\", TestUtil.randomSimpleString(random()),\n                                       \"hhh_s\", TestUtil.randomSimpleString(random()),\n                                       //\n                                       \"geo_1_srpt\", GeoTransformerValidator.getValueForIndexing(random()),\n                                       \"geo_2_srpt\", GeoTransformerValidator.getValueForIndexing(random()),\n                                       // for testing prefix globbing\n                                       \"axx_i\", random().nextInt(),\n                                       \"ayy_i\", random().nextInt(),\n                                       \"azz_s\", TestUtil.randomSimpleString(random()));\n    \n    log.info(\"ADD: {} = {}\", docId, doc);\n    assertEquals(0, client.add(doc).getStatus());\n    return doc;\n  }\n\n","sourceOld":"  /**\n   * Adds one randomly generated document with the specified docId, asserting success, and returns \n   * the document added\n   */\n  private SolrInputDocument addRandomDocument(final int docId) throws IOException, SolrServerException {\n    final SolrClient client = getRandClient(random());\n    \n    final SolrInputDocument doc = sdoc(\"id\", \"\" + docId,\n                                       \"aaa_i\", random().nextInt(),\n                                       \"bbb_i\", random().nextInt(),\n                                       //\n                                       \"ccc_s\", TestUtil.randomSimpleString(random()),\n                                       \"ddd_s\", TestUtil.randomSimpleString(random()),\n                                       //\n                                       \"axx_i\", random().nextInt(),\n                                       \"ayy_i\", random().nextInt(),\n                                       \"azz_s\", TestUtil.randomSimpleString(random()));\n    \n    log.info(\"ADD: {} = {}\", docId, doc);\n    assertEquals(0, client.add(doc).getStatus());\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3237bc9583fd899fcf68bae4cc834095f5c911bf","date":1470710919,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRandomFlRTGCloud#addRandomDocument(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRandomFlRTGCloud#addRandomDocument(int).mjava","sourceNew":"  /**\n   * Adds one randomly generated document with the specified docId, asserting success, and returns \n   * the document added\n   */\n  private SolrInputDocument addRandomDocument(final int docId) throws IOException, SolrServerException {\n    final SolrClient client = getRandClient(random());\n\n    final SolrInputDocument doc = sdoc(\"id\", \"\" + docId,\n                                       \"aaa_i\", random().nextInt(),\n                                       \"bbb_i\", random().nextInt(),\n                                       //\n                                       \"ccc_s\", TestUtil.randomSimpleString(random()),\n                                       \"ddd_s\", TestUtil.randomSimpleString(random()),\n                                       \"eee_s\", TestUtil.randomSimpleString(random()),\n                                       \"fff_s\", TestUtil.randomSimpleString(random()),\n                                       \"ggg_s\", TestUtil.randomSimpleString(random()),\n                                       \"hhh_s\", TestUtil.randomSimpleString(random()),\n                                       //\n                                       \"geo_1_srpt\", GeoTransformerValidator.getValueForIndexing(random()),\n                                       \"geo_2_srpt\", GeoTransformerValidator.getValueForIndexing(random()),\n                                       // for testing subqueries\n                                       \"next_2_ids_ss\", String.valueOf(docId + 1),\n                                       \"next_2_ids_ss\", String.valueOf(docId + 2),\n                                       // for testing prefix globbing\n                                       \"axx_i\", random().nextInt(),\n                                       \"ayy_i\", random().nextInt(),\n                                       \"azz_s\", TestUtil.randomSimpleString(random()));\n    \n    log.info(\"ADD: {} = {}\", docId, doc);\n    assertEquals(0, client.add(doc).getStatus());\n    return doc;\n  }\n\n","sourceOld":"  /**\n   * Adds one randomly generated document with the specified docId, asserting success, and returns \n   * the document added\n   */\n  private SolrInputDocument addRandomDocument(final int docId) throws IOException, SolrServerException {\n    final SolrClient client = getRandClient(random());\n\n    final SolrInputDocument doc = sdoc(\"id\", \"\" + docId,\n                                       \"aaa_i\", random().nextInt(),\n                                       \"bbb_i\", random().nextInt(),\n                                       //\n                                       \"ccc_s\", TestUtil.randomSimpleString(random()),\n                                       \"ddd_s\", TestUtil.randomSimpleString(random()),\n                                       \"eee_s\", TestUtil.randomSimpleString(random()),\n                                       \"fff_s\", TestUtil.randomSimpleString(random()),\n                                       \"ggg_s\", TestUtil.randomSimpleString(random()),\n                                       \"hhh_s\", TestUtil.randomSimpleString(random()),\n                                       //\n                                       \"geo_1_srpt\", GeoTransformerValidator.getValueForIndexing(random()),\n                                       \"geo_2_srpt\", GeoTransformerValidator.getValueForIndexing(random()),\n                                       // for testing prefix globbing\n                                       \"axx_i\", random().nextInt(),\n                                       \"ayy_i\", random().nextInt(),\n                                       \"azz_s\", TestUtil.randomSimpleString(random()));\n    \n    log.info(\"ADD: {} = {}\", docId, doc);\n    assertEquals(0, client.add(doc).getStatus());\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bca25eefa1f2205e2b0ef713701dc3a0fecd702","date":1470810578,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRandomFlRTGCloud#addRandomDocument(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRandomFlRTGCloud#addRandomDocument(int).mjava","sourceNew":"  /**\n   * Adds one randomly generated document with the specified docId, asserting success, and returns \n   * the document added\n   */\n  private SolrInputDocument addRandomDocument(final int docId) throws IOException, SolrServerException {\n    final SolrClient client = getRandClient(random());\n\n    final SolrInputDocument doc = sdoc(\"id\", \"\" + docId,\n                                       \"aaa_i\", random().nextInt(),\n                                       \"bbb_i\", random().nextInt(),\n                                       //\n                                       \"ccc_s\", TestUtil.randomSimpleString(random()),\n                                       \"ddd_s\", TestUtil.randomSimpleString(random()),\n                                       \"eee_s\", TestUtil.randomSimpleString(random()),\n                                       \"fff_s\", TestUtil.randomSimpleString(random()),\n                                       \"ggg_s\", TestUtil.randomSimpleString(random()),\n                                       \"hhh_s\", TestUtil.randomSimpleString(random()),\n                                       //\n                                       \"geo_1_srpt\", GeoTransformerValidator.getValueForIndexing(random()),\n                                       \"geo_2_srpt\", GeoTransformerValidator.getValueForIndexing(random()),\n                                       // for testing subqueries\n                                       \"next_2_ids_ss\", String.valueOf(docId + 1),\n                                       \"next_2_ids_ss\", String.valueOf(docId + 2),\n                                       // for testing prefix globbing\n                                       \"axx_i\", random().nextInt(),\n                                       \"ayy_i\", random().nextInt(),\n                                       \"azz_s\", TestUtil.randomSimpleString(random()));\n    \n    log.info(\"ADD: {} = {}\", docId, doc);\n    assertEquals(0, client.add(doc).getStatus());\n    return doc;\n  }\n\n","sourceOld":"  /**\n   * Adds one randomly generated document with the specified docId, asserting success, and returns \n   * the document added\n   */\n  private SolrInputDocument addRandomDocument(final int docId) throws IOException, SolrServerException {\n    final SolrClient client = getRandClient(random());\n\n    final SolrInputDocument doc = sdoc(\"id\", \"\" + docId,\n                                       \"aaa_i\", random().nextInt(),\n                                       \"bbb_i\", random().nextInt(),\n                                       //\n                                       \"ccc_s\", TestUtil.randomSimpleString(random()),\n                                       \"ddd_s\", TestUtil.randomSimpleString(random()),\n                                       \"eee_s\", TestUtil.randomSimpleString(random()),\n                                       \"fff_s\", TestUtil.randomSimpleString(random()),\n                                       \"ggg_s\", TestUtil.randomSimpleString(random()),\n                                       \"hhh_s\", TestUtil.randomSimpleString(random()),\n                                       //\n                                       \"geo_1_srpt\", GeoTransformerValidator.getValueForIndexing(random()),\n                                       \"geo_2_srpt\", GeoTransformerValidator.getValueForIndexing(random()),\n                                       // for testing prefix globbing\n                                       \"axx_i\", random().nextInt(),\n                                       \"ayy_i\", random().nextInt(),\n                                       \"azz_s\", TestUtil.randomSimpleString(random()));\n    \n    log.info(\"ADD: {} = {}\", docId, doc);\n    assertEquals(0, client.add(doc).getStatus());\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRandomFlRTGCloud#addRandomDocument(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRandomFlRTGCloud#addRandomDocument(int).mjava","sourceNew":"  /**\n   * Adds one randomly generated document with the specified docId, asserting success, and returns \n   * the document added\n   */\n  private SolrInputDocument addRandomDocument(final int docId) throws IOException, SolrServerException {\n    final SolrClient client = getRandClient(random());\n\n    final SolrInputDocument doc = sdoc(\"id\", \"\" + docId,\n                                       \"aaa_i\", random().nextInt(),\n                                       \"bbb_i\", random().nextInt(),\n                                       //\n                                       \"ccc_s\", TestUtil.randomSimpleString(random()),\n                                       \"ddd_s\", TestUtil.randomSimpleString(random()),\n                                       \"eee_s\", TestUtil.randomSimpleString(random()),\n                                       \"fff_s\", TestUtil.randomSimpleString(random()),\n                                       \"ggg_s\", TestUtil.randomSimpleString(random()),\n                                       \"hhh_s\", TestUtil.randomSimpleString(random()),\n                                       //\n                                       \"geo_1_srpt\", GeoTransformerValidator.getValueForIndexing(random()),\n                                       \"geo_2_srpt\", GeoTransformerValidator.getValueForIndexing(random()),\n                                       // for testing subqueries\n                                       \"next_2_ids_ss\", String.valueOf(docId + 1),\n                                       \"next_2_ids_ss\", String.valueOf(docId + 2),\n                                       // for testing prefix globbing\n                                       \"axx_i\", random().nextInt(),\n                                       \"ayy_i\", random().nextInt(),\n                                       \"azz_s\", TestUtil.randomSimpleString(random()));\n    \n    log.info(\"ADD: {} = {}\", docId, doc);\n    assertEquals(0, client.add(doc).getStatus());\n    return doc;\n  }\n\n","sourceOld":"  /**\n   * Adds one randomly generated document with the specified docId, asserting success, and returns \n   * the document added\n   */\n  private SolrInputDocument addRandomDocument(final int docId) throws IOException, SolrServerException {\n    final SolrClient client = getRandClient(random());\n    \n    final SolrInputDocument doc = sdoc(\"id\", \"\" + docId,\n                                       \"aaa_i\", random().nextInt(),\n                                       \"bbb_i\", random().nextInt(),\n                                       //\n                                       \"ccc_s\", TestUtil.randomSimpleString(random()),\n                                       \"ddd_s\", TestUtil.randomSimpleString(random()),\n                                       //\n                                       \"axx_i\", random().nextInt(),\n                                       \"ayy_i\", random().nextInt(),\n                                       \"azz_s\", TestUtil.randomSimpleString(random()));\n    \n    log.info(\"ADD: {} = {}\", docId, doc);\n    assertEquals(0, client.add(doc).getStatus());\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRandomFlRTGCloud#addRandomDocument(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Adds one randomly generated document with the specified docId, asserting success, and returns \n   * the document added\n   */\n  private SolrInputDocument addRandomDocument(final int docId) throws IOException, SolrServerException {\n    final SolrClient client = getRandClient(random());\n\n    final SolrInputDocument doc = sdoc(\"id\", \"\" + docId,\n                                       \"aaa_i\", random().nextInt(),\n                                       \"bbb_i\", random().nextInt(),\n                                       //\n                                       \"ccc_s\", TestUtil.randomSimpleString(random()),\n                                       \"ddd_s\", TestUtil.randomSimpleString(random()),\n                                       \"eee_s\", TestUtil.randomSimpleString(random()),\n                                       \"fff_s\", TestUtil.randomSimpleString(random()),\n                                       \"ggg_s\", TestUtil.randomSimpleString(random()),\n                                       \"hhh_s\", TestUtil.randomSimpleString(random()),\n                                       //\n                                       \"geo_1_srpt\", GeoTransformerValidator.getValueForIndexing(random()),\n                                       \"geo_2_srpt\", GeoTransformerValidator.getValueForIndexing(random()),\n                                       // for testing subqueries\n                                       \"next_2_ids_ss\", String.valueOf(docId + 1),\n                                       \"next_2_ids_ss\", String.valueOf(docId + 2),\n                                       // for testing prefix globbing\n                                       \"axx_i\", random().nextInt(),\n                                       \"ayy_i\", random().nextInt(),\n                                       \"azz_s\", TestUtil.randomSimpleString(random()));\n    \n    log.info(\"ADD: {} = {}\", docId, doc);\n    assertEquals(0, client.add(doc).getStatus());\n    return doc;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["fbfb6ddad2ec9fa9128265741535450c3cbc4344","3237bc9583fd899fcf68bae4cc834095f5c911bf"],"fbfb6ddad2ec9fa9128265741535450c3cbc4344":["136796946c32863f11b97ebec6b4091cdfe3a20b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"136796946c32863f11b97ebec6b4091cdfe3a20b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["136796946c32863f11b97ebec6b4091cdfe3a20b","8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"3237bc9583fd899fcf68bae4cc834095f5c911bf":["fbfb6ddad2ec9fa9128265741535450c3cbc4344"]},"commit2Childs":{"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fbfb6ddad2ec9fa9128265741535450c3cbc4344":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702","3237bc9583fd899fcf68bae4cc834095f5c911bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["136796946c32863f11b97ebec6b4091cdfe3a20b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"136796946c32863f11b97ebec6b4091cdfe3a20b":["fbfb6ddad2ec9fa9128265741535450c3cbc4344","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"3237bc9583fd899fcf68bae4cc834095f5c911bf":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}