{"path":"solr/core/src/test/org/apache/solr/cloud/DeleteStatusTest#testDeleteStatus().mjava","commits":[{"id":"e0b734049423191fc1079a874b216c07ad0722a0","date":1454966146,"type":0,"author":"anshum","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteStatusTest#testDeleteStatus().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDeleteStatus() throws IOException, SolrServerException {\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n    create.setCollectionName(\"requeststatus\")\n        .setConfigName(\"conf1\")\n        .setReplicationFactor(1)\n        .setNumShards(1)\n        .setAsyncId(\"collectioncreate\")\n        .process(cloudClient);\n\n    RequestStatusState state = getRequestStateAfterCompletion(\"collectioncreate\", 30, cloudClient);\n    assertSame(RequestStatusState.COMPLETED, state);\n\n    // Let's delete the stored response now\n    CollectionAdminRequest.DeleteStatus deleteStatus = new CollectionAdminRequest.DeleteStatus();\n    CollectionAdminResponse rsp = deleteStatus\n        .setRequestId(\"collectioncreate\")\n        .process(cloudClient);\n    assertEquals(\"successfully removed stored response for [collectioncreate]\", rsp.getResponse().get(\"status\"));\n\n    // Make sure that the response was deleted from zk\n    state = getRequestState(\"collectioncreate\", cloudClient);\n    assertSame(RequestStatusState.NOT_FOUND, state);\n\n    // Try deleting the same requestid again\n    deleteStatus = new CollectionAdminRequest.DeleteStatus();\n    rsp = deleteStatus\n        .setRequestId(\"collectioncreate\")\n        .process(cloudClient);\n    assertEquals(\"[collectioncreate] not found in stored responses\", rsp.getResponse().get(\"status\"));\n\n    // Let's try deleting a non-existent status\n    deleteStatus = new CollectionAdminRequest.DeleteStatus();\n    rsp = deleteStatus\n        .setRequestId(\"foo\")\n        .process(cloudClient);\n    assertEquals(\"[foo] not found in stored responses\", rsp.getResponse().get(\"status\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daed6b66edd950a7f2af9857df64b09acf3deacc","date":1457527865,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteStatusTest#testDeleteStatus().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testDeleteStatus() throws IOException, SolrServerException {\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n    create.setCollectionName(\"requeststatus\")\n        .setConfigName(\"conf1\")\n        .setReplicationFactor(1)\n        .setNumShards(1)\n        .setAsyncId(\"collectioncreate\")\n        .process(cloudClient);\n\n    RequestStatusState state = getRequestStateAfterCompletion(\"collectioncreate\", 30, cloudClient);\n    assertSame(RequestStatusState.COMPLETED, state);\n\n    // Let's delete the stored response now\n    CollectionAdminRequest.DeleteStatus deleteStatus = new CollectionAdminRequest.DeleteStatus();\n    CollectionAdminResponse rsp = deleteStatus\n        .setRequestId(\"collectioncreate\")\n        .process(cloudClient);\n    assertEquals(\"successfully removed stored response for [collectioncreate]\", rsp.getResponse().get(\"status\"));\n\n    // Make sure that the response was deleted from zk\n    state = getRequestState(\"collectioncreate\", cloudClient);\n    assertSame(RequestStatusState.NOT_FOUND, state);\n\n    // Try deleting the same requestid again\n    deleteStatus = new CollectionAdminRequest.DeleteStatus();\n    rsp = deleteStatus\n        .setRequestId(\"collectioncreate\")\n        .process(cloudClient);\n    assertEquals(\"[collectioncreate] not found in stored responses\", rsp.getResponse().get(\"status\"));\n\n    // Let's try deleting a non-existent status\n    deleteStatus = new CollectionAdminRequest.DeleteStatus();\n    rsp = deleteStatus\n        .setRequestId(\"foo\")\n        .process(cloudClient);\n    assertEquals(\"[foo] not found in stored responses\", rsp.getResponse().get(\"status\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e0b734049423191fc1079a874b216c07ad0722a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"daed6b66edd950a7f2af9857df64b09acf3deacc":["e0b734049423191fc1079a874b216c07ad0722a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["daed6b66edd950a7f2af9857df64b09acf3deacc"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e0b734049423191fc1079a874b216c07ad0722a0"],"e0b734049423191fc1079a874b216c07ad0722a0":["daed6b66edd950a7f2af9857df64b09acf3deacc"],"daed6b66edd950a7f2af9857df64b09acf3deacc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}