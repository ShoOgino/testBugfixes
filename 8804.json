{"path":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeNoTargetTest#test().mjava","commits":[{"id":"135a17bf08af5eaa5db73b2de6d1e36ea2ecafa1","date":1517395742,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeNoTargetTest#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String coll = \"replacenodetest_coll_notarget\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String node2bdecommissioned = l.get(0);\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'}]}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2, 0, 0);\n\n    cloudClient.request(create);\n    createReplaceNodeRequest(node2bdecommissioned, null, null).processAsync(\"001\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n    boolean success = false;\n    for (int i = 0; i < 300; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(node2bdecommissioned))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertTrue(status.getCoreStatus().size() == 0);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aaad5e230722cbab5a320e6b49b86ddf262c21a8","date":1519688244,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeNoTargetTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeNoTargetTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String coll = \"replacenodetest_coll_notarget\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String node2bdecommissioned = l.get(0);\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'}]}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    log.info(\"Creating collection...\");\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2, 0, 0);\n    cloudClient.request(create);\n\n    log.info(\"Current core status list for node we plan to decommision: {} => {}\",\n             node2bdecommissioned,\n             getCoreStatusForNamedNode(cloudClient, node2bdecommissioned).getCoreStatus());\n    \n    log.info(\"Decommisioning node: \" + node2bdecommissioned);\n    createReplaceNodeRequest(node2bdecommissioned, null, null).processAsync(\"001\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n    boolean success = false;\n    CollectionAdminRequest.RequestStatusResponse rsp = null;\n    for (int i = 0; i < 300; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(\"async replace node request aparently failed: \" + rsp.toString(),\n                  \n                  rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(\"async replace node request should have finished successfully by now, last status: \" + rsp,\n               success);\n    CoreAdminResponse status = getCoreStatusForNamedNode(cloudClient, node2bdecommissioned);\n    assertEquals(\"Expected no cores for decommisioned node: \"\n                 + status.getCoreStatus().toString(),\n                 0, status.getCoreStatus().size());\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String coll = \"replacenodetest_coll_notarget\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String node2bdecommissioned = l.get(0);\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'}]}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2, 0, 0);\n\n    cloudClient.request(create);\n    createReplaceNodeRequest(node2bdecommissioned, null, null).processAsync(\"001\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n    boolean success = false;\n    for (int i = 0; i < 300; i++) {\n      CollectionAdminRequest.RequestStatusResponse rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(success);\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(node2bdecommissioned))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      assertTrue(status.getCoreStatus().size() == 0);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ff5e25fb60ccc8574bcbd65396786ae9163f0149","date":1519706112,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeNoTargetTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeNoTargetTest#test().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String coll = \"replacenodetest_coll_notarget\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String node2bdecommissioned = l.get(0);\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'}]}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    log.info(\"Creating collection...\");\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2, 0, 0);\n    cloudClient.request(create);\n\n    log.info(\"Current core status list for node we plan to decommision: {} => {}\",\n             node2bdecommissioned,\n             getCoreStatusForNamedNode(cloudClient, node2bdecommissioned).getCoreStatus());\n    \n    log.info(\"Decommisioning node: \" + node2bdecommissioned);\n    createReplaceNodeRequest(node2bdecommissioned, null, null).processAsync(\"001\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n    boolean success = false;\n    CollectionAdminRequest.RequestStatusResponse rsp = null;\n    for (int i = 0; i < 300; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(\"async replace node request aparently failed: \" + rsp.toString(),\n                  \n                  rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(\"async replace node request should have finished successfully by now, last status: \" + rsp,\n               success);\n    CoreAdminResponse status = getCoreStatusForNamedNode(cloudClient, node2bdecommissioned);\n    assertEquals(\"Expected no cores for decommisioned node: \"\n                 + status.getCoreStatus().toString(),\n                 0, status.getCoreStatus().size());\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String coll = \"replacenodetest_coll_notarget\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String node2bdecommissioned = l.get(0);\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'}]}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    log.info(\"Creating collection...\");\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2, 0, 0);\n    cloudClient.request(create);\n\n    log.info(\"Current core status list for node we plan to decommision: {} => {}\",\n             node2bdecommissioned,\n             getCoreStatusForNamedNode(cloudClient, node2bdecommissioned).getCoreStatus());\n    \n    log.info(\"Decommisioning node: \" + node2bdecommissioned);\n    createReplaceNodeRequest(node2bdecommissioned, null, null).processAsync(\"001\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n    boolean success = false;\n    CollectionAdminRequest.RequestStatusResponse rsp = null;\n    for (int i = 0; i < 300; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(\"async replace node request aparently failed: \" + rsp.toString(),\n                  \n                  rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(\"async replace node request should have finished successfully by now, last status: \" + rsp,\n               success);\n    CoreAdminResponse status = getCoreStatusForNamedNode(cloudClient, node2bdecommissioned);\n    assertEquals(\"Expected no cores for decommisioned node: \"\n                 + status.getCoreStatus().toString(),\n                 0, status.getCoreStatus().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a7544ad4b63d1b5f556c3da8f9c63d332aa034e","date":1529622176,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeNoTargetTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeNoTargetTest#test().mjava","sourceNew":"  @Test\n  @LuceneTestCase.AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11067\")\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String coll = \"replacenodetest_coll_notarget\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String node2bdecommissioned = l.get(0);\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'}]}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    log.info(\"Creating collection...\");\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2, 0, 0);\n    cloudClient.request(create);\n\n    log.info(\"Current core status list for node we plan to decommision: {} => {}\",\n             node2bdecommissioned,\n             getCoreStatusForNamedNode(cloudClient, node2bdecommissioned).getCoreStatus());\n    \n    log.info(\"Decommisioning node: \" + node2bdecommissioned);\n    createReplaceNodeRequest(node2bdecommissioned, null, null).processAsync(\"001\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n    boolean success = false;\n    CollectionAdminRequest.RequestStatusResponse rsp = null;\n    for (int i = 0; i < 300; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(\"async replace node request aparently failed: \" + rsp.toString(),\n                  \n                  rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(\"async replace node request should have finished successfully by now, last status: \" + rsp,\n               success);\n    CoreAdminResponse status = getCoreStatusForNamedNode(cloudClient, node2bdecommissioned);\n    assertEquals(\"Expected no cores for decommisioned node: \"\n                 + status.getCoreStatus().toString(),\n                 0, status.getCoreStatus().size());\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String coll = \"replacenodetest_coll_notarget\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String node2bdecommissioned = l.get(0);\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'}]}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    log.info(\"Creating collection...\");\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2, 0, 0);\n    cloudClient.request(create);\n\n    log.info(\"Current core status list for node we plan to decommision: {} => {}\",\n             node2bdecommissioned,\n             getCoreStatusForNamedNode(cloudClient, node2bdecommissioned).getCoreStatus());\n    \n    log.info(\"Decommisioning node: \" + node2bdecommissioned);\n    createReplaceNodeRequest(node2bdecommissioned, null, null).processAsync(\"001\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n    boolean success = false;\n    CollectionAdminRequest.RequestStatusResponse rsp = null;\n    for (int i = 0; i < 300; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(\"async replace node request aparently failed: \" + rsp.toString(),\n                  \n                  rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(\"async replace node request should have finished successfully by now, last status: \" + rsp,\n               success);\n    CoreAdminResponse status = getCoreStatusForNamedNode(cloudClient, node2bdecommissioned);\n    assertEquals(\"Expected no cores for decommisioned node: \"\n                 + status.getCoreStatus().toString(),\n                 0, status.getCoreStatus().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeNoTargetTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeNoTargetTest#test().mjava","sourceNew":"  @Test\n  @LuceneTestCase.AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11067\")\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String coll = \"replacenodetest_coll_notarget\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String node2bdecommissioned = l.get(0);\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'}]}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    log.info(\"Creating collection...\");\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2, 0, 0);\n    cloudClient.request(create);\n\n    log.info(\"Current core status list for node we plan to decommision: {} => {}\",\n             node2bdecommissioned,\n             getCoreStatusForNamedNode(cloudClient, node2bdecommissioned).getCoreStatus());\n    \n    log.info(\"Decommisioning node: \" + node2bdecommissioned);\n    createReplaceNodeRequest(node2bdecommissioned, null, null).processAsync(\"001\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n    boolean success = false;\n    CollectionAdminRequest.RequestStatusResponse rsp = null;\n    for (int i = 0; i < 300; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(\"async replace node request aparently failed: \" + rsp.toString(),\n                  \n                  rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(\"async replace node request should have finished successfully by now, last status: \" + rsp,\n               success);\n    CoreAdminResponse status = getCoreStatusForNamedNode(cloudClient, node2bdecommissioned);\n    assertEquals(\"Expected no cores for decommisioned node: \"\n                 + status.getCoreStatus().toString(),\n                 0, status.getCoreStatus().size());\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String coll = \"replacenodetest_coll_notarget\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String node2bdecommissioned = l.get(0);\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'}]}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    log.info(\"Creating collection...\");\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2, 0, 0);\n    cloudClient.request(create);\n\n    log.info(\"Current core status list for node we plan to decommision: {} => {}\",\n             node2bdecommissioned,\n             getCoreStatusForNamedNode(cloudClient, node2bdecommissioned).getCoreStatus());\n    \n    log.info(\"Decommisioning node: \" + node2bdecommissioned);\n    createReplaceNodeRequest(node2bdecommissioned, null, null).processAsync(\"001\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n    boolean success = false;\n    CollectionAdminRequest.RequestStatusResponse rsp = null;\n    for (int i = 0; i < 300; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(\"async replace node request aparently failed: \" + rsp.toString(),\n                  \n                  rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(\"async replace node request should have finished successfully by now, last status: \" + rsp,\n               success);\n    CoreAdminResponse status = getCoreStatusForNamedNode(cloudClient, node2bdecommissioned);\n    assertEquals(\"Expected no cores for decommisioned node: \"\n                 + status.getCoreStatus().toString(),\n                 0, status.getCoreStatus().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeNoTargetTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeNoTargetTest#test().mjava","sourceNew":"  @Test\n  @LuceneTestCase.AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11067\")\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String coll = \"replacenodetest_coll_notarget\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String node2bdecommissioned = l.get(0);\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'}]}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    log.info(\"Creating collection...\");\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2, 0, 0);\n    cloudClient.request(create);\n\n    log.info(\"Current core status list for node we plan to decommision: {} => {}\",\n             node2bdecommissioned,\n             getCoreStatusForNamedNode(cloudClient, node2bdecommissioned).getCoreStatus());\n    \n    log.info(\"Decommisioning node: \" + node2bdecommissioned);\n    createReplaceNodeRequest(node2bdecommissioned, null, null).processAsync(\"001\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n    boolean success = false;\n    CollectionAdminRequest.RequestStatusResponse rsp = null;\n    for (int i = 0; i < 300; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(\"async replace node request aparently failed: \" + rsp.toString(),\n                  \n                  rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(\"async replace node request should have finished successfully by now, last status: \" + rsp,\n               success);\n    CoreAdminResponse status = getCoreStatusForNamedNode(cloudClient, node2bdecommissioned);\n    assertEquals(\"Expected no cores for decommisioned node: \"\n                 + status.getCoreStatus().toString(),\n                 0, status.getCoreStatus().size());\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String coll = \"replacenodetest_coll_notarget\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String node2bdecommissioned = l.get(0);\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'}]}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    log.info(\"Creating collection...\");\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2, 0, 0);\n    cloudClient.request(create);\n\n    log.info(\"Current core status list for node we plan to decommision: {} => {}\",\n             node2bdecommissioned,\n             getCoreStatusForNamedNode(cloudClient, node2bdecommissioned).getCoreStatus());\n    \n    log.info(\"Decommisioning node: \" + node2bdecommissioned);\n    createReplaceNodeRequest(node2bdecommissioned, null, null).processAsync(\"001\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n    boolean success = false;\n    CollectionAdminRequest.RequestStatusResponse rsp = null;\n    for (int i = 0; i < 300; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(\"async replace node request aparently failed: \" + rsp.toString(),\n                  \n                  rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(\"async replace node request should have finished successfully by now, last status: \" + rsp,\n               success);\n    CoreAdminResponse status = getCoreStatusForNamedNode(cloudClient, node2bdecommissioned);\n    assertEquals(\"Expected no cores for decommisioned node: \"\n                 + status.getCoreStatus().toString(),\n                 0, status.getCoreStatus().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeNoTargetTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeNoTargetTest#test().mjava","sourceNew":"  @Test\n  @LuceneTestCase.AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11067\")\n  public void test() throws Exception {\n    String coll = \"replacenodetest_coll_notarget\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String node2bdecommissioned = l.get(0);\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'}]}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    log.info(\"Creating collection...\");\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2, 0, 0);\n    cloudClient.request(create);\n    cluster.waitForActiveCollection(coll, 5, 10);\n\n    log.info(\"Current core status list for node we plan to decommision: {} => {}\",\n             node2bdecommissioned,\n             getCoreStatusForNamedNode(cloudClient, node2bdecommissioned).getCoreStatus());\n    \n    log.info(\"Decommisioning node: \" + node2bdecommissioned);\n    createReplaceNodeRequest(node2bdecommissioned, null, null).processAsync(\"001\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n    boolean success = false;\n    CollectionAdminRequest.RequestStatusResponse rsp = null;\n    for (int i = 0; i < 300; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(\"async replace node request aparently failed: \" + rsp.toString(),\n                  \n                  rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(\"async replace node request should have finished successfully by now, last status: \" + rsp,\n               success);\n    CoreAdminResponse status = getCoreStatusForNamedNode(cloudClient, node2bdecommissioned);\n    assertEquals(\"Expected no cores for decommisioned node: \"\n                 + status.getCoreStatus().toString(),\n                 0, status.getCoreStatus().size());\n  }\n\n","sourceOld":"  @Test\n  @LuceneTestCase.AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11067\")\n  public void test() throws Exception {\n    cluster.waitForAllNodes(5000);\n    String coll = \"replacenodetest_coll_notarget\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String node2bdecommissioned = l.get(0);\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'}]}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    log.info(\"Creating collection...\");\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2, 0, 0);\n    cloudClient.request(create);\n\n    log.info(\"Current core status list for node we plan to decommision: {} => {}\",\n             node2bdecommissioned,\n             getCoreStatusForNamedNode(cloudClient, node2bdecommissioned).getCoreStatus());\n    \n    log.info(\"Decommisioning node: \" + node2bdecommissioned);\n    createReplaceNodeRequest(node2bdecommissioned, null, null).processAsync(\"001\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n    boolean success = false;\n    CollectionAdminRequest.RequestStatusResponse rsp = null;\n    for (int i = 0; i < 300; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(\"async replace node request aparently failed: \" + rsp.toString(),\n                  \n                  rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(\"async replace node request should have finished successfully by now, last status: \" + rsp,\n               success);\n    CoreAdminResponse status = getCoreStatusForNamedNode(cloudClient, node2bdecommissioned);\n    assertEquals(\"Expected no cores for decommisioned node: \"\n                 + status.getCoreStatus().toString(),\n                 0, status.getCoreStatus().size());\n  }\n\n","bugFix":["135a17bf08af5eaa5db73b2de6d1e36ea2ecafa1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeNoTargetTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeNoTargetTest#test().mjava","sourceNew":"  @Test\n  @LuceneTestCase.AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11067\")\n  public void test() throws Exception {\n    String coll = \"replacenodetest_coll_notarget\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String node2bdecommissioned = l.get(0);\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'}]}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    log.info(\"Creating collection...\");\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2, 0, 0);\n    cloudClient.request(create);\n    cluster.waitForActiveCollection(coll, 5, 10);\n\n    log.info(\"Current core status list for node we plan to decommision: {} => {}\",\n             node2bdecommissioned,\n             getCoreStatusForNamedNode(cloudClient, node2bdecommissioned).getCoreStatus());\n    \n    log.info(\"Decommisioning node: \" + node2bdecommissioned);\n    createReplaceNodeRequest(node2bdecommissioned, null, null).processAsync(\"001\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n    boolean success = false;\n    CollectionAdminRequest.RequestStatusResponse rsp = null;\n    for (int i = 0; i < 300; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(\"async replace node request aparently failed: \" + rsp.toString(),\n                  \n                  rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(\"async replace node request should have finished successfully by now, last status: \" + rsp,\n               success);\n    CoreAdminResponse status = getCoreStatusForNamedNode(cloudClient, node2bdecommissioned);\n    assertEquals(\"Expected no cores for decommisioned node: \"\n                 + status.getCoreStatus().toString(),\n                 0, status.getCoreStatus().size());\n  }\n\n","sourceOld":"  @Test\n  @LuceneTestCase.AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11067\")\n  public void test() throws Exception {\n    String coll = \"replacenodetest_coll_notarget\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String node2bdecommissioned = l.get(0);\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'}]}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    log.info(\"Creating collection...\");\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2, 0, 0);\n    cloudClient.request(create);\n    cluster.waitForActiveCollection(coll, 5, 10);\n\n    log.info(\"Current core status list for node we plan to decommision: {} => {}\",\n             node2bdecommissioned,\n             getCoreStatusForNamedNode(cloudClient, node2bdecommissioned).getCoreStatus());\n    \n    log.info(\"Decommisioning node: \" + node2bdecommissioned);\n    createReplaceNodeRequest(node2bdecommissioned, null, null).processAsync(\"001\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n    boolean success = false;\n    CollectionAdminRequest.RequestStatusResponse rsp = null;\n    for (int i = 0; i < 300; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(\"async replace node request aparently failed: \" + rsp.toString(),\n                  \n                  rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(\"async replace node request should have finished successfully by now, last status: \" + rsp,\n               success);\n    CoreAdminResponse status = getCoreStatusForNamedNode(cloudClient, node2bdecommissioned);\n    assertEquals(\"Expected no cores for decommisioned node: \"\n                 + status.getCoreStatus().toString(),\n                 0, status.getCoreStatus().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeNoTargetTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeNoTargetTest#test().mjava","sourceNew":"  @Test\n  @LuceneTestCase.AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11067\")\n  public void test() throws Exception {\n    String coll = \"replacenodetest_coll_notarget\";\n    if (log.isInfoEnabled()) {\n      log.info(\"total_jettys: {}\", cluster.getJettySolrRunners().size());\n    }\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String node2bdecommissioned = l.get(0);\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'}]}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    log.info(\"Creating collection...\");\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2, 0, 0);\n    cloudClient.request(create);\n    cluster.waitForActiveCollection(coll, 5, 10);\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Current core status list for node we plan to decommision: {} => {}\",\n          node2bdecommissioned,\n          getCoreStatusForNamedNode(cloudClient, node2bdecommissioned).getCoreStatus());\n      log.info(\"Decommisioning node: {}\", node2bdecommissioned);\n    }\n\n    createReplaceNodeRequest(node2bdecommissioned, null, null).processAsync(\"001\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n    boolean success = false;\n    CollectionAdminRequest.RequestStatusResponse rsp = null;\n    for (int i = 0; i < 300; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(\"async replace node request aparently failed: \" + rsp.toString(),\n                  \n                  rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(\"async replace node request should have finished successfully by now, last status: \" + rsp,\n               success);\n    CoreAdminResponse status = getCoreStatusForNamedNode(cloudClient, node2bdecommissioned);\n    assertEquals(\"Expected no cores for decommisioned node: \"\n                 + status.getCoreStatus().toString(),\n                 0, status.getCoreStatus().size());\n  }\n\n","sourceOld":"  @Test\n  @LuceneTestCase.AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11067\")\n  public void test() throws Exception {\n    String coll = \"replacenodetest_coll_notarget\";\n    log.info(\"total_jettys: \" + cluster.getJettySolrRunners().size());\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String node2bdecommissioned = l.get(0);\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'}]}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    log.info(\"Creating collection...\");\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2, 0, 0);\n    cloudClient.request(create);\n    cluster.waitForActiveCollection(coll, 5, 10);\n\n    log.info(\"Current core status list for node we plan to decommision: {} => {}\",\n             node2bdecommissioned,\n             getCoreStatusForNamedNode(cloudClient, node2bdecommissioned).getCoreStatus());\n    \n    log.info(\"Decommisioning node: \" + node2bdecommissioned);\n    createReplaceNodeRequest(node2bdecommissioned, null, null).processAsync(\"001\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n    boolean success = false;\n    CollectionAdminRequest.RequestStatusResponse rsp = null;\n    for (int i = 0; i < 300; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(\"async replace node request aparently failed: \" + rsp.toString(),\n                  \n                  rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(\"async replace node request should have finished successfully by now, last status: \" + rsp,\n               success);\n    CoreAdminResponse status = getCoreStatusForNamedNode(cloudClient, node2bdecommissioned);\n    assertEquals(\"Expected no cores for decommisioned node: \"\n                 + status.getCoreStatus().toString(),\n                 0, status.getCoreStatus().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeNoTargetTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeNoTargetTest#test().mjava","sourceNew":"  @Test\n  @LuceneTestCase.AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11067\")\n  public void test() throws Exception {\n    String coll = \"replacenodetest_coll_notarget\";\n    if (log.isInfoEnabled()) {\n      log.info(\"total_jettys: {}\", cluster.getJettySolrRunners().size());\n    }\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String node2bdecommissioned = l.get(0);\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'}]}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    log.info(\"Creating collection...\");\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2, 0, 0);\n    cloudClient.request(create);\n    cluster.waitForActiveCollection(coll, 5, 10);\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Current core status list for node we plan to decommision: {} => {}\",\n          node2bdecommissioned,\n          getCoreStatusForNamedNode(cloudClient, node2bdecommissioned).getCoreStatus());\n      log.info(\"Decommisioning node: {}\", node2bdecommissioned);\n    }\n\n    createReplaceNodeRequest(node2bdecommissioned, null, null).processAsync(\"001\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n    boolean success = false;\n    CollectionAdminRequest.RequestStatusResponse rsp = null;\n    for (int i = 0; i < 300; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(\"async replace node request aparently failed: \" + rsp.toString(),\n                  \n                  rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(\"async replace node request should have finished successfully by now, last status: \" + rsp,\n               success);\n    CoreAdminResponse status = getCoreStatusForNamedNode(cloudClient, node2bdecommissioned);\n    assertEquals(\"Expected no cores for decommisioned node: \"\n                 + status.getCoreStatus().toString(),\n                 0, status.getCoreStatus().size());\n  }\n\n","sourceOld":"  @Test\n  @LuceneTestCase.AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11067\")\n  public void test() throws Exception {\n    String coll = \"replacenodetest_coll_notarget\";\n    if (log.isInfoEnabled()) {\n      log.info(\"total_jettys: {}\", cluster.getJettySolrRunners().size());\n    }\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String node2bdecommissioned = l.get(0);\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'}]}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    log.info(\"Creating collection...\");\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2, 0, 0);\n    cloudClient.request(create);\n    cluster.waitForActiveCollection(coll, 5, 10);\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Current core status list for node we plan to decommision: {} => {}\",\n          node2bdecommissioned,\n          getCoreStatusForNamedNode(cloudClient, node2bdecommissioned).getCoreStatus());\n      log.info(\"Decommisioning node: {}\", node2bdecommissioned);\n    }\n\n    createReplaceNodeRequest(node2bdecommissioned, null, null).processAsync(\"001\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n    boolean success = false;\n    CollectionAdminRequest.RequestStatusResponse rsp = null;\n    for (int i = 0; i < 300; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(\"async replace node request aparently failed: \" + rsp.toString(),\n                  \n                  rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(\"async replace node request should have finished successfully by now, last status: \" + rsp,\n               success);\n    CoreAdminResponse status = getCoreStatusForNamedNode(cloudClient, node2bdecommissioned);\n    assertEquals(\"Expected no cores for decommisioned node: \"\n                 + status.getCoreStatus().toString(),\n                 0, status.getCoreStatus().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplaceNodeNoTargetTest#test().mjava","sourceNew":null,"sourceOld":"  @Test\n  @LuceneTestCase.AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11067\")\n  public void test() throws Exception {\n    String coll = \"replacenodetest_coll_notarget\";\n    if (log.isInfoEnabled()) {\n      log.info(\"total_jettys: {}\", cluster.getJettySolrRunners().size());\n    }\n\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();\n    ArrayList<String> l = new ArrayList<>(liveNodes);\n    Collections.shuffle(l, random());\n    String node2bdecommissioned = l.get(0);\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'}]}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    log.info(\"Creating collection...\");\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, \"conf1\", 5, 2, 0, 0);\n    cloudClient.request(create);\n    cluster.waitForActiveCollection(coll, 5, 10);\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Current core status list for node we plan to decommision: {} => {}\",\n          node2bdecommissioned,\n          getCoreStatusForNamedNode(cloudClient, node2bdecommissioned).getCoreStatus());\n      log.info(\"Decommisioning node: {}\", node2bdecommissioned);\n    }\n\n    createReplaceNodeRequest(node2bdecommissioned, null, null).processAsync(\"001\", cloudClient);\n    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus(\"001\");\n    boolean success = false;\n    CollectionAdminRequest.RequestStatusResponse rsp = null;\n    for (int i = 0; i < 300; i++) {\n      rsp = requestStatus.process(cloudClient);\n      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {\n        success = true;\n        break;\n      }\n      assertFalse(\"async replace node request aparently failed: \" + rsp.toString(),\n                  \n                  rsp.getRequestStatus() == RequestStatusState.FAILED);\n      Thread.sleep(50);\n    }\n    assertTrue(\"async replace node request should have finished successfully by now, last status: \" + rsp,\n               success);\n    CoreAdminResponse status = getCoreStatusForNamedNode(cloudClient, node2bdecommissioned);\n    assertEquals(\"Expected no cores for decommisioned node: \"\n                 + status.getCoreStatus().toString(),\n                 0, status.getCoreStatus().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"ff5e25fb60ccc8574bcbd65396786ae9163f0149":["aaad5e230722cbab5a320e6b49b86ddf262c21a8"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["7a7544ad4b63d1b5f556c3da8f9c63d332aa034e"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["89948af0461fead48f44ba8fb7866f107ce83f22"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["ff5e25fb60ccc8574bcbd65396786ae9163f0149","7a7544ad4b63d1b5f556c3da8f9c63d332aa034e"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"aaad5e230722cbab5a320e6b49b86ddf262c21a8":["135a17bf08af5eaa5db73b2de6d1e36ea2ecafa1"],"135a17bf08af5eaa5db73b2de6d1e36ea2ecafa1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7a7544ad4b63d1b5f556c3da8f9c63d332aa034e":["ff5e25fb60ccc8574bcbd65396786ae9163f0149"],"89948af0461fead48f44ba8fb7866f107ce83f22":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["ff5e25fb60ccc8574bcbd65396786ae9163f0149","7a7544ad4b63d1b5f556c3da8f9c63d332aa034e"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ff5e25fb60ccc8574bcbd65396786ae9163f0149":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7a7544ad4b63d1b5f556c3da8f9c63d332aa034e","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["89948af0461fead48f44ba8fb7866f107ce83f22"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3f504512a03d978990cbff30db0522b354e846db"],"aaad5e230722cbab5a320e6b49b86ddf262c21a8":["ff5e25fb60ccc8574bcbd65396786ae9163f0149"],"135a17bf08af5eaa5db73b2de6d1e36ea2ecafa1":["aaad5e230722cbab5a320e6b49b86ddf262c21a8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["135a17bf08af5eaa5db73b2de6d1e36ea2ecafa1"],"7a7544ad4b63d1b5f556c3da8f9c63d332aa034e":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"89948af0461fead48f44ba8fb7866f107ce83f22":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}