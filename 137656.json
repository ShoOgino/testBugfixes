{"path":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newSearcher(IndexReader,boolean).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newSearcher(IndexReader,boolean).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newSearcher(IndexReader,boolean).mjava","sourceNew":"  /** create a new searcher over the reader.\n   * This searcher might randomly use threads.\n   * if <code>maybeWrap</code> is true, this searcher might wrap the reader\n   * with one that returns null for getSequentialSubReaders.\n   */\n  public static IndexSearcher newSearcher(IndexReader r, boolean maybeWrap) throws IOException {\n    if (random.nextBoolean()) {\n      if (maybeWrap && rarely()) {\n        r = new SlowMultiReaderWrapper(r);\n      }\n      IndexSearcher ret = random.nextBoolean() ? new AssertingIndexSearcher(random, r) : new AssertingIndexSearcher(random, r.getTopReaderContext());\n      ret.setSimilarityProvider(similarityProvider);\n      return ret;\n    } else {\n      int threads = 0;\n      final ExecutorService ex = (random.nextBoolean()) ? null\n          : Executors.newFixedThreadPool(threads = _TestUtil.nextInt(random, 1, 8),\n                      new NamedThreadFactory(\"LuceneTestCase\"));\n      if (ex != null && VERBOSE) {\n        System.out.println(\"NOTE: newSearcher using ExecutorService with \" + threads + \" threads\");\n      }\n      IndexSearcher ret = random.nextBoolean() ? \n        new AssertingIndexSearcher(random, r, ex) {\n          @Override\n          public void close() throws IOException {\n            super.close();\n            shutdownExecutorService(ex);\n          }\n        } : new AssertingIndexSearcher(random, r.getTopReaderContext(), ex) {\n          @Override\n          public void close() throws IOException {\n            super.close();\n            shutdownExecutorService(ex);\n          }\n        };\n      ret.setSimilarityProvider(similarityProvider);\n      return ret;\n    }\n  }\n\n","sourceOld":"  /** create a new searcher over the reader.\n   * This searcher might randomly use threads.\n   * if <code>maybeWrap</code> is true, this searcher might wrap the reader\n   * with one that returns null for getSequentialSubReaders.\n   */\n  public static IndexSearcher newSearcher(IndexReader r, boolean maybeWrap) throws IOException {\n    if (random.nextBoolean()) {\n      if (maybeWrap && rarely()) {\n        r = new SlowMultiReaderWrapper(r);\n      }\n      IndexSearcher ret = random.nextBoolean() ? new AssertingIndexSearcher(random, r) : new AssertingIndexSearcher(random, r.getTopReaderContext());\n      ret.setSimilarityProvider(similarityProvider);\n      return ret;\n    } else {\n      int threads = 0;\n      final ExecutorService ex = (random.nextBoolean()) ? null\n          : Executors.newFixedThreadPool(threads = _TestUtil.nextInt(random, 1, 8),\n                      new NamedThreadFactory(\"LuceneTestCase\"));\n      if (ex != null && VERBOSE) {\n        System.out.println(\"NOTE: newSearcher using ExecutorService with \" + threads + \" threads\");\n      }\n      IndexSearcher ret = random.nextBoolean() ? \n        new AssertingIndexSearcher(random, r, ex) {\n          @Override\n          public void close() throws IOException {\n            super.close();\n            shutdownExecutorService(ex);\n          }\n        } : new AssertingIndexSearcher(random, r.getTopReaderContext(), ex) {\n          @Override\n          public void close() throws IOException {\n            super.close();\n            shutdownExecutorService(ex);\n          }\n        };\n      ret.setSimilarityProvider(similarityProvider);\n      return ret;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newSearcher(IndexReader,boolean).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newSearcher(IndexReader,boolean).mjava","sourceNew":"  /** create a new searcher over the reader.\n   * This searcher might randomly use threads.\n   * if <code>maybeWrap</code> is true, this searcher might wrap the reader\n   * with one that returns null for getSequentialSubReaders.\n   */\n  public static IndexSearcher newSearcher(IndexReader r, boolean maybeWrap) throws IOException {\n    if (random.nextBoolean()) {\n      if (maybeWrap && rarely()) {\n        r = new SlowMultiReaderWrapper(r);\n      }\n      IndexSearcher ret = random.nextBoolean() ? new AssertingIndexSearcher(random, r) : new AssertingIndexSearcher(random, r.getTopReaderContext());\n      ret.setSimilarityProvider(similarityProvider);\n      return ret;\n    } else {\n      int threads = 0;\n      final ExecutorService ex = (random.nextBoolean()) ? null\n          : Executors.newFixedThreadPool(threads = _TestUtil.nextInt(random, 1, 8),\n                      new NamedThreadFactory(\"LuceneTestCase\"));\n      if (ex != null) {\n       if (VERBOSE) {\n        System.out.println(\"NOTE: newSearcher using ExecutorService with \" + threads + \" threads\");\n       }\n       final IndexReader r0 = r;\n       r.addReaderFinishedListener(new ReaderFinishedListener() {\n         @Override\n         public void finished(IndexReader reader) {\n           // readerFinishedListener bogusly calls us with other random readers\n           // so we must check that its *actually* the one we registered it on.\n           if (reader == r0) {\n             shutdownExecutorService(ex);\n           }\n         }\n       });\n      }\n      IndexSearcher ret = random.nextBoolean() \n          ? new AssertingIndexSearcher(random, r, ex)\n          : new AssertingIndexSearcher(random, r.getTopReaderContext(), ex);\n      ret.setSimilarityProvider(similarityProvider);\n      return ret;\n    }\n  }\n\n","sourceOld":"  /** create a new searcher over the reader.\n   * This searcher might randomly use threads.\n   * if <code>maybeWrap</code> is true, this searcher might wrap the reader\n   * with one that returns null for getSequentialSubReaders.\n   */\n  public static IndexSearcher newSearcher(IndexReader r, boolean maybeWrap) throws IOException {\n    if (random.nextBoolean()) {\n      if (maybeWrap && rarely()) {\n        r = new SlowMultiReaderWrapper(r);\n      }\n      IndexSearcher ret = random.nextBoolean() ? new AssertingIndexSearcher(random, r) : new AssertingIndexSearcher(random, r.getTopReaderContext());\n      ret.setSimilarityProvider(similarityProvider);\n      return ret;\n    } else {\n      int threads = 0;\n      final ExecutorService ex = (random.nextBoolean()) ? null\n          : Executors.newFixedThreadPool(threads = _TestUtil.nextInt(random, 1, 8),\n                      new NamedThreadFactory(\"LuceneTestCase\"));\n      if (ex != null && VERBOSE) {\n        System.out.println(\"NOTE: newSearcher using ExecutorService with \" + threads + \" threads\");\n      }\n      IndexSearcher ret = random.nextBoolean() ? \n        new AssertingIndexSearcher(random, r, ex) {\n          @Override\n          public void close() throws IOException {\n            super.close();\n            shutdownExecutorService(ex);\n          }\n        } : new AssertingIndexSearcher(random, r.getTopReaderContext(), ex) {\n          @Override\n          public void close() throws IOException {\n            super.close();\n            shutdownExecutorService(ex);\n          }\n        };\n      ret.setSimilarityProvider(similarityProvider);\n      return ret;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newSearcher(IndexReader,boolean).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newSearcher(IndexReader,boolean).mjava","sourceNew":"  /** create a new searcher over the reader.\n   * This searcher might randomly use threads.\n   * if <code>maybeWrap</code> is true, this searcher might wrap the reader\n   * with one that returns null for getSequentialSubReaders.\n   */\n  public static IndexSearcher newSearcher(IndexReader r, boolean maybeWrap) throws IOException {\n    if (random.nextBoolean()) {\n      if (maybeWrap && rarely()) {\n        r = new SlowMultiReaderWrapper(r);\n      }\n      IndexSearcher ret = random.nextBoolean() ? new AssertingIndexSearcher(random, r) : new AssertingIndexSearcher(random, r.getTopReaderContext());\n      ret.setSimilarityProvider(similarityProvider);\n      return ret;\n    } else {\n      int threads = 0;\n      final ExecutorService ex = (random.nextBoolean()) ? null\n          : Executors.newFixedThreadPool(threads = _TestUtil.nextInt(random, 1, 8),\n                      new NamedThreadFactory(\"LuceneTestCase\"));\n      if (ex != null) {\n       if (VERBOSE) {\n        System.out.println(\"NOTE: newSearcher using ExecutorService with \" + threads + \" threads\");\n       }\n       final IndexReader r0 = r;\n       r.addReaderFinishedListener(new ReaderFinishedListener() {\n         @Override\n         public void finished(IndexReader reader) {\n           // readerFinishedListener bogusly calls us with other random readers\n           // so we must check that its *actually* the one we registered it on.\n           if (reader == r0) {\n             shutdownExecutorService(ex);\n           }\n         }\n       });\n      }\n      IndexSearcher ret = random.nextBoolean() \n          ? new AssertingIndexSearcher(random, r, ex)\n          : new AssertingIndexSearcher(random, r.getTopReaderContext(), ex);\n      ret.setSimilarityProvider(similarityProvider);\n      return ret;\n    }\n  }\n\n","sourceOld":"  /** create a new searcher over the reader.\n   * This searcher might randomly use threads.\n   * if <code>maybeWrap</code> is true, this searcher might wrap the reader\n   * with one that returns null for getSequentialSubReaders.\n   */\n  public static IndexSearcher newSearcher(IndexReader r, boolean maybeWrap) throws IOException {\n    if (random.nextBoolean()) {\n      if (maybeWrap && rarely()) {\n        r = new SlowMultiReaderWrapper(r);\n      }\n      IndexSearcher ret = random.nextBoolean() ? new AssertingIndexSearcher(random, r) : new AssertingIndexSearcher(random, r.getTopReaderContext());\n      ret.setSimilarityProvider(similarityProvider);\n      return ret;\n    } else {\n      int threads = 0;\n      final ExecutorService ex = (random.nextBoolean()) ? null\n          : Executors.newFixedThreadPool(threads = _TestUtil.nextInt(random, 1, 8),\n                      new NamedThreadFactory(\"LuceneTestCase\"));\n      if (ex != null && VERBOSE) {\n        System.out.println(\"NOTE: newSearcher using ExecutorService with \" + threads + \" threads\");\n      }\n      IndexSearcher ret = random.nextBoolean() ? \n        new AssertingIndexSearcher(random, r, ex) {\n          @Override\n          public void close() throws IOException {\n            super.close();\n            shutdownExecutorService(ex);\n          }\n        } : new AssertingIndexSearcher(random, r.getTopReaderContext(), ex) {\n          @Override\n          public void close() throws IOException {\n            super.close();\n            shutdownExecutorService(ex);\n          }\n        };\n      ret.setSimilarityProvider(similarityProvider);\n      return ret;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeb24fe119d55091148e2a3d94e80c9e349d886c","date":1323807643,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newSearcher(IndexReader,boolean).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newSearcher(IndexReader,boolean).mjava","sourceNew":"  /** create a new searcher over the reader.\n   * This searcher might randomly use threads.\n   * if <code>maybeWrap</code> is true, this searcher might wrap the reader\n   * with one that returns null for getSequentialSubReaders.\n   */\n  public static IndexSearcher newSearcher(IndexReader r, boolean maybeWrap) throws IOException {\n    if (random.nextBoolean()) {\n      if (maybeWrap && rarely()) {\n        r = new SlowMultiReaderWrapper(r);\n      }\n      IndexSearcher ret = random.nextBoolean() ? new AssertingIndexSearcher(random, r) : new AssertingIndexSearcher(random, r.getTopReaderContext());\n      ret.setSimilarityProvider(similarityProvider);\n      return ret;\n    } else {\n      int threads = 0;\n      final ExecutorService ex = (random.nextBoolean()) ? null\n          : Executors.newFixedThreadPool(threads = _TestUtil.nextInt(random, 1, 8),\n                      new NamedThreadFactory(\"LuceneTestCase\"));\n      if (ex != null) {\n       if (VERBOSE) {\n        System.out.println(\"NOTE: newSearcher using ExecutorService with \" + threads + \" threads\");\n       }\n       r.addReaderClosedListener(new ReaderClosedListener() {\n         @Override\n         public void onClose(IndexReader reader) {\n           shutdownExecutorService(ex);\n         }\n       });\n      }\n      IndexSearcher ret = random.nextBoolean() \n          ? new AssertingIndexSearcher(random, r, ex)\n          : new AssertingIndexSearcher(random, r.getTopReaderContext(), ex);\n      ret.setSimilarityProvider(similarityProvider);\n      return ret;\n    }\n  }\n\n","sourceOld":"  /** create a new searcher over the reader.\n   * This searcher might randomly use threads.\n   * if <code>maybeWrap</code> is true, this searcher might wrap the reader\n   * with one that returns null for getSequentialSubReaders.\n   */\n  public static IndexSearcher newSearcher(IndexReader r, boolean maybeWrap) throws IOException {\n    if (random.nextBoolean()) {\n      if (maybeWrap && rarely()) {\n        r = new SlowMultiReaderWrapper(r);\n      }\n      IndexSearcher ret = random.nextBoolean() ? new AssertingIndexSearcher(random, r) : new AssertingIndexSearcher(random, r.getTopReaderContext());\n      ret.setSimilarityProvider(similarityProvider);\n      return ret;\n    } else {\n      int threads = 0;\n      final ExecutorService ex = (random.nextBoolean()) ? null\n          : Executors.newFixedThreadPool(threads = _TestUtil.nextInt(random, 1, 8),\n                      new NamedThreadFactory(\"LuceneTestCase\"));\n      if (ex != null) {\n       if (VERBOSE) {\n        System.out.println(\"NOTE: newSearcher using ExecutorService with \" + threads + \" threads\");\n       }\n       final IndexReader r0 = r;\n       r.addReaderFinishedListener(new ReaderFinishedListener() {\n         @Override\n         public void finished(IndexReader reader) {\n           // readerFinishedListener bogusly calls us with other random readers\n           // so we must check that its *actually* the one we registered it on.\n           if (reader == r0) {\n             shutdownExecutorService(ex);\n           }\n         }\n       });\n      }\n      IndexSearcher ret = random.nextBoolean() \n          ? new AssertingIndexSearcher(random, r, ex)\n          : new AssertingIndexSearcher(random, r.getTopReaderContext(), ex);\n      ret.setSimilarityProvider(similarityProvider);\n      return ret;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8be580b58bcc650d428f3f22de81cadcf51d650a","date":1325279655,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newSearcher(IndexReader,boolean).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newSearcher(IndexReader,boolean).mjava","sourceNew":"  /** create a new searcher over the reader.\n   * This searcher might randomly use threads.\n   * if <code>maybeWrap</code> is true, this searcher might wrap the reader\n   * with one that returns null for getSequentialSubReaders.\n   */\n  public static IndexSearcher newSearcher(IndexReader r, boolean maybeWrap) throws IOException {\n    if (usually()) {\n      if (maybeWrap && rarely()) {\n        r = new SlowMultiReaderWrapper(r);\n      }\n      IndexSearcher ret = random.nextBoolean() ? new AssertingIndexSearcher(random, r) : new AssertingIndexSearcher(random, r.getTopReaderContext());\n      ret.setSimilarityProvider(similarityProvider);\n      return ret;\n    } else {\n      int threads = 0;\n      final ExecutorService ex = (random.nextBoolean()) ? null\n          : Executors.newFixedThreadPool(threads = _TestUtil.nextInt(random, 1, 8),\n                      new NamedThreadFactory(\"LuceneTestCase\"));\n      if (ex != null) {\n       if (VERBOSE) {\n        System.out.println(\"NOTE: newSearcher using ExecutorService with \" + threads + \" threads\");\n       }\n       r.addReaderClosedListener(new ReaderClosedListener() {\n         @Override\n         public void onClose(IndexReader reader) {\n           shutdownExecutorService(ex);\n         }\n       });\n      }\n      IndexSearcher ret = random.nextBoolean() \n          ? new AssertingIndexSearcher(random, r, ex)\n          : new AssertingIndexSearcher(random, r.getTopReaderContext(), ex);\n      ret.setSimilarityProvider(similarityProvider);\n      return ret;\n    }\n  }\n\n","sourceOld":"  /** create a new searcher over the reader.\n   * This searcher might randomly use threads.\n   * if <code>maybeWrap</code> is true, this searcher might wrap the reader\n   * with one that returns null for getSequentialSubReaders.\n   */\n  public static IndexSearcher newSearcher(IndexReader r, boolean maybeWrap) throws IOException {\n    if (random.nextBoolean()) {\n      if (maybeWrap && rarely()) {\n        r = new SlowMultiReaderWrapper(r);\n      }\n      IndexSearcher ret = random.nextBoolean() ? new AssertingIndexSearcher(random, r) : new AssertingIndexSearcher(random, r.getTopReaderContext());\n      ret.setSimilarityProvider(similarityProvider);\n      return ret;\n    } else {\n      int threads = 0;\n      final ExecutorService ex = (random.nextBoolean()) ? null\n          : Executors.newFixedThreadPool(threads = _TestUtil.nextInt(random, 1, 8),\n                      new NamedThreadFactory(\"LuceneTestCase\"));\n      if (ex != null) {\n       if (VERBOSE) {\n        System.out.println(\"NOTE: newSearcher using ExecutorService with \" + threads + \" threads\");\n       }\n       r.addReaderClosedListener(new ReaderClosedListener() {\n         @Override\n         public void onClose(IndexReader reader) {\n           shutdownExecutorService(ex);\n         }\n       });\n      }\n      IndexSearcher ret = random.nextBoolean() \n          ? new AssertingIndexSearcher(random, r, ex)\n          : new AssertingIndexSearcher(random, r.getTopReaderContext(), ex);\n      ret.setSimilarityProvider(similarityProvider);\n      return ret;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a85e7319b5cf755cba8f1bfa7365afeb9cc3ad94","date":1327846543,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newSearcher(IndexReader,boolean).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newSearcher(IndexReader,boolean).mjava","sourceNew":"  /** create a new searcher over the reader.\n   * This searcher might randomly use threads.\n   * if <code>maybeWrap</code> is true, this searcher might wrap the reader\n   * with one that returns null for getSequentialSubReaders.\n   */\n  public static IndexSearcher newSearcher(IndexReader r, boolean maybeWrap) throws IOException {\n    if (usually()) {\n      if (maybeWrap && rarely()) {\n        r = SlowCompositeReaderWrapper.wrap(r);\n      }\n      IndexSearcher ret = random.nextBoolean() ? new AssertingIndexSearcher(random, r) : new AssertingIndexSearcher(random, r.getTopReaderContext());\n      ret.setSimilarityProvider(similarityProvider);\n      return ret;\n    } else {\n      int threads = 0;\n      final ExecutorService ex = (random.nextBoolean()) ? null\n          : Executors.newFixedThreadPool(threads = _TestUtil.nextInt(random, 1, 8),\n                      new NamedThreadFactory(\"LuceneTestCase\"));\n      if (ex != null) {\n       if (VERBOSE) {\n        System.out.println(\"NOTE: newSearcher using ExecutorService with \" + threads + \" threads\");\n       }\n       r.addReaderClosedListener(new ReaderClosedListener() {\n         @Override\n         public void onClose(IndexReader reader) {\n           shutdownExecutorService(ex);\n         }\n       });\n      }\n      IndexSearcher ret = random.nextBoolean() \n          ? new AssertingIndexSearcher(random, r, ex)\n          : new AssertingIndexSearcher(random, r.getTopReaderContext(), ex);\n      ret.setSimilarityProvider(similarityProvider);\n      return ret;\n    }\n  }\n\n","sourceOld":"  /** create a new searcher over the reader.\n   * This searcher might randomly use threads.\n   * if <code>maybeWrap</code> is true, this searcher might wrap the reader\n   * with one that returns null for getSequentialSubReaders.\n   */\n  public static IndexSearcher newSearcher(IndexReader r, boolean maybeWrap) throws IOException {\n    if (usually()) {\n      if (maybeWrap && rarely()) {\n        r = new SlowMultiReaderWrapper(r);\n      }\n      IndexSearcher ret = random.nextBoolean() ? new AssertingIndexSearcher(random, r) : new AssertingIndexSearcher(random, r.getTopReaderContext());\n      ret.setSimilarityProvider(similarityProvider);\n      return ret;\n    } else {\n      int threads = 0;\n      final ExecutorService ex = (random.nextBoolean()) ? null\n          : Executors.newFixedThreadPool(threads = _TestUtil.nextInt(random, 1, 8),\n                      new NamedThreadFactory(\"LuceneTestCase\"));\n      if (ex != null) {\n       if (VERBOSE) {\n        System.out.println(\"NOTE: newSearcher using ExecutorService with \" + threads + \" threads\");\n       }\n       r.addReaderClosedListener(new ReaderClosedListener() {\n         @Override\n         public void onClose(IndexReader reader) {\n           shutdownExecutorService(ex);\n         }\n       });\n      }\n      IndexSearcher ret = random.nextBoolean() \n          ? new AssertingIndexSearcher(random, r, ex)\n          : new AssertingIndexSearcher(random, r.getTopReaderContext(), ex);\n      ret.setSimilarityProvider(similarityProvider);\n      return ret;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newSearcher(IndexReader,boolean).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newSearcher(IndexReader,boolean).mjava","sourceNew":"  /** create a new searcher over the reader.\n   * This searcher might randomly use threads.\n   * if <code>maybeWrap</code> is true, this searcher might wrap the reader\n   * with one that returns null for getSequentialSubReaders.\n   */\n  public static IndexSearcher newSearcher(IndexReader r, boolean maybeWrap) throws IOException {\n    if (usually()) {\n      if (maybeWrap && rarely()) {\n        r = SlowCompositeReaderWrapper.wrap(r);\n      }\n      IndexSearcher ret = random.nextBoolean() ? new AssertingIndexSearcher(random, r) : new AssertingIndexSearcher(random, r.getTopReaderContext());\n      ret.setSimilarityProvider(similarityProvider);\n      return ret;\n    } else {\n      int threads = 0;\n      final ExecutorService ex = (random.nextBoolean()) ? null\n          : Executors.newFixedThreadPool(threads = _TestUtil.nextInt(random, 1, 8),\n                      new NamedThreadFactory(\"LuceneTestCase\"));\n      if (ex != null) {\n       if (VERBOSE) {\n        System.out.println(\"NOTE: newSearcher using ExecutorService with \" + threads + \" threads\");\n       }\n       r.addReaderClosedListener(new ReaderClosedListener() {\n         @Override\n         public void onClose(IndexReader reader) {\n           shutdownExecutorService(ex);\n         }\n       });\n      }\n      IndexSearcher ret = random.nextBoolean() \n          ? new AssertingIndexSearcher(random, r, ex)\n          : new AssertingIndexSearcher(random, r.getTopReaderContext(), ex);\n      ret.setSimilarityProvider(similarityProvider);\n      return ret;\n    }\n  }\n\n","sourceOld":"  /** create a new searcher over the reader.\n   * This searcher might randomly use threads.\n   * if <code>maybeWrap</code> is true, this searcher might wrap the reader\n   * with one that returns null for getSequentialSubReaders.\n   */\n  public static IndexSearcher newSearcher(IndexReader r, boolean maybeWrap) throws IOException {\n    if (usually()) {\n      if (maybeWrap && rarely()) {\n        r = new SlowMultiReaderWrapper(r);\n      }\n      IndexSearcher ret = random.nextBoolean() ? new AssertingIndexSearcher(random, r) : new AssertingIndexSearcher(random, r.getTopReaderContext());\n      ret.setSimilarityProvider(similarityProvider);\n      return ret;\n    } else {\n      int threads = 0;\n      final ExecutorService ex = (random.nextBoolean()) ? null\n          : Executors.newFixedThreadPool(threads = _TestUtil.nextInt(random, 1, 8),\n                      new NamedThreadFactory(\"LuceneTestCase\"));\n      if (ex != null) {\n       if (VERBOSE) {\n        System.out.println(\"NOTE: newSearcher using ExecutorService with \" + threads + \" threads\");\n       }\n       r.addReaderClosedListener(new ReaderClosedListener() {\n         @Override\n         public void onClose(IndexReader reader) {\n           shutdownExecutorService(ex);\n         }\n       });\n      }\n      IndexSearcher ret = random.nextBoolean() \n          ? new AssertingIndexSearcher(random, r, ex)\n          : new AssertingIndexSearcher(random, r.getTopReaderContext(), ex);\n      ret.setSimilarityProvider(similarityProvider);\n      return ret;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b","date":1328532481,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newSearcher(IndexReader,boolean).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newSearcher(IndexReader,boolean).mjava","sourceNew":"  /** create a new searcher over the reader.\n   * This searcher might randomly use threads.\n   * if <code>maybeWrap</code> is true, this searcher might wrap the reader\n   * with one that returns null for getSequentialSubReaders.\n   */\n  public static IndexSearcher newSearcher(IndexReader r, boolean maybeWrap) throws IOException {\n    if (usually()) {\n      if (maybeWrap && rarely()) {\n        r = SlowCompositeReaderWrapper.wrap(r);\n      }\n      IndexSearcher ret = random.nextBoolean() ? new AssertingIndexSearcher(random, r) : new AssertingIndexSearcher(random, r.getTopReaderContext());\n      ret.setSimilarity(similarity);\n      return ret;\n    } else {\n      int threads = 0;\n      final ExecutorService ex = (random.nextBoolean()) ? null\n          : Executors.newFixedThreadPool(threads = _TestUtil.nextInt(random, 1, 8),\n                      new NamedThreadFactory(\"LuceneTestCase\"));\n      if (ex != null) {\n       if (VERBOSE) {\n        System.out.println(\"NOTE: newSearcher using ExecutorService with \" + threads + \" threads\");\n       }\n       r.addReaderClosedListener(new ReaderClosedListener() {\n         @Override\n         public void onClose(IndexReader reader) {\n           shutdownExecutorService(ex);\n         }\n       });\n      }\n      IndexSearcher ret = random.nextBoolean() \n          ? new AssertingIndexSearcher(random, r, ex)\n          : new AssertingIndexSearcher(random, r.getTopReaderContext(), ex);\n      ret.setSimilarity(similarity);\n      return ret;\n    }\n  }\n\n","sourceOld":"  /** create a new searcher over the reader.\n   * This searcher might randomly use threads.\n   * if <code>maybeWrap</code> is true, this searcher might wrap the reader\n   * with one that returns null for getSequentialSubReaders.\n   */\n  public static IndexSearcher newSearcher(IndexReader r, boolean maybeWrap) throws IOException {\n    if (usually()) {\n      if (maybeWrap && rarely()) {\n        r = SlowCompositeReaderWrapper.wrap(r);\n      }\n      IndexSearcher ret = random.nextBoolean() ? new AssertingIndexSearcher(random, r) : new AssertingIndexSearcher(random, r.getTopReaderContext());\n      ret.setSimilarityProvider(similarityProvider);\n      return ret;\n    } else {\n      int threads = 0;\n      final ExecutorService ex = (random.nextBoolean()) ? null\n          : Executors.newFixedThreadPool(threads = _TestUtil.nextInt(random, 1, 8),\n                      new NamedThreadFactory(\"LuceneTestCase\"));\n      if (ex != null) {\n       if (VERBOSE) {\n        System.out.println(\"NOTE: newSearcher using ExecutorService with \" + threads + \" threads\");\n       }\n       r.addReaderClosedListener(new ReaderClosedListener() {\n         @Override\n         public void onClose(IndexReader reader) {\n           shutdownExecutorService(ex);\n         }\n       });\n      }\n      IndexSearcher ret = random.nextBoolean() \n          ? new AssertingIndexSearcher(random, r, ex)\n          : new AssertingIndexSearcher(random, r.getTopReaderContext(), ex);\n      ret.setSimilarityProvider(similarityProvider);\n      return ret;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newSearcher(IndexReader,boolean).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newSearcher(IndexReader,boolean).mjava","sourceNew":"  /** create a new searcher over the reader.\n   * This searcher might randomly use threads.\n   * if <code>maybeWrap</code> is true, this searcher might wrap the reader\n   * with one that returns null for getSequentialSubReaders.\n   */\n  public static IndexSearcher newSearcher(IndexReader r, boolean maybeWrap) throws IOException {\n    if (usually()) {\n      if (maybeWrap && rarely()) {\n        r = SlowCompositeReaderWrapper.wrap(r);\n      }\n      IndexSearcher ret = random.nextBoolean() ? new AssertingIndexSearcher(random, r) : new AssertingIndexSearcher(random, r.getTopReaderContext());\n      ret.setSimilarity(similarity);\n      return ret;\n    } else {\n      int threads = 0;\n      final ExecutorService ex = (random.nextBoolean()) ? null\n          : Executors.newFixedThreadPool(threads = _TestUtil.nextInt(random, 1, 8),\n                      new NamedThreadFactory(\"LuceneTestCase\"));\n      if (ex != null) {\n       if (VERBOSE) {\n        System.out.println(\"NOTE: newSearcher using ExecutorService with \" + threads + \" threads\");\n       }\n       r.addReaderClosedListener(new ReaderClosedListener() {\n         @Override\n         public void onClose(IndexReader reader) {\n           shutdownExecutorService(ex);\n         }\n       });\n      }\n      IndexSearcher ret = random.nextBoolean() \n          ? new AssertingIndexSearcher(random, r, ex)\n          : new AssertingIndexSearcher(random, r.getTopReaderContext(), ex);\n      ret.setSimilarity(similarity);\n      return ret;\n    }\n  }\n\n","sourceOld":"  /** create a new searcher over the reader.\n   * This searcher might randomly use threads.\n   * if <code>maybeWrap</code> is true, this searcher might wrap the reader\n   * with one that returns null for getSequentialSubReaders.\n   */\n  public static IndexSearcher newSearcher(IndexReader r, boolean maybeWrap) throws IOException {\n    if (usually()) {\n      if (maybeWrap && rarely()) {\n        r = SlowCompositeReaderWrapper.wrap(r);\n      }\n      IndexSearcher ret = random.nextBoolean() ? new AssertingIndexSearcher(random, r) : new AssertingIndexSearcher(random, r.getTopReaderContext());\n      ret.setSimilarity(similarity);\n      return ret;\n    } else {\n      int threads = 0;\n      final ExecutorService ex = (random.nextBoolean()) ? null\n          : Executors.newFixedThreadPool(threads = _TestUtil.nextInt(random, 1, 8),\n                      new NamedThreadFactory(\"LuceneTestCase\"));\n      if (ex != null) {\n       if (VERBOSE) {\n        System.out.println(\"NOTE: newSearcher using ExecutorService with \" + threads + \" threads\");\n       }\n       r.addReaderClosedListener(new ReaderClosedListener() {\n         @Override\n         public void onClose(IndexReader reader) {\n           shutdownExecutorService(ex);\n         }\n       });\n      }\n      IndexSearcher ret = random.nextBoolean() \n          ? new AssertingIndexSearcher(random, r, ex)\n          : new AssertingIndexSearcher(random, r.getTopReaderContext(), ex);\n      ret.setSimilarity(similarity);\n      return ret;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["7b91922b55d15444d554721b352861d028eb8278"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["7b91922b55d15444d554721b352861d028eb8278","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eeb24fe119d55091148e2a3d94e80c9e349d886c":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"a85e7319b5cf755cba8f1bfa7365afeb9cc3ad94":["8be580b58bcc650d428f3f22de81cadcf51d650a"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"8be580b58bcc650d428f3f22de81cadcf51d650a":["eeb24fe119d55091148e2a3d94e80c9e349d886c"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["8be580b58bcc650d428f3f22de81cadcf51d650a","a85e7319b5cf755cba8f1bfa7365afeb9cc3ad94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["0e7c2454a6a8237bfd0e953f5b940838408c9055","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","eeb24fe119d55091148e2a3d94e80c9e349d886c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"eeb24fe119d55091148e2a3d94e80c9e349d886c":["8be580b58bcc650d428f3f22de81cadcf51d650a"],"a85e7319b5cf755cba8f1bfa7365afeb9cc3ad94":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8be580b58bcc650d428f3f22de81cadcf51d650a":["a85e7319b5cf755cba8f1bfa7365afeb9cc3ad94","5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}