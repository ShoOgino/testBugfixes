{"path":"modules/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory#makeSpanClause().mjava","commits":[{"id":"cb278067c961537864615b4862771ebc54dae426","date":1315400669,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory#makeSpanClause().mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory#makeSpanNearClause().mjava","sourceNew":"  public SpanQuery makeSpanClause() {\n    SpanQuery [] spanQueries = new SpanQuery[size()];\n    Iterator<SpanQuery> sqi = weightBySpanQuery.keySet().iterator();\n    int i = 0;\n    while (sqi.hasNext()) {\n      SpanQuery sq = sqi.next();\n      sq.setBoost(weightBySpanQuery.get(sq).floatValue());\n      spanQueries[i++] = sq;\n    }\n    \n    if (spanQueries.length == 1)\n      return spanQueries[0];\n    else\n      return new SpanOrQuery(spanQueries);\n  }\n\n","sourceOld":"  public SpanQuery makeSpanNearClause() {\n    SpanQuery [] spanQueries = new SpanQuery[size()];\n    Iterator<SpanQuery> sqi = weightBySpanQuery.keySet().iterator();\n    int i = 0;\n    while (sqi.hasNext()) {\n      SpanQuery sq = sqi.next();\n      sq.setBoost(weightBySpanQuery.get(sq).floatValue());\n      spanQueries[i++] = sq;\n    }\n    \n    if (spanQueries.length == 1)\n      return spanQueries[0];\n    else\n      return new SpanOrQuery(spanQueries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory#makeSpanClause().mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory#makeSpanClause().mjava","sourceNew":"  public SpanQuery makeSpanClause() {\n    SpanQuery [] spanQueries = new SpanQuery[size()];\n    Iterator<SpanQuery> sqi = weightBySpanQuery.keySet().iterator();\n    int i = 0;\n    while (sqi.hasNext()) {\n      SpanQuery sq = sqi.next();\n      sq.setBoost(weightBySpanQuery.get(sq).floatValue());\n      spanQueries[i++] = sq;\n    }\n    \n    if (spanQueries.length == 1)\n      return spanQueries[0];\n    else\n      return new SpanOrQuery(spanQueries);\n  }\n\n","sourceOld":"  public SpanQuery makeSpanClause() {\n    SpanQuery [] spanQueries = new SpanQuery[size()];\n    Iterator<SpanQuery> sqi = weightBySpanQuery.keySet().iterator();\n    int i = 0;\n    while (sqi.hasNext()) {\n      SpanQuery sq = sqi.next();\n      sq.setBoost(weightBySpanQuery.get(sq).floatValue());\n      spanQueries[i++] = sq;\n    }\n    \n    if (spanQueries.length == 1)\n      return spanQueries[0];\n    else\n      return new SpanOrQuery(spanQueries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cb278067c961537864615b4862771ebc54dae426"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb278067c961537864615b4862771ebc54dae426":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cb278067c961537864615b4862771ebc54dae426"],"cb278067c961537864615b4862771ebc54dae426":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}