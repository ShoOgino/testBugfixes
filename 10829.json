{"path":"solr/core/src/java/org/apache/solr/schema/DateRangeField#getStoredValue(Shape,String).mjava","commits":[{"id":"03298305b51c91a6b0221a7b134ba26578934d39","date":1418532926,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/DateRangeField#getStoredValue(Shape,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected String getStoredValue(Shape shape, String shapeStr) {\n    if (shape instanceof UnitNRShape) {\n      UnitNRShape unitShape = (UnitNRShape) shape;\n      if (unitShape.getLevel() == tree.getMaxLevels()) {\n        //fully precise date. We can be fully compatible with TrieDateField.\n        Date date = tree.toCalendar(unitShape).getTime();\n        return TrieDateField.formatExternal(date);\n      }\n    }\n    return (shapeStr == null ? shape.toString() : shapeStr);//we don't normalize ranges here; should we?\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331","date":1437383270,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/DateRangeField#getStoredValue(Shape,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/DateRangeField#getStoredValue(Shape,String).mjava","sourceNew":"  @Override\n  protected String getStoredValue(Shape shape, String shapeStr) {\n    if (shape instanceof UnitNRShape) {\n      UnitNRShape unitShape = (UnitNRShape) shape;\n      if (unitShape.getLevel() == tree.getMaxLevels()) {\n        //fully precise date. We can be fully compatible with TrieDateField.\n        Date date = tree.toCalendar(unitShape).getTime();\n        return DateFormatUtil.formatExternal(date);\n      }\n    }\n    return (shapeStr == null ? shape.toString() : shapeStr);//we don't normalize ranges here; should we?\n  }\n\n","sourceOld":"  @Override\n  protected String getStoredValue(Shape shape, String shapeStr) {\n    if (shape instanceof UnitNRShape) {\n      UnitNRShape unitShape = (UnitNRShape) shape;\n      if (unitShape.getLevel() == tree.getMaxLevels()) {\n        //fully precise date. We can be fully compatible with TrieDateField.\n        Date date = tree.toCalendar(unitShape).getTime();\n        return TrieDateField.formatExternal(date);\n      }\n    }\n    return (shapeStr == null ? shape.toString() : shapeStr);//we don't normalize ranges here; should we?\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3f6c7717a0f1decd1668144537943efcc70cd95","date":1459359762,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/DateRangeField#getStoredValue(Shape,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/DateRangeField#getStoredValue(Shape,String).mjava","sourceNew":"  @Override\n  protected String getStoredValue(Shape shape, String shapeStr) {\n    if (shape instanceof UnitNRShape) {\n      UnitNRShape unitShape = (UnitNRShape) shape;\n      if (unitShape.getLevel() == tree.getMaxLevels()) {\n        //fully precise date. We can be fully compatible with TrieDateField.\n        Date date = tree.toCalendar(unitShape).getTime();\n        return date.toInstant().toString();\n      }\n    }\n    return (shapeStr == null ? shape.toString() : shapeStr);//we don't normalize ranges here; should we?\n  }\n\n","sourceOld":"  @Override\n  protected String getStoredValue(Shape shape, String shapeStr) {\n    if (shape instanceof UnitNRShape) {\n      UnitNRShape unitShape = (UnitNRShape) shape;\n      if (unitShape.getLevel() == tree.getMaxLevels()) {\n        //fully precise date. We can be fully compatible with TrieDateField.\n        Date date = tree.toCalendar(unitShape).getTime();\n        return DateFormatUtil.formatExternal(date);\n      }\n    }\n    return (shapeStr == null ? shape.toString() : shapeStr);//we don't normalize ranges here; should we?\n  }\n\n","bugFix":null,"bugIntro":["ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29","date":1463148204,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/DateRangeField#getStoredValue(Shape,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/DateRangeField#getStoredValue(Shape,String).mjava","sourceNew":"  @Override\n  protected String getStoredValue(Shape shape, String shapeStr) {\n    // even if shapeStr is set, it might have included some dateMath, so see if we can resolve it first:\n    if (shape instanceof UnitNRShape) {\n      UnitNRShape unitShape = (UnitNRShape) shape;\n      if (unitShape.getLevel() == tree.getMaxLevels()) {\n        //fully precise date. We can be fully compatible with TrieDateField (incl. 'Z')\n        return shape.toString() + 'Z';\n      }\n    }\n    return (shapeStr == null ? shape.toString() : shapeStr);//we don't normalize ranges here; should we?\n  }\n\n","sourceOld":"  @Override\n  protected String getStoredValue(Shape shape, String shapeStr) {\n    if (shape instanceof UnitNRShape) {\n      UnitNRShape unitShape = (UnitNRShape) shape;\n      if (unitShape.getLevel() == tree.getMaxLevels()) {\n        //fully precise date. We can be fully compatible with TrieDateField.\n        Date date = tree.toCalendar(unitShape).getTime();\n        return date.toInstant().toString();\n      }\n    }\n    return (shapeStr == null ? shape.toString() : shapeStr);//we don't normalize ranges here; should we?\n  }\n\n","bugFix":["d3f6c7717a0f1decd1668144537943efcc70cd95","03298305b51c91a6b0221a7b134ba26578934d39"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/DateRangeField#getStoredValue(Shape,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/DateRangeField#getStoredValue(Shape,String).mjava","sourceNew":"  @Override\n  protected String getStoredValue(Shape shape, String shapeStr) {\n    // even if shapeStr is set, it might have included some dateMath, so see if we can resolve it first:\n    if (shape instanceof UnitNRShape) {\n      UnitNRShape unitShape = (UnitNRShape) shape;\n      if (unitShape.getLevel() == tree.getMaxLevels()) {\n        //fully precise date. We can be fully compatible with TrieDateField (incl. 'Z')\n        return shape.toString() + 'Z';\n      }\n    }\n    return (shapeStr == null ? shape.toString() : shapeStr);//we don't normalize ranges here; should we?\n  }\n\n","sourceOld":"  @Override\n  protected String getStoredValue(Shape shape, String shapeStr) {\n    if (shape instanceof UnitNRShape) {\n      UnitNRShape unitShape = (UnitNRShape) shape;\n      if (unitShape.getLevel() == tree.getMaxLevels()) {\n        //fully precise date. We can be fully compatible with TrieDateField.\n        Date date = tree.toCalendar(unitShape).getTime();\n        return date.toInstant().toString();\n      }\n    }\n    return (shapeStr == null ? shape.toString() : shapeStr);//we don't normalize ranges here; should we?\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/DateRangeField#getStoredValue(Shape,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/DateRangeField#getStoredValue(Shape,String).mjava","sourceNew":"  @Override\n  protected String getStoredValue(Shape shape, String shapeStr) {\n    // even if shapeStr is set, it might have included some dateMath, so see if we can resolve it first:\n    if (shape instanceof UnitNRShape) {\n      UnitNRShape unitShape = (UnitNRShape) shape;\n      if (unitShape.getLevel() == tree.getMaxLevels()) {\n        //fully precise date. We can be fully compatible with TrieDateField (incl. 'Z')\n        return shape.toString() + 'Z';\n      }\n    }\n    return (shapeStr == null ? shape.toString() : shapeStr);//we don't normalize ranges here; should we?\n  }\n\n","sourceOld":"  @Override\n  protected String getStoredValue(Shape shape, String shapeStr) {\n    if (shape instanceof UnitNRShape) {\n      UnitNRShape unitShape = (UnitNRShape) shape;\n      if (unitShape.getLevel() == tree.getMaxLevels()) {\n        //fully precise date. We can be fully compatible with TrieDateField.\n        Date date = tree.toCalendar(unitShape).getTime();\n        return date.toInstant().toString();\n      }\n    }\n    return (shapeStr == null ? shape.toString() : shapeStr);//we don't normalize ranges here; should we?\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/DateRangeField#getStoredValue(Shape,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/DateRangeField#getStoredValue(Shape,String).mjava","sourceNew":"  @Override\n  protected String getStoredValue(Shape shape, String shapeStr) {\n    // even if shapeStr is set, it might have included some dateMath, so see if we can resolve it first:\n    if (shape instanceof UnitNRShape) {\n      UnitNRShape unitShape = (UnitNRShape) shape;\n      if (unitShape.getLevel() == tree.getMaxLevels()) {\n        //fully precise date. We can be fully compatible with TrieDateField (incl. 'Z')\n        return shape.toString() + 'Z';\n      }\n    }\n    return (shapeStr == null ? shape.toString() : shapeStr);//we don't normalize ranges here; should we?\n  }\n\n","sourceOld":"  @Override\n  protected String getStoredValue(Shape shape, String shapeStr) {\n    if (shape instanceof UnitNRShape) {\n      UnitNRShape unitShape = (UnitNRShape) shape;\n      if (unitShape.getLevel() == tree.getMaxLevels()) {\n        //fully precise date. We can be fully compatible with TrieDateField.\n        Date date = tree.toCalendar(unitShape).getTime();\n        return date.toInstant().toString();\n      }\n    }\n    return (shapeStr == null ? shape.toString() : shapeStr);//we don't normalize ranges here; should we?\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa31759957c90bbd07c2fa553208a76b0e8dc518","date":1504624674,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/DateRangeField#getStoredValue(Shape,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/DateRangeField#getStoredValue(Shape,String).mjava","sourceNew":"  @Override\n  protected String getStoredValue(Shape shape, String shapeStr) {\n    // even if shapeStr is set, it might have included some dateMath, so see if we can resolve it first:\n    if (shape instanceof UnitNRShape) {\n      UnitNRShape unitShape = (UnitNRShape) shape;\n      if (unitShape.getLevel() == tree.getMaxLevels()) {\n        //fully precise date. We can be fully compatible with DatePointField (incl. 'Z')\n        return shape.toString() + 'Z';\n      }\n    }\n    return (shapeStr == null ? shape.toString() : shapeStr);//we don't normalize ranges here; should we?\n  }\n\n","sourceOld":"  @Override\n  protected String getStoredValue(Shape shape, String shapeStr) {\n    // even if shapeStr is set, it might have included some dateMath, so see if we can resolve it first:\n    if (shape instanceof UnitNRShape) {\n      UnitNRShape unitShape = (UnitNRShape) shape;\n      if (unitShape.getLevel() == tree.getMaxLevels()) {\n        //fully precise date. We can be fully compatible with TrieDateField (incl. 'Z')\n        return shape.toString() + 'Z';\n      }\n    }\n    return (shapeStr == null ? shape.toString() : shapeStr);//we don't normalize ranges here; should we?\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21283ed01203901a7257aa4b7f0a0899c86e56e","date":1504689720,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/DateRangeField#getStoredValue(Shape,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/DateRangeField#getStoredValue(Shape,String).mjava","sourceNew":"  @Override\n  protected String getStoredValue(Shape shape, String shapeStr) {\n    // even if shapeStr is set, it might have included some dateMath, so see if we can resolve it first:\n    if (shape instanceof UnitNRShape) {\n      UnitNRShape unitShape = (UnitNRShape) shape;\n      if (unitShape.getLevel() == tree.getMaxLevels()) {\n        //fully precise date. We can be fully compatible with DatePointField (incl. 'Z')\n        return shape.toString() + 'Z';\n      }\n    }\n    return (shapeStr == null ? shape.toString() : shapeStr);//we don't normalize ranges here; should we?\n  }\n\n","sourceOld":"  @Override\n  protected String getStoredValue(Shape shape, String shapeStr) {\n    // even if shapeStr is set, it might have included some dateMath, so see if we can resolve it first:\n    if (shape instanceof UnitNRShape) {\n      UnitNRShape unitShape = (UnitNRShape) shape;\n      if (unitShape.getLevel() == tree.getMaxLevels()) {\n        //fully precise date. We can be fully compatible with TrieDateField (incl. 'Z')\n        return shape.toString() + 'Z';\n      }\n    }\n    return (shapeStr == null ? shape.toString() : shapeStr);//we don't normalize ranges here; should we?\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","date":1504848000,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/DateRangeField#getStoredValue(Shape,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/DateRangeField#getStoredValue(Shape,String).mjava","sourceNew":"  @Override\n  protected String getStoredValue(Shape shape, String shapeStr) {\n    // even if shapeStr is set, it might have included some dateMath, so see if we can resolve it first:\n    if (shape instanceof UnitNRShape) {\n      UnitNRShape unitShape = (UnitNRShape) shape;\n      if (unitShape.getLevel() == tree.getMaxLevels()) {\n        //fully precise date. We can be fully compatible with DatePointField (incl. 'Z')\n        return shape.toString() + 'Z';\n      }\n    }\n    return (shapeStr == null ? shape.toString() : shapeStr);//we don't normalize ranges here; should we?\n  }\n\n","sourceOld":"  @Override\n  protected String getStoredValue(Shape shape, String shapeStr) {\n    // even if shapeStr is set, it might have included some dateMath, so see if we can resolve it first:\n    if (shape instanceof UnitNRShape) {\n      UnitNRShape unitShape = (UnitNRShape) shape;\n      if (unitShape.getLevel() == tree.getMaxLevels()) {\n        //fully precise date. We can be fully compatible with TrieDateField (incl. 'Z')\n        return shape.toString() + 'Z';\n      }\n    }\n    return (shapeStr == null ? shape.toString() : shapeStr);//we don't normalize ranges here; should we?\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/DateRangeField#getStoredValue(Shape,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/DateRangeField#getStoredValue(Shape,String).mjava","sourceNew":"  @Override\n  protected String getStoredValue(Shape shape, String shapeStr) {\n    // even if shapeStr is set, it might have included some dateMath, so see if we can resolve it first:\n    if (shape instanceof UnitNRShape) {\n      UnitNRShape unitShape = (UnitNRShape) shape;\n      if (unitShape.getLevel() == tree.getMaxLevels()) {\n        //fully precise date. We can be fully compatible with DatePointField (incl. 'Z')\n        return shape.toString() + 'Z';\n      }\n    }\n    return (shapeStr == null ? shape.toString() : shapeStr);//we don't normalize ranges here; should we?\n  }\n\n","sourceOld":"  @Override\n  protected String getStoredValue(Shape shape, String shapeStr) {\n    // even if shapeStr is set, it might have included some dateMath, so see if we can resolve it first:\n    if (shape instanceof UnitNRShape) {\n      UnitNRShape unitShape = (UnitNRShape) shape;\n      if (unitShape.getLevel() == tree.getMaxLevels()) {\n        //fully precise date. We can be fully compatible with TrieDateField (incl. 'Z')\n        return shape.toString() + 'Z';\n      }\n    }\n    return (shapeStr == null ? shape.toString() : shapeStr);//we don't normalize ranges here; should we?\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b21283ed01203901a7257aa4b7f0a0899c86e56e":["d470c8182e92b264680e34081b75e70a9f2b3c89","aa31759957c90bbd07c2fa553208a76b0e8dc518"],"d3f6c7717a0f1decd1668144537943efcc70cd95":["0c38a05f7a7b43c2dabbd25f12f9941c64bb2331"],"aa31759957c90bbd07c2fa553208a76b0e8dc518":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"03298305b51c91a6b0221a7b134ba26578934d39":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0ad30c6a479e764150a3316e57263319775f1df2":["d3f6c7717a0f1decd1668144537943efcc70cd95","ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["d3f6c7717a0f1decd1668144537943efcc70cd95","d470c8182e92b264680e34081b75e70a9f2b3c89"],"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331":["03298305b51c91a6b0221a7b134ba26578934d39"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["d3f6c7717a0f1decd1668144537943efcc70cd95","0ad30c6a479e764150a3316e57263319775f1df2"],"ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"685bd38810c206c93e9058f3c2cfa9827c086c27":["d470c8182e92b264680e34081b75e70a9f2b3c89","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["d470c8182e92b264680e34081b75e70a9f2b3c89","b21283ed01203901a7257aa4b7f0a0899c86e56e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"]},"commit2Childs":{"b21283ed01203901a7257aa4b7f0a0899c86e56e":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"aa31759957c90bbd07c2fa553208a76b0e8dc518":["b21283ed01203901a7257aa4b7f0a0899c86e56e"],"d3f6c7717a0f1decd1668144537943efcc70cd95":["0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29"],"03298305b51c91a6b0221a7b134ba26578934d39":["0c38a05f7a7b43c2dabbd25f12f9941c64bb2331"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["b21283ed01203901a7257aa4b7f0a0899c86e56e","aa31759957c90bbd07c2fa553208a76b0e8dc518","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","685bd38810c206c93e9058f3c2cfa9827c086c27","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29":["0ad30c6a479e764150a3316e57263319775f1df2"],"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["03298305b51c91a6b0221a7b134ba26578934d39"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}