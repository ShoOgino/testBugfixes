{"path":"solr/core/src/java/org/apache/solr/core/SolrProperties#getCoreProperties(String,CoreDescriptor).mjava","commits":[{"id":"a837c064b67fa63a9394136e31218b908cdcf783","date":1362186072,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrProperties#getCoreProperties(String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#getCoreProps(String,String,Properties).mjava","sourceNew":"  static Properties getCoreProperties(String instanceDir, CoreDescriptor dcore) {\n    String file = dcore.getPropertiesName();\n    if (file == null) file = \"conf\" + File.separator + \"solrcore.properties\";\n    File corePropsFile = new File(file);\n    if (!corePropsFile.isAbsolute()) {\n      corePropsFile = new File(instanceDir, file);\n    }\n    Properties p = dcore.getCoreProperties();\n    if (corePropsFile.exists() && corePropsFile.isFile()) {\n      p = new Properties(dcore.getCoreProperties());\n      InputStream is = null;\n      try {\n        is = new FileInputStream(corePropsFile);\n        p.load(is);\n      } catch (IOException e) {\n        log.warn(\"Error loading properties \", e);\n      } finally {\n        IOUtils.closeQuietly(is);\n      }\n    }\n    return p;\n  }\n\n","sourceOld":"  static Properties getCoreProps(String instanceDir, String file, Properties defaults) {\n    if(file == null) file = \"conf\"+File.separator+ \"solrcore.properties\";\n    File corePropsFile = new File(file);\n    if(!corePropsFile.isAbsolute()){\n      corePropsFile = new File(instanceDir, file);\n    }\n    Properties p = defaults;\n    if (corePropsFile.exists() && corePropsFile.isFile()) {\n      p = new Properties(defaults);\n      InputStream is = null;\n      try {\n        is = new FileInputStream(corePropsFile);\n        p.load(is);\n      } catch (IOException e) {\n        log.warn(\"Error loading properties \",e);\n      } finally{\n        IOUtils.closeQuietly(is);        \n      }\n    }\n    return p;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9818efa55563ddfecdecafbdd43f4bee9f252e7d","date":1364853872,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#getCoreProperties(String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrProperties#getCoreProperties(String,CoreDescriptor).mjava","sourceNew":"  static Properties getCoreProperties(String instanceDir, CoreDescriptor dcore) {\n    String file = dcore.getPropertiesName();\n    if (file == null) file = \"conf\" + File.separator + \"solrcore.properties\";\n    File corePropsFile = new File(file);\n    if (!corePropsFile.isAbsolute()) {\n      corePropsFile = new File(instanceDir, file);\n    }\n    Properties p = dcore.getCoreProperties();\n    if (corePropsFile.exists() && corePropsFile.isFile()) {\n      p = new Properties(dcore.getCoreProperties());\n      InputStream is = null;\n      try {\n        is = new FileInputStream(corePropsFile);\n        p.load(is);\n      } catch (IOException e) {\n        log.warn(\"Error loading properties \", e);\n      } finally {\n        IOUtils.closeQuietly(is);\n      }\n    }\n    return p;\n  }\n\n","sourceOld":"  static Properties getCoreProperties(String instanceDir, CoreDescriptor dcore) {\n    String file = dcore.getPropertiesName();\n    if (file == null) file = \"conf\" + File.separator + \"solrcore.properties\";\n    File corePropsFile = new File(file);\n    if (!corePropsFile.isAbsolute()) {\n      corePropsFile = new File(instanceDir, file);\n    }\n    Properties p = dcore.getCoreProperties();\n    if (corePropsFile.exists() && corePropsFile.isFile()) {\n      p = new Properties(dcore.getCoreProperties());\n      InputStream is = null;\n      try {\n        is = new FileInputStream(corePropsFile);\n        p.load(is);\n      } catch (IOException e) {\n        log.warn(\"Error loading properties \", e);\n      } finally {\n        IOUtils.closeQuietly(is);\n      }\n    }\n    return p;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["a837c064b67fa63a9394136e31218b908cdcf783"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a837c064b67fa63a9394136e31218b908cdcf783":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"]},"commit2Childs":{"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a837c064b67fa63a9394136e31218b908cdcf783"],"a837c064b67fa63a9394136e31218b908cdcf783":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}