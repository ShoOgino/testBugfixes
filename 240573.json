{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addBinaryField(FieldInfo,boolean,int).mjava","commits":[{"id":"70a62ed2170ac1ef14886df1c66b89c9e4a68567","date":1352474176,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addBinaryField(FieldInfo,boolean,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public BinaryDocValuesConsumer addBinaryField(FieldInfo field, boolean fixedLength, int maxLength) throws IOException {\n      writeFieldEntry(field);\n      return null; // nocommit\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa931a0506f27ccab76c6b080c467c12ee95daa8","date":1352484877,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addBinaryField(FieldInfo,boolean,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addBinaryField(FieldInfo,boolean,int).mjava","sourceNew":"    @Override\n    public BinaryDocValuesConsumer addBinaryField(FieldInfo field, boolean fixedLength, final int maxLength) throws IOException {\n      writeFieldEntry(field);\n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Long.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n      \n      return new BinaryDocValuesConsumer() {\n        int numDocsWritten = 0;\n        \n        @Override\n        public void add(BytesRef value) throws IOException {\n          // write length\n          SimpleTextUtil.write(data, LENGTH);\n          SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n          SimpleTextUtil.writeNewline(data);\n          \n          // write bytes\n          SimpleTextUtil.write(data, value);\n          // pad to fit\n          for (int i = value.length; i < maxLength; i++) {\n            data.writeByte((byte)' ');\n          }\n          SimpleTextUtil.writeNewline(data);\n          numDocsWritten++;\n        }\n\n        @Override\n        public void finish(FieldInfos fis, int numDocs) throws IOException {\n          assert numDocs == numDocsWritten;\n          // nocommit: hopefully indexwriter is responsible for \"filling\" like it does stored fields!\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public BinaryDocValuesConsumer addBinaryField(FieldInfo field, boolean fixedLength, int maxLength) throws IOException {\n      writeFieldEntry(field);\n      return null; // nocommit\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce73f585d17f53055185a19beb46db23d76e0ad9","date":1353077110,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addBinaryField(FieldInfo,boolean,int,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addBinaryField(FieldInfo,boolean,int).mjava","sourceNew":"    @Override\n    public BinaryDocValuesConsumer addBinaryField(FieldInfo field, boolean fixedLength, final int maxLength, final int numDocs) throws IOException {\n      writeFieldEntry(field);\n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Long.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n      \n      return new BinaryDocValuesConsumer() {\n        int numDocsWritten = 0;\n        \n        @Override\n        public void add(BytesRef value) throws IOException {\n          // write length\n          SimpleTextUtil.write(data, LENGTH);\n          SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n          SimpleTextUtil.writeNewline(data);\n          \n          // write bytes\n          SimpleTextUtil.write(data, value);\n          // pad to fit\n          for (int i = value.length; i < maxLength; i++) {\n            data.writeByte((byte)' ');\n          }\n          SimpleTextUtil.writeNewline(data);\n          numDocsWritten++;\n        }\n\n        @Override\n        public void finish() throws IOException {\n          assert numDocs == numDocsWritten;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public BinaryDocValuesConsumer addBinaryField(FieldInfo field, boolean fixedLength, final int maxLength) throws IOException {\n      writeFieldEntry(field);\n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Long.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n      \n      return new BinaryDocValuesConsumer() {\n        int numDocsWritten = 0;\n        \n        @Override\n        public void add(BytesRef value) throws IOException {\n          // write length\n          SimpleTextUtil.write(data, LENGTH);\n          SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n          SimpleTextUtil.writeNewline(data);\n          \n          // write bytes\n          SimpleTextUtil.write(data, value);\n          // pad to fit\n          for (int i = value.length; i < maxLength; i++) {\n            data.writeByte((byte)' ');\n          }\n          SimpleTextUtil.writeNewline(data);\n          numDocsWritten++;\n        }\n\n        @Override\n        public void finish(FieldInfos fis, int numDocs) throws IOException {\n          assert numDocs == numDocsWritten;\n          // nocommit: hopefully indexwriter is responsible for \"filling\" like it does stored fields!\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f176b7bac2a187d69335c079b1f923449fb2881f","date":1353257308,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addBinaryField(FieldInfo,boolean,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addBinaryField(FieldInfo,boolean,int,int).mjava","sourceNew":"    @Override\n    public BinaryDocValuesConsumer addBinaryField(FieldInfo field, boolean fixedLength, final int maxLength) throws IOException {\n      writeFieldEntry(field);\n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Long.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n      \n      return new BinaryDocValuesConsumer() {\n        int numDocsWritten = 0;\n        \n        @Override\n        public void add(BytesRef value) throws IOException {\n          // write length\n          SimpleTextUtil.write(data, LENGTH);\n          SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n          SimpleTextUtil.writeNewline(data);\n          \n          // write bytes -- don't use SimpleText.write\n          // because it escapes:\n          data.writeBytes(value.bytes, value.offset, value.length);\n\n          // pad to fit\n          for (int i = value.length; i < maxLength; i++) {\n            data.writeByte((byte)' ');\n          }\n          SimpleTextUtil.writeNewline(data);\n          numDocsWritten++;\n        }\n\n        @Override\n        public void finish() throws IOException {\n          assert numDocs == numDocsWritten;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public BinaryDocValuesConsumer addBinaryField(FieldInfo field, boolean fixedLength, final int maxLength, final int numDocs) throws IOException {\n      writeFieldEntry(field);\n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Long.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n      \n      return new BinaryDocValuesConsumer() {\n        int numDocsWritten = 0;\n        \n        @Override\n        public void add(BytesRef value) throws IOException {\n          // write length\n          SimpleTextUtil.write(data, LENGTH);\n          SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n          SimpleTextUtil.writeNewline(data);\n          \n          // write bytes -- don't use SimpleText.write\n          // because it escapes:\n          data.writeBytes(value.bytes, value.offset, value.length);\n\n          // pad to fit\n          for (int i = value.length; i < maxLength; i++) {\n            data.writeByte((byte)' ');\n          }\n          SimpleTextUtil.writeNewline(data);\n          numDocsWritten++;\n        }\n\n        @Override\n        public void finish() throws IOException {\n          assert numDocs == numDocsWritten;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83f7535831b82edd777d50f0276d244b3c9a4734","date":1353267152,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addBinaryField(FieldInfo,boolean,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addBinaryField(FieldInfo,boolean,int).mjava","sourceNew":"    @Override\n    public BinaryDocValuesConsumer addBinaryField(FieldInfo field, boolean fixedLength, final int maxLength) throws IOException {\n      assert fieldSeen(field.name);\n      writeFieldEntry(field);\n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Long.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n      \n      return new BinaryDocValuesConsumer() {\n        int numDocsWritten = 0;\n        \n        @Override\n        public void add(BytesRef value) throws IOException {\n          // write length\n          SimpleTextUtil.write(data, LENGTH);\n          SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n          SimpleTextUtil.writeNewline(data);\n          \n          // write bytes -- don't use SimpleText.write\n          // because it escapes:\n          data.writeBytes(value.bytes, value.offset, value.length);\n\n          // pad to fit\n          for (int i = value.length; i < maxLength; i++) {\n            data.writeByte((byte)' ');\n          }\n          SimpleTextUtil.writeNewline(data);\n          numDocsWritten++;\n        }\n\n        @Override\n        public void finish() throws IOException {\n          assert numDocs == numDocsWritten;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public BinaryDocValuesConsumer addBinaryField(FieldInfo field, boolean fixedLength, final int maxLength) throws IOException {\n      writeFieldEntry(field);\n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Long.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n      \n      return new BinaryDocValuesConsumer() {\n        int numDocsWritten = 0;\n        \n        @Override\n        public void add(BytesRef value) throws IOException {\n          // write length\n          SimpleTextUtil.write(data, LENGTH);\n          SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n          SimpleTextUtil.writeNewline(data);\n          \n          // write bytes -- don't use SimpleText.write\n          // because it escapes:\n          data.writeBytes(value.bytes, value.offset, value.length);\n\n          // pad to fit\n          for (int i = value.length; i < maxLength; i++) {\n            data.writeByte((byte)' ');\n          }\n          SimpleTextUtil.writeNewline(data);\n          numDocsWritten++;\n        }\n\n        @Override\n        public void finish() throws IOException {\n          assert numDocs == numDocsWritten;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e05b279040cd7b938223b77c3772786678160cf6","date":1353297629,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addBinaryField(FieldInfo,boolean,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addBinaryField(FieldInfo,boolean,int).mjava","sourceNew":"    @Override\n    public BinaryDocValuesConsumer addBinaryField(FieldInfo field, boolean fixedLength, final int maxLength) throws IOException {\n      assert fieldSeen(field.name);\n      writeFieldEntry(field);\n      // write fixedlength\n      SimpleTextUtil.write(data, FIXEDLENGTH);\n      SimpleTextUtil.write(data, Boolean.toString(fixedLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Long.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n      \n      return new BinaryDocValuesConsumer() {\n        int numDocsWritten = 0;\n        \n        @Override\n        public void add(BytesRef value) throws IOException {\n          // write length\n          SimpleTextUtil.write(data, LENGTH);\n          SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n          SimpleTextUtil.writeNewline(data);\n          \n          // write bytes -- don't use SimpleText.write\n          // because it escapes:\n          data.writeBytes(value.bytes, value.offset, value.length);\n\n          // pad to fit\n          for (int i = value.length; i < maxLength; i++) {\n            data.writeByte((byte)' ');\n          }\n          SimpleTextUtil.writeNewline(data);\n          numDocsWritten++;\n        }\n\n        @Override\n        public void finish() throws IOException {\n          assert numDocs == numDocsWritten;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public BinaryDocValuesConsumer addBinaryField(FieldInfo field, boolean fixedLength, final int maxLength) throws IOException {\n      assert fieldSeen(field.name);\n      writeFieldEntry(field);\n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Long.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n      \n      return new BinaryDocValuesConsumer() {\n        int numDocsWritten = 0;\n        \n        @Override\n        public void add(BytesRef value) throws IOException {\n          // write length\n          SimpleTextUtil.write(data, LENGTH);\n          SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n          SimpleTextUtil.writeNewline(data);\n          \n          // write bytes -- don't use SimpleText.write\n          // because it escapes:\n          data.writeBytes(value.bytes, value.offset, value.length);\n\n          // pad to fit\n          for (int i = value.length; i < maxLength; i++) {\n            data.writeByte((byte)' ');\n          }\n          SimpleTextUtil.writeNewline(data);\n          numDocsWritten++;\n        }\n\n        @Override\n        public void finish() throws IOException {\n          assert numDocs == numDocsWritten;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55eeb2534cd53d2a985669829df942468ebf5314","date":1354409119,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addBinaryField(FieldInfo,boolean,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addBinaryField(FieldInfo,boolean,int).mjava","sourceNew":"    @Override\n    public BinaryDocValuesConsumer addBinaryField(FieldInfo field, boolean fixedLength, final int maxLength) throws IOException {\n      assert fieldSeen(field.name);\n      assert !isNorms;\n      writeFieldEntry(field);\n      // write fixedlength\n      SimpleTextUtil.write(data, FIXEDLENGTH);\n      SimpleTextUtil.write(data, Boolean.toString(fixedLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Long.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n      \n      return new BinaryDocValuesConsumer() {\n        int numDocsWritten = 0;\n        \n        @Override\n        public void add(BytesRef value) throws IOException {\n          // write length\n          SimpleTextUtil.write(data, LENGTH);\n          SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n          SimpleTextUtil.writeNewline(data);\n          \n          // write bytes -- don't use SimpleText.write\n          // because it escapes:\n          data.writeBytes(value.bytes, value.offset, value.length);\n\n          // pad to fit\n          for (int i = value.length; i < maxLength; i++) {\n            data.writeByte((byte)' ');\n          }\n          SimpleTextUtil.writeNewline(data);\n          numDocsWritten++;\n        }\n\n        @Override\n        public void finish() throws IOException {\n          assert numDocs == numDocsWritten;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public BinaryDocValuesConsumer addBinaryField(FieldInfo field, boolean fixedLength, final int maxLength) throws IOException {\n      assert fieldSeen(field.name);\n      writeFieldEntry(field);\n      // write fixedlength\n      SimpleTextUtil.write(data, FIXEDLENGTH);\n      SimpleTextUtil.write(data, Boolean.toString(fixedLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Long.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n      \n      return new BinaryDocValuesConsumer() {\n        int numDocsWritten = 0;\n        \n        @Override\n        public void add(BytesRef value) throws IOException {\n          // write length\n          SimpleTextUtil.write(data, LENGTH);\n          SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n          SimpleTextUtil.writeNewline(data);\n          \n          // write bytes -- don't use SimpleText.write\n          // because it escapes:\n          data.writeBytes(value.bytes, value.offset, value.length);\n\n          // pad to fit\n          for (int i = value.length; i < maxLength; i++) {\n            data.writeByte((byte)' ');\n          }\n          SimpleTextUtil.writeNewline(data);\n          numDocsWritten++;\n        }\n\n        @Override\n        public void finish() throws IOException {\n          assert numDocs == numDocsWritten;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e29774db46ad98ca4a8d7fcbfab633ebc01f358","date":1355170812,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addBinaryField(FieldInfo,boolean,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addBinaryField(FieldInfo,boolean,int).mjava","sourceNew":"    @Override\n    public BinaryDocValuesConsumer addBinaryField(FieldInfo field, boolean fixedLength, final int maxLength) throws IOException {\n      assert fieldSeen(field.name);\n      assert DocValues.isBytes(field.getDocValuesType());\n      assert !isNorms;\n      writeFieldEntry(field);\n      // write fixedlength\n      SimpleTextUtil.write(data, FIXEDLENGTH);\n      SimpleTextUtil.write(data, Boolean.toString(fixedLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Long.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n      \n      return new BinaryDocValuesConsumer() {\n        int numDocsWritten = 0;\n        \n        @Override\n        public void add(BytesRef value) throws IOException {\n          // write length\n          SimpleTextUtil.write(data, LENGTH);\n          SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n          SimpleTextUtil.writeNewline(data);\n          \n          // write bytes -- don't use SimpleText.write\n          // because it escapes:\n          data.writeBytes(value.bytes, value.offset, value.length);\n\n          // pad to fit\n          for (int i = value.length; i < maxLength; i++) {\n            data.writeByte((byte)' ');\n          }\n          SimpleTextUtil.writeNewline(data);\n          numDocsWritten++;\n        }\n\n        @Override\n        public void finish() throws IOException {\n          assert numDocs == numDocsWritten;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public BinaryDocValuesConsumer addBinaryField(FieldInfo field, boolean fixedLength, final int maxLength) throws IOException {\n      assert fieldSeen(field.name);\n      assert !isNorms;\n      writeFieldEntry(field);\n      // write fixedlength\n      SimpleTextUtil.write(data, FIXEDLENGTH);\n      SimpleTextUtil.write(data, Boolean.toString(fixedLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Long.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n      \n      return new BinaryDocValuesConsumer() {\n        int numDocsWritten = 0;\n        \n        @Override\n        public void add(BytesRef value) throws IOException {\n          // write length\n          SimpleTextUtil.write(data, LENGTH);\n          SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n          SimpleTextUtil.writeNewline(data);\n          \n          // write bytes -- don't use SimpleText.write\n          // because it escapes:\n          data.writeBytes(value.bytes, value.offset, value.length);\n\n          // pad to fit\n          for (int i = value.length; i < maxLength; i++) {\n            data.writeByte((byte)' ');\n          }\n          SimpleTextUtil.writeNewline(data);\n          numDocsWritten++;\n        }\n\n        @Override\n        public void finish() throws IOException {\n          assert numDocs == numDocsWritten;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"746e3645169db50c8f53252b30d6bc9ac21dea7c","date":1357597773,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addBinaryField(FieldInfo,boolean,int).mjava","sourceNew":"    @Override\n    public void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n      assert fieldSeen(field.name);\n      assert DocValues.isBytes(field.getDocValuesType());\n      assert !isNorms;\n      int maxLength = 0;\n      for(BytesRef value : values) {\n        maxLength = Math.max(maxLength, value.length);\n      }\n      writeFieldEntry(field);\n\n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Long.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n\n      int numDocsWritten = 0;\n      for(BytesRef value : values) {\n        // write length\n        SimpleTextUtil.write(data, LENGTH);\n        SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n        SimpleTextUtil.writeNewline(data);\n          \n        // write bytes -- don't use SimpleText.write\n        // because it escapes:\n        data.writeBytes(value.bytes, value.offset, value.length);\n\n        // pad to fit\n        for (int i = value.length; i < maxLength; i++) {\n          data.writeByte((byte)' ');\n        }\n        SimpleTextUtil.writeNewline(data);\n        numDocsWritten++;\n      }\n\n      assert numDocs == numDocsWritten;\n    }\n\n","sourceOld":"    @Override\n    public BinaryDocValuesConsumer addBinaryField(FieldInfo field, boolean fixedLength, final int maxLength) throws IOException {\n      assert fieldSeen(field.name);\n      assert DocValues.isBytes(field.getDocValuesType());\n      assert !isNorms;\n      writeFieldEntry(field);\n      // write fixedlength\n      SimpleTextUtil.write(data, FIXEDLENGTH);\n      SimpleTextUtil.write(data, Boolean.toString(fixedLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Long.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n      \n      return new BinaryDocValuesConsumer() {\n        int numDocsWritten = 0;\n        \n        @Override\n        public void add(BytesRef value) throws IOException {\n          // write length\n          SimpleTextUtil.write(data, LENGTH);\n          SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n          SimpleTextUtil.writeNewline(data);\n          \n          // write bytes -- don't use SimpleText.write\n          // because it escapes:\n          data.writeBytes(value.bytes, value.offset, value.length);\n\n          // pad to fit\n          for (int i = value.length; i < maxLength; i++) {\n            data.writeByte((byte)' ');\n          }\n          SimpleTextUtil.writeNewline(data);\n          numDocsWritten++;\n        }\n\n        @Override\n        public void finish() throws IOException {\n          assert numDocs == numDocsWritten;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e05b279040cd7b938223b77c3772786678160cf6":["83f7535831b82edd777d50f0276d244b3c9a4734"],"ce73f585d17f53055185a19beb46db23d76e0ad9":["aa931a0506f27ccab76c6b080c467c12ee95daa8"],"746e3645169db50c8f53252b30d6bc9ac21dea7c":["3e29774db46ad98ca4a8d7fcbfab633ebc01f358"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"70a62ed2170ac1ef14886df1c66b89c9e4a68567":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f176b7bac2a187d69335c079b1f923449fb2881f":["ce73f585d17f53055185a19beb46db23d76e0ad9"],"55eeb2534cd53d2a985669829df942468ebf5314":["e05b279040cd7b938223b77c3772786678160cf6"],"3e29774db46ad98ca4a8d7fcbfab633ebc01f358":["55eeb2534cd53d2a985669829df942468ebf5314"],"83f7535831b82edd777d50f0276d244b3c9a4734":["f176b7bac2a187d69335c079b1f923449fb2881f"],"aa931a0506f27ccab76c6b080c467c12ee95daa8":["70a62ed2170ac1ef14886df1c66b89c9e4a68567"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e05b279040cd7b938223b77c3772786678160cf6":["55eeb2534cd53d2a985669829df942468ebf5314"],"ce73f585d17f53055185a19beb46db23d76e0ad9":["f176b7bac2a187d69335c079b1f923449fb2881f"],"746e3645169db50c8f53252b30d6bc9ac21dea7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70a62ed2170ac1ef14886df1c66b89c9e4a68567","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"70a62ed2170ac1ef14886df1c66b89c9e4a68567":["aa931a0506f27ccab76c6b080c467c12ee95daa8"],"f176b7bac2a187d69335c079b1f923449fb2881f":["83f7535831b82edd777d50f0276d244b3c9a4734"],"55eeb2534cd53d2a985669829df942468ebf5314":["3e29774db46ad98ca4a8d7fcbfab633ebc01f358"],"3e29774db46ad98ca4a8d7fcbfab633ebc01f358":["746e3645169db50c8f53252b30d6bc9ac21dea7c"],"83f7535831b82edd777d50f0276d244b3c9a4734":["e05b279040cd7b938223b77c3772786678160cf6"],"aa931a0506f27ccab76c6b080c467c12ee95daa8":["ce73f585d17f53055185a19beb46db23d76e0ad9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["746e3645169db50c8f53252b30d6bc9ac21dea7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}