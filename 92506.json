{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#getSortedSetTable(FieldInfo,SortedSetEntry).mjava","commits":[{"id":"a870f9917149dc600c4ad4417d615c1795de5864","date":1445975387,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#getSortedSetTable(FieldInfo,SortedSetEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#getSortedSetTable(FieldInfo,SortedSetEntry).mjava","sourceNew":"  private SortedSetDocValues getSortedSetTable(FieldInfo field, SortedSetEntry ss) throws IOException {\n    final long valueCount = binaries.get(field.name).count;\n    final LongBinaryDocValues binary = (LongBinaryDocValues) getBinary(field);\n    final LongValues ordinals = getNumeric(ords.get(field.name));\n\n    final long[] table = ss.table;\n    final int[] offsets = ss.tableOffsets;\n\n    return new RandomAccessOrds() {\n\n      int offset, startOffset, endOffset;\n\n      @Override\n      public void setDocument(int docID) {\n        final int ord = (int) ordinals.get(docID);\n        offset = startOffset = offsets[ord];\n        endOffset = offsets[ord + 1];\n      }\n\n      @Override\n      public long ordAt(int index) {\n        return table[startOffset + index];\n      }\n\n      @Override\n      public long nextOrd() {\n        if (offset == endOffset) {\n          return NO_MORE_ORDS;\n        } else {\n          return table[offset++];\n        }\n      }\n\n      @Override\n      public int cardinality() {\n        return endOffset - startOffset;\n      }\n\n      @Override\n      public BytesRef lookupOrd(long ord) {\n        return binary.get(ord);\n      }\n\n      @Override\n      public long getValueCount() {\n        return valueCount;\n      }\n\n      @Override\n      public long lookupTerm(BytesRef key) {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return ((CompressedBinaryDocValues) binary).lookupTerm(key);\n        } else {\n          return super.lookupTerm(key);\n        }\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return ((CompressedBinaryDocValues) binary).getTermsEnum();\n        } else {\n          return super.termsEnum();\n        }\n      }\n\n    };\n  }\n\n","sourceOld":"  private SortedSetDocValues getSortedSetTable(FieldInfo field, SortedSetEntry ss) throws IOException {\n    final long valueCount = binaries.get(field.name).count;\n    final LongBinaryDocValues binary = (LongBinaryDocValues) getBinary(field);\n    final LongValues ordinals = getNumeric(ords.get(field.name));\n\n    final long[] table = ss.table;\n    final int[] offsets = ss.tableOffsets;\n\n    return new RandomAccessOrds() {\n\n      int offset, startOffset, endOffset;\n\n      @Override\n      public void setDocument(int docID) {\n        final int ord = (int) ordinals.get(docID);\n        offset = startOffset = offsets[ord];\n        endOffset = offsets[ord + 1];\n      }\n\n      @Override\n      public long ordAt(int index) {\n        return table[startOffset + index];\n      }\n\n      @Override\n      public long nextOrd() {\n        if (offset == endOffset) {\n          return NO_MORE_ORDS;\n        } else {\n          return table[offset++];\n        }\n      }\n\n      @Override\n      public int cardinality() {\n        return endOffset - startOffset;\n      }\n\n      @Override\n      public BytesRef lookupOrd(long ord) {\n        return binary.get(ord);\n      }\n\n      @Override\n      public long getValueCount() {\n        return valueCount;\n      }\n\n      @Override\n      public long lookupTerm(BytesRef key) {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return ((CompressedBinaryDocValues) binary).lookupTerm(key);\n        } else {\n          return super.lookupTerm(key);\n        }\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return ((CompressedBinaryDocValues) binary).getTermsEnum();\n        } else {\n          return super.termsEnum();\n        }\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52a55f5afb81e4ca7ec581bf1a7b8218204e8af7","date":1472142029,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#getSortedSetTable(FieldInfo,SortedSetEntry).mjava","sourceNew":null,"sourceOld":"  private SortedSetDocValues getSortedSetTable(FieldInfo field, SortedSetEntry ss) throws IOException {\n    final long valueCount = binaries.get(field.name).count;\n    final LongBinaryDocValues binary = (LongBinaryDocValues) getBinary(field);\n    final LongValues ordinals = getNumeric(ords.get(field.name));\n\n    final long[] table = ss.table;\n    final int[] offsets = ss.tableOffsets;\n\n    return new RandomAccessOrds() {\n\n      int offset, startOffset, endOffset;\n\n      @Override\n      public void setDocument(int docID) {\n        final int ord = (int) ordinals.get(docID);\n        offset = startOffset = offsets[ord];\n        endOffset = offsets[ord + 1];\n      }\n\n      @Override\n      public long ordAt(int index) {\n        return table[startOffset + index];\n      }\n\n      @Override\n      public long nextOrd() {\n        if (offset == endOffset) {\n          return NO_MORE_ORDS;\n        } else {\n          return table[offset++];\n        }\n      }\n\n      @Override\n      public int cardinality() {\n        return endOffset - startOffset;\n      }\n\n      @Override\n      public BytesRef lookupOrd(long ord) {\n        return binary.get(ord);\n      }\n\n      @Override\n      public long getValueCount() {\n        return valueCount;\n      }\n\n      @Override\n      public long lookupTerm(BytesRef key) {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return ((CompressedBinaryDocValues) binary).lookupTerm(key);\n        } else {\n          return super.lookupTerm(key);\n        }\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return ((CompressedBinaryDocValues) binary).getTermsEnum();\n        } else {\n          return super.termsEnum();\n        }\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#getSortedSetTable(FieldInfo,SortedSetEntry).mjava","sourceNew":null,"sourceOld":"  private SortedSetDocValues getSortedSetTable(FieldInfo field, SortedSetEntry ss) throws IOException {\n    final long valueCount = binaries.get(field.name).count;\n    final LongBinaryDocValues binary = (LongBinaryDocValues) getBinary(field);\n    final LongValues ordinals = getNumeric(ords.get(field.name));\n\n    final long[] table = ss.table;\n    final int[] offsets = ss.tableOffsets;\n\n    return new RandomAccessOrds() {\n\n      int offset, startOffset, endOffset;\n\n      @Override\n      public void setDocument(int docID) {\n        final int ord = (int) ordinals.get(docID);\n        offset = startOffset = offsets[ord];\n        endOffset = offsets[ord + 1];\n      }\n\n      @Override\n      public long ordAt(int index) {\n        return table[startOffset + index];\n      }\n\n      @Override\n      public long nextOrd() {\n        if (offset == endOffset) {\n          return NO_MORE_ORDS;\n        } else {\n          return table[offset++];\n        }\n      }\n\n      @Override\n      public int cardinality() {\n        return endOffset - startOffset;\n      }\n\n      @Override\n      public BytesRef lookupOrd(long ord) {\n        return binary.get(ord);\n      }\n\n      @Override\n      public long getValueCount() {\n        return valueCount;\n      }\n\n      @Override\n      public long lookupTerm(BytesRef key) {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return ((CompressedBinaryDocValues) binary).lookupTerm(key);\n        } else {\n          return super.lookupTerm(key);\n        }\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return ((CompressedBinaryDocValues) binary).getTermsEnum();\n        } else {\n          return super.termsEnum();\n        }\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#getSortedSetTable(FieldInfo,SortedSetEntry).mjava","sourceNew":null,"sourceOld":"  private SortedSetDocValues getSortedSetTable(FieldInfo field, SortedSetEntry ss) throws IOException {\n    final long valueCount = binaries.get(field.name).count;\n    final LongBinaryDocValues binary = (LongBinaryDocValues) getBinary(field);\n    final LongValues ordinals = getNumeric(ords.get(field.name));\n\n    final long[] table = ss.table;\n    final int[] offsets = ss.tableOffsets;\n\n    return new RandomAccessOrds() {\n\n      int offset, startOffset, endOffset;\n\n      @Override\n      public void setDocument(int docID) {\n        final int ord = (int) ordinals.get(docID);\n        offset = startOffset = offsets[ord];\n        endOffset = offsets[ord + 1];\n      }\n\n      @Override\n      public long ordAt(int index) {\n        return table[startOffset + index];\n      }\n\n      @Override\n      public long nextOrd() {\n        if (offset == endOffset) {\n          return NO_MORE_ORDS;\n        } else {\n          return table[offset++];\n        }\n      }\n\n      @Override\n      public int cardinality() {\n        return endOffset - startOffset;\n      }\n\n      @Override\n      public BytesRef lookupOrd(long ord) {\n        return binary.get(ord);\n      }\n\n      @Override\n      public long getValueCount() {\n        return valueCount;\n      }\n\n      @Override\n      public long lookupTerm(BytesRef key) {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return ((CompressedBinaryDocValues) binary).lookupTerm(key);\n        } else {\n          return super.lookupTerm(key);\n        }\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        if (binary instanceof CompressedBinaryDocValues) {\n          return ((CompressedBinaryDocValues) binary).getTermsEnum();\n        } else {\n          return super.termsEnum();\n        }\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a870f9917149dc600c4ad4417d615c1795de5864":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["a870f9917149dc600c4ad4417d615c1795de5864","52a55f5afb81e4ca7ec581bf1a7b8218204e8af7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a870f9917149dc600c4ad4417d615c1795de5864","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"52a55f5afb81e4ca7ec581bf1a7b8218204e8af7":["a870f9917149dc600c4ad4417d615c1795de5864"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a870f9917149dc600c4ad4417d615c1795de5864"],"a870f9917149dc600c4ad4417d615c1795de5864":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","52a55f5afb81e4ca7ec581bf1a7b8218204e8af7"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"52a55f5afb81e4ca7ec581bf1a7b8218204e8af7":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}