{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testClone().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testClone().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testClone().mjava","sourceNew":"  @Test\n  public void testClone() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    IndexWriterConfig clone = (IndexWriterConfig) conf.clone();\n\n    // Clone is shallow since not all parameters are cloneable.\n    assertTrue(conf.getIndexDeletionPolicy() == clone.getIndexDeletionPolicy());\n\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    assertEquals(ConcurrentMergeScheduler.class, clone.getMergeScheduler().getClass());\n  }\n\n","sourceOld":"  @Test\n  public void testClone() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    IndexWriterConfig clone = (IndexWriterConfig) conf.clone();\n\n    // Clone is shallow since not all parameters are cloneable.\n    assertTrue(conf.getIndexDeletionPolicy() == clone.getIndexDeletionPolicy());\n\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    assertEquals(ConcurrentMergeScheduler.class, clone.getMergeScheduler().getClass());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"399d5903979ca52514d2bc7e3a362e1c45885c94","date":1333042474,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testClone().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testClone().mjava","sourceNew":"  @Test\n  public void testClone() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    IndexWriterConfig clone = conf.clone();\n\n    // Clone is shallow since not all parameters are cloneable.\n    assertTrue(conf.getIndexDeletionPolicy() == clone.getIndexDeletionPolicy());\n\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    assertEquals(ConcurrentMergeScheduler.class, clone.getMergeScheduler().getClass());\n  }\n\n","sourceOld":"  @Test\n  public void testClone() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    IndexWriterConfig clone = (IndexWriterConfig) conf.clone();\n\n    // Clone is shallow since not all parameters are cloneable.\n    assertTrue(conf.getIndexDeletionPolicy() == clone.getIndexDeletionPolicy());\n\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    assertEquals(ConcurrentMergeScheduler.class, clone.getMergeScheduler().getClass());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testClone().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testClone().mjava","sourceNew":"  @Test\n  public void testClone() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriterConfig clone = conf.clone();\n\n    // Clone is shallow since not all parameters are cloneable.\n    assertTrue(conf.getIndexDeletionPolicy() == clone.getIndexDeletionPolicy());\n\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    assertEquals(ConcurrentMergeScheduler.class, clone.getMergeScheduler().getClass());\n  }\n\n","sourceOld":"  @Test\n  public void testClone() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    IndexWriterConfig clone = conf.clone();\n\n    // Clone is shallow since not all parameters are cloneable.\n    assertTrue(conf.getIndexDeletionPolicy() == clone.getIndexDeletionPolicy());\n\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    assertEquals(ConcurrentMergeScheduler.class, clone.getMergeScheduler().getClass());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70790b11e79a0366b21b2cc5b82d03b6fddcef81","date":1364594206,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testClone().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testClone().mjava","sourceNew":"  @Test\n  public void testClone() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriterConfig clone = conf.clone();\n\n    // Make sure parameters that can't be reused are cloned\n    IndexDeletionPolicy delPolicy = conf.delPolicy;\n    IndexDeletionPolicy delPolicyClone = clone.delPolicy;\n    assertTrue(delPolicy.getClass() == delPolicyClone.getClass() && (delPolicy != delPolicyClone || delPolicy.clone() == delPolicyClone.clone()));\n\n    FlushPolicy flushPolicy = conf.flushPolicy;\n    FlushPolicy flushPolicyClone = clone.flushPolicy;\n    assertTrue(flushPolicy.getClass() == flushPolicyClone.getClass() && (flushPolicy != flushPolicyClone || flushPolicy.clone() == flushPolicyClone.clone()));\n\n    DocumentsWriterPerThreadPool pool = conf.indexerThreadPool;\n    DocumentsWriterPerThreadPool poolClone = clone.indexerThreadPool;\n    assertTrue(pool.getClass() == poolClone.getClass() && (pool != poolClone || pool.clone() == poolClone.clone()));\n\n    MergePolicy mergePolicy = conf.mergePolicy;\n    MergePolicy mergePolicyClone = clone.mergePolicy;\n    assertTrue(mergePolicy.getClass() == mergePolicyClone.getClass() && (mergePolicy != mergePolicyClone || mergePolicy.clone() == mergePolicyClone.clone()));\n\n    MergeScheduler mergeSched = conf.mergeScheduler;\n    MergeScheduler mergeSchedClone = clone.mergeScheduler;\n    assertTrue(mergeSched.getClass() == mergeSchedClone.getClass() && (mergeSched != mergeSchedClone || mergeSched.clone() == mergeSchedClone.clone()));\n\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    assertEquals(ConcurrentMergeScheduler.class, clone.getMergeScheduler().getClass());\n  }\n\n","sourceOld":"  @Test\n  public void testClone() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriterConfig clone = conf.clone();\n\n    // Clone is shallow since not all parameters are cloneable.\n    assertTrue(conf.getIndexDeletionPolicy() == clone.getIndexDeletionPolicy());\n\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    assertEquals(ConcurrentMergeScheduler.class, clone.getMergeScheduler().getClass());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfc45818441587d8004ff1a119fb60ac9ecb9a14","date":1401437797,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testClone().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testClone() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriterConfig clone = conf.clone();\n\n    // Make sure parameters that can't be reused are cloned\n    IndexDeletionPolicy delPolicy = conf.delPolicy;\n    IndexDeletionPolicy delPolicyClone = clone.delPolicy;\n    assertTrue(delPolicy.getClass() == delPolicyClone.getClass() && (delPolicy != delPolicyClone || delPolicy.clone() == delPolicyClone.clone()));\n\n    FlushPolicy flushPolicy = conf.flushPolicy;\n    FlushPolicy flushPolicyClone = clone.flushPolicy;\n    assertTrue(flushPolicy.getClass() == flushPolicyClone.getClass() && (flushPolicy != flushPolicyClone || flushPolicy.clone() == flushPolicyClone.clone()));\n\n    DocumentsWriterPerThreadPool pool = conf.indexerThreadPool;\n    DocumentsWriterPerThreadPool poolClone = clone.indexerThreadPool;\n    assertTrue(pool.getClass() == poolClone.getClass() && (pool != poolClone || pool.clone() == poolClone.clone()));\n\n    MergePolicy mergePolicy = conf.mergePolicy;\n    MergePolicy mergePolicyClone = clone.mergePolicy;\n    assertTrue(mergePolicy.getClass() == mergePolicyClone.getClass() && (mergePolicy != mergePolicyClone || mergePolicy.clone() == mergePolicyClone.clone()));\n\n    MergeScheduler mergeSched = conf.mergeScheduler;\n    MergeScheduler mergeSchedClone = clone.mergeScheduler;\n    assertTrue(mergeSched.getClass() == mergeSchedClone.getClass() && (mergeSched != mergeSchedClone || mergeSched.clone() == mergeSchedClone.clone()));\n\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    assertEquals(ConcurrentMergeScheduler.class, clone.getMergeScheduler().getClass());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70790b11e79a0366b21b2cc5b82d03b6fddcef81":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cfc45818441587d8004ff1a119fb60ac9ecb9a14":["70790b11e79a0366b21b2cc5b82d03b6fddcef81"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"399d5903979ca52514d2bc7e3a362e1c45885c94":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["399d5903979ca52514d2bc7e3a362e1c45885c94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cfc45818441587d8004ff1a119fb60ac9ecb9a14"]},"commit2Childs":{"70790b11e79a0366b21b2cc5b82d03b6fddcef81":["cfc45818441587d8004ff1a119fb60ac9ecb9a14"],"cfc45818441587d8004ff1a119fb60ac9ecb9a14":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["399d5903979ca52514d2bc7e3a362e1c45885c94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"399d5903979ca52514d2bc7e3a362e1c45885c94":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["70790b11e79a0366b21b2cc5b82d03b6fddcef81"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}