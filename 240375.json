{"path":"src/apps/SolarTest/src/SolrTest#doReq(String,String).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/apps/SolarTest/src/SolrTest#doReq(String,String).mjava","pathOld":"/dev/null","sourceNew":"  public char[] doReq(String req, String params)  {\n    int start=0;\n    int limit=10;\n    String handler=\"standard\";\n    //handler=\"test\";\n\n\n    Map args = new HashMap();\n    args.put(\"indent\", \"on\");\n    args.put(\"debugQuery\", \"on\");\n    args.put(\"fl\", \"score\");\n    args.put(\"version\", \"2.0\");\n\n    if (params != null) {\n      String[] plist = params.split(\"&\");\n      for (String decl : plist) {\n        String[] nv = decl.split(\"=\");\n        if (nv.length==1) {\n          nv = new String[] { nv[0], \"\" };\n        }\n        if (nv[0].equals(\"start\")) {\n          start=Integer.parseInt(nv[1]);\n        }\n        else if (nv[0].equals(\"limit\")) {\n          limit=Integer.parseInt(nv[1]);\n        }\n        else if (nv[0].equals(\"qt\")) {\n          handler = nv[1];\n        } else {\n          args.put(nv[0], nv[1]);\n        }\n      }\n    }\n\n    try {\n      // String lucene=requestDict[(int)(Math.random()*requestDict.length)];\n      String lucene=req;\n      CharArrayWriter writer = new CharArrayWriter(32000);\n\n      System.out.println(\"start=\"+start+\" limit=\"+limit+\" handler=\"+handler);\n      LocalSolrQueryRequest qreq = new LocalSolrQueryRequest(core,lucene,handler,start,limit,args);\n      SolrQueryResponse qrsp = new SolrQueryResponse();\n      try {\n        core.execute(qreq,qrsp);\n        if (qrsp.getException() != null) throw qrsp.getException();\n        // handler.handleRequest(qreq,qrsp);\n        xmlwriter.write(writer,qreq,qrsp);\n      } finally {\n        qreq.close();\n      }\n      if (verbose) System.out.println(\"GOT:'\" + writer + \"'\");\n      if (verbose) System.out.println(\"BODY chars read:\" + writer.size());\n      this.numBodyChars+=writer.size();\n      this.numReq++;\n      return writer.toCharArray();\n    } catch (Exception e) {\n      this.numErr++;\n      e.printStackTrace();\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd1be603b11b775ddafa5c4992cf204880586294","date":1139350157,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/apps/SolrTest/src/SolrTest#doReq(String,String).mjava","pathOld":"src/apps/SolarTest/src/SolrTest#doReq(String,String).mjava","sourceNew":"  public char[] doReq(String req, String params)  {\n    int start=0;\n    int limit=10;\n    String handler=\"standard\";\n    //handler=\"test\";\n\n\n    Map args = new HashMap();\n    args.put(\"indent\", \"on\");\n    args.put(\"debugQuery\", \"on\");\n    args.put(\"fl\", \"score\");\n    args.put(\"version\", \"2.0\");\n\n    if (params != null) {\n      String[] plist = params.split(\"&\");\n      for (String decl : plist) {\n        String[] nv = decl.split(\"=\");\n        if (nv.length==1) {\n          nv = new String[] { nv[0], \"\" };\n        }\n        if (nv[0].equals(\"start\")) {\n          start=Integer.parseInt(nv[1]);\n        }\n        else if (nv[0].equals(\"limit\")) {\n          limit=Integer.parseInt(nv[1]);\n        }\n        else if (nv[0].equals(\"qt\")) {\n          handler = nv[1];\n        } else {\n          args.put(nv[0], nv[1]);\n        }\n      }\n    }\n\n    try {\n      // String lucene=requestDict[(int)(Math.random()*requestDict.length)];\n      String lucene=req;\n      CharArrayWriter writer = new CharArrayWriter(32000);\n\n      System.out.println(\"start=\"+start+\" limit=\"+limit+\" handler=\"+handler);\n      LocalSolrQueryRequest qreq = new LocalSolrQueryRequest(core,lucene,handler,start,limit,args);\n      SolrQueryResponse qrsp = new SolrQueryResponse();\n      try {\n        core.execute(qreq,qrsp);\n        if (qrsp.getException() != null) throw qrsp.getException();\n        // handler.handleRequest(qreq,qrsp);\n        xmlwriter.write(writer,qreq,qrsp);\n      } finally {\n        qreq.close();\n      }\n      if (verbose) System.out.println(\"GOT:'\" + writer + \"'\");\n      if (verbose) System.out.println(\"BODY chars read:\" + writer.size());\n      this.numBodyChars+=writer.size();\n      this.numReq++;\n      return writer.toCharArray();\n    } catch (Exception e) {\n      this.numErr++;\n      e.printStackTrace();\n    }\n    return null;\n  }\n\n","sourceOld":"  public char[] doReq(String req, String params)  {\n    int start=0;\n    int limit=10;\n    String handler=\"standard\";\n    //handler=\"test\";\n\n\n    Map args = new HashMap();\n    args.put(\"indent\", \"on\");\n    args.put(\"debugQuery\", \"on\");\n    args.put(\"fl\", \"score\");\n    args.put(\"version\", \"2.0\");\n\n    if (params != null) {\n      String[] plist = params.split(\"&\");\n      for (String decl : plist) {\n        String[] nv = decl.split(\"=\");\n        if (nv.length==1) {\n          nv = new String[] { nv[0], \"\" };\n        }\n        if (nv[0].equals(\"start\")) {\n          start=Integer.parseInt(nv[1]);\n        }\n        else if (nv[0].equals(\"limit\")) {\n          limit=Integer.parseInt(nv[1]);\n        }\n        else if (nv[0].equals(\"qt\")) {\n          handler = nv[1];\n        } else {\n          args.put(nv[0], nv[1]);\n        }\n      }\n    }\n\n    try {\n      // String lucene=requestDict[(int)(Math.random()*requestDict.length)];\n      String lucene=req;\n      CharArrayWriter writer = new CharArrayWriter(32000);\n\n      System.out.println(\"start=\"+start+\" limit=\"+limit+\" handler=\"+handler);\n      LocalSolrQueryRequest qreq = new LocalSolrQueryRequest(core,lucene,handler,start,limit,args);\n      SolrQueryResponse qrsp = new SolrQueryResponse();\n      try {\n        core.execute(qreq,qrsp);\n        if (qrsp.getException() != null) throw qrsp.getException();\n        // handler.handleRequest(qreq,qrsp);\n        xmlwriter.write(writer,qreq,qrsp);\n      } finally {\n        qreq.close();\n      }\n      if (verbose) System.out.println(\"GOT:'\" + writer + \"'\");\n      if (verbose) System.out.println(\"BODY chars read:\" + writer.size());\n      this.numBodyChars+=writer.size();\n      this.numReq++;\n      return writer.toCharArray();\n    } catch (Exception e) {\n      this.numErr++;\n      e.printStackTrace();\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fd1be603b11b775ddafa5c4992cf204880586294":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"fd1be603b11b775ddafa5c4992cf204880586294":[],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["fd1be603b11b775ddafa5c4992cf204880586294"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fd1be603b11b775ddafa5c4992cf204880586294","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}