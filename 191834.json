{"path":"solr/core/src/java/org/apache/solr/update/CdcrTransactionLog#close().mjava","commits":[{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/CdcrTransactionLog#close().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void close() {\n    try {\n      if (debug) {\n        log.debug(\"Closing tlog\" + this);\n      }\n\n      synchronized (this) {\n        if (fos != null) {\n          fos.flush();\n          fos.close();\n\n          // dereference these variables for GC\n          fos = null;\n          os = null;\n          channel = null;\n          raf = null;\n        }\n      }\n\n      if (deleteOnClose) {\n        try {\n          Files.deleteIfExists(tlogFile.toPath());\n        } catch (IOException e) {\n          // TODO: should this class care if a file couldnt be deleted?\n          // this just emulates previous behavior, where only SecurityException would be handled.\n        }\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } finally {\n      assert ObjectReleaseTracker.release(this);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"536b47681314488eb94706248be6047a3f142841","date":1450372090,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/CdcrTransactionLog#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/CdcrTransactionLog#close().mjava","sourceNew":"  @Override\n  public void close() {\n    try {\n      if (debug) {\n        log.debug(\"Closing tlog\" + this);\n      }\n\n      synchronized (this) {\n        if (fos != null) {\n          fos.flush();\n          fos.close();\n\n          // dereference these variables for GC\n          fos = null;\n          os = null;\n          channel = null;\n          raf = null;\n        }\n      }\n\n      if (deleteOnClose) {\n        try {\n          Files.deleteIfExists(tlogFile.toPath());\n        } catch (IOException e) {\n          // TODO: should this class care if a file couldnt be deleted?\n          // this just emulates previous behavior, where only SecurityException would be handled.\n        }\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } finally {\n      assert ObjectReleaseTracker.release(this);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void close() {\n    try {\n      if (debug) {\n        log.debug(\"Closing tlog\" + this);\n      }\n\n      synchronized (this) {\n        if (fos != null) {\n          fos.flush();\n          fos.close();\n\n          // dereference these variables for GC\n          fos = null;\n          os = null;\n          channel = null;\n          raf = null;\n        }\n      }\n\n      if (deleteOnClose) {\n        try {\n          Files.deleteIfExists(tlogFile.toPath());\n        } catch (IOException e) {\n          // TODO: should this class care if a file couldnt be deleted?\n          // this just emulates previous behavior, where only SecurityException would be handled.\n        }\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } finally {\n      assert ObjectReleaseTracker.release(this);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"740d649f013f07efbeb73ca854f106c60166e7c0","date":1587431295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/CdcrTransactionLog#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/CdcrTransactionLog#close().mjava","sourceNew":"  @Override\n  public void close() {\n    try {\n      if (debug) {\n        log.debug(\"Closing tlog {}\", this);\n      }\n\n      synchronized (this) {\n        if (fos != null) {\n          fos.flush();\n          fos.close();\n\n          // dereference these variables for GC\n          fos = null;\n          os = null;\n          channel = null;\n          raf = null;\n        }\n      }\n\n      if (deleteOnClose) {\n        try {\n          Files.deleteIfExists(tlogFile.toPath());\n        } catch (IOException e) {\n          // TODO: should this class care if a file couldnt be deleted?\n          // this just emulates previous behavior, where only SecurityException would be handled.\n        }\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } finally {\n      assert ObjectReleaseTracker.release(this);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() {\n    try {\n      if (debug) {\n        log.debug(\"Closing tlog\" + this);\n      }\n\n      synchronized (this) {\n        if (fos != null) {\n          fos.flush();\n          fos.close();\n\n          // dereference these variables for GC\n          fos = null;\n          os = null;\n          channel = null;\n          raf = null;\n        }\n      }\n\n      if (deleteOnClose) {\n        try {\n          Files.deleteIfExists(tlogFile.toPath());\n        } catch (IOException e) {\n          // TODO: should this class care if a file couldnt be deleted?\n          // this just emulates previous behavior, where only SecurityException would be handled.\n        }\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } finally {\n      assert ObjectReleaseTracker.release(this);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/CdcrTransactionLog#close().mjava","sourceNew":null,"sourceOld":"  @Override\n  public void close() {\n    try {\n      if (debug) {\n        log.debug(\"Closing tlog {}\", this);\n      }\n\n      synchronized (this) {\n        if (fos != null) {\n          fos.flush();\n          fos.close();\n\n          // dereference these variables for GC\n          fos = null;\n          os = null;\n          channel = null;\n          raf = null;\n        }\n      }\n\n      if (deleteOnClose) {\n        try {\n          Files.deleteIfExists(tlogFile.toPath());\n        } catch (IOException e) {\n          // TODO: should this class care if a file couldnt be deleted?\n          // this just emulates previous behavior, where only SecurityException would be handled.\n        }\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } finally {\n      assert ObjectReleaseTracker.release(this);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"740d649f013f07efbeb73ca854f106c60166e7c0":["536b47681314488eb94706248be6047a3f142841"],"536b47681314488eb94706248be6047a3f142841":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["740d649f013f07efbeb73ca854f106c60166e7c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"]},"commit2Childs":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["536b47681314488eb94706248be6047a3f142841"],"740d649f013f07efbeb73ca854f106c60166e7c0":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"536b47681314488eb94706248be6047a3f142841":["740d649f013f07efbeb73ca854f106c60166e7c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}