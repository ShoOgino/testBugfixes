{"path":"src/test/org/apache/lucene/search/function/TestOrdValues#doTestCaching(String,boolean).mjava","commits":[{"id":"3f74570911bfdb9f7b01948745dcd67c69676c0e","date":1181060975,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/TestOrdValues#doTestCaching(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir);\n    Object innerArray = null;\n\n    for (int i=0; i<10; i++) {\n      ValueSource vs;\n      if (inOrder) {\n        vs = new OrdFieldSource(field);\n      } else {\n        vs = new ReverseOrdFieldSource(field);\n      }\n      ValueSourceQuery q = new ValueSourceQuery(vs);\n      Hits h = s.search(q);\n      assertEquals(\"All docs should be matched!\",N_DOCS,h.length());\n      if (i==0) {\n        innerArray = q.valSrc.getValues(s.getIndexReader()).getInnerArray();\n      } else {\n        log(i+\".  compare: \"+innerArray+\" to \"+q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n        assertSame(\"field values should be cached and reused!\", innerArray, q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n      }\n    }\n    \n    ValueSource vs;\n    ValueSourceQuery q;\n    Hits h;\n    \n    // verify that different values are loaded for a different field\n    String field2 = INT_FIELD;\n    assertFalse(field.equals(field2)); // otherwise this test is meaningless.\n    if (inOrder) {\n      vs = new OrdFieldSource(field2);\n    } else {\n      vs = new ReverseOrdFieldSource(field2);\n    }\n    q = new ValueSourceQuery(vs);\n    h = s.search(q);\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length());\n    log(\"compare (should differ): \"+innerArray+\" to \"+q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n    assertNotSame(\"different values shuold be loaded for a different field!\", innerArray, q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n\n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir);\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    q = new ValueSourceQuery(vs);\n    h = s.search(q);\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length());\n    log(\"compare (should differ): \"+innerArray+\" to \"+q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n    assertNotSame(\"cached field values should not be reused if reader as changed!\", innerArray, q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e385df0c8e079b3d13c7ccb0b221b5145d48cfd2","date":1197497193,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/TestOrdValues#doTestCaching(String,boolean).mjava","pathOld":"src/test/org/apache/lucene/search/function/TestOrdValues#doTestCaching(String,boolean).mjava","sourceNew":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir);\n    Object innerArray = null;\n\n    boolean warned = false; // print warning once\n    \n    for (int i=0; i<10; i++) {\n      ValueSource vs;\n      if (inOrder) {\n        vs = new OrdFieldSource(field);\n      } else {\n        vs = new ReverseOrdFieldSource(field);\n      }\n      ValueSourceQuery q = new ValueSourceQuery(vs);\n      Hits h = s.search(q);\n      try {\n        assertEquals(\"All docs should be matched!\",N_DOCS,h.length());\n        if (i==0) {\n          innerArray = q.valSrc.getValues(s.getIndexReader()).getInnerArray();\n        } else {\n          log(i+\".  compare: \"+innerArray+\" to \"+q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n          assertSame(\"field values should be cached and reused!\", innerArray, q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n        }\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \"+testName()+\" cannot fully test values of \"+q);\n          warned = true;\n        }\n      }\n    }\n    \n    ValueSource vs;\n    ValueSourceQuery q;\n    Hits h;\n    \n    // verify that different values are loaded for a different field\n    String field2 = INT_FIELD;\n    assertFalse(field.equals(field2)); // otherwise this test is meaningless.\n    if (inOrder) {\n      vs = new OrdFieldSource(field2);\n    } else {\n      vs = new ReverseOrdFieldSource(field2);\n    }\n    q = new ValueSourceQuery(vs);\n    h = s.search(q);\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length());\n    try {\n      log(\"compare (should differ): \"+innerArray+\" to \"+q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n      assertNotSame(\"different values shuold be loaded for a different field!\", innerArray, q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n    } catch (UnsupportedOperationException e) {\n      if (!warned) {\n        System.err.println(\"WARNING: \"+testName()+\" cannot fully test values of \"+q);\n        warned = true;\n      }\n    }\n\n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir);\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    q = new ValueSourceQuery(vs);\n    h = s.search(q);\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length());\n    try {\n      log(\"compare (should differ): \"+innerArray+\" to \"+q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n      assertNotSame(\"cached field values should not be reused if reader as changed!\", innerArray, q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n    } catch (UnsupportedOperationException e) {\n      if (!warned) {\n        System.err.println(\"WARNING: \"+testName()+\" cannot fully test values of \"+q);\n        warned = true;\n      }\n    }\n  }\n\n","sourceOld":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir);\n    Object innerArray = null;\n\n    for (int i=0; i<10; i++) {\n      ValueSource vs;\n      if (inOrder) {\n        vs = new OrdFieldSource(field);\n      } else {\n        vs = new ReverseOrdFieldSource(field);\n      }\n      ValueSourceQuery q = new ValueSourceQuery(vs);\n      Hits h = s.search(q);\n      assertEquals(\"All docs should be matched!\",N_DOCS,h.length());\n      if (i==0) {\n        innerArray = q.valSrc.getValues(s.getIndexReader()).getInnerArray();\n      } else {\n        log(i+\".  compare: \"+innerArray+\" to \"+q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n        assertSame(\"field values should be cached and reused!\", innerArray, q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n      }\n    }\n    \n    ValueSource vs;\n    ValueSourceQuery q;\n    Hits h;\n    \n    // verify that different values are loaded for a different field\n    String field2 = INT_FIELD;\n    assertFalse(field.equals(field2)); // otherwise this test is meaningless.\n    if (inOrder) {\n      vs = new OrdFieldSource(field2);\n    } else {\n      vs = new ReverseOrdFieldSource(field2);\n    }\n    q = new ValueSourceQuery(vs);\n    h = s.search(q);\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length());\n    log(\"compare (should differ): \"+innerArray+\" to \"+q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n    assertNotSame(\"different values shuold be loaded for a different field!\", innerArray, q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n\n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir);\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    q = new ValueSourceQuery(vs);\n    h = s.search(q);\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length());\n    log(\"compare (should differ): \"+innerArray+\" to \"+q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n    assertNotSame(\"cached field values should not be reused if reader as changed!\", innerArray, q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/TestOrdValues#doTestCaching(String,boolean).mjava","pathOld":"src/test/org/apache/lucene/search/function/TestOrdValues#doTestCaching(String,boolean).mjava","sourceNew":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir);\n    Object innerArray = null;\n\n    boolean warned = false; // print warning once\n    \n    for (int i=0; i<10; i++) {\n      ValueSource vs;\n      if (inOrder) {\n        vs = new OrdFieldSource(field);\n      } else {\n        vs = new ReverseOrdFieldSource(field);\n      }\n      ValueSourceQuery q = new ValueSourceQuery(vs);\n      ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n      try {\n        assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n        if (i==0) {\n          innerArray = q.valSrc.getValues(s.getIndexReader()).getInnerArray();\n        } else {\n          log(i+\".  compare: \"+innerArray+\" to \"+q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n          assertSame(\"field values should be cached and reused!\", innerArray, q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n        }\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \"+testName()+\" cannot fully test values of \"+q);\n          warned = true;\n        }\n      }\n    }\n    \n    ValueSource vs;\n    ValueSourceQuery q;\n    ScoreDoc[] h;\n    \n    // verify that different values are loaded for a different field\n    String field2 = INT_FIELD;\n    assertFalse(field.equals(field2)); // otherwise this test is meaningless.\n    if (inOrder) {\n      vs = new OrdFieldSource(field2);\n    } else {\n      vs = new ReverseOrdFieldSource(field2);\n    }\n    q = new ValueSourceQuery(vs);\n    h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    try {\n      log(\"compare (should differ): \"+innerArray+\" to \"+q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n      assertNotSame(\"different values shuold be loaded for a different field!\", innerArray, q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n    } catch (UnsupportedOperationException e) {\n      if (!warned) {\n        System.err.println(\"WARNING: \"+testName()+\" cannot fully test values of \"+q);\n        warned = true;\n      }\n    }\n\n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir);\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    q = new ValueSourceQuery(vs);\n    h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    try {\n      log(\"compare (should differ): \"+innerArray+\" to \"+q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n      assertNotSame(\"cached field values should not be reused if reader as changed!\", innerArray, q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n    } catch (UnsupportedOperationException e) {\n      if (!warned) {\n        System.err.println(\"WARNING: \"+testName()+\" cannot fully test values of \"+q);\n        warned = true;\n      }\n    }\n  }\n\n","sourceOld":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir);\n    Object innerArray = null;\n\n    boolean warned = false; // print warning once\n    \n    for (int i=0; i<10; i++) {\n      ValueSource vs;\n      if (inOrder) {\n        vs = new OrdFieldSource(field);\n      } else {\n        vs = new ReverseOrdFieldSource(field);\n      }\n      ValueSourceQuery q = new ValueSourceQuery(vs);\n      Hits h = s.search(q);\n      try {\n        assertEquals(\"All docs should be matched!\",N_DOCS,h.length());\n        if (i==0) {\n          innerArray = q.valSrc.getValues(s.getIndexReader()).getInnerArray();\n        } else {\n          log(i+\".  compare: \"+innerArray+\" to \"+q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n          assertSame(\"field values should be cached and reused!\", innerArray, q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n        }\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \"+testName()+\" cannot fully test values of \"+q);\n          warned = true;\n        }\n      }\n    }\n    \n    ValueSource vs;\n    ValueSourceQuery q;\n    Hits h;\n    \n    // verify that different values are loaded for a different field\n    String field2 = INT_FIELD;\n    assertFalse(field.equals(field2)); // otherwise this test is meaningless.\n    if (inOrder) {\n      vs = new OrdFieldSource(field2);\n    } else {\n      vs = new ReverseOrdFieldSource(field2);\n    }\n    q = new ValueSourceQuery(vs);\n    h = s.search(q);\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length());\n    try {\n      log(\"compare (should differ): \"+innerArray+\" to \"+q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n      assertNotSame(\"different values shuold be loaded for a different field!\", innerArray, q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n    } catch (UnsupportedOperationException e) {\n      if (!warned) {\n        System.err.println(\"WARNING: \"+testName()+\" cannot fully test values of \"+q);\n        warned = true;\n      }\n    }\n\n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir);\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    q = new ValueSourceQuery(vs);\n    h = s.search(q);\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length());\n    try {\n      log(\"compare (should differ): \"+innerArray+\" to \"+q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n      assertNotSame(\"cached field values should not be reused if reader as changed!\", innerArray, q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n    } catch (UnsupportedOperationException e) {\n      if (!warned) {\n        System.err.println(\"WARNING: \"+testName()+\" cannot fully test values of \"+q);\n        warned = true;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e69f59b863731d864bf3047235e718f0f88f8841","date":1250105498,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/TestOrdValues#doTestCaching(String,boolean).mjava","pathOld":"src/test/org/apache/lucene/search/function/TestOrdValues#doTestCaching(String,boolean).mjava","sourceNew":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir);\n    Object innerArray = null;\n\n    boolean warned = false; // print warning once\n    \n    for (int i=0; i<10; i++) {\n      ValueSource vs;\n      if (inOrder) {\n        vs = new OrdFieldSource(field);\n      } else {\n        vs = new ReverseOrdFieldSource(field);\n      }\n      ValueSourceQuery q = new ValueSourceQuery(vs);\n      ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n      try {\n        assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n        IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n\n        for(int j = 0; j < readers.length; j++) {\n          IndexReader reader = readers[j];\n          if (i==0) {\n            innerArray = q.valSrc.getValues(reader).getInnerArray();\n          } else {\n            log(i+\".  compare: \"+innerArray+\" to \"+q.valSrc.getValues(reader).getInnerArray());\n            assertSame(\"field values should be cached and reused!\", innerArray, q.valSrc.getValues(reader).getInnerArray());\n          }\n        }\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \"+testName()+\" cannot fully test values of \"+q);\n          warned = true;\n        }\n      }\n    }\n    \n    ValueSource vs;\n    ValueSourceQuery q;\n    ScoreDoc[] h;\n    \n    // verify that different values are loaded for a different field\n    String field2 = INT_FIELD;\n    assertFalse(field.equals(field2)); // otherwise this test is meaningless.\n    if (inOrder) {\n      vs = new OrdFieldSource(field2);\n    } else {\n      vs = new ReverseOrdFieldSource(field2);\n    }\n    q = new ValueSourceQuery(vs);\n    h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n\n    for (int j = 0; j < readers.length; j++) {\n      IndexReader reader = readers[j];\n      try {\n        log(\"compare (should differ): \" + innerArray + \" to \"\n            + q.valSrc.getValues(reader).getInnerArray());\n        assertNotSame(\n            \"different values shuold be loaded for a different field!\",\n            innerArray, q.valSrc.getValues(reader).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n              + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n\n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir);\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    q = new ValueSourceQuery(vs);\n    h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    readers = s.getIndexReader().getSequentialSubReaders();\n\n    for (int j = 0; j < readers.length; j++) {\n      IndexReader reader = readers[j];\n      try {\n        log(\"compare (should differ): \" + innerArray + \" to \"\n            + q.valSrc.getValues(reader).getInnerArray());\n        assertNotSame(\n            \"cached field values should not be reused if reader as changed!\",\n            innerArray, q.valSrc.getValues(reader).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n              + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir);\n    Object innerArray = null;\n\n    boolean warned = false; // print warning once\n    \n    for (int i=0; i<10; i++) {\n      ValueSource vs;\n      if (inOrder) {\n        vs = new OrdFieldSource(field);\n      } else {\n        vs = new ReverseOrdFieldSource(field);\n      }\n      ValueSourceQuery q = new ValueSourceQuery(vs);\n      ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n      try {\n        assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n        if (i==0) {\n          innerArray = q.valSrc.getValues(s.getIndexReader()).getInnerArray();\n        } else {\n          log(i+\".  compare: \"+innerArray+\" to \"+q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n          assertSame(\"field values should be cached and reused!\", innerArray, q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n        }\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \"+testName()+\" cannot fully test values of \"+q);\n          warned = true;\n        }\n      }\n    }\n    \n    ValueSource vs;\n    ValueSourceQuery q;\n    ScoreDoc[] h;\n    \n    // verify that different values are loaded for a different field\n    String field2 = INT_FIELD;\n    assertFalse(field.equals(field2)); // otherwise this test is meaningless.\n    if (inOrder) {\n      vs = new OrdFieldSource(field2);\n    } else {\n      vs = new ReverseOrdFieldSource(field2);\n    }\n    q = new ValueSourceQuery(vs);\n    h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    try {\n      log(\"compare (should differ): \"+innerArray+\" to \"+q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n      assertNotSame(\"different values shuold be loaded for a different field!\", innerArray, q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n    } catch (UnsupportedOperationException e) {\n      if (!warned) {\n        System.err.println(\"WARNING: \"+testName()+\" cannot fully test values of \"+q);\n        warned = true;\n      }\n    }\n\n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir);\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    q = new ValueSourceQuery(vs);\n    h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    try {\n      log(\"compare (should differ): \"+innerArray+\" to \"+q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n      assertNotSame(\"cached field values should not be reused if reader as changed!\", innerArray, q.valSrc.getValues(s.getIndexReader()).getInnerArray());\n    } catch (UnsupportedOperationException e) {\n      if (!warned) {\n        System.err.println(\"WARNING: \"+testName()+\" cannot fully test values of \"+q);\n        warned = true;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/TestOrdValues#doTestCaching(String,boolean).mjava","pathOld":"src/test/org/apache/lucene/search/function/TestOrdValues#doTestCaching(String,boolean).mjava","sourceNew":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    Object innerArray = null;\n\n    boolean warned = false; // print warning once\n    \n    for (int i=0; i<10; i++) {\n      ValueSource vs;\n      if (inOrder) {\n        vs = new OrdFieldSource(field);\n      } else {\n        vs = new ReverseOrdFieldSource(field);\n      }\n      ValueSourceQuery q = new ValueSourceQuery(vs);\n      ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n      try {\n        assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n        IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n\n        for(int j = 0; j < readers.length; j++) {\n          IndexReader reader = readers[j];\n          if (i==0) {\n            innerArray = q.valSrc.getValues(reader).getInnerArray();\n          } else {\n            log(i+\".  compare: \"+innerArray+\" to \"+q.valSrc.getValues(reader).getInnerArray());\n            assertSame(\"field values should be cached and reused!\", innerArray, q.valSrc.getValues(reader).getInnerArray());\n          }\n        }\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \"+testName()+\" cannot fully test values of \"+q);\n          warned = true;\n        }\n      }\n    }\n    \n    ValueSource vs;\n    ValueSourceQuery q;\n    ScoreDoc[] h;\n    \n    // verify that different values are loaded for a different field\n    String field2 = INT_FIELD;\n    assertFalse(field.equals(field2)); // otherwise this test is meaningless.\n    if (inOrder) {\n      vs = new OrdFieldSource(field2);\n    } else {\n      vs = new ReverseOrdFieldSource(field2);\n    }\n    q = new ValueSourceQuery(vs);\n    h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n\n    for (int j = 0; j < readers.length; j++) {\n      IndexReader reader = readers[j];\n      try {\n        log(\"compare (should differ): \" + innerArray + \" to \"\n            + q.valSrc.getValues(reader).getInnerArray());\n        assertNotSame(\n            \"different values shuold be loaded for a different field!\",\n            innerArray, q.valSrc.getValues(reader).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n              + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n\n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir, true);\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    q = new ValueSourceQuery(vs);\n    h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    readers = s.getIndexReader().getSequentialSubReaders();\n\n    for (int j = 0; j < readers.length; j++) {\n      IndexReader reader = readers[j];\n      try {\n        log(\"compare (should differ): \" + innerArray + \" to \"\n            + q.valSrc.getValues(reader).getInnerArray());\n        assertNotSame(\n            \"cached field values should not be reused if reader as changed!\",\n            innerArray, q.valSrc.getValues(reader).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n              + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir);\n    Object innerArray = null;\n\n    boolean warned = false; // print warning once\n    \n    for (int i=0; i<10; i++) {\n      ValueSource vs;\n      if (inOrder) {\n        vs = new OrdFieldSource(field);\n      } else {\n        vs = new ReverseOrdFieldSource(field);\n      }\n      ValueSourceQuery q = new ValueSourceQuery(vs);\n      ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n      try {\n        assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n        IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n\n        for(int j = 0; j < readers.length; j++) {\n          IndexReader reader = readers[j];\n          if (i==0) {\n            innerArray = q.valSrc.getValues(reader).getInnerArray();\n          } else {\n            log(i+\".  compare: \"+innerArray+\" to \"+q.valSrc.getValues(reader).getInnerArray());\n            assertSame(\"field values should be cached and reused!\", innerArray, q.valSrc.getValues(reader).getInnerArray());\n          }\n        }\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \"+testName()+\" cannot fully test values of \"+q);\n          warned = true;\n        }\n      }\n    }\n    \n    ValueSource vs;\n    ValueSourceQuery q;\n    ScoreDoc[] h;\n    \n    // verify that different values are loaded for a different field\n    String field2 = INT_FIELD;\n    assertFalse(field.equals(field2)); // otherwise this test is meaningless.\n    if (inOrder) {\n      vs = new OrdFieldSource(field2);\n    } else {\n      vs = new ReverseOrdFieldSource(field2);\n    }\n    q = new ValueSourceQuery(vs);\n    h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n\n    for (int j = 0; j < readers.length; j++) {\n      IndexReader reader = readers[j];\n      try {\n        log(\"compare (should differ): \" + innerArray + \" to \"\n            + q.valSrc.getValues(reader).getInnerArray());\n        assertNotSame(\n            \"different values shuold be loaded for a different field!\",\n            innerArray, q.valSrc.getValues(reader).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n              + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n\n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir);\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    q = new ValueSourceQuery(vs);\n    h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    readers = s.getIndexReader().getSequentialSubReaders();\n\n    for (int j = 0; j < readers.length; j++) {\n      IndexReader reader = readers[j];\n      try {\n        log(\"compare (should differ): \" + innerArray + \" to \"\n            + q.valSrc.getValues(reader).getInnerArray());\n        assertNotSame(\n            \"cached field values should not be reused if reader as changed!\",\n            innerArray, q.valSrc.getValues(reader).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n              + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/function/TestOrdValues#doTestCaching(String,boolean).mjava","pathOld":"src/test/org/apache/lucene/search/function/TestOrdValues#doTestCaching(String,boolean).mjava","sourceNew":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    Object innerArray = null;\n\n    boolean warned = false; // print warning once\n    \n    for (int i=0; i<10; i++) {\n      ValueSource vs;\n      if (inOrder) {\n        vs = new OrdFieldSource(field);\n      } else {\n        vs = new ReverseOrdFieldSource(field);\n      }\n      ValueSourceQuery q = new ValueSourceQuery(vs);\n      ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n      try {\n        assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n        IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n\n        for(int j = 0; j < readers.length; j++) {\n          IndexReader reader = readers[j];\n          if (i==0) {\n            innerArray = q.valSrc.getValues(reader).getInnerArray();\n          } else {\n            log(i+\".  compare: \"+innerArray+\" to \"+q.valSrc.getValues(reader).getInnerArray());\n            assertSame(\"field values should be cached and reused!\", innerArray, q.valSrc.getValues(reader).getInnerArray());\n          }\n        }\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \"+testName()+\" cannot fully test values of \"+q);\n          warned = true;\n        }\n      }\n    }\n    \n    ValueSource vs;\n    ValueSourceQuery q;\n    ScoreDoc[] h;\n    \n    // verify that different values are loaded for a different field\n    String field2 = INT_FIELD;\n    assertFalse(field.equals(field2)); // otherwise this test is meaningless.\n    if (inOrder) {\n      vs = new OrdFieldSource(field2);\n    } else {\n      vs = new ReverseOrdFieldSource(field2);\n    }\n    q = new ValueSourceQuery(vs);\n    h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n\n    for (int j = 0; j < readers.length; j++) {\n      IndexReader reader = readers[j];\n      try {\n        log(\"compare (should differ): \" + innerArray + \" to \"\n            + q.valSrc.getValues(reader).getInnerArray());\n        assertNotSame(\n            \"different values shuold be loaded for a different field!\",\n            innerArray, q.valSrc.getValues(reader).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n              + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n\n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir, true);\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    q = new ValueSourceQuery(vs);\n    h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    readers = s.getIndexReader().getSequentialSubReaders();\n\n    for (int j = 0; j < readers.length; j++) {\n      IndexReader reader = readers[j];\n      try {\n        log(\"compare (should differ): \" + innerArray + \" to \"\n            + q.valSrc.getValues(reader).getInnerArray());\n        assertNotSame(\n            \"cached field values should not be reused if reader as changed!\",\n            innerArray, q.valSrc.getValues(reader).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n              + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir);\n    Object innerArray = null;\n\n    boolean warned = false; // print warning once\n    \n    for (int i=0; i<10; i++) {\n      ValueSource vs;\n      if (inOrder) {\n        vs = new OrdFieldSource(field);\n      } else {\n        vs = new ReverseOrdFieldSource(field);\n      }\n      ValueSourceQuery q = new ValueSourceQuery(vs);\n      ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n      try {\n        assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n        IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n\n        for(int j = 0; j < readers.length; j++) {\n          IndexReader reader = readers[j];\n          if (i==0) {\n            innerArray = q.valSrc.getValues(reader).getInnerArray();\n          } else {\n            log(i+\".  compare: \"+innerArray+\" to \"+q.valSrc.getValues(reader).getInnerArray());\n            assertSame(\"field values should be cached and reused!\", innerArray, q.valSrc.getValues(reader).getInnerArray());\n          }\n        }\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \"+testName()+\" cannot fully test values of \"+q);\n          warned = true;\n        }\n      }\n    }\n    \n    ValueSource vs;\n    ValueSourceQuery q;\n    ScoreDoc[] h;\n    \n    // verify that different values are loaded for a different field\n    String field2 = INT_FIELD;\n    assertFalse(field.equals(field2)); // otherwise this test is meaningless.\n    if (inOrder) {\n      vs = new OrdFieldSource(field2);\n    } else {\n      vs = new ReverseOrdFieldSource(field2);\n    }\n    q = new ValueSourceQuery(vs);\n    h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n\n    for (int j = 0; j < readers.length; j++) {\n      IndexReader reader = readers[j];\n      try {\n        log(\"compare (should differ): \" + innerArray + \" to \"\n            + q.valSrc.getValues(reader).getInnerArray());\n        assertNotSame(\n            \"different values shuold be loaded for a different field!\",\n            innerArray, q.valSrc.getValues(reader).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n              + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n\n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir);\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    q = new ValueSourceQuery(vs);\n    h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    readers = s.getIndexReader().getSequentialSubReaders();\n\n    for (int j = 0; j < readers.length; j++) {\n      IndexReader reader = readers[j];\n      try {\n        log(\"compare (should differ): \" + innerArray + \" to \"\n            + q.valSrc.getValues(reader).getInnerArray());\n        assertNotSame(\n            \"cached field values should not be reused if reader as changed!\",\n            innerArray, q.valSrc.getValues(reader).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n              + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"777b7ef341decfee8757f492d8a154637cd7a384","date":1260037647,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/TestOrdValues#doTestCaching(String,boolean).mjava","pathOld":"src/test/org/apache/lucene/search/function/TestOrdValues#doTestCaching(String,boolean).mjava","sourceNew":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    Object innerArray = null;\n\n    boolean warned = false; // print warning once\n\n    for (int i = 0; i < 10; i++) {\n      ValueSource vs;\n      if (inOrder) {\n        vs = new OrdFieldSource(field);\n      } else {\n        vs = new ReverseOrdFieldSource(field);\n      }\n      ValueSourceQuery q = new ValueSourceQuery(vs);\n      ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n      try {\n        assertEquals(\"All docs should be matched!\", N_DOCS, h.length);\n        IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n\n        for (IndexReader reader : readers) {\n          if (i == 0) {\n            innerArray = q.valSrc.getValues(reader).getInnerArray();\n          } else {\n            log(i + \".  compare: \" + innerArray + \" to \" + q.valSrc.getValues(reader).getInnerArray());\n            assertSame(\"field values should be cached and reused!\", innerArray, q.valSrc.getValues(reader).getInnerArray());\n          }\n        }\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName() + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n\n    ValueSource vs;\n    ValueSourceQuery q;\n    ScoreDoc[] h;\n\n    // verify that different values are loaded for a different field\n    String field2 = INT_FIELD;\n    assertFalse(field.equals(field2)); // otherwise this test is meaningless.\n    if (inOrder) {\n      vs = new OrdFieldSource(field2);\n    } else {\n      vs = new ReverseOrdFieldSource(field2);\n    }\n    q = new ValueSourceQuery(vs);\n    h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\", N_DOCS, h.length);\n    IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n\n    for (IndexReader reader : readers) {\n      try {\n        log(\"compare (should differ): \" + innerArray + \" to \"\n                + q.valSrc.getValues(reader).getInnerArray());\n        assertNotSame(\n                \"different values shuold be loaded for a different field!\",\n                innerArray, q.valSrc.getValues(reader).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n                  + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n\n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir, true);\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    q = new ValueSourceQuery(vs);\n    h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\", N_DOCS, h.length);\n    readers = s.getIndexReader().getSequentialSubReaders();\n\n    for (IndexReader reader : readers) {\n      try {\n        log(\"compare (should differ): \" + innerArray + \" to \"\n                + q.valSrc.getValues(reader).getInnerArray());\n        assertNotSame(\n                \"cached field values should not be reused if reader as changed!\",\n                innerArray, q.valSrc.getValues(reader).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n                  + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching (String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    Object innerArray = null;\n\n    boolean warned = false; // print warning once\n    \n    for (int i=0; i<10; i++) {\n      ValueSource vs;\n      if (inOrder) {\n        vs = new OrdFieldSource(field);\n      } else {\n        vs = new ReverseOrdFieldSource(field);\n      }\n      ValueSourceQuery q = new ValueSourceQuery(vs);\n      ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n      try {\n        assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n        IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n\n        for(int j = 0; j < readers.length; j++) {\n          IndexReader reader = readers[j];\n          if (i==0) {\n            innerArray = q.valSrc.getValues(reader).getInnerArray();\n          } else {\n            log(i+\".  compare: \"+innerArray+\" to \"+q.valSrc.getValues(reader).getInnerArray());\n            assertSame(\"field values should be cached and reused!\", innerArray, q.valSrc.getValues(reader).getInnerArray());\n          }\n        }\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \"+testName()+\" cannot fully test values of \"+q);\n          warned = true;\n        }\n      }\n    }\n    \n    ValueSource vs;\n    ValueSourceQuery q;\n    ScoreDoc[] h;\n    \n    // verify that different values are loaded for a different field\n    String field2 = INT_FIELD;\n    assertFalse(field.equals(field2)); // otherwise this test is meaningless.\n    if (inOrder) {\n      vs = new OrdFieldSource(field2);\n    } else {\n      vs = new ReverseOrdFieldSource(field2);\n    }\n    q = new ValueSourceQuery(vs);\n    h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n\n    for (int j = 0; j < readers.length; j++) {\n      IndexReader reader = readers[j];\n      try {\n        log(\"compare (should differ): \" + innerArray + \" to \"\n            + q.valSrc.getValues(reader).getInnerArray());\n        assertNotSame(\n            \"different values shuold be loaded for a different field!\",\n            innerArray, q.valSrc.getValues(reader).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n              + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n\n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir, true);\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    q = new ValueSourceQuery(vs);\n    h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\",N_DOCS,h.length);\n    readers = s.getIndexReader().getSequentialSubReaders();\n\n    for (int j = 0; j < readers.length; j++) {\n      IndexReader reader = readers[j];\n      try {\n        log(\"compare (should differ): \" + innerArray + \" to \"\n            + q.valSrc.getValues(reader).getInnerArray());\n        assertNotSame(\n            \"cached field values should not be reused if reader as changed!\",\n            innerArray, q.valSrc.getValues(reader).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n              + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestOrdValues#doTestCaching(String,boolean).mjava","pathOld":"src/test/org/apache/lucene/search/function/TestOrdValues#doTestCaching(String,boolean).mjava","sourceNew":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    Object innerArray = null;\n\n    boolean warned = false; // print warning once\n\n    for (int i = 0; i < 10; i++) {\n      ValueSource vs;\n      if (inOrder) {\n        vs = new OrdFieldSource(field);\n      } else {\n        vs = new ReverseOrdFieldSource(field);\n      }\n      ValueSourceQuery q = new ValueSourceQuery(vs);\n      ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n      try {\n        assertEquals(\"All docs should be matched!\", N_DOCS, h.length);\n        IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n\n        for (IndexReader reader : readers) {\n          if (i == 0) {\n            innerArray = q.valSrc.getValues(reader).getInnerArray();\n          } else {\n            log(i + \".  compare: \" + innerArray + \" to \" + q.valSrc.getValues(reader).getInnerArray());\n            assertSame(\"field values should be cached and reused!\", innerArray, q.valSrc.getValues(reader).getInnerArray());\n          }\n        }\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName() + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n\n    ValueSource vs;\n    ValueSourceQuery q;\n    ScoreDoc[] h;\n\n    // verify that different values are loaded for a different field\n    String field2 = INT_FIELD;\n    assertFalse(field.equals(field2)); // otherwise this test is meaningless.\n    if (inOrder) {\n      vs = new OrdFieldSource(field2);\n    } else {\n      vs = new ReverseOrdFieldSource(field2);\n    }\n    q = new ValueSourceQuery(vs);\n    h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\", N_DOCS, h.length);\n    IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n\n    for (IndexReader reader : readers) {\n      try {\n        log(\"compare (should differ): \" + innerArray + \" to \"\n                + q.valSrc.getValues(reader).getInnerArray());\n        assertNotSame(\n                \"different values shuold be loaded for a different field!\",\n                innerArray, q.valSrc.getValues(reader).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n                  + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n\n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir, true);\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    q = new ValueSourceQuery(vs);\n    h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\", N_DOCS, h.length);\n    readers = s.getIndexReader().getSequentialSubReaders();\n\n    for (IndexReader reader : readers) {\n      try {\n        log(\"compare (should differ): \" + innerArray + \" to \"\n                + q.valSrc.getValues(reader).getInnerArray());\n        assertNotSame(\n                \"cached field values should not be reused if reader as changed!\",\n                innerArray, q.valSrc.getValues(reader).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n                  + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // Test that values loaded for FieldScoreQuery are cached properly and consumes the proper RAM resources.\n  private void doTestCaching(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    Object innerArray = null;\n\n    boolean warned = false; // print warning once\n\n    for (int i = 0; i < 10; i++) {\n      ValueSource vs;\n      if (inOrder) {\n        vs = new OrdFieldSource(field);\n      } else {\n        vs = new ReverseOrdFieldSource(field);\n      }\n      ValueSourceQuery q = new ValueSourceQuery(vs);\n      ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n      try {\n        assertEquals(\"All docs should be matched!\", N_DOCS, h.length);\n        IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n\n        for (IndexReader reader : readers) {\n          if (i == 0) {\n            innerArray = q.valSrc.getValues(reader).getInnerArray();\n          } else {\n            log(i + \".  compare: \" + innerArray + \" to \" + q.valSrc.getValues(reader).getInnerArray());\n            assertSame(\"field values should be cached and reused!\", innerArray, q.valSrc.getValues(reader).getInnerArray());\n          }\n        }\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName() + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n\n    ValueSource vs;\n    ValueSourceQuery q;\n    ScoreDoc[] h;\n\n    // verify that different values are loaded for a different field\n    String field2 = INT_FIELD;\n    assertFalse(field.equals(field2)); // otherwise this test is meaningless.\n    if (inOrder) {\n      vs = new OrdFieldSource(field2);\n    } else {\n      vs = new ReverseOrdFieldSource(field2);\n    }\n    q = new ValueSourceQuery(vs);\n    h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\", N_DOCS, h.length);\n    IndexReader[] readers = s.getIndexReader().getSequentialSubReaders();\n\n    for (IndexReader reader : readers) {\n      try {\n        log(\"compare (should differ): \" + innerArray + \" to \"\n                + q.valSrc.getValues(reader).getInnerArray());\n        assertNotSame(\n                \"different values shuold be loaded for a different field!\",\n                innerArray, q.valSrc.getValues(reader).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n                  + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n\n    // verify new values are reloaded (not reused) for a new reader\n    s = new IndexSearcher(dir, true);\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    q = new ValueSourceQuery(vs);\n    h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\", N_DOCS, h.length);\n    readers = s.getIndexReader().getSequentialSubReaders();\n\n    for (IndexReader reader : readers) {\n      try {\n        log(\"compare (should differ): \" + innerArray + \" to \"\n                + q.valSrc.getValues(reader).getInnerArray());\n        assertNotSame(\n                \"cached field values should not be reused if reader as changed!\",\n                innerArray, q.valSrc.getValues(reader).getInnerArray());\n      } catch (UnsupportedOperationException e) {\n        if (!warned) {\n          System.err.println(\"WARNING: \" + testName()\n                  + \" cannot fully test values of \" + q);\n          warned = true;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["e69f59b863731d864bf3047235e718f0f88f8841"],"e69f59b863731d864bf3047235e718f0f88f8841":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["e69f59b863731d864bf3047235e718f0f88f8841","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["e385df0c8e079b3d13c7ccb0b221b5145d48cfd2"],"e385df0c8e079b3d13c7ccb0b221b5145d48cfd2":["3f74570911bfdb9f7b01948745dcd67c69676c0e"],"3f74570911bfdb9f7b01948745dcd67c69676c0e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"777b7ef341decfee8757f492d8a154637cd7a384":["0a046c0c310bc77931fc8441bd920053b607dd14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["777b7ef341decfee8757f492d8a154637cd7a384"]},"commit2Childs":{"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"e69f59b863731d864bf3047235e718f0f88f8841":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f74570911bfdb9f7b01948745dcd67c69676c0e"],"0a046c0c310bc77931fc8441bd920053b607dd14":["777b7ef341decfee8757f492d8a154637cd7a384"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["e69f59b863731d864bf3047235e718f0f88f8841"],"e385df0c8e079b3d13c7ccb0b221b5145d48cfd2":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"3f74570911bfdb9f7b01948745dcd67c69676c0e":["e385df0c8e079b3d13c7ccb0b221b5145d48cfd2"],"777b7ef341decfee8757f492d8a154637cd7a384":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}