{"path":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","sourceNew":"    /**\n     * Override if you wish to change what is extracted\n     *\n     * @param sgmFile\n     */\n    protected void extractFile(File sgmFile)\n    {\n        try\n        {\n            BufferedReader reader = new BufferedReader(new FileReader(sgmFile));\n\n            StringBuffer buffer = new StringBuffer(1024);\n            StringBuffer outBuffer = new StringBuffer(1024);\n\n            String line = null;\n            int docNumber = 0;\n            while ((line = reader.readLine()) != null)\n            {\n                //when we see a closing reuters tag, flush the file\n\n                if (line.indexOf(\"</REUTERS\") == -1) {\n                    //Replace the SGM escape sequences\n\n                    buffer.append(line).append(' ');//accumulate the strings for now, then apply regular expression to get the pieces,\n                }\n                else\n                {\n                    //Extract the relevant pieces and write to a file in the output dir\n                    Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n                    while (matcher.find())\n                    {\n                        for (int i = 1; i <= matcher.groupCount(); i++)\n                        {\n                            if (matcher.group(i) != null)\n                            {\n                                outBuffer.append(matcher.group(i));\n                            }\n                        }\n                        outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n                    }\n                    String out = outBuffer.toString();\n                    for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++)\n                    {\n                        out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n                    }\n                    File outFile = new File(outputDir, sgmFile.getName() + \"-\" + (docNumber++) + \".txt\");\n                    //System.out.println(\"Writing \" + outFile);\n                    FileWriter writer = new FileWriter(outFile);\n                    writer.write(out);\n                    writer.close();\n                    outBuffer.setLength(0);\n                    buffer.setLength(0);\n                }\n            }\n            reader.close();\n        }\n\n        catch (\n                IOException e\n                )\n\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n","sourceOld":"    /**\n     * Override if you wish to change what is extracted\n     *\n     * @param sgmFile\n     */\n    protected void extractFile(File sgmFile)\n    {\n        try\n        {\n            BufferedReader reader = new BufferedReader(new FileReader(sgmFile));\n\n            StringBuffer buffer = new StringBuffer(1024);\n            StringBuffer outBuffer = new StringBuffer(1024);\n\n            String line = null;\n            int docNumber = 0;\n            while ((line = reader.readLine()) != null)\n            {\n                //when we see a closing reuters tag, flush the file\n\n                if (line.indexOf(\"</REUTERS\") == -1) {\n                    //Replace the SGM escape sequences\n\n                    buffer.append(line).append(' ');//accumulate the strings for now, then apply regular expression to get the pieces,\n                }\n                else\n                {\n                    //Extract the relevant pieces and write to a file in the output dir\n                    Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n                    while (matcher.find())\n                    {\n                        for (int i = 1; i <= matcher.groupCount(); i++)\n                        {\n                            if (matcher.group(i) != null)\n                            {\n                                outBuffer.append(matcher.group(i));\n                            }\n                        }\n                        outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n                    }\n                    String out = outBuffer.toString();\n                    for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++)\n                    {\n                        out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n                    }\n                    File outFile = new File(outputDir, sgmFile.getName() + \"-\" + (docNumber++) + \".txt\");\n                    //System.out.println(\"Writing \" + outFile);\n                    FileWriter writer = new FileWriter(outFile);\n                    writer.write(out);\n                    writer.close();\n                    outBuffer.setLength(0);\n                    buffer.setLength(0);\n                }\n            }\n            reader.close();\n        }\n\n        catch (\n                IOException e\n                )\n\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b80ad3438ccc68d1ef441add711ed2143324f14","date":1293087175,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","sourceNew":"    /**\n     * Override if you wish to change what is extracted\n     *\n     * @param sgmFile\n     */\n    protected void extractFile(File sgmFile)\n    {\n        try\n        {\n            BufferedReader reader = new BufferedReader(new FileReader(sgmFile));\n\n            StringBuilder buffer = new StringBuilder(1024);\n            StringBuilder outBuffer = new StringBuilder(1024);\n\n            String line = null;\n            int docNumber = 0;\n            while ((line = reader.readLine()) != null)\n            {\n                //when we see a closing reuters tag, flush the file\n\n                if (line.indexOf(\"</REUTERS\") == -1) {\n                    //Replace the SGM escape sequences\n\n                    buffer.append(line).append(' ');//accumulate the strings for now, then apply regular expression to get the pieces,\n                }\n                else\n                {\n                    //Extract the relevant pieces and write to a file in the output dir\n                    Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n                    while (matcher.find())\n                    {\n                        for (int i = 1; i <= matcher.groupCount(); i++)\n                        {\n                            if (matcher.group(i) != null)\n                            {\n                                outBuffer.append(matcher.group(i));\n                            }\n                        }\n                        outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n                    }\n                    String out = outBuffer.toString();\n                    for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++)\n                    {\n                        out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n                    }\n                    File outFile = new File(outputDir, sgmFile.getName() + \"-\" + (docNumber++) + \".txt\");\n                    //System.out.println(\"Writing \" + outFile);\n                    FileWriter writer = new FileWriter(outFile);\n                    writer.write(out);\n                    writer.close();\n                    outBuffer.setLength(0);\n                    buffer.setLength(0);\n                }\n            }\n            reader.close();\n        }\n\n        catch (\n                IOException e\n                )\n\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n","sourceOld":"    /**\n     * Override if you wish to change what is extracted\n     *\n     * @param sgmFile\n     */\n    protected void extractFile(File sgmFile)\n    {\n        try\n        {\n            BufferedReader reader = new BufferedReader(new FileReader(sgmFile));\n\n            StringBuffer buffer = new StringBuffer(1024);\n            StringBuffer outBuffer = new StringBuffer(1024);\n\n            String line = null;\n            int docNumber = 0;\n            while ((line = reader.readLine()) != null)\n            {\n                //when we see a closing reuters tag, flush the file\n\n                if (line.indexOf(\"</REUTERS\") == -1) {\n                    //Replace the SGM escape sequences\n\n                    buffer.append(line).append(' ');//accumulate the strings for now, then apply regular expression to get the pieces,\n                }\n                else\n                {\n                    //Extract the relevant pieces and write to a file in the output dir\n                    Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n                    while (matcher.find())\n                    {\n                        for (int i = 1; i <= matcher.groupCount(); i++)\n                        {\n                            if (matcher.group(i) != null)\n                            {\n                                outBuffer.append(matcher.group(i));\n                            }\n                        }\n                        outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n                    }\n                    String out = outBuffer.toString();\n                    for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++)\n                    {\n                        out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n                    }\n                    File outFile = new File(outputDir, sgmFile.getName() + \"-\" + (docNumber++) + \".txt\");\n                    //System.out.println(\"Writing \" + outFile);\n                    FileWriter writer = new FileWriter(outFile);\n                    writer.write(out);\n                    writer.close();\n                    outBuffer.setLength(0);\n                    buffer.setLength(0);\n                }\n            }\n            reader.close();\n        }\n\n        catch (\n                IOException e\n                )\n\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n","bugFix":null,"bugIntro":["42a270f0606309d514faa19e1d021eb7b42305a6","42a270f0606309d514faa19e1d021eb7b42305a6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dc5ecd93bcd50b2199757091d526fc1bcbce0db1","date":1293154244,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","sourceNew":"    /**\n     * Override if you wish to change what is extracted\n     *\n     * @param sgmFile\n     */\n    protected void extractFile(File sgmFile)\n    {\n        try\n        {\n            BufferedReader reader = new BufferedReader(new FileReader(sgmFile));\n\n            StringBuilder buffer = new StringBuilder(1024);\n            StringBuilder outBuffer = new StringBuilder(1024);\n\n            String line = null;\n            int docNumber = 0;\n            while ((line = reader.readLine()) != null)\n            {\n                //when we see a closing reuters tag, flush the file\n\n                if (line.indexOf(\"</REUTERS\") == -1) {\n                    //Replace the SGM escape sequences\n\n                    buffer.append(line).append(' ');//accumulate the strings for now, then apply regular expression to get the pieces,\n                }\n                else\n                {\n                    //Extract the relevant pieces and write to a file in the output dir\n                    Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n                    while (matcher.find())\n                    {\n                        for (int i = 1; i <= matcher.groupCount(); i++)\n                        {\n                            if (matcher.group(i) != null)\n                            {\n                                outBuffer.append(matcher.group(i));\n                            }\n                        }\n                        outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n                    }\n                    String out = outBuffer.toString();\n                    for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++)\n                    {\n                        out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n                    }\n                    File outFile = new File(outputDir, sgmFile.getName() + \"-\" + (docNumber++) + \".txt\");\n                    //System.out.println(\"Writing \" + outFile);\n                    FileWriter writer = new FileWriter(outFile);\n                    writer.write(out);\n                    writer.close();\n                    outBuffer.setLength(0);\n                    buffer.setLength(0);\n                }\n            }\n            reader.close();\n        }\n\n        catch (\n                IOException e\n                )\n\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n","sourceOld":"    /**\n     * Override if you wish to change what is extracted\n     *\n     * @param sgmFile\n     */\n    protected void extractFile(File sgmFile)\n    {\n        try\n        {\n            BufferedReader reader = new BufferedReader(new FileReader(sgmFile));\n\n            StringBuffer buffer = new StringBuffer(1024);\n            StringBuffer outBuffer = new StringBuffer(1024);\n\n            String line = null;\n            int docNumber = 0;\n            while ((line = reader.readLine()) != null)\n            {\n                //when we see a closing reuters tag, flush the file\n\n                if (line.indexOf(\"</REUTERS\") == -1) {\n                    //Replace the SGM escape sequences\n\n                    buffer.append(line).append(' ');//accumulate the strings for now, then apply regular expression to get the pieces,\n                }\n                else\n                {\n                    //Extract the relevant pieces and write to a file in the output dir\n                    Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n                    while (matcher.find())\n                    {\n                        for (int i = 1; i <= matcher.groupCount(); i++)\n                        {\n                            if (matcher.group(i) != null)\n                            {\n                                outBuffer.append(matcher.group(i));\n                            }\n                        }\n                        outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n                    }\n                    String out = outBuffer.toString();\n                    for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++)\n                    {\n                        out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n                    }\n                    File outFile = new File(outputDir, sgmFile.getName() + \"-\" + (docNumber++) + \".txt\");\n                    //System.out.println(\"Writing \" + outFile);\n                    FileWriter writer = new FileWriter(outFile);\n                    writer.write(out);\n                    writer.close();\n                    outBuffer.setLength(0);\n                    buffer.setLength(0);\n                }\n            }\n            reader.close();\n        }\n\n        catch (\n                IOException e\n                )\n\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","sourceNew":"    /**\n     * Override if you wish to change what is extracted\n     *\n     * @param sgmFile\n     */\n    protected void extractFile(File sgmFile)\n    {\n        try\n        {\n            BufferedReader reader = new BufferedReader(new FileReader(sgmFile));\n\n            StringBuilder buffer = new StringBuilder(1024);\n            StringBuilder outBuffer = new StringBuilder(1024);\n\n            String line = null;\n            int docNumber = 0;\n            while ((line = reader.readLine()) != null)\n            {\n                //when we see a closing reuters tag, flush the file\n\n                if (line.indexOf(\"</REUTERS\") == -1) {\n                    //Replace the SGM escape sequences\n\n                    buffer.append(line).append(' ');//accumulate the strings for now, then apply regular expression to get the pieces,\n                }\n                else\n                {\n                    //Extract the relevant pieces and write to a file in the output dir\n                    Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n                    while (matcher.find())\n                    {\n                        for (int i = 1; i <= matcher.groupCount(); i++)\n                        {\n                            if (matcher.group(i) != null)\n                            {\n                                outBuffer.append(matcher.group(i));\n                            }\n                        }\n                        outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n                    }\n                    String out = outBuffer.toString();\n                    for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++)\n                    {\n                        out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n                    }\n                    File outFile = new File(outputDir, sgmFile.getName() + \"-\" + (docNumber++) + \".txt\");\n                    //System.out.println(\"Writing \" + outFile);\n                    FileWriter writer = new FileWriter(outFile);\n                    writer.write(out);\n                    writer.close();\n                    outBuffer.setLength(0);\n                    buffer.setLength(0);\n                }\n            }\n            reader.close();\n        }\n\n        catch (\n                IOException e\n                )\n\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n","sourceOld":"    /**\n     * Override if you wish to change what is extracted\n     *\n     * @param sgmFile\n     */\n    protected void extractFile(File sgmFile)\n    {\n        try\n        {\n            BufferedReader reader = new BufferedReader(new FileReader(sgmFile));\n\n            StringBuilder buffer = new StringBuilder(1024);\n            StringBuilder outBuffer = new StringBuilder(1024);\n\n            String line = null;\n            int docNumber = 0;\n            while ((line = reader.readLine()) != null)\n            {\n                //when we see a closing reuters tag, flush the file\n\n                if (line.indexOf(\"</REUTERS\") == -1) {\n                    //Replace the SGM escape sequences\n\n                    buffer.append(line).append(' ');//accumulate the strings for now, then apply regular expression to get the pieces,\n                }\n                else\n                {\n                    //Extract the relevant pieces and write to a file in the output dir\n                    Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n                    while (matcher.find())\n                    {\n                        for (int i = 1; i <= matcher.groupCount(); i++)\n                        {\n                            if (matcher.group(i) != null)\n                            {\n                                outBuffer.append(matcher.group(i));\n                            }\n                        }\n                        outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n                    }\n                    String out = outBuffer.toString();\n                    for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++)\n                    {\n                        out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n                    }\n                    File outFile = new File(outputDir, sgmFile.getName() + \"-\" + (docNumber++) + \".txt\");\n                    //System.out.println(\"Writing \" + outFile);\n                    FileWriter writer = new FileWriter(outFile);\n                    writer.write(out);\n                    writer.close();\n                    outBuffer.setLength(0);\n                    buffer.setLength(0);\n                }\n            }\n            reader.close();\n        }\n\n        catch (\n                IOException e\n                )\n\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","sourceNew":null,"sourceOld":"    /**\n     * Override if you wish to change what is extracted\n     *\n     * @param sgmFile\n     */\n    protected void extractFile(File sgmFile)\n    {\n        try\n        {\n            BufferedReader reader = new BufferedReader(new FileReader(sgmFile));\n\n            StringBuffer buffer = new StringBuffer(1024);\n            StringBuffer outBuffer = new StringBuffer(1024);\n\n            String line = null;\n            int docNumber = 0;\n            while ((line = reader.readLine()) != null)\n            {\n                //when we see a closing reuters tag, flush the file\n\n                if (line.indexOf(\"</REUTERS\") == -1) {\n                    //Replace the SGM escape sequences\n\n                    buffer.append(line).append(' ');//accumulate the strings for now, then apply regular expression to get the pieces,\n                }\n                else\n                {\n                    //Extract the relevant pieces and write to a file in the output dir\n                    Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n                    while (matcher.find())\n                    {\n                        for (int i = 1; i <= matcher.groupCount(); i++)\n                        {\n                            if (matcher.group(i) != null)\n                            {\n                                outBuffer.append(matcher.group(i));\n                            }\n                        }\n                        outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n                    }\n                    String out = outBuffer.toString();\n                    for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++)\n                    {\n                        out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n                    }\n                    File outFile = new File(outputDir, sgmFile.getName() + \"-\" + (docNumber++) + \".txt\");\n                    //System.out.println(\"Writing \" + outFile);\n                    FileWriter writer = new FileWriter(outFile);\n                    writer.write(out);\n                    writer.close();\n                    outBuffer.setLength(0);\n                    buffer.setLength(0);\n                }\n            }\n            reader.close();\n        }\n\n        catch (\n                IOException e\n                )\n\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","sourceNew":"    /**\n     * Override if you wish to change what is extracted\n     *\n     * @param sgmFile\n     */\n    protected void extractFile(File sgmFile)\n    {\n        try\n        {\n            BufferedReader reader = new BufferedReader(new FileReader(sgmFile));\n\n            StringBuilder buffer = new StringBuilder(1024);\n            StringBuilder outBuffer = new StringBuilder(1024);\n\n            String line = null;\n            int docNumber = 0;\n            while ((line = reader.readLine()) != null)\n            {\n                //when we see a closing reuters tag, flush the file\n\n                if (line.indexOf(\"</REUTERS\") == -1) {\n                    //Replace the SGM escape sequences\n\n                    buffer.append(line).append(' ');//accumulate the strings for now, then apply regular expression to get the pieces,\n                }\n                else\n                {\n                    //Extract the relevant pieces and write to a file in the output dir\n                    Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n                    while (matcher.find())\n                    {\n                        for (int i = 1; i <= matcher.groupCount(); i++)\n                        {\n                            if (matcher.group(i) != null)\n                            {\n                                outBuffer.append(matcher.group(i));\n                            }\n                        }\n                        outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n                    }\n                    String out = outBuffer.toString();\n                    for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++)\n                    {\n                        out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n                    }\n                    File outFile = new File(outputDir, sgmFile.getName() + \"-\" + (docNumber++) + \".txt\");\n                    //System.out.println(\"Writing \" + outFile);\n                    FileWriter writer = new FileWriter(outFile);\n                    writer.write(out);\n                    writer.close();\n                    outBuffer.setLength(0);\n                    buffer.setLength(0);\n                }\n            }\n            reader.close();\n        }\n\n        catch (\n                IOException e\n                )\n\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n","sourceOld":"    /**\n     * Override if you wish to change what is extracted\n     *\n     * @param sgmFile\n     */\n    protected void extractFile(File sgmFile)\n    {\n        try\n        {\n            BufferedReader reader = new BufferedReader(new FileReader(sgmFile));\n\n            StringBuilder buffer = new StringBuilder(1024);\n            StringBuilder outBuffer = new StringBuilder(1024);\n\n            String line = null;\n            int docNumber = 0;\n            while ((line = reader.readLine()) != null)\n            {\n                //when we see a closing reuters tag, flush the file\n\n                if (line.indexOf(\"</REUTERS\") == -1) {\n                    //Replace the SGM escape sequences\n\n                    buffer.append(line).append(' ');//accumulate the strings for now, then apply regular expression to get the pieces,\n                }\n                else\n                {\n                    //Extract the relevant pieces and write to a file in the output dir\n                    Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n                    while (matcher.find())\n                    {\n                        for (int i = 1; i <= matcher.groupCount(); i++)\n                        {\n                            if (matcher.group(i) != null)\n                            {\n                                outBuffer.append(matcher.group(i));\n                            }\n                        }\n                        outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n                    }\n                    String out = outBuffer.toString();\n                    for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++)\n                    {\n                        out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n                    }\n                    File outFile = new File(outputDir, sgmFile.getName() + \"-\" + (docNumber++) + \".txt\");\n                    //System.out.println(\"Writing \" + outFile);\n                    FileWriter writer = new FileWriter(outFile);\n                    writer.write(out);\n                    writer.close();\n                    outBuffer.setLength(0);\n                    buffer.setLength(0);\n                }\n            }\n            reader.close();\n        }\n\n        catch (\n                IOException e\n                )\n\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["9454a6510e2db155fb01faa5c049b06ece95fab9","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["9b80ad3438ccc68d1ef441add711ed2143324f14"],"dc5ecd93bcd50b2199757091d526fc1bcbce0db1":["9454a6510e2db155fb01faa5c049b06ece95fab9","9b80ad3438ccc68d1ef441add711ed2143324f14"],"9b80ad3438ccc68d1ef441add711ed2143324f14":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["dc5ecd93bcd50b2199757091d526fc1bcbce0db1","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dc5ecd93bcd50b2199757091d526fc1bcbce0db1":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"9b80ad3438ccc68d1ef441add711ed2143324f14":["ecc11368dc265bfdad90214f8bf5da99016ab1e2","dc5ecd93bcd50b2199757091d526fc1bcbce0db1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["70ad682703b8585f5d0a637efec044d57ec05efb","dc5ecd93bcd50b2199757091d526fc1bcbce0db1","9b80ad3438ccc68d1ef441add711ed2143324f14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}