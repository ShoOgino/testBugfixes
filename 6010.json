{"path":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/BinaryDictionary#BinaryDictionary().mjava","commits":[{"id":"98d45c1ff2c99694b6de2201175f9b8b8b27b597","date":1332757908,"type":1,"author":"Christian Moen","isMerge":false,"pathNew":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/BinaryDictionary#BinaryDictionary().mjava","pathOld":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/dict/BinaryDictionary#BinaryDictionary().mjava","sourceNew":"  protected BinaryDictionary() throws IOException {\n    InputStream mapIS = null, dictIS = null, posIS = null;\n    IOException priorE = null;\n    int[] targetMapOffsets = null, targetMap = null;\n    String[] posDict = null;\n    String[] inflFormDict = null;\n    String[] inflTypeDict = null;\n    ByteBuffer buffer = null;\n    try {\n      mapIS = getResource(TARGETMAP_FILENAME_SUFFIX);\n      mapIS = new BufferedInputStream(mapIS);\n      DataInput in = new InputStreamDataInput(mapIS);\n      CodecUtil.checkHeader(in, TARGETMAP_HEADER, VERSION, VERSION);\n      targetMap = new int[in.readVInt()];\n      targetMapOffsets = new int[in.readVInt()];\n      int accum = 0, sourceId = 0;\n      for (int ofs = 0; ofs < targetMap.length; ofs++) {\n        final int val = in.readVInt();\n        if ((val & 0x01) != 0) {\n          targetMapOffsets[sourceId] = ofs;\n          sourceId++;\n        }\n        accum += val >>> 1;\n        targetMap[ofs] = accum;\n      }\n      if (sourceId + 1 != targetMapOffsets.length)\n        throw new IOException(\"targetMap file format broken\");\n      targetMapOffsets[sourceId] = targetMap.length;\n      mapIS.close(); mapIS = null;\n      \n      posIS = getResource(POSDICT_FILENAME_SUFFIX);\n      posIS = new BufferedInputStream(posIS);\n      in = new InputStreamDataInput(posIS);\n      CodecUtil.checkHeader(in, POSDICT_HEADER, VERSION, VERSION);\n      int posSize = in.readVInt();\n      posDict = new String[posSize];\n      inflTypeDict = new String[posSize];\n      inflFormDict = new String[posSize];\n      for (int j = 0; j < posSize; j++) {\n        posDict[j] = in.readString();\n        inflTypeDict[j] = in.readString();\n        inflFormDict[j] = in.readString();\n        // this is how we encode null inflections\n        if (inflTypeDict[j].length() == 0) {\n          inflTypeDict[j] = null;\n        }\n        if (inflFormDict[j].length() == 0) {\n          inflFormDict[j] = null;\n        }\n      }\n      posIS.close(); posIS = null;\n      \n      dictIS = getResource(DICT_FILENAME_SUFFIX);\n      // no buffering here, as we load in one large buffer\n      in = new InputStreamDataInput(dictIS);\n      CodecUtil.checkHeader(in, DICT_HEADER, VERSION, VERSION);\n      final int size = in.readVInt();\n      final ByteBuffer tmpBuffer = ByteBuffer.allocateDirect(size);\n      final ReadableByteChannel channel = Channels.newChannel(dictIS);\n      final int read = channel.read(tmpBuffer);\n      if (read != size) {\n        throw new EOFException(\"Cannot read whole dictionary\");\n      }\n      dictIS.close(); dictIS = null;\n      buffer = tmpBuffer.asReadOnlyBuffer();\n    } catch (IOException ioe) {\n      priorE = ioe;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorE, mapIS, posIS, dictIS);\n    }\n    \n    this.targetMap = targetMap;\n    this.targetMapOffsets = targetMapOffsets;\n    this.posDict = posDict;\n    this.inflTypeDict = inflTypeDict;\n    this.inflFormDict = inflFormDict;\n    this.buffer = buffer;\n  }\n\n","sourceOld":"  protected BinaryDictionary() throws IOException {\n    InputStream mapIS = null, dictIS = null, posIS = null;\n    IOException priorE = null;\n    int[] targetMapOffsets = null, targetMap = null;\n    String[] posDict = null;\n    String[] inflFormDict = null;\n    String[] inflTypeDict = null;\n    ByteBuffer buffer = null;\n    try {\n      mapIS = getResource(TARGETMAP_FILENAME_SUFFIX);\n      mapIS = new BufferedInputStream(mapIS);\n      DataInput in = new InputStreamDataInput(mapIS);\n      CodecUtil.checkHeader(in, TARGETMAP_HEADER, VERSION, VERSION);\n      targetMap = new int[in.readVInt()];\n      targetMapOffsets = new int[in.readVInt()];\n      int accum = 0, sourceId = 0;\n      for (int ofs = 0; ofs < targetMap.length; ofs++) {\n        final int val = in.readVInt();\n        if ((val & 0x01) != 0) {\n          targetMapOffsets[sourceId] = ofs;\n          sourceId++;\n        }\n        accum += val >>> 1;\n        targetMap[ofs] = accum;\n      }\n      if (sourceId + 1 != targetMapOffsets.length)\n        throw new IOException(\"targetMap file format broken\");\n      targetMapOffsets[sourceId] = targetMap.length;\n      mapIS.close(); mapIS = null;\n      \n      posIS = getResource(POSDICT_FILENAME_SUFFIX);\n      posIS = new BufferedInputStream(posIS);\n      in = new InputStreamDataInput(posIS);\n      CodecUtil.checkHeader(in, POSDICT_HEADER, VERSION, VERSION);\n      int posSize = in.readVInt();\n      posDict = new String[posSize];\n      inflTypeDict = new String[posSize];\n      inflFormDict = new String[posSize];\n      for (int j = 0; j < posSize; j++) {\n        posDict[j] = in.readString();\n        inflTypeDict[j] = in.readString();\n        inflFormDict[j] = in.readString();\n        // this is how we encode null inflections\n        if (inflTypeDict[j].length() == 0) {\n          inflTypeDict[j] = null;\n        }\n        if (inflFormDict[j].length() == 0) {\n          inflFormDict[j] = null;\n        }\n      }\n      posIS.close(); posIS = null;\n      \n      dictIS = getResource(DICT_FILENAME_SUFFIX);\n      // no buffering here, as we load in one large buffer\n      in = new InputStreamDataInput(dictIS);\n      CodecUtil.checkHeader(in, DICT_HEADER, VERSION, VERSION);\n      final int size = in.readVInt();\n      final ByteBuffer tmpBuffer = ByteBuffer.allocateDirect(size);\n      final ReadableByteChannel channel = Channels.newChannel(dictIS);\n      final int read = channel.read(tmpBuffer);\n      if (read != size) {\n        throw new EOFException(\"Cannot read whole dictionary\");\n      }\n      dictIS.close(); dictIS = null;\n      buffer = tmpBuffer.asReadOnlyBuffer();\n    } catch (IOException ioe) {\n      priorE = ioe;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorE, mapIS, posIS, dictIS);\n    }\n    \n    this.targetMap = targetMap;\n    this.targetMapOffsets = targetMapOffsets;\n    this.posDict = posDict;\n    this.inflTypeDict = inflTypeDict;\n    this.inflFormDict = inflFormDict;\n    this.buffer = buffer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/BinaryDictionary#BinaryDictionary().mjava","pathOld":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/BinaryDictionary#BinaryDictionary().mjava","sourceNew":"  protected BinaryDictionary() throws IOException {\n    InputStream mapIS = null, dictIS = null, posIS = null;\n    IOException priorE = null;\n    int[] targetMapOffsets = null, targetMap = null;\n    String[] posDict = null;\n    String[] inflFormDict = null;\n    String[] inflTypeDict = null;\n    ByteBuffer buffer = null;\n    try {\n      mapIS = getResource(TARGETMAP_FILENAME_SUFFIX);\n      mapIS = new BufferedInputStream(mapIS);\n      DataInput in = new InputStreamDataInput(mapIS);\n      CodecUtil.checkHeader(in, TARGETMAP_HEADER, VERSION, VERSION);\n      targetMap = new int[in.readVInt()];\n      targetMapOffsets = new int[in.readVInt()];\n      int accum = 0, sourceId = 0;\n      for (int ofs = 0; ofs < targetMap.length; ofs++) {\n        final int val = in.readVInt();\n        if ((val & 0x01) != 0) {\n          targetMapOffsets[sourceId] = ofs;\n          sourceId++;\n        }\n        accum += val >>> 1;\n        targetMap[ofs] = accum;\n      }\n      if (sourceId + 1 != targetMapOffsets.length)\n        throw new IOException(\"targetMap file format broken\");\n      targetMapOffsets[sourceId] = targetMap.length;\n      mapIS.close(); mapIS = null;\n      \n      posIS = getResource(POSDICT_FILENAME_SUFFIX);\n      posIS = new BufferedInputStream(posIS);\n      in = new InputStreamDataInput(posIS);\n      CodecUtil.checkHeader(in, POSDICT_HEADER, VERSION, VERSION);\n      int posSize = in.readVInt();\n      posDict = new String[posSize];\n      inflTypeDict = new String[posSize];\n      inflFormDict = new String[posSize];\n      for (int j = 0; j < posSize; j++) {\n        posDict[j] = in.readString();\n        inflTypeDict[j] = in.readString();\n        inflFormDict[j] = in.readString();\n        // this is how we encode null inflections\n        if (inflTypeDict[j].length() == 0) {\n          inflTypeDict[j] = null;\n        }\n        if (inflFormDict[j].length() == 0) {\n          inflFormDict[j] = null;\n        }\n      }\n      posIS.close(); posIS = null;\n      \n      dictIS = getResource(DICT_FILENAME_SUFFIX);\n      // no buffering here, as we load in one large buffer\n      in = new InputStreamDataInput(dictIS);\n      CodecUtil.checkHeader(in, DICT_HEADER, VERSION, VERSION);\n      final int size = in.readVInt();\n      final ByteBuffer tmpBuffer = ByteBuffer.allocateDirect(size);\n      final ReadableByteChannel channel = Channels.newChannel(dictIS);\n      final int read = channel.read(tmpBuffer);\n      if (read != size) {\n        throw new EOFException(\"Cannot read whole dictionary\");\n      }\n      dictIS.close(); dictIS = null;\n      buffer = tmpBuffer.asReadOnlyBuffer();\n    } catch (IOException ioe) {\n      priorE = ioe;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorE, mapIS, posIS, dictIS);\n    }\n    \n    this.targetMap = targetMap;\n    this.targetMapOffsets = targetMapOffsets;\n    this.posDict = posDict;\n    this.inflTypeDict = inflTypeDict;\n    this.inflFormDict = inflFormDict;\n    this.buffer = buffer;\n  }\n\n","sourceOld":"  protected BinaryDictionary() throws IOException {\n    InputStream mapIS = null, dictIS = null, posIS = null;\n    IOException priorE = null;\n    int[] targetMapOffsets = null, targetMap = null;\n    String[] posDict = null;\n    String[] inflFormDict = null;\n    String[] inflTypeDict = null;\n    ByteBuffer buffer = null;\n    try {\n      mapIS = getResource(TARGETMAP_FILENAME_SUFFIX);\n      mapIS = new BufferedInputStream(mapIS);\n      DataInput in = new InputStreamDataInput(mapIS);\n      CodecUtil.checkHeader(in, TARGETMAP_HEADER, VERSION, VERSION);\n      targetMap = new int[in.readVInt()];\n      targetMapOffsets = new int[in.readVInt()];\n      int accum = 0, sourceId = 0;\n      for (int ofs = 0; ofs < targetMap.length; ofs++) {\n        final int val = in.readVInt();\n        if ((val & 0x01) != 0) {\n          targetMapOffsets[sourceId] = ofs;\n          sourceId++;\n        }\n        accum += val >>> 1;\n        targetMap[ofs] = accum;\n      }\n      if (sourceId + 1 != targetMapOffsets.length)\n        throw new IOException(\"targetMap file format broken\");\n      targetMapOffsets[sourceId] = targetMap.length;\n      mapIS.close(); mapIS = null;\n      \n      posIS = getResource(POSDICT_FILENAME_SUFFIX);\n      posIS = new BufferedInputStream(posIS);\n      in = new InputStreamDataInput(posIS);\n      CodecUtil.checkHeader(in, POSDICT_HEADER, VERSION, VERSION);\n      int posSize = in.readVInt();\n      posDict = new String[posSize];\n      inflTypeDict = new String[posSize];\n      inflFormDict = new String[posSize];\n      for (int j = 0; j < posSize; j++) {\n        posDict[j] = in.readString();\n        inflTypeDict[j] = in.readString();\n        inflFormDict[j] = in.readString();\n        // this is how we encode null inflections\n        if (inflTypeDict[j].length() == 0) {\n          inflTypeDict[j] = null;\n        }\n        if (inflFormDict[j].length() == 0) {\n          inflFormDict[j] = null;\n        }\n      }\n      posIS.close(); posIS = null;\n      \n      dictIS = getResource(DICT_FILENAME_SUFFIX);\n      // no buffering here, as we load in one large buffer\n      in = new InputStreamDataInput(dictIS);\n      CodecUtil.checkHeader(in, DICT_HEADER, VERSION, VERSION);\n      final int size = in.readVInt();\n      final ByteBuffer tmpBuffer = ByteBuffer.allocateDirect(size);\n      final ReadableByteChannel channel = Channels.newChannel(dictIS);\n      final int read = channel.read(tmpBuffer);\n      if (read != size) {\n        throw new EOFException(\"Cannot read whole dictionary\");\n      }\n      dictIS.close(); dictIS = null;\n      buffer = tmpBuffer.asReadOnlyBuffer();\n    } catch (IOException ioe) {\n      priorE = ioe;\n    } finally {\n      IOUtils.closeWhileHandlingException(priorE, mapIS, posIS, dictIS);\n    }\n    \n    this.targetMap = targetMap;\n    this.targetMapOffsets = targetMapOffsets;\n    this.posDict = posDict;\n    this.inflTypeDict = inflTypeDict;\n    this.inflFormDict = inflFormDict;\n    this.buffer = buffer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["98d45c1ff2c99694b6de2201175f9b8b8b27b597"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"98d45c1ff2c99694b6de2201175f9b8b8b27b597":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["98d45c1ff2c99694b6de2201175f9b8b8b27b597"],"98d45c1ff2c99694b6de2201175f9b8b8b27b597":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}