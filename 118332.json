{"path":"lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionValueSource#explain(LeafReaderContext,int,Explanation).mjava","commits":[{"id":"501fdb8d708778ae5368dd5c44879e1d46487e43","date":1494401395,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionValueSource#explain(LeafReaderContext,int,Explanation).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Explanation explain(LeafReaderContext ctx, int docId, Explanation scoreExplanation) throws IOException {\n    Explanation[] explanations = new Explanation[variables.length];\n    DoubleValues dv = getValues(ctx, DoubleValuesSource.constant(scoreExplanation.getValue()).getValues(ctx, null));\n    if (dv.advanceExact(docId) == false) {\n      return Explanation.noMatch(expression.sourceText);\n    }\n    int i = 0;\n    for (DoubleValuesSource var : variables) {\n      explanations[i++] = var.explain(ctx, docId, scoreExplanation);\n    }\n    return Explanation.match((float)dv.doubleValue(), expression.sourceText + \", computed from:\", explanations);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionValueSource#explain(LeafReaderContext,int,Explanation).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Explanation explain(LeafReaderContext ctx, int docId, Explanation scoreExplanation) throws IOException {\n    Explanation[] explanations = new Explanation[variables.length];\n    DoubleValues dv = getValues(ctx, DoubleValuesSource.constant(scoreExplanation.getValue()).getValues(ctx, null));\n    if (dv.advanceExact(docId) == false) {\n      return Explanation.noMatch(expression.sourceText);\n    }\n    int i = 0;\n    for (DoubleValuesSource var : variables) {\n      explanations[i++] = var.explain(ctx, docId, scoreExplanation);\n    }\n    return Explanation.match((float)dv.doubleValue(), expression.sourceText + \", computed from:\", explanations);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a38488a55cc52553c9792da5044dd31b15128cd8","date":1510755769,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionValueSource#explain(LeafReaderContext,int,Explanation).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionValueSource#explain(LeafReaderContext,int,Explanation).mjava","sourceNew":"  @Override\n  public Explanation explain(LeafReaderContext ctx, int docId, Explanation scoreExplanation) throws IOException {\n    Explanation[] explanations = new Explanation[variables.length];\n    DoubleValues dv = getValues(ctx, DoubleValuesSource.constant(scoreExplanation.getValue()).getValues(ctx, null));\n    if (dv.advanceExact(docId) == false) {\n      return Explanation.noMatch(expression.sourceText);\n    }\n    int i = 0;\n    for (DoubleValuesSource var : variables) {\n      explanations[i++] = var.explain(ctx, docId, scoreExplanation);\n    }\n    return Explanation.match((float) dv.doubleValue(), expression.sourceText + \", computed from:\", explanations);\n  }\n\n","sourceOld":"  @Override\n  public Explanation explain(LeafReaderContext ctx, int docId, Explanation scoreExplanation) throws IOException {\n    Explanation[] explanations = new Explanation[variables.length];\n    DoubleValues dv = getValues(ctx, DoubleValuesSource.constant(scoreExplanation.getValue()).getValues(ctx, null));\n    if (dv.advanceExact(docId) == false) {\n      return Explanation.noMatch(expression.sourceText);\n    }\n    int i = 0;\n    for (DoubleValuesSource var : variables) {\n      explanations[i++] = var.explain(ctx, docId, scoreExplanation);\n    }\n    return Explanation.match((float)dv.doubleValue(), expression.sourceText + \", computed from:\", explanations);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf","date":1514891219,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionValueSource#explain(LeafReaderContext,int,Explanation).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionValueSource#explain(LeafReaderContext,int,Explanation).mjava","sourceNew":"  @Override\n  public Explanation explain(LeafReaderContext ctx, int docId, Explanation scoreExplanation) throws IOException {\n    Explanation[] explanations = new Explanation[variables.length];\n    DoubleValues dv = getValues(ctx, DoubleValuesSource.constant(scoreExplanation.getValue().doubleValue()).getValues(ctx, null));\n    if (dv.advanceExact(docId) == false) {\n      return Explanation.noMatch(expression.sourceText);\n    }\n    int i = 0;\n    for (DoubleValuesSource var : variables) {\n      explanations[i++] = var.explain(ctx, docId, scoreExplanation);\n    }\n    return Explanation.match(dv.doubleValue(), expression.sourceText + \", computed from:\", explanations);\n  }\n\n","sourceOld":"  @Override\n  public Explanation explain(LeafReaderContext ctx, int docId, Explanation scoreExplanation) throws IOException {\n    Explanation[] explanations = new Explanation[variables.length];\n    DoubleValues dv = getValues(ctx, DoubleValuesSource.constant(scoreExplanation.getValue()).getValues(ctx, null));\n    if (dv.advanceExact(docId) == false) {\n      return Explanation.noMatch(expression.sourceText);\n    }\n    int i = 0;\n    for (DoubleValuesSource var : variables) {\n      explanations[i++] = var.explain(ctx, docId, scoreExplanation);\n    }\n    return Explanation.match((float) dv.doubleValue(), expression.sourceText + \", computed from:\", explanations);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","501fdb8d708778ae5368dd5c44879e1d46487e43"],"501fdb8d708778ae5368dd5c44879e1d46487e43":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf":["a38488a55cc52553c9792da5044dd31b15128cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a38488a55cc52553c9792da5044dd31b15128cd8":["501fdb8d708778ae5368dd5c44879e1d46487e43"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"501fdb8d708778ae5368dd5c44879e1d46487e43":["e9017cf144952056066919f1ebc7897ff9bd71b1","a38488a55cc52553c9792da5044dd31b15128cd8"],"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","501fdb8d708778ae5368dd5c44879e1d46487e43"],"a38488a55cc52553c9792da5044dd31b15128cd8":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}