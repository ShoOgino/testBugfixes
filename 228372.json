{"path":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#testRun().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#testRun().mjava","pathOld":"src/test/org/apache/lucene/TestSearchForDuplicates#testRun().mjava","sourceNew":"  /** This test compares search results when using and not using compound\n   *  files.\n   *\n   *  TODO: There is rudimentary search result validation as well, but it is\n   *        simply based on asserting the output observed in the old test case,\n   *        without really knowing if the output is correct. Someone needs to\n   *        validate this output and make any changes to the checkHits method.\n   */\n  public void testRun() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter pw = new PrintWriter(sw, true);\n      doTest(pw, false);\n      pw.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      pw = new PrintWriter(sw, true);\n      doTest(pw, true);\n      pw.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n  }\n\n","sourceOld":"  /** This test compares search results when using and not using compound\n   *  files.\n   *\n   *  TODO: There is rudimentary search result validation as well, but it is\n   *        simply based on asserting the output observed in the old test case,\n   *        without really knowing if the output is correct. Someone needs to\n   *        validate this output and make any changes to the checkHits method.\n   */\n  public void testRun() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter pw = new PrintWriter(sw, true);\n      doTest(pw, false);\n      pw.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      pw = new PrintWriter(sw, true);\n      doTest(pw, true);\n      pw.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#testRun().mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#testRun().mjava","sourceNew":"  /** This test compares search results when using and not using compound\n   *  files.\n   *\n   *  TODO: There is rudimentary search result validation as well, but it is\n   *        simply based on asserting the output observed in the old test case,\n   *        without really knowing if the output is correct. Someone needs to\n   *        validate this output and make any changes to the checkHits method.\n   */\n  public void testRun() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter pw = new PrintWriter(sw, true);\n      Random random = newRandom();\n      doTest(random, pw, false);\n      pw.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      pw = new PrintWriter(sw, true);\n      doTest(random, pw, true);\n      pw.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n  }\n\n","sourceOld":"  /** This test compares search results when using and not using compound\n   *  files.\n   *\n   *  TODO: There is rudimentary search result validation as well, but it is\n   *        simply based on asserting the output observed in the old test case,\n   *        without really knowing if the output is correct. Someone needs to\n   *        validate this output and make any changes to the checkHits method.\n   */\n  public void testRun() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter pw = new PrintWriter(sw, true);\n      doTest(pw, false);\n      pw.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      pw = new PrintWriter(sw, true);\n      doTest(pw, true);\n      pw.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#testRun().mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#testRun().mjava","sourceNew":"  /** This test compares search results when using and not using compound\n   *  files.\n   *\n   *  TODO: There is rudimentary search result validation as well, but it is\n   *        simply based on asserting the output observed in the old test case,\n   *        without really knowing if the output is correct. Someone needs to\n   *        validate this output and make any changes to the checkHits method.\n   */\n  public void testRun() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter pw = new PrintWriter(sw, true);\n      doTest(random, pw, false);\n      pw.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      pw = new PrintWriter(sw, true);\n      doTest(random, pw, true);\n      pw.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n  }\n\n","sourceOld":"  /** This test compares search results when using and not using compound\n   *  files.\n   *\n   *  TODO: There is rudimentary search result validation as well, but it is\n   *        simply based on asserting the output observed in the old test case,\n   *        without really knowing if the output is correct. Someone needs to\n   *        validate this output and make any changes to the checkHits method.\n   */\n  public void testRun() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter pw = new PrintWriter(sw, true);\n      Random random = newRandom();\n      doTest(random, pw, false);\n      pw.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      pw = new PrintWriter(sw, true);\n      doTest(random, pw, true);\n      pw.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#testRun().mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#testRun().mjava","sourceNew":"  /** This test compares search results when using and not using compound\n   *  files.\n   *\n   *  TODO: There is rudimentary search result validation as well, but it is\n   *        simply based on asserting the output observed in the old test case,\n   *        without really knowing if the output is correct. Someone needs to\n   *        validate this output and make any changes to the checkHits method.\n   */\n  public void testRun() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter pw = new PrintWriter(sw, true);\n      doTest(random, pw, false);\n      pw.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      pw = new PrintWriter(sw, true);\n      doTest(random, pw, true);\n      pw.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n  }\n\n","sourceOld":"  /** This test compares search results when using and not using compound\n   *  files.\n   *\n   *  TODO: There is rudimentary search result validation as well, but it is\n   *        simply based on asserting the output observed in the old test case,\n   *        without really knowing if the output is correct. Someone needs to\n   *        validate this output and make any changes to the checkHits method.\n   */\n  public void testRun() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter pw = new PrintWriter(sw, true);\n      doTest(pw, false);\n      pw.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      pw = new PrintWriter(sw, true);\n      doTest(pw, true);\n      pw.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0762b640e0d0d12b6edb96db68986e13145c3484","date":1307575932,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#testRun().mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#testRun().mjava","sourceNew":"  /** This test compares search results when using and not using compound\n   *  files.\n   *\n   *  TODO: There is rudimentary search result validation as well, but it is\n   *        simply based on asserting the output observed in the old test case,\n   *        without really knowing if the output is correct. Someone needs to\n   *        validate this output and make any changes to the checkHits method.\n   */\n  public void testRun() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter pw = new PrintWriter(sw, true);\n      final int MAX_DOCS = atLeast(225);\n      doTest(random, pw, false, MAX_DOCS);\n      pw.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      pw = new PrintWriter(sw, true);\n      doTest(random, pw, true, MAX_DOCS);\n      pw.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n  }\n\n","sourceOld":"  /** This test compares search results when using and not using compound\n   *  files.\n   *\n   *  TODO: There is rudimentary search result validation as well, but it is\n   *        simply based on asserting the output observed in the old test case,\n   *        without really knowing if the output is correct. Someone needs to\n   *        validate this output and make any changes to the checkHits method.\n   */\n  public void testRun() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter pw = new PrintWriter(sw, true);\n      doTest(random, pw, false);\n      pw.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      pw = new PrintWriter(sw, true);\n      doTest(random, pw, true);\n      pw.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#testRun().mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#testRun().mjava","sourceNew":"  /** This test compares search results when using and not using compound\n   *  files.\n   *\n   *  TODO: There is rudimentary search result validation as well, but it is\n   *        simply based on asserting the output observed in the old test case,\n   *        without really knowing if the output is correct. Someone needs to\n   *        validate this output and make any changes to the checkHits method.\n   */\n  public void testRun() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter pw = new PrintWriter(sw, true);\n      final int MAX_DOCS = atLeast(225);\n      doTest(random, pw, false, MAX_DOCS);\n      pw.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      pw = new PrintWriter(sw, true);\n      doTest(random, pw, true, MAX_DOCS);\n      pw.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n  }\n\n","sourceOld":"  /** This test compares search results when using and not using compound\n   *  files.\n   *\n   *  TODO: There is rudimentary search result validation as well, but it is\n   *        simply based on asserting the output observed in the old test case,\n   *        without really knowing if the output is correct. Someone needs to\n   *        validate this output and make any changes to the checkHits method.\n   */\n  public void testRun() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter pw = new PrintWriter(sw, true);\n      doTest(random, pw, false);\n      pw.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      pw = new PrintWriter(sw, true);\n      doTest(random, pw, true);\n      pw.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#testRun().mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#testRun().mjava","sourceNew":"  /** This test compares search results when using and not using compound\n   *  files.\n   *\n   *  TODO: There is rudimentary search result validation as well, but it is\n   *        simply based on asserting the output observed in the old test case,\n   *        without really knowing if the output is correct. Someone needs to\n   *        validate this output and make any changes to the checkHits method.\n   */\n  public void testRun() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter pw = new PrintWriter(sw, true);\n      final int MAX_DOCS = atLeast(225);\n      doTest(random, pw, false, MAX_DOCS);\n      pw.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      pw = new PrintWriter(sw, true);\n      doTest(random, pw, true, MAX_DOCS);\n      pw.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n  }\n\n","sourceOld":"  /** This test compares search results when using and not using compound\n   *  files.\n   *\n   *  TODO: There is rudimentary search result validation as well, but it is\n   *        simply based on asserting the output observed in the old test case,\n   *        without really knowing if the output is correct. Someone needs to\n   *        validate this output and make any changes to the checkHits method.\n   */\n  public void testRun() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter pw = new PrintWriter(sw, true);\n      doTest(random, pw, false);\n      pw.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      pw = new PrintWriter(sw, true);\n      doTest(random, pw, true);\n      pw.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestSearchForDuplicates#testRun().mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#testRun().mjava","sourceNew":"  /** This test compares search results when using and not using compound\n   *  files.\n   *\n   *  TODO: There is rudimentary search result validation as well, but it is\n   *        simply based on asserting the output observed in the old test case,\n   *        without really knowing if the output is correct. Someone needs to\n   *        validate this output and make any changes to the checkHits method.\n   */\n  public void testRun() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter pw = new PrintWriter(sw, true);\n      final int MAX_DOCS = atLeast(225);\n      doTest(random, pw, false, MAX_DOCS);\n      pw.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      pw = new PrintWriter(sw, true);\n      doTest(random, pw, true, MAX_DOCS);\n      pw.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n  }\n\n","sourceOld":"  /** This test compares search results when using and not using compound\n   *  files.\n   *\n   *  TODO: There is rudimentary search result validation as well, but it is\n   *        simply based on asserting the output observed in the old test case,\n   *        without really knowing if the output is correct. Someone needs to\n   *        validate this output and make any changes to the checkHits method.\n   */\n  public void testRun() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter pw = new PrintWriter(sw, true);\n      final int MAX_DOCS = atLeast(225);\n      doTest(random, pw, false, MAX_DOCS);\n      pw.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      pw = new PrintWriter(sw, true);\n      doTest(random, pw, true, MAX_DOCS);\n      pw.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["1f653cfcf159baeaafe5d01682a911e95bba4012","0762b640e0d0d12b6edb96db68986e13145c3484"],"0762b640e0d0d12b6edb96db68986e13145c3484":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0762b640e0d0d12b6edb96db68986e13145c3484"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["1f653cfcf159baeaafe5d01682a911e95bba4012","0762b640e0d0d12b6edb96db68986e13145c3484"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","1f653cfcf159baeaafe5d01682a911e95bba4012"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"0762b640e0d0d12b6edb96db68986e13145c3484":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","3a119bbc8703c10faa329ec201c654b3a35a1e3e","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","0762b640e0d0d12b6edb96db68986e13145c3484","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}