{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#ZkCmdExecutor(int).mjava","commits":[{"id":"d044a068e0d16ff314fb7f93fa75194d5360a6ff","date":1355610187,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#ZkCmdExecutor(int).mjava","pathOld":"/dev/null","sourceNew":"  public ZkCmdExecutor(int timeoutms) {\n    double timeouts = timeoutms / 1000.0;\n    this.retryCount = Math.round(0.5f * ((float)Math.sqrt(8.0f * timeouts + 1.0f) - 1.0f));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#ZkCmdExecutor(int).mjava","pathOld":"/dev/null","sourceNew":"  public ZkCmdExecutor(int timeoutms) {\n    double timeouts = timeoutms / 1000.0;\n    this.retryCount = Math.round(0.5f * ((float)Math.sqrt(8.0f * timeouts + 1.0f) - 1.0f));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001ed520e8a09b54914b9a9ee36cd13a30cbf599","date":1388361178,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#ZkCmdExecutor(int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#ZkCmdExecutor(int).mjava","sourceNew":"  /**\n   * TODO: At this point, this should probably take a SolrZkClient in\n   * it's constructor.\n   * \n   * @param timeoutms\n   *          the client timeout for the ZooKeeper clients that will be used\n   *          with this class.\n   */\n  public ZkCmdExecutor(int timeoutms) {\n    double timeouts = timeoutms / 1000.0;\n    this.retryCount = Math.round(0.5f * ((float)Math.sqrt(8.0f * timeouts + 1.0f) - 1.0f));\n  }\n\n","sourceOld":"  public ZkCmdExecutor(int timeoutms) {\n    double timeouts = timeoutms / 1000.0;\n    this.retryCount = Math.round(0.5f * ((float)Math.sqrt(8.0f * timeouts + 1.0f) - 1.0f));\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"be3387b47ea5f9c0ef8a22fc45775b1fd4e8e6fe","date":1408716126,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#ZkCmdExecutor(int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#ZkCmdExecutor(int).mjava","sourceNew":"  /**\n   * TODO: At this point, this should probably take a SolrZkClient in\n   * it's constructor.\n   * \n   * @param timeoutms\n   *          the client timeout for the ZooKeeper clients that will be used\n   *          with this class.\n   */\n  public ZkCmdExecutor(int timeoutms) {\n    timeouts = timeoutms / 1000.0;\n    this.retryCount = Math.round(0.5f * ((float)Math.sqrt(8.0f * timeouts + 1.0f) - 1.0f)) + 1;\n  }\n\n","sourceOld":"  /**\n   * TODO: At this point, this should probably take a SolrZkClient in\n   * it's constructor.\n   * \n   * @param timeoutms\n   *          the client timeout for the ZooKeeper clients that will be used\n   *          with this class.\n   */\n  public ZkCmdExecutor(int timeoutms) {\n    double timeouts = timeoutms / 1000.0;\n    this.retryCount = Math.round(0.5f * ((float)Math.sqrt(8.0f * timeouts + 1.0f) - 1.0f));\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#ZkCmdExecutor(int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#ZkCmdExecutor(int).mjava","sourceNew":"  /**\n   * TODO: At this point, this should probably take a SolrZkClient in\n   * its constructor.\n   * \n   * @param timeoutms\n   *          the client timeout for the ZooKeeper clients that will be used\n   *          with this class.\n   */\n  public ZkCmdExecutor(int timeoutms) {\n    timeouts = timeoutms / 1000.0;\n    this.retryCount = Math.round(0.5f * ((float)Math.sqrt(8.0f * timeouts + 1.0f) - 1.0f)) + 1;\n  }\n\n","sourceOld":"  /**\n   * TODO: At this point, this should probably take a SolrZkClient in\n   * it's constructor.\n   * \n   * @param timeoutms\n   *          the client timeout for the ZooKeeper clients that will be used\n   *          with this class.\n   */\n  public ZkCmdExecutor(int timeoutms) {\n    timeouts = timeoutms / 1000.0;\n    this.retryCount = Math.round(0.5f * ((float)Math.sqrt(8.0f * timeouts + 1.0f) - 1.0f)) + 1;\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#ZkCmdExecutor(int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkCmdExecutor#ZkCmdExecutor(int).mjava","sourceNew":"  public ZkCmdExecutor(int timeoutms) {\n    this(timeoutms, null);\n  }\n\n","sourceOld":"  /**\n   * TODO: At this point, this should probably take a SolrZkClient in\n   * its constructor.\n   * \n   * @param timeoutms\n   *          the client timeout for the ZooKeeper clients that will be used\n   *          with this class.\n   */\n  public ZkCmdExecutor(int timeoutms) {\n    timeouts = timeoutms / 1000.0;\n    this.retryCount = Math.round(0.5f * ((float)Math.sqrt(8.0f * timeouts + 1.0f) - 1.0f)) + 1;\n  }\n\n","bugFix":["001ed520e8a09b54914b9a9ee36cd13a30cbf599","be3387b47ea5f9c0ef8a22fc45775b1fd4e8e6fe","8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d044a068e0d16ff314fb7f93fa75194d5360a6ff"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["be3387b47ea5f9c0ef8a22fc45775b1fd4e8e6fe"],"001ed520e8a09b54914b9a9ee36cd13a30cbf599":["d044a068e0d16ff314fb7f93fa75194d5360a6ff"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"be3387b47ea5f9c0ef8a22fc45775b1fd4e8e6fe":["001ed520e8a09b54914b9a9ee36cd13a30cbf599"],"d044a068e0d16ff314fb7f93fa75194d5360a6ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"001ed520e8a09b54914b9a9ee36cd13a30cbf599":["be3387b47ea5f9c0ef8a22fc45775b1fd4e8e6fe"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d044a068e0d16ff314fb7f93fa75194d5360a6ff"],"d044a068e0d16ff314fb7f93fa75194d5360a6ff":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","001ed520e8a09b54914b9a9ee36cd13a30cbf599"],"be3387b47ea5f9c0ef8a22fc45775b1fd4e8e6fe":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}