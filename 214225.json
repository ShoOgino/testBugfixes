{"path":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(NumericDocValues,Type,BitSet,BitSet).mjava","commits":[{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(NumericDocValues,Type,BitSet,BitSet).mjava","pathOld":"/dev/null","sourceNew":"  /** Wraps the provided {@link NumericDocValues}, iterating over only\n   *  child documents, in order to only select one value per parent among\n   *  its {@code children} using the configured {@code selection} type. */\n  public static NumericDocValues wrap(final NumericDocValues values, Type selection, BitSet parents, BitSet children) {\n    return new NumericDocValues() {\n\n      private int parentDocID = -1;\n      private long value;\n\n      @Override\n      public int nextDoc() throws IOException {\n\n        if (parentDocID == -1) {\n          values.nextDoc();\n        }\n\n        while (true) {\n\n          // TODO: make this crazy loop more efficient\n\n          int childDocID = values.docID();\n          if (childDocID == NO_MORE_DOCS) {\n            parentDocID = NO_MORE_DOCS;\n            return parentDocID;\n          }\n          if (children.get(childDocID) == false) {\n            values.nextDoc();\n            continue;\n          }\n\n          assert parents.get(childDocID) == false;\n        \n          parentDocID = parents.nextSetBit(childDocID);\n          value = values.longValue();\n\n          while (true) {\n            childDocID = values.nextDoc();\n            assert childDocID != parentDocID;\n            if (childDocID > parentDocID) {\n              break;\n            }\n\n            switch (selection) {\n            case MIN:\n              value = Math.min(value, values.longValue());\n              break;\n            case MAX:\n              value = Math.max(value, values.longValue());\n              break;\n            default:\n              throw new AssertionError();\n            }\n          }\n\n          break;\n        }\n\n        return parentDocID;\n      }\n\n      @Override\n      public int advance(int targetParentDocID) throws IOException {\n        if (targetParentDocID <= parentDocID) {\n          throw new IllegalArgumentException(\"target must be after the current document: current=\" + parentDocID + \" target=\" + targetParentDocID);\n        }\n\n        if (targetParentDocID == 0) {\n          return nextDoc();\n        }\n        \n        int firstChild = parents.prevSetBit(targetParentDocID - 1) + 1;\n        if (values.advance(firstChild) == NO_MORE_DOCS) {\n          parentDocID = NO_MORE_DOCS;\n          return parentDocID;\n        } else {\n          return nextDoc();\n        }\n      }\n\n      @Override\n      public long longValue() {\n        return value;\n      }\n      \n      @Override\n      public int docID() {\n        return parentDocID;\n      }      \n\n      @Override\n      public long cost() {\n        return values.cost();\n      }      \n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(NumericDocValues,Type,BitSet,BitSet).mjava","pathOld":"/dev/null","sourceNew":"  /** Wraps the provided {@link NumericDocValues}, iterating over only\n   *  child documents, in order to only select one value per parent among\n   *  its {@code children} using the configured {@code selection} type. */\n  public static NumericDocValues wrap(final NumericDocValues values, Type selection, BitSet parents, BitSet children) {\n    return new NumericDocValues() {\n\n      private int parentDocID = -1;\n      private long value;\n\n      @Override\n      public int nextDoc() throws IOException {\n\n        if (parentDocID == -1) {\n          values.nextDoc();\n        }\n\n        while (true) {\n\n          // TODO: make this crazy loop more efficient\n\n          int childDocID = values.docID();\n          if (childDocID == NO_MORE_DOCS) {\n            parentDocID = NO_MORE_DOCS;\n            return parentDocID;\n          }\n          if (children.get(childDocID) == false) {\n            values.nextDoc();\n            continue;\n          }\n\n          assert parents.get(childDocID) == false;\n        \n          parentDocID = parents.nextSetBit(childDocID);\n          value = values.longValue();\n\n          while (true) {\n            childDocID = values.nextDoc();\n            assert childDocID != parentDocID;\n            if (childDocID > parentDocID) {\n              break;\n            }\n\n            switch (selection) {\n            case MIN:\n              value = Math.min(value, values.longValue());\n              break;\n            case MAX:\n              value = Math.max(value, values.longValue());\n              break;\n            default:\n              throw new AssertionError();\n            }\n          }\n\n          break;\n        }\n\n        return parentDocID;\n      }\n\n      @Override\n      public int advance(int targetParentDocID) throws IOException {\n        if (targetParentDocID <= parentDocID) {\n          throw new IllegalArgumentException(\"target must be after the current document: current=\" + parentDocID + \" target=\" + targetParentDocID);\n        }\n\n        if (targetParentDocID == 0) {\n          return nextDoc();\n        }\n        \n        int firstChild = parents.prevSetBit(targetParentDocID - 1) + 1;\n        if (values.advance(firstChild) == NO_MORE_DOCS) {\n          parentDocID = NO_MORE_DOCS;\n          return parentDocID;\n        } else {\n          return nextDoc();\n        }\n      }\n\n      @Override\n      public long longValue() {\n        return value;\n      }\n      \n      @Override\n      public int docID() {\n        return parentDocID;\n      }      \n\n      @Override\n      public long cost() {\n        return values.cost();\n      }      \n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(NumericDocValues,Type,BitSet,BitSet).mjava","pathOld":"/dev/null","sourceNew":"  /** Wraps the provided {@link NumericDocValues}, iterating over only\n   *  child documents, in order to only select one value per parent among\n   *  its {@code children} using the configured {@code selection} type. */\n  public static NumericDocValues wrap(final NumericDocValues values, Type selection, BitSet parents, BitSet children) {\n    return new NumericDocValues() {\n\n      private int parentDocID = -1;\n      private long value;\n\n      @Override\n      public int nextDoc() throws IOException {\n\n        if (parentDocID == -1) {\n          values.nextDoc();\n        }\n\n        while (true) {\n\n          // TODO: make this crazy loop more efficient\n\n          int childDocID = values.docID();\n          if (childDocID == NO_MORE_DOCS) {\n            parentDocID = NO_MORE_DOCS;\n            return parentDocID;\n          }\n          if (children.get(childDocID) == false) {\n            values.nextDoc();\n            continue;\n          }\n\n          assert parents.get(childDocID) == false;\n        \n          parentDocID = parents.nextSetBit(childDocID);\n          value = values.longValue();\n\n          while (true) {\n            childDocID = values.nextDoc();\n            assert childDocID != parentDocID;\n            if (childDocID > parentDocID) {\n              break;\n            }\n\n            switch (selection) {\n            case MIN:\n              value = Math.min(value, values.longValue());\n              break;\n            case MAX:\n              value = Math.max(value, values.longValue());\n              break;\n            default:\n              throw new AssertionError();\n            }\n          }\n\n          break;\n        }\n\n        return parentDocID;\n      }\n\n      @Override\n      public int advance(int targetParentDocID) throws IOException {\n        if (targetParentDocID <= parentDocID) {\n          throw new IllegalArgumentException(\"target must be after the current document: current=\" + parentDocID + \" target=\" + targetParentDocID);\n        }\n\n        if (targetParentDocID == 0) {\n          return nextDoc();\n        }\n        \n        int firstChild = parents.prevSetBit(targetParentDocID - 1) + 1;\n        if (values.advance(firstChild) == NO_MORE_DOCS) {\n          parentDocID = NO_MORE_DOCS;\n          return parentDocID;\n        } else {\n          return nextDoc();\n        }\n      }\n\n      @Override\n      public long longValue() {\n        return value;\n      }\n      \n      @Override\n      public int docID() {\n        return parentDocID;\n      }      \n\n      @Override\n      public long cost() {\n        return values.cost();\n      }      \n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11134e449dabe11d6d0ff6a564d84b82cbe93722","date":1477299083,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(NumericDocValues,Type,BitSet,BitSet).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(NumericDocValues,Type,BitSet,BitSet).mjava","sourceNew":"  /** Wraps the provided {@link NumericDocValues}, iterating over only\n   *  child documents, in order to only select one value per parent among\n   *  its {@code children} using the configured {@code selection} type. */\n  public static NumericDocValues wrap(final NumericDocValues values, Type selection, BitSet parents, BitSet children) {\n    return new NumericDocValues() {\n\n      private int parentDocID = -1;\n      private long value;\n\n      @Override\n      public int nextDoc() throws IOException {\n\n        if (parentDocID == -1) {\n          values.nextDoc();\n        }\n\n        while (true) {\n\n          // TODO: make this crazy loop more efficient\n\n          int childDocID = values.docID();\n          if (childDocID == NO_MORE_DOCS) {\n            parentDocID = NO_MORE_DOCS;\n            return parentDocID;\n          }\n          if (children.get(childDocID) == false) {\n            values.nextDoc();\n            continue;\n          }\n\n          assert parents.get(childDocID) == false;\n        \n          parentDocID = parents.nextSetBit(childDocID);\n          value = values.longValue();\n\n          while (true) {\n            childDocID = values.nextDoc();\n            assert childDocID != parentDocID;\n            if (childDocID > parentDocID) {\n              break;\n            }\n\n            switch (selection) {\n            case MIN:\n              value = Math.min(value, values.longValue());\n              break;\n            case MAX:\n              value = Math.max(value, values.longValue());\n              break;\n            default:\n              throw new AssertionError();\n            }\n          }\n\n          break;\n        }\n\n        return parentDocID;\n      }\n\n      @Override\n      public int advance(int targetParentDocID) throws IOException {\n        if (targetParentDocID <= parentDocID) {\n          throw new IllegalArgumentException(\"target must be after the current document: current=\" + parentDocID + \" target=\" + targetParentDocID);\n        }\n\n        if (targetParentDocID == 0) {\n          return nextDoc();\n        }\n        \n        int firstChild = parents.prevSetBit(targetParentDocID - 1) + 1;\n        if (values.advance(firstChild) == NO_MORE_DOCS) {\n          parentDocID = NO_MORE_DOCS;\n          return parentDocID;\n        } else {\n          return nextDoc();\n        }\n      }\n\n      @Override\n      public boolean advanceExact(int targetParentDocID) throws IOException {\n        if (targetParentDocID <= parentDocID) {\n          throw new IllegalArgumentException(\"target must be after the current document: current=\" + parentDocID + \" target=\" + targetParentDocID);\n        }\n        parentDocID = targetParentDocID;\n        if (parents.get(targetParentDocID) == false) {\n          return false;\n        }\n        int prevParentDocId = parentDocID == 0 ? -1 : parents.prevSetBit(parentDocID - 1);\n        int childDoc = values.docID();\n        if (childDoc <= prevParentDocId) {\n          childDoc = values.advance(prevParentDocId + 1);\n        }\n        if (childDoc >= parentDocID) {\n          return false;\n        }\n        \n        boolean hasValue = false;\n        for (int doc = values.docID(); doc < parentDocID; doc = values.nextDoc()) {\n          if (children.get(doc)) {\n            value = values.longValue();\n            hasValue = true;\n            values.nextDoc();\n            break;\n          }\n        }\n        if (hasValue == false) {\n          return false;\n        }\n\n        for (int doc = values.docID(); doc < parentDocID; doc = values.nextDoc()) {\n          if (children.get(doc)) {\n            switch (selection) {\n              case MIN:\n                value = Math.min(value, values.longValue());\n                break;\n              case MAX:\n                value = Math.max(value, values.longValue());\n                break;\n              default:\n                throw new AssertionError();\n            }\n          }\n        }\n        return true;\n      }\n\n      @Override\n      public long longValue() {\n        return value;\n      }\n      \n      @Override\n      public int docID() {\n        return parentDocID;\n      }      \n\n      @Override\n      public long cost() {\n        return values.cost();\n      }      \n    };\n  }\n\n","sourceOld":"  /** Wraps the provided {@link NumericDocValues}, iterating over only\n   *  child documents, in order to only select one value per parent among\n   *  its {@code children} using the configured {@code selection} type. */\n  public static NumericDocValues wrap(final NumericDocValues values, Type selection, BitSet parents, BitSet children) {\n    return new NumericDocValues() {\n\n      private int parentDocID = -1;\n      private long value;\n\n      @Override\n      public int nextDoc() throws IOException {\n\n        if (parentDocID == -1) {\n          values.nextDoc();\n        }\n\n        while (true) {\n\n          // TODO: make this crazy loop more efficient\n\n          int childDocID = values.docID();\n          if (childDocID == NO_MORE_DOCS) {\n            parentDocID = NO_MORE_DOCS;\n            return parentDocID;\n          }\n          if (children.get(childDocID) == false) {\n            values.nextDoc();\n            continue;\n          }\n\n          assert parents.get(childDocID) == false;\n        \n          parentDocID = parents.nextSetBit(childDocID);\n          value = values.longValue();\n\n          while (true) {\n            childDocID = values.nextDoc();\n            assert childDocID != parentDocID;\n            if (childDocID > parentDocID) {\n              break;\n            }\n\n            switch (selection) {\n            case MIN:\n              value = Math.min(value, values.longValue());\n              break;\n            case MAX:\n              value = Math.max(value, values.longValue());\n              break;\n            default:\n              throw new AssertionError();\n            }\n          }\n\n          break;\n        }\n\n        return parentDocID;\n      }\n\n      @Override\n      public int advance(int targetParentDocID) throws IOException {\n        if (targetParentDocID <= parentDocID) {\n          throw new IllegalArgumentException(\"target must be after the current document: current=\" + parentDocID + \" target=\" + targetParentDocID);\n        }\n\n        if (targetParentDocID == 0) {\n          return nextDoc();\n        }\n        \n        int firstChild = parents.prevSetBit(targetParentDocID - 1) + 1;\n        if (values.advance(firstChild) == NO_MORE_DOCS) {\n          parentDocID = NO_MORE_DOCS;\n          return parentDocID;\n        } else {\n          return nextDoc();\n        }\n      }\n\n      @Override\n      public long longValue() {\n        return value;\n      }\n      \n      @Override\n      public int docID() {\n        return parentDocID;\n      }      \n\n      @Override\n      public long cost() {\n        return values.cost();\n      }      \n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2714c85633b642b29871cf5ff8d17d3ba7bfd76","date":1477307753,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(NumericDocValues,Type,BitSet,BitSet).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(NumericDocValues,Type,BitSet,BitSet).mjava","sourceNew":"  /** Wraps the provided {@link NumericDocValues}, iterating over only\n   *  child documents, in order to only select one value per parent among\n   *  its {@code children} using the configured {@code selection} type. */\n  public static NumericDocValues wrap(final NumericDocValues values, Type selection, BitSet parents, BitSet children) {\n    return new NumericDocValues() {\n\n      private int parentDocID = -1;\n      private long value;\n\n      @Override\n      public int nextDoc() throws IOException {\n\n        if (parentDocID == -1) {\n          values.nextDoc();\n        }\n\n        while (true) {\n\n          // TODO: make this crazy loop more efficient\n\n          int childDocID = values.docID();\n          if (childDocID == NO_MORE_DOCS) {\n            parentDocID = NO_MORE_DOCS;\n            return parentDocID;\n          }\n          if (children.get(childDocID) == false) {\n            values.nextDoc();\n            continue;\n          }\n\n          assert parents.get(childDocID) == false;\n        \n          parentDocID = parents.nextSetBit(childDocID);\n          value = values.longValue();\n\n          while (true) {\n            childDocID = values.nextDoc();\n            assert childDocID != parentDocID;\n            if (childDocID > parentDocID) {\n              break;\n            }\n\n            switch (selection) {\n            case MIN:\n              value = Math.min(value, values.longValue());\n              break;\n            case MAX:\n              value = Math.max(value, values.longValue());\n              break;\n            default:\n              throw new AssertionError();\n            }\n          }\n\n          break;\n        }\n\n        return parentDocID;\n      }\n\n      @Override\n      public int advance(int targetParentDocID) throws IOException {\n        if (targetParentDocID <= parentDocID) {\n          throw new IllegalArgumentException(\"target must be after the current document: current=\" + parentDocID + \" target=\" + targetParentDocID);\n        }\n\n        if (targetParentDocID == 0) {\n          return nextDoc();\n        }\n        \n        int firstChild = parents.prevSetBit(targetParentDocID - 1) + 1;\n        if (values.advance(firstChild) == NO_MORE_DOCS) {\n          parentDocID = NO_MORE_DOCS;\n          return parentDocID;\n        } else {\n          return nextDoc();\n        }\n      }\n\n      @Override\n      public boolean advanceExact(int targetParentDocID) throws IOException {\n        if (targetParentDocID <= parentDocID) {\n          throw new IllegalArgumentException(\"target must be after the current document: current=\" + parentDocID + \" target=\" + targetParentDocID);\n        }\n        parentDocID = targetParentDocID;\n        if (parents.get(targetParentDocID) == false) {\n          return false;\n        }\n        int prevParentDocId = parentDocID == 0 ? -1 : parents.prevSetBit(parentDocID - 1);\n        int childDoc = values.docID();\n        if (childDoc <= prevParentDocId) {\n          childDoc = values.advance(prevParentDocId + 1);\n        }\n        if (childDoc >= parentDocID) {\n          return false;\n        }\n        \n        boolean hasValue = false;\n        for (int doc = values.docID(); doc < parentDocID; doc = values.nextDoc()) {\n          if (children.get(doc)) {\n            value = values.longValue();\n            hasValue = true;\n            values.nextDoc();\n            break;\n          }\n        }\n        if (hasValue == false) {\n          return false;\n        }\n\n        for (int doc = values.docID(); doc < parentDocID; doc = values.nextDoc()) {\n          if (children.get(doc)) {\n            switch (selection) {\n              case MIN:\n                value = Math.min(value, values.longValue());\n                break;\n              case MAX:\n                value = Math.max(value, values.longValue());\n                break;\n              default:\n                throw new AssertionError();\n            }\n          }\n        }\n        return true;\n      }\n\n      @Override\n      public long longValue() {\n        return value;\n      }\n      \n      @Override\n      public int docID() {\n        return parentDocID;\n      }      \n\n      @Override\n      public long cost() {\n        return values.cost();\n      }      \n    };\n  }\n\n","sourceOld":"  /** Wraps the provided {@link NumericDocValues}, iterating over only\n   *  child documents, in order to only select one value per parent among\n   *  its {@code children} using the configured {@code selection} type. */\n  public static NumericDocValues wrap(final NumericDocValues values, Type selection, BitSet parents, BitSet children) {\n    return new NumericDocValues() {\n\n      private int parentDocID = -1;\n      private long value;\n\n      @Override\n      public int nextDoc() throws IOException {\n\n        if (parentDocID == -1) {\n          values.nextDoc();\n        }\n\n        while (true) {\n\n          // TODO: make this crazy loop more efficient\n\n          int childDocID = values.docID();\n          if (childDocID == NO_MORE_DOCS) {\n            parentDocID = NO_MORE_DOCS;\n            return parentDocID;\n          }\n          if (children.get(childDocID) == false) {\n            values.nextDoc();\n            continue;\n          }\n\n          assert parents.get(childDocID) == false;\n        \n          parentDocID = parents.nextSetBit(childDocID);\n          value = values.longValue();\n\n          while (true) {\n            childDocID = values.nextDoc();\n            assert childDocID != parentDocID;\n            if (childDocID > parentDocID) {\n              break;\n            }\n\n            switch (selection) {\n            case MIN:\n              value = Math.min(value, values.longValue());\n              break;\n            case MAX:\n              value = Math.max(value, values.longValue());\n              break;\n            default:\n              throw new AssertionError();\n            }\n          }\n\n          break;\n        }\n\n        return parentDocID;\n      }\n\n      @Override\n      public int advance(int targetParentDocID) throws IOException {\n        if (targetParentDocID <= parentDocID) {\n          throw new IllegalArgumentException(\"target must be after the current document: current=\" + parentDocID + \" target=\" + targetParentDocID);\n        }\n\n        if (targetParentDocID == 0) {\n          return nextDoc();\n        }\n        \n        int firstChild = parents.prevSetBit(targetParentDocID - 1) + 1;\n        if (values.advance(firstChild) == NO_MORE_DOCS) {\n          parentDocID = NO_MORE_DOCS;\n          return parentDocID;\n        } else {\n          return nextDoc();\n        }\n      }\n\n      @Override\n      public long longValue() {\n        return value;\n      }\n      \n      @Override\n      public int docID() {\n        return parentDocID;\n      }      \n\n      @Override\n      public long cost() {\n        return values.cost();\n      }      \n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(NumericDocValues,Type,BitSet,BitSet).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(NumericDocValues,Type,BitSet,BitSet).mjava","sourceNew":"  /** Wraps the provided {@link NumericDocValues}, iterating over only\n   *  child documents, in order to only select one value per parent among\n   *  its {@code children} using the configured {@code selection} type. */\n  public static NumericDocValues wrap(final NumericDocValues values, Type selection, BitSet parents, BitSet children) {\n    return new NumericDocValues() {\n\n      private int parentDocID = -1;\n      private long value;\n\n      @Override\n      public int nextDoc() throws IOException {\n\n        if (parentDocID == -1) {\n          values.nextDoc();\n        }\n\n        while (true) {\n\n          // TODO: make this crazy loop more efficient\n\n          int childDocID = values.docID();\n          if (childDocID == NO_MORE_DOCS) {\n            parentDocID = NO_MORE_DOCS;\n            return parentDocID;\n          }\n          if (children.get(childDocID) == false) {\n            values.nextDoc();\n            continue;\n          }\n\n          assert parents.get(childDocID) == false;\n        \n          parentDocID = parents.nextSetBit(childDocID);\n          value = values.longValue();\n\n          while (true) {\n            childDocID = values.nextDoc();\n            assert childDocID != parentDocID;\n            if (childDocID > parentDocID) {\n              break;\n            }\n\n            switch (selection) {\n            case MIN:\n              value = Math.min(value, values.longValue());\n              break;\n            case MAX:\n              value = Math.max(value, values.longValue());\n              break;\n            default:\n              throw new AssertionError();\n            }\n          }\n\n          break;\n        }\n\n        return parentDocID;\n      }\n\n      @Override\n      public int advance(int targetParentDocID) throws IOException {\n        if (targetParentDocID <= parentDocID) {\n          throw new IllegalArgumentException(\"target must be after the current document: current=\" + parentDocID + \" target=\" + targetParentDocID);\n        }\n\n        if (targetParentDocID == 0) {\n          return nextDoc();\n        }\n        \n        int firstChild = parents.prevSetBit(targetParentDocID - 1) + 1;\n        if (values.advance(firstChild) == NO_MORE_DOCS) {\n          parentDocID = NO_MORE_DOCS;\n          return parentDocID;\n        } else {\n          return nextDoc();\n        }\n      }\n\n      @Override\n      public boolean advanceExact(int targetParentDocID) throws IOException {\n        if (targetParentDocID <= parentDocID) {\n          throw new IllegalArgumentException(\"target must be after the current document: current=\" + parentDocID + \" target=\" + targetParentDocID);\n        }\n        parentDocID = targetParentDocID;\n        if (parents.get(targetParentDocID) == false) {\n          return false;\n        }\n        int prevParentDocId = parentDocID == 0 ? -1 : parents.prevSetBit(parentDocID - 1);\n        int childDoc = values.docID();\n        if (childDoc <= prevParentDocId) {\n          childDoc = values.advance(prevParentDocId + 1);\n        }\n        if (childDoc >= parentDocID) {\n          return false;\n        }\n        \n        boolean hasValue = false;\n        for (int doc = values.docID(); doc < parentDocID; doc = values.nextDoc()) {\n          if (children.get(doc)) {\n            value = values.longValue();\n            hasValue = true;\n            values.nextDoc();\n            break;\n          }\n        }\n        if (hasValue == false) {\n          return false;\n        }\n\n        for (int doc = values.docID(); doc < parentDocID; doc = values.nextDoc()) {\n          if (children.get(doc)) {\n            switch (selection) {\n              case MIN:\n                value = Math.min(value, values.longValue());\n                break;\n              case MAX:\n                value = Math.max(value, values.longValue());\n                break;\n              default:\n                throw new AssertionError();\n            }\n          }\n        }\n        return true;\n      }\n\n      @Override\n      public long longValue() {\n        return value;\n      }\n      \n      @Override\n      public int docID() {\n        return parentDocID;\n      }      \n\n      @Override\n      public long cost() {\n        return values.cost();\n      }      \n    };\n  }\n\n","sourceOld":"  /** Wraps the provided {@link NumericDocValues}, iterating over only\n   *  child documents, in order to only select one value per parent among\n   *  its {@code children} using the configured {@code selection} type. */\n  public static NumericDocValues wrap(final NumericDocValues values, Type selection, BitSet parents, BitSet children) {\n    return new NumericDocValues() {\n\n      private int parentDocID = -1;\n      private long value;\n\n      @Override\n      public int nextDoc() throws IOException {\n\n        if (parentDocID == -1) {\n          values.nextDoc();\n        }\n\n        while (true) {\n\n          // TODO: make this crazy loop more efficient\n\n          int childDocID = values.docID();\n          if (childDocID == NO_MORE_DOCS) {\n            parentDocID = NO_MORE_DOCS;\n            return parentDocID;\n          }\n          if (children.get(childDocID) == false) {\n            values.nextDoc();\n            continue;\n          }\n\n          assert parents.get(childDocID) == false;\n        \n          parentDocID = parents.nextSetBit(childDocID);\n          value = values.longValue();\n\n          while (true) {\n            childDocID = values.nextDoc();\n            assert childDocID != parentDocID;\n            if (childDocID > parentDocID) {\n              break;\n            }\n\n            switch (selection) {\n            case MIN:\n              value = Math.min(value, values.longValue());\n              break;\n            case MAX:\n              value = Math.max(value, values.longValue());\n              break;\n            default:\n              throw new AssertionError();\n            }\n          }\n\n          break;\n        }\n\n        return parentDocID;\n      }\n\n      @Override\n      public int advance(int targetParentDocID) throws IOException {\n        if (targetParentDocID <= parentDocID) {\n          throw new IllegalArgumentException(\"target must be after the current document: current=\" + parentDocID + \" target=\" + targetParentDocID);\n        }\n\n        if (targetParentDocID == 0) {\n          return nextDoc();\n        }\n        \n        int firstChild = parents.prevSetBit(targetParentDocID - 1) + 1;\n        if (values.advance(firstChild) == NO_MORE_DOCS) {\n          parentDocID = NO_MORE_DOCS;\n          return parentDocID;\n        } else {\n          return nextDoc();\n        }\n      }\n\n      @Override\n      public long longValue() {\n        return value;\n      }\n      \n      @Override\n      public int docID() {\n        return parentDocID;\n      }      \n\n      @Override\n      public long cost() {\n        return values.cost();\n      }      \n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"181db58a040d7aebaeb7a74578bd9b9aa603af6c","date":1497965469,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(NumericDocValues,Type,BitSet,BitSet).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(NumericDocValues,Type,BitSet,BitSet).mjava","sourceNew":"  /** Wraps the provided {@link NumericDocValues}, iterating over only\n   *  child documents, in order to only select one value per parent among\n   *  its {@code children} using the configured {@code selection} type. */\n  @Deprecated\n  public static NumericDocValues wrap(final NumericDocValues values, Type selection, BitSet parents, BitSet children) {\n    return wrap(values,selection, parents, toIter(children));\n  }\n\n","sourceOld":"  /** Wraps the provided {@link NumericDocValues}, iterating over only\n   *  child documents, in order to only select one value per parent among\n   *  its {@code children} using the configured {@code selection} type. */\n  public static NumericDocValues wrap(final NumericDocValues values, Type selection, BitSet parents, BitSet children) {\n    return new NumericDocValues() {\n\n      private int parentDocID = -1;\n      private long value;\n\n      @Override\n      public int nextDoc() throws IOException {\n\n        if (parentDocID == -1) {\n          values.nextDoc();\n        }\n\n        while (true) {\n\n          // TODO: make this crazy loop more efficient\n\n          int childDocID = values.docID();\n          if (childDocID == NO_MORE_DOCS) {\n            parentDocID = NO_MORE_DOCS;\n            return parentDocID;\n          }\n          if (children.get(childDocID) == false) {\n            values.nextDoc();\n            continue;\n          }\n\n          assert parents.get(childDocID) == false;\n        \n          parentDocID = parents.nextSetBit(childDocID);\n          value = values.longValue();\n\n          while (true) {\n            childDocID = values.nextDoc();\n            assert childDocID != parentDocID;\n            if (childDocID > parentDocID) {\n              break;\n            }\n\n            switch (selection) {\n            case MIN:\n              value = Math.min(value, values.longValue());\n              break;\n            case MAX:\n              value = Math.max(value, values.longValue());\n              break;\n            default:\n              throw new AssertionError();\n            }\n          }\n\n          break;\n        }\n\n        return parentDocID;\n      }\n\n      @Override\n      public int advance(int targetParentDocID) throws IOException {\n        if (targetParentDocID <= parentDocID) {\n          throw new IllegalArgumentException(\"target must be after the current document: current=\" + parentDocID + \" target=\" + targetParentDocID);\n        }\n\n        if (targetParentDocID == 0) {\n          return nextDoc();\n        }\n        \n        int firstChild = parents.prevSetBit(targetParentDocID - 1) + 1;\n        if (values.advance(firstChild) == NO_MORE_DOCS) {\n          parentDocID = NO_MORE_DOCS;\n          return parentDocID;\n        } else {\n          return nextDoc();\n        }\n      }\n\n      @Override\n      public boolean advanceExact(int targetParentDocID) throws IOException {\n        if (targetParentDocID <= parentDocID) {\n          throw new IllegalArgumentException(\"target must be after the current document: current=\" + parentDocID + \" target=\" + targetParentDocID);\n        }\n        parentDocID = targetParentDocID;\n        if (parents.get(targetParentDocID) == false) {\n          return false;\n        }\n        int prevParentDocId = parentDocID == 0 ? -1 : parents.prevSetBit(parentDocID - 1);\n        int childDoc = values.docID();\n        if (childDoc <= prevParentDocId) {\n          childDoc = values.advance(prevParentDocId + 1);\n        }\n        if (childDoc >= parentDocID) {\n          return false;\n        }\n        \n        boolean hasValue = false;\n        for (int doc = values.docID(); doc < parentDocID; doc = values.nextDoc()) {\n          if (children.get(doc)) {\n            value = values.longValue();\n            hasValue = true;\n            values.nextDoc();\n            break;\n          }\n        }\n        if (hasValue == false) {\n          return false;\n        }\n\n        for (int doc = values.docID(); doc < parentDocID; doc = values.nextDoc()) {\n          if (children.get(doc)) {\n            switch (selection) {\n              case MIN:\n                value = Math.min(value, values.longValue());\n                break;\n              case MAX:\n                value = Math.max(value, values.longValue());\n                break;\n              default:\n                throw new AssertionError();\n            }\n          }\n        }\n        return true;\n      }\n\n      @Override\n      public long longValue() {\n        return value;\n      }\n      \n      @Override\n      public int docID() {\n        return parentDocID;\n      }      \n\n      @Override\n      public long cost() {\n        return values.cost();\n      }      \n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(NumericDocValues,Type,BitSet,BitSet).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(NumericDocValues,Type,BitSet,BitSet).mjava","sourceNew":"  /** Wraps the provided {@link NumericDocValues}, iterating over only\n   *  child documents, in order to only select one value per parent among\n   *  its {@code children} using the configured {@code selection} type. */\n  @Deprecated\n  public static NumericDocValues wrap(final NumericDocValues values, Type selection, BitSet parents, BitSet children) {\n    return wrap(values,selection, parents, toIter(children));\n  }\n\n","sourceOld":"  /** Wraps the provided {@link NumericDocValues}, iterating over only\n   *  child documents, in order to only select one value per parent among\n   *  its {@code children} using the configured {@code selection} type. */\n  public static NumericDocValues wrap(final NumericDocValues values, Type selection, BitSet parents, BitSet children) {\n    return new NumericDocValues() {\n\n      private int parentDocID = -1;\n      private long value;\n\n      @Override\n      public int nextDoc() throws IOException {\n\n        if (parentDocID == -1) {\n          values.nextDoc();\n        }\n\n        while (true) {\n\n          // TODO: make this crazy loop more efficient\n\n          int childDocID = values.docID();\n          if (childDocID == NO_MORE_DOCS) {\n            parentDocID = NO_MORE_DOCS;\n            return parentDocID;\n          }\n          if (children.get(childDocID) == false) {\n            values.nextDoc();\n            continue;\n          }\n\n          assert parents.get(childDocID) == false;\n        \n          parentDocID = parents.nextSetBit(childDocID);\n          value = values.longValue();\n\n          while (true) {\n            childDocID = values.nextDoc();\n            assert childDocID != parentDocID;\n            if (childDocID > parentDocID) {\n              break;\n            }\n\n            switch (selection) {\n            case MIN:\n              value = Math.min(value, values.longValue());\n              break;\n            case MAX:\n              value = Math.max(value, values.longValue());\n              break;\n            default:\n              throw new AssertionError();\n            }\n          }\n\n          break;\n        }\n\n        return parentDocID;\n      }\n\n      @Override\n      public int advance(int targetParentDocID) throws IOException {\n        if (targetParentDocID <= parentDocID) {\n          throw new IllegalArgumentException(\"target must be after the current document: current=\" + parentDocID + \" target=\" + targetParentDocID);\n        }\n\n        if (targetParentDocID == 0) {\n          return nextDoc();\n        }\n        \n        int firstChild = parents.prevSetBit(targetParentDocID - 1) + 1;\n        if (values.advance(firstChild) == NO_MORE_DOCS) {\n          parentDocID = NO_MORE_DOCS;\n          return parentDocID;\n        } else {\n          return nextDoc();\n        }\n      }\n\n      @Override\n      public boolean advanceExact(int targetParentDocID) throws IOException {\n        if (targetParentDocID <= parentDocID) {\n          throw new IllegalArgumentException(\"target must be after the current document: current=\" + parentDocID + \" target=\" + targetParentDocID);\n        }\n        parentDocID = targetParentDocID;\n        if (parents.get(targetParentDocID) == false) {\n          return false;\n        }\n        int prevParentDocId = parentDocID == 0 ? -1 : parents.prevSetBit(parentDocID - 1);\n        int childDoc = values.docID();\n        if (childDoc <= prevParentDocId) {\n          childDoc = values.advance(prevParentDocId + 1);\n        }\n        if (childDoc >= parentDocID) {\n          return false;\n        }\n        \n        boolean hasValue = false;\n        for (int doc = values.docID(); doc < parentDocID; doc = values.nextDoc()) {\n          if (children.get(doc)) {\n            value = values.longValue();\n            hasValue = true;\n            values.nextDoc();\n            break;\n          }\n        }\n        if (hasValue == false) {\n          return false;\n        }\n\n        for (int doc = values.docID(); doc < parentDocID; doc = values.nextDoc()) {\n          if (children.get(doc)) {\n            switch (selection) {\n              case MIN:\n                value = Math.min(value, values.longValue());\n                break;\n              case MAX:\n                value = Math.max(value, values.longValue());\n                break;\n              default:\n                throw new AssertionError();\n            }\n          }\n        }\n        return true;\n      }\n\n      @Override\n      public long longValue() {\n        return value;\n      }\n      \n      @Override\n      public int docID() {\n        return parentDocID;\n      }      \n\n      @Override\n      public long cost() {\n        return values.cost();\n      }      \n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"11134e449dabe11d6d0ff6a564d84b82cbe93722":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"30c8e5574b55d57947e989443dfde611646530ee":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76","181db58a040d7aebaeb7a74578bd9b9aa603af6c"],"181db58a040d7aebaeb7a74578bd9b9aa603af6c":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","11134e449dabe11d6d0ff6a564d84b82cbe93722"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["181db58a040d7aebaeb7a74578bd9b9aa603af6c"]},"commit2Childs":{"11134e449dabe11d6d0ff6a564d84b82cbe93722":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["11134e449dabe11d6d0ff6a564d84b82cbe93722","d2714c85633b642b29871cf5ff8d17d3ba7bfd76","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"30c8e5574b55d57947e989443dfde611646530ee":[],"181db58a040d7aebaeb7a74578bd9b9aa603af6c":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","30c8e5574b55d57947e989443dfde611646530ee","181db58a040d7aebaeb7a74578bd9b9aa603af6c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}