{"path":"lucene/core/src/java/org/apache/lucene/util/Sorter#mergeInPlace(int,int,int).mjava","commits":[{"id":"dcc555744b1a581a4beccd0b75f8d3fe49735a2f","date":1367588265,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/Sorter#mergeInPlace(int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  void mergeInPlace(int from, int mid, int to) {\n    if (from == mid || mid == to || compare(mid - 1, mid) <= 0) {\n      return;\n    } else if (to - from == 2) {\n      swap(mid - 1, mid);\n      return;\n    }\n    while (compare(from, mid) <= 0) {\n      ++from;\n    }\n    while (compare(mid - 1, to - 1) <= 0) {\n      --to;\n    }\n    int first_cut, second_cut;\n    int len11, len22;\n    if (mid - from > to - mid) {\n      len11 = (mid - from) >>> 1;\n      first_cut = from + len11;\n      second_cut = lower(mid, to, first_cut);\n      len22 = second_cut - mid;\n    } else {\n      len22 = (to - mid) >>> 1;\n      second_cut = mid + len22;\n      first_cut = upper(from, mid, second_cut);\n      len11 = first_cut - from;\n    }\n    rotate( first_cut, mid, second_cut);\n    final int new_mid = first_cut + len22;\n    mergeInPlace(from, first_cut, new_mid);\n    mergeInPlace(new_mid, second_cut, to);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55e188680f3bce683e406acfb4e3de15f1fff2b6","date":1368480368,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/Sorter#mergeInPlace(int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/Sorter#mergeInPlace(int,int,int).mjava","sourceNew":"  void mergeInPlace(int from, int mid, int to) {\n    if (from == mid || mid == to || compare(mid - 1, mid) <= 0) {\n      return;\n    } else if (to - from == 2) {\n      swap(mid - 1, mid);\n      return;\n    }\n    while (compare(from, mid) <= 0) {\n      ++from;\n    }\n    while (compare(mid - 1, to - 1) <= 0) {\n      --to;\n    }\n    int first_cut, second_cut;\n    int len11, len22;\n    if (mid - from > to - mid) {\n      len11 = (mid - from) >>> 1;\n      first_cut = from + len11;\n      second_cut = lower(mid, to, first_cut);\n      len22 = second_cut - mid;\n    } else {\n      len22 = (to - mid) >>> 1;\n      second_cut = mid + len22;\n      first_cut = upper(from, mid, second_cut);\n      len11 = first_cut - from;\n    }\n    rotate(first_cut, mid, second_cut);\n    final int new_mid = first_cut + len22;\n    mergeInPlace(from, first_cut, new_mid);\n    mergeInPlace(new_mid, second_cut, to);\n  }\n\n","sourceOld":"  void mergeInPlace(int from, int mid, int to) {\n    if (from == mid || mid == to || compare(mid - 1, mid) <= 0) {\n      return;\n    } else if (to - from == 2) {\n      swap(mid - 1, mid);\n      return;\n    }\n    while (compare(from, mid) <= 0) {\n      ++from;\n    }\n    while (compare(mid - 1, to - 1) <= 0) {\n      --to;\n    }\n    int first_cut, second_cut;\n    int len11, len22;\n    if (mid - from > to - mid) {\n      len11 = (mid - from) >>> 1;\n      first_cut = from + len11;\n      second_cut = lower(mid, to, first_cut);\n      len22 = second_cut - mid;\n    } else {\n      len22 = (to - mid) >>> 1;\n      second_cut = mid + len22;\n      first_cut = upper(from, mid, second_cut);\n      len11 = first_cut - from;\n    }\n    rotate( first_cut, mid, second_cut);\n    final int new_mid = first_cut + len22;\n    mergeInPlace(from, first_cut, new_mid);\n    mergeInPlace(new_mid, second_cut, to);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55e188680f3bce683e406acfb4e3de15f1fff2b6":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["55e188680f3bce683e406acfb4e3de15f1fff2b6"]},"commit2Childs":{"55e188680f3bce683e406acfb4e3de15f1fff2b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["55e188680f3bce683e406acfb4e3de15f1fff2b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}