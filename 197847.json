{"path":"solr/core/src/test/org/apache/solr/analysis/TestSynonymFilterFactory#testSynonymsOld().mjava","commits":[{"id":"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","date":1310389132,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestSynonymFilterFactory#testSynonymsOld().mjava","pathOld":"/dev/null","sourceNew":"  /** test that we can parse and use the solr syn file, with the old impl\n   * @deprecated Remove this test in Lucene 5.0 */\n  @Deprecated\n  public void testSynonymsOld() throws Exception {\n    SynonymFilterFactory factory = new SynonymFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"luceneMatchVersion\", Version.LUCENE_33.toString());\n    args.put(\"synonyms\", \"synonyms.txt\");\n    factory.init(args);\n    factory.inform(new SolrResourceLoader(null, null));\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"GB\"), MockTokenizer.WHITESPACE, false));\n    assertTrue(ts instanceof SlowSynonymFilter);\n    assertTokenStreamContents(ts, \n        new String[] { \"GB\", \"gib\", \"gigabyte\", \"gigabytes\" },\n        new int[] { 1, 0, 0, 0 });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6d3ad4230a9094e97925f9395cf6db4729284d9","date":1335503918,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestSynonymFilterFactory#testSynonymsOld().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestSynonymFilterFactory#testSynonymsOld().mjava","sourceNew":"  /** test that we can parse and use the solr syn file, with the old impl\n   * @deprecated Remove this test in Lucene 5.0 */\n  @Deprecated\n  public void testSynonymsOld() throws Exception {\n    SynonymFilterFactory factory = new SynonymFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"synonyms\", \"synonyms.txt\");\n    factory.setLuceneMatchVersion(Version.LUCENE_33);\n    factory.init(args);\n    factory.inform(new SolrResourceLoader(null, null));\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"GB\"), MockTokenizer.WHITESPACE, false));\n    assertTrue(ts instanceof SlowSynonymFilter);\n    assertTokenStreamContents(ts, \n        new String[] { \"GB\", \"gib\", \"gigabyte\", \"gigabytes\" },\n        new int[] { 1, 0, 0, 0 });\n  }\n\n","sourceOld":"  /** test that we can parse and use the solr syn file, with the old impl\n   * @deprecated Remove this test in Lucene 5.0 */\n  @Deprecated\n  public void testSynonymsOld() throws Exception {\n    SynonymFilterFactory factory = new SynonymFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"luceneMatchVersion\", Version.LUCENE_33.toString());\n    args.put(\"synonyms\", \"synonyms.txt\");\n    factory.init(args);\n    factory.inform(new SolrResourceLoader(null, null));\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"GB\"), MockTokenizer.WHITESPACE, false));\n    assertTrue(ts instanceof SlowSynonymFilter);\n    assertTokenStreamContents(ts, \n        new String[] { \"GB\", \"gib\", \"gigabyte\", \"gigabytes\" },\n        new int[] { 1, 0, 0, 0 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestSynonymFilterFactory#testSynonymsOld().mjava","sourceNew":null,"sourceOld":"  /** test that we can parse and use the solr syn file, with the old impl\n   * @deprecated Remove this test in Lucene 5.0 */\n  @Deprecated\n  public void testSynonymsOld() throws Exception {\n    SynonymFilterFactory factory = new SynonymFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"synonyms\", \"synonyms.txt\");\n    factory.setLuceneMatchVersion(Version.LUCENE_33);\n    factory.init(args);\n    factory.inform(new SolrResourceLoader(null, null));\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"GB\"), MockTokenizer.WHITESPACE, false));\n    assertTrue(ts instanceof SlowSynonymFilter);\n    assertTokenStreamContents(ts, \n        new String[] { \"GB\", \"gib\", \"gigabyte\", \"gigabytes\" },\n        new int[] { 1, 0, 0, 0 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["d6d3ad4230a9094e97925f9395cf6db4729284d9"],"d6d3ad4230a9094e97925f9395cf6db4729284d9":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"]},"commit2Childs":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6d3ad4230a9094e97925f9395cf6db4729284d9":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["d6d3ad4230a9094e97925f9395cf6db4729284d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}