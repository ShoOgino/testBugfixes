{"path":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = context.replaceTokens(fld.get(FORMAT_STYLE));\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        Locale locale = null;\n        String localeStr = context.replaceTokens(fld.get(LOCALE));\n        if (srcCol == null)\n          srcCol = column;\n        if (localeStr != null) {\n          Matcher matcher = localeRegex.matcher(localeStr);\n          if (matcher.find() && matcher.groupCount() == 2) {\n            locale = new Locale(matcher.group(1), matcher.group(2));\n          } else {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified for field: \" + fld);\n          }\n        } else {\n          locale = Locale.getDefault();\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase();\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = context.replaceTokens(fld.get(FORMAT_STYLE));\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        Locale locale = null;\n        String localeStr = context.replaceTokens(fld.get(LOCALE));\n        if (srcCol == null)\n          srcCol = column;\n        if (localeStr != null) {\n          Matcher matcher = localeRegex.matcher(localeStr);\n          if (matcher.find() && matcher.groupCount() == 2) {\n            locale = new Locale(matcher.group(1), matcher.group(2));\n          } else {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified for field: \" + fld);\n          }\n        } else {\n          locale = Locale.getDefault();\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase();\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = context.replaceTokens(fld.get(FORMAT_STYLE));\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        Locale locale = null;\n        String localeStr = context.replaceTokens(fld.get(LOCALE));\n        if (srcCol == null)\n          srcCol = column;\n        if (localeStr != null) {\n          Matcher matcher = localeRegex.matcher(localeStr);\n          if (matcher.find() && matcher.groupCount() == 2) {\n            locale = new Locale(matcher.group(1), matcher.group(2));\n          } else {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified for field: \" + fld);\n          }\n        } else {\n          locale = Locale.getDefault();\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase();\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = context.replaceTokens(fld.get(FORMAT_STYLE));\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        Locale locale = null;\n        String localeStr = context.replaceTokens(fld.get(LOCALE));\n        if (srcCol == null)\n          srcCol = column;\n        if (localeStr != null) {\n          Matcher matcher = localeRegex.matcher(localeStr);\n          if (matcher.find() && matcher.groupCount() == 2) {\n            locale = new Locale(matcher.group(1), matcher.group(2));\n          } else {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified for field: \" + fld);\n          }\n        } else {\n          locale = Locale.getDefault();\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase();\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = context.replaceTokens(fld.get(FORMAT_STYLE));\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        Locale locale = null;\n        String localeStr = context.replaceTokens(fld.get(LOCALE));\n        if (srcCol == null)\n          srcCol = column;\n        if (localeStr != null) {\n          Matcher matcher = localeRegex.matcher(localeStr);\n          if (matcher.find() && matcher.groupCount() == 2) {\n            locale = new Locale(matcher.group(1), matcher.group(2));\n          } else {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified for field: \" + fld);\n          }\n        } else {\n          locale = Locale.getDefault();\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase();\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b375ac28473e1310fa9ea99d95e9c6001e3719d5","date":1274116690,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = context.replaceTokens(fld.get(FORMAT_STYLE));\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        Locale locale = null;\n        String localeStr = context.replaceTokens(fld.get(LOCALE));\n        if (srcCol == null)\n          srcCol = column;\n        if (localeStr != null) {\n          Matcher matcher = localeRegex.matcher(localeStr);\n          if (matcher.find() && matcher.groupCount() == 2) {\n            locale = new Locale(matcher.group(1), matcher.group(2));\n          } else {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified for field: \" + fld);\n          }\n        } else {\n          locale = Locale.getDefault();\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase(Locale.ENGLISH);\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = context.replaceTokens(fld.get(FORMAT_STYLE));\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        Locale locale = null;\n        String localeStr = context.replaceTokens(fld.get(LOCALE));\n        if (srcCol == null)\n          srcCol = column;\n        if (localeStr != null) {\n          Matcher matcher = localeRegex.matcher(localeStr);\n          if (matcher.find() && matcher.groupCount() == 2) {\n            locale = new Locale(matcher.group(1), matcher.group(2));\n          } else {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified for field: \" + fld);\n          }\n        } else {\n          locale = Locale.getDefault();\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase();\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = context.replaceTokens(fld.get(FORMAT_STYLE));\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        Locale locale = null;\n        String localeStr = context.replaceTokens(fld.get(LOCALE));\n        if (srcCol == null)\n          srcCol = column;\n        if (localeStr != null) {\n          Matcher matcher = localeRegex.matcher(localeStr);\n          if (matcher.find() && matcher.groupCount() == 2) {\n            locale = new Locale(matcher.group(1), matcher.group(2));\n          } else {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified for field: \" + fld);\n          }\n        } else {\n          locale = Locale.getDefault();\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase(Locale.ENGLISH);\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = context.replaceTokens(fld.get(FORMAT_STYLE));\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        Locale locale = null;\n        String localeStr = context.replaceTokens(fld.get(LOCALE));\n        if (srcCol == null)\n          srcCol = column;\n        if (localeStr != null) {\n          Matcher matcher = localeRegex.matcher(localeStr);\n          if (matcher.find() && matcher.groupCount() == 2) {\n            locale = new Locale(matcher.group(1), matcher.group(2));\n          } else {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified for field: \" + fld);\n          }\n        } else {\n          locale = Locale.getDefault();\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase(Locale.ENGLISH);\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = context.replaceTokens(fld.get(FORMAT_STYLE));\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        Locale locale = null;\n        String localeStr = context.replaceTokens(fld.get(LOCALE));\n        if (srcCol == null)\n          srcCol = column;\n        if (localeStr != null) {\n          Matcher matcher = localeRegex.matcher(localeStr);\n          if (matcher.find() && matcher.groupCount() == 2) {\n            locale = new Locale(matcher.group(1), matcher.group(2));\n          } else {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified for field: \" + fld);\n          }\n        } else {\n          locale = Locale.getDefault();\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase(Locale.ENGLISH);\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = context.replaceTokens(fld.get(FORMAT_STYLE));\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        Locale locale = null;\n        String localeStr = context.replaceTokens(fld.get(LOCALE));\n        if (srcCol == null)\n          srcCol = column;\n        if (localeStr != null) {\n          Matcher matcher = localeRegex.matcher(localeStr);\n          if (matcher.find() && matcher.groupCount() == 2) {\n            locale = new Locale(matcher.group(1), matcher.group(2));\n          } else {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified for field: \" + fld);\n          }\n        } else {\n          locale = Locale.getDefault();\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase(Locale.ENGLISH);\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = context.replaceTokens(fld.get(FORMAT_STYLE));\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        Locale locale = null;\n        String localeStr = context.replaceTokens(fld.get(LOCALE));\n        if (srcCol == null)\n          srcCol = column;\n        if (localeStr != null) {\n          Matcher matcher = localeRegex.matcher(localeStr);\n          if (matcher.find() && matcher.groupCount() == 2) {\n            locale = new Locale(matcher.group(1), matcher.group(2));\n          } else {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified for field: \" + fld);\n          }\n        } else {\n          locale = Locale.getDefault();\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase(Locale.ENGLISH);\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = context.replaceTokens(fld.get(FORMAT_STYLE));\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        Locale locale = null;\n        String localeStr = context.replaceTokens(fld.get(LOCALE));\n        if (srcCol == null)\n          srcCol = column;\n        if (localeStr != null) {\n          Matcher matcher = localeRegex.matcher(localeStr);\n          if (matcher.find() && matcher.groupCount() == 2) {\n            locale = new Locale(matcher.group(1), matcher.group(2));\n          } else {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified for field: \" + fld);\n          }\n        } else {\n          locale = Locale.getDefault();\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase(Locale.ENGLISH);\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = context.replaceTokens(fld.get(FORMAT_STYLE));\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        Locale locale = null;\n        String localeStr = context.replaceTokens(fld.get(LOCALE));\n        if (srcCol == null)\n          srcCol = column;\n        if (localeStr != null) {\n          Matcher matcher = localeRegex.matcher(localeStr);\n          if (matcher.find() && matcher.groupCount() == 2) {\n            locale = new Locale(matcher.group(1), matcher.group(2));\n          } else {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified for field: \" + fld);\n          }\n        } else {\n          locale = Locale.getDefault();\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase(Locale.ENGLISH);\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = context.replaceTokens(fld.get(FORMAT_STYLE));\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        Locale locale = null;\n        String localeStr = context.replaceTokens(fld.get(LOCALE));\n        if (srcCol == null)\n          srcCol = column;\n        if (localeStr != null) {\n          Matcher matcher = localeRegex.matcher(localeStr);\n          if (matcher.find() && matcher.groupCount() == 2) {\n            locale = new Locale(matcher.group(1), matcher.group(2));\n          } else {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified for field: \" + fld);\n          }\n        } else {\n          locale = Locale.getDefault();\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase(Locale.ENGLISH);\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/NumberFormatTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = context.replaceTokens(fld.get(FORMAT_STYLE));\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        Locale locale = null;\n        String localeStr = context.replaceTokens(fld.get(LOCALE));\n        if (srcCol == null)\n          srcCol = column;\n        if (localeStr != null) {\n          Matcher matcher = localeRegex.matcher(localeStr);\n          if (matcher.find() && matcher.groupCount() == 2) {\n            locale = new Locale(matcher.group(1), matcher.group(2));\n          } else {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified for field: \" + fld);\n          }\n        } else {\n          locale = Locale.getDefault();\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase(Locale.ENGLISH);\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n    for (Map<String, String> fld : context.getAllEntityFields()) {\n      String style = context.replaceTokens(fld.get(FORMAT_STYLE));\n      if (style != null) {\n        String column = fld.get(DataImporter.COLUMN);\n        String srcCol = fld.get(RegexTransformer.SRC_COL_NAME);\n        Locale locale = null;\n        String localeStr = context.replaceTokens(fld.get(LOCALE));\n        if (srcCol == null)\n          srcCol = column;\n        if (localeStr != null) {\n          Matcher matcher = localeRegex.matcher(localeStr);\n          if (matcher.find() && matcher.groupCount() == 2) {\n            locale = new Locale(matcher.group(1), matcher.group(2));\n          } else {\n            throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid Locale specified for field: \" + fld);\n          }\n        } else {\n          locale = Locale.getDefault();\n        }\n\n        Object val = row.get(srcCol);\n        String styleSmall = style.toLowerCase(Locale.ENGLISH);\n\n        if (val instanceof List) {\n          List<String> inputs = (List) val;\n          List results = new ArrayList();\n          for (String input : inputs) {\n            try {\n              results.add(process(input, styleSmall, locale));\n            } catch (ParseException e) {\n              throw new DataImportHandlerException(\n                      DataImportHandlerException.SEVERE,\n                      \"Failed to apply NumberFormat on column: \" + column, e);\n            }\n          }\n          row.put(column, results);\n        } else {\n          if (val == null || val.toString().trim().equals(\"\"))\n            continue;\n          try {\n            row.put(column, process(val.toString(), styleSmall, locale));\n          } catch (ParseException e) {\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE,\n                    \"Failed to apply NumberFormat on column: \" + column, e);\n          }\n        }\n      }\n    }\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["b375ac28473e1310fa9ea99d95e9c6001e3719d5"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["b375ac28473e1310fa9ea99d95e9c6001e3719d5","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b375ac28473e1310fa9ea99d95e9c6001e3719d5":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["b375ac28473e1310fa9ea99d95e9c6001e3719d5","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["c26f00b574427b55127e869b935845554afde1fa","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"1da8d55113b689b06716246649de6f62430f15c0":["b375ac28473e1310fa9ea99d95e9c6001e3719d5"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"b375ac28473e1310fa9ea99d95e9c6001e3719d5":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}