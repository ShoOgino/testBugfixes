{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient#ConcurrentUpdateSolrClient(String,HttpClient,int,int,ExecutorService,boolean).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient#ConcurrentUpdateSolrClient(String,HttpClient,int,int,ExecutorService,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Uses the supplied HttpClient to send documents to the Solr server.\n   */\n  public ConcurrentUpdateSolrClient(String solrServerUrl,\n                                    HttpClient client, int queueSize, int threadCount, ExecutorService es, boolean streamDeletes) {\n    this.client = new HttpSolrClient(solrServerUrl, client);\n    this.client.setFollowRedirects(false);\n    queue = new LinkedBlockingQueue<>(queueSize);\n    this.threadCount = threadCount;\n    runners = new LinkedList<>();\n    scheduler = es;\n    this.streamDeletes = streamDeletes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c07dc645ff236a7d51da2a5ef49a948dfbf8610c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient#ConcurrentUpdateSolrClient(String,HttpClient,int,int,ExecutorService,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient#ConcurrentUpdateSolrClient(String,HttpClient,int,int,ExecutorService,boolean).mjava","sourceNew":"  /**\n   * Uses the supplied HttpClient to send documents to the Solr server.\n   * \n   * @deprecated use {@link Builder} instead.  This will soon be a\n   * protected method, and will only be available for use in implementing subclasses.\n   */\n  @Deprecated\n  public ConcurrentUpdateSolrClient(String solrServerUrl,\n                                    HttpClient client, int queueSize, int threadCount, ExecutorService es, boolean streamDeletes) {\n    this.internalHttpClient = (client == null);\n    this.client = new HttpSolrClient.Builder(solrServerUrl)\n        .withHttpClient(client)\n        .build();\n    this.client.setFollowRedirects(false);\n    queue = new LinkedBlockingQueue<>(queueSize);\n    this.threadCount = threadCount;\n    runners = new LinkedList<>();\n    this.streamDeletes = streamDeletes;\n    \n    if (es != null) {\n      scheduler = es;\n      shutdownExecutor = false;\n    } else {\n      scheduler = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"concurrentUpdateScheduler\"));\n      shutdownExecutor = true;\n    }\n  }\n\n","sourceOld":"  /**\n   * Uses the supplied HttpClient to send documents to the Solr server.\n   */\n  public ConcurrentUpdateSolrClient(String solrServerUrl,\n                                    HttpClient client, int queueSize, int threadCount, ExecutorService es, boolean streamDeletes) {\n    this.client = new HttpSolrClient(solrServerUrl, client);\n    this.client.setFollowRedirects(false);\n    queue = new LinkedBlockingQueue<>(queueSize);\n    this.threadCount = threadCount;\n    runners = new LinkedList<>();\n    scheduler = es;\n    this.streamDeletes = streamDeletes;\n  }\n\n","bugFix":null,"bugIntro":["c07dc645ff236a7d51da2a5ef49a948dfbf8610c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient#ConcurrentUpdateSolrClient(String,HttpClient,int,int,ExecutorService,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient#ConcurrentUpdateSolrClient(String,HttpClient,int,int,ExecutorService,boolean).mjava","sourceNew":"  /**\n   * Uses the supplied HttpClient to send documents to the Solr server.\n   * \n   * @deprecated use {@link Builder} instead.  This will soon be a\n   * protected method, and will only be available for use in implementing subclasses.\n   */\n  @Deprecated\n  public ConcurrentUpdateSolrClient(String solrServerUrl,\n                                    HttpClient client, int queueSize, int threadCount, ExecutorService es, boolean streamDeletes) {\n    this.internalHttpClient = (client == null);\n    this.client = new HttpSolrClient.Builder(solrServerUrl)\n        .withHttpClient(client)\n        .build();\n    this.client.setFollowRedirects(false);\n    queue = new LinkedBlockingQueue<>(queueSize);\n    this.threadCount = threadCount;\n    runners = new LinkedList<>();\n    this.streamDeletes = streamDeletes;\n    \n    if (es != null) {\n      scheduler = es;\n      shutdownExecutor = false;\n    } else {\n      scheduler = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"concurrentUpdateScheduler\"));\n      shutdownExecutor = true;\n    }\n  }\n\n","sourceOld":"  /**\n   * Uses the supplied HttpClient to send documents to the Solr server.\n   */\n  public ConcurrentUpdateSolrClient(String solrServerUrl,\n                                    HttpClient client, int queueSize, int threadCount, ExecutorService es, boolean streamDeletes) {\n    this.client = new HttpSolrClient(solrServerUrl, client);\n    this.client.setFollowRedirects(false);\n    queue = new LinkedBlockingQueue<>(queueSize);\n    this.threadCount = threadCount;\n    runners = new LinkedList<>();\n    scheduler = es;\n    this.streamDeletes = streamDeletes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7ca1cace44c816965501b934686a2354382f000","date":1487792658,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient#ConcurrentUpdateSolrClient(String,HttpClient,int,int,ExecutorService,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient#ConcurrentUpdateSolrClient(String,HttpClient,int,int,ExecutorService,boolean).mjava","sourceNew":"  /**\n   * Uses the supplied HttpClient to send documents to the Solr server.\n   * \n   * @deprecated use {@link Builder} instead.  This will soon be a\n   * protected method, and will only be available for use in implementing subclasses.\n   */\n  @Deprecated\n  public ConcurrentUpdateSolrClient(String solrServerUrl,\n                                    HttpClient client, int queueSize, int threadCount, ExecutorService es, boolean streamDeletes) {\n    this.internalHttpClient = (client == null);\n    this.client = new HttpSolrClient.Builder(solrServerUrl)\n        .withHttpClient(client)\n        .build();\n    this.client.setFollowRedirects(false);\n    queue = new LinkedBlockingQueue<>(queueSize);\n    this.threadCount = threadCount;\n    runners = new LinkedList<>();\n    this.streamDeletes = streamDeletes;\n    \n    if (es != null) {\n      scheduler = es;\n      shutdownExecutor = false;\n    } else {\n      scheduler = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"concurrentUpdateScheduler\"));\n      shutdownExecutor = true;\n    }\n    \n    if (log.isDebugEnabled()) {\n      pollInterrupts = new AtomicInteger();\n      pollExits = new AtomicInteger();\n      blockLoops = new AtomicInteger();\n      emptyQueueLoops = new AtomicInteger();\n    }\n  }\n\n","sourceOld":"  /**\n   * Uses the supplied HttpClient to send documents to the Solr server.\n   * \n   * @deprecated use {@link Builder} instead.  This will soon be a\n   * protected method, and will only be available for use in implementing subclasses.\n   */\n  @Deprecated\n  public ConcurrentUpdateSolrClient(String solrServerUrl,\n                                    HttpClient client, int queueSize, int threadCount, ExecutorService es, boolean streamDeletes) {\n    this.internalHttpClient = (client == null);\n    this.client = new HttpSolrClient.Builder(solrServerUrl)\n        .withHttpClient(client)\n        .build();\n    this.client.setFollowRedirects(false);\n    queue = new LinkedBlockingQueue<>(queueSize);\n    this.threadCount = threadCount;\n    runners = new LinkedList<>();\n    this.streamDeletes = streamDeletes;\n    \n    if (es != null) {\n      scheduler = es;\n      shutdownExecutor = false;\n    } else {\n      scheduler = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"concurrentUpdateScheduler\"));\n      shutdownExecutor = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":["c07dc645ff236a7d51da2a5ef49a948dfbf8610c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"63a1978c6710c767fa084741e3d6424840003a62","date":1495850671,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient#ConcurrentUpdateSolrClient(String,HttpClient,int,int,ExecutorService,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient#ConcurrentUpdateSolrClient(String,HttpClient,int,int,ExecutorService,boolean).mjava","sourceNew":"  /**\n   * Uses the supplied HttpClient to send documents to the Solr server.\n   */\n  protected ConcurrentUpdateSolrClient(String solrServerUrl,\n                                       HttpClient client, int queueSize, int threadCount,\n                                       ExecutorService es, boolean streamDeletes) {\n    this.internalHttpClient = (client == null);\n    this.client = new HttpSolrClient.Builder(solrServerUrl)\n        .withHttpClient(client)\n        .build();\n    this.client.setFollowRedirects(false);\n    queue = new LinkedBlockingQueue<>(queueSize);\n    this.threadCount = threadCount;\n    runners = new LinkedList<>();\n    this.streamDeletes = streamDeletes;\n    \n    if (es != null) {\n      scheduler = es;\n      shutdownExecutor = false;\n    } else {\n      scheduler = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"concurrentUpdateScheduler\"));\n      shutdownExecutor = true;\n    }\n    \n    if (log.isDebugEnabled()) {\n      pollInterrupts = new AtomicInteger();\n      pollExits = new AtomicInteger();\n      blockLoops = new AtomicInteger();\n      emptyQueueLoops = new AtomicInteger();\n    }\n  }\n\n","sourceOld":"  /**\n   * Uses the supplied HttpClient to send documents to the Solr server.\n   * \n   * @deprecated use {@link Builder} instead.  This will soon be a\n   * protected method, and will only be available for use in implementing subclasses.\n   */\n  @Deprecated\n  public ConcurrentUpdateSolrClient(String solrServerUrl,\n                                    HttpClient client, int queueSize, int threadCount, ExecutorService es, boolean streamDeletes) {\n    this.internalHttpClient = (client == null);\n    this.client = new HttpSolrClient.Builder(solrServerUrl)\n        .withHttpClient(client)\n        .build();\n    this.client.setFollowRedirects(false);\n    queue = new LinkedBlockingQueue<>(queueSize);\n    this.threadCount = threadCount;\n    runners = new LinkedList<>();\n    this.streamDeletes = streamDeletes;\n    \n    if (es != null) {\n      scheduler = es;\n      shutdownExecutor = false;\n    } else {\n      scheduler = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"concurrentUpdateScheduler\"));\n      shutdownExecutor = true;\n    }\n    \n    if (log.isDebugEnabled()) {\n      pollInterrupts = new AtomicInteger();\n      pollExits = new AtomicInteger();\n      blockLoops = new AtomicInteger();\n      emptyQueueLoops = new AtomicInteger();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient#ConcurrentUpdateSolrClient(String,HttpClient,int,int,ExecutorService,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient#ConcurrentUpdateSolrClient(String,HttpClient,int,int,ExecutorService,boolean).mjava","sourceNew":"  /**\n   * Uses the supplied HttpClient to send documents to the Solr server.\n   */\n  protected ConcurrentUpdateSolrClient(String solrServerUrl,\n                                       HttpClient client, int queueSize, int threadCount,\n                                       ExecutorService es, boolean streamDeletes) {\n    this.internalHttpClient = (client == null);\n    this.client = new HttpSolrClient.Builder(solrServerUrl)\n        .withHttpClient(client)\n        .build();\n    this.client.setFollowRedirects(false);\n    queue = new LinkedBlockingQueue<>(queueSize);\n    this.threadCount = threadCount;\n    runners = new LinkedList<>();\n    this.streamDeletes = streamDeletes;\n    \n    if (es != null) {\n      scheduler = es;\n      shutdownExecutor = false;\n    } else {\n      scheduler = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"concurrentUpdateScheduler\"));\n      shutdownExecutor = true;\n    }\n    \n    if (log.isDebugEnabled()) {\n      pollInterrupts = new AtomicInteger();\n      pollExits = new AtomicInteger();\n      blockLoops = new AtomicInteger();\n      emptyQueueLoops = new AtomicInteger();\n    }\n  }\n\n","sourceOld":"  /**\n   * Uses the supplied HttpClient to send documents to the Solr server.\n   * \n   * @deprecated use {@link Builder} instead.  This will soon be a\n   * protected method, and will only be available for use in implementing subclasses.\n   */\n  @Deprecated\n  public ConcurrentUpdateSolrClient(String solrServerUrl,\n                                    HttpClient client, int queueSize, int threadCount, ExecutorService es, boolean streamDeletes) {\n    this.internalHttpClient = (client == null);\n    this.client = new HttpSolrClient.Builder(solrServerUrl)\n        .withHttpClient(client)\n        .build();\n    this.client.setFollowRedirects(false);\n    queue = new LinkedBlockingQueue<>(queueSize);\n    this.threadCount = threadCount;\n    runners = new LinkedList<>();\n    this.streamDeletes = streamDeletes;\n    \n    if (es != null) {\n      scheduler = es;\n      shutdownExecutor = false;\n    } else {\n      scheduler = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"concurrentUpdateScheduler\"));\n      shutdownExecutor = true;\n    }\n    \n    if (log.isDebugEnabled()) {\n      pollInterrupts = new AtomicInteger();\n      pollExits = new AtomicInteger();\n      blockLoops = new AtomicInteger();\n      emptyQueueLoops = new AtomicInteger();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient#ConcurrentUpdateSolrClient(String,HttpClient,int,int,ExecutorService,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient#ConcurrentUpdateSolrClient(String,HttpClient,int,int,ExecutorService,boolean).mjava","sourceNew":"  /**\n   * Uses the supplied HttpClient to send documents to the Solr server.\n   */\n  protected ConcurrentUpdateSolrClient(String solrServerUrl,\n                                       HttpClient client, int queueSize, int threadCount,\n                                       ExecutorService es, boolean streamDeletes) {\n    this.internalHttpClient = (client == null);\n    this.client = new HttpSolrClient.Builder(solrServerUrl)\n        .withHttpClient(client)\n        .build();\n    this.client.setFollowRedirects(false);\n    queue = new LinkedBlockingQueue<>(queueSize);\n    this.threadCount = threadCount;\n    runners = new LinkedList<>();\n    this.streamDeletes = streamDeletes;\n    \n    if (es != null) {\n      scheduler = es;\n      shutdownExecutor = false;\n    } else {\n      scheduler = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"concurrentUpdateScheduler\"));\n      shutdownExecutor = true;\n    }\n    \n    if (log.isDebugEnabled()) {\n      pollInterrupts = new AtomicInteger();\n      pollExits = new AtomicInteger();\n      blockLoops = new AtomicInteger();\n      emptyQueueLoops = new AtomicInteger();\n    }\n  }\n\n","sourceOld":"  /**\n   * Uses the supplied HttpClient to send documents to the Solr server.\n   * \n   * @deprecated use {@link Builder} instead.  This will soon be a\n   * protected method, and will only be available for use in implementing subclasses.\n   */\n  @Deprecated\n  public ConcurrentUpdateSolrClient(String solrServerUrl,\n                                    HttpClient client, int queueSize, int threadCount, ExecutorService es, boolean streamDeletes) {\n    this.internalHttpClient = (client == null);\n    this.client = new HttpSolrClient.Builder(solrServerUrl)\n        .withHttpClient(client)\n        .build();\n    this.client.setFollowRedirects(false);\n    queue = new LinkedBlockingQueue<>(queueSize);\n    this.threadCount = threadCount;\n    runners = new LinkedList<>();\n    this.streamDeletes = streamDeletes;\n    \n    if (es != null) {\n      scheduler = es;\n      shutdownExecutor = false;\n    } else {\n      scheduler = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"concurrentUpdateScheduler\"));\n      shutdownExecutor = true;\n    }\n    \n    if (log.isDebugEnabled()) {\n      pollInterrupts = new AtomicInteger();\n      pollExits = new AtomicInteger();\n      blockLoops = new AtomicInteger();\n      emptyQueueLoops = new AtomicInteger();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c07dc645ff236a7d51da2a5ef49a948dfbf8610c","date":1498242650,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient#ConcurrentUpdateSolrClient(String,HttpClient,int,int,ExecutorService,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient#ConcurrentUpdateSolrClient(String,HttpClient,int,int,ExecutorService,boolean).mjava","sourceNew":"  /**\n   * Uses the supplied HttpClient to send documents to the Solr server.\n   * \n   * @deprecated use {@link ConcurrentUpdateSolrClient#ConcurrentUpdateSolrClient(Builder)} instead, as it is a more extension/subclassing-friendly alternative\n   */\n  @Deprecated\n  protected ConcurrentUpdateSolrClient(String solrServerUrl,\n                                       HttpClient client, int queueSize, int threadCount,\n                                       ExecutorService es, boolean streamDeletes) {\n    this((streamDeletes) ?\n        new Builder(solrServerUrl)\n        .withHttpClient(client)\n        .withQueueSize(queueSize)\n        .withThreadCount(threadCount)\n        .withExecutorService(es)\n        .alwaysStreamDeletes() :\n          new Builder(solrServerUrl)\n          .withHttpClient(client)\n          .withQueueSize(queueSize)\n          .withThreadCount(threadCount)\n          .withExecutorService(es)\n          .neverStreamDeletes());\n  }\n\n","sourceOld":"  /**\n   * Uses the supplied HttpClient to send documents to the Solr server.\n   */\n  protected ConcurrentUpdateSolrClient(String solrServerUrl,\n                                       HttpClient client, int queueSize, int threadCount,\n                                       ExecutorService es, boolean streamDeletes) {\n    this.internalHttpClient = (client == null);\n    this.client = new HttpSolrClient.Builder(solrServerUrl)\n        .withHttpClient(client)\n        .build();\n    this.client.setFollowRedirects(false);\n    queue = new LinkedBlockingQueue<>(queueSize);\n    this.threadCount = threadCount;\n    runners = new LinkedList<>();\n    this.streamDeletes = streamDeletes;\n    \n    if (es != null) {\n      scheduler = es;\n      shutdownExecutor = false;\n    } else {\n      scheduler = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"concurrentUpdateScheduler\"));\n      shutdownExecutor = true;\n    }\n    \n    if (log.isDebugEnabled()) {\n      pollInterrupts = new AtomicInteger();\n      pollExits = new AtomicInteger();\n      blockLoops = new AtomicInteger();\n      emptyQueueLoops = new AtomicInteger();\n    }\n  }\n\n","bugFix":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","c7ca1cace44c816965501b934686a2354382f000","bafca15d8e408346a67f4282ad1143b88023893b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient#ConcurrentUpdateSolrClient(String,HttpClient,int,int,ExecutorService,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient#ConcurrentUpdateSolrClient(String,HttpClient,int,int,ExecutorService,boolean).mjava","sourceNew":"  /**\n   * Uses the supplied HttpClient to send documents to the Solr server.\n   * \n   * @deprecated use {@link ConcurrentUpdateSolrClient#ConcurrentUpdateSolrClient(Builder)} instead, as it is a more extension/subclassing-friendly alternative\n   */\n  @Deprecated\n  protected ConcurrentUpdateSolrClient(String solrServerUrl,\n                                       HttpClient client, int queueSize, int threadCount,\n                                       ExecutorService es, boolean streamDeletes) {\n    this((streamDeletes) ?\n        new Builder(solrServerUrl)\n        .withHttpClient(client)\n        .withQueueSize(queueSize)\n        .withThreadCount(threadCount)\n        .withExecutorService(es)\n        .alwaysStreamDeletes() :\n          new Builder(solrServerUrl)\n          .withHttpClient(client)\n          .withQueueSize(queueSize)\n          .withThreadCount(threadCount)\n          .withExecutorService(es)\n          .neverStreamDeletes());\n  }\n\n","sourceOld":"  /**\n   * Uses the supplied HttpClient to send documents to the Solr server.\n   */\n  protected ConcurrentUpdateSolrClient(String solrServerUrl,\n                                       HttpClient client, int queueSize, int threadCount,\n                                       ExecutorService es, boolean streamDeletes) {\n    this.internalHttpClient = (client == null);\n    this.client = new HttpSolrClient.Builder(solrServerUrl)\n        .withHttpClient(client)\n        .build();\n    this.client.setFollowRedirects(false);\n    queue = new LinkedBlockingQueue<>(queueSize);\n    this.threadCount = threadCount;\n    runners = new LinkedList<>();\n    this.streamDeletes = streamDeletes;\n    \n    if (es != null) {\n      scheduler = es;\n      shutdownExecutor = false;\n    } else {\n      scheduler = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"concurrentUpdateScheduler\"));\n      shutdownExecutor = true;\n    }\n    \n    if (log.isDebugEnabled()) {\n      pollInterrupts = new AtomicInteger();\n      pollExits = new AtomicInteger();\n      blockLoops = new AtomicInteger();\n      emptyQueueLoops = new AtomicInteger();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient#ConcurrentUpdateSolrClient(String,HttpClient,int,int,ExecutorService,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient#ConcurrentUpdateSolrClient(String,HttpClient,int,int,ExecutorService,boolean).mjava","sourceNew":"  /**\n   * Uses the supplied HttpClient to send documents to the Solr server.\n   * \n   * @deprecated use {@link ConcurrentUpdateSolrClient#ConcurrentUpdateSolrClient(Builder)} instead, as it is a more extension/subclassing-friendly alternative\n   */\n  @Deprecated\n  protected ConcurrentUpdateSolrClient(String solrServerUrl,\n                                       HttpClient client, int queueSize, int threadCount,\n                                       ExecutorService es, boolean streamDeletes) {\n    this((streamDeletes) ?\n        new Builder(solrServerUrl)\n        .withHttpClient(client)\n        .withQueueSize(queueSize)\n        .withThreadCount(threadCount)\n        .withExecutorService(es)\n        .alwaysStreamDeletes() :\n          new Builder(solrServerUrl)\n          .withHttpClient(client)\n          .withQueueSize(queueSize)\n          .withThreadCount(threadCount)\n          .withExecutorService(es)\n          .neverStreamDeletes());\n  }\n\n","sourceOld":"  /**\n   * Uses the supplied HttpClient to send documents to the Solr server.\n   */\n  protected ConcurrentUpdateSolrClient(String solrServerUrl,\n                                       HttpClient client, int queueSize, int threadCount,\n                                       ExecutorService es, boolean streamDeletes) {\n    this.internalHttpClient = (client == null);\n    this.client = new HttpSolrClient.Builder(solrServerUrl)\n        .withHttpClient(client)\n        .build();\n    this.client.setFollowRedirects(false);\n    queue = new LinkedBlockingQueue<>(queueSize);\n    this.threadCount = threadCount;\n    runners = new LinkedList<>();\n    this.streamDeletes = streamDeletes;\n    \n    if (es != null) {\n      scheduler = es;\n      shutdownExecutor = false;\n    } else {\n      scheduler = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"concurrentUpdateScheduler\"));\n      shutdownExecutor = true;\n    }\n    \n    if (log.isDebugEnabled()) {\n      pollInterrupts = new AtomicInteger();\n      pollExits = new AtomicInteger();\n      blockLoops = new AtomicInteger();\n      emptyQueueLoops = new AtomicInteger();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["c7ca1cace44c816965501b934686a2354382f000","63a1978c6710c767fa084741e3d6424840003a62"],"63a1978c6710c767fa084741e3d6424840003a62":["c7ca1cace44c816965501b934686a2354382f000"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["bafca15d8e408346a67f4282ad1143b88023893b","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["e9017cf144952056066919f1ebc7897ff9bd71b1","c07dc645ff236a7d51da2a5ef49a948dfbf8610c"],"c7ca1cace44c816965501b934686a2354382f000":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["c7ca1cace44c816965501b934686a2354382f000","63a1978c6710c767fa084741e3d6424840003a62"],"28288370235ed02234a64753cdbf0c6ec096304a":["d1f5728f32a4a256b36cfabd7a2636452f599bb9","c07dc645ff236a7d51da2a5ef49a948dfbf8610c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"c07dc645ff236a7d51da2a5ef49a948dfbf8610c":["63a1978c6710c767fa084741e3d6424840003a62"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"63a1978c6710c767fa084741e3d6424840003a62":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9","c07dc645ff236a7d51da2a5ef49a948dfbf8610c"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["c7ca1cace44c816965501b934686a2354382f000"],"bafca15d8e408346a67f4282ad1143b88023893b":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"c7ca1cace44c816965501b934686a2354382f000":["e9017cf144952056066919f1ebc7897ff9bd71b1","63a1978c6710c767fa084741e3d6424840003a62","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c07dc645ff236a7d51da2a5ef49a948dfbf8610c":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}