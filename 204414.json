{"path":"lucene/core/src/java/org/apache/lucene/util/fst/Util.TopNSearcher#addStartPaths(FST.Arc[T],T,boolean,IntsRefBuilder,float,CharSequence).mjava","commits":[{"id":"8c33f6677a2078739058f81eca1df69d12cd62b0","date":1432799589,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Util.TopNSearcher#addStartPaths(FST.Arc[T],T,boolean,IntsRefBuilder,float,CharSequence).mjava","pathOld":"/dev/null","sourceNew":"    /** Adds all leaving arcs, including 'finished' arc, if\n     *  the node is final, from this node into the queue.  */\n    public void addStartPaths(FST.Arc<T> node, T startOutput, boolean allowEmptyString, IntsRefBuilder input,\n                              float boost, CharSequence context) throws IOException {\n\n      // De-dup NO_OUTPUT since it must be a singleton:\n      if (startOutput.equals(fst.outputs.getNoOutput())) {\n        startOutput = fst.outputs.getNoOutput();\n      }\n\n      FSTPath<T> path = new FSTPath<>(startOutput, node, input, boost, context);\n      fst.readFirstTargetArc(node, path.arc, bytesReader);\n\n      //System.out.println(\"add start paths\");\n\n      // Bootstrap: find the min starting arc\n      while (true) {\n        if (allowEmptyString || path.arc.label != FST.END_LABEL) {\n          addIfCompetitive(path);\n        }\n        if (path.arc.isLast()) {\n          break;\n        }\n        fst.readNextArc(path.arc, bytesReader);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"902a92b60648a8925bfd9bb53a78669cd2ea98fd","date":1487797466,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Util.TopNSearcher#addStartPaths(FST.Arc[T],T,boolean,IntsRefBuilder,float,CharSequence,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Util.TopNSearcher#addStartPaths(FST.Arc[T],T,boolean,IntsRefBuilder,float,CharSequence).mjava","sourceNew":"    /** Adds all leaving arcs, including 'finished' arc, if\n     *  the node is final, from this node into the queue.  */\n    public void addStartPaths(FST.Arc<T> node, T startOutput, boolean allowEmptyString, IntsRefBuilder input,\n                              float boost, CharSequence context, int payload) throws IOException {\n\n      // De-dup NO_OUTPUT since it must be a singleton:\n      if (startOutput.equals(fst.outputs.getNoOutput())) {\n        startOutput = fst.outputs.getNoOutput();\n      }\n\n      FSTPath<T> path = new FSTPath<>(startOutput, node, input, boost, context, payload);\n      fst.readFirstTargetArc(node, path.arc, bytesReader);\n\n      // Bootstrap: find the min starting arc\n      while (true) {\n        if (allowEmptyString || path.arc.label != FST.END_LABEL) {\n          addIfCompetitive(path);\n        }\n        if (path.arc.isLast()) {\n          break;\n        }\n        fst.readNextArc(path.arc, bytesReader);\n      }\n    }\n\n","sourceOld":"    /** Adds all leaving arcs, including 'finished' arc, if\n     *  the node is final, from this node into the queue.  */\n    public void addStartPaths(FST.Arc<T> node, T startOutput, boolean allowEmptyString, IntsRefBuilder input,\n                              float boost, CharSequence context) throws IOException {\n\n      // De-dup NO_OUTPUT since it must be a singleton:\n      if (startOutput.equals(fst.outputs.getNoOutput())) {\n        startOutput = fst.outputs.getNoOutput();\n      }\n\n      FSTPath<T> path = new FSTPath<>(startOutput, node, input, boost, context);\n      fst.readFirstTargetArc(node, path.arc, bytesReader);\n\n      //System.out.println(\"add start paths\");\n\n      // Bootstrap: find the min starting arc\n      while (true) {\n        if (allowEmptyString || path.arc.label != FST.END_LABEL) {\n          addIfCompetitive(path);\n        }\n        if (path.arc.isLast()) {\n          break;\n        }\n        fst.readNextArc(path.arc, bytesReader);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8c33f6677a2078739058f81eca1df69d12cd62b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"902a92b60648a8925bfd9bb53a78669cd2ea98fd":["8c33f6677a2078739058f81eca1df69d12cd62b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["902a92b60648a8925bfd9bb53a78669cd2ea98fd"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c33f6677a2078739058f81eca1df69d12cd62b0"],"8c33f6677a2078739058f81eca1df69d12cd62b0":["902a92b60648a8925bfd9bb53a78669cd2ea98fd"],"902a92b60648a8925bfd9bb53a78669cd2ea98fd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}