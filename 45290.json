{"path":"src/java/org/apache/solr/util/HighlightingUtils#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","commits":[{"id":"af09a11446184597ca824554260a98704507f8a7","date":1157138567,"type":0,"author":"Mike Klaas","isMerge":false,"pathNew":"src/java/org/apache/solr/util/HighlightingUtils#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","pathOld":"/dev/null","sourceNew":"   /**\n    * Return a String array of the fields to be highlighted.\n    * Falls back to the programatic defaults, or the default search field if the list of fields\n    * is not specified in either the handler configuration or the request.\n    * @param query The current Query\n    * @param request The current SolrQueryRequest\n    * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n    */\n   public static String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields)\n   {\n      String fields[] = getParams(request).getParams(FIELDS);\n      \n      // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n      if(emptyArray(fields)) \n      {\n         // use default search field if highlight fieldlist not specified.\n         if (emptyArray(defaultFields)) \n         {\n            fields = new String[]{request.getSchema().getDefaultSearchFieldName()};\n         }  \n         else\n         {\n            fields = defaultFields;\n         }\n      }\n      else if (fields.length == 1)\n      {\n         // if there's a single request/handler value, it may be a space/comma separated list\n         fields = SolrPluginUtils.split(fields[0]);\n      }\n      \n      return fields;\n   }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["33e6ce261fb71637077f5afb0521a898795a4340"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"090f8d702b753c18c64a6fd5fb550596c68861ce","date":1172108327,"type":3,"author":"Mike Klaas","isMerge":false,"pathNew":"src/java/org/apache/solr/util/HighlightingUtils#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","pathOld":"src/java/org/apache/solr/util/HighlightingUtils#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","sourceNew":"   /**\n    * Return a String array of the fields to be highlighted.\n    * Falls back to the programatic defaults, or the default search field if the list of fields\n    * is not specified in either the handler configuration or the request.\n    * @param query The current Query\n    * @param request The current SolrQueryRequest\n    * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n    */\n   public static String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n      String fields[] = getParams(request).getParams(FIELDS);\n      \n      // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n      if(emptyArray(fields)) {\n         // use default search field if highlight fieldlist not specified.\n         if (emptyArray(defaultFields)) {\n            fields = new String[]{request.getSchema().getDefaultSearchFieldName()};\n         }  \n         else {\n            fields = defaultFields;\n         }\n      }\n      else if (fields.length == 1) {\n         // if there's a single request/handler value, it may be a space/comma separated list\n         fields = SolrPluginUtils.split(fields[0]);\n      }\n      \n      return fields;\n   }\n\n","sourceOld":"   /**\n    * Return a String array of the fields to be highlighted.\n    * Falls back to the programatic defaults, or the default search field if the list of fields\n    * is not specified in either the handler configuration or the request.\n    * @param query The current Query\n    * @param request The current SolrQueryRequest\n    * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n    */\n   public static String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields)\n   {\n      String fields[] = getParams(request).getParams(FIELDS);\n      \n      // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n      if(emptyArray(fields)) \n      {\n         // use default search field if highlight fieldlist not specified.\n         if (emptyArray(defaultFields)) \n         {\n            fields = new String[]{request.getSchema().getDefaultSearchFieldName()};\n         }  \n         else\n         {\n            fields = defaultFields;\n         }\n      }\n      else if (fields.length == 1)\n      {\n         // if there's a single request/handler value, it may be a space/comma separated list\n         fields = SolrPluginUtils.split(fields[0]);\n      }\n      \n      return fields;\n   }\n\n","bugFix":null,"bugIntro":["33e6ce261fb71637077f5afb0521a898795a4340"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"33e6ce261fb71637077f5afb0521a898795a4340","date":1238092945,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/util/HighlightingUtils#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","pathOld":"src/java/org/apache/solr/util/HighlightingUtils#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","sourceNew":"   /**\n    * @deprecated use DefaultSolrHighlighter\n    * @see DefaultSolrHighlighter#getHighlightFields\n    */\n   public static String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n     return HIGHLIGHTER.getHighlightFields(query, request, defaultFields);\n   }\n\n","sourceOld":"   /**\n    * Return a String array of the fields to be highlighted.\n    * Falls back to the programatic defaults, or the default search field if the list of fields\n    * is not specified in either the handler configuration or the request.\n    * @param query The current Query\n    * @param request The current SolrQueryRequest\n    * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n    */\n   public static String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n      String fields[] = getParams(request).getParams(FIELDS);\n      \n      // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n      if(emptyArray(fields)) {\n         // use default search field if highlight fieldlist not specified.\n         if (emptyArray(defaultFields)) {\n            fields = new String[]{request.getSchema().getDefaultSearchFieldName()};\n         }  \n         else {\n            fields = defaultFields;\n         }\n      }\n      else if (fields.length == 1) {\n         // if there's a single request/handler value, it may be a space/comma separated list\n         fields = SolrPluginUtils.split(fields[0]);\n      }\n      \n      return fields;\n   }\n\n","bugFix":["090f8d702b753c18c64a6fd5fb550596c68861ce","af09a11446184597ca824554260a98704507f8a7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/HighlightingUtils#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","pathOld":"src/java/org/apache/solr/util/HighlightingUtils#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","sourceNew":"   /**\n    * @deprecated use DefaultSolrHighlighter\n    * @see DefaultSolrHighlighter#getHighlightFields\n    */\n   public static String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n     return HIGHLIGHTER.getHighlightFields(query, request, defaultFields);\n   }\n\n","sourceOld":"   /**\n    * @deprecated use DefaultSolrHighlighter\n    * @see DefaultSolrHighlighter#getHighlightFields\n    */\n   public static String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n     return HIGHLIGHTER.getHighlightFields(query, request, defaultFields);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"33e6ce261fb71637077f5afb0521a898795a4340":["090f8d702b753c18c64a6fd5fb550596c68861ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"af09a11446184597ca824554260a98704507f8a7":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"090f8d702b753c18c64a6fd5fb550596c68861ce":["af09a11446184597ca824554260a98704507f8a7"],"ad94625fb8d088209f46650c8097196fec67f00c":["33e6ce261fb71637077f5afb0521a898795a4340"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"33e6ce261fb71637077f5afb0521a898795a4340":["ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["af09a11446184597ca824554260a98704507f8a7"],"af09a11446184597ca824554260a98704507f8a7":["090f8d702b753c18c64a6fd5fb550596c68861ce"],"090f8d702b753c18c64a6fd5fb550596c68861ce":["33e6ce261fb71637077f5afb0521a898795a4340"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}