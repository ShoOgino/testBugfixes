{"path":"lucene/facet/src/java/org/apache/lucene/facet/enhancements/association/AssociationsPayloadIterator#AssociationsPayloadIterator(IndexReader,String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/enhancements/association/AssociationsPayloadIterator#AssociationsPayloadIterator(IndexReader,String).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/enhancements/association/AssociationsPayloadIterator#AssociationsPayloadIterator(IndexReader,String).mjava","sourceNew":"  /**\n   * Construct a new association-iterator, initializing the inner payload\n   * iterator, with the supplied term and checking whether there are any\n   * associations within the given index\n   * \n   * @param reader\n   *            a reader containing the postings to be iterated\n   * @param field\n   *            the field containing the relevant associations list term\n   */\n  public AssociationsPayloadIterator(IndexReader reader, String field)\n      throws IOException {\n    // Initialize the payloadDecodingIterator\n    associationPayloadIter = new PayloadIntDecodingIterator(\n        reader,\n        // TODO (Facet): should consolidate with AssociationListTokenizer which\n        // uses AssociationEnhancement.getCatTermText()\n        new Term(field, AssociationEnhancement.CATEGORY_LIST_TERM_TEXT),\n        new SimpleIntDecoder());\n\n    // Check whether there are any associations\n    hasAssociations = associationPayloadIter.init();\n\n    ordinalToAssociationMap = new IntToIntMap();\n  }\n\n","sourceOld":"  /**\n   * Construct a new association-iterator, initializing the inner payload\n   * iterator, with the supplied term and checking whether there are any\n   * associations within the given index\n   * \n   * @param reader\n   *            a reader containing the postings to be iterated\n   * @param field\n   *            the field containing the relevant associations list term\n   */\n  public AssociationsPayloadIterator(IndexReader reader, String field)\n      throws IOException {\n    // Initialize the payloadDecodingIterator\n    associationPayloadIter = new PayloadIntDecodingIterator(\n        reader,\n        // TODO (Facet): should consolidate with AssociationListTokenizer which\n        // uses AssociationEnhancement.getCatTermText()\n        new Term(field, AssociationEnhancement.CATEGORY_LIST_TERM_TEXT),\n        new SimpleIntDecoder());\n\n    // Check whether there are any associations\n    hasAssociations = associationPayloadIter.init();\n\n    ordinalToAssociationMap = new IntToIntMap();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a1037d9031f9702ee6912f8751ef1d5320da6d9","date":1357217787,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/enhancements/association/AssociationsPayloadIterator#AssociationsPayloadIterator(IndexReader,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Construct a new association-iterator, initializing the inner payload\n   * iterator, with the supplied term and checking whether there are any\n   * associations within the given index\n   * \n   * @param reader\n   *            a reader containing the postings to be iterated\n   * @param field\n   *            the field containing the relevant associations list term\n   */\n  public AssociationsPayloadIterator(IndexReader reader, String field)\n      throws IOException {\n    // Initialize the payloadDecodingIterator\n    associationPayloadIter = new PayloadIntDecodingIterator(\n        reader,\n        // TODO (Facet): should consolidate with AssociationListTokenizer which\n        // uses AssociationEnhancement.getCatTermText()\n        new Term(field, AssociationEnhancement.CATEGORY_LIST_TERM_TEXT),\n        new SimpleIntDecoder());\n\n    // Check whether there are any associations\n    hasAssociations = associationPayloadIter.init();\n\n    ordinalToAssociationMap = new IntToIntMap();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/enhancements/association/AssociationsPayloadIterator#AssociationsPayloadIterator(IndexReader,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Construct a new association-iterator, initializing the inner payload\n   * iterator, with the supplied term and checking whether there are any\n   * associations within the given index\n   * \n   * @param reader\n   *            a reader containing the postings to be iterated\n   * @param field\n   *            the field containing the relevant associations list term\n   */\n  public AssociationsPayloadIterator(IndexReader reader, String field)\n      throws IOException {\n    // Initialize the payloadDecodingIterator\n    associationPayloadIter = new PayloadIntDecodingIterator(\n        reader,\n        // TODO (Facet): should consolidate with AssociationListTokenizer which\n        // uses AssociationEnhancement.getCatTermText()\n        new Term(field, AssociationEnhancement.CATEGORY_LIST_TERM_TEXT),\n        new SimpleIntDecoder());\n\n    // Check whether there are any associations\n    hasAssociations = associationPayloadIter.init();\n\n    ordinalToAssociationMap = new IntToIntMap();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7a1037d9031f9702ee6912f8751ef1d5320da6d9"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}