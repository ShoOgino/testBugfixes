{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parse(String,Map[String,Object]).mjava","commits":[{"id":"29944148cc0dc98687ff45e8a1eaa937a9bcf9ff","date":1534173061,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parse(String,Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parse(String,Map).mjava","sourceNew":"  Condition parse(String s, Map<String,Object> m) {\n\n    Object expectedVal = null;\n    ComputedType computedType = null;\n    Object val = m.get(s);\n    Type varType = VariableBase.getTagType(s);\n    if (varType.meta.isHidden()) {\n      throwExp(m,\"''{0}'' is not allowed\", varType.tagName);\n    }\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof List) {\n        if (!varType.meta.supportArrayVals()) {\n          throwExp(m, \"array values are not supported for {0}\", conditionName);\n        }\n        expectedVal = readListVal(m, (List) val, varType, conditionName);\n        operand = Operand.IN;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        val = strVal;\n        operand = getOperand(strVal);\n        strVal = strVal.substring(Operand.EQUAL == operand || WILDCARD == operand ? 0 : 1);\n        for (ComputedType t : ComputedType.values()) {\n          String changedVal = t.match(strVal);\n          if (changedVal != null) {\n            computedType = t;\n            strVal = changedVal;\n            if (varType == null || !varType.supportedComputedTypes.contains(computedType)) {\n              throwExp(m,\"''{0}'' is not allowed for variable :  ''{1}''\",t,conditionName);\n            }\n          }\n        }\n        if (computedType == null && ((String) val).charAt(0) == '#' && !varType.wildCards.contains(val)) {\n          throwExp(m, \"''{0}'' is not an allowed value for ''{1}'', supported value is : {2} \", val, conditionName,  varType.wildCards );\n\n        }\n        operand = varType == null ? operand : varType.getOperand(operand, strVal, computedType);\n        expectedVal = validate(s, new Condition(s, strVal, operand, computedType, null), true);\n\n      } else if (val instanceof Number) {\n        operand = Operand.EQUAL;\n        operand = varType.getOperand(operand, val, null);\n        expectedVal = validate(s, new Condition(s, val, operand, null, null), true);\n      }\n      return new Condition(conditionName, expectedVal, operand, computedType, this);\n\n    } catch (IllegalArgumentException iae) {\n      throw iae;\n    } catch (Exception e) {\n      throwExp(m, \"Invalid tag : {0} \",s );\n      return null;\n    }\n  }\n\n","sourceOld":"  Condition parse(String s, Map m) {\n\n    Object expectedVal = null;\n    ComputedType computedType = null;\n    Object val = m.get(s);\n    Type varType = VariableBase.getTagType(s);\n    if (varType.meta.isHidden()) {\n      throw new IllegalArgumentException(formatString(\"''{0}'' is not allowed in a policy rule :  ''{1}''  \", varType.tagName, toJSONString(m)));\n    }\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof List) {\n        if (!varType.meta.supportArrayVals()) {\n          throw new IllegalArgumentException(formatString(\"array values are not supported for {0} in clause {1}\",\n              conditionName, toJSONString(m)));\n        }\n        expectedVal = readListVal(m, (List) val, varType, conditionName);\n        operand = Operand.IN;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        val = strVal;\n        operand = getOperand(strVal);\n        strVal = strVal.substring(Operand.EQUAL == operand || WILDCARD == operand ? 0 : 1);\n        for (ComputedType t : ComputedType.values()) {\n          String changedVal = t.match(strVal);\n          if (changedVal != null) {\n            computedType = t;\n            strVal = changedVal;\n            if (varType == null || !varType.supportedComputedTypes.contains(computedType)) {\n              throw new IllegalArgumentException(formatString(\"''{0}'' is not allowed for variable :  ''{1}'' , in clause : ''{2}'' \",\n                  t, conditionName, toJSONString(m)));\n            }\n          }\n        }\n        if (computedType == null && ((String) val).charAt(0) == '#' && !varType.wildCards.contains(val)) {\n          throw new IllegalArgumentException(formatString(\"''{0}'' is not an allowed value for ''{1}'' , in clause : ''{2}'' . Supported value is : {3}\",\n              val, conditionName, toJSONString(m), varType.wildCards));\n\n        }\n        operand = varType == null ? operand : varType.getOperand(operand, strVal, computedType);\n        expectedVal = validate(s, new Condition(s, strVal, operand, computedType, null), true);\n\n      } else if (val instanceof Number) {\n        operand = Operand.EQUAL;\n        operand = varType.getOperand(operand, val, null);\n        expectedVal = validate(s, new Condition(s, val, operand, null, null), true);\n      }\n      return new Condition(conditionName, expectedVal, operand, computedType, this);\n\n    } catch (IllegalArgumentException iae) {\n      throw iae;\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ddd9a76400512cda8f22bbc69e3d8b85672a91a","date":1559288755,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parse(String,Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parse(String,Map[String,Object]).mjava","sourceNew":"  Condition parse(String s, Map<String, Object> m) {\n\n    Object expectedVal = null;\n    ComputedType computedType = null;\n    Object val = m.get(s);\n    Type varType = VariableBase.getTagType(s);\n    if (varType.meta.isHidden()) {\n      throwExp(m, \"''{0}'' is not allowed\", varType.tagName);\n    }\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof List) {\n        if (!varType.meta.supportArrayVals()) {\n          throwExp(m, \"array values are not supported for {0}\", conditionName);\n        }\n        expectedVal = readListVal(m, (List) val, varType, conditionName);\n        operand = Operand.IN;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        val = strVal;\n        operand = getOperand(strVal);\n        strVal = strVal.substring(Operand.EQUAL == operand || WILDCARD == operand ? 0 : 1);\n        for (ComputedType t : ComputedType.values()) {\n          String changedVal = t.match(strVal);\n          if (changedVal != null) {\n            computedType = t;\n            strVal = changedVal;\n            if (varType == null || !varType.supportedComputedTypes.contains(computedType)) {\n              throwExp(m, \"''{0}'' is not allowed for variable :  ''{1}''\", t, conditionName);\n            }\n          }\n        }\n        if (computedType == null && ((String) val).charAt(0) == '#' && !varType.wildCards.contains(val)) {\n          throwExp(m, \"''{0}'' is not an allowed value for ''{1}'', supported value is : {2} \", val, conditionName, varType.wildCards);\n\n        }\n        operand = varType == null ? operand : varType.getOperand(operand, strVal, computedType);\n        expectedVal = validate(s, new Condition(s, strVal, operand, computedType, null), true);\n\n      } else if (val instanceof Number) {\n        operand = Operand.EQUAL;\n        operand = varType.getOperand(operand, val, null);\n        expectedVal = validate(s, new Condition(s, val, operand, null, null), true);\n      }\n      return new Condition(conditionName, expectedVal, operand, computedType, this);\n\n    } catch (IllegalArgumentException iae) {\n      throw iae;\n    } catch (Exception e) {\n      throwExp(m, \"Invalid tag : {0} \", s);\n      return null;\n    }\n  }\n\n","sourceOld":"  Condition parse(String s, Map<String,Object> m) {\n\n    Object expectedVal = null;\n    ComputedType computedType = null;\n    Object val = m.get(s);\n    Type varType = VariableBase.getTagType(s);\n    if (varType.meta.isHidden()) {\n      throwExp(m,\"''{0}'' is not allowed\", varType.tagName);\n    }\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof List) {\n        if (!varType.meta.supportArrayVals()) {\n          throwExp(m, \"array values are not supported for {0}\", conditionName);\n        }\n        expectedVal = readListVal(m, (List) val, varType, conditionName);\n        operand = Operand.IN;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        val = strVal;\n        operand = getOperand(strVal);\n        strVal = strVal.substring(Operand.EQUAL == operand || WILDCARD == operand ? 0 : 1);\n        for (ComputedType t : ComputedType.values()) {\n          String changedVal = t.match(strVal);\n          if (changedVal != null) {\n            computedType = t;\n            strVal = changedVal;\n            if (varType == null || !varType.supportedComputedTypes.contains(computedType)) {\n              throwExp(m,\"''{0}'' is not allowed for variable :  ''{1}''\",t,conditionName);\n            }\n          }\n        }\n        if (computedType == null && ((String) val).charAt(0) == '#' && !varType.wildCards.contains(val)) {\n          throwExp(m, \"''{0}'' is not an allowed value for ''{1}'', supported value is : {2} \", val, conditionName,  varType.wildCards );\n\n        }\n        operand = varType == null ? operand : varType.getOperand(operand, strVal, computedType);\n        expectedVal = validate(s, new Condition(s, strVal, operand, computedType, null), true);\n\n      } else if (val instanceof Number) {\n        operand = Operand.EQUAL;\n        operand = varType.getOperand(operand, val, null);\n        expectedVal = validate(s, new Condition(s, val, operand, null, null), true);\n      }\n      return new Condition(conditionName, expectedVal, operand, computedType, this);\n\n    } catch (IllegalArgumentException iae) {\n      throw iae;\n    } catch (Exception e) {\n      throwExp(m, \"Invalid tag : {0} \",s );\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58af973abe9f7c0faa777c1a6285fc7f72c171c5","date":1559329541,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parse(String,Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parse(String,Map[String,Object]).mjava","sourceNew":"  Condition parse(String s, Map<String, Object> m) {\n\n    Object expectedVal = null;\n    ComputedType computedType = null;\n    Object val = m.get(s);\n    Type varType = VariableBase.getTagType(s);\n    if (varType.meta.isHidden()) {\n      throwExp(m, \"''{0}'' is not allowed\", varType.tagName);\n    }\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof List) {\n        if (!varType.meta.supportArrayVals()) {\n          throwExp(m, \"array values are not supported for {0}\", conditionName);\n        }\n        expectedVal = readListVal(m, (List) val, varType, conditionName);\n        operand = Operand.IN;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        val = strVal;\n        operand = getOperand(strVal);\n        strVal = strVal.substring(Operand.EQUAL == operand || WILDCARD == operand ? 0 : 1);\n        for (ComputedType t : ComputedType.values()) {\n          String changedVal = t.match(strVal);\n          if (changedVal != null) {\n            computedType = t;\n            strVal = changedVal;\n            if (varType == null || !varType.supportedComputedTypes.contains(computedType)) {\n              throwExp(m, \"''{0}'' is not allowed for variable :  ''{1}''\", t, conditionName);\n            }\n          }\n        }\n        if (computedType == null && ((String) val).charAt(0) == '#' && !varType.wildCards.contains(val)) {\n          throwExp(m, \"''{0}'' is not an allowed value for ''{1}'', supported value is : {2} \", val, conditionName, varType.wildCards);\n\n        }\n        operand = varType == null ? operand : varType.getOperand(operand, strVal, computedType);\n        expectedVal = validate(s, new Condition(s, strVal, operand, computedType, null), true);\n\n      } else if (val instanceof Number) {\n        operand = Operand.EQUAL;\n        operand = varType.getOperand(operand, val, null);\n        expectedVal = validate(s, new Condition(s, val, operand, null, null), true);\n      }\n      return new Condition(conditionName, expectedVal, operand, computedType, this);\n\n    } catch (IllegalArgumentException iae) {\n      throw iae;\n    } catch (Exception e) {\n      throwExp(m, \"Invalid tag : {0} \", s);\n      return null;\n    }\n  }\n\n","sourceOld":"  Condition parse(String s, Map<String,Object> m) {\n\n    Object expectedVal = null;\n    ComputedType computedType = null;\n    Object val = m.get(s);\n    Type varType = VariableBase.getTagType(s);\n    if (varType.meta.isHidden()) {\n      throwExp(m,\"''{0}'' is not allowed\", varType.tagName);\n    }\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof List) {\n        if (!varType.meta.supportArrayVals()) {\n          throwExp(m, \"array values are not supported for {0}\", conditionName);\n        }\n        expectedVal = readListVal(m, (List) val, varType, conditionName);\n        operand = Operand.IN;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        val = strVal;\n        operand = getOperand(strVal);\n        strVal = strVal.substring(Operand.EQUAL == operand || WILDCARD == operand ? 0 : 1);\n        for (ComputedType t : ComputedType.values()) {\n          String changedVal = t.match(strVal);\n          if (changedVal != null) {\n            computedType = t;\n            strVal = changedVal;\n            if (varType == null || !varType.supportedComputedTypes.contains(computedType)) {\n              throwExp(m,\"''{0}'' is not allowed for variable :  ''{1}''\",t,conditionName);\n            }\n          }\n        }\n        if (computedType == null && ((String) val).charAt(0) == '#' && !varType.wildCards.contains(val)) {\n          throwExp(m, \"''{0}'' is not an allowed value for ''{1}'', supported value is : {2} \", val, conditionName,  varType.wildCards );\n\n        }\n        operand = varType == null ? operand : varType.getOperand(operand, strVal, computedType);\n        expectedVal = validate(s, new Condition(s, strVal, operand, computedType, null), true);\n\n      } else if (val instanceof Number) {\n        operand = Operand.EQUAL;\n        operand = varType.getOperand(operand, val, null);\n        expectedVal = validate(s, new Condition(s, val, operand, null, null), true);\n      }\n      return new Condition(conditionName, expectedVal, operand, computedType, this);\n\n    } catch (IllegalArgumentException iae) {\n      throw iae;\n    } catch (Exception e) {\n      throwExp(m, \"Invalid tag : {0} \",s );\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"081849c2756a6c9b9883ab9e332f3f3fcf2f05fa","date":1559549598,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parse(String,Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parse(String,Map[String,Object]).mjava","sourceNew":"  Condition parse(String s, Map<String, Object> m) {\n\n    Object expectedVal = null;\n    ComputedType computedType = null;\n    Object val = m.get(s);\n    Type varType = VariableBase.getTagType(s);\n    if (varType.meta.isHidden()) {\n      throwExp(m, \"''{0}'' is not allowed\", varType.tagName);\n    }\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof List) {\n        if (!varType.meta.supportArrayVals()) {\n          throwExp(m, \"array values are not supported for {0}\", conditionName);\n        }\n        expectedVal = readListVal(m, (List) val, varType, conditionName);\n        operand = Operand.IN;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        val = strVal;\n        operand = getOperand(strVal);\n        strVal = strVal.substring(Operand.EQUAL == operand || WILDCARD == operand ? 0 : 1);\n        for (ComputedType t : ComputedType.values()) {\n          String changedVal = t.match(strVal);\n          if (changedVal != null) {\n            computedType = t;\n            strVal = changedVal;\n            if (varType == null || !varType.supportedComputedTypes.contains(computedType)) {\n              throwExp(m, \"''{0}'' is not allowed for variable :  ''{1}''\", t, conditionName);\n            }\n          }\n        }\n        if (computedType == null && ((String) val).charAt(0) == '#' && !varType.wildCards.contains(val)) {\n          throwExp(m, \"''{0}'' is not an allowed value for ''{1}'', supported value is : {2} \", val, conditionName, varType.wildCards);\n\n        }\n        operand = varType == null ? operand : varType.getOperand(operand, strVal, computedType);\n        expectedVal = validate(s, new Condition(s, strVal, operand, computedType, null), true);\n\n      } else if (val instanceof Number) {\n        operand = Operand.EQUAL;\n        operand = varType.getOperand(operand, val, null);\n        expectedVal = validate(s, new Condition(s, val, operand, null, null), true);\n      }\n      return new Condition(conditionName, expectedVal, operand, computedType, this);\n\n    } catch (IllegalArgumentException iae) {\n      throw iae;\n    } catch (Exception e) {\n      throwExp(m, \" Invalid tag : {0} \"+ e.getMessage(), s);\n      return null;\n    }\n  }\n\n","sourceOld":"  Condition parse(String s, Map<String, Object> m) {\n\n    Object expectedVal = null;\n    ComputedType computedType = null;\n    Object val = m.get(s);\n    Type varType = VariableBase.getTagType(s);\n    if (varType.meta.isHidden()) {\n      throwExp(m, \"''{0}'' is not allowed\", varType.tagName);\n    }\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof List) {\n        if (!varType.meta.supportArrayVals()) {\n          throwExp(m, \"array values are not supported for {0}\", conditionName);\n        }\n        expectedVal = readListVal(m, (List) val, varType, conditionName);\n        operand = Operand.IN;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        val = strVal;\n        operand = getOperand(strVal);\n        strVal = strVal.substring(Operand.EQUAL == operand || WILDCARD == operand ? 0 : 1);\n        for (ComputedType t : ComputedType.values()) {\n          String changedVal = t.match(strVal);\n          if (changedVal != null) {\n            computedType = t;\n            strVal = changedVal;\n            if (varType == null || !varType.supportedComputedTypes.contains(computedType)) {\n              throwExp(m, \"''{0}'' is not allowed for variable :  ''{1}''\", t, conditionName);\n            }\n          }\n        }\n        if (computedType == null && ((String) val).charAt(0) == '#' && !varType.wildCards.contains(val)) {\n          throwExp(m, \"''{0}'' is not an allowed value for ''{1}'', supported value is : {2} \", val, conditionName, varType.wildCards);\n\n        }\n        operand = varType == null ? operand : varType.getOperand(operand, strVal, computedType);\n        expectedVal = validate(s, new Condition(s, strVal, operand, computedType, null), true);\n\n      } else if (val instanceof Number) {\n        operand = Operand.EQUAL;\n        operand = varType.getOperand(operand, val, null);\n        expectedVal = validate(s, new Condition(s, val, operand, null, null), true);\n      }\n      return new Condition(conditionName, expectedVal, operand, computedType, this);\n\n    } catch (IllegalArgumentException iae) {\n      throw iae;\n    } catch (Exception e) {\n      throwExp(m, \"Invalid tag : {0} \", s);\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parse(String,Map[String,Object]).mjava","sourceNew":null,"sourceOld":"  Condition parse(String s, Map<String, Object> m) {\n\n    Object expectedVal = null;\n    ComputedType computedType = null;\n    Object val = m.get(s);\n    Type varType = VariableBase.getTagType(s);\n    if (varType.meta.isHidden()) {\n      throwExp(m, \"''{0}'' is not allowed\", varType.tagName);\n    }\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof List) {\n        if (!varType.meta.supportArrayVals()) {\n          throwExp(m, \"array values are not supported for {0}\", conditionName);\n        }\n        expectedVal = readListVal(m, (List) val, varType, conditionName);\n        operand = Operand.IN;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        val = strVal;\n        operand = getOperand(strVal);\n        strVal = strVal.substring(Operand.EQUAL == operand || WILDCARD == operand ? 0 : 1);\n        for (ComputedType t : ComputedType.values()) {\n          String changedVal = t.match(strVal);\n          if (changedVal != null) {\n            computedType = t;\n            strVal = changedVal;\n            if (varType == null || !varType.supportedComputedTypes.contains(computedType)) {\n              throwExp(m, \"''{0}'' is not allowed for variable :  ''{1}''\", t, conditionName);\n            }\n          }\n        }\n        if (computedType == null && ((String) val).charAt(0) == '#' && !varType.wildCards.contains(val)) {\n          throwExp(m, \"''{0}'' is not an allowed value for ''{1}'', supported value is : {2} \", val, conditionName, varType.wildCards);\n\n        }\n        operand = varType == null ? operand : varType.getOperand(operand, strVal, computedType);\n        expectedVal = validate(s, new Condition(s, strVal, operand, computedType, null), true);\n\n      } else if (val instanceof Number) {\n        operand = Operand.EQUAL;\n        operand = varType.getOperand(operand, val, null);\n        expectedVal = validate(s, new Condition(s, val, operand, null, null), true);\n      }\n      return new Condition(conditionName, expectedVal, operand, computedType, this);\n\n    } catch (IllegalArgumentException iae) {\n      throw iae;\n    } catch (Exception e) {\n      throwExp(m, \" Invalid tag : {0} \"+ e.getMessage(), s);\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["081849c2756a6c9b9883ab9e332f3f3fcf2f05fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":["29944148cc0dc98687ff45e8a1eaa937a9bcf9ff","9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"9ddd9a76400512cda8f22bbc69e3d8b85672a91a":["29944148cc0dc98687ff45e8a1eaa937a9bcf9ff"],"29944148cc0dc98687ff45e8a1eaa937a9bcf9ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"081849c2756a6c9b9883ab9e332f3f3fcf2f05fa":["9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29944148cc0dc98687ff45e8a1eaa937a9bcf9ff"],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":[],"9ddd9a76400512cda8f22bbc69e3d8b85672a91a":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","081849c2756a6c9b9883ab9e332f3f3fcf2f05fa"],"29944148cc0dc98687ff45e8a1eaa937a9bcf9ff":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"081849c2756a6c9b9883ab9e332f3f3fcf2f05fa":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}