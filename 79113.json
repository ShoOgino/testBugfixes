{"path":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#close().mjava","commits":[{"id":"b1add9ddc0005b07550d4350720aac22dc9886b3","date":1295549635,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    try {\n      \n      int nonZeroCount = 0;\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          nonZeroCount++;\n        }\n      }\n\n      final long dirStart = out.getFilePointer();\n\n      out.writeVInt(nonZeroCount);\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVLong(field.numTerms);\n          out.writeVLong(field.termsStartPointer);\n          if (!field.fieldInfo.omitTermFreqAndPositions) {\n            out.writeVLong(field.sumTotalTermFreq);\n          }\n        }\n      }\n      writeTrailer(dirStart);\n    } finally {\n      try {\n        out.close();\n      } finally {\n        try {\n          postingsWriter.close();\n        } finally {\n          termsIndexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n\n    try {\n      \n      int nonZeroCount = 0;\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          nonZeroCount++;\n        }\n      }\n\n      final long dirStart = out.getFilePointer();\n\n      out.writeVInt(nonZeroCount);\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVLong(field.numTerms);\n          out.writeVLong(field.termsStartPointer);\n          if (!field.fieldInfo.omitTermFreqAndPositions) {\n            out.writeVLong(field.sumTotalTermFreq);\n          }\n        }\n      }\n      writeTrailer(dirStart);\n    } finally {\n      try {\n        out.close();\n      } finally {\n        try {\n          postingsWriter.close();\n        } finally {\n          termsIndexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd1bfe3cedf815c14939d170d53031c88eb5c444","date":1295896578,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#close().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    try {\n      \n      int nonZeroCount = 0;\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          nonZeroCount++;\n        }\n      }\n\n      final long dirStart = out.getFilePointer();\n\n      out.writeVInt(nonZeroCount);\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVLong(field.numTerms);\n          out.writeVLong(field.termsStartPointer);\n          if (!field.fieldInfo.omitTermFreqAndPositions) {\n            out.writeVLong(field.sumTotalTermFreq);\n          }\n        }\n      }\n      writeTrailer(dirStart);\n    } finally {\n      try {\n        out.close();\n      } finally {\n        try {\n          postingsWriter.close();\n        } finally {\n          termsIndexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#close().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    try {\n      \n      int nonZeroCount = 0;\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          nonZeroCount++;\n        }\n      }\n\n      final long dirStart = out.getFilePointer();\n\n      out.writeVInt(nonZeroCount);\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVLong(field.numTerms);\n          out.writeVLong(field.termsStartPointer);\n          if (!field.fieldInfo.omitTermFreqAndPositions) {\n            out.writeVLong(field.sumTotalTermFreq);\n          }\n        }\n      }\n      writeTrailer(dirStart);\n    } finally {\n      try {\n        out.close();\n      } finally {\n        try {\n          postingsWriter.close();\n        } finally {\n          termsIndexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efb7a19703a037c29e30440260d393500febc1f4","date":1306648116,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    try {\n      \n      int nonZeroCount = 0;\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          nonZeroCount++;\n        }\n      }\n\n      final long dirStart = out.getFilePointer();\n\n      out.writeVInt(nonZeroCount);\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVLong(field.numTerms);\n          out.writeVLong(field.termsStartPointer);\n          if (!field.fieldInfo.omitTermFreqAndPositions) {\n            out.writeVLong(field.sumTotalTermFreq);\n          }\n        }\n      }\n      writeTrailer(dirStart);\n    } finally {\n      IOUtils.closeSafely(false, out, postingsWriter, termsIndexWriter);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n\n    try {\n      \n      int nonZeroCount = 0;\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          nonZeroCount++;\n        }\n      }\n\n      final long dirStart = out.getFilePointer();\n\n      out.writeVInt(nonZeroCount);\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVLong(field.numTerms);\n          out.writeVLong(field.termsStartPointer);\n          if (!field.fieldInfo.omitTermFreqAndPositions) {\n            out.writeVLong(field.sumTotalTermFreq);\n          }\n        }\n      }\n      writeTrailer(dirStart);\n    } finally {\n      try {\n        out.close();\n      } finally {\n        try {\n          postingsWriter.close();\n        } finally {\n          termsIndexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    try {\n      \n      int nonZeroCount = 0;\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          nonZeroCount++;\n        }\n      }\n\n      final long dirStart = out.getFilePointer();\n\n      out.writeVInt(nonZeroCount);\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVLong(field.numTerms);\n          out.writeVLong(field.termsStartPointer);\n          if (!field.fieldInfo.omitTermFreqAndPositions) {\n            out.writeVLong(field.sumTotalTermFreq);\n          }\n        }\n      }\n      writeTrailer(dirStart);\n    } finally {\n      IOUtils.closeSafely(false, out, postingsWriter, termsIndexWriter);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n\n    try {\n      \n      int nonZeroCount = 0;\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          nonZeroCount++;\n        }\n      }\n\n      final long dirStart = out.getFilePointer();\n\n      out.writeVInt(nonZeroCount);\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVLong(field.numTerms);\n          out.writeVLong(field.termsStartPointer);\n          if (!field.fieldInfo.omitTermFreqAndPositions) {\n            out.writeVLong(field.sumTotalTermFreq);\n          }\n        }\n      }\n      writeTrailer(dirStart);\n    } finally {\n      try {\n        out.close();\n      } finally {\n        try {\n          postingsWriter.close();\n        } finally {\n          termsIndexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    try {\n      \n      int nonZeroCount = 0;\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          nonZeroCount++;\n        }\n      }\n\n      final long dirStart = out.getFilePointer();\n\n      out.writeVInt(nonZeroCount);\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVLong(field.numTerms);\n          out.writeVLong(field.termsStartPointer);\n          if (!field.fieldInfo.omitTermFreqAndPositions) {\n            out.writeVLong(field.sumTotalTermFreq);\n          }\n        }\n      }\n      writeTrailer(dirStart);\n    } finally {\n      IOUtils.closeSafely(false, out, postingsWriter, termsIndexWriter);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n\n    try {\n      \n      int nonZeroCount = 0;\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          nonZeroCount++;\n        }\n      }\n\n      final long dirStart = out.getFilePointer();\n\n      out.writeVInt(nonZeroCount);\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVLong(field.numTerms);\n          out.writeVLong(field.termsStartPointer);\n          if (!field.fieldInfo.omitTermFreqAndPositions) {\n            out.writeVLong(field.sumTotalTermFreq);\n          }\n        }\n      }\n      writeTrailer(dirStart);\n    } finally {\n      try {\n        out.close();\n      } finally {\n        try {\n          postingsWriter.close();\n        } finally {\n          termsIndexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94","date":1310159023,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    try {\n      \n      int nonZeroCount = 0;\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          nonZeroCount++;\n        }\n      }\n\n      final long dirStart = out.getFilePointer();\n\n      out.writeVInt(nonZeroCount);\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVLong(field.numTerms);\n          out.writeVLong(field.termsStartPointer);\n          if (!field.fieldInfo.omitTermFreqAndPositions) {\n            out.writeVLong(field.sumTotalTermFreq);\n          }\n          out.writeVLong(field.sumDocFreq);\n        }\n      }\n      writeTrailer(dirStart);\n    } finally {\n      IOUtils.closeSafely(false, out, postingsWriter, termsIndexWriter);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n\n    try {\n      \n      int nonZeroCount = 0;\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          nonZeroCount++;\n        }\n      }\n\n      final long dirStart = out.getFilePointer();\n\n      out.writeVInt(nonZeroCount);\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVLong(field.numTerms);\n          out.writeVLong(field.termsStartPointer);\n          if (!field.fieldInfo.omitTermFreqAndPositions) {\n            out.writeVLong(field.sumTotalTermFreq);\n          }\n        }\n      }\n      writeTrailer(dirStart);\n    } finally {\n      IOUtils.closeSafely(false, out, postingsWriter, termsIndexWriter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63639dd66fd5bd9b90bc24dd596ae01575f27cc4","date":1310237454,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    try {\n      \n      int nonZeroCount = 0;\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          nonZeroCount++;\n        }\n      }\n\n      final long dirStart = out.getFilePointer();\n\n      out.writeVInt(nonZeroCount);\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVLong(field.numTerms);\n          out.writeVLong(field.termsStartPointer);\n          if (!field.fieldInfo.omitTermFreqAndPositions) {\n            out.writeVLong(field.sumTotalTermFreq);\n          }\n          out.writeVLong(field.sumDocFreq);\n        }\n      }\n      writeTrailer(dirStart);\n    } finally {\n      IOUtils.closeSafely(false, out, postingsWriter, termsIndexWriter);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n\n    try {\n      \n      int nonZeroCount = 0;\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          nonZeroCount++;\n        }\n      }\n\n      final long dirStart = out.getFilePointer();\n\n      out.writeVInt(nonZeroCount);\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVLong(field.numTerms);\n          out.writeVLong(field.termsStartPointer);\n          if (!field.fieldInfo.omitTermFreqAndPositions) {\n            out.writeVLong(field.sumTotalTermFreq);\n          }\n        }\n      }\n      writeTrailer(dirStart);\n    } finally {\n      IOUtils.closeSafely(false, out, postingsWriter, termsIndexWriter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    try {\n      \n      int nonZeroCount = 0;\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          nonZeroCount++;\n        }\n      }\n\n      final long dirStart = out.getFilePointer();\n\n      out.writeVInt(nonZeroCount);\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVLong(field.numTerms);\n          out.writeVLong(field.termsStartPointer);\n          if (field.fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n            out.writeVLong(field.sumTotalTermFreq);\n          }\n          out.writeVLong(field.sumDocFreq);\n        }\n      }\n      writeTrailer(dirStart);\n    } finally {\n      IOUtils.closeSafely(false, out, postingsWriter, termsIndexWriter);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n\n    try {\n      \n      int nonZeroCount = 0;\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          nonZeroCount++;\n        }\n      }\n\n      final long dirStart = out.getFilePointer();\n\n      out.writeVInt(nonZeroCount);\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVLong(field.numTerms);\n          out.writeVLong(field.termsStartPointer);\n          if (!field.fieldInfo.omitTermFreqAndPositions) {\n            out.writeVLong(field.sumTotalTermFreq);\n          }\n          out.writeVLong(field.sumDocFreq);\n        }\n      }\n      writeTrailer(dirStart);\n    } finally {\n      IOUtils.closeSafely(false, out, postingsWriter, termsIndexWriter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24230fe54121f9be9d85f2c2067536296785e421","date":1314462346,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    try {\n      \n      int nonZeroCount = 0;\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          nonZeroCount++;\n        }\n      }\n\n      final long dirStart = out.getFilePointer();\n\n      out.writeVInt(nonZeroCount);\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVLong(field.numTerms);\n          out.writeVLong(field.termsStartPointer);\n          if (field.fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n            out.writeVLong(field.sumTotalTermFreq);\n          }\n          out.writeVLong(field.sumDocFreq);\n        }\n      }\n      writeTrailer(dirStart);\n    } finally {\n      IOUtils.close(out, postingsWriter, termsIndexWriter);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n\n    try {\n      \n      int nonZeroCount = 0;\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          nonZeroCount++;\n        }\n      }\n\n      final long dirStart = out.getFilePointer();\n\n      out.writeVInt(nonZeroCount);\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVLong(field.numTerms);\n          out.writeVLong(field.termsStartPointer);\n          if (field.fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n            out.writeVLong(field.sumTotalTermFreq);\n          }\n          out.writeVLong(field.sumDocFreq);\n        }\n      }\n      writeTrailer(dirStart);\n    } finally {\n      IOUtils.closeSafely(false, out, postingsWriter, termsIndexWriter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25433c5cacacb7a2055d62d4d36b0daf210e0a10","date":1315747522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    try {\n      \n      int nonZeroCount = 0;\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          nonZeroCount++;\n        }\n      }\n\n      final long dirStart = out.getFilePointer();\n\n      out.writeVInt(nonZeroCount);\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVLong(field.numTerms);\n          out.writeVLong(field.termsStartPointer);\n          if (field.fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n            out.writeVLong(field.sumTotalTermFreq);\n          }\n          out.writeVLong(field.sumDocFreq);\n          out.writeVInt(field.docCount);\n        }\n      }\n      writeTrailer(dirStart);\n    } finally {\n      IOUtils.close(out, postingsWriter, termsIndexWriter);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n\n    try {\n      \n      int nonZeroCount = 0;\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          nonZeroCount++;\n        }\n      }\n\n      final long dirStart = out.getFilePointer();\n\n      out.writeVInt(nonZeroCount);\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVLong(field.numTerms);\n          out.writeVLong(field.termsStartPointer);\n          if (field.fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n            out.writeVLong(field.sumTotalTermFreq);\n          }\n          out.writeVLong(field.sumDocFreq);\n        }\n      }\n      writeTrailer(dirStart);\n    } finally {\n      IOUtils.close(out, postingsWriter, termsIndexWriter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/BlockTermsWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    try {\n      \n      int nonZeroCount = 0;\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          nonZeroCount++;\n        }\n      }\n\n      final long dirStart = out.getFilePointer();\n\n      out.writeVInt(nonZeroCount);\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVLong(field.numTerms);\n          out.writeVLong(field.termsStartPointer);\n          if (field.fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n            out.writeVLong(field.sumTotalTermFreq);\n          }\n          out.writeVLong(field.sumDocFreq);\n          out.writeVInt(field.docCount);\n        }\n      }\n      writeTrailer(dirStart);\n    } finally {\n      IOUtils.close(out, postingsWriter, termsIndexWriter);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n\n    try {\n      \n      int nonZeroCount = 0;\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          nonZeroCount++;\n        }\n      }\n\n      final long dirStart = out.getFilePointer();\n\n      out.writeVInt(nonZeroCount);\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVLong(field.numTerms);\n          out.writeVLong(field.termsStartPointer);\n          if (field.fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n            out.writeVLong(field.sumTotalTermFreq);\n          }\n          out.writeVLong(field.sumDocFreq);\n          out.writeVInt(field.docCount);\n        }\n      }\n      writeTrailer(dirStart);\n    } finally {\n      IOUtils.close(out, postingsWriter, termsIndexWriter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24230fe54121f9be9d85f2c2067536296785e421":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94"],"25433c5cacacb7a2055d62d4d36b0daf210e0a10":["24230fe54121f9be9d85f2c2067536296785e421"],"efb7a19703a037c29e30440260d393500febc1f4":["b1add9ddc0005b07550d4350720aac22dc9886b3"],"f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94":["efb7a19703a037c29e30440260d393500febc1f4"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94"],"fd1bfe3cedf815c14939d170d53031c88eb5c444":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["b1add9ddc0005b07550d4350720aac22dc9886b3","efb7a19703a037c29e30440260d393500febc1f4"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b1add9ddc0005b07550d4350720aac22dc9886b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["25433c5cacacb7a2055d62d4d36b0daf210e0a10"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["29ef99d61cda9641b6250bf9567329a6e65f901d","efb7a19703a037c29e30440260d393500febc1f4"]},"commit2Childs":{"24230fe54121f9be9d85f2c2067536296785e421":["25433c5cacacb7a2055d62d4d36b0daf210e0a10"],"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["24230fe54121f9be9d85f2c2067536296785e421"],"25433c5cacacb7a2055d62d4d36b0daf210e0a10":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"efb7a19703a037c29e30440260d393500febc1f4":["f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94":["2afd23a6f1242190c3409d8d81d5c5912d607fc9","63639dd66fd5bd9b90bc24dd596ae01575f27cc4"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["efb7a19703a037c29e30440260d393500febc1f4","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","29ef99d61cda9641b6250bf9567329a6e65f901d"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":[],"fd1bfe3cedf815c14939d170d53031c88eb5c444":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["63639dd66fd5bd9b90bc24dd596ae01575f27cc4"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b1add9ddc0005b07550d4350720aac22dc9886b3","fd1bfe3cedf815c14939d170d53031c88eb5c444","29ef99d61cda9641b6250bf9567329a6e65f901d"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["63639dd66fd5bd9b90bc24dd596ae01575f27cc4","fd1bfe3cedf815c14939d170d53031c88eb5c444","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}