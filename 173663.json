{"path":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeDocSet(Query,ProcessedFilter,List[Collector]).mjava","commits":[{"id":"2f8247163846f78e14d325499507cc0a7d5821e2","date":1353984869,"type":1,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeDocSet(Query,ProcessedFilter,List[Collector]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeDocSet(Query,Filter,List[Collector]).mjava","sourceNew":"  private DocSet computeDocSet(Query query, ProcessedFilter filter, List<Collector> collectors) throws IOException {\n    int maxDoc = searcher.maxDoc();\n    DocSetCollector docSetCollector;\n    if (collectors.isEmpty()) {\n      docSetCollector = new DocSetCollector(maxDoc >> 6, maxDoc);\n    } else {\n      Collector wrappedCollectors = MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()]));\n      docSetCollector = new DocSetDelegateCollector(maxDoc >> 6, maxDoc, wrappedCollectors);\n    }\n    searchWithTimeLimiter(query, filter, docSetCollector);\n    return docSetCollector.getDocSet();\n  }\n\n","sourceOld":"  private DocSet computeDocSet(Query query, Filter luceneFilter, List<Collector> collectors) throws IOException {\n    int maxDoc = searcher.maxDoc();\n    DocSetCollector docSetCollector;\n    if (collectors.isEmpty()) {\n      docSetCollector = new DocSetCollector(maxDoc >> 6, maxDoc);\n    } else {\n      Collector wrappedCollectors = MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()]));\n      docSetCollector = new DocSetDelegateCollector(maxDoc >> 6, maxDoc, wrappedCollectors);\n    }\n    searchWithTimeLimiter(query, luceneFilter, docSetCollector);\n    return docSetCollector.getDocSet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeDocSet(Query,ProcessedFilter,List[Collector]).mjava","pathOld":"/dev/null","sourceNew":"  private DocSet computeDocSet(Query query, ProcessedFilter filter, List<Collector> collectors) throws IOException {\n    int maxDoc = searcher.maxDoc();\n    DocSetCollector docSetCollector;\n    if (collectors.isEmpty()) {\n      docSetCollector = new DocSetCollector(maxDoc >> 6, maxDoc);\n    } else {\n      Collector wrappedCollectors = MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()]));\n      docSetCollector = new DocSetDelegateCollector(maxDoc >> 6, maxDoc, wrappedCollectors);\n    }\n    searchWithTimeLimiter(query, filter, docSetCollector);\n    return docSetCollector.getDocSet();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae73da626f97850c922c42736f808d0378e165f0","date":1396625460,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeDocSet(Query,ProcessedFilter,List[Collector]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeDocSet(Query,ProcessedFilter,List[Collector]).mjava","sourceNew":"  private DocSet computeDocSet(Query query, ProcessedFilter filter, List<Collector> collectors) throws IOException {\n    int maxDoc = searcher.maxDoc();\n    final Collector collector;\n    final DocSetCollector docSetCollector = new DocSetCollector(maxDoc >> 6, maxDoc);\n    List<Collector> allCollectors = new ArrayList<>(collectors);\n    allCollectors.add(docSetCollector);\n    searchWithTimeLimiter(query, filter, MultiCollector.wrap(allCollectors));\n    return docSetCollector.getDocSet();\n  }\n\n","sourceOld":"  private DocSet computeDocSet(Query query, ProcessedFilter filter, List<Collector> collectors) throws IOException {\n    int maxDoc = searcher.maxDoc();\n    DocSetCollector docSetCollector;\n    if (collectors.isEmpty()) {\n      docSetCollector = new DocSetCollector(maxDoc >> 6, maxDoc);\n    } else {\n      Collector wrappedCollectors = MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()]));\n      docSetCollector = new DocSetDelegateCollector(maxDoc >> 6, maxDoc, wrappedCollectors);\n    }\n    searchWithTimeLimiter(query, filter, docSetCollector);\n    return docSetCollector.getDocSet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeDocSet(Query,ProcessedFilter,List[Collector]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeDocSet(Query,ProcessedFilter,List[Collector]).mjava","sourceNew":"  private DocSet computeDocSet(Query query, ProcessedFilter filter, List<Collector> collectors) throws IOException {\n    int maxDoc = searcher.maxDoc();\n    final Collector collector;\n    final DocSetCollector docSetCollector = new DocSetCollector(maxDoc >> 6, maxDoc);\n    List<Collector> allCollectors = new ArrayList<>(collectors);\n    allCollectors.add(docSetCollector);\n    searchWithTimeLimiter(query, filter, MultiCollector.wrap(allCollectors));\n    return docSetCollector.getDocSet();\n  }\n\n","sourceOld":"  private DocSet computeDocSet(Query query, ProcessedFilter filter, List<Collector> collectors) throws IOException {\n    int maxDoc = searcher.maxDoc();\n    DocSetCollector docSetCollector;\n    if (collectors.isEmpty()) {\n      docSetCollector = new DocSetCollector(maxDoc >> 6, maxDoc);\n    } else {\n      Collector wrappedCollectors = MultiCollector.wrap(collectors.toArray(new Collector[collectors.size()]));\n      docSetCollector = new DocSetDelegateCollector(maxDoc >> 6, maxDoc, wrappedCollectors);\n    }\n    searchWithTimeLimiter(query, filter, docSetCollector);\n    return docSetCollector.getDocSet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca0cc2f173b07ff75ca951e017f5dd1f319fdad0","date":1442027674,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeDocSet(Query,ProcessedFilter,List[Collector]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeDocSet(Query,ProcessedFilter,List[Collector]).mjava","sourceNew":"  private DocSet computeDocSet(Query query, ProcessedFilter filter, List<Collector> collectors) throws IOException {\n    int maxDoc = searcher.maxDoc();\n    final Collector collector;\n    final DocSetCollector docSetCollector = new DocSetCollector(maxDoc);\n    List<Collector> allCollectors = new ArrayList<>(collectors);\n    allCollectors.add(docSetCollector);\n    searchWithTimeLimiter(query, filter, MultiCollector.wrap(allCollectors));\n    return docSetCollector.getDocSet();\n  }\n\n","sourceOld":"  private DocSet computeDocSet(Query query, ProcessedFilter filter, List<Collector> collectors) throws IOException {\n    int maxDoc = searcher.maxDoc();\n    final Collector collector;\n    final DocSetCollector docSetCollector = new DocSetCollector(maxDoc >> 6, maxDoc);\n    List<Collector> allCollectors = new ArrayList<>(collectors);\n    allCollectors.add(docSetCollector);\n    searchWithTimeLimiter(query, filter, MultiCollector.wrap(allCollectors));\n    return docSetCollector.getDocSet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac9de183adbc9483681f275ac1e2d92ed19f52e1","date":1452414626,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeDocSet(Query,ProcessedFilter,List[Collector]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeDocSet(Query,ProcessedFilter,List[Collector]).mjava","sourceNew":"  private DocSet computeDocSet(Query query, ProcessedFilter filter, List<Collector> collectors) throws IOException {\n    int maxDoc = searcher.maxDoc();\n    final DocSetCollector docSetCollector = new DocSetCollector(maxDoc);\n    List<Collector> allCollectors = new ArrayList<>(collectors);\n    allCollectors.add(docSetCollector);\n    searchWithTimeLimiter(query, filter, MultiCollector.wrap(allCollectors));\n    return docSetCollector.getDocSet();\n  }\n\n","sourceOld":"  private DocSet computeDocSet(Query query, ProcessedFilter filter, List<Collector> collectors) throws IOException {\n    int maxDoc = searcher.maxDoc();\n    final Collector collector;\n    final DocSetCollector docSetCollector = new DocSetCollector(maxDoc);\n    List<Collector> allCollectors = new ArrayList<>(collectors);\n    allCollectors.add(docSetCollector);\n    searchWithTimeLimiter(query, filter, MultiCollector.wrap(allCollectors));\n    return docSetCollector.getDocSet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3","date":1485881524,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeDocSet(Query,ProcessedFilter,List[Collector]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeDocSet(Query,ProcessedFilter,List[Collector]).mjava","sourceNew":"  private DocSet computeDocSet(Query query, ProcessedFilter filter, List<Collector> collectors) throws IOException {\n    int maxDoc = searcher.maxDoc();\n    final DocSetCollector docSetCollector = new DocSetCollector(maxDoc);\n    List<Collector> allCollectors = new ArrayList<>(collectors);\n    allCollectors.add(docSetCollector);\n    searchWithTimeLimiter(query, filter, MultiCollector.wrap(allCollectors));\n    return DocSetUtil.getDocSet( docSetCollector, searcher );\n  }\n\n","sourceOld":"  private DocSet computeDocSet(Query query, ProcessedFilter filter, List<Collector> collectors) throws IOException {\n    int maxDoc = searcher.maxDoc();\n    final DocSetCollector docSetCollector = new DocSetCollector(maxDoc);\n    List<Collector> allCollectors = new ArrayList<>(collectors);\n    allCollectors.add(docSetCollector);\n    searchWithTimeLimiter(query, filter, MultiCollector.wrap(allCollectors));\n    return docSetCollector.getDocSet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeDocSet(Query,ProcessedFilter,List[Collector]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#computeDocSet(Query,ProcessedFilter,List[Collector]).mjava","sourceNew":"  private DocSet computeDocSet(Query query, ProcessedFilter filter, List<Collector> collectors) throws IOException {\n    int maxDoc = searcher.maxDoc();\n    final DocSetCollector docSetCollector = new DocSetCollector(maxDoc);\n    List<Collector> allCollectors = new ArrayList<>(collectors);\n    allCollectors.add(docSetCollector);\n    searchWithTimeLimiter(query, filter, MultiCollector.wrap(allCollectors));\n    return DocSetUtil.getDocSet( docSetCollector, searcher );\n  }\n\n","sourceOld":"  private DocSet computeDocSet(Query query, ProcessedFilter filter, List<Collector> collectors) throws IOException {\n    int maxDoc = searcher.maxDoc();\n    final DocSetCollector docSetCollector = new DocSetCollector(maxDoc);\n    List<Collector> allCollectors = new ArrayList<>(collectors);\n    allCollectors.add(docSetCollector);\n    searchWithTimeLimiter(query, filter, MultiCollector.wrap(allCollectors));\n    return docSetCollector.getDocSet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["2f8247163846f78e14d325499507cc0a7d5821e2","ae73da626f97850c922c42736f808d0378e165f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["ac9de183adbc9483681f275ac1e2d92ed19f52e1","0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3"],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2f8247163846f78e14d325499507cc0a7d5821e2"],"ae73da626f97850c922c42736f808d0378e165f0":["2f8247163846f78e14d325499507cc0a7d5821e2"],"ca0cc2f173b07ff75ca951e017f5dd1f319fdad0":["ae73da626f97850c922c42736f808d0378e165f0"],"0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"2f8247163846f78e14d325499507cc0a7d5821e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["ca0cc2f173b07ff75ca951e017f5dd1f319fdad0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3"]},"commit2Childs":{"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["407687e67faf6e1f02a211ca078d8e3eed631027","2f8247163846f78e14d325499507cc0a7d5821e2"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"ae73da626f97850c922c42736f808d0378e165f0":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","ca0cc2f173b07ff75ca951e017f5dd1f319fdad0"],"ca0cc2f173b07ff75ca951e017f5dd1f319fdad0":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2f8247163846f78e14d325499507cc0a7d5821e2":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","407687e67faf6e1f02a211ca078d8e3eed631027","ae73da626f97850c922c42736f808d0378e165f0"],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","7c3523a0ab04c3002eee3896c75ea5f10f388bcc","407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}