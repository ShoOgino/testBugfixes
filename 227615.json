{"path":"lucene/luke/src/java/org/apache/lucene/luke/models/search/SearchImpl#parseByStandardParser(String,String,Analyzer,QueryParserConfig).mjava","commits":[{"id":"f554f2d9b5456248ab6467b9d4f6015686797a6c","date":1554891357,"type":0,"author":"Tomoko Uchida","isMerge":false,"pathNew":"lucene/luke/src/java/org/apache/lucene/luke/models/search/SearchImpl#parseByStandardParser(String,String,Analyzer,QueryParserConfig).mjava","pathOld":"/dev/null","sourceNew":"  private Query parseByStandardParser(String expression, String defField, Analyzer analyzer,\n                                      QueryParserConfig config) {\n    StandardQueryParser parser = new StandardQueryParser(analyzer);\n\n    switch (config.getDefaultOperator()) {\n      case OR:\n        parser.setDefaultOperator(StandardQueryConfigHandler.Operator.OR);\n        break;\n      case AND:\n        parser.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);\n        break;\n    }\n\n    parser.setEnablePositionIncrements(config.isEnablePositionIncrements());\n    parser.setAllowLeadingWildcard(config.isAllowLeadingWildcard());\n    parser.setDateResolution(config.getDateResolution());\n    parser.setFuzzyMinSim(config.getFuzzyMinSim());\n    parser.setFuzzyPrefixLength(config.getFuzzyPrefixLength());\n    parser.setLocale(config.getLocale());\n    parser.setTimeZone(config.getTimeZone());\n    parser.setPhraseSlop(config.getPhraseSlop());\n\n    if (config.getTypeMap() != null) {\n      Map<String, PointsConfig> pointsConfigMap = new HashMap<>();\n\n      for (Map.Entry<String, Class<? extends Number>> entry : config.getTypeMap().entrySet()) {\n        String field = entry.getKey();\n        Class<? extends Number> type = entry.getValue();\n        PointsConfig pc;\n        if (type == Integer.class || type == Long.class) {\n          pc = new PointsConfig(NumberFormat.getIntegerInstance(Locale.ROOT), type);\n        } else if (type == Float.class || type == Double.class) {\n          pc = new PointsConfig(NumberFormat.getNumberInstance(Locale.ROOT), type);\n        } else {\n          log.warn(String.format(Locale.ENGLISH, \"Ignored invalid number type: %s.\", type.getName()));\n          continue;\n        }\n        pointsConfigMap.put(field, pc);\n      }\n\n      parser.setPointsConfigMap(pointsConfigMap);\n    }\n\n    try {\n      return parser.parse(expression, defField);\n    } catch (QueryNodeException e) {\n      throw new LukeException(String.format(Locale.ENGLISH, \"Failed to parse query expression: %s\", expression), e);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f554f2d9b5456248ab6467b9d4f6015686797a6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f554f2d9b5456248ab6467b9d4f6015686797a6c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f554f2d9b5456248ab6467b9d4f6015686797a6c"],"f554f2d9b5456248ab6467b9d4f6015686797a6c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}