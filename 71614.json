{"path":"lucene/src/java/org/apache/lucene/search/TimeLimitingCollector#collect(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TimeLimitingCollector#collect(int).mjava","pathOld":"src/java/org/apache/lucene/search/TimeLimitingCollector#collect(int).mjava","sourceNew":"  /**\n   * Calls {@link Collector#collect(int)} on the decorated {@link Collector}\n   * unless the allowed time has passed, in which case it throws an exception.\n   * \n   * @throws TimeExceededException\n   *           if the time allowed has exceeded.\n   */\n  @Override\n  public void collect(final int doc) throws IOException {\n    long time = TIMER_THREAD.getMilliseconds();\n    if (timeout < time) {\n      if (greedy) {\n        //System.out.println(this+\"  greedy: before failing, collecting doc: \"+doc+\"  \"+(time-t0));\n        collector.collect(doc);\n      }\n      //System.out.println(this+\"  failing on:  \"+doc+\"  \"+(time-t0));\n      throw new TimeExceededException( timeout-t0, time-t0, doc );\n    }\n    //System.out.println(this+\"  collecting: \"+doc+\"  \"+(time-t0));\n    collector.collect(doc);\n  }\n\n","sourceOld":"  /**\n   * Calls {@link Collector#collect(int)} on the decorated {@link Collector}\n   * unless the allowed time has passed, in which case it throws an exception.\n   * \n   * @throws TimeExceededException\n   *           if the time allowed has exceeded.\n   */\n  @Override\n  public void collect(final int doc) throws IOException {\n    long time = TIMER_THREAD.getMilliseconds();\n    if (timeout < time) {\n      if (greedy) {\n        //System.out.println(this+\"  greedy: before failing, collecting doc: \"+doc+\"  \"+(time-t0));\n        collector.collect(doc);\n      }\n      //System.out.println(this+\"  failing on:  \"+doc+\"  \"+(time-t0));\n      throw new TimeExceededException( timeout-t0, time-t0, doc );\n    }\n    //System.out.println(this+\"  collecting: \"+doc+\"  \"+(time-t0));\n    collector.collect(doc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58d1fe66c153c324aa9a37cb7287be26a328fecc","date":1279490554,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TimeLimitingCollector#collect(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TimeLimitingCollector#collect(int).mjava","sourceNew":"  /**\n   * Calls {@link Collector#collect(int)} on the decorated {@link Collector}\n   * unless the allowed time has passed, in which case it throws an exception.\n   * \n   * @throws TimeExceededException\n   *           if the time allowed has exceeded.\n   */\n  @Override\n  public void collect(final int doc) throws IOException {\n    long time = TIMER_THREAD.getMilliseconds();\n    if (timeout < time) {\n      if (greedy) {\n        //System.out.println(this+\"  greedy: before failing, collecting doc: \"+(docBase + doc)+\"  \"+(time-t0));\n        collector.collect(doc);\n      }\n      //System.out.println(this+\"  failing on:  \"+(docBase + doc)+\"  \"+(time-t0));\n      throw new TimeExceededException( timeout-t0, time-t0, docBase + doc );\n    }\n    //System.out.println(this+\"  collecting: \"+(docBase + doc)+\"  \"+(time-t0));\n    collector.collect(doc);\n  }\n\n","sourceOld":"  /**\n   * Calls {@link Collector#collect(int)} on the decorated {@link Collector}\n   * unless the allowed time has passed, in which case it throws an exception.\n   * \n   * @throws TimeExceededException\n   *           if the time allowed has exceeded.\n   */\n  @Override\n  public void collect(final int doc) throws IOException {\n    long time = TIMER_THREAD.getMilliseconds();\n    if (timeout < time) {\n      if (greedy) {\n        //System.out.println(this+\"  greedy: before failing, collecting doc: \"+doc+\"  \"+(time-t0));\n        collector.collect(doc);\n      }\n      //System.out.println(this+\"  failing on:  \"+doc+\"  \"+(time-t0));\n      throw new TimeExceededException( timeout-t0, time-t0, doc );\n    }\n    //System.out.println(this+\"  collecting: \"+doc+\"  \"+(time-t0));\n    collector.collect(doc);\n  }\n\n","bugFix":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TimeLimitingCollector#collect(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TimeLimitingCollector#collect(int).mjava","sourceNew":"  /**\n   * Calls {@link Collector#collect(int)} on the decorated {@link Collector}\n   * unless the allowed time has passed, in which case it throws an exception.\n   * \n   * @throws TimeExceededException\n   *           if the time allowed has exceeded.\n   */\n  @Override\n  public void collect(final int doc) throws IOException {\n    long time = TIMER_THREAD.getMilliseconds();\n    if (timeout < time) {\n      if (greedy) {\n        //System.out.println(this+\"  greedy: before failing, collecting doc: \"+(docBase + doc)+\"  \"+(time-t0));\n        collector.collect(doc);\n      }\n      //System.out.println(this+\"  failing on:  \"+(docBase + doc)+\"  \"+(time-t0));\n      throw new TimeExceededException( timeout-t0, time-t0, docBase + doc );\n    }\n    //System.out.println(this+\"  collecting: \"+(docBase + doc)+\"  \"+(time-t0));\n    collector.collect(doc);\n  }\n\n","sourceOld":"  /**\n   * Calls {@link Collector#collect(int)} on the decorated {@link Collector}\n   * unless the allowed time has passed, in which case it throws an exception.\n   * \n   * @throws TimeExceededException\n   *           if the time allowed has exceeded.\n   */\n  @Override\n  public void collect(final int doc) throws IOException {\n    long time = TIMER_THREAD.getMilliseconds();\n    if (timeout < time) {\n      if (greedy) {\n        //System.out.println(this+\"  greedy: before failing, collecting doc: \"+doc+\"  \"+(time-t0));\n        collector.collect(doc);\n      }\n      //System.out.println(this+\"  failing on:  \"+doc+\"  \"+(time-t0));\n      throw new TimeExceededException( timeout-t0, time-t0, doc );\n    }\n    //System.out.println(this+\"  collecting: \"+doc+\"  \"+(time-t0));\n    collector.collect(doc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23550189554f52bad1625fceab84a71d20a4df3f","date":1321064526,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TimeLimitingCollector#collect(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TimeLimitingCollector#collect(int).mjava","sourceNew":"  /**\n   * Calls {@link Collector#collect(int)} on the decorated {@link Collector}\n   * unless the allowed time has passed, in which case it throws an exception.\n   * \n   * @throws TimeExceededException\n   *           if the time allowed has exceeded.\n   */\n  @Override\n  public void collect(final int doc) throws IOException {\n    final long time = clock.get();\n    if (timeout < time) {\n      if (greedy) {\n        //System.out.println(this+\"  greedy: before failing, collecting doc: \"+(docBase + doc)+\"  \"+(time-t0));\n        collector.collect(doc);\n      }\n      //System.out.println(this+\"  failing on:  \"+(docBase + doc)+\"  \"+(time-t0));\n      throw new TimeExceededException( timeout-t0, time-t0, docBase + doc );\n    }\n    //System.out.println(this+\"  collecting: \"+(docBase + doc)+\"  \"+(time-t0));\n    collector.collect(doc);\n  }\n\n","sourceOld":"  /**\n   * Calls {@link Collector#collect(int)} on the decorated {@link Collector}\n   * unless the allowed time has passed, in which case it throws an exception.\n   * \n   * @throws TimeExceededException\n   *           if the time allowed has exceeded.\n   */\n  @Override\n  public void collect(final int doc) throws IOException {\n    long time = TIMER_THREAD.getMilliseconds();\n    if (timeout < time) {\n      if (greedy) {\n        //System.out.println(this+\"  greedy: before failing, collecting doc: \"+(docBase + doc)+\"  \"+(time-t0));\n        collector.collect(doc);\n      }\n      //System.out.println(this+\"  failing on:  \"+(docBase + doc)+\"  \"+(time-t0));\n      throw new TimeExceededException( timeout-t0, time-t0, docBase + doc );\n    }\n    //System.out.println(this+\"  collecting: \"+(docBase + doc)+\"  \"+(time-t0));\n    collector.collect(doc);\n  }\n\n","bugFix":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TimeLimitingCollector#collect(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TimeLimitingCollector#collect(int).mjava","sourceNew":"  /**\n   * Calls {@link Collector#collect(int)} on the decorated {@link Collector}\n   * unless the allowed time has passed, in which case it throws an exception.\n   * \n   * @throws TimeExceededException\n   *           if the time allowed has exceeded.\n   */\n  @Override\n  public void collect(final int doc) throws IOException {\n    final long time = clock.get();\n    if (timeout < time) {\n      if (greedy) {\n        //System.out.println(this+\"  greedy: before failing, collecting doc: \"+(docBase + doc)+\"  \"+(time-t0));\n        collector.collect(doc);\n      }\n      //System.out.println(this+\"  failing on:  \"+(docBase + doc)+\"  \"+(time-t0));\n      throw new TimeExceededException( timeout-t0, time-t0, docBase + doc );\n    }\n    //System.out.println(this+\"  collecting: \"+(docBase + doc)+\"  \"+(time-t0));\n    collector.collect(doc);\n  }\n\n","sourceOld":"  /**\n   * Calls {@link Collector#collect(int)} on the decorated {@link Collector}\n   * unless the allowed time has passed, in which case it throws an exception.\n   * \n   * @throws TimeExceededException\n   *           if the time allowed has exceeded.\n   */\n  @Override\n  public void collect(final int doc) throws IOException {\n    final long time = clock.get();\n    if (timeout < time) {\n      if (greedy) {\n        //System.out.println(this+\"  greedy: before failing, collecting doc: \"+(docBase + doc)+\"  \"+(time-t0));\n        collector.collect(doc);\n      }\n      //System.out.println(this+\"  failing on:  \"+(docBase + doc)+\"  \"+(time-t0));\n      throw new TimeExceededException( timeout-t0, time-t0, docBase + doc );\n    }\n    //System.out.println(this+\"  collecting: \"+(docBase + doc)+\"  \"+(time-t0));\n    collector.collect(doc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58d1fe66c153c324aa9a37cb7287be26a328fecc":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["23550189554f52bad1625fceab84a71d20a4df3f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"23550189554f52bad1625fceab84a71d20a4df3f":["58d1fe66c153c324aa9a37cb7287be26a328fecc"],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","58d1fe66c153c324aa9a37cb7287be26a328fecc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"58d1fe66c153c324aa9a37cb7287be26a328fecc":["23550189554f52bad1625fceab84a71d20a4df3f","5f4e87790277826a2aea119328600dfb07761f32"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"23550189554f52bad1625fceab84a71d20a4df3f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5f4e87790277826a2aea119328600dfb07761f32":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["58d1fe66c153c324aa9a37cb7287be26a328fecc","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}