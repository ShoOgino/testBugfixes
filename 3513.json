{"path":"solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest#testPerformance().mjava","commits":[{"id":"4ce5a0276b8637186ae6adfa516e332132d197ad","date":1362165863,"type":1,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest#testPerformance().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTest#testPerformance().mjava","sourceNew":"  @Ignore\n  public void testPerformance() throws Exception {\n    clearIndex();\n\n    Random r = random();\n    int initDocs = 200000;\n\n    for (int i = 1; i <= initDocs; i++) {\n      assertU(adoc(\"id\", \"\" + i, field(), (r.nextInt(10) + 1.00) + \",USD\"));\n      if (i % 1000 == 0)\n        System.out.println(i);\n    }\n\n    assertU(commit());\n    for (int i = 0; i < 1000; i++) {\n      double lower = r.nextInt(10) + 1.00;\n      assertQ(req(\"fl\", \"*,score\", \"q\", field()+\":[\" +  lower + \",USD TO \" + (lower + 10.00) + \",USD]\"), \"//*\");\n      assertQ(req(\"fl\", \"*,score\", \"q\", field()+\":[\" +  lower + \",EUR TO \" + (lower + 10.00) + \",EUR]\"), \"//*\");\n    }\n\n    for (int j = 0; j < 3; j++) {\n      long t1 = System.currentTimeMillis();\n      for (int i = 0; i < 1000; i++) {\n        double lower = r.nextInt(10) + 1.00;\n        assertQ(req(\"fl\", \"*,score\", \"q\", field()+\":[\" +  lower + \",USD TO \" + (lower + (9.99 - (j * 0.01))) + \",USD]\"), \"//*\");\n      }\n\n      System.out.println(System.currentTimeMillis() - t1);\n    }\n\n    System.out.println(\"---\");\n\n    for (int j = 0; j < 3; j++) {\n      long t1 = System.currentTimeMillis();\n      for (int i = 0; i < 1000; i++) {\n        double lower = r.nextInt(10) + 1.00;\n        assertQ(req(\"fl\", \"*,score\", \"q\", field()+\":[\" +  lower + \",EUR TO \" + (lower + (9.99 - (j * 0.01))) + \",EUR]\"), \"//*\");\n      }\n\n      System.out.println(System.currentTimeMillis() - t1);\n    }\n  }\n\n","sourceOld":"  @Ignore\n  public void testPerformance() throws Exception {\n    clearIndex();\n\n    Random r = random();\n    int initDocs = 200000;\n\n    for (int i = 1; i <= initDocs; i++) {\n      assertU(adoc(\"id\", \"\" + i, \"amount\", (r.nextInt(10) + 1.00) + \",USD\"));\n      if (i % 1000 == 0)\n        System.out.println(i);\n    }\n\n    assertU(commit());\n    for (int i = 0; i < 1000; i++) {\n      double lower = r.nextInt(10) + 1.00;\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",USD TO \" + (lower + 10.00) + \",USD]\"), \"//*\");\n      assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",EUR TO \" + (lower + 10.00) + \",EUR]\"), \"//*\");\n    }\n\n    for (int j = 0; j < 3; j++) {\n      long t1 = System.currentTimeMillis();\n      for (int i = 0; i < 1000; i++) {\n        double lower = r.nextInt(10) + 1.00;\n        assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",USD TO \" + (lower + (9.99 - (j * 0.01))) + \",USD]\"), \"//*\");\n      }\n\n      System.out.println(System.currentTimeMillis() - t1);\n    }\n\n    System.out.println(\"---\");\n\n    for (int j = 0; j < 3; j++) {\n      long t1 = System.currentTimeMillis();\n      for (int i = 0; i < 1000; i++) {\n        double lower = r.nextInt(10) + 1.00;\n        assertQ(req(\"fl\", \"*,score\", \"q\", \"amount:[\" +  lower + \",EUR TO \" + (lower + (9.99 - (j * 0.01))) + \",EUR]\"), \"//*\");\n      }\n\n      System.out.println(System.currentTimeMillis() - t1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest#testPerformance().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest#testPerformance().mjava","sourceNew":"  @Ignore\n  public void testPerformance() throws Exception {\n    clearIndex();\n\n    Random r = random();\n    int initDocs = 200000;\n\n    for (int i = 1; i <= initDocs; i++) {\n      assertU(adoc(\"id\", \"\" + i, field(), (r.nextInt(10) + 1.00) + \",USD\"));\n      if (i % 1000 == 0)\n        System.out.println(i);\n    }\n\n    assertU(commit());\n    for (int i = 0; i < 1000; i++) {\n      double lower = r.nextInt(10) + 1.00;\n      assertQ(req(\"fl\", \"*,score\", \"q\", field()+\":[\" +  lower + \",USD TO \" + (lower + 10.00) + \",USD]\"), \"//*\");\n      assertQ(req(\"fl\", \"*,score\", \"q\", field()+\":[\" +  lower + \",EUR TO \" + (lower + 10.00) + \",EUR]\"), \"//*\");\n    }\n\n    for (int j = 0; j < 3; j++) {\n      final RTimer timer = new RTimer();\n      for (int i = 0; i < 1000; i++) {\n        double lower = r.nextInt(10) + 1.00;\n        assertQ(req(\"fl\", \"*,score\", \"q\", field()+\":[\" +  lower + \",USD TO \" + (lower + (9.99 - (j * 0.01))) + \",USD]\"), \"//*\");\n      }\n\n      System.out.println(timer.getTime());\n    }\n\n    System.out.println(\"---\");\n\n    for (int j = 0; j < 3; j++) {\n      final RTimer timer = new RTimer();\n      for (int i = 0; i < 1000; i++) {\n        double lower = r.nextInt(10) + 1.00;\n        assertQ(req(\"fl\", \"*,score\", \"q\", field()+\":[\" +  lower + \",EUR TO \" + (lower + (9.99 - (j * 0.01))) + \",EUR]\"), \"//*\");\n      }\n\n      System.out.println(timer.getTime());\n    }\n  }\n\n","sourceOld":"  @Ignore\n  public void testPerformance() throws Exception {\n    clearIndex();\n\n    Random r = random();\n    int initDocs = 200000;\n\n    for (int i = 1; i <= initDocs; i++) {\n      assertU(adoc(\"id\", \"\" + i, field(), (r.nextInt(10) + 1.00) + \",USD\"));\n      if (i % 1000 == 0)\n        System.out.println(i);\n    }\n\n    assertU(commit());\n    for (int i = 0; i < 1000; i++) {\n      double lower = r.nextInt(10) + 1.00;\n      assertQ(req(\"fl\", \"*,score\", \"q\", field()+\":[\" +  lower + \",USD TO \" + (lower + 10.00) + \",USD]\"), \"//*\");\n      assertQ(req(\"fl\", \"*,score\", \"q\", field()+\":[\" +  lower + \",EUR TO \" + (lower + 10.00) + \",EUR]\"), \"//*\");\n    }\n\n    for (int j = 0; j < 3; j++) {\n      long t1 = System.currentTimeMillis();\n      for (int i = 0; i < 1000; i++) {\n        double lower = r.nextInt(10) + 1.00;\n        assertQ(req(\"fl\", \"*,score\", \"q\", field()+\":[\" +  lower + \",USD TO \" + (lower + (9.99 - (j * 0.01))) + \",USD]\"), \"//*\");\n      }\n\n      System.out.println(System.currentTimeMillis() - t1);\n    }\n\n    System.out.println(\"---\");\n\n    for (int j = 0; j < 3; j++) {\n      long t1 = System.currentTimeMillis();\n      for (int i = 0; i < 1000; i++) {\n        double lower = r.nextInt(10) + 1.00;\n        assertQ(req(\"fl\", \"*,score\", \"q\", field()+\":[\" +  lower + \",EUR TO \" + (lower + (9.99 - (j * 0.01))) + \",EUR]\"), \"//*\");\n      }\n\n      System.out.println(System.currentTimeMillis() - t1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f107636c2cc82350a2607d774c092da5b73152e5","date":1498227268,"type":5,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTypeTest#testPerformance().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest#testPerformance().mjava","sourceNew":"  @Ignore\n  public void testPerformance() throws Exception {\n    clearIndex();\n\n    Random r = random();\n    int initDocs = 200000;\n\n    for (int i = 1; i <= initDocs; i++) {\n      assertU(adoc(\"id\", \"\" + i, fieldName, (r.nextInt(10) + 1.00) + \",USD\"));\n      if (i % 1000 == 0)\n        System.out.println(i);\n    }\n\n    assertU(commit());\n    for (int i = 0; i < 1000; i++) {\n      double lower = r.nextInt(10) + 1.00;\n      assertQ(req(\"fl\", \"*,score\", \"q\", fieldName+\":[\" +  lower + \",USD TO \" + (lower + 10.00) + \",USD]\"), \"//*\");\n      assertQ(req(\"fl\", \"*,score\", \"q\", fieldName+\":[\" +  lower + \",EUR TO \" + (lower + 10.00) + \",EUR]\"), \"//*\");\n    }\n\n    for (int j = 0; j < 3; j++) {\n      final RTimer timer = new RTimer();\n      for (int i = 0; i < 1000; i++) {\n        double lower = r.nextInt(10) + 1.00;\n        assertQ(req(\"fl\", \"*,score\", \"q\", fieldName+\":[\" +  lower + \",USD TO \" + (lower + (9.99 - (j * 0.01))) + \",USD]\"), \"//*\");\n      }\n\n      System.out.println(timer.getTime());\n    }\n\n    System.out.println(\"---\");\n\n    for (int j = 0; j < 3; j++) {\n      final RTimer timer = new RTimer();\n      for (int i = 0; i < 1000; i++) {\n        double lower = r.nextInt(10) + 1.00;\n        assertQ(req(\"fl\", \"*,score\", \"q\", fieldName+\":[\" +  lower + \",EUR TO \" + (lower + (9.99 - (j * 0.01))) + \",EUR]\"), \"//*\");\n      }\n\n      System.out.println(timer.getTime());\n    }\n  }\n\n","sourceOld":"  @Ignore\n  public void testPerformance() throws Exception {\n    clearIndex();\n\n    Random r = random();\n    int initDocs = 200000;\n\n    for (int i = 1; i <= initDocs; i++) {\n      assertU(adoc(\"id\", \"\" + i, field(), (r.nextInt(10) + 1.00) + \",USD\"));\n      if (i % 1000 == 0)\n        System.out.println(i);\n    }\n\n    assertU(commit());\n    for (int i = 0; i < 1000; i++) {\n      double lower = r.nextInt(10) + 1.00;\n      assertQ(req(\"fl\", \"*,score\", \"q\", field()+\":[\" +  lower + \",USD TO \" + (lower + 10.00) + \",USD]\"), \"//*\");\n      assertQ(req(\"fl\", \"*,score\", \"q\", field()+\":[\" +  lower + \",EUR TO \" + (lower + 10.00) + \",EUR]\"), \"//*\");\n    }\n\n    for (int j = 0; j < 3; j++) {\n      final RTimer timer = new RTimer();\n      for (int i = 0; i < 1000; i++) {\n        double lower = r.nextInt(10) + 1.00;\n        assertQ(req(\"fl\", \"*,score\", \"q\", field()+\":[\" +  lower + \",USD TO \" + (lower + (9.99 - (j * 0.01))) + \",USD]\"), \"//*\");\n      }\n\n      System.out.println(timer.getTime());\n    }\n\n    System.out.println(\"---\");\n\n    for (int j = 0; j < 3; j++) {\n      final RTimer timer = new RTimer();\n      for (int i = 0; i < 1000; i++) {\n        double lower = r.nextInt(10) + 1.00;\n        assertQ(req(\"fl\", \"*,score\", \"q\", field()+\":[\" +  lower + \",EUR TO \" + (lower + (9.99 - (j * 0.01))) + \",EUR]\"), \"//*\");\n      }\n\n      System.out.println(timer.getTime());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTypeTest#testPerformance().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest#testPerformance().mjava","sourceNew":"  @Ignore\n  public void testPerformance() throws Exception {\n    clearIndex();\n\n    Random r = random();\n    int initDocs = 200000;\n\n    for (int i = 1; i <= initDocs; i++) {\n      assertU(adoc(\"id\", \"\" + i, fieldName, (r.nextInt(10) + 1.00) + \",USD\"));\n      if (i % 1000 == 0)\n        System.out.println(i);\n    }\n\n    assertU(commit());\n    for (int i = 0; i < 1000; i++) {\n      double lower = r.nextInt(10) + 1.00;\n      assertQ(req(\"fl\", \"*,score\", \"q\", fieldName+\":[\" +  lower + \",USD TO \" + (lower + 10.00) + \",USD]\"), \"//*\");\n      assertQ(req(\"fl\", \"*,score\", \"q\", fieldName+\":[\" +  lower + \",EUR TO \" + (lower + 10.00) + \",EUR]\"), \"//*\");\n    }\n\n    for (int j = 0; j < 3; j++) {\n      final RTimer timer = new RTimer();\n      for (int i = 0; i < 1000; i++) {\n        double lower = r.nextInt(10) + 1.00;\n        assertQ(req(\"fl\", \"*,score\", \"q\", fieldName+\":[\" +  lower + \",USD TO \" + (lower + (9.99 - (j * 0.01))) + \",USD]\"), \"//*\");\n      }\n\n      System.out.println(timer.getTime());\n    }\n\n    System.out.println(\"---\");\n\n    for (int j = 0; j < 3; j++) {\n      final RTimer timer = new RTimer();\n      for (int i = 0; i < 1000; i++) {\n        double lower = r.nextInt(10) + 1.00;\n        assertQ(req(\"fl\", \"*,score\", \"q\", fieldName+\":[\" +  lower + \",EUR TO \" + (lower + (9.99 - (j * 0.01))) + \",EUR]\"), \"//*\");\n      }\n\n      System.out.println(timer.getTime());\n    }\n  }\n\n","sourceOld":"  @Ignore\n  public void testPerformance() throws Exception {\n    clearIndex();\n\n    Random r = random();\n    int initDocs = 200000;\n\n    for (int i = 1; i <= initDocs; i++) {\n      assertU(adoc(\"id\", \"\" + i, field(), (r.nextInt(10) + 1.00) + \",USD\"));\n      if (i % 1000 == 0)\n        System.out.println(i);\n    }\n\n    assertU(commit());\n    for (int i = 0; i < 1000; i++) {\n      double lower = r.nextInt(10) + 1.00;\n      assertQ(req(\"fl\", \"*,score\", \"q\", field()+\":[\" +  lower + \",USD TO \" + (lower + 10.00) + \",USD]\"), \"//*\");\n      assertQ(req(\"fl\", \"*,score\", \"q\", field()+\":[\" +  lower + \",EUR TO \" + (lower + 10.00) + \",EUR]\"), \"//*\");\n    }\n\n    for (int j = 0; j < 3; j++) {\n      final RTimer timer = new RTimer();\n      for (int i = 0; i < 1000; i++) {\n        double lower = r.nextInt(10) + 1.00;\n        assertQ(req(\"fl\", \"*,score\", \"q\", field()+\":[\" +  lower + \",USD TO \" + (lower + (9.99 - (j * 0.01))) + \",USD]\"), \"//*\");\n      }\n\n      System.out.println(timer.getTime());\n    }\n\n    System.out.println(\"---\");\n\n    for (int j = 0; j < 3; j++) {\n      final RTimer timer = new RTimer();\n      for (int i = 0; i < 1000; i++) {\n        double lower = r.nextInt(10) + 1.00;\n        assertQ(req(\"fl\", \"*,score\", \"q\", field()+\":[\" +  lower + \",EUR TO \" + (lower + (9.99 - (j * 0.01))) + \",EUR]\"), \"//*\");\n      }\n\n      System.out.println(timer.getTime());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest#testPerformance().mjava","sourceNew":null,"sourceOld":"  @Ignore\n  public void testPerformance() throws Exception {\n    clearIndex();\n\n    Random r = random();\n    int initDocs = 200000;\n\n    for (int i = 1; i <= initDocs; i++) {\n      assertU(adoc(\"id\", \"\" + i, field(), (r.nextInt(10) + 1.00) + \",USD\"));\n      if (i % 1000 == 0)\n        System.out.println(i);\n    }\n\n    assertU(commit());\n    for (int i = 0; i < 1000; i++) {\n      double lower = r.nextInt(10) + 1.00;\n      assertQ(req(\"fl\", \"*,score\", \"q\", field()+\":[\" +  lower + \",USD TO \" + (lower + 10.00) + \",USD]\"), \"//*\");\n      assertQ(req(\"fl\", \"*,score\", \"q\", field()+\":[\" +  lower + \",EUR TO \" + (lower + 10.00) + \",EUR]\"), \"//*\");\n    }\n\n    for (int j = 0; j < 3; j++) {\n      final RTimer timer = new RTimer();\n      for (int i = 0; i < 1000; i++) {\n        double lower = r.nextInt(10) + 1.00;\n        assertQ(req(\"fl\", \"*,score\", \"q\", field()+\":[\" +  lower + \",USD TO \" + (lower + (9.99 - (j * 0.01))) + \",USD]\"), \"//*\");\n      }\n\n      System.out.println(timer.getTime());\n    }\n\n    System.out.println(\"---\");\n\n    for (int j = 0; j < 3; j++) {\n      final RTimer timer = new RTimer();\n      for (int i = 0; i < 1000; i++) {\n        double lower = r.nextInt(10) + 1.00;\n        assertQ(req(\"fl\", \"*,score\", \"q\", field()+\":[\" +  lower + \",EUR TO \" + (lower + (9.99 - (j * 0.01))) + \",EUR]\"), \"//*\");\n      }\n\n      System.out.println(timer.getTime());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ce5a0276b8637186ae6adfa516e332132d197ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["4ce5a0276b8637186ae6adfa516e332132d197ad"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["bcf9886c8ff537aafde14de48ebf744f5673f08b","f107636c2cc82350a2607d774c092da5b73152e5"],"28288370235ed02234a64753cdbf0c6ec096304a":["bcf9886c8ff537aafde14de48ebf744f5673f08b","f107636c2cc82350a2607d774c092da5b73152e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"f107636c2cc82350a2607d774c092da5b73152e5":["bcf9886c8ff537aafde14de48ebf744f5673f08b"]},"commit2Childs":{"4ce5a0276b8637186ae6adfa516e332132d197ad":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ce5a0276b8637186ae6adfa516e332132d197ad"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","f107636c2cc82350a2607d774c092da5b73152e5"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f107636c2cc82350a2607d774c092da5b73152e5":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}