{"path":"solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest#monitorZookeeper().mjava","commits":[{"id":"01f63edf15d2e3dbb3355d974f733b263098cb46","date":1533724999,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest#monitorZookeeper().mjava","pathOld":"/dev/null","sourceNew":"  /*\n    Test the monitoring endpoint, used in the Cloud => ZkStatus Admin UI screen\n    NOTE: We do not currently test with multiple zookeepers, but the only difference is that there are multiple \"details\" objects and mode is \"ensemble\"... \n   */\n  @Test\n  public void monitorZookeeper() throws IOException, SolrServerException, InterruptedException, ExecutionException, TimeoutException {\n    URL baseUrl = cluster.getJettySolrRunner(0).getBaseUrl();\n    HttpSolrClient solr = new HttpSolrClient.Builder(baseUrl.toString()).build();\n    GenericSolrRequest mntrReq = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/admin/zookeeper/status\", new ModifiableSolrParams());\n    mntrReq.setResponseParser(new DelegationTokenResponse.JsonMapResponseParser());\n    NamedList<Object> nl = solr.httpUriRequest(mntrReq).future.get(1000, TimeUnit.MILLISECONDS);\n\n    assertEquals(\"zkStatus\", nl.getName(1));\n    Map<String,Object> zkStatus = (Map<String,Object>) nl.get(\"zkStatus\");\n    assertEquals(\"green\", zkStatus.get(\"status\"));\n    assertEquals(\"standalone\", zkStatus.get(\"mode\"));\n    assertEquals(1L, zkStatus.get(\"ensembleSize\"));\n    List<Object> detailsList = (List<Object>)zkStatus.get(\"details\");\n    assertEquals(1, detailsList.size());\n    Map<String,Object> details = (Map<String,Object>) detailsList.get(0);\n    assertEquals(true, details.get(\"ok\"));\n    assertTrue(Integer.parseInt((String) details.get(\"zk_znode_count\")) > 50);\n    solr.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a","date":1536291831,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest#monitorZookeeper().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest#monitorZookeeper().mjava","sourceNew":"  /*\n    Test the monitoring endpoint, used in the Cloud => ZkStatus Admin UI screen\n    NOTE: We do not currently test with multiple zookeepers, but the only difference is that there are multiple \"details\" objects and mode is \"ensemble\"... \n   */\n  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 6-Sep-2018\n  public void monitorZookeeper() throws IOException, SolrServerException, InterruptedException, ExecutionException, TimeoutException {\n    URL baseUrl = cluster.getJettySolrRunner(0).getBaseUrl();\n    HttpSolrClient solr = new HttpSolrClient.Builder(baseUrl.toString()).build();\n    GenericSolrRequest mntrReq = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/admin/zookeeper/status\", new ModifiableSolrParams());\n    mntrReq.setResponseParser(new DelegationTokenResponse.JsonMapResponseParser());\n    NamedList<Object> nl = solr.httpUriRequest(mntrReq).future.get(1000, TimeUnit.MILLISECONDS);\n\n    assertEquals(\"zkStatus\", nl.getName(1));\n    Map<String,Object> zkStatus = (Map<String,Object>) nl.get(\"zkStatus\");\n    assertEquals(\"green\", zkStatus.get(\"status\"));\n    assertEquals(\"standalone\", zkStatus.get(\"mode\"));\n    assertEquals(1L, zkStatus.get(\"ensembleSize\"));\n    List<Object> detailsList = (List<Object>)zkStatus.get(\"details\");\n    assertEquals(1, detailsList.size());\n    Map<String,Object> details = (Map<String,Object>) detailsList.get(0);\n    assertEquals(true, details.get(\"ok\"));\n    assertTrue(Integer.parseInt((String) details.get(\"zk_znode_count\")) > 50);\n    solr.close();\n  }\n\n","sourceOld":"  /*\n    Test the monitoring endpoint, used in the Cloud => ZkStatus Admin UI screen\n    NOTE: We do not currently test with multiple zookeepers, but the only difference is that there are multiple \"details\" objects and mode is \"ensemble\"... \n   */\n  @Test\n  public void monitorZookeeper() throws IOException, SolrServerException, InterruptedException, ExecutionException, TimeoutException {\n    URL baseUrl = cluster.getJettySolrRunner(0).getBaseUrl();\n    HttpSolrClient solr = new HttpSolrClient.Builder(baseUrl.toString()).build();\n    GenericSolrRequest mntrReq = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/admin/zookeeper/status\", new ModifiableSolrParams());\n    mntrReq.setResponseParser(new DelegationTokenResponse.JsonMapResponseParser());\n    NamedList<Object> nl = solr.httpUriRequest(mntrReq).future.get(1000, TimeUnit.MILLISECONDS);\n\n    assertEquals(\"zkStatus\", nl.getName(1));\n    Map<String,Object> zkStatus = (Map<String,Object>) nl.get(\"zkStatus\");\n    assertEquals(\"green\", zkStatus.get(\"status\"));\n    assertEquals(\"standalone\", zkStatus.get(\"mode\"));\n    assertEquals(1L, zkStatus.get(\"ensembleSize\"));\n    List<Object> detailsList = (List<Object>)zkStatus.get(\"details\");\n    assertEquals(1, detailsList.size());\n    Map<String,Object> details = (Map<String,Object>) detailsList.get(0);\n    assertEquals(true, details.get(\"ok\"));\n    assertTrue(Integer.parseInt((String) details.get(\"zk_znode_count\")) > 50);\n    solr.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest#monitorZookeeper().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest#monitorZookeeper().mjava","sourceNew":"  /*\n    Test the monitoring endpoint, used in the Cloud => ZkStatus Admin UI screen\n    NOTE: We do not currently test with multiple zookeepers, but the only difference is that there are multiple \"details\" objects and mode is \"ensemble\"... \n   */\n  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 6-Sep-2018\n  public void monitorZookeeper() throws IOException, SolrServerException, InterruptedException, ExecutionException, TimeoutException {\n    URL baseUrl = cluster.getJettySolrRunner(0).getBaseUrl();\n    HttpSolrClient solr = new HttpSolrClient.Builder(baseUrl.toString()).build();\n    GenericSolrRequest mntrReq = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/admin/zookeeper/status\", new ModifiableSolrParams());\n    mntrReq.setResponseParser(new DelegationTokenResponse.JsonMapResponseParser());\n    NamedList<Object> nl = solr.httpUriRequest(mntrReq).future.get(10000, TimeUnit.MILLISECONDS);\n\n    assertEquals(\"zkStatus\", nl.getName(1));\n    Map<String,Object> zkStatus = (Map<String,Object>) nl.get(\"zkStatus\");\n    assertEquals(\"green\", zkStatus.get(\"status\"));\n    assertEquals(\"standalone\", zkStatus.get(\"mode\"));\n    assertEquals(1L, zkStatus.get(\"ensembleSize\"));\n    List<Object> detailsList = (List<Object>)zkStatus.get(\"details\");\n    assertEquals(1, detailsList.size());\n    Map<String,Object> details = (Map<String,Object>) detailsList.get(0);\n    assertEquals(true, details.get(\"ok\"));\n    assertTrue(Integer.parseInt((String) details.get(\"zk_znode_count\")) > 50);\n    solr.close();\n  }\n\n","sourceOld":"  /*\n    Test the monitoring endpoint, used in the Cloud => ZkStatus Admin UI screen\n    NOTE: We do not currently test with multiple zookeepers, but the only difference is that there are multiple \"details\" objects and mode is \"ensemble\"... \n   */\n  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 6-Sep-2018\n  public void monitorZookeeper() throws IOException, SolrServerException, InterruptedException, ExecutionException, TimeoutException {\n    URL baseUrl = cluster.getJettySolrRunner(0).getBaseUrl();\n    HttpSolrClient solr = new HttpSolrClient.Builder(baseUrl.toString()).build();\n    GenericSolrRequest mntrReq = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/admin/zookeeper/status\", new ModifiableSolrParams());\n    mntrReq.setResponseParser(new DelegationTokenResponse.JsonMapResponseParser());\n    NamedList<Object> nl = solr.httpUriRequest(mntrReq).future.get(1000, TimeUnit.MILLISECONDS);\n\n    assertEquals(\"zkStatus\", nl.getName(1));\n    Map<String,Object> zkStatus = (Map<String,Object>) nl.get(\"zkStatus\");\n    assertEquals(\"green\", zkStatus.get(\"status\"));\n    assertEquals(\"standalone\", zkStatus.get(\"mode\"));\n    assertEquals(1L, zkStatus.get(\"ensembleSize\"));\n    List<Object> detailsList = (List<Object>)zkStatus.get(\"details\");\n    assertEquals(1, detailsList.size());\n    Map<String,Object> details = (Map<String,Object>) detailsList.get(0);\n    assertEquals(true, details.get(\"ok\"));\n    assertTrue(Integer.parseInt((String) details.get(\"zk_znode_count\")) > 50);\n    solr.close();\n  }\n\n","bugFix":["01f63edf15d2e3dbb3355d974f733b263098cb46"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d35c84fdef07284c122012ca4000d3b7285a66e","date":1545962630,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest#monitorZookeeper().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest#monitorZookeeper().mjava","sourceNew":"  /*\n    Test the monitoring endpoint, used in the Cloud => ZkStatus Admin UI screen\n    NOTE: We do not currently test with multiple zookeepers, but the only difference is that there are multiple \"details\" objects and mode is \"ensemble\"... \n   */\n  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 6-Sep-2018\n  public void monitorZookeeper() throws IOException, SolrServerException, InterruptedException, ExecutionException, TimeoutException {\n    URL baseUrl = cluster.getJettySolrRunner(0).getBaseUrl();\n    HttpSolrClient solr = new HttpSolrClient.Builder(baseUrl.toString()).build();\n    GenericSolrRequest mntrReq = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/admin/zookeeper/status\", new ModifiableSolrParams());\n    mntrReq.setResponseParser(new DelegationTokenResponse.JsonMapResponseParser());\n    NamedList<Object> nl = solr.httpUriRequest(mntrReq).future.get(10000, TimeUnit.MILLISECONDS);\n\n    assertEquals(\"zkStatus\", nl.getName(1));\n    Map<String,Object> zkStatus = (Map<String,Object>) nl.get(\"zkStatus\");\n    assertEquals(\"green\", zkStatus.get(\"status\"));\n    assertEquals(\"standalone\", zkStatus.get(\"mode\"));\n    assertEquals(1L, zkStatus.get(\"ensembleSize\"));\n    List<Object> detailsList = (List<Object>)zkStatus.get(\"details\");\n    assertEquals(1, detailsList.size());\n    Map<String,Object> details = (Map<String,Object>) detailsList.get(0);\n    assertEquals(true, details.get(\"ok\"));\n    assertTrue(Integer.parseInt((String) details.get(\"zk_znode_count\")) > 50);\n    solr.close();\n  }\n\n","sourceOld":"  /*\n    Test the monitoring endpoint, used in the Cloud => ZkStatus Admin UI screen\n    NOTE: We do not currently test with multiple zookeepers, but the only difference is that there are multiple \"details\" objects and mode is \"ensemble\"... \n   */\n  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 6-Sep-2018\n  public void monitorZookeeper() throws IOException, SolrServerException, InterruptedException, ExecutionException, TimeoutException {\n    URL baseUrl = cluster.getJettySolrRunner(0).getBaseUrl();\n    HttpSolrClient solr = new HttpSolrClient.Builder(baseUrl.toString()).build();\n    GenericSolrRequest mntrReq = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/admin/zookeeper/status\", new ModifiableSolrParams());\n    mntrReq.setResponseParser(new DelegationTokenResponse.JsonMapResponseParser());\n    NamedList<Object> nl = solr.httpUriRequest(mntrReq).future.get(10000, TimeUnit.MILLISECONDS);\n\n    assertEquals(\"zkStatus\", nl.getName(1));\n    Map<String,Object> zkStatus = (Map<String,Object>) nl.get(\"zkStatus\");\n    assertEquals(\"green\", zkStatus.get(\"status\"));\n    assertEquals(\"standalone\", zkStatus.get(\"mode\"));\n    assertEquals(1L, zkStatus.get(\"ensembleSize\"));\n    List<Object> detailsList = (List<Object>)zkStatus.get(\"details\");\n    assertEquals(1, detailsList.size());\n    Map<String,Object> details = (Map<String,Object>) detailsList.get(0);\n    assertEquals(true, details.get(\"ok\"));\n    assertTrue(Integer.parseInt((String) details.get(\"zk_znode_count\")) > 50);\n    solr.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1778938cb7fb298e6e07a43e2d5acaf552d61518","date":1559609435,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest#monitorZookeeper().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest#monitorZookeeper().mjava","sourceNew":"  /*\n    Test the monitoring endpoint, used in the Cloud => ZkStatus Admin UI screen\n    NOTE: We do not currently test with multiple zookeepers, but the only difference is that there are multiple \"details\" objects and mode is \"ensemble\"... \n   */\n  @Test\n  public void monitorZookeeper() throws IOException, SolrServerException, InterruptedException, ExecutionException, TimeoutException {\n    URL baseUrl = cluster.getJettySolrRunner(0).getBaseUrl();\n    HttpSolrClient solr = new HttpSolrClient.Builder(baseUrl.toString()).build();\n    GenericSolrRequest mntrReq = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/admin/zookeeper/status\", new ModifiableSolrParams());\n    mntrReq.setResponseParser(new DelegationTokenResponse.JsonMapResponseParser());\n    NamedList<Object> nl = solr.httpUriRequest(mntrReq).future.get(10000, TimeUnit.MILLISECONDS);\n\n    assertEquals(\"zkStatus\", nl.getName(1));\n    Map<String,Object> zkStatus = (Map<String,Object>) nl.get(\"zkStatus\");\n    assertEquals(\"green\", zkStatus.get(\"status\"));\n    assertEquals(\"standalone\", zkStatus.get(\"mode\"));\n    assertEquals(1L, zkStatus.get(\"ensembleSize\"));\n    List<Object> detailsList = (List<Object>)zkStatus.get(\"details\");\n    assertEquals(1, detailsList.size());\n    Map<String,Object> details = (Map<String,Object>) detailsList.get(0);\n    assertEquals(true, details.get(\"ok\"));\n    assertTrue(Integer.parseInt((String) details.get(\"zk_znode_count\")) > 50);\n    solr.close();\n  }\n\n","sourceOld":"  /*\n    Test the monitoring endpoint, used in the Cloud => ZkStatus Admin UI screen\n    NOTE: We do not currently test with multiple zookeepers, but the only difference is that there are multiple \"details\" objects and mode is \"ensemble\"... \n   */\n  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 6-Sep-2018\n  public void monitorZookeeper() throws IOException, SolrServerException, InterruptedException, ExecutionException, TimeoutException {\n    URL baseUrl = cluster.getJettySolrRunner(0).getBaseUrl();\n    HttpSolrClient solr = new HttpSolrClient.Builder(baseUrl.toString()).build();\n    GenericSolrRequest mntrReq = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/admin/zookeeper/status\", new ModifiableSolrParams());\n    mntrReq.setResponseParser(new DelegationTokenResponse.JsonMapResponseParser());\n    NamedList<Object> nl = solr.httpUriRequest(mntrReq).future.get(10000, TimeUnit.MILLISECONDS);\n\n    assertEquals(\"zkStatus\", nl.getName(1));\n    Map<String,Object> zkStatus = (Map<String,Object>) nl.get(\"zkStatus\");\n    assertEquals(\"green\", zkStatus.get(\"status\"));\n    assertEquals(\"standalone\", zkStatus.get(\"mode\"));\n    assertEquals(1L, zkStatus.get(\"ensembleSize\"));\n    List<Object> detailsList = (List<Object>)zkStatus.get(\"details\");\n    assertEquals(1, detailsList.size());\n    Map<String,Object> details = (Map<String,Object>) detailsList.get(0);\n    assertEquals(true, details.get(\"ok\"));\n    assertTrue(Integer.parseInt((String) details.get(\"zk_znode_count\")) > 50);\n    solr.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd680b8f0b159dc1c7a01439c3c7f065bf3e69c7","date":1583235377,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest#monitorZookeeper().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest#monitorZookeeper().mjava","sourceNew":"  /*\n    Test the monitoring endpoint, used in the Cloud => ZkStatus Admin UI screen\n    NOTE: We do not currently test with multiple zookeepers, but the only difference is that there are multiple \"details\" objects and mode is \"ensemble\"... \n   */\n  @Test\n  public void monitorZookeeper() throws IOException, SolrServerException, InterruptedException, ExecutionException, TimeoutException {\n    URL baseUrl = cluster.getJettySolrRunner(0).getBaseUrl();\n    HttpSolrClient solr = new HttpSolrClient.Builder(baseUrl.toString()).build();\n    GenericSolrRequest mntrReq = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/admin/zookeeper/status\", new ModifiableSolrParams());\n    mntrReq.setResponseParser(new DelegationTokenResponse.JsonMapResponseParser());\n    NamedList<Object> nl = solr.httpUriRequest(mntrReq).future.get(10000, TimeUnit.MILLISECONDS);\n\n    assertEquals(\"zkStatus\", nl.getName(1));\n    Map<String, Object> zkStatus = (Map<String, Object>) nl.get(\"zkStatus\");\n    assertEquals(\"green\", zkStatus.get(\"status\"));\n    assertEquals(\"standalone\", zkStatus.get(\"mode\"));\n    assertEquals(1L, zkStatus.get(\"ensembleSize\"));\n    List<Object> detailsList = (List<Object>) zkStatus.get(\"details\");\n    assertEquals(1, detailsList.size());\n    Map<String, Object> details = (Map<String, Object>) detailsList.get(0);\n    assertEquals(true, details.get(\"ok\"));\n    assertTrue(Integer.parseInt((String) details.get(\"zk_znode_count\")) > 50);\n    solr.close();\n  }\n\n","sourceOld":"  /*\n    Test the monitoring endpoint, used in the Cloud => ZkStatus Admin UI screen\n    NOTE: We do not currently test with multiple zookeepers, but the only difference is that there are multiple \"details\" objects and mode is \"ensemble\"... \n   */\n  @Test\n  public void monitorZookeeper() throws IOException, SolrServerException, InterruptedException, ExecutionException, TimeoutException {\n    URL baseUrl = cluster.getJettySolrRunner(0).getBaseUrl();\n    HttpSolrClient solr = new HttpSolrClient.Builder(baseUrl.toString()).build();\n    GenericSolrRequest mntrReq = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/admin/zookeeper/status\", new ModifiableSolrParams());\n    mntrReq.setResponseParser(new DelegationTokenResponse.JsonMapResponseParser());\n    NamedList<Object> nl = solr.httpUriRequest(mntrReq).future.get(10000, TimeUnit.MILLISECONDS);\n\n    assertEquals(\"zkStatus\", nl.getName(1));\n    Map<String,Object> zkStatus = (Map<String,Object>) nl.get(\"zkStatus\");\n    assertEquals(\"green\", zkStatus.get(\"status\"));\n    assertEquals(\"standalone\", zkStatus.get(\"mode\"));\n    assertEquals(1L, zkStatus.get(\"ensembleSize\"));\n    List<Object> detailsList = (List<Object>)zkStatus.get(\"details\");\n    assertEquals(1, detailsList.size());\n    Map<String,Object> details = (Map<String,Object>) detailsList.get(0);\n    assertEquals(true, details.get(\"ok\"));\n    assertTrue(Integer.parseInt((String) details.get(\"zk_znode_count\")) > 50);\n    solr.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38fb691372ae1411a8a486192885334fd3ae7244","date":1583496514,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest#monitorZookeeper().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest#monitorZookeeper().mjava","sourceNew":"  /*\n    Test the monitoring endpoint, used in the Cloud => ZkStatus Admin UI screen\n    NOTE: We do not currently test with multiple zookeepers, but the only difference is that there are multiple \"details\" objects and mode is \"ensemble\"... \n   */\n  @Test\n  public void monitorZookeeper() throws IOException, SolrServerException, InterruptedException, ExecutionException, TimeoutException {\n    URL baseUrl = cluster.getJettySolrRunner(0).getBaseUrl();\n    HttpSolrClient solr = new HttpSolrClient.Builder(baseUrl.toString()).build();\n    GenericSolrRequest mntrReq = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/admin/zookeeper/status\", new ModifiableSolrParams());\n    mntrReq.setResponseParser(new DelegationTokenResponse.JsonMapResponseParser());\n    NamedList<Object> nl = solr.httpUriRequest(mntrReq).future.get(10000, TimeUnit.MILLISECONDS);\n\n    assertEquals(\"zkStatus\", nl.getName(1));\n    Map<String,Object> zkStatus = (Map<String,Object>) nl.get(\"zkStatus\");\n    assertEquals(\"green\", zkStatus.get(\"status\"));\n    assertEquals(\"standalone\", zkStatus.get(\"mode\"));\n    assertEquals(1L, zkStatus.get(\"ensembleSize\"));\n    List<Object> detailsList = (List<Object>)zkStatus.get(\"details\");\n    assertEquals(1, detailsList.size());\n    Map<String,Object> details = (Map<String,Object>) detailsList.get(0);\n    assertEquals(true, details.get(\"ok\"));\n    assertTrue(Integer.parseInt((String) details.get(\"zk_znode_count\")) > 50);\n    solr.close();\n  }\n\n","sourceOld":"  /*\n    Test the monitoring endpoint, used in the Cloud => ZkStatus Admin UI screen\n    NOTE: We do not currently test with multiple zookeepers, but the only difference is that there are multiple \"details\" objects and mode is \"ensemble\"... \n   */\n  @Test\n  public void monitorZookeeper() throws IOException, SolrServerException, InterruptedException, ExecutionException, TimeoutException {\n    URL baseUrl = cluster.getJettySolrRunner(0).getBaseUrl();\n    HttpSolrClient solr = new HttpSolrClient.Builder(baseUrl.toString()).build();\n    GenericSolrRequest mntrReq = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/admin/zookeeper/status\", new ModifiableSolrParams());\n    mntrReq.setResponseParser(new DelegationTokenResponse.JsonMapResponseParser());\n    NamedList<Object> nl = solr.httpUriRequest(mntrReq).future.get(10000, TimeUnit.MILLISECONDS);\n\n    assertEquals(\"zkStatus\", nl.getName(1));\n    Map<String, Object> zkStatus = (Map<String, Object>) nl.get(\"zkStatus\");\n    assertEquals(\"green\", zkStatus.get(\"status\"));\n    assertEquals(\"standalone\", zkStatus.get(\"mode\"));\n    assertEquals(1L, zkStatus.get(\"ensembleSize\"));\n    List<Object> detailsList = (List<Object>) zkStatus.get(\"details\");\n    assertEquals(1, detailsList.size());\n    Map<String, Object> details = (Map<String, Object>) detailsList.get(0);\n    assertEquals(true, details.get(\"ok\"));\n    assertTrue(Integer.parseInt((String) details.get(\"zk_znode_count\")) > 50);\n    solr.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest#monitorZookeeper().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/ZookeeperStatusHandlerTest#monitorZookeeper().mjava","sourceNew":"  /*\n    Test the monitoring endpoint, used in the Cloud => ZkStatus Admin UI screen\n    NOTE: We do not currently test with multiple zookeepers, but the only difference is that there are multiple \"details\" objects and mode is \"ensemble\"... \n   */\n  @Test\n  public void monitorZookeeper() throws IOException, SolrServerException, InterruptedException, ExecutionException, TimeoutException {\n    URL baseUrl = cluster.getJettySolrRunner(0).getBaseUrl();\n    HttpSolrClient solr = new HttpSolrClient.Builder(baseUrl.toString()).build();\n    GenericSolrRequest mntrReq = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/admin/zookeeper/status\", new ModifiableSolrParams());\n    mntrReq.setResponseParser(new DelegationTokenResponse.JsonMapResponseParser());\n    NamedList<Object> nl = solr.httpUriRequest(mntrReq).future.get(10000, TimeUnit.MILLISECONDS);\n\n    assertEquals(\"zkStatus\", nl.getName(1));\n    @SuppressWarnings({\"unchecked\"})\n    Map<String,Object> zkStatus = (Map<String,Object>) nl.get(\"zkStatus\");\n    assertEquals(\"green\", zkStatus.get(\"status\"));\n    assertEquals(\"standalone\", zkStatus.get(\"mode\"));\n    assertEquals(1L, zkStatus.get(\"ensembleSize\"));\n    @SuppressWarnings({\"unchecked\"})\n    List<Object> detailsList = (List<Object>)zkStatus.get(\"details\");\n    assertEquals(1, detailsList.size());\n    @SuppressWarnings({\"unchecked\"})\n    Map<String,Object> details = (Map<String,Object>) detailsList.get(0);\n    assertEquals(true, details.get(\"ok\"));\n    assertTrue(Integer.parseInt((String) details.get(\"zk_znode_count\")) > 50);\n    solr.close();\n  }\n\n","sourceOld":"  /*\n    Test the monitoring endpoint, used in the Cloud => ZkStatus Admin UI screen\n    NOTE: We do not currently test with multiple zookeepers, but the only difference is that there are multiple \"details\" objects and mode is \"ensemble\"... \n   */\n  @Test\n  public void monitorZookeeper() throws IOException, SolrServerException, InterruptedException, ExecutionException, TimeoutException {\n    URL baseUrl = cluster.getJettySolrRunner(0).getBaseUrl();\n    HttpSolrClient solr = new HttpSolrClient.Builder(baseUrl.toString()).build();\n    GenericSolrRequest mntrReq = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/admin/zookeeper/status\", new ModifiableSolrParams());\n    mntrReq.setResponseParser(new DelegationTokenResponse.JsonMapResponseParser());\n    NamedList<Object> nl = solr.httpUriRequest(mntrReq).future.get(10000, TimeUnit.MILLISECONDS);\n\n    assertEquals(\"zkStatus\", nl.getName(1));\n    Map<String,Object> zkStatus = (Map<String,Object>) nl.get(\"zkStatus\");\n    assertEquals(\"green\", zkStatus.get(\"status\"));\n    assertEquals(\"standalone\", zkStatus.get(\"mode\"));\n    assertEquals(1L, zkStatus.get(\"ensembleSize\"));\n    List<Object> detailsList = (List<Object>)zkStatus.get(\"details\");\n    assertEquals(1, detailsList.size());\n    Map<String,Object> details = (Map<String,Object>) detailsList.get(0);\n    assertEquals(true, details.get(\"ok\"));\n    assertTrue(Integer.parseInt((String) details.get(\"zk_znode_count\")) > 50);\n    solr.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a":["01f63edf15d2e3dbb3355d974f733b263098cb46"],"38fb691372ae1411a8a486192885334fd3ae7244":["bd680b8f0b159dc1c7a01439c3c7f065bf3e69c7"],"01f63edf15d2e3dbb3355d974f733b263098cb46":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bd680b8f0b159dc1c7a01439c3c7f065bf3e69c7":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["38fb691372ae1411a8a486192885334fd3ae7244"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["01f63edf15d2e3dbb3355d974f733b263098cb46"],"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"38fb691372ae1411a8a486192885334fd3ae7244":["e98520789adb1d5ad05afb4956eca0944a929688"],"01f63edf15d2e3dbb3355d974f733b263098cb46":["f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a"],"bd680b8f0b159dc1c7a01439c3c7f065bf3e69c7":["38fb691372ae1411a8a486192885334fd3ae7244"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["bd680b8f0b159dc1c7a01439c3c7f065bf3e69c7"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}