{"path":"src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","commits":[{"id":"fa96fdb58cefcada21fc51faf37114033f044f3f","date":1180916840,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","pathOld":"/dev/null","sourceNew":"  public void testInterface()\n  {\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    SolrCore core = SolrCore.getSolrCore();\n    \n    Map<String,String[]> params = new HashMap<String,String[]>();\n    MultiMapSolrParams mmparams = new MultiMapSolrParams( params );\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, (SolrParams)mmparams ) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0c49644277f679076861896c254bd95b97909b74","0c49644277f679076861896c254bd95b97909b74","0c49644277f679076861896c254bd95b97909b74","be4da9fa3a0ba5b4246b7587ae016cf1f57bf865"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6d6338c87060be5f66757a94945975f3bbd377a9","date":1189278234,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","pathOld":"src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","sourceNew":"  public void testInterface()\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    Map<String,String[]> params = new HashMap<String,String[]>();\n    MultiMapSolrParams mmparams = new MultiMapSolrParams( params );\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, (SolrParams)mmparams ) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n  }\n\n","sourceOld":"  public void testInterface()\n  {\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    SolrCore core = SolrCore.getSolrCore();\n    \n    Map<String,String[]> params = new HashMap<String,String[]>();\n    MultiMapSolrParams mmparams = new MultiMapSolrParams( params );\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, (SolrParams)mmparams ) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dd36d5d7353f6cf7c2cccbd79385b298db7bc906","date":1213706937,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","pathOld":"src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","sourceNew":"  public void testInterface()\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    Map<String,String[]> params = new HashMap<String,String[]>();\n    MultiMapSolrParams mmparams = new MultiMapSolrParams( params );\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, (SolrParams)mmparams ) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    \n    assertU(adoc(new String[]{\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\"}));\n    assertU(adoc(new String[]{\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\"}));\n    assertU(adoc(new String[]{\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"}));\n    assertU(adoc(new String[]{\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"}));\n    assertU(adoc(new String[]{\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"}));\n    assertU(commit());\n\n    params.put(CommonParams.Q, new String[]{\"id:42\"});\n    params.put(MoreLikeThisParams.MLT, new String[]{\"true\"});\n    params.put(MoreLikeThisParams.SIMILARITY_FIELDS, new String[]{\"name,subword\"});\n    params.put(MoreLikeThisParams.INTERESTING_TERMS,new String[]{\"details\"});\n    params.put(MoreLikeThisParams.MIN_TERM_FREQ,new String[]{\"1\"});\n    params.put(MoreLikeThisParams.MIN_DOC_FREQ,new String[]{\"1\"});\n    \n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, (SolrParams)mmparams);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.put(CommonParams.Q, new String[]{\"id:44\"});\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n    \n    params.put(CommonParams.Q, new String[]{\"id:42\"}); \n    params.put(MoreLikeThisParams.QF,new String[]{\"name^5.0 subword^0.1\"});\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n    \n  }\n\n","sourceOld":"  public void testInterface()\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    Map<String,String[]> params = new HashMap<String,String[]>();\n    MultiMapSolrParams mmparams = new MultiMapSolrParams( params );\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, (SolrParams)mmparams ) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n  }\n\n","bugFix":null,"bugIntro":["0c49644277f679076861896c254bd95b97909b74","0c49644277f679076861896c254bd95b97909b74","0c49644277f679076861896c254bd95b97909b74","be4da9fa3a0ba5b4246b7587ae016cf1f57bf865"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"12925d9335ba6189c7f25c39780e9da11bccd551","date":1258952859,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","pathOld":"src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","sourceNew":"  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    Map<String,String[]> params = new HashMap<String,String[]>();\n    MultiMapSolrParams mmparams = new MultiMapSolrParams( params );\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, (SolrParams)mmparams ) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.put(CommonParams.Q, new String[]{\"id:42\"});\n    params.put(MoreLikeThisParams.MLT, new String[]{\"true\"});\n    params.put(MoreLikeThisParams.SIMILARITY_FIELDS, new String[]{\"name,subword,foo_ti\"});\n    params.put(MoreLikeThisParams.INTERESTING_TERMS,new String[]{\"details\"});\n    params.put(MoreLikeThisParams.MIN_TERM_FREQ,new String[]{\"1\"});\n    params.put(MoreLikeThisParams.MIN_DOC_FREQ,new String[]{\"1\"});\n    params.put(\"indent\",new String[]{\"true\"});\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, (SolrParams)mmparams);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.put(CommonParams.Q, new String[]{\"id:44\"});\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n    \n    params.put(CommonParams.Q, new String[]{\"id:42\"}); \n    params.put(MoreLikeThisParams.QF,new String[]{\"name^5.0 subword^0.1\"});\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n  }\n\n","sourceOld":"  public void testInterface()\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    Map<String,String[]> params = new HashMap<String,String[]>();\n    MultiMapSolrParams mmparams = new MultiMapSolrParams( params );\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, (SolrParams)mmparams ) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    \n    assertU(adoc(new String[]{\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\"}));\n    assertU(adoc(new String[]{\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\"}));\n    assertU(adoc(new String[]{\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"}));\n    assertU(adoc(new String[]{\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"}));\n    assertU(adoc(new String[]{\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"}));\n    assertU(commit());\n\n    params.put(CommonParams.Q, new String[]{\"id:42\"});\n    params.put(MoreLikeThisParams.MLT, new String[]{\"true\"});\n    params.put(MoreLikeThisParams.SIMILARITY_FIELDS, new String[]{\"name,subword\"});\n    params.put(MoreLikeThisParams.INTERESTING_TERMS,new String[]{\"details\"});\n    params.put(MoreLikeThisParams.MIN_TERM_FREQ,new String[]{\"1\"});\n    params.put(MoreLikeThisParams.MIN_DOC_FREQ,new String[]{\"1\"});\n    \n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, (SolrParams)mmparams);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.put(CommonParams.Q, new String[]{\"id:44\"});\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n    \n    params.put(CommonParams.Q, new String[]{\"id:42\"}); \n    params.put(MoreLikeThisParams.QF,new String[]{\"name^5.0 subword^0.1\"});\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n    \n  }\n\n","bugFix":null,"bugIntro":["0c49644277f679076861896c254bd95b97909b74","0c49644277f679076861896c254bd95b97909b74","0c49644277f679076861896c254bd95b97909b74","be4da9fa3a0ba5b4246b7587ae016cf1f57bf865"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","pathOld":"src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","sourceNew":"  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    Map<String,String[]> params = new HashMap<String,String[]>();\n    MultiMapSolrParams mmparams = new MultiMapSolrParams( params );\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, (SolrParams)mmparams ) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.put(CommonParams.Q, new String[]{\"id:42\"});\n    params.put(MoreLikeThisParams.MLT, new String[]{\"true\"});\n    params.put(MoreLikeThisParams.SIMILARITY_FIELDS, new String[]{\"name,subword,foo_ti\"});\n    params.put(MoreLikeThisParams.INTERESTING_TERMS,new String[]{\"details\"});\n    params.put(MoreLikeThisParams.MIN_TERM_FREQ,new String[]{\"1\"});\n    params.put(MoreLikeThisParams.MIN_DOC_FREQ,new String[]{\"1\"});\n    params.put(\"indent\",new String[]{\"true\"});\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, (SolrParams)mmparams);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.put(CommonParams.Q, new String[]{\"id:44\"});\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n    \n    params.put(CommonParams.Q, new String[]{\"id:42\"}); \n    params.put(MoreLikeThisParams.QF,new String[]{\"name^5.0 subword^0.1\"});\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n  }\n\n","sourceOld":"  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    Map<String,String[]> params = new HashMap<String,String[]>();\n    MultiMapSolrParams mmparams = new MultiMapSolrParams( params );\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, (SolrParams)mmparams ) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.put(CommonParams.Q, new String[]{\"id:42\"});\n    params.put(MoreLikeThisParams.MLT, new String[]{\"true\"});\n    params.put(MoreLikeThisParams.SIMILARITY_FIELDS, new String[]{\"name,subword,foo_ti\"});\n    params.put(MoreLikeThisParams.INTERESTING_TERMS,new String[]{\"details\"});\n    params.put(MoreLikeThisParams.MIN_TERM_FREQ,new String[]{\"1\"});\n    params.put(MoreLikeThisParams.MIN_DOC_FREQ,new String[]{\"1\"});\n    params.put(\"indent\",new String[]{\"true\"});\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, (SolrParams)mmparams);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.put(CommonParams.Q, new String[]{\"id:44\"});\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n    \n    params.put(CommonParams.Q, new String[]{\"id:42\"}); \n    params.put(MoreLikeThisParams.QF,new String[]{\"name^5.0 subword^0.1\"});\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6d6338c87060be5f66757a94945975f3bbd377a9":["fa96fdb58cefcada21fc51faf37114033f044f3f"],"dd36d5d7353f6cf7c2cccbd79385b298db7bc906":["6d6338c87060be5f66757a94945975f3bbd377a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"fa96fdb58cefcada21fc51faf37114033f044f3f":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["12925d9335ba6189c7f25c39780e9da11bccd551"],"12925d9335ba6189c7f25c39780e9da11bccd551":["dd36d5d7353f6cf7c2cccbd79385b298db7bc906"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6d6338c87060be5f66757a94945975f3bbd377a9":["dd36d5d7353f6cf7c2cccbd79385b298db7bc906"],"dd36d5d7353f6cf7c2cccbd79385b298db7bc906":["12925d9335ba6189c7f25c39780e9da11bccd551"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["fa96fdb58cefcada21fc51faf37114033f044f3f"],"fa96fdb58cefcada21fc51faf37114033f044f3f":["6d6338c87060be5f66757a94945975f3bbd377a9"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"12925d9335ba6189c7f25c39780e9da11bccd551":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}