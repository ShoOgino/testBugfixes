{"path":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonScorer#TermAutomatonScorer(TermAutomatonWeight,EnumAndScorer[],int,Map[Integer,BytesRef],Similarity.SimScorer).mjava","commits":[{"id":"06a4493f0c732d2928d1a4f773f15d19434aa8ba","date":1405856163,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonScorer#TermAutomatonScorer(TermAutomatonWeight,EnumAndScorer[],int,Map[Integer,BytesRef],Similarity.SimScorer).mjava","pathOld":"/dev/null","sourceNew":"  public TermAutomatonScorer(TermAutomatonWeight weight, EnumAndScorer[] subs, int anyTermID, Map<Integer,BytesRef> idToTerm, Similarity.SimScorer docScorer) throws IOException {\n    super(weight);\n    //System.out.println(\"  automaton:\\n\" + weight.automaton.toDot());\n    this.runAutomaton = new TermRunAutomaton(weight.automaton, subs.length);\n    this.docScorer = docScorer;\n    this.idToTerm = idToTerm;\n    this.subs = subs;\n    this.docIDQueue = new DocIDQueue(subs.length);\n    this.posQueue = new PositionQueue(subs.length);\n    this.anyTermID = anyTermID;\n    this.subsOnDoc = new EnumAndScorer[subs.length];\n    this.positions = new PosState[4];\n    for(int i=0;i<this.positions.length;i++) {\n      this.positions[i] = new PosState();\n    }\n    long cost = 0;\n\n    // Init docIDQueue:\n    for(EnumAndScorer sub : subs) {\n      if (sub != null) {\n        cost += sub.posEnum.cost();\n\n        if (sub.posEnum.nextDoc() != NO_MORE_DOCS) {\n          sub.posLeft = sub.posEnum.freq()-1;\n          sub.pos = sub.posEnum.nextPosition();\n        }\n          \n        docIDQueue.add(sub);\n      }\n    }\n    this.cost = cost;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b79b7ba0bc5be2ef864d2dabbe5e176f7e51bbd0","date":1428569572,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonScorer#TermAutomatonScorer(TermAutomatonWeight,EnumAndScorer[],int,Map[Integer,BytesRef],Similarity.SimScorer).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonScorer#TermAutomatonScorer(TermAutomatonWeight,EnumAndScorer[],int,Map[Integer,BytesRef],Similarity.SimScorer).mjava","sourceNew":"  public TermAutomatonScorer(TermAutomatonWeight weight, EnumAndScorer[] subs, int anyTermID, Map<Integer,BytesRef> idToTerm, Similarity.SimScorer docScorer) throws IOException {\n    super(weight);\n    //System.out.println(\"  automaton:\\n\" + weight.automaton.toDot());\n    this.runAutomaton = new TermRunAutomaton(weight.automaton, subs.length);\n    this.docScorer = docScorer;\n    this.idToTerm = idToTerm;\n    this.subs = subs;\n    this.docIDQueue = new DocIDQueue(subs.length);\n    this.posQueue = new PositionQueue(subs.length);\n    this.anyTermID = anyTermID;\n    this.subsOnDoc = new EnumAndScorer[subs.length];\n    this.positions = new PosState[4];\n    for(int i=0;i<this.positions.length;i++) {\n      this.positions[i] = new PosState();\n    }\n    long cost = 0;\n\n    // Init docIDQueue:\n    for(EnumAndScorer sub : subs) {\n      if (sub != null) {\n        cost += sub.posEnum.cost();\n        subsOnDoc[numSubsOnDoc++] = sub;\n      }\n    }\n    this.cost = cost;\n  }\n\n","sourceOld":"  public TermAutomatonScorer(TermAutomatonWeight weight, EnumAndScorer[] subs, int anyTermID, Map<Integer,BytesRef> idToTerm, Similarity.SimScorer docScorer) throws IOException {\n    super(weight);\n    //System.out.println(\"  automaton:\\n\" + weight.automaton.toDot());\n    this.runAutomaton = new TermRunAutomaton(weight.automaton, subs.length);\n    this.docScorer = docScorer;\n    this.idToTerm = idToTerm;\n    this.subs = subs;\n    this.docIDQueue = new DocIDQueue(subs.length);\n    this.posQueue = new PositionQueue(subs.length);\n    this.anyTermID = anyTermID;\n    this.subsOnDoc = new EnumAndScorer[subs.length];\n    this.positions = new PosState[4];\n    for(int i=0;i<this.positions.length;i++) {\n      this.positions[i] = new PosState();\n    }\n    long cost = 0;\n\n    // Init docIDQueue:\n    for(EnumAndScorer sub : subs) {\n      if (sub != null) {\n        cost += sub.posEnum.cost();\n\n        if (sub.posEnum.nextDoc() != NO_MORE_DOCS) {\n          sub.posLeft = sub.posEnum.freq()-1;\n          sub.pos = sub.posEnum.nextPosition();\n        }\n          \n        docIDQueue.add(sub);\n      }\n    }\n    this.cost = cost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68d6cb7f0f019661a784bd0e5a21e85b5f812af6","date":1515075216,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonScorer#TermAutomatonScorer(TermAutomatonWeight,EnumAndScorer[],int,Map[Integer,BytesRef],LeafSimScorer).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonScorer#TermAutomatonScorer(TermAutomatonWeight,EnumAndScorer[],int,Map[Integer,BytesRef],Similarity.SimScorer).mjava","sourceNew":"  public TermAutomatonScorer(TermAutomatonWeight weight, EnumAndScorer[] subs, int anyTermID, Map<Integer,BytesRef> idToTerm, LeafSimScorer docScorer) throws IOException {\n    super(weight);\n    //System.out.println(\"  automaton:\\n\" + weight.automaton.toDot());\n    this.runAutomaton = new TermRunAutomaton(weight.automaton, subs.length);\n    this.docScorer = docScorer;\n    this.idToTerm = idToTerm;\n    this.subs = subs;\n    this.docIDQueue = new DocIDQueue(subs.length);\n    this.posQueue = new PositionQueue(subs.length);\n    this.anyTermID = anyTermID;\n    this.subsOnDoc = new EnumAndScorer[subs.length];\n    this.positions = new PosState[4];\n    for(int i=0;i<this.positions.length;i++) {\n      this.positions[i] = new PosState();\n    }\n    long cost = 0;\n\n    // Init docIDQueue:\n    for(EnumAndScorer sub : subs) {\n      if (sub != null) {\n        cost += sub.posEnum.cost();\n        subsOnDoc[numSubsOnDoc++] = sub;\n      }\n    }\n    this.cost = cost;\n  }\n\n","sourceOld":"  public TermAutomatonScorer(TermAutomatonWeight weight, EnumAndScorer[] subs, int anyTermID, Map<Integer,BytesRef> idToTerm, Similarity.SimScorer docScorer) throws IOException {\n    super(weight);\n    //System.out.println(\"  automaton:\\n\" + weight.automaton.toDot());\n    this.runAutomaton = new TermRunAutomaton(weight.automaton, subs.length);\n    this.docScorer = docScorer;\n    this.idToTerm = idToTerm;\n    this.subs = subs;\n    this.docIDQueue = new DocIDQueue(subs.length);\n    this.posQueue = new PositionQueue(subs.length);\n    this.anyTermID = anyTermID;\n    this.subsOnDoc = new EnumAndScorer[subs.length];\n    this.positions = new PosState[4];\n    for(int i=0;i<this.positions.length;i++) {\n      this.positions[i] = new PosState();\n    }\n    long cost = 0;\n\n    // Init docIDQueue:\n    for(EnumAndScorer sub : subs) {\n      if (sub != null) {\n        cost += sub.posEnum.cost();\n        subsOnDoc[numSubsOnDoc++] = sub;\n      }\n    }\n    this.cost = cost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonScorer#TermAutomatonScorer(TermAutomatonWeight,EnumAndScorer[],int,Map[Integer,BytesRef],Similarity.SimScorer).mjava","sourceNew":null,"sourceOld":"  public TermAutomatonScorer(TermAutomatonWeight weight, EnumAndScorer[] subs, int anyTermID, Map<Integer,BytesRef> idToTerm, Similarity.SimScorer docScorer) throws IOException {\n    super(weight);\n    //System.out.println(\"  automaton:\\n\" + weight.automaton.toDot());\n    this.runAutomaton = new TermRunAutomaton(weight.automaton, subs.length);\n    this.docScorer = docScorer;\n    this.idToTerm = idToTerm;\n    this.subs = subs;\n    this.docIDQueue = new DocIDQueue(subs.length);\n    this.posQueue = new PositionQueue(subs.length);\n    this.anyTermID = anyTermID;\n    this.subsOnDoc = new EnumAndScorer[subs.length];\n    this.positions = new PosState[4];\n    for(int i=0;i<this.positions.length;i++) {\n      this.positions[i] = new PosState();\n    }\n    long cost = 0;\n\n    // Init docIDQueue:\n    for(EnumAndScorer sub : subs) {\n      if (sub != null) {\n        cost += sub.posEnum.cost();\n        subsOnDoc[numSubsOnDoc++] = sub;\n      }\n    }\n    this.cost = cost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["b79b7ba0bc5be2ef864d2dabbe5e176f7e51bbd0","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["b79b7ba0bc5be2ef864d2dabbe5e176f7e51bbd0"],"b79b7ba0bc5be2ef864d2dabbe5e176f7e51bbd0":["06a4493f0c732d2928d1a4f773f15d19434aa8ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06a4493f0c732d2928d1a4f773f15d19434aa8ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["b94236357aaa22b76c10629851fe4e376e0cea82"],"b79b7ba0bc5be2ef864d2dabbe5e176f7e51bbd0":["b94236357aaa22b76c10629851fe4e376e0cea82","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06a4493f0c732d2928d1a4f773f15d19434aa8ba"],"06a4493f0c732d2928d1a4f773f15d19434aa8ba":["b79b7ba0bc5be2ef864d2dabbe5e176f7e51bbd0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}