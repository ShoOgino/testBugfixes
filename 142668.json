{"path":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#uploadConfigSet(String,String,String,String,SolrZkClient).mjava","commits":[{"id":"2c944148a761a75ff64169148c3ff7b6432aed85","date":1530279727,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#uploadConfigSet(String,String,String,String,SolrZkClient).mjava","pathOld":"/dev/null","sourceNew":"  private long uploadConfigSet(String configSetName, String suffix, String username, String password,\n      SolrZkClient zkClient) throws IOException {\n    // Read zipped sample config\n    ByteBuffer sampleZippedConfig = TestDynamicLoading\n        .getFileContent(\n            createTempZipFile(\"solr/configsets/upload/\"+configSetName), false);\n\n    ZkConfigManager configManager = new ZkConfigManager(zkClient);\n    assertFalse(configManager.configExists(configSetName+suffix));\n\n    Map map = postDataAndGetResponse(solrCluster.getSolrClient(),\n        solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/admin/configs?action=UPLOAD&name=\"+configSetName+suffix,\n        sampleZippedConfig, username, password);\n    assertNotNull(map);\n    long statusCode = (long) getObjectByPath(map, false, Arrays.asList(\"responseHeader\", \"status\"));\n    return statusCode;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#uploadConfigSet(String,String,String,String,SolrZkClient).mjava","pathOld":"/dev/null","sourceNew":"  private long uploadConfigSet(String configSetName, String suffix, String username, String password,\n      SolrZkClient zkClient) throws IOException {\n    // Read zipped sample config\n    ByteBuffer sampleZippedConfig = TestDynamicLoading\n        .getFileContent(\n            createTempZipFile(\"solr/configsets/upload/\"+configSetName), false);\n\n    ZkConfigManager configManager = new ZkConfigManager(zkClient);\n    assertFalse(configManager.configExists(configSetName+suffix));\n\n    Map map = postDataAndGetResponse(solrCluster.getSolrClient(),\n        solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/admin/configs?action=UPLOAD&name=\"+configSetName+suffix,\n        sampleZippedConfig, username, password);\n    assertNotNull(map);\n    long statusCode = (long) getObjectByPath(map, false, Arrays.asList(\"responseHeader\", \"status\"));\n    return statusCode;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#uploadConfigSet(String,String,String,String,SolrZkClient).mjava","pathOld":"/dev/null","sourceNew":"  private long uploadConfigSet(String configSetName, String suffix, String username, String password,\n      SolrZkClient zkClient) throws IOException {\n    // Read zipped sample config\n    ByteBuffer sampleZippedConfig = TestDynamicLoading\n        .getFileContent(\n            createTempZipFile(\"solr/configsets/upload/\"+configSetName), false);\n\n    ZkConfigManager configManager = new ZkConfigManager(zkClient);\n    assertFalse(configManager.configExists(configSetName+suffix));\n\n    Map map = postDataAndGetResponse(solrCluster.getSolrClient(),\n        solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/admin/configs?action=UPLOAD&name=\"+configSetName+suffix,\n        sampleZippedConfig, username, password);\n    assertNotNull(map);\n    long statusCode = (long) getObjectByPath(map, false, Arrays.asList(\"responseHeader\", \"status\"));\n    return statusCode;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#uploadConfigSet(String,String,String,String,SolrZkClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#uploadConfigSet(String,String,String,String,SolrZkClient).mjava","sourceNew":"  private long uploadConfigSet(String configSetName, String suffix, String username, String password,\n      SolrZkClient zkClient) throws IOException {\n    // Read zipped sample config\n    ByteBuffer sampleZippedConfig = TestDynamicLoading\n        .getFileContent(\n            createTempZipFile(\"solr/configsets/upload/\"+configSetName), false);\n\n    ZkConfigManager configManager = new ZkConfigManager(zkClient);\n    assertFalse(configManager.configExists(configSetName+suffix));\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map map = postDataAndGetResponse(solrCluster.getSolrClient(),\n        solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/admin/configs?action=UPLOAD&name=\"+configSetName+suffix,\n        sampleZippedConfig, username, password);\n    assertNotNull(map);\n    long statusCode = (long) getObjectByPath(map, false, Arrays.asList(\"responseHeader\", \"status\"));\n    return statusCode;\n  }\n\n","sourceOld":"  private long uploadConfigSet(String configSetName, String suffix, String username, String password,\n      SolrZkClient zkClient) throws IOException {\n    // Read zipped sample config\n    ByteBuffer sampleZippedConfig = TestDynamicLoading\n        .getFileContent(\n            createTempZipFile(\"solr/configsets/upload/\"+configSetName), false);\n\n    ZkConfigManager configManager = new ZkConfigManager(zkClient);\n    assertFalse(configManager.configExists(configSetName+suffix));\n\n    Map map = postDataAndGetResponse(solrCluster.getSolrClient(),\n        solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/admin/configs?action=UPLOAD&name=\"+configSetName+suffix,\n        sampleZippedConfig, username, password);\n    assertNotNull(map);\n    long statusCode = (long) getObjectByPath(map, false, Arrays.asList(\"responseHeader\", \"status\"));\n    return statusCode;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d16198391f70a4ee52a8c8792c91eb87a30f1d6","date":1596695552,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#uploadConfigSet(String,String,String,String,SolrZkClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#uploadConfigSet(String,String,String,String,SolrZkClient).mjava","sourceNew":"  private long uploadConfigSet(String configSetName, String suffix, String username, String password,\n      SolrZkClient zkClient) throws IOException {\n    // Read zipped sample config\n    ByteBuffer sampleZippedConfig = TestSolrConfigHandler\n        .getFileContent(\n            createTempZipFile(\"solr/configsets/upload/\"+configSetName), false);\n\n    ZkConfigManager configManager = new ZkConfigManager(zkClient);\n    assertFalse(configManager.configExists(configSetName+suffix));\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map map = postDataAndGetResponse(solrCluster.getSolrClient(),\n        solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/admin/configs?action=UPLOAD&name=\"+configSetName+suffix,\n        sampleZippedConfig, username, password);\n    assertNotNull(map);\n    long statusCode = (long) getObjectByPath(map, false, Arrays.asList(\"responseHeader\", \"status\"));\n    return statusCode;\n  }\n\n","sourceOld":"  private long uploadConfigSet(String configSetName, String suffix, String username, String password,\n      SolrZkClient zkClient) throws IOException {\n    // Read zipped sample config\n    ByteBuffer sampleZippedConfig = TestDynamicLoading\n        .getFileContent(\n            createTempZipFile(\"solr/configsets/upload/\"+configSetName), false);\n\n    ZkConfigManager configManager = new ZkConfigManager(zkClient);\n    assertFalse(configManager.configExists(configSetName+suffix));\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map map = postDataAndGetResponse(solrCluster.getSolrClient(),\n        solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/admin/configs?action=UPLOAD&name=\"+configSetName+suffix,\n        sampleZippedConfig, username, password);\n    assertNotNull(map);\n    long statusCode = (long) getObjectByPath(map, false, Arrays.asList(\"responseHeader\", \"status\"));\n    return statusCode;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7612891097d4751617c396cdd7a092833799147","date":1600707827,"type":5,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#uploadConfigSet(String,String,String,SolrZkClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#uploadConfigSet(String,String,String,String,SolrZkClient).mjava","sourceNew":"  private long uploadConfigSet(String configSetName, String suffix, String username,\n      SolrZkClient zkClient) throws IOException {\n    // Read zipped sample config\n    ByteBuffer sampleZippedConfig = TestSolrConfigHandler\n        .getFileContent(\n            createTempZipFile(\"solr/configsets/upload/\"+configSetName), false);\n\n    ZkConfigManager configManager = new ZkConfigManager(zkClient);\n    assertFalse(configManager.configExists(configSetName+suffix));\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map map = postDataAndGetResponse(cluster.getSolrClient(),\n        cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/admin/configs?action=UPLOAD&name=\"+configSetName+suffix,\n        sampleZippedConfig, username);\n    assertNotNull(map);\n    long statusCode = (long) getObjectByPath(map, false, Arrays.asList(\"responseHeader\", \"status\"));\n    return statusCode;\n  }\n\n","sourceOld":"  private long uploadConfigSet(String configSetName, String suffix, String username, String password,\n      SolrZkClient zkClient) throws IOException {\n    // Read zipped sample config\n    ByteBuffer sampleZippedConfig = TestSolrConfigHandler\n        .getFileContent(\n            createTempZipFile(\"solr/configsets/upload/\"+configSetName), false);\n\n    ZkConfigManager configManager = new ZkConfigManager(zkClient);\n    assertFalse(configManager.configExists(configSetName+suffix));\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map map = postDataAndGetResponse(solrCluster.getSolrClient(),\n        solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/admin/configs?action=UPLOAD&name=\"+configSetName+suffix,\n        sampleZippedConfig, username, password);\n    assertNotNull(map);\n    long statusCode = (long) getObjectByPath(map, false, Arrays.asList(\"responseHeader\", \"status\"));\n    return statusCode;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7612891097d4751617c396cdd7a092833799147":["0d16198391f70a4ee52a8c8792c91eb87a30f1d6"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c944148a761a75ff64169148c3ff7b6432aed85"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["2c944148a761a75ff64169148c3ff7b6432aed85"],"2c944148a761a75ff64169148c3ff7b6432aed85":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0d16198391f70a4ee52a8c8792c91eb87a30f1d6":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7612891097d4751617c396cdd7a092833799147"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c944148a761a75ff64169148c3ff7b6432aed85"]},"commit2Childs":{"c7612891097d4751617c396cdd7a092833799147":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["0d16198391f70a4ee52a8c8792c91eb87a30f1d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","2c944148a761a75ff64169148c3ff7b6432aed85","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"2c944148a761a75ff64169148c3ff7b6432aed85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","aa2585c33d5d66a1c837c312221eb55ddb3c4300","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0d16198391f70a4ee52a8c8792c91eb87a30f1d6":["c7612891097d4751617c396cdd7a092833799147"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}