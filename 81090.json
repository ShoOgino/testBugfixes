{"path":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask#collectVersionConflictsToIgnore().mjava","commits":[{"id":"b3e4bd3aed493904d0bbb6c6e0394f619e175087","date":1401446035,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask#collectVersionConflictsToIgnore().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Collects indirect dependency version conflicts to ignore \n   * in ivy-ignore-conflicts.properties, and also checks for orphans\n   * (coordinates not included in ivy-versions.properties).\n   * \n   * Returns true if no orphans are found.\n   */\n  private boolean collectVersionConflictsToIgnore() {\n    log(\"Checking for orphans in \" + ignoreConflictsFile.getName(), verboseLevel);\n    boolean orphansFound = false;\n    InterpolatedProperties properties = new InterpolatedProperties();\n    try (InputStream inputStream = new FileInputStream(ignoreConflictsFile);\n         Reader reader = new InputStreamReader(inputStream, StandardCharsets.UTF_8)) {\n      properties.load(reader);\n    } catch (IOException e) {\n      throw new BuildException(\"Exception reading \" + ignoreConflictsFile + \": \" + e.toString(), e);\n    }\n    for (Object obj : properties.keySet()) {\n      String coordinate = (String)obj;\n      if (COORDINATE_KEY_PATTERN.matcher(coordinate).matches()) {\n        if ( ! directDependencies.containsKey(coordinate)) {\n          orphansFound = true;\n          log(\"ORPHAN coordinate key '\" + coordinate + \"' in \" + ignoreConflictsFile.getName()\n                  + \" is not found in \" + centralizedVersionsFile.getName(),\n              Project.MSG_ERR);\n        } else {\n          String versionsToIgnore = properties.getProperty(coordinate);\n          List<String> ignore = Arrays.asList(versionsToIgnore.trim().split(\"\\\\s*,\\\\s*|\\\\s+\"));\n          ignoreConflictVersions.put(coordinate, new HashSet<>(ignore));\n        }\n      }\n    }\n    return ! orphansFound;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e025cf1c07150c8db28879d785db17eb3a66ca9f","date":1598788864,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask#collectVersionConflictsToIgnore().mjava","sourceNew":null,"sourceOld":"  /**\n   * Collects indirect dependency version conflicts to ignore \n   * in ivy-ignore-conflicts.properties, and also checks for orphans\n   * (coordinates not included in ivy-versions.properties).\n   * \n   * Returns true if no orphans are found.\n   */\n  private boolean collectVersionConflictsToIgnore() {\n    log(\"Checking for orphans in \" + ignoreConflictsFile.getName(), verboseLevel);\n    boolean orphansFound = false;\n    InterpolatedProperties properties = new InterpolatedProperties();\n    try (InputStream inputStream = new FileInputStream(ignoreConflictsFile);\n         Reader reader = new InputStreamReader(inputStream, StandardCharsets.UTF_8)) {\n      properties.load(reader);\n    } catch (IOException e) {\n      throw new BuildException(\"Exception reading \" + ignoreConflictsFile + \": \" + e.toString(), e);\n    }\n    for (Object obj : properties.keySet()) {\n      String coordinate = (String)obj;\n      if (COORDINATE_KEY_PATTERN.matcher(coordinate).matches()) {\n        if ( ! directDependencies.containsKey(coordinate)) {\n          orphansFound = true;\n          log(\"ORPHAN coordinate key '\" + coordinate + \"' in \" + ignoreConflictsFile.getName()\n                  + \" is not found in \" + centralizedVersionsFile.getName(),\n              Project.MSG_ERR);\n        } else {\n          String versionsToIgnore = properties.getProperty(coordinate);\n          List<String> ignore = Arrays.asList(versionsToIgnore.trim().split(\"\\\\s*,\\\\s*|\\\\s+\"));\n          ignoreConflictVersions.put(coordinate, new HashSet<>(ignore));\n        }\n      }\n    }\n    return ! orphansFound;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e025cf1c07150c8db28879d785db17eb3a66ca9f":["b3e4bd3aed493904d0bbb6c6e0394f619e175087"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b3e4bd3aed493904d0bbb6c6e0394f619e175087":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e025cf1c07150c8db28879d785db17eb3a66ca9f"]},"commit2Childs":{"e025cf1c07150c8db28879d785db17eb3a66ca9f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b3e4bd3aed493904d0bbb6c6e0394f619e175087"],"b3e4bd3aed493904d0bbb6c6e0394f619e175087":["e025cf1c07150c8db28879d785db17eb3a66ca9f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}