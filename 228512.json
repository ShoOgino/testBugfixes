{"path":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#createContext(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"1936b95f78af7bc57e67df5b0de3f21a54df10af","date":1420842770,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#createContext(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  private VelocityContext createContext(SolrQueryRequest request, SolrQueryResponse response) {\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Register useful Velocity \"tools\"\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"sort\", new SortTool());\n    context.put(\"display\", new DisplayTool());\n    context.put(\"resource\", new SolrVelocityResourceTool(\n        request.getCore().getSolrConfig().getResourceLoader().getClassLoader(),\n        request.getParams().get(LOCALE)));\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request\n      context.put(\"debug\",((QueryResponse)rsp).getDebugMap());\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    return context;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7d49824890ade4ceb71eb61c0cde1231c8037621"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a56cf4d99cfac921f5a0c55a44e5561b54b5cd8","date":1421575379,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#createContext(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#createContext(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private VelocityContext createContext(SolrQueryRequest request, SolrQueryResponse response) {\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Register useful Velocity \"tools\"\n    context.put(\"log\", log);   // TODO: add test\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"sort\", new SortTool());\n    context.put(\"display\", new DisplayTool());\n    context.put(\"resource\", new SolrVelocityResourceTool(\n        request.getCore().getSolrConfig().getResourceLoader().getClassLoader(),\n        request.getParams().get(LOCALE)));\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request\n      context.put(\"debug\",((QueryResponse)rsp).getDebugMap());\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    return context;\n  }\n\n","sourceOld":"  private VelocityContext createContext(SolrQueryRequest request, SolrQueryResponse response) {\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Register useful Velocity \"tools\"\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"sort\", new SortTool());\n    context.put(\"display\", new DisplayTool());\n    context.put(\"resource\", new SolrVelocityResourceTool(\n        request.getCore().getSolrConfig().getResourceLoader().getClassLoader(),\n        request.getParams().get(LOCALE)));\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request\n      context.put(\"debug\",((QueryResponse)rsp).getDebugMap());\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    return context;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"10349d681267bb9b224adb51818a0c9b68fdc22c","date":1441152776,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#createContext(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#createContext(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private VelocityContext createContext(SolrQueryRequest request, SolrQueryResponse response) {\n    VelocityContext context = new VelocityContext();\n\n    // Register useful Velocity \"tools\"\n    context.put(\"log\", log);   // TODO: add test; TODO: should this be overridable with a custom \"log\" named tool?\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"sort\", new SortTool());\n    context.put(\"display\", new DisplayTool());\n    context.put(\"resource\", new SolrVelocityResourceTool(\n        request.getCore().getSolrConfig().getResourceLoader().getClassLoader(),\n        request.getParams().get(LOCALE)));\n\n/*\n    // Custom tools, specified in config as:\n        <queryResponseWriter name=\"velocityWithCustomTools\" class=\"solr.VelocityResponseWriter\">\n          <lst name=\"tools\">\n            <str name=\"mytool\">com.example.solr.velocity.MyTool</str>\n          </lst>\n        </queryResponseWriter>\n\n\n*/\n    // Custom tools can override any of the built-in tools provided above, by registering one with the same name\n    for(String name : customTools.keySet()) {\n      context.put(name, SolrCore.createInstance(customTools.get(name), Object.class, \"VrW custom tool\", request.getCore(), request.getCore().getResourceLoader()));\n    }\n\n    // custom tools _cannot_ override context objects added below, like $request and $response\n    // TODO: at least log a warning when one of the *fixed* tools classes in name with a custom one, currently silently ignored\n\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request\n      context.put(\"debug\",((QueryResponse)rsp).getDebugMap());\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n\n    context.put(\"request\", request);\n    context.put(\"response\", rsp);\n\n    return context;\n  }\n\n","sourceOld":"  private VelocityContext createContext(SolrQueryRequest request, SolrQueryResponse response) {\n    VelocityContext context = new VelocityContext();\n\n    context.put(\"request\", request);\n\n    // Register useful Velocity \"tools\"\n    context.put(\"log\", log);   // TODO: add test\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"sort\", new SortTool());\n    context.put(\"display\", new DisplayTool());\n    context.put(\"resource\", new SolrVelocityResourceTool(\n        request.getCore().getSolrConfig().getResourceLoader().getClassLoader(),\n        request.getParams().get(LOCALE)));\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request\n      context.put(\"debug\",((QueryResponse)rsp).getDebugMap());\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n    context.put(\"response\", rsp);\n\n    return context;\n  }\n\n","bugFix":null,"bugIntro":["7d49824890ade4ceb71eb61c0cde1231c8037621","d94deac68514af4c985eabd56d9bb95ce27467b9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7d49824890ade4ceb71eb61c0cde1231c8037621","date":1444746779,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#createContext(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#createContext(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private VelocityContext createContext(SolrQueryRequest request, SolrQueryResponse response) {\n    VelocityContext context = new VelocityContext();\n\n    // Register useful Velocity \"tools\"\n    String locale = request.getParams().get(LOCALE);\n    Map toolConfig = new HashMap();\n    toolConfig.put(\"locale\", locale);\n\n\n    context.put(\"log\", log);   // TODO: add test; TODO: should this be overridable with a custom \"log\" named tool?\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"sort\", new SortTool());\n\n    MathTool mathTool = new MathTool();\n    mathTool.configure(toolConfig);\n    context.put(\"math\", mathTool);\n\n    NumberTool numberTool = new NumberTool();\n    numberTool.configure(toolConfig);\n    context.put(\"number\", numberTool);\n\n\n    DisplayTool displayTool = new DisplayTool();\n    displayTool.configure(toolConfig);\n    context.put(\"display\", displayTool);\n\n    ResourceTool resourceTool = new SolrVelocityResourceTool(request.getCore().getSolrConfig().getResourceLoader().getClassLoader());\n    resourceTool.configure(toolConfig);\n    context.put(\"resource\", resourceTool);\n\n/*\n    // Custom tools, specified in config as:\n        <queryResponseWriter name=\"velocityWithCustomTools\" class=\"solr.VelocityResponseWriter\">\n          <lst name=\"tools\">\n            <str name=\"mytool\">com.example.solr.velocity.MyTool</str>\n          </lst>\n        </queryResponseWriter>\n*/\n    // Custom tools can override any of the built-in tools provided above, by registering one with the same name\n    for(String name : customTools.keySet()) {\n      Object customTool = SolrCore.createInstance(customTools.get(name), Object.class, \"VrW custom tool: \" + name, request.getCore(), request.getCore().getResourceLoader());\n      if (customTool instanceof LocaleConfig) {\n        ((LocaleConfig)customTool).configure(toolConfig);\n      }\n      context.put(name, customTool);\n    }\n\n    // custom tools _cannot_ override context objects added below, like $request and $response\n    // TODO: at least log a warning when one of the *fixed* tools classes in name with a custom one, currently silently ignored\n\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request\n      context.put(\"debug\",((QueryResponse)rsp).getDebugMap());\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n\n    context.put(\"request\", request);\n    context.put(\"response\", rsp);\n\n    return context;\n  }\n\n","sourceOld":"  private VelocityContext createContext(SolrQueryRequest request, SolrQueryResponse response) {\n    VelocityContext context = new VelocityContext();\n\n    // Register useful Velocity \"tools\"\n    context.put(\"log\", log);   // TODO: add test; TODO: should this be overridable with a custom \"log\" named tool?\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"math\", new MathTool());\n    context.put(\"number\", new NumberTool());\n    context.put(\"sort\", new SortTool());\n    context.put(\"display\", new DisplayTool());\n    context.put(\"resource\", new SolrVelocityResourceTool(\n        request.getCore().getSolrConfig().getResourceLoader().getClassLoader(),\n        request.getParams().get(LOCALE)));\n\n/*\n    // Custom tools, specified in config as:\n        <queryResponseWriter name=\"velocityWithCustomTools\" class=\"solr.VelocityResponseWriter\">\n          <lst name=\"tools\">\n            <str name=\"mytool\">com.example.solr.velocity.MyTool</str>\n          </lst>\n        </queryResponseWriter>\n\n\n*/\n    // Custom tools can override any of the built-in tools provided above, by registering one with the same name\n    for(String name : customTools.keySet()) {\n      context.put(name, SolrCore.createInstance(customTools.get(name), Object.class, \"VrW custom tool\", request.getCore(), request.getCore().getResourceLoader()));\n    }\n\n    // custom tools _cannot_ override context objects added below, like $request and $response\n    // TODO: at least log a warning when one of the *fixed* tools classes in name with a custom one, currently silently ignored\n\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request\n      context.put(\"debug\",((QueryResponse)rsp).getDebugMap());\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n\n    context.put(\"request\", request);\n    context.put(\"response\", rsp);\n\n    return context;\n  }\n\n","bugFix":["1936b95f78af7bc57e67df5b0de3f21a54df10af","10349d681267bb9b224adb51818a0c9b68fdc22c"],"bugIntro":["d94deac68514af4c985eabd56d9bb95ce27467b9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"01624b85de12fb02335810bdf325124e59040772","date":1490254940,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#createContext(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#createContext(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private VelocityContext createContext(SolrQueryRequest request, SolrQueryResponse response) {\n    VelocityContext context = new VelocityContext();\n\n    // Register useful Velocity \"tools\"\n    String locale = request.getParams().get(LOCALE);\n    Map toolConfig = new HashMap();\n    toolConfig.put(\"locale\", locale);\n\n\n    context.put(\"log\", log);   // TODO: add test; TODO: should this be overridable with a custom \"log\" named tool?\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(SORT, new SortTool());\n\n    MathTool mathTool = new MathTool();\n    mathTool.configure(toolConfig);\n    context.put(\"math\", mathTool);\n\n    NumberTool numberTool = new NumberTool();\n    numberTool.configure(toolConfig);\n    context.put(\"number\", numberTool);\n\n\n    DisplayTool displayTool = new DisplayTool();\n    displayTool.configure(toolConfig);\n    context.put(\"display\", displayTool);\n\n    ResourceTool resourceTool = new SolrVelocityResourceTool(request.getCore().getSolrConfig().getResourceLoader().getClassLoader());\n    resourceTool.configure(toolConfig);\n    context.put(\"resource\", resourceTool);\n\n/*\n    // Custom tools, specified in config as:\n        <queryResponseWriter name=\"velocityWithCustomTools\" class=\"solr.VelocityResponseWriter\">\n          <lst name=\"tools\">\n            <str name=\"mytool\">com.example.solr.velocity.MyTool</str>\n          </lst>\n        </queryResponseWriter>\n*/\n    // Custom tools can override any of the built-in tools provided above, by registering one with the same name\n    for(String name : customTools.keySet()) {\n      Object customTool = SolrCore.createInstance(customTools.get(name), Object.class, \"VrW custom tool: \" + name, request.getCore(), request.getCore().getResourceLoader());\n      if (customTool instanceof LocaleConfig) {\n        ((LocaleConfig)customTool).configure(toolConfig);\n      }\n      context.put(name, customTool);\n    }\n\n    // custom tools _cannot_ override context objects added below, like $request and $response\n    // TODO: at least log a warning when one of the *fixed* tools classes in name with a custom one, currently silently ignored\n\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request\n      context.put(\"debug\",((QueryResponse)rsp).getDebugMap());\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n\n    context.put(\"request\", request);\n    context.put(\"response\", rsp);\n\n    return context;\n  }\n\n","sourceOld":"  private VelocityContext createContext(SolrQueryRequest request, SolrQueryResponse response) {\n    VelocityContext context = new VelocityContext();\n\n    // Register useful Velocity \"tools\"\n    String locale = request.getParams().get(LOCALE);\n    Map toolConfig = new HashMap();\n    toolConfig.put(\"locale\", locale);\n\n\n    context.put(\"log\", log);   // TODO: add test; TODO: should this be overridable with a custom \"log\" named tool?\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"sort\", new SortTool());\n\n    MathTool mathTool = new MathTool();\n    mathTool.configure(toolConfig);\n    context.put(\"math\", mathTool);\n\n    NumberTool numberTool = new NumberTool();\n    numberTool.configure(toolConfig);\n    context.put(\"number\", numberTool);\n\n\n    DisplayTool displayTool = new DisplayTool();\n    displayTool.configure(toolConfig);\n    context.put(\"display\", displayTool);\n\n    ResourceTool resourceTool = new SolrVelocityResourceTool(request.getCore().getSolrConfig().getResourceLoader().getClassLoader());\n    resourceTool.configure(toolConfig);\n    context.put(\"resource\", resourceTool);\n\n/*\n    // Custom tools, specified in config as:\n        <queryResponseWriter name=\"velocityWithCustomTools\" class=\"solr.VelocityResponseWriter\">\n          <lst name=\"tools\">\n            <str name=\"mytool\">com.example.solr.velocity.MyTool</str>\n          </lst>\n        </queryResponseWriter>\n*/\n    // Custom tools can override any of the built-in tools provided above, by registering one with the same name\n    for(String name : customTools.keySet()) {\n      Object customTool = SolrCore.createInstance(customTools.get(name), Object.class, \"VrW custom tool: \" + name, request.getCore(), request.getCore().getResourceLoader());\n      if (customTool instanceof LocaleConfig) {\n        ((LocaleConfig)customTool).configure(toolConfig);\n      }\n      context.put(name, customTool);\n    }\n\n    // custom tools _cannot_ override context objects added below, like $request and $response\n    // TODO: at least log a warning when one of the *fixed* tools classes in name with a custom one, currently silently ignored\n\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request\n      context.put(\"debug\",((QueryResponse)rsp).getDebugMap());\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n\n    context.put(\"request\", request);\n    context.put(\"response\", rsp);\n\n    return context;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6f4c5d3859373c3a74734e85efa122b17514e3e8","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#createContext(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#createContext(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private VelocityContext createContext(SolrQueryRequest request, SolrQueryResponse response) {\n    VelocityContext context = new VelocityContext();\n\n    // Register useful Velocity \"tools\"\n    String locale = request.getParams().get(LOCALE);\n    Map toolConfig = new HashMap();\n    toolConfig.put(\"locale\", locale);\n\n\n    context.put(\"log\", log);   // TODO: add test; TODO: should this be overridable with a custom \"log\" named tool?\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(SORT, new SortTool());\n\n    MathTool mathTool = new MathTool();\n    mathTool.configure(toolConfig);\n    context.put(\"math\", mathTool);\n\n    NumberTool numberTool = new NumberTool();\n    numberTool.configure(toolConfig);\n    context.put(\"number\", numberTool);\n\n\n    DisplayTool displayTool = new DisplayTool();\n    displayTool.configure(toolConfig);\n    context.put(\"display\", displayTool);\n\n    ResourceTool resourceTool = new SolrVelocityResourceTool(request.getCore().getSolrConfig().getResourceLoader().getClassLoader());\n    resourceTool.configure(toolConfig);\n    context.put(\"resource\", resourceTool);\n\n/*\n    // Custom tools, specified in config as:\n        <queryResponseWriter name=\"velocityWithCustomTools\" class=\"solr.VelocityResponseWriter\">\n          <lst name=\"tools\">\n            <str name=\"mytool\">com.example.solr.velocity.MyTool</str>\n          </lst>\n        </queryResponseWriter>\n*/\n    // Custom tools can override any of the built-in tools provided above, by registering one with the same name\n    for(String name : customTools.keySet()) {\n      Object customTool = SolrCore.createInstance(customTools.get(name), Object.class, \"VrW custom tool: \" + name, request.getCore(), request.getCore().getResourceLoader());\n      if (customTool instanceof LocaleConfig) {\n        ((LocaleConfig)customTool).configure(toolConfig);\n      }\n      context.put(name, customTool);\n    }\n\n    // custom tools _cannot_ override context objects added below, like $request and $response\n    // TODO: at least log a warning when one of the *fixed* tools classes in name with a custom one, currently silently ignored\n\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request\n      context.put(\"debug\",((QueryResponse)rsp).getDebugMap());\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n\n    context.put(\"request\", request);\n    context.put(\"response\", rsp);\n\n    return context;\n  }\n\n","sourceOld":"  private VelocityContext createContext(SolrQueryRequest request, SolrQueryResponse response) {\n    VelocityContext context = new VelocityContext();\n\n    // Register useful Velocity \"tools\"\n    String locale = request.getParams().get(LOCALE);\n    Map toolConfig = new HashMap();\n    toolConfig.put(\"locale\", locale);\n\n\n    context.put(\"log\", log);   // TODO: add test; TODO: should this be overridable with a custom \"log\" named tool?\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(\"sort\", new SortTool());\n\n    MathTool mathTool = new MathTool();\n    mathTool.configure(toolConfig);\n    context.put(\"math\", mathTool);\n\n    NumberTool numberTool = new NumberTool();\n    numberTool.configure(toolConfig);\n    context.put(\"number\", numberTool);\n\n\n    DisplayTool displayTool = new DisplayTool();\n    displayTool.configure(toolConfig);\n    context.put(\"display\", displayTool);\n\n    ResourceTool resourceTool = new SolrVelocityResourceTool(request.getCore().getSolrConfig().getResourceLoader().getClassLoader());\n    resourceTool.configure(toolConfig);\n    context.put(\"resource\", resourceTool);\n\n/*\n    // Custom tools, specified in config as:\n        <queryResponseWriter name=\"velocityWithCustomTools\" class=\"solr.VelocityResponseWriter\">\n          <lst name=\"tools\">\n            <str name=\"mytool\">com.example.solr.velocity.MyTool</str>\n          </lst>\n        </queryResponseWriter>\n*/\n    // Custom tools can override any of the built-in tools provided above, by registering one with the same name\n    for(String name : customTools.keySet()) {\n      Object customTool = SolrCore.createInstance(customTools.get(name), Object.class, \"VrW custom tool: \" + name, request.getCore(), request.getCore().getResourceLoader());\n      if (customTool instanceof LocaleConfig) {\n        ((LocaleConfig)customTool).configure(toolConfig);\n      }\n      context.put(name, customTool);\n    }\n\n    // custom tools _cannot_ override context objects added below, like $request and $response\n    // TODO: at least log a warning when one of the *fixed* tools classes in name with a custom one, currently silently ignored\n\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request\n      context.put(\"debug\",((QueryResponse)rsp).getDebugMap());\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n\n    context.put(\"request\", request);\n    context.put(\"response\", rsp);\n\n    return context;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ada1d1c1521680f2ede5f2a7e78c69f077b6caa6","date":1553522324,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#createContext(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#createContext(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private VelocityContext createContext(SolrQueryRequest request, SolrQueryResponse response) {\n    VelocityContext context = new VelocityContext();\n\n    // Register useful Velocity \"tools\"\n    String locale = request.getParams().get(LOCALE);\n    Map toolConfig = new HashMap();\n    toolConfig.put(\"locale\", locale);\n\n\n    context.put(\"log\", log);   // TODO: add test; TODO: should this be overridable with a custom \"log\" named tool?\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(SORT, new CollectionTool());\n\n    MathTool mathTool = new MathTool();\n    mathTool.configure(toolConfig);\n    context.put(\"math\", mathTool);\n\n    NumberTool numberTool = new NumberTool();\n    numberTool.configure(toolConfig);\n    context.put(\"number\", numberTool);\n\n\n    DisplayTool displayTool = new DisplayTool();\n    displayTool.configure(toolConfig);\n    context.put(\"display\", displayTool);\n\n    ResourceTool resourceTool = new SolrVelocityResourceTool(request.getCore().getSolrConfig().getResourceLoader().getClassLoader());\n    resourceTool.configure(toolConfig);\n    context.put(\"resource\", resourceTool);\n\n/*\n    // Custom tools, specified in config as:\n        <queryResponseWriter name=\"velocityWithCustomTools\" class=\"solr.VelocityResponseWriter\">\n          <lst name=\"tools\">\n            <str name=\"mytool\">com.example.solr.velocity.MyTool</str>\n          </lst>\n        </queryResponseWriter>\n*/\n    // Custom tools can override any of the built-in tools provided above, by registering one with the same name\n    for(String name : customTools.keySet()) {\n      Object customTool = SolrCore.createInstance(customTools.get(name), Object.class, \"VrW custom tool: \" + name, request.getCore(), request.getCore().getResourceLoader());\n      if (customTool instanceof LocaleConfig) {\n        ((LocaleConfig)customTool).configure(toolConfig);\n      }\n      context.put(name, customTool);\n    }\n\n    // custom tools _cannot_ override context objects added below, like $request and $response\n    // TODO: at least log a warning when one of the *fixed* tools classes in name with a custom one, currently silently ignored\n\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request\n      context.put(\"debug\",((QueryResponse)rsp).getDebugMap());\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n\n    context.put(\"request\", request);\n    context.put(\"response\", rsp);\n\n    return context;\n  }\n\n","sourceOld":"  private VelocityContext createContext(SolrQueryRequest request, SolrQueryResponse response) {\n    VelocityContext context = new VelocityContext();\n\n    // Register useful Velocity \"tools\"\n    String locale = request.getParams().get(LOCALE);\n    Map toolConfig = new HashMap();\n    toolConfig.put(\"locale\", locale);\n\n\n    context.put(\"log\", log);   // TODO: add test; TODO: should this be overridable with a custom \"log\" named tool?\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(\"list\", new ListTool());\n    context.put(SORT, new SortTool());\n\n    MathTool mathTool = new MathTool();\n    mathTool.configure(toolConfig);\n    context.put(\"math\", mathTool);\n\n    NumberTool numberTool = new NumberTool();\n    numberTool.configure(toolConfig);\n    context.put(\"number\", numberTool);\n\n\n    DisplayTool displayTool = new DisplayTool();\n    displayTool.configure(toolConfig);\n    context.put(\"display\", displayTool);\n\n    ResourceTool resourceTool = new SolrVelocityResourceTool(request.getCore().getSolrConfig().getResourceLoader().getClassLoader());\n    resourceTool.configure(toolConfig);\n    context.put(\"resource\", resourceTool);\n\n/*\n    // Custom tools, specified in config as:\n        <queryResponseWriter name=\"velocityWithCustomTools\" class=\"solr.VelocityResponseWriter\">\n          <lst name=\"tools\">\n            <str name=\"mytool\">com.example.solr.velocity.MyTool</str>\n          </lst>\n        </queryResponseWriter>\n*/\n    // Custom tools can override any of the built-in tools provided above, by registering one with the same name\n    for(String name : customTools.keySet()) {\n      Object customTool = SolrCore.createInstance(customTools.get(name), Object.class, \"VrW custom tool: \" + name, request.getCore(), request.getCore().getResourceLoader());\n      if (customTool instanceof LocaleConfig) {\n        ((LocaleConfig)customTool).configure(toolConfig);\n      }\n      context.put(name, customTool);\n    }\n\n    // custom tools _cannot_ override context objects added below, like $request and $response\n    // TODO: at least log a warning when one of the *fixed* tools classes in name with a custom one, currently silently ignored\n\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request\n      context.put(\"debug\",((QueryResponse)rsp).getDebugMap());\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n\n    context.put(\"request\", request);\n    context.put(\"response\", rsp);\n\n    return context;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","date":1571070979,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#createContext(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#createContext(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private VelocityContext createContext(SolrQueryRequest request, SolrQueryResponse response) {\n    VelocityContext context = new VelocityContext();\n\n    // Register useful Velocity \"tools\"\n    String locale = request.getParams().get(LOCALE);\n    Map toolConfig = new HashMap();\n    toolConfig.put(\"locale\", locale);\n\n\n    context.put(\"log\", log);   // TODO: add test; TODO: should this be overridable with a custom \"log\" named tool?\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(SORT, new CollectionTool());\n\n    MathTool mathTool = new MathTool();\n    mathTool.configure(toolConfig);\n    context.put(\"math\", mathTool);\n\n    NumberTool numberTool = new NumberTool();\n    numberTool.configure(toolConfig);\n    context.put(\"number\", numberTool);\n\n\n    DisplayTool displayTool = new DisplayTool();\n    displayTool.configure(toolConfig);\n    context.put(\"display\", displayTool);\n\n    ResourceTool resourceTool = new SolrVelocityResourceTool(request.getCore().getSolrConfig().getResourceLoader().getClassLoader());\n    resourceTool.configure(toolConfig);\n    context.put(\"resource\", resourceTool);\n\n/*\n    // Custom tools, specified in config as:\n        <queryResponseWriter name=\"velocityWithCustomTools\" class=\"solr.VelocityResponseWriter\">\n          <lst name=\"tools\">\n            <str name=\"mytool\">com.example.solr.velocity.MyTool</str>\n          </lst>\n        </queryResponseWriter>\n*/\n    // Custom tools can override any of the built-in tools provided above, by registering one with the same name\n    for(Map.Entry<String, String> entry : customTools.entrySet()) {\n      String name = entry.getKey();\n      Object customTool = SolrCore.createInstance(entry.getValue(), Object.class, \"VrW custom tool: \" + name, request.getCore(), request.getCore().getResourceLoader());\n      if (customTool instanceof LocaleConfig) {\n        ((LocaleConfig)customTool).configure(toolConfig);\n      }\n      context.put(name, customTool);\n    }\n\n    // custom tools _cannot_ override context objects added below, like $request and $response\n    // TODO: at least log a warning when one of the *fixed* tools classes in name with a custom one, currently silently ignored\n\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request\n      context.put(\"debug\",((QueryResponse)rsp).getDebugMap());\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n\n    context.put(\"request\", request);\n    context.put(\"response\", rsp);\n\n    return context;\n  }\n\n","sourceOld":"  private VelocityContext createContext(SolrQueryRequest request, SolrQueryResponse response) {\n    VelocityContext context = new VelocityContext();\n\n    // Register useful Velocity \"tools\"\n    String locale = request.getParams().get(LOCALE);\n    Map toolConfig = new HashMap();\n    toolConfig.put(\"locale\", locale);\n\n\n    context.put(\"log\", log);   // TODO: add test; TODO: should this be overridable with a custom \"log\" named tool?\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(SORT, new CollectionTool());\n\n    MathTool mathTool = new MathTool();\n    mathTool.configure(toolConfig);\n    context.put(\"math\", mathTool);\n\n    NumberTool numberTool = new NumberTool();\n    numberTool.configure(toolConfig);\n    context.put(\"number\", numberTool);\n\n\n    DisplayTool displayTool = new DisplayTool();\n    displayTool.configure(toolConfig);\n    context.put(\"display\", displayTool);\n\n    ResourceTool resourceTool = new SolrVelocityResourceTool(request.getCore().getSolrConfig().getResourceLoader().getClassLoader());\n    resourceTool.configure(toolConfig);\n    context.put(\"resource\", resourceTool);\n\n/*\n    // Custom tools, specified in config as:\n        <queryResponseWriter name=\"velocityWithCustomTools\" class=\"solr.VelocityResponseWriter\">\n          <lst name=\"tools\">\n            <str name=\"mytool\">com.example.solr.velocity.MyTool</str>\n          </lst>\n        </queryResponseWriter>\n*/\n    // Custom tools can override any of the built-in tools provided above, by registering one with the same name\n    for(String name : customTools.keySet()) {\n      Object customTool = SolrCore.createInstance(customTools.get(name), Object.class, \"VrW custom tool: \" + name, request.getCore(), request.getCore().getResourceLoader());\n      if (customTool instanceof LocaleConfig) {\n        ((LocaleConfig)customTool).configure(toolConfig);\n      }\n      context.put(name, customTool);\n    }\n\n    // custom tools _cannot_ override context objects added below, like $request and $response\n    // TODO: at least log a warning when one of the *fixed* tools classes in name with a custom one, currently silently ignored\n\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request\n      context.put(\"debug\",((QueryResponse)rsp).getDebugMap());\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n\n    context.put(\"request\", request);\n    context.put(\"response\", rsp);\n\n    return context;\n  }\n\n","bugFix":null,"bugIntro":["d94deac68514af4c985eabd56d9bb95ce27467b9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#createContext(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#createContext(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private VelocityContext createContext(SolrQueryRequest request, SolrQueryResponse response) {\n    VelocityContext context = new VelocityContext();\n\n    // Register useful Velocity \"tools\"\n    String locale = request.getParams().get(LOCALE);\n    Map toolConfig = new HashMap();\n    toolConfig.put(\"locale\", locale);\n\n\n    context.put(\"log\", log);   // TODO: add test; TODO: should this be overridable with a custom \"log\" named tool?\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(SORT, new CollectionTool());\n\n    MathTool mathTool = new MathTool();\n    mathTool.configure(toolConfig);\n    context.put(\"math\", mathTool);\n\n    NumberTool numberTool = new NumberTool();\n    numberTool.configure(toolConfig);\n    context.put(\"number\", numberTool);\n\n\n    DisplayTool displayTool = new DisplayTool();\n    displayTool.configure(toolConfig);\n    context.put(\"display\", displayTool);\n\n    ResourceTool resourceTool = new SolrVelocityResourceTool(request.getCore().getSolrConfig().getResourceLoader().getClassLoader());\n    resourceTool.configure(toolConfig);\n    context.put(\"resource\", resourceTool);\n\n/*\n    // Custom tools, specified in config as:\n        <queryResponseWriter name=\"velocityWithCustomTools\" class=\"solr.VelocityResponseWriter\">\n          <lst name=\"tools\">\n            <str name=\"mytool\">com.example.solr.velocity.MyTool</str>\n          </lst>\n        </queryResponseWriter>\n*/\n    // Custom tools can override any of the built-in tools provided above, by registering one with the same name\n    for(Map.Entry<String, String> entry : customTools.entrySet()) {\n      String name = entry.getKey();\n      Object customTool = SolrCore.createInstance(entry.getValue(), Object.class, \"VrW custom tool: \" + name, request.getCore(), request.getCore().getResourceLoader());\n      if (customTool instanceof LocaleConfig) {\n        ((LocaleConfig)customTool).configure(toolConfig);\n      }\n      context.put(name, customTool);\n    }\n\n    // custom tools _cannot_ override context objects added below, like $request and $response\n    // TODO: at least log a warning when one of the *fixed* tools classes in name with a custom one, currently silently ignored\n\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request\n      context.put(\"debug\",((QueryResponse)rsp).getDebugMap());\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n\n    context.put(\"request\", request);\n    context.put(\"response\", rsp);\n\n    return context;\n  }\n\n","sourceOld":"  private VelocityContext createContext(SolrQueryRequest request, SolrQueryResponse response) {\n    VelocityContext context = new VelocityContext();\n\n    // Register useful Velocity \"tools\"\n    String locale = request.getParams().get(LOCALE);\n    Map toolConfig = new HashMap();\n    toolConfig.put(\"locale\", locale);\n\n\n    context.put(\"log\", log);   // TODO: add test; TODO: should this be overridable with a custom \"log\" named tool?\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(SORT, new CollectionTool());\n\n    MathTool mathTool = new MathTool();\n    mathTool.configure(toolConfig);\n    context.put(\"math\", mathTool);\n\n    NumberTool numberTool = new NumberTool();\n    numberTool.configure(toolConfig);\n    context.put(\"number\", numberTool);\n\n\n    DisplayTool displayTool = new DisplayTool();\n    displayTool.configure(toolConfig);\n    context.put(\"display\", displayTool);\n\n    ResourceTool resourceTool = new SolrVelocityResourceTool(request.getCore().getSolrConfig().getResourceLoader().getClassLoader());\n    resourceTool.configure(toolConfig);\n    context.put(\"resource\", resourceTool);\n\n/*\n    // Custom tools, specified in config as:\n        <queryResponseWriter name=\"velocityWithCustomTools\" class=\"solr.VelocityResponseWriter\">\n          <lst name=\"tools\">\n            <str name=\"mytool\">com.example.solr.velocity.MyTool</str>\n          </lst>\n        </queryResponseWriter>\n*/\n    // Custom tools can override any of the built-in tools provided above, by registering one with the same name\n    for(String name : customTools.keySet()) {\n      Object customTool = SolrCore.createInstance(customTools.get(name), Object.class, \"VrW custom tool: \" + name, request.getCore(), request.getCore().getResourceLoader());\n      if (customTool instanceof LocaleConfig) {\n        ((LocaleConfig)customTool).configure(toolConfig);\n      }\n      context.put(name, customTool);\n    }\n\n    // custom tools _cannot_ override context objects added below, like $request and $response\n    // TODO: at least log a warning when one of the *fixed* tools classes in name with a custom one, currently silently ignored\n\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request\n      context.put(\"debug\",((QueryResponse)rsp).getDebugMap());\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n\n    context.put(\"request\", request);\n    context.put(\"response\", rsp);\n\n    return context;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#createContext(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#createContext(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private VelocityContext createContext(SolrQueryRequest request, SolrQueryResponse response) {\n    VelocityContext context = new VelocityContext();\n\n    // Register useful Velocity \"tools\"\n    String locale = request.getParams().get(LOCALE);\n    Map toolConfig = new HashMap();\n    toolConfig.put(\"locale\", locale);\n\n\n    context.put(\"log\", log);   // TODO: add test; TODO: should this be overridable with a custom \"log\" named tool?\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(SORT, new CollectionTool());\n\n    MathTool mathTool = new MathTool();\n    mathTool.configure(toolConfig);\n    context.put(\"math\", mathTool);\n\n    NumberTool numberTool = new NumberTool();\n    numberTool.configure(toolConfig);\n    context.put(\"number\", numberTool);\n\n\n    DisplayTool displayTool = new DisplayTool();\n    displayTool.configure(toolConfig);\n    context.put(\"display\", displayTool);\n\n    ResourceTool resourceTool = new SolrVelocityResourceTool(request.getCore().getSolrConfig().getResourceLoader().getClassLoader());\n    resourceTool.configure(toolConfig);\n    context.put(\"resource\", resourceTool);\n\n/*\n    // Custom tools, specified in config as:\n        <queryResponseWriter name=\"velocityWithCustomTools\" class=\"solr.VelocityResponseWriter\">\n          <lst name=\"tools\">\n            <str name=\"mytool\">com.example.solr.velocity.MyTool</str>\n          </lst>\n        </queryResponseWriter>\n*/\n    // Custom tools can override any of the built-in tools provided above, by registering one with the same name\n    for(Map.Entry<String, String> entry : customTools.entrySet()) {\n      String name = entry.getKey();\n      Object customTool = SolrCore.createInstance(entry.getValue(), Object.class, \"VrW custom tool: \" + name, request.getCore(), request.getCore().getResourceLoader());\n      if (customTool instanceof LocaleConfig) {\n        ((LocaleConfig)customTool).configure(toolConfig);\n      }\n      context.put(name, customTool);\n    }\n\n    // custom tools _cannot_ override context objects added below, like $request and $response\n    // TODO: at least log a warning when one of the *fixed* tools classes in name with a custom one, currently silently ignored\n\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request\n      context.put(\"debug\",((QueryResponse)rsp).getDebugMap());\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n\n    context.put(\"request\", request);\n    context.put(\"response\", rsp);\n\n    return context;\n  }\n\n","sourceOld":"  private VelocityContext createContext(SolrQueryRequest request, SolrQueryResponse response) {\n    VelocityContext context = new VelocityContext();\n\n    // Register useful Velocity \"tools\"\n    String locale = request.getParams().get(LOCALE);\n    Map toolConfig = new HashMap();\n    toolConfig.put(\"locale\", locale);\n\n\n    context.put(\"log\", log);   // TODO: add test; TODO: should this be overridable with a custom \"log\" named tool?\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(SORT, new CollectionTool());\n\n    MathTool mathTool = new MathTool();\n    mathTool.configure(toolConfig);\n    context.put(\"math\", mathTool);\n\n    NumberTool numberTool = new NumberTool();\n    numberTool.configure(toolConfig);\n    context.put(\"number\", numberTool);\n\n\n    DisplayTool displayTool = new DisplayTool();\n    displayTool.configure(toolConfig);\n    context.put(\"display\", displayTool);\n\n    ResourceTool resourceTool = new SolrVelocityResourceTool(request.getCore().getSolrConfig().getResourceLoader().getClassLoader());\n    resourceTool.configure(toolConfig);\n    context.put(\"resource\", resourceTool);\n\n/*\n    // Custom tools, specified in config as:\n        <queryResponseWriter name=\"velocityWithCustomTools\" class=\"solr.VelocityResponseWriter\">\n          <lst name=\"tools\">\n            <str name=\"mytool\">com.example.solr.velocity.MyTool</str>\n          </lst>\n        </queryResponseWriter>\n*/\n    // Custom tools can override any of the built-in tools provided above, by registering one with the same name\n    for(Map.Entry<String, String> entry : customTools.entrySet()) {\n      String name = entry.getKey();\n      Object customTool = SolrCore.createInstance(entry.getValue(), Object.class, \"VrW custom tool: \" + name, request.getCore(), request.getCore().getResourceLoader());\n      if (customTool instanceof LocaleConfig) {\n        ((LocaleConfig)customTool).configure(toolConfig);\n      }\n      context.put(name, customTool);\n    }\n\n    // custom tools _cannot_ override context objects added below, like $request and $response\n    // TODO: at least log a warning when one of the *fixed* tools classes in name with a custom one, currently silently ignored\n\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request\n      context.put(\"debug\",((QueryResponse)rsp).getDebugMap());\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n\n    context.put(\"request\", request);\n    context.put(\"response\", rsp);\n\n    return context;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#createContext(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#createContext(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private VelocityContext createContext(SolrQueryRequest request, SolrQueryResponse response) {\n    VelocityContext context = new VelocityContext();\n\n    // Register useful Velocity \"tools\"\n    String locale = request.getParams().get(LOCALE);\n    Map toolConfig = new HashMap();\n    toolConfig.put(\"locale\", locale);\n\n\n    context.put(\"log\", log);   // TODO: add test; TODO: should this be overridable with a custom \"log\" named tool?\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(SORT, new CollectionTool());\n\n    MathTool mathTool = new MathTool();\n    mathTool.configure(toolConfig);\n    context.put(\"math\", mathTool);\n\n    NumberTool numberTool = new NumberTool();\n    numberTool.configure(toolConfig);\n    context.put(\"number\", numberTool);\n\n\n    DisplayTool displayTool = new DisplayTool();\n    displayTool.configure(toolConfig);\n    context.put(\"display\", displayTool);\n\n    ResourceTool resourceTool = new SolrVelocityResourceTool(request.getCore().getSolrConfig().getResourceLoader().getClassLoader());\n    resourceTool.configure(toolConfig);\n    context.put(\"resource\", resourceTool);\n\n/*\n    // Custom tools, specified in config as:\n        <queryResponseWriter name=\"velocityWithCustomTools\" class=\"solr.VelocityResponseWriter\">\n          <lst name=\"tools\">\n            <str name=\"mytool\">com.example.solr.velocity.MyTool</str>\n          </lst>\n        </queryResponseWriter>\n*/\n    // Custom tools can override any of the built-in tools provided above, by registering one with the same name\n    for(Map.Entry<String, String> entry : customTools.entrySet()) {\n      String name = entry.getKey();\n      Object customTool = SolrCore.createInstance(entry.getValue(), Object.class, \"VrW custom tool: \" + name, request.getCore(), request.getCore().getResourceLoader());\n      if (customTool instanceof LocaleConfig) {\n        ((LocaleConfig)customTool).configure(toolConfig);\n      }\n      context.put(name, customTool);\n    }\n\n    // custom tools _cannot_ override context objects added below, like $request and $response\n    // TODO: at least log a warning when one of the *fixed* tools classes in name with a custom one, currently silently ignored\n\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request\n      context.put(\"debug\",((QueryResponse)rsp).getDebugMap());\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n\n    context.put(\"request\", request);\n    context.put(\"response\", rsp);\n\n    return context;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private VelocityContext createContext(SolrQueryRequest request, SolrQueryResponse response) {\n    VelocityContext context = new VelocityContext();\n\n    // Register useful Velocity \"tools\"\n    String locale = request.getParams().get(LOCALE);\n    Map toolConfig = new HashMap();\n    toolConfig.put(\"locale\", locale);\n\n\n    context.put(\"log\", log);   // TODO: add test; TODO: should this be overridable with a custom \"log\" named tool?\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(SORT, new CollectionTool());\n\n    MathTool mathTool = new MathTool();\n    mathTool.configure(toolConfig);\n    context.put(\"math\", mathTool);\n\n    NumberTool numberTool = new NumberTool();\n    numberTool.configure(toolConfig);\n    context.put(\"number\", numberTool);\n\n\n    DisplayTool displayTool = new DisplayTool();\n    displayTool.configure(toolConfig);\n    context.put(\"display\", displayTool);\n\n    ResourceTool resourceTool = new SolrVelocityResourceTool(request.getCore().getSolrConfig().getResourceLoader().getClassLoader());\n    resourceTool.configure(toolConfig);\n    context.put(\"resource\", resourceTool);\n\n/*\n    // Custom tools, specified in config as:\n        <queryResponseWriter name=\"velocityWithCustomTools\" class=\"solr.VelocityResponseWriter\">\n          <lst name=\"tools\">\n            <str name=\"mytool\">com.example.solr.velocity.MyTool</str>\n          </lst>\n        </queryResponseWriter>\n*/\n    // Custom tools can override any of the built-in tools provided above, by registering one with the same name\n    for(Map.Entry<String, String> entry : customTools.entrySet()) {\n      String name = entry.getKey();\n      Object customTool = SolrCore.createInstance(entry.getValue(), Object.class, \"VrW custom tool: \" + name, request.getCore(), request.getCore().getResourceLoader());\n      if (customTool instanceof LocaleConfig) {\n        ((LocaleConfig)customTool).configure(toolConfig);\n      }\n      context.put(name, customTool);\n    }\n\n    // custom tools _cannot_ override context objects added below, like $request and $response\n    // TODO: at least log a warning when one of the *fixed* tools classes in name with a custom one, currently silently ignored\n\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request\n      context.put(\"debug\",((QueryResponse)rsp).getDebugMap());\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n\n    context.put(\"request\", request);\n    context.put(\"response\", rsp);\n\n    return context;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d94deac68514af4c985eabd56d9bb95ce27467b9","date":1576085774,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#createContext(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#createContext(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private VelocityContext createContext(SolrQueryRequest request, SolrQueryResponse response) {\n    VelocityContext context = new VelocityContext();\n\n    // Register useful Velocity \"tools\"\n    String locale = request.getParams().get(LOCALE);\n    Map toolConfig = new HashMap();\n    toolConfig.put(\"locale\", locale);\n\n\n    context.put(\"log\", log);   // TODO: add test; TODO: should this be overridable with a custom \"log\" named tool?\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(SORT, new CollectionTool());\n\n    MathTool mathTool = new MathTool();\n    mathTool.configure(toolConfig);\n    context.put(\"math\", mathTool);\n\n    NumberTool numberTool = new NumberTool();\n    numberTool.configure(toolConfig);\n    context.put(\"number\", numberTool);\n\n\n    DisplayTool displayTool = new DisplayTool();\n    displayTool.configure(toolConfig);\n    context.put(\"display\", displayTool);\n\n    ResourceTool resourceTool = new SolrVelocityResourceTool(request.getCore().getSolrConfig().getResourceLoader().getClassLoader());\n    resourceTool.configure(toolConfig);\n    context.put(\"resource\", resourceTool);\n\n    if (request.getCore().getCoreDescriptor().isConfigSetTrusted()) {\n      // Load custom tools, only if in a trusted configset\n\n      /*\n          // Custom tools, specified in config as:\n              <queryResponseWriter name=\"velocityWithCustomTools\" class=\"solr.VelocityResponseWriter\">\n                <lst name=\"tools\">\n                  <str name=\"mytool\">com.example.solr.velocity.MyTool</str>\n                </lst>\n              </queryResponseWriter>\n      */\n      // Custom tools can override any of the built-in tools provided above, by registering one with the same name\n      if (request.getCore().getCoreDescriptor().isConfigSetTrusted()) {\n        for (Map.Entry<String, String> entry : customTools.entrySet()) {\n          String name = entry.getKey();\n          // TODO: at least log a warning when one of the *fixed* tools classes is same name with a custom one, currently silently ignored\n          Object customTool = SolrCore.createInstance(entry.getValue(), Object.class, \"VrW custom tool: \" + name, request.getCore(), request.getCore().getResourceLoader());\n          if (customTool instanceof LocaleConfig) {\n            ((LocaleConfig) customTool).configure(toolConfig);\n          }\n          context.put(name, customTool);\n        }\n      }\n\n      // custom tools _cannot_ override context objects added below, like $request and $response\n    }\n\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request\n      context.put(\"debug\",((QueryResponse)rsp).getDebugMap());\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n\n    context.put(\"request\", request);\n    context.put(\"response\", rsp);\n\n    return context;\n  }\n\n","sourceOld":"  private VelocityContext createContext(SolrQueryRequest request, SolrQueryResponse response) {\n    VelocityContext context = new VelocityContext();\n\n    // Register useful Velocity \"tools\"\n    String locale = request.getParams().get(LOCALE);\n    Map toolConfig = new HashMap();\n    toolConfig.put(\"locale\", locale);\n\n\n    context.put(\"log\", log);   // TODO: add test; TODO: should this be overridable with a custom \"log\" named tool?\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(SORT, new CollectionTool());\n\n    MathTool mathTool = new MathTool();\n    mathTool.configure(toolConfig);\n    context.put(\"math\", mathTool);\n\n    NumberTool numberTool = new NumberTool();\n    numberTool.configure(toolConfig);\n    context.put(\"number\", numberTool);\n\n\n    DisplayTool displayTool = new DisplayTool();\n    displayTool.configure(toolConfig);\n    context.put(\"display\", displayTool);\n\n    ResourceTool resourceTool = new SolrVelocityResourceTool(request.getCore().getSolrConfig().getResourceLoader().getClassLoader());\n    resourceTool.configure(toolConfig);\n    context.put(\"resource\", resourceTool);\n\n/*\n    // Custom tools, specified in config as:\n        <queryResponseWriter name=\"velocityWithCustomTools\" class=\"solr.VelocityResponseWriter\">\n          <lst name=\"tools\">\n            <str name=\"mytool\">com.example.solr.velocity.MyTool</str>\n          </lst>\n        </queryResponseWriter>\n*/\n    // Custom tools can override any of the built-in tools provided above, by registering one with the same name\n    for(Map.Entry<String, String> entry : customTools.entrySet()) {\n      String name = entry.getKey();\n      Object customTool = SolrCore.createInstance(entry.getValue(), Object.class, \"VrW custom tool: \" + name, request.getCore(), request.getCore().getResourceLoader());\n      if (customTool instanceof LocaleConfig) {\n        ((LocaleConfig)customTool).configure(toolConfig);\n      }\n      context.put(name, customTool);\n    }\n\n    // custom tools _cannot_ override context objects added below, like $request and $response\n    // TODO: at least log a warning when one of the *fixed* tools classes in name with a custom one, currently silently ignored\n\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request\n      context.put(\"debug\",((QueryResponse)rsp).getDebugMap());\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n\n    context.put(\"request\", request);\n    context.put(\"response\", rsp);\n\n    return context;\n  }\n\n","bugFix":["7d49824890ade4ceb71eb61c0cde1231c8037621","7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","10349d681267bb9b224adb51818a0c9b68fdc22c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df724d84dab24a0cc54bec95a8680867adc7f171","date":1576156608,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#createContext(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#createContext(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private VelocityContext createContext(SolrQueryRequest request, SolrQueryResponse response) {\n    VelocityContext context = new VelocityContext();\n\n    // Register useful Velocity \"tools\"\n    String locale = request.getParams().get(LOCALE);\n    Map toolConfig = new HashMap();\n    toolConfig.put(\"locale\", locale);\n\n\n    context.put(\"log\", log);   // TODO: add test; TODO: should this be overridable with a custom \"log\" named tool?\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(SORT, new CollectionTool());\n\n    MathTool mathTool = new MathTool();\n    mathTool.configure(toolConfig);\n    context.put(\"math\", mathTool);\n\n    NumberTool numberTool = new NumberTool();\n    numberTool.configure(toolConfig);\n    context.put(\"number\", numberTool);\n\n\n    DisplayTool displayTool = new DisplayTool();\n    displayTool.configure(toolConfig);\n    context.put(\"display\", displayTool);\n\n    ResourceTool resourceTool = new SolrVelocityResourceTool(request.getCore().getSolrConfig().getResourceLoader().getClassLoader());\n    resourceTool.configure(toolConfig);\n    context.put(\"resource\", resourceTool);\n\n    if (request.getCore().getCoreDescriptor().isConfigSetTrusted()) {\n      // Load custom tools, only if in a trusted configset\n\n      /*\n          // Custom tools, specified in config as:\n              <queryResponseWriter name=\"velocityWithCustomTools\" class=\"solr.VelocityResponseWriter\">\n                <lst name=\"tools\">\n                  <str name=\"mytool\">com.example.solr.velocity.MyTool</str>\n                </lst>\n              </queryResponseWriter>\n      */\n      // Custom tools can override any of the built-in tools provided above, by registering one with the same name\n      if (request.getCore().getCoreDescriptor().isConfigSetTrusted()) {\n        for (Map.Entry<String, String> entry : customTools.entrySet()) {\n          String name = entry.getKey();\n          // TODO: at least log a warning when one of the *fixed* tools classes is same name with a custom one, currently silently ignored\n          Object customTool = SolrCore.createInstance(entry.getValue(), Object.class, \"VrW custom tool: \" + name, request.getCore(), request.getCore().getResourceLoader());\n          if (customTool instanceof LocaleConfig) {\n            ((LocaleConfig) customTool).configure(toolConfig);\n          }\n          context.put(name, customTool);\n        }\n      }\n\n      // custom tools _cannot_ override context objects added below, like $request and $response\n    }\n\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request\n      context.put(\"debug\",((QueryResponse)rsp).getDebugMap());\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n\n    context.put(\"request\", request);\n    context.put(\"response\", rsp);\n\n    return context;\n  }\n\n","sourceOld":"  private VelocityContext createContext(SolrQueryRequest request, SolrQueryResponse response) {\n    VelocityContext context = new VelocityContext();\n\n    // Register useful Velocity \"tools\"\n    String locale = request.getParams().get(LOCALE);\n    Map toolConfig = new HashMap();\n    toolConfig.put(\"locale\", locale);\n\n\n    context.put(\"log\", log);   // TODO: add test; TODO: should this be overridable with a custom \"log\" named tool?\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(SORT, new CollectionTool());\n\n    MathTool mathTool = new MathTool();\n    mathTool.configure(toolConfig);\n    context.put(\"math\", mathTool);\n\n    NumberTool numberTool = new NumberTool();\n    numberTool.configure(toolConfig);\n    context.put(\"number\", numberTool);\n\n\n    DisplayTool displayTool = new DisplayTool();\n    displayTool.configure(toolConfig);\n    context.put(\"display\", displayTool);\n\n    ResourceTool resourceTool = new SolrVelocityResourceTool(request.getCore().getSolrConfig().getResourceLoader().getClassLoader());\n    resourceTool.configure(toolConfig);\n    context.put(\"resource\", resourceTool);\n\n/*\n    // Custom tools, specified in config as:\n        <queryResponseWriter name=\"velocityWithCustomTools\" class=\"solr.VelocityResponseWriter\">\n          <lst name=\"tools\">\n            <str name=\"mytool\">com.example.solr.velocity.MyTool</str>\n          </lst>\n        </queryResponseWriter>\n*/\n    // Custom tools can override any of the built-in tools provided above, by registering one with the same name\n    for(Map.Entry<String, String> entry : customTools.entrySet()) {\n      String name = entry.getKey();\n      Object customTool = SolrCore.createInstance(entry.getValue(), Object.class, \"VrW custom tool: \" + name, request.getCore(), request.getCore().getResourceLoader());\n      if (customTool instanceof LocaleConfig) {\n        ((LocaleConfig)customTool).configure(toolConfig);\n      }\n      context.put(name, customTool);\n    }\n\n    // custom tools _cannot_ override context objects added below, like $request and $response\n    // TODO: at least log a warning when one of the *fixed* tools classes in name with a custom one, currently silently ignored\n\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request\n      context.put(\"debug\",((QueryResponse)rsp).getDebugMap());\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n\n    context.put(\"request\", request);\n    context.put(\"response\", rsp);\n\n    return context;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19eeb5bbd032a02cb82a253c4c9ae35863ea2dc","date":1591973782,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#createContext(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#createContext(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  private VelocityContext createContext(SolrQueryRequest request, SolrQueryResponse response) {\n    VelocityContext context = new VelocityContext();\n\n    // Register useful Velocity \"tools\"\n    String locale = request.getParams().get(LOCALE);\n    @SuppressWarnings({\"rawtypes\"})\n    Map toolConfig = new HashMap();\n    toolConfig.put(\"locale\", locale);\n\n\n    context.put(\"log\", log);   // TODO: add test; TODO: should this be overridable with a custom \"log\" named tool?\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(SORT, new CollectionTool());\n\n    MathTool mathTool = new MathTool();\n    mathTool.configure(toolConfig);\n    context.put(\"math\", mathTool);\n\n    NumberTool numberTool = new NumberTool();\n    numberTool.configure(toolConfig);\n    context.put(\"number\", numberTool);\n\n\n    DisplayTool displayTool = new DisplayTool();\n    displayTool.configure(toolConfig);\n    context.put(\"display\", displayTool);\n\n    ResourceTool resourceTool = new SolrVelocityResourceTool(request.getCore().getSolrConfig().getResourceLoader().getClassLoader());\n    resourceTool.configure(toolConfig);\n    context.put(\"resource\", resourceTool);\n\n    if (request.getCore().getCoreDescriptor().isConfigSetTrusted()) {\n      // Load custom tools, only if in a trusted configset\n\n      /*\n          // Custom tools, specified in config as:\n              <queryResponseWriter name=\"velocityWithCustomTools\" class=\"solr.VelocityResponseWriter\">\n                <lst name=\"tools\">\n                  <str name=\"mytool\">com.example.solr.velocity.MyTool</str>\n                </lst>\n              </queryResponseWriter>\n      */\n      // Custom tools can override any of the built-in tools provided above, by registering one with the same name\n      if (request.getCore().getCoreDescriptor().isConfigSetTrusted()) {\n        for (Map.Entry<String, String> entry : customTools.entrySet()) {\n          String name = entry.getKey();\n          // TODO: at least log a warning when one of the *fixed* tools classes is same name with a custom one, currently silently ignored\n          Object customTool = SolrCore.createInstance(entry.getValue(), Object.class, \"VrW custom tool: \" + name, request.getCore(), request.getCore().getResourceLoader());\n          if (customTool instanceof LocaleConfig) {\n            ((LocaleConfig) customTool).configure(toolConfig);\n          }\n          context.put(name, customTool);\n        }\n      }\n\n      // custom tools _cannot_ override context objects added below, like $request and $response\n    }\n\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request\n      context.put(\"debug\",((QueryResponse)rsp).getDebugMap());\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n\n    context.put(\"request\", request);\n    context.put(\"response\", rsp);\n\n    return context;\n  }\n\n","sourceOld":"  private VelocityContext createContext(SolrQueryRequest request, SolrQueryResponse response) {\n    VelocityContext context = new VelocityContext();\n\n    // Register useful Velocity \"tools\"\n    String locale = request.getParams().get(LOCALE);\n    Map toolConfig = new HashMap();\n    toolConfig.put(\"locale\", locale);\n\n\n    context.put(\"log\", log);   // TODO: add test; TODO: should this be overridable with a custom \"log\" named tool?\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(SORT, new CollectionTool());\n\n    MathTool mathTool = new MathTool();\n    mathTool.configure(toolConfig);\n    context.put(\"math\", mathTool);\n\n    NumberTool numberTool = new NumberTool();\n    numberTool.configure(toolConfig);\n    context.put(\"number\", numberTool);\n\n\n    DisplayTool displayTool = new DisplayTool();\n    displayTool.configure(toolConfig);\n    context.put(\"display\", displayTool);\n\n    ResourceTool resourceTool = new SolrVelocityResourceTool(request.getCore().getSolrConfig().getResourceLoader().getClassLoader());\n    resourceTool.configure(toolConfig);\n    context.put(\"resource\", resourceTool);\n\n    if (request.getCore().getCoreDescriptor().isConfigSetTrusted()) {\n      // Load custom tools, only if in a trusted configset\n\n      /*\n          // Custom tools, specified in config as:\n              <queryResponseWriter name=\"velocityWithCustomTools\" class=\"solr.VelocityResponseWriter\">\n                <lst name=\"tools\">\n                  <str name=\"mytool\">com.example.solr.velocity.MyTool</str>\n                </lst>\n              </queryResponseWriter>\n      */\n      // Custom tools can override any of the built-in tools provided above, by registering one with the same name\n      if (request.getCore().getCoreDescriptor().isConfigSetTrusted()) {\n        for (Map.Entry<String, String> entry : customTools.entrySet()) {\n          String name = entry.getKey();\n          // TODO: at least log a warning when one of the *fixed* tools classes is same name with a custom one, currently silently ignored\n          Object customTool = SolrCore.createInstance(entry.getValue(), Object.class, \"VrW custom tool: \" + name, request.getCore(), request.getCore().getResourceLoader());\n          if (customTool instanceof LocaleConfig) {\n            ((LocaleConfig) customTool).configure(toolConfig);\n          }\n          context.put(name, customTool);\n        }\n      }\n\n      // custom tools _cannot_ override context objects added below, like $request and $response\n    }\n\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request\n      context.put(\"debug\",((QueryResponse)rsp).getDebugMap());\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n\n    context.put(\"request\", request);\n    context.put(\"response\", rsp);\n\n    return context;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b659435fdb2401d91fa87bb3df798ae41a8046cd","date":1600346713,"type":4,"author":"Erik Hatcher","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#createContext(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"unchecked\"})\n  private VelocityContext createContext(SolrQueryRequest request, SolrQueryResponse response) {\n    VelocityContext context = new VelocityContext();\n\n    // Register useful Velocity \"tools\"\n    String locale = request.getParams().get(LOCALE);\n    @SuppressWarnings({\"rawtypes\"})\n    Map toolConfig = new HashMap();\n    toolConfig.put(\"locale\", locale);\n\n\n    context.put(\"log\", log);   // TODO: add test; TODO: should this be overridable with a custom \"log\" named tool?\n    context.put(\"esc\", new EscapeTool());\n    context.put(\"date\", new ComparisonDateTool());\n    context.put(SORT, new CollectionTool());\n\n    MathTool mathTool = new MathTool();\n    mathTool.configure(toolConfig);\n    context.put(\"math\", mathTool);\n\n    NumberTool numberTool = new NumberTool();\n    numberTool.configure(toolConfig);\n    context.put(\"number\", numberTool);\n\n\n    DisplayTool displayTool = new DisplayTool();\n    displayTool.configure(toolConfig);\n    context.put(\"display\", displayTool);\n\n    ResourceTool resourceTool = new SolrVelocityResourceTool(request.getCore().getSolrConfig().getResourceLoader().getClassLoader());\n    resourceTool.configure(toolConfig);\n    context.put(\"resource\", resourceTool);\n\n    if (request.getCore().getCoreDescriptor().isConfigSetTrusted()) {\n      // Load custom tools, only if in a trusted configset\n\n      /*\n          // Custom tools, specified in config as:\n              <queryResponseWriter name=\"velocityWithCustomTools\" class=\"solr.VelocityResponseWriter\">\n                <lst name=\"tools\">\n                  <str name=\"mytool\">com.example.solr.velocity.MyTool</str>\n                </lst>\n              </queryResponseWriter>\n      */\n      // Custom tools can override any of the built-in tools provided above, by registering one with the same name\n      if (request.getCore().getCoreDescriptor().isConfigSetTrusted()) {\n        for (Map.Entry<String, String> entry : customTools.entrySet()) {\n          String name = entry.getKey();\n          // TODO: at least log a warning when one of the *fixed* tools classes is same name with a custom one, currently silently ignored\n          Object customTool = SolrCore.createInstance(entry.getValue(), Object.class, \"VrW custom tool: \" + name, request.getCore(), request.getCore().getResourceLoader());\n          if (customTool instanceof LocaleConfig) {\n            ((LocaleConfig) customTool).configure(toolConfig);\n          }\n          context.put(name, customTool);\n        }\n      }\n\n      // custom tools _cannot_ override context objects added below, like $request and $response\n    }\n\n\n    // Turn the SolrQueryResponse into a SolrResponse.\n    // QueryResponse has lots of conveniences suitable for a view\n    // Problem is, which SolrResponse class to use?\n    // One patch to SOLR-620 solved this by passing in a class name as\n    // as a parameter and using reflection and Solr's class loader to\n    // create a new instance.  But for now the implementation simply\n    // uses QueryResponse, and if it chokes in a known way, fall back\n    // to bare bones SolrResponseBase.\n    // Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least\n    SolrResponse rsp = new QueryResponse();\n    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);\n    try {\n      rsp.setResponse(parsedResponse);\n\n      // page only injected if QueryResponse works\n      context.put(\"page\", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request\n      context.put(\"debug\",((QueryResponse)rsp).getDebugMap());\n    } catch (ClassCastException e) {\n      // known edge case where QueryResponse's extraction assumes \"response\" is a SolrDocumentList\n      // (AnalysisRequestHandler emits a \"response\")\n      rsp = new SolrResponseBase();\n      rsp.setResponse(parsedResponse);\n    }\n\n    context.put(\"request\", request);\n    context.put(\"response\", rsp);\n\n    return context;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1936b95f78af7bc57e67df5b0de3f21a54df10af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0"],"7d49824890ade4ceb71eb61c0cde1231c8037621":["10349d681267bb9b224adb51818a0c9b68fdc22c"],"ada1d1c1521680f2ede5f2a7e78c69f077b6caa6":["01624b85de12fb02335810bdf325124e59040772"],"6f4c5d3859373c3a74734e85efa122b17514e3e8":["7d49824890ade4ceb71eb61c0cde1231c8037621"],"01624b85de12fb02335810bdf325124e59040772":["7d49824890ade4ceb71eb61c0cde1231c8037621"],"10349d681267bb9b224adb51818a0c9b68fdc22c":["2a56cf4d99cfac921f5a0c55a44e5561b54b5cd8"],"df724d84dab24a0cc54bec95a8680867adc7f171":["bb9c3baacabd473e8ecd6c4948aabacead49b88e","d94deac68514af4c985eabd56d9bb95ce27467b9"],"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0":["ada1d1c1521680f2ede5f2a7e78c69f077b6caa6"],"2a56cf4d99cfac921f5a0c55a44e5561b54b5cd8":["1936b95f78af7bc57e67df5b0de3f21a54df10af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b659435fdb2401d91fa87bb3df798ae41a8046cd":["c19eeb5bbd032a02cb82a253c4c9ae35863ea2dc"],"d94deac68514af4c985eabd56d9bb95ce27467b9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"c19eeb5bbd032a02cb82a253c4c9ae35863ea2dc":["d94deac68514af4c985eabd56d9bb95ce27467b9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b659435fdb2401d91fa87bb3df798ae41a8046cd"],"b0b597c65628ca9e73913a07e81691f8229bae35":["ada1d1c1521680f2ede5f2a7e78c69f077b6caa6","7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0"]},"commit2Childs":{"1936b95f78af7bc57e67df5b0de3f21a54df10af":["2a56cf4d99cfac921f5a0c55a44e5561b54b5cd8"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"7d49824890ade4ceb71eb61c0cde1231c8037621":["6f4c5d3859373c3a74734e85efa122b17514e3e8","01624b85de12fb02335810bdf325124e59040772"],"ada1d1c1521680f2ede5f2a7e78c69f077b6caa6":["7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","b0b597c65628ca9e73913a07e81691f8229bae35"],"6f4c5d3859373c3a74734e85efa122b17514e3e8":[],"01624b85de12fb02335810bdf325124e59040772":["ada1d1c1521680f2ede5f2a7e78c69f077b6caa6"],"10349d681267bb9b224adb51818a0c9b68fdc22c":["7d49824890ade4ceb71eb61c0cde1231c8037621"],"df724d84dab24a0cc54bec95a8680867adc7f171":[],"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","b0b597c65628ca9e73913a07e81691f8229bae35"],"2a56cf4d99cfac921f5a0c55a44e5561b54b5cd8":["10349d681267bb9b224adb51818a0c9b68fdc22c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1936b95f78af7bc57e67df5b0de3f21a54df10af"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["df724d84dab24a0cc54bec95a8680867adc7f171","d94deac68514af4c985eabd56d9bb95ce27467b9"],"d94deac68514af4c985eabd56d9bb95ce27467b9":["df724d84dab24a0cc54bec95a8680867adc7f171","c19eeb5bbd032a02cb82a253c4c9ae35863ea2dc"],"b659435fdb2401d91fa87bb3df798ae41a8046cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c19eeb5bbd032a02cb82a253c4c9ae35863ea2dc":["b659435fdb2401d91fa87bb3df798ae41a8046cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["6f4c5d3859373c3a74734e85efa122b17514e3e8","df724d84dab24a0cc54bec95a8680867adc7f171","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}