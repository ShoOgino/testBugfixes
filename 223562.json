{"path":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#downHeapCost(DisiWrapper[Scorer][],int).mjava","commits":[{"id":"7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7","date":1429852340,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#downHeapCost(DisiWrapper[Scorer][],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#downHeapCost(ScorerWrapper[],int).mjava","sourceNew":"  private static void downHeapCost(DisiWrapper<Scorer>[] heap, int size) {\n    int i = 0;\n    final DisiWrapper<Scorer> node = heap[0];\n    int j = leftNode(i);\n    if (j < size) {\n      int k = rightNode(j);\n      if (k < size && heap[k].cost < heap[j].cost) {\n        j = k;\n      }\n      if (heap[j].cost < node.cost) {\n        do {\n          heap[i] = heap[j];\n          i = j;\n          j = leftNode(i);\n          k = rightNode(j);\n          if (k < size && heap[k].cost < heap[j].cost) {\n            j = k;\n          }\n        } while (j < size && heap[j].cost < node.cost);\n        heap[i] = node;\n      }\n    }\n  }\n\n","sourceOld":"  private static void downHeapCost(ScorerWrapper[] heap, int size) {\n    int i = 0;\n    final ScorerWrapper node = heap[0];\n    int j = leftNode(i);\n    if (j < size) {\n      int k = rightNode(j);\n      if (k < size && heap[k].cost < heap[j].cost) {\n        j = k;\n      }\n      if (heap[j].cost < node.cost) {\n        do {\n          heap[i] = heap[j];\n          i = j;\n          j = leftNode(i);\n          k = rightNode(j);\n          if (k < size && heap[k].cost < heap[j].cost) {\n            j = k;\n          }\n        } while (j < size && heap[j].cost < node.cost);\n        heap[i] = node;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#downHeapCost(DisiWrapper[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#downHeapCost(DisiWrapper[Scorer][],int).mjava","sourceNew":"  private static void downHeapCost(DisiWrapper[] heap, int size) {\n    int i = 0;\n    final DisiWrapper node = heap[0];\n    int j = leftNode(i);\n    if (j < size) {\n      int k = rightNode(j);\n      if (k < size && heap[k].cost < heap[j].cost) {\n        j = k;\n      }\n      if (heap[j].cost < node.cost) {\n        do {\n          heap[i] = heap[j];\n          i = j;\n          j = leftNode(i);\n          k = rightNode(j);\n          if (k < size && heap[k].cost < heap[j].cost) {\n            j = k;\n          }\n        } while (j < size && heap[j].cost < node.cost);\n        heap[i] = node;\n      }\n    }\n  }\n\n","sourceOld":"  private static void downHeapCost(DisiWrapper<Scorer>[] heap, int size) {\n    int i = 0;\n    final DisiWrapper<Scorer> node = heap[0];\n    int j = leftNode(i);\n    if (j < size) {\n      int k = rightNode(j);\n      if (k < size && heap[k].cost < heap[j].cost) {\n        j = k;\n      }\n      if (heap[j].cost < node.cost) {\n        do {\n          heap[i] = heap[j];\n          i = j;\n          j = leftNode(i);\n          k = rightNode(j);\n          if (k < size && heap[k].cost < heap[j].cost) {\n            j = k;\n          }\n        } while (j < size && heap[j].cost < node.cost);\n        heap[i] = node;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dd748bb245633a8195281556bb0e68a6ea97d18":["7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dd748bb245633a8195281556bb0e68a6ea97d18"]},"commit2Childs":{"7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}