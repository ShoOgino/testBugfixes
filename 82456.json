{"path":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#toString(BytesRef).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#toString(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#toString(BytesRef).mjava","sourceNew":"    // for debugging\n    @SuppressWarnings(\"unused\")\n    private String toString(BytesRef b) {\n      try {\n        return b.utf8ToString() + \" \" + b;\n      } catch (Throwable t) {\n        // If BytesRef isn't actually UTF8, or it's eg a\n        // prefix of UTF8 that ends mid-unicode-char, we\n        // fallback to hex:\n        return b.toString();\n      }\n    }\n\n","sourceOld":"    // for debugging\n    @SuppressWarnings(\"unused\")\n    private String toString(BytesRef b) {\n      try {\n        return b.utf8ToString() + \" \" + b;\n      } catch (Throwable t) {\n        // If BytesRef isn't actually UTF8, or it's eg a\n        // prefix of UTF8 that ends mid-unicode-char, we\n        // fallback to hex:\n        return b.toString();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#toString(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#toString(BytesRef).mjava","sourceNew":"    // for debugging\n    private String toString(BytesRef b) {\n      try {\n        return b.utf8ToString() + \" \" + b;\n      } catch (Throwable t) {\n        // If BytesRef isn't actually UTF8, or it's eg a\n        // prefix of UTF8 that ends mid-unicode-char, we\n        // fallback to hex:\n        return b.toString();\n      }\n    }\n\n","sourceOld":"    // for debugging\n    @SuppressWarnings(\"unused\")\n    private String toString(BytesRef b) {\n      try {\n        return b.utf8ToString() + \" \" + b;\n      } catch (Throwable t) {\n        // If BytesRef isn't actually UTF8, or it's eg a\n        // prefix of UTF8 that ends mid-unicode-char, we\n        // fallback to hex:\n        return b.toString();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bfa39296944e5fddc334aa89243d91f9cbb8367","date":1330973284,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#toString(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#toString(BytesRef).mjava","sourceNew":"    // for debugging\n    @SuppressWarnings(\"unused\")\n\tprivate String toString(BytesRef b) {\n      try {\n        return b.utf8ToString() + \" \" + b;\n      } catch (Throwable t) {\n        // If BytesRef isn't actually UTF8, or it's eg a\n        // prefix of UTF8 that ends mid-unicode-char, we\n        // fallback to hex:\n        return b.toString();\n      }\n    }\n\n","sourceOld":"    // for debugging\n    private String toString(BytesRef b) {\n      try {\n        return b.utf8ToString() + \" \" + b;\n      } catch (Throwable t) {\n        // If BytesRef isn't actually UTF8, or it's eg a\n        // prefix of UTF8 that ends mid-unicode-char, we\n        // fallback to hex:\n        return b.toString();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#toString(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#toString(BytesRef).mjava","sourceNew":"    // for debugging\n    @SuppressWarnings(\"unused\")\n\tprivate String toString(BytesRef b) {\n      try {\n        return b.utf8ToString() + \" \" + b;\n      } catch (Throwable t) {\n        // If BytesRef isn't actually UTF8, or it's eg a\n        // prefix of UTF8 that ends mid-unicode-char, we\n        // fallback to hex:\n        return b.toString();\n      }\n    }\n\n","sourceOld":"    // for debugging\n    @SuppressWarnings(\"unused\")\n    private String toString(BytesRef b) {\n      try {\n        return b.utf8ToString() + \" \" + b;\n      } catch (Throwable t) {\n        // If BytesRef isn't actually UTF8, or it's eg a\n        // prefix of UTF8 that ends mid-unicode-char, we\n        // fallback to hex:\n        return b.toString();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42a3c662451bf811842ec3517f82f739b87ea6df","date":1339004506,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#toString(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#toString(BytesRef).mjava","sourceNew":"    // for debugging\n    @SuppressWarnings(\"unused\")\n    private String toString(BytesRef b) {\n      try {\n        return b.utf8ToString() + \" \" + b;\n      } catch (Throwable t) {\n        // If BytesRef isn't actually UTF8, or it's eg a\n        // prefix of UTF8 that ends mid-unicode-char, we\n        // fallback to hex:\n        return b.toString();\n      }\n    }\n\n","sourceOld":"    // for debugging\n    @SuppressWarnings(\"unused\")\n\tprivate String toString(BytesRef b) {\n      try {\n        return b.utf8ToString() + \" \" + b;\n      } catch (Throwable t) {\n        // If BytesRef isn't actually UTF8, or it's eg a\n        // prefix of UTF8 that ends mid-unicode-char, we\n        // fallback to hex:\n        return b.toString();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ad80176d91a6f70fe93880e43dfd697dc4e63ed","date":1400176913,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#toString(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#toString(BytesRef).mjava","sourceNew":"    // for debugging\n    @SuppressWarnings(\"unused\")\n    private String toString(BytesRef b) {\n      try {\n        return b.utf8ToString() + \" \" + b;\n      } catch (Throwable t) {\n        // If BytesRef isn't actually UTF8, or it's eg a\n        // prefix of UTF8 that ends mid-unicode-char, we\n        // fallback to hex:\n        return b.toString();\n      }\n    }\n\n","sourceOld":"    // for debugging\n    @SuppressWarnings(\"unused\")\n    private String toString(BytesRef b) {\n      try {\n        return b.utf8ToString() + \" \" + b;\n      } catch (Throwable t) {\n        // If BytesRef isn't actually UTF8, or it's eg a\n        // prefix of UTF8 that ends mid-unicode-char, we\n        // fallback to hex:\n        return b.toString();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#toString(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#toString(BytesRef).mjava","sourceNew":"    // for debugging\n    @SuppressWarnings(\"unused\")\n    private String toString(BytesRef b) {\n      try {\n        return b.utf8ToString() + \" \" + b;\n      } catch (Throwable t) {\n        // If BytesRef isn't actually UTF8, or it's eg a\n        // prefix of UTF8 that ends mid-unicode-char, we\n        // fallback to hex:\n        return b.toString();\n      }\n    }\n\n","sourceOld":"    // for debugging\n    @SuppressWarnings(\"unused\")\n    private String toString(BytesRef b) {\n      try {\n        return b.utf8ToString() + \" \" + b;\n      } catch (Throwable t) {\n        // If BytesRef isn't actually UTF8, or it's eg a\n        // prefix of UTF8 that ends mid-unicode-char, we\n        // fallback to hex:\n        return b.toString();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":6,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.TermsWriter#toString(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#toString(BytesRef).mjava","sourceNew":"    // for debugging\n    @SuppressWarnings(\"unused\")\n    private String toString(BytesRef b) {\n      try {\n        return b.utf8ToString() + \" \" + b;\n      } catch (Throwable t) {\n        // If BytesRef isn't actually UTF8, or it's eg a\n        // prefix of UTF8 that ends mid-unicode-char, we\n        // fallback to hex:\n        return b.toString();\n      }\n    }\n\n","sourceOld":"    // for debugging\n    @SuppressWarnings(\"unused\")\n    private String toString(BytesRef b) {\n      try {\n        return b.utf8ToString() + \" \" + b;\n      } catch (Throwable t) {\n        // If BytesRef isn't actually UTF8, or it's eg a\n        // prefix of UTF8 that ends mid-unicode-char, we\n        // fallback to hex:\n        return b.toString();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["42a3c662451bf811842ec3517f82f739b87ea6df","5ad80176d91a6f70fe93880e43dfd697dc4e63ed"],"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["42a3c662451bf811842ec3517f82f739b87ea6df"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","8bfa39296944e5fddc334aa89243d91f9cbb8367"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"42a3c662451bf811842ec3517f82f739b87ea6df":["8bfa39296944e5fddc334aa89243d91f9cbb8367"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8bfa39296944e5fddc334aa89243d91f9cbb8367":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d637064d608752565d4f9f41b2497dfdfdde50e"]},"commit2Childs":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["8bfa39296944e5fddc334aa89243d91f9cbb8367"],"42a3c662451bf811842ec3517f82f739b87ea6df":["4d637064d608752565d4f9f41b2497dfdfdde50e","5ad80176d91a6f70fe93880e43dfd697dc4e63ed"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8bfa39296944e5fddc334aa89243d91f9cbb8367":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","42a3c662451bf811842ec3517f82f739b87ea6df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}