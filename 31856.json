{"path":"solr/core/src/java/org/apache/solr/cloud/rule/Rule#Rule(Map).mjava","commits":[{"id":"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe","date":1430750405,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/Rule#Rule(Map).mjava","pathOld":"/dev/null","sourceNew":"  public Rule(Map m) {\n    for (Object o : m.entrySet()) {\n      Map.Entry e = (Map.Entry) o;\n      Condition condition = new Condition(String.valueOf(e.getKey()), String.valueOf(e.getValue()));\n      if (condition.name.equals(SHARD_ID_PROP)) shard = condition;\n      else if (condition.name.equals(REPLICA_PROP)) replica = condition;\n      else {\n        if (tag != null) {\n          throw new RuntimeException(\"There can be only one and only one tag other than 'shard' and 'replica' in rule \" + m);\n        }\n        tag = condition;\n      }\n\n    }\n    if (shard == null) shard = SHARD_DEFAULT;\n    if (replica == null) replica = REPLICA_DEFAULT;\n    if (tag == null) throw new RuntimeException(\"There should be a tag other than 'shard' and 'replica'\");\n    if (replica.isWildCard() && tag.isWildCard()) {\n      throw new RuntimeException(\"Both replica and tag cannot be wild cards\");\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8891f085f71282bb3ece1b1732b68f07813a3","date":1591912889,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/Rule#Rule(Map).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/Rule#Rule(Map).mjava","sourceNew":"  public Rule(@SuppressWarnings({\"rawtypes\"})Map m) {\n    for (Object o : m.entrySet()) {\n      @SuppressWarnings({\"rawtypes\"})\n      Map.Entry e = (Map.Entry) o;\n      Condition condition = new Condition(String.valueOf(e.getKey()), String.valueOf(e.getValue()));\n      if (condition.name.equals(SHARD_ID_PROP)) shard = condition;\n      else if (condition.name.equals(REPLICA_PROP)) replica = condition;\n      else {\n        if (tag != null) {\n          throw new RuntimeException(\"There can be only one and only one tag other than 'shard' and 'replica' in rule \" + m);\n        }\n        tag = condition;\n      }\n\n    }\n    if (shard == null) shard = SHARD_DEFAULT;\n    if (replica == null) replica = REPLICA_DEFAULT;\n    if (tag == null) throw new RuntimeException(\"There should be a tag other than 'shard' and 'replica'\");\n    if (replica.isWildCard() && tag.isWildCard()) {\n      throw new RuntimeException(\"Both replica and tag cannot be wild cards\");\n    }\n\n  }\n\n","sourceOld":"  public Rule(Map m) {\n    for (Object o : m.entrySet()) {\n      Map.Entry e = (Map.Entry) o;\n      Condition condition = new Condition(String.valueOf(e.getKey()), String.valueOf(e.getValue()));\n      if (condition.name.equals(SHARD_ID_PROP)) shard = condition;\n      else if (condition.name.equals(REPLICA_PROP)) replica = condition;\n      else {\n        if (tag != null) {\n          throw new RuntimeException(\"There can be only one and only one tag other than 'shard' and 'replica' in rule \" + m);\n        }\n        tag = condition;\n      }\n\n    }\n    if (shard == null) shard = SHARD_DEFAULT;\n    if (replica == null) replica = REPLICA_DEFAULT;\n    if (tag == null) throw new RuntimeException(\"There should be a tag other than 'shard' and 'replica'\");\n    if (replica.isWildCard() && tag.isWildCard()) {\n      throw new RuntimeException(\"Both replica and tag cannot be wild cards\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06a8891f085f71282bb3ece1b1732b68f07813a3":["8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06a8891f085f71282bb3ece1b1732b68f07813a3"]},"commit2Childs":{"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}