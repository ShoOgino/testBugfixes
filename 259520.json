{"path":"solr/src/java/org/apache/solr/search/Phase2StringGroupCollector[Grouping]#setNextReader(AtomicReaderContext).mjava","commits":[{"id":"323f871ffe96b871d8c534a614be60751bb023c2","date":1294820532,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/Phase2StringGroupCollector[Grouping]#setNextReader(AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/Phase2StringGroupCollector[Grouping]#setNextReader(IndexReader,int).mjava","sourceNew":"  @Override\n  public void setNextReader(AtomicReaderContext context) throws IOException {\n    super.setNextReader(context);\n    index = ((StringIndexDocValues)docValues).getDocTermsIndex();\n\n    ordSet.clear();\n    for (SearchGroupDocs group : groupMap.values()) {\n      MutableValueStr gv = (MutableValueStr)group.groupValue;\n      int ord = 0;\n      if (gv.exists) {\n        ord = index.binarySearchLookup(((MutableValueStr)group.groupValue).value, spare);\n      }\n      if (ord >= 0) {\n        int slot = ordSet.put(ord);\n        groups[slot] = group;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setNextReader(IndexReader reader, int docBase) throws IOException {\n    super.setNextReader(reader, docBase);\n    index = ((StringIndexDocValues)docValues).getDocTermsIndex();\n\n    ordSet.clear();\n    for (SearchGroupDocs group : groupMap.values()) {\n      MutableValueStr gv = (MutableValueStr)group.groupValue;\n      int ord = 0;\n      if (gv.exists) {\n        ord = index.binarySearchLookup(((MutableValueStr)group.groupValue).value, spare);\n      }\n      if (ord >= 0) {\n        int slot = ordSet.put(ord);\n        groups[slot] = group;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/Phase2StringGroupCollector[Grouping]#setNextReader(AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void setNextReader(AtomicReaderContext context) throws IOException {\n    super.setNextReader(context);\n    index = ((StringIndexDocValues)docValues).getDocTermsIndex();\n\n    ordSet.clear();\n    for (SearchGroupDocs group : groupMap.values()) {\n      MutableValueStr gv = (MutableValueStr)group.groupValue;\n      int ord = 0;\n      if (gv.exists) {\n        ord = index.binarySearchLookup(((MutableValueStr)group.groupValue).value, spare);\n      }\n      if (ord >= 0) {\n        int slot = ordSet.put(ord);\n        groups[slot] = group;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/Phase2StringGroupCollector[Grouping]#setNextReader(AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void setNextReader(AtomicReaderContext context) throws IOException {\n    super.setNextReader(context);\n    index = ((StringIndexDocValues)docValues).getDocTermsIndex();\n\n    ordSet.clear();\n    for (SearchGroupDocs group : groupMap.values()) {\n      MutableValueStr gv = (MutableValueStr)group.groupValue;\n      int ord = 0;\n      if (gv.exists) {\n        ord = index.binarySearchLookup(((MutableValueStr)group.groupValue).value, spare);\n      }\n      if (ord >= 0) {\n        int slot = ordSet.put(ord);\n        groups[slot] = group;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c7cdfe5a1ea9db97faa404b251fa644faa73597","date":1308345959,"type":4,"author":"Martijn van Groningen","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/Phase2StringGroupCollector[Grouping]#setNextReader(AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void setNextReader(AtomicReaderContext context) throws IOException {\n    super.setNextReader(context);\n    index = ((StringIndexDocValues)docValues).getDocTermsIndex();\n\n    ordSet.clear();\n    for (SearchGroupDocs group : groupMap.values()) {\n      MutableValueStr gv = (MutableValueStr)group.groupValue;\n      int ord = 0;\n      if (gv.exists) {\n        ord = index.binarySearchLookup(((MutableValueStr)group.groupValue).value, spare);\n      }\n      if (ord >= 0) {\n        int slot = ordSet.put(ord);\n        groups[slot] = group;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7edfc3f7caa7b49a18fe367692768b33b018e9db","date":1308374217,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/Phase2StringGroupCollector[Grouping]#setNextReader(AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void setNextReader(AtomicReaderContext context) throws IOException {\n    super.setNextReader(context);\n    index = ((StringIndexDocValues)docValues).getDocTermsIndex();\n\n    ordSet.clear();\n    for (SearchGroupDocs group : groupMap.values()) {\n      MutableValueStr gv = (MutableValueStr)group.groupValue;\n      int ord = 0;\n      if (gv.exists) {\n        ord = index.binarySearchLookup(((MutableValueStr)group.groupValue).value, spare);\n      }\n      if (ord >= 0) {\n        int slot = ordSet.put(ord);\n        groups[slot] = group;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"323f871ffe96b871d8c534a614be60751bb023c2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7edfc3f7caa7b49a18fe367692768b33b018e9db":["323f871ffe96b871d8c534a614be60751bb023c2","9c7cdfe5a1ea9db97faa404b251fa644faa73597"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","323f871ffe96b871d8c534a614be60751bb023c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9c7cdfe5a1ea9db97faa404b251fa644faa73597":["323f871ffe96b871d8c534a614be60751bb023c2"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","323f871ffe96b871d8c534a614be60751bb023c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9c7cdfe5a1ea9db97faa404b251fa644faa73597"]},"commit2Childs":{"323f871ffe96b871d8c534a614be60751bb023c2":["7edfc3f7caa7b49a18fe367692768b33b018e9db","29ef99d61cda9641b6250bf9567329a6e65f901d","9c7cdfe5a1ea9db97faa404b251fa644faa73597","868da859b43505d9d2a023bfeae6dd0c795f5295"],"7edfc3f7caa7b49a18fe367692768b33b018e9db":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["323f871ffe96b871d8c534a614be60751bb023c2","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"9c7cdfe5a1ea9db97faa404b251fa644faa73597":["7edfc3f7caa7b49a18fe367692768b33b018e9db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7edfc3f7caa7b49a18fe367692768b33b018e9db","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}