{"path":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#setPruneLeafyBranches(boolean).mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#setPruneLeafyBranches(boolean).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#setPruneLeafyBranches(boolean).mjava","sourceNew":"  /**\n   * An optional hint affecting non-point shapes: it will\n   * prune away a complete set sibling leaves to their parent (recursively), resulting in ~20-50%\n   * fewer indexed cells, and consequently that much less disk and that much faster indexing.\n   * So if it's a quad tree and all 4 sub-cells are there marked as a leaf, then they will be\n   * removed (pruned) and the parent is marked as a leaf instead.  This occurs recursively on up.  Unfortunately, the\n   * current implementation will buffer all cells to do this, so consider disabling for high precision (low distErrPct)\n   * shapes. (default=true)\n   */\n  public void setPruneLeafyBranches(boolean pruneLeafyBranches) {\n    this.pruneLeafyBranches = pruneLeafyBranches;\n  }\n\n","sourceOld":"  /**\n   * An optional hint affecting non-point shapes: it will\n   * prune away a complete set sibling leaves to their parent (recursively), resulting in ~20-50%\n   * fewer indexed cells, and consequently that much less disk and that much faster indexing.\n   * So if it's a quad tree and all 4 sub-cells are there marked as a leaf, then they will be\n   * removed (pruned) and the parent is marked as a leaf instead.  This occurs recursively on up.  Unfortunately, the\n   * current implementation will buffer all cells to do this, so consider disabling for high precision (low distErrPct)\n   * shapes. (default=true)\n   */\n  public void setPruneLeafyBranches(boolean pruneLeafyBranches) {\n    this.pruneLeafyBranches = pruneLeafyBranches;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#setPruneLeafyBranches(boolean).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#setPruneLeafyBranches(boolean).mjava","sourceNew":"  /**\n   * An optional hint affecting non-point shapes: it will\n   * prune away a complete set sibling leaves to their parent (recursively), resulting in ~20-50%\n   * fewer indexed cells, and consequently that much less disk and that much faster indexing.\n   * So if it's a quad tree and all 4 sub-cells are there marked as a leaf, then they will be\n   * removed (pruned) and the parent is marked as a leaf instead.  This occurs recursively on up.  Unfortunately, the\n   * current implementation will buffer all cells to do this, so consider disabling for high precision (low distErrPct)\n   * shapes. (default=true)\n   */\n  public void setPruneLeafyBranches(boolean pruneLeafyBranches) {\n    this.pruneLeafyBranches = pruneLeafyBranches;\n  }\n\n","sourceOld":"  /**\n   * An optional hint affecting non-point shapes: it will\n   * prune away a complete set sibling leaves to their parent (recursively), resulting in ~20-50%\n   * fewer indexed cells, and consequently that much less disk and that much faster indexing.\n   * So if it's a quad tree and all 4 sub-cells are there marked as a leaf, then they will be\n   * removed (pruned) and the parent is marked as a leaf instead.  This occurs recursively on up.  Unfortunately, the\n   * current implementation will buffer all cells to do this, so consider disabling for high precision (low distErrPct)\n   * shapes. (default=true)\n   */\n  public void setPruneLeafyBranches(boolean pruneLeafyBranches) {\n    this.pruneLeafyBranches = pruneLeafyBranches;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1437f4dfa790420339a16dbe1654d19e77e7bdeb","date":1520247209,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#setPruneLeafyBranches(boolean).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#setPruneLeafyBranches(boolean).mjava","sourceNew":"  /**\n   * An optional hint affecting non-point shapes and tree cells implementing {@link CellCanPrune}, otherwise\n   * ignored.\n   * <p>\n   * It will prune away a complete set sibling leaves to their parent (recursively), resulting in ~20-50%\n   * fewer indexed cells, and consequently that much less disk and that much faster indexing.\n   * So if it's a quad tree and all 4 sub-cells are there marked as a leaf, then they will be\n   * removed (pruned) and the parent is marked as a leaf instead.  This occurs recursively on up.  Unfortunately, the\n   * current implementation will buffer all cells to do this, so consider disabling for high precision (low distErrPct)\n   * shapes. (default=true)\n   */\n  public void setPruneLeafyBranches(boolean pruneLeafyBranches) {\n    this.pruneLeafyBranches = pruneLeafyBranches;\n  }\n\n","sourceOld":"  /**\n   * An optional hint affecting non-point shapes: it will\n   * prune away a complete set sibling leaves to their parent (recursively), resulting in ~20-50%\n   * fewer indexed cells, and consequently that much less disk and that much faster indexing.\n   * So if it's a quad tree and all 4 sub-cells are there marked as a leaf, then they will be\n   * removed (pruned) and the parent is marked as a leaf instead.  This occurs recursively on up.  Unfortunately, the\n   * current implementation will buffer all cells to do this, so consider disabling for high precision (low distErrPct)\n   * shapes. (default=true)\n   */\n  public void setPruneLeafyBranches(boolean pruneLeafyBranches) {\n    this.pruneLeafyBranches = pruneLeafyBranches;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1437f4dfa790420339a16dbe1654d19e77e7bdeb":["af2638813028b254a88b418ebeafb541afb49653"],"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1437f4dfa790420339a16dbe1654d19e77e7bdeb"]},"commit2Childs":{"1437f4dfa790420339a16dbe1654d19e77e7bdeb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"af2638813028b254a88b418ebeafb541afb49653":["1437f4dfa790420339a16dbe1654d19e77e7bdeb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}