{"path":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#addBoostQuery(BooleanQuery.Builder,SolrParams).mjava","commits":[{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#addBoostQuery(BooleanQuery.Builder,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#addBoostQuery(BooleanQuery,SolrParams).mjava","sourceNew":"  protected void addBoostQuery(BooleanQuery.Builder query, SolrParams solrParams) throws SyntaxError {\n    boostParams = solrParams.getParams(DisMaxParams.BQ);\n    //List<Query> boostQueries = SolrPluginUtils.parseQueryStrings(req, boostParams);\n    boostQueries = null;\n    if (boostParams != null && boostParams.length > 0) {\n      boostQueries = new ArrayList<>();\n      for (String qs : boostParams) {\n        if (qs.trim().length() == 0) continue;\n        Query q = subQuery(qs, null).getQuery();\n        boostQueries.add(q);\n      }\n    }\n    if (null != boostQueries) {\n      if (1 == boostQueries.size() && 1 == boostParams.length) {\n        /* legacy logic */\n        Query f = boostQueries.get(0);\n        if (1.0f == f.getBoost() && f instanceof BooleanQuery) {\n          /* if the default boost was used, and we've got a BooleanQuery\n           * extract the subqueries out and use them directly\n           */\n          for (Object c : ((BooleanQuery) f).clauses()) {\n            query.add((BooleanClause) c);\n          }\n        } else {\n          query.add(f, BooleanClause.Occur.SHOULD);\n        }\n      } else {\n        for (Query f : boostQueries) {\n          query.add(f, BooleanClause.Occur.SHOULD);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void addBoostQuery(BooleanQuery query, SolrParams solrParams) throws SyntaxError {\n    boostParams = solrParams.getParams(DisMaxParams.BQ);\n    //List<Query> boostQueries = SolrPluginUtils.parseQueryStrings(req, boostParams);\n    boostQueries = null;\n    if (boostParams != null && boostParams.length > 0) {\n      boostQueries = new ArrayList<>();\n      for (String qs : boostParams) {\n        if (qs.trim().length() == 0) continue;\n        Query q = subQuery(qs, null).getQuery();\n        boostQueries.add(q);\n      }\n    }\n    if (null != boostQueries) {\n      if (1 == boostQueries.size() && 1 == boostParams.length) {\n        /* legacy logic */\n        Query f = boostQueries.get(0);\n        if (1.0f == f.getBoost() && f instanceof BooleanQuery) {\n          /* if the default boost was used, and we've got a BooleanQuery\n           * extract the subqueries out and use them directly\n           */\n          for (Object c : ((BooleanQuery) f).clauses()) {\n            query.add((BooleanClause) c);\n          }\n        } else {\n          query.add(f, BooleanClause.Occur.SHOULD);\n        }\n      } else {\n        for (Query f : boostQueries) {\n          query.add(f, BooleanClause.Occur.SHOULD);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#addBoostQuery(BooleanQuery.Builder,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#addBoostQuery(BooleanQuery.Builder,SolrParams).mjava","sourceNew":"  protected void addBoostQuery(BooleanQuery.Builder query, SolrParams solrParams) throws SyntaxError {\n    boostParams = solrParams.getParams(DisMaxParams.BQ);\n    //List<Query> boostQueries = SolrPluginUtils.parseQueryStrings(req, boostParams);\n    boostQueries = null;\n    if (boostParams != null && boostParams.length > 0) {\n      boostQueries = new ArrayList<>();\n      for (String qs : boostParams) {\n        if (qs.trim().length() == 0) continue;\n        Query q = subQuery(qs, null).getQuery();\n        boostQueries.add(q);\n      }\n    }\n    if (null != boostQueries) {\n      if (1 == boostQueries.size() && 1 == boostParams.length) {\n        /* legacy logic */\n        Query f = boostQueries.get(0);\n        while (f instanceof BoostQuery) {\n          BoostQuery bq = (BoostQuery) f;\n          if (bq .getBoost() == 1f) {\n            f = bq.getQuery();\n          } else {\n            break;\n          }\n        }\n        if (f instanceof BooleanQuery) {\n          /* if the default boost was used, and we've got a BooleanQuery\n           * extract the subqueries out and use them directly\n           */\n          for (Object c : ((BooleanQuery) f).clauses()) {\n            query.add((BooleanClause) c);\n          }\n        } else {\n          query.add(f, BooleanClause.Occur.SHOULD);\n        }\n      } else {\n        for (Query f : boostQueries) {\n          query.add(f, BooleanClause.Occur.SHOULD);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void addBoostQuery(BooleanQuery.Builder query, SolrParams solrParams) throws SyntaxError {\n    boostParams = solrParams.getParams(DisMaxParams.BQ);\n    //List<Query> boostQueries = SolrPluginUtils.parseQueryStrings(req, boostParams);\n    boostQueries = null;\n    if (boostParams != null && boostParams.length > 0) {\n      boostQueries = new ArrayList<>();\n      for (String qs : boostParams) {\n        if (qs.trim().length() == 0) continue;\n        Query q = subQuery(qs, null).getQuery();\n        boostQueries.add(q);\n      }\n    }\n    if (null != boostQueries) {\n      if (1 == boostQueries.size() && 1 == boostParams.length) {\n        /* legacy logic */\n        Query f = boostQueries.get(0);\n        if (1.0f == f.getBoost() && f instanceof BooleanQuery) {\n          /* if the default boost was used, and we've got a BooleanQuery\n           * extract the subqueries out and use them directly\n           */\n          for (Object c : ((BooleanQuery) f).clauses()) {\n            query.add((BooleanClause) c);\n          }\n        } else {\n          query.add(f, BooleanClause.Occur.SHOULD);\n        }\n      } else {\n        for (Query f : boostQueries) {\n          query.add(f, BooleanClause.Occur.SHOULD);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dfdf766e55e943d942055d7de53c7ad6bc45283"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}