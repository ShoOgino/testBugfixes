{"path":"src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory).mjava","commits":[{"id":"08cb7380901e8bc96eacd525a5b157ab9949672a","date":1163818514,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory).mjava","pathOld":"/dev/null","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory) throws Exception {\n    IndexModifier modifier = new IndexModifier(directory, ANALYZER, true);\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier);\n    indexerThread.start();\n      \n    // Two searchers that constantly just re-instantiate the searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory);\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory);\n    searcherThread2.start();\n\n    indexerThread.join();\n    searcherThread1.join();\n    searcherThread2.join();\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory).mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory) throws Exception {\n    IndexModifier modifier = new IndexModifier(directory, ANALYZER, true);\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier);\n    indexerThread.start();\n      \n    IndexerThread indexerThread2 = new IndexerThread(modifier);\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory);\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory);\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    modifier.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer 2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory) throws Exception {\n    IndexModifier modifier = new IndexModifier(directory, ANALYZER, true);\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier);\n    indexerThread.start();\n      \n    // Two searchers that constantly just re-instantiate the searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory);\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory);\n    searcherThread2.start();\n\n    indexerThread.join();\n    searcherThread1.join();\n    searcherThread2.join();\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9af05aaa9c4ca3e1864e77530a9d0e295045abe","date":1188249496,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory).mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, ANALYZER, true);\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier);\n    indexerThread.start();\n      \n    IndexerThread indexerThread2 = new IndexerThread(modifier);\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory);\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory);\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    modifier.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory) throws Exception {\n    IndexModifier modifier = new IndexModifier(directory, ANALYZER, true);\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier);\n    indexerThread.start();\n      \n    IndexerThread indexerThread2 = new IndexerThread(modifier);\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory);\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory);\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    modifier.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer 2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1405362241b561f5590ff4a87d5d6e173bcd9cf","date":1190107634,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory,boolean,MergeScheduler).mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing#runStressTest(Directory).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory, boolean autoCommit, MergeScheduler mergeScheduler) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, autoCommit, ANALYZER, true);\n\n    modifier.setMaxBufferedDocs(10);\n\n    TimedThread[] threads = new TimedThread[4];\n\n    if (mergeScheduler != null)\n      modifier.setMergeScheduler(mergeScheduler);\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n      \n    IndexerThread indexerThread2 = new IndexerThread(modifier, threads);\n    threads[2] = indexerThread2;\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the\n    // searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    modifier.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runStressTest(Directory directory) throws Exception {\n    IndexWriter modifier = new IndexWriter(directory, ANALYZER, true);\n\n    // One modifier that writes 10 docs then removes 5, over\n    // and over:\n    IndexerThread indexerThread = new IndexerThread(modifier);\n    indexerThread.start();\n      \n    IndexerThread indexerThread2 = new IndexerThread(modifier);\n    indexerThread2.start();\n      \n    // Two searchers that constantly just re-instantiate the searcher:\n    SearcherThread searcherThread1 = new SearcherThread(directory);\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory);\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    modifier.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["a9af05aaa9c4ca3e1864e77530a9d0e295045abe"],"a9af05aaa9c4ca3e1864e77530a9d0e295045abe":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"08cb7380901e8bc96eacd525a5b157ab9949672a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["08cb7380901e8bc96eacd525a5b157ab9949672a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"]},"commit2Childs":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a9af05aaa9c4ca3e1864e77530a9d0e295045abe":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["08cb7380901e8bc96eacd525a5b157ab9949672a"],"08cb7380901e8bc96eacd525a5b157ab9949672a":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["a9af05aaa9c4ca3e1864e77530a9d0e295045abe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}