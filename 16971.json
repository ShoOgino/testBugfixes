{"path":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionValueSource#testFibonacciExpr().mjava","commits":[{"id":"b9b0e53e02301eb86bb475aee9c79e69fe0ac593","date":1594322334,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionValueSource#testFibonacciExpr().mjava","pathOld":"/dev/null","sourceNew":"  public void testFibonacciExpr() throws Exception {\n    int n = 40;\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(\"f0\", DoubleValuesSource.constant(0));\n    bindings.add(\"f1\", DoubleValuesSource.constant(1));\n    for (int i = 2; i < n + 1; i++) {\n      // Without using CachingExpressionValueSource this test will fail after 1 min around because of out of heap space when n=40\n      bindings.add(\"f\" + Integer.toString(i), new CachingExpressionValueSource(\n          (ExpressionValueSource) JavascriptCompiler.compile(\"f\" + Integer.toString(i - 1)+\" + f\" + Integer.toString(i - 2)).getDoubleValuesSource(bindings)));\n    }\n    DoubleValues values = bindings.getDoubleValuesSource(\"f\" + Integer.toString(n)).getValues(null, null);\n\n    assertTrue(values.advanceExact(0));\n    assertEquals(fib(n), (int)values.doubleValue());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b9b0e53e02301eb86bb475aee9c79e69fe0ac593":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b9b0e53e02301eb86bb475aee9c79e69fe0ac593"]},"commit2Childs":{"b9b0e53e02301eb86bb475aee9c79e69fe0ac593":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b9b0e53e02301eb86bb475aee9c79e69fe0ac593"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}