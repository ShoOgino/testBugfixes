{"path":"modules/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testBoostFactor().mjava","commits":[{"id":"b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1","date":1310609231,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testBoostFactor().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/similar/TestMoreLikeThis#testBoostFactor().mjava","sourceNew":"  public void testBoostFactor() throws Throwable {\n    Map<String,Float> originalValues = getOriginalValues();\n    \n    MoreLikeThis mlt = new MoreLikeThis(reader);\n    mlt.setAnalyzer(new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n    mlt.setMinDocFreq(1);\n    mlt.setMinTermFreq(1);\n    mlt.setMinWordLen(1);\n    mlt.setFieldNames(new String[] {\"text\"});\n    mlt.setBoost(true);\n    \n    // this mean that every term boost factor will be multiplied by this\n    // number\n    float boostFactor = 5;\n    mlt.setBoostFactor(boostFactor);\n    \n    BooleanQuery query = (BooleanQuery) mlt.like(new StringReader(\n        \"lucene release\"));\n    List<BooleanClause> clauses = query.clauses();\n    \n    assertEquals(\"Expected \" + originalValues.size() + \" clauses.\",\n        originalValues.size(), clauses.size());\n\n    for (BooleanClause clause : clauses) {\n      TermQuery tq = (TermQuery) clause.getQuery();\n      Float termBoost = originalValues.get(tq.getTerm().text());\n      assertNotNull(\"Expected term \" + tq.getTerm().text(), termBoost);\n\n      float totalBoost = termBoost * boostFactor;\n      assertEquals(\"Expected boost of \" + totalBoost + \" for term '\"\n          + tq.getTerm().text() + \"' got \" + tq.getBoost(), totalBoost, tq\n          .getBoost(), 0.0001);\n    }\n  }\n\n","sourceOld":"  public void testBoostFactor() throws Throwable {\n    Map<String,Float> originalValues = getOriginalValues();\n    \n    MoreLikeThis mlt = new MoreLikeThis(reader);\n    mlt.setAnalyzer(new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n    mlt.setMinDocFreq(1);\n    mlt.setMinTermFreq(1);\n    mlt.setMinWordLen(1);\n    mlt.setFieldNames(new String[] {\"text\"});\n    mlt.setBoost(true);\n    \n    // this mean that every term boost factor will be multiplied by this\n    // number\n    float boostFactor = 5;\n    mlt.setBoostFactor(boostFactor);\n    \n    BooleanQuery query = (BooleanQuery) mlt.like(new StringReader(\n        \"lucene release\"));\n    List<BooleanClause> clauses = query.clauses();\n    \n    assertEquals(\"Expected \" + originalValues.size() + \" clauses.\",\n        originalValues.size(), clauses.size());\n    \n    for (int i = 0; i < clauses.size(); i++) {\n      BooleanClause clause = clauses.get(i);\n      TermQuery tq = (TermQuery) clause.getQuery();\n      Float termBoost = originalValues.get(tq.getTerm().text());\n      assertNotNull(\"Expected term \" + tq.getTerm().text(), termBoost);\n      \n      float totalBoost = termBoost.floatValue() * boostFactor;\n      assertEquals(\"Expected boost of \" + totalBoost + \" for term '\"\n          + tq.getTerm().text() + \"' got \" + tq.getBoost(), totalBoost, tq\n          .getBoost(), 0.0001);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae46d105c94ea6ceb5201189bf9611bdef91b1b4","date":1310997409,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testBoostFactor().mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testBoostFactor().mjava","sourceNew":"  public void testBoostFactor() throws Throwable {\n    Map<String,Float> originalValues = getOriginalValues();\n    \n    MoreLikeThis mlt = new MoreLikeThis(reader);\n    mlt.setAnalyzer(new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n    mlt.setMinDocFreq(1);\n    mlt.setMinTermFreq(1);\n    mlt.setMinWordLen(1);\n    mlt.setFieldNames(new String[] {\"text\"});\n    mlt.setBoost(true);\n    \n    // this mean that every term boost factor will be multiplied by this\n    // number\n    float boostFactor = 5;\n    mlt.setBoostFactor(boostFactor);\n    \n    BooleanQuery query = (BooleanQuery) mlt.like(new StringReader(\n        \"lucene release\"), \"text\");\n    List<BooleanClause> clauses = query.clauses();\n    \n    assertEquals(\"Expected \" + originalValues.size() + \" clauses.\",\n        originalValues.size(), clauses.size());\n\n    for (BooleanClause clause : clauses) {\n      TermQuery tq = (TermQuery) clause.getQuery();\n      Float termBoost = originalValues.get(tq.getTerm().text());\n      assertNotNull(\"Expected term \" + tq.getTerm().text(), termBoost);\n\n      float totalBoost = termBoost * boostFactor;\n      assertEquals(\"Expected boost of \" + totalBoost + \" for term '\"\n          + tq.getTerm().text() + \"' got \" + tq.getBoost(), totalBoost, tq\n          .getBoost(), 0.0001);\n    }\n  }\n\n","sourceOld":"  public void testBoostFactor() throws Throwable {\n    Map<String,Float> originalValues = getOriginalValues();\n    \n    MoreLikeThis mlt = new MoreLikeThis(reader);\n    mlt.setAnalyzer(new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n    mlt.setMinDocFreq(1);\n    mlt.setMinTermFreq(1);\n    mlt.setMinWordLen(1);\n    mlt.setFieldNames(new String[] {\"text\"});\n    mlt.setBoost(true);\n    \n    // this mean that every term boost factor will be multiplied by this\n    // number\n    float boostFactor = 5;\n    mlt.setBoostFactor(boostFactor);\n    \n    BooleanQuery query = (BooleanQuery) mlt.like(new StringReader(\n        \"lucene release\"));\n    List<BooleanClause> clauses = query.clauses();\n    \n    assertEquals(\"Expected \" + originalValues.size() + \" clauses.\",\n        originalValues.size(), clauses.size());\n\n    for (BooleanClause clause : clauses) {\n      TermQuery tq = (TermQuery) clause.getQuery();\n      Float termBoost = originalValues.get(tq.getTerm().text());\n      assertNotNull(\"Expected term \" + tq.getTerm().text(), termBoost);\n\n      float totalBoost = termBoost * boostFactor;\n      assertEquals(\"Expected boost of \" + totalBoost + \" for term '\"\n          + tq.getTerm().text() + \"' got \" + tq.getBoost(), totalBoost, tq\n          .getBoost(), 0.0001);\n    }\n  }\n\n","bugFix":["c084e47df29de3330311d69dabf515ceaa989512"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testBoostFactor().mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testBoostFactor().mjava","sourceNew":"  public void testBoostFactor() throws Throwable {\n    Map<String,Float> originalValues = getOriginalValues();\n    \n    MoreLikeThis mlt = new MoreLikeThis(reader);\n    mlt.setAnalyzer(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    mlt.setMinDocFreq(1);\n    mlt.setMinTermFreq(1);\n    mlt.setMinWordLen(1);\n    mlt.setFieldNames(new String[] {\"text\"});\n    mlt.setBoost(true);\n    \n    // this mean that every term boost factor will be multiplied by this\n    // number\n    float boostFactor = 5;\n    mlt.setBoostFactor(boostFactor);\n    \n    BooleanQuery query = (BooleanQuery) mlt.like(new StringReader(\n        \"lucene release\"), \"text\");\n    List<BooleanClause> clauses = query.clauses();\n    \n    assertEquals(\"Expected \" + originalValues.size() + \" clauses.\",\n        originalValues.size(), clauses.size());\n\n    for (BooleanClause clause : clauses) {\n      TermQuery tq = (TermQuery) clause.getQuery();\n      Float termBoost = originalValues.get(tq.getTerm().text());\n      assertNotNull(\"Expected term \" + tq.getTerm().text(), termBoost);\n\n      float totalBoost = termBoost * boostFactor;\n      assertEquals(\"Expected boost of \" + totalBoost + \" for term '\"\n          + tq.getTerm().text() + \"' got \" + tq.getBoost(), totalBoost, tq\n          .getBoost(), 0.0001);\n    }\n  }\n\n","sourceOld":"  public void testBoostFactor() throws Throwable {\n    Map<String,Float> originalValues = getOriginalValues();\n    \n    MoreLikeThis mlt = new MoreLikeThis(reader);\n    mlt.setAnalyzer(new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n    mlt.setMinDocFreq(1);\n    mlt.setMinTermFreq(1);\n    mlt.setMinWordLen(1);\n    mlt.setFieldNames(new String[] {\"text\"});\n    mlt.setBoost(true);\n    \n    // this mean that every term boost factor will be multiplied by this\n    // number\n    float boostFactor = 5;\n    mlt.setBoostFactor(boostFactor);\n    \n    BooleanQuery query = (BooleanQuery) mlt.like(new StringReader(\n        \"lucene release\"), \"text\");\n    List<BooleanClause> clauses = query.clauses();\n    \n    assertEquals(\"Expected \" + originalValues.size() + \" clauses.\",\n        originalValues.size(), clauses.size());\n\n    for (BooleanClause clause : clauses) {\n      TermQuery tq = (TermQuery) clause.getQuery();\n      Float termBoost = originalValues.get(tq.getTerm().text());\n      assertNotNull(\"Expected term \" + tq.getTerm().text(), termBoost);\n\n      float totalBoost = termBoost * boostFactor;\n      assertEquals(\"Expected boost of \" + totalBoost + \" for term '\"\n          + tq.getTerm().text() + \"' got \" + tq.getBoost(), totalBoost, tq\n          .getBoost(), 0.0001);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testBoostFactor().mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testBoostFactor().mjava","sourceNew":"  public void testBoostFactor() throws Throwable {\n    Map<String,Float> originalValues = getOriginalValues();\n    \n    MoreLikeThis mlt = new MoreLikeThis(reader);\n    mlt.setAnalyzer(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    mlt.setMinDocFreq(1);\n    mlt.setMinTermFreq(1);\n    mlt.setMinWordLen(1);\n    mlt.setFieldNames(new String[] {\"text\"});\n    mlt.setBoost(true);\n    \n    // this mean that every term boost factor will be multiplied by this\n    // number\n    float boostFactor = 5;\n    mlt.setBoostFactor(boostFactor);\n    \n    BooleanQuery query = (BooleanQuery) mlt.like(new StringReader(\n        \"lucene release\"), \"text\");\n    List<BooleanClause> clauses = query.clauses();\n    \n    assertEquals(\"Expected \" + originalValues.size() + \" clauses.\",\n        originalValues.size(), clauses.size());\n\n    for (BooleanClause clause : clauses) {\n      TermQuery tq = (TermQuery) clause.getQuery();\n      Float termBoost = originalValues.get(tq.getTerm().text());\n      assertNotNull(\"Expected term \" + tq.getTerm().text(), termBoost);\n\n      float totalBoost = termBoost * boostFactor;\n      assertEquals(\"Expected boost of \" + totalBoost + \" for term '\"\n          + tq.getTerm().text() + \"' got \" + tq.getBoost(), totalBoost, tq\n          .getBoost(), 0.0001);\n    }\n  }\n\n","sourceOld":"  public void testBoostFactor() throws Throwable {\n    Map<String,Float> originalValues = getOriginalValues();\n    \n    MoreLikeThis mlt = new MoreLikeThis(reader);\n    mlt.setAnalyzer(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    mlt.setMinDocFreq(1);\n    mlt.setMinTermFreq(1);\n    mlt.setMinWordLen(1);\n    mlt.setFieldNames(new String[] {\"text\"});\n    mlt.setBoost(true);\n    \n    // this mean that every term boost factor will be multiplied by this\n    // number\n    float boostFactor = 5;\n    mlt.setBoostFactor(boostFactor);\n    \n    BooleanQuery query = (BooleanQuery) mlt.like(new StringReader(\n        \"lucene release\"), \"text\");\n    List<BooleanClause> clauses = query.clauses();\n    \n    assertEquals(\"Expected \" + originalValues.size() + \" clauses.\",\n        originalValues.size(), clauses.size());\n\n    for (BooleanClause clause : clauses) {\n      TermQuery tq = (TermQuery) clause.getQuery();\n      Float termBoost = originalValues.get(tq.getTerm().text());\n      assertNotNull(\"Expected term \" + tq.getTerm().text(), termBoost);\n\n      float totalBoost = termBoost * boostFactor;\n      assertEquals(\"Expected boost of \" + totalBoost + \" for term '\"\n          + tq.getTerm().text() + \"' got \" + tq.getBoost(), totalBoost, tq\n          .getBoost(), 0.0001);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae46d105c94ea6ceb5201189bf9611bdef91b1b4":["b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1"],"b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["ae46d105c94ea6ceb5201189bf9611bdef91b1b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1"],"ae46d105c94ea6ceb5201189bf9611bdef91b1b4":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1":["ae46d105c94ea6ceb5201189bf9611bdef91b1b4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}