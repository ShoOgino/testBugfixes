{"path":"solr/contrib/ltr/src/test/org/apache/solr/ltr/store/rest/TestModelManagerPersistence#testFeaturePersistence().mjava","commits":[{"id":"58c36d634c9789cb739fbd175c1a8d50b3303f6b","date":1478022614,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/store/rest/TestModelManagerPersistence#testFeaturePersistence().mjava","pathOld":"/dev/null","sourceNew":"  // executed first\n  @Test\n  public void testFeaturePersistence() throws Exception {\n\n    loadFeature(\"feature\", ValueFeature.class.getCanonicalName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    loadFeature(\"feature1\", ValueFeature.class.getCanonicalName(), \"test1\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature2\", ValueFeature.class.getCanonicalName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature3\", ValueFeature.class.getCanonicalName(), \"test2\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    loadModel(\"test-model\", LinearModel.class.getCanonicalName(),\n        new String[] {\"feature\"}, \"test\", \"{\\\"weights\\\":{\\\"feature\\\":1.0}}\");\n    loadModel(\"test-model2\", LinearModel.class.getCanonicalName(),\n        new String[] {\"feature1\"}, \"test1\", \"{\\\"weights\\\":{\\\"feature1\\\":1.0}}\");\n    final String fstorecontent = FileUtils\n        .readFileToString(fstorefile, \"UTF-8\");\n    final String mstorecontent = FileUtils\n        .readFileToString(mstorefile, \"UTF-8\");\n\n    //check feature/model stores on deletion\n    final ArrayList<Object> fStore = (ArrayList<Object>) ((Map<String,Object>)\n        ObjectBuilder.fromJSON(fstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < fStore.size(); ++ idx) {\n      String store = (String) ((Map<String,Object>)fStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test2\") || store.equals(\"test1\"));\n    }\n\n    final ArrayList<Object> mStore = (ArrayList<Object>) ((Map<String,Object>)\n        ObjectBuilder.fromJSON(mstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < mStore.size(); ++ idx) {\n      String store = (String) ((Map<String,Object>)mStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test1\"));\n    }\n\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/test-model2\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT + \"/test-model2\",\n        \"/models/[0]/name=='test-model'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT + \"/test-model2\",\n        \"/models/[0]/name=='test-model'\");\n\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/*\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/*\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bf344c7efad3160a74c52ef1fd53f535978fc5b7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/store/rest/TestModelManagerPersistence#testFeaturePersistence().mjava","pathOld":"/dev/null","sourceNew":"  // executed first\n  @Test\n  public void testFeaturePersistence() throws Exception {\n\n    loadFeature(\"feature\", ValueFeature.class.getCanonicalName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    loadFeature(\"feature1\", ValueFeature.class.getCanonicalName(), \"test1\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature2\", ValueFeature.class.getCanonicalName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature3\", ValueFeature.class.getCanonicalName(), \"test2\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    loadModel(\"test-model\", LinearModel.class.getCanonicalName(),\n        new String[] {\"feature\"}, \"test\", \"{\\\"weights\\\":{\\\"feature\\\":1.0}}\");\n    loadModel(\"test-model2\", LinearModel.class.getCanonicalName(),\n        new String[] {\"feature1\"}, \"test1\", \"{\\\"weights\\\":{\\\"feature1\\\":1.0}}\");\n    final String fstorecontent = FileUtils\n        .readFileToString(fstorefile, \"UTF-8\");\n    final String mstorecontent = FileUtils\n        .readFileToString(mstorefile, \"UTF-8\");\n\n    //check feature/model stores on deletion\n    final ArrayList<Object> fStore = (ArrayList<Object>) ((Map<String,Object>)\n        ObjectBuilder.fromJSON(fstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < fStore.size(); ++ idx) {\n      String store = (String) ((Map<String,Object>)fStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test2\") || store.equals(\"test1\"));\n    }\n\n    final ArrayList<Object> mStore = (ArrayList<Object>) ((Map<String,Object>)\n        ObjectBuilder.fromJSON(mstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < mStore.size(); ++ idx) {\n      String store = (String) ((Map<String,Object>)mStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test1\"));\n    }\n\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/test-model2\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT + \"/test-model2\",\n        \"/models/[0]/name=='test-model'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT + \"/test-model2\",\n        \"/models/[0]/name=='test-model'\");\n\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/*\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/*\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24c1c003d41edcd662a111a7fa869fe9c97ea18c","date":1483549958,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/store/rest/TestModelManagerPersistence#testFeaturePersistence().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/store/rest/TestModelManagerPersistence#testFeaturePersistence().mjava","sourceNew":"  // executed first\n  @Test\n  public void testFeaturePersistence() throws Exception {\n\n    loadFeature(\"feature\", ValueFeature.class.getCanonicalName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    loadFeature(\"feature1\", ValueFeature.class.getCanonicalName(), \"test1\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature2\", ValueFeature.class.getCanonicalName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature3\", ValueFeature.class.getCanonicalName(), \"test2\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    loadModel(\"test-model\", LinearModel.class.getCanonicalName(),\n        new String[] {\"feature\"}, \"test\", \"{\\\"weights\\\":{\\\"feature\\\":1.0}}\");\n    loadModel(\"test-model2\", LinearModel.class.getCanonicalName(),\n        new String[] {\"feature1\"}, \"test1\", \"{\\\"weights\\\":{\\\"feature1\\\":1.0}}\");\n    final String fstorecontent = FileUtils\n        .readFileToString(fstorefile, \"UTF-8\");\n    final String mstorecontent = FileUtils\n        .readFileToString(mstorefile, \"UTF-8\");\n\n    //check feature/model stores on deletion\n    final ArrayList<Object> fStore = (ArrayList<Object>) ((Map<String,Object>)\n        ObjectBuilder.fromJSON(fstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < fStore.size(); ++ idx) {\n      String store = (String) ((Map<String,Object>)fStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test2\") || store.equals(\"test1\"));\n    }\n\n    final ArrayList<Object> mStore = (ArrayList<Object>) ((Map<String,Object>)\n        ObjectBuilder.fromJSON(mstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < mStore.size(); ++ idx) {\n      String store = (String) ((Map<String,Object>)mStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test1\"));\n    }\n\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/test-model2\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT + \"/test-model2\",\n        \"/models/[0]/name=='test-model'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT + \"/test-model2\",\n        \"/models/[0]/name=='test-model'\");\n\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/test-model1\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n\n  }\n\n","sourceOld":"  // executed first\n  @Test\n  public void testFeaturePersistence() throws Exception {\n\n    loadFeature(\"feature\", ValueFeature.class.getCanonicalName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    loadFeature(\"feature1\", ValueFeature.class.getCanonicalName(), \"test1\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature2\", ValueFeature.class.getCanonicalName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature3\", ValueFeature.class.getCanonicalName(), \"test2\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    loadModel(\"test-model\", LinearModel.class.getCanonicalName(),\n        new String[] {\"feature\"}, \"test\", \"{\\\"weights\\\":{\\\"feature\\\":1.0}}\");\n    loadModel(\"test-model2\", LinearModel.class.getCanonicalName(),\n        new String[] {\"feature1\"}, \"test1\", \"{\\\"weights\\\":{\\\"feature1\\\":1.0}}\");\n    final String fstorecontent = FileUtils\n        .readFileToString(fstorefile, \"UTF-8\");\n    final String mstorecontent = FileUtils\n        .readFileToString(mstorefile, \"UTF-8\");\n\n    //check feature/model stores on deletion\n    final ArrayList<Object> fStore = (ArrayList<Object>) ((Map<String,Object>)\n        ObjectBuilder.fromJSON(fstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < fStore.size(); ++ idx) {\n      String store = (String) ((Map<String,Object>)fStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test2\") || store.equals(\"test1\"));\n    }\n\n    final ArrayList<Object> mStore = (ArrayList<Object>) ((Map<String,Object>)\n        ObjectBuilder.fromJSON(mstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < mStore.size(); ++ idx) {\n      String store = (String) ((Map<String,Object>)mStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test1\"));\n    }\n\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/test-model2\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT + \"/test-model2\",\n        \"/models/[0]/name=='test-model'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT + \"/test-model2\",\n        \"/models/[0]/name=='test-model'\");\n\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/*\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/*\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"491c9672ec42582fe43960452dbd37f1c80fe0f0","date":1483739222,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/store/rest/TestModelManagerPersistence#testFeaturePersistence().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/store/rest/TestModelManagerPersistence#testFeaturePersistence().mjava","sourceNew":"  // executed first\n  @Test\n  public void testFeaturePersistence() throws Exception {\n\n    loadFeature(\"feature\", ValueFeature.class.getCanonicalName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    loadFeature(\"feature1\", ValueFeature.class.getCanonicalName(), \"test1\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature2\", ValueFeature.class.getCanonicalName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature3\", ValueFeature.class.getCanonicalName(), \"test2\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    loadModel(\"test-model\", LinearModel.class.getCanonicalName(),\n        new String[] {\"feature\"}, \"test\", \"{\\\"weights\\\":{\\\"feature\\\":1.0}}\");\n    loadModel(\"test-model2\", LinearModel.class.getCanonicalName(),\n        new String[] {\"feature1\"}, \"test1\", \"{\\\"weights\\\":{\\\"feature1\\\":1.0}}\");\n    final String fstorecontent = FileUtils\n        .readFileToString(fstorefile, \"UTF-8\");\n    final String mstorecontent = FileUtils\n        .readFileToString(mstorefile, \"UTF-8\");\n\n    //check feature/model stores on deletion\n    final ArrayList<Object> fStore = (ArrayList<Object>) ((Map<String,Object>)\n        ObjectBuilder.fromJSON(fstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < fStore.size(); ++ idx) {\n      String store = (String) ((Map<String,Object>)fStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test2\") || store.equals(\"test1\"));\n    }\n\n    final ArrayList<Object> mStore = (ArrayList<Object>) ((Map<String,Object>)\n        ObjectBuilder.fromJSON(mstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < mStore.size(); ++ idx) {\n      String store = (String) ((Map<String,Object>)mStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test1\"));\n    }\n\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/test-model2\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT + \"/test-model2\",\n        \"/models/[0]/name=='test-model'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT + \"/test-model2\",\n        \"/models/[0]/name=='test-model'\");\n\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/test-model1\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n\n  }\n\n","sourceOld":"  // executed first\n  @Test\n  public void testFeaturePersistence() throws Exception {\n\n    loadFeature(\"feature\", ValueFeature.class.getCanonicalName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    loadFeature(\"feature1\", ValueFeature.class.getCanonicalName(), \"test1\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature2\", ValueFeature.class.getCanonicalName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature3\", ValueFeature.class.getCanonicalName(), \"test2\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    loadModel(\"test-model\", LinearModel.class.getCanonicalName(),\n        new String[] {\"feature\"}, \"test\", \"{\\\"weights\\\":{\\\"feature\\\":1.0}}\");\n    loadModel(\"test-model2\", LinearModel.class.getCanonicalName(),\n        new String[] {\"feature1\"}, \"test1\", \"{\\\"weights\\\":{\\\"feature1\\\":1.0}}\");\n    final String fstorecontent = FileUtils\n        .readFileToString(fstorefile, \"UTF-8\");\n    final String mstorecontent = FileUtils\n        .readFileToString(mstorefile, \"UTF-8\");\n\n    //check feature/model stores on deletion\n    final ArrayList<Object> fStore = (ArrayList<Object>) ((Map<String,Object>)\n        ObjectBuilder.fromJSON(fstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < fStore.size(); ++ idx) {\n      String store = (String) ((Map<String,Object>)fStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test2\") || store.equals(\"test1\"));\n    }\n\n    final ArrayList<Object> mStore = (ArrayList<Object>) ((Map<String,Object>)\n        ObjectBuilder.fromJSON(mstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < mStore.size(); ++ idx) {\n      String store = (String) ((Map<String,Object>)mStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test1\"));\n    }\n\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/test-model2\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT + \"/test-model2\",\n        \"/models/[0]/name=='test-model'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT + \"/test-model2\",\n        \"/models/[0]/name=='test-model'\");\n\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/*\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/*\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e80dd699120179c1fafb4fae84acf82bc2c486d7","date":1501773404,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/store/rest/TestModelManagerPersistence#testFeaturePersistence().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/store/rest/TestModelManagerPersistence#testFeaturePersistence().mjava","sourceNew":"  // executed first\n  @Test\n  public void testFeaturePersistence() throws Exception {\n\n    loadFeature(\"feature\", ValueFeature.class.getCanonicalName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    loadFeature(\"feature1\", ValueFeature.class.getCanonicalName(), \"test1\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature2\", ValueFeature.class.getCanonicalName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature3\", ValueFeature.class.getCanonicalName(), \"test2\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    loadModel(\"test-model\", LinearModel.class.getCanonicalName(),\n        new String[] {\"feature\"}, \"test\", \"{\\\"weights\\\":{\\\"feature\\\":1.0}}\");\n    loadModel(\"test-model2\", LinearModel.class.getCanonicalName(),\n        new String[] {\"feature1\"}, \"test1\", \"{\\\"weights\\\":{\\\"feature1\\\":1.0}}\");\n    final String fstorecontent = FileUtils\n        .readFileToString(fstorefile, \"UTF-8\");\n    final String mstorecontent = FileUtils\n        .readFileToString(mstorefile, \"UTF-8\");\n\n    //check feature/model stores on deletion\n    final ArrayList<Object> fStore = (ArrayList<Object>) ((Map<String,Object>)\n        ObjectBuilder.fromJSON(fstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < fStore.size(); ++ idx) {\n      String store = (String) ((Map<String,Object>)fStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test2\") || store.equals(\"test1\"));\n    }\n\n    final ArrayList<Object> mStore = (ArrayList<Object>) ((Map<String,Object>)\n        ObjectBuilder.fromJSON(mstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < mStore.size(); ++ idx) {\n      String store = (String) ((Map<String,Object>)mStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test1\"));\n    }\n\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/test-model2\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/[0]/name=='test-model'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/[0]/name=='test-model'\");\n\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/test-model\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/==[]\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/==[]\");\n  }\n\n","sourceOld":"  // executed first\n  @Test\n  public void testFeaturePersistence() throws Exception {\n\n    loadFeature(\"feature\", ValueFeature.class.getCanonicalName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    loadFeature(\"feature1\", ValueFeature.class.getCanonicalName(), \"test1\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature2\", ValueFeature.class.getCanonicalName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature3\", ValueFeature.class.getCanonicalName(), \"test2\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    loadModel(\"test-model\", LinearModel.class.getCanonicalName(),\n        new String[] {\"feature\"}, \"test\", \"{\\\"weights\\\":{\\\"feature\\\":1.0}}\");\n    loadModel(\"test-model2\", LinearModel.class.getCanonicalName(),\n        new String[] {\"feature1\"}, \"test1\", \"{\\\"weights\\\":{\\\"feature1\\\":1.0}}\");\n    final String fstorecontent = FileUtils\n        .readFileToString(fstorefile, \"UTF-8\");\n    final String mstorecontent = FileUtils\n        .readFileToString(mstorefile, \"UTF-8\");\n\n    //check feature/model stores on deletion\n    final ArrayList<Object> fStore = (ArrayList<Object>) ((Map<String,Object>)\n        ObjectBuilder.fromJSON(fstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < fStore.size(); ++ idx) {\n      String store = (String) ((Map<String,Object>)fStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test2\") || store.equals(\"test1\"));\n    }\n\n    final ArrayList<Object> mStore = (ArrayList<Object>) ((Map<String,Object>)\n        ObjectBuilder.fromJSON(mstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < mStore.size(); ++ idx) {\n      String store = (String) ((Map<String,Object>)mStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test1\"));\n    }\n\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/test-model2\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT + \"/test-model2\",\n        \"/models/[0]/name=='test-model'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT + \"/test-model2\",\n        \"/models/[0]/name=='test-model'\");\n\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/test-model1\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b12a45e4bfdf664da77cb3d2ba1ebc43bf0ba162","date":1501774011,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/store/rest/TestModelManagerPersistence#testFeaturePersistence().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/store/rest/TestModelManagerPersistence#testFeaturePersistence().mjava","sourceNew":"  // executed first\n  @Test\n  public void testFeaturePersistence() throws Exception {\n\n    loadFeature(\"feature\", ValueFeature.class.getCanonicalName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    loadFeature(\"feature1\", ValueFeature.class.getCanonicalName(), \"test1\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature2\", ValueFeature.class.getCanonicalName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature3\", ValueFeature.class.getCanonicalName(), \"test2\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    loadModel(\"test-model\", LinearModel.class.getCanonicalName(),\n        new String[] {\"feature\"}, \"test\", \"{\\\"weights\\\":{\\\"feature\\\":1.0}}\");\n    loadModel(\"test-model2\", LinearModel.class.getCanonicalName(),\n        new String[] {\"feature1\"}, \"test1\", \"{\\\"weights\\\":{\\\"feature1\\\":1.0}}\");\n    final String fstorecontent = FileUtils\n        .readFileToString(fstorefile, \"UTF-8\");\n    final String mstorecontent = FileUtils\n        .readFileToString(mstorefile, \"UTF-8\");\n\n    //check feature/model stores on deletion\n    final ArrayList<Object> fStore = (ArrayList<Object>) ((Map<String,Object>)\n        ObjectBuilder.fromJSON(fstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < fStore.size(); ++ idx) {\n      String store = (String) ((Map<String,Object>)fStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test2\") || store.equals(\"test1\"));\n    }\n\n    final ArrayList<Object> mStore = (ArrayList<Object>) ((Map<String,Object>)\n        ObjectBuilder.fromJSON(mstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < mStore.size(); ++ idx) {\n      String store = (String) ((Map<String,Object>)mStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test1\"));\n    }\n\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/test-model2\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/[0]/name=='test-model'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/[0]/name=='test-model'\");\n\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/test-model\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/==[]\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/==[]\");\n  }\n\n","sourceOld":"  // executed first\n  @Test\n  public void testFeaturePersistence() throws Exception {\n\n    loadFeature(\"feature\", ValueFeature.class.getCanonicalName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    loadFeature(\"feature1\", ValueFeature.class.getCanonicalName(), \"test1\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature2\", ValueFeature.class.getCanonicalName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature3\", ValueFeature.class.getCanonicalName(), \"test2\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    loadModel(\"test-model\", LinearModel.class.getCanonicalName(),\n        new String[] {\"feature\"}, \"test\", \"{\\\"weights\\\":{\\\"feature\\\":1.0}}\");\n    loadModel(\"test-model2\", LinearModel.class.getCanonicalName(),\n        new String[] {\"feature1\"}, \"test1\", \"{\\\"weights\\\":{\\\"feature1\\\":1.0}}\");\n    final String fstorecontent = FileUtils\n        .readFileToString(fstorefile, \"UTF-8\");\n    final String mstorecontent = FileUtils\n        .readFileToString(mstorefile, \"UTF-8\");\n\n    //check feature/model stores on deletion\n    final ArrayList<Object> fStore = (ArrayList<Object>) ((Map<String,Object>)\n        ObjectBuilder.fromJSON(fstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < fStore.size(); ++ idx) {\n      String store = (String) ((Map<String,Object>)fStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test2\") || store.equals(\"test1\"));\n    }\n\n    final ArrayList<Object> mStore = (ArrayList<Object>) ((Map<String,Object>)\n        ObjectBuilder.fromJSON(mstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < mStore.size(); ++ idx) {\n      String store = (String) ((Map<String,Object>)mStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test1\"));\n    }\n\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/test-model2\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT + \"/test-model2\",\n        \"/models/[0]/name=='test-model'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT + \"/test-model2\",\n        \"/models/[0]/name=='test-model'\");\n\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/test-model1\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/store/rest/TestModelManagerPersistence#testFeaturePersistence().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/store/rest/TestModelManagerPersistence#testFeaturePersistence().mjava","sourceNew":"  // executed first\n  @Test\n  public void testFeaturePersistence() throws Exception {\n\n    loadFeature(\"feature\", ValueFeature.class.getCanonicalName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    loadFeature(\"feature1\", ValueFeature.class.getCanonicalName(), \"test1\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature2\", ValueFeature.class.getCanonicalName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature3\", ValueFeature.class.getCanonicalName(), \"test2\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    loadModel(\"test-model\", LinearModel.class.getCanonicalName(),\n        new String[] {\"feature\"}, \"test\", \"{\\\"weights\\\":{\\\"feature\\\":1.0}}\");\n    loadModel(\"test-model2\", LinearModel.class.getCanonicalName(),\n        new String[] {\"feature1\"}, \"test1\", \"{\\\"weights\\\":{\\\"feature1\\\":1.0}}\");\n    final String fstorecontent = FileUtils\n        .readFileToString(fstorefile, \"UTF-8\");\n    final String mstorecontent = FileUtils\n        .readFileToString(mstorefile, \"UTF-8\");\n\n    //check feature/model stores on deletion\n    final ArrayList<Object> fStore = (ArrayList<Object>) ((Map<String,Object>)\n        ObjectBuilder.fromJSON(fstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < fStore.size(); ++ idx) {\n      String store = (String) ((Map<String,Object>)fStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test2\") || store.equals(\"test1\"));\n    }\n\n    final ArrayList<Object> mStore = (ArrayList<Object>) ((Map<String,Object>)\n        ObjectBuilder.fromJSON(mstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < mStore.size(); ++ idx) {\n      String store = (String) ((Map<String,Object>)mStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test1\"));\n    }\n\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/test-model2\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/[0]/name=='test-model'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/[0]/name=='test-model'\");\n\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/test-model\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/==[]\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/==[]\");\n  }\n\n","sourceOld":"  // executed first\n  @Test\n  public void testFeaturePersistence() throws Exception {\n\n    loadFeature(\"feature\", ValueFeature.class.getCanonicalName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    loadFeature(\"feature1\", ValueFeature.class.getCanonicalName(), \"test1\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature2\", ValueFeature.class.getCanonicalName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature3\", ValueFeature.class.getCanonicalName(), \"test2\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    loadModel(\"test-model\", LinearModel.class.getCanonicalName(),\n        new String[] {\"feature\"}, \"test\", \"{\\\"weights\\\":{\\\"feature\\\":1.0}}\");\n    loadModel(\"test-model2\", LinearModel.class.getCanonicalName(),\n        new String[] {\"feature1\"}, \"test1\", \"{\\\"weights\\\":{\\\"feature1\\\":1.0}}\");\n    final String fstorecontent = FileUtils\n        .readFileToString(fstorefile, \"UTF-8\");\n    final String mstorecontent = FileUtils\n        .readFileToString(mstorefile, \"UTF-8\");\n\n    //check feature/model stores on deletion\n    final ArrayList<Object> fStore = (ArrayList<Object>) ((Map<String,Object>)\n        ObjectBuilder.fromJSON(fstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < fStore.size(); ++ idx) {\n      String store = (String) ((Map<String,Object>)fStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test2\") || store.equals(\"test1\"));\n    }\n\n    final ArrayList<Object> mStore = (ArrayList<Object>) ((Map<String,Object>)\n        ObjectBuilder.fromJSON(mstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < mStore.size(); ++ idx) {\n      String store = (String) ((Map<String,Object>)mStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test1\"));\n    }\n\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/test-model2\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT + \"/test-model2\",\n        \"/models/[0]/name=='test-model'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT + \"/test-model2\",\n        \"/models/[0]/name=='test-model'\");\n\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/test-model1\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf344c7efad3160a74c52ef1fd53f535978fc5b7","date":1518199939,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/store/rest/TestModelManagerPersistence#testFeaturePersistence().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/store/rest/TestModelManagerPersistence#testFeaturePersistence().mjava","sourceNew":"  // executed first\n  @Test\n  public void testFeaturePersistence() throws Exception {\n\n    loadFeature(\"feature\", ValueFeature.class.getName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    loadFeature(\"feature1\", ValueFeature.class.getName(), \"test1\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature2\", ValueFeature.class.getName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature3\", ValueFeature.class.getName(), \"test2\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    loadModel(\"test-model\", LinearModel.class.getName(),\n        new String[] {\"feature\"}, \"test\", \"{\\\"weights\\\":{\\\"feature\\\":1.0}}\");\n    loadModel(\"test-model2\", LinearModel.class.getName(),\n        new String[] {\"feature1\"}, \"test1\", \"{\\\"weights\\\":{\\\"feature1\\\":1.0}}\");\n    final String fstorecontent = FileUtils\n        .readFileToString(fstorefile, \"UTF-8\");\n    final String mstorecontent = FileUtils\n        .readFileToString(mstorefile, \"UTF-8\");\n\n    //check feature/model stores on deletion\n    final ArrayList<Object> fStore = (ArrayList<Object>) ((Map<String,Object>)\n        ObjectBuilder.fromJSON(fstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < fStore.size(); ++ idx) {\n      String store = (String) ((Map<String,Object>)fStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test2\") || store.equals(\"test1\"));\n    }\n\n    final ArrayList<Object> mStore = (ArrayList<Object>) ((Map<String,Object>)\n        ObjectBuilder.fromJSON(mstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < mStore.size(); ++ idx) {\n      String store = (String) ((Map<String,Object>)mStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test1\"));\n    }\n\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/test-model2\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/[0]/name=='test-model'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/[0]/name=='test-model'\");\n\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/test-model\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/==[]\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/==[]\");\n  }\n\n","sourceOld":"  // executed first\n  @Test\n  public void testFeaturePersistence() throws Exception {\n\n    loadFeature(\"feature\", ValueFeature.class.getCanonicalName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    loadFeature(\"feature1\", ValueFeature.class.getCanonicalName(), \"test1\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature2\", ValueFeature.class.getCanonicalName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature3\", ValueFeature.class.getCanonicalName(), \"test2\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    loadModel(\"test-model\", LinearModel.class.getCanonicalName(),\n        new String[] {\"feature\"}, \"test\", \"{\\\"weights\\\":{\\\"feature\\\":1.0}}\");\n    loadModel(\"test-model2\", LinearModel.class.getCanonicalName(),\n        new String[] {\"feature1\"}, \"test1\", \"{\\\"weights\\\":{\\\"feature1\\\":1.0}}\");\n    final String fstorecontent = FileUtils\n        .readFileToString(fstorefile, \"UTF-8\");\n    final String mstorecontent = FileUtils\n        .readFileToString(mstorefile, \"UTF-8\");\n\n    //check feature/model stores on deletion\n    final ArrayList<Object> fStore = (ArrayList<Object>) ((Map<String,Object>)\n        ObjectBuilder.fromJSON(fstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < fStore.size(); ++ idx) {\n      String store = (String) ((Map<String,Object>)fStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test2\") || store.equals(\"test1\"));\n    }\n\n    final ArrayList<Object> mStore = (ArrayList<Object>) ((Map<String,Object>)\n        ObjectBuilder.fromJSON(mstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < mStore.size(); ++ idx) {\n      String store = (String) ((Map<String,Object>)mStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test1\"));\n    }\n\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/test-model2\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/[0]/name=='test-model'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/[0]/name=='test-model'\");\n\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/test-model\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/==[]\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/==[]\");\n  }\n\n","bugFix":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f906c3206e7eb174774f938416460e39170d819","date":1518202619,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/store/rest/TestModelManagerPersistence#testFeaturePersistence().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/store/rest/TestModelManagerPersistence#testFeaturePersistence().mjava","sourceNew":"  // executed first\n  @Test\n  public void testFeaturePersistence() throws Exception {\n\n    loadFeature(\"feature\", ValueFeature.class.getName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    loadFeature(\"feature1\", ValueFeature.class.getName(), \"test1\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature2\", ValueFeature.class.getName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature3\", ValueFeature.class.getName(), \"test2\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    loadModel(\"test-model\", LinearModel.class.getName(),\n        new String[] {\"feature\"}, \"test\", \"{\\\"weights\\\":{\\\"feature\\\":1.0}}\");\n    loadModel(\"test-model2\", LinearModel.class.getName(),\n        new String[] {\"feature1\"}, \"test1\", \"{\\\"weights\\\":{\\\"feature1\\\":1.0}}\");\n    final String fstorecontent = FileUtils\n        .readFileToString(fstorefile, \"UTF-8\");\n    final String mstorecontent = FileUtils\n        .readFileToString(mstorefile, \"UTF-8\");\n\n    //check feature/model stores on deletion\n    final ArrayList<Object> fStore = (ArrayList<Object>) ((Map<String,Object>)\n        ObjectBuilder.fromJSON(fstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < fStore.size(); ++ idx) {\n      String store = (String) ((Map<String,Object>)fStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test2\") || store.equals(\"test1\"));\n    }\n\n    final ArrayList<Object> mStore = (ArrayList<Object>) ((Map<String,Object>)\n        ObjectBuilder.fromJSON(mstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < mStore.size(); ++ idx) {\n      String store = (String) ((Map<String,Object>)mStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test1\"));\n    }\n\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/test-model2\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/[0]/name=='test-model'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/[0]/name=='test-model'\");\n\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/test-model\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/==[]\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/==[]\");\n  }\n\n","sourceOld":"  // executed first\n  @Test\n  public void testFeaturePersistence() throws Exception {\n\n    loadFeature(\"feature\", ValueFeature.class.getCanonicalName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    loadFeature(\"feature1\", ValueFeature.class.getCanonicalName(), \"test1\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature2\", ValueFeature.class.getCanonicalName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature3\", ValueFeature.class.getCanonicalName(), \"test2\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    loadModel(\"test-model\", LinearModel.class.getCanonicalName(),\n        new String[] {\"feature\"}, \"test\", \"{\\\"weights\\\":{\\\"feature\\\":1.0}}\");\n    loadModel(\"test-model2\", LinearModel.class.getCanonicalName(),\n        new String[] {\"feature1\"}, \"test1\", \"{\\\"weights\\\":{\\\"feature1\\\":1.0}}\");\n    final String fstorecontent = FileUtils\n        .readFileToString(fstorefile, \"UTF-8\");\n    final String mstorecontent = FileUtils\n        .readFileToString(mstorefile, \"UTF-8\");\n\n    //check feature/model stores on deletion\n    final ArrayList<Object> fStore = (ArrayList<Object>) ((Map<String,Object>)\n        ObjectBuilder.fromJSON(fstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < fStore.size(); ++ idx) {\n      String store = (String) ((Map<String,Object>)fStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test2\") || store.equals(\"test1\"));\n    }\n\n    final ArrayList<Object> mStore = (ArrayList<Object>) ((Map<String,Object>)\n        ObjectBuilder.fromJSON(mstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < mStore.size(); ++ idx) {\n      String store = (String) ((Map<String,Object>)mStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test1\"));\n    }\n\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/test-model2\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/[0]/name=='test-model'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/[0]/name=='test-model'\");\n\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/test-model\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/==[]\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/==[]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3714bcf66a68a1600e9dd11442fc1b33b62ef088","date":1556832005,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/store/rest/TestModelManagerPersistence#testFeaturePersistence().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/store/rest/TestModelManagerPersistence#testFeaturePersistence().mjava","sourceNew":"  // executed first\n  @Test\n  public void testFeaturePersistence() throws Exception {\n\n    loadFeature(\"feature\", ValueFeature.class.getName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    loadFeature(\"feature1\", ValueFeature.class.getName(), \"test1\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature2\", ValueFeature.class.getName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature3\", ValueFeature.class.getName(), \"test2\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    loadModel(\"test-model\", LinearModel.class.getName(),\n        new String[] {\"feature\"}, \"test\", \"{\\\"weights\\\":{\\\"feature\\\":1.0}}\");\n    loadModel(\"test-model2\", LinearModel.class.getName(),\n        new String[] {\"feature1\"}, \"test1\", \"{\\\"weights\\\":{\\\"feature1\\\":1.0}}\");\n    final String fstorecontent = FileUtils\n        .readFileToString(fstorefile, \"UTF-8\");\n    final String mstorecontent = FileUtils\n        .readFileToString(mstorefile, \"UTF-8\");\n\n    //check feature/model stores on deletion\n    final ArrayList<Object> fStore = (ArrayList<Object>) ((Map<String,Object>)\n        Utils.fromJSONString(fstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < fStore.size(); ++ idx) {\n      String store = (String) ((Map<String,Object>)fStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test2\") || store.equals(\"test1\"));\n    }\n\n    final ArrayList<Object> mStore = (ArrayList<Object>) ((Map<String,Object>)\n        Utils.fromJSONString(mstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < mStore.size(); ++ idx) {\n      String store = (String) ((Map<String,Object>)mStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test1\"));\n    }\n\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/test-model2\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/[0]/name=='test-model'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/[0]/name=='test-model'\");\n\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/test-model\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/==[]\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/==[]\");\n  }\n\n","sourceOld":"  // executed first\n  @Test\n  public void testFeaturePersistence() throws Exception {\n\n    loadFeature(\"feature\", ValueFeature.class.getName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    loadFeature(\"feature1\", ValueFeature.class.getName(), \"test1\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature2\", ValueFeature.class.getName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature3\", ValueFeature.class.getName(), \"test2\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    loadModel(\"test-model\", LinearModel.class.getName(),\n        new String[] {\"feature\"}, \"test\", \"{\\\"weights\\\":{\\\"feature\\\":1.0}}\");\n    loadModel(\"test-model2\", LinearModel.class.getName(),\n        new String[] {\"feature1\"}, \"test1\", \"{\\\"weights\\\":{\\\"feature1\\\":1.0}}\");\n    final String fstorecontent = FileUtils\n        .readFileToString(fstorefile, \"UTF-8\");\n    final String mstorecontent = FileUtils\n        .readFileToString(mstorefile, \"UTF-8\");\n\n    //check feature/model stores on deletion\n    final ArrayList<Object> fStore = (ArrayList<Object>) ((Map<String,Object>)\n        ObjectBuilder.fromJSON(fstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < fStore.size(); ++ idx) {\n      String store = (String) ((Map<String,Object>)fStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test2\") || store.equals(\"test1\"));\n    }\n\n    final ArrayList<Object> mStore = (ArrayList<Object>) ((Map<String,Object>)\n        ObjectBuilder.fromJSON(mstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < mStore.size(); ++ idx) {\n      String store = (String) ((Map<String,Object>)mStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test1\"));\n    }\n\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/test-model2\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/[0]/name=='test-model'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/[0]/name=='test-model'\");\n\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/test-model\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/==[]\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/==[]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/store/rest/TestModelManagerPersistence#testFeaturePersistence().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/store/rest/TestModelManagerPersistence#testFeaturePersistence().mjava","sourceNew":"  // executed first\n  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testFeaturePersistence() throws Exception {\n\n    loadFeature(\"feature\", ValueFeature.class.getName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    loadFeature(\"feature1\", ValueFeature.class.getName(), \"test1\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature2\", ValueFeature.class.getName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature3\", ValueFeature.class.getName(), \"test2\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    loadModel(\"test-model\", LinearModel.class.getName(),\n        new String[] {\"feature\"}, \"test\", \"{\\\"weights\\\":{\\\"feature\\\":1.0}}\");\n    loadModel(\"test-model2\", LinearModel.class.getName(),\n        new String[] {\"feature1\"}, \"test1\", \"{\\\"weights\\\":{\\\"feature1\\\":1.0}}\");\n    final String fstorecontent = FileUtils\n        .readFileToString(fstorefile, \"UTF-8\");\n    final String mstorecontent = FileUtils\n        .readFileToString(mstorefile, \"UTF-8\");\n\n    //check feature/model stores on deletion\n    final ArrayList<Object> fStore = (ArrayList<Object>) ((Map<String,Object>)\n        Utils.fromJSONString(fstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < fStore.size(); ++ idx) {\n      String store = (String) ((Map<String,Object>)fStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test2\") || store.equals(\"test1\"));\n    }\n\n    final ArrayList<Object> mStore = (ArrayList<Object>) ((Map<String,Object>)\n        Utils.fromJSONString(mstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < mStore.size(); ++ idx) {\n      String store = (String) ((Map<String,Object>)mStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test1\"));\n    }\n\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/test-model2\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/[0]/name=='test-model'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/[0]/name=='test-model'\");\n\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/test-model\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/==[]\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/==[]\");\n  }\n\n","sourceOld":"  // executed first\n  @Test\n  public void testFeaturePersistence() throws Exception {\n\n    loadFeature(\"feature\", ValueFeature.class.getName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    loadFeature(\"feature1\", ValueFeature.class.getName(), \"test1\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature2\", ValueFeature.class.getName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature3\", ValueFeature.class.getName(), \"test2\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    loadModel(\"test-model\", LinearModel.class.getName(),\n        new String[] {\"feature\"}, \"test\", \"{\\\"weights\\\":{\\\"feature\\\":1.0}}\");\n    loadModel(\"test-model2\", LinearModel.class.getName(),\n        new String[] {\"feature1\"}, \"test1\", \"{\\\"weights\\\":{\\\"feature1\\\":1.0}}\");\n    final String fstorecontent = FileUtils\n        .readFileToString(fstorefile, \"UTF-8\");\n    final String mstorecontent = FileUtils\n        .readFileToString(mstorefile, \"UTF-8\");\n\n    //check feature/model stores on deletion\n    final ArrayList<Object> fStore = (ArrayList<Object>) ((Map<String,Object>)\n        Utils.fromJSONString(fstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < fStore.size(); ++ idx) {\n      String store = (String) ((Map<String,Object>)fStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test2\") || store.equals(\"test1\"));\n    }\n\n    final ArrayList<Object> mStore = (ArrayList<Object>) ((Map<String,Object>)\n        Utils.fromJSONString(mstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < mStore.size(); ++ idx) {\n      String store = (String) ((Map<String,Object>)mStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test1\"));\n    }\n\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/test-model2\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/[0]/name=='test-model'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/[0]/name=='test-model'\");\n\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/test-model\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/==[]\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/==[]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/store/rest/TestModelManagerPersistence#testFeaturePersistence().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/store/rest/TestModelManagerPersistence#testFeaturePersistence().mjava","sourceNew":"  // executed first\n  @Test\n  public void testFeaturePersistence() throws Exception {\n\n    loadFeature(\"feature\", ValueFeature.class.getName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    loadFeature(\"feature1\", ValueFeature.class.getName(), \"test1\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature2\", ValueFeature.class.getName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature3\", ValueFeature.class.getName(), \"test2\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    loadModel(\"test-model\", LinearModel.class.getName(),\n        new String[] {\"feature\"}, \"test\", \"{\\\"weights\\\":{\\\"feature\\\":1.0}}\");\n    loadModel(\"test-model2\", LinearModel.class.getName(),\n        new String[] {\"feature1\"}, \"test1\", \"{\\\"weights\\\":{\\\"feature1\\\":1.0}}\");\n    final String fstorecontent = FileUtils\n        .readFileToString(fstorefile, \"UTF-8\");\n    final String mstorecontent = FileUtils\n        .readFileToString(mstorefile, \"UTF-8\");\n\n    //check feature/model stores on deletion\n    final ArrayList<Object> fStore = (ArrayList<Object>) ((Map<String,Object>)\n        Utils.fromJSONString(fstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < fStore.size(); ++ idx) {\n      String store = (String) ((Map<String,Object>)fStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test2\") || store.equals(\"test1\"));\n    }\n\n    final ArrayList<Object> mStore = (ArrayList<Object>) ((Map<String,Object>)\n        Utils.fromJSONString(mstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < mStore.size(); ++ idx) {\n      String store = (String) ((Map<String,Object>)mStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test1\"));\n    }\n\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/test-model2\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/[0]/name=='test-model'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/[0]/name=='test-model'\");\n\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/test-model\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/==[]\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/==[]\");\n  }\n\n","sourceOld":"  // executed first\n  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testFeaturePersistence() throws Exception {\n\n    loadFeature(\"feature\", ValueFeature.class.getName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    loadFeature(\"feature1\", ValueFeature.class.getName(), \"test1\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature2\", ValueFeature.class.getName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature3\", ValueFeature.class.getName(), \"test2\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    loadModel(\"test-model\", LinearModel.class.getName(),\n        new String[] {\"feature\"}, \"test\", \"{\\\"weights\\\":{\\\"feature\\\":1.0}}\");\n    loadModel(\"test-model2\", LinearModel.class.getName(),\n        new String[] {\"feature1\"}, \"test1\", \"{\\\"weights\\\":{\\\"feature1\\\":1.0}}\");\n    final String fstorecontent = FileUtils\n        .readFileToString(fstorefile, \"UTF-8\");\n    final String mstorecontent = FileUtils\n        .readFileToString(mstorefile, \"UTF-8\");\n\n    //check feature/model stores on deletion\n    final ArrayList<Object> fStore = (ArrayList<Object>) ((Map<String,Object>)\n        Utils.fromJSONString(fstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < fStore.size(); ++ idx) {\n      String store = (String) ((Map<String,Object>)fStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test2\") || store.equals(\"test1\"));\n    }\n\n    final ArrayList<Object> mStore = (ArrayList<Object>) ((Map<String,Object>)\n        Utils.fromJSONString(mstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < mStore.size(); ++ idx) {\n      String store = (String) ((Map<String,Object>)mStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test1\"));\n    }\n\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/test-model2\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/[0]/name=='test-model'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/[0]/name=='test-model'\");\n\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/test-model\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/==[]\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/==[]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/store/rest/TestModelManagerPersistence#testFeaturePersistence().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/store/rest/TestModelManagerPersistence#testFeaturePersistence().mjava","sourceNew":"  // executed first\n  @Test\n  public void testFeaturePersistence() throws Exception {\n\n    loadFeature(\"feature\", ValueFeature.class.getName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    loadFeature(\"feature1\", ValueFeature.class.getName(), \"test1\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature2\", ValueFeature.class.getName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature3\", ValueFeature.class.getName(), \"test2\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    loadModel(\"test-model\", LinearModel.class.getName(),\n        new String[] {\"feature\"}, \"test\", \"{\\\"weights\\\":{\\\"feature\\\":1.0}}\");\n    loadModel(\"test-model2\", LinearModel.class.getName(),\n        new String[] {\"feature1\"}, \"test1\", \"{\\\"weights\\\":{\\\"feature1\\\":1.0}}\");\n    final String fstorecontent = FileUtils\n        .readFileToString(fstorefile, \"UTF-8\");\n    final String mstorecontent = FileUtils\n        .readFileToString(mstorefile, \"UTF-8\");\n\n    //check feature/model stores on deletion\n    @SuppressWarnings({\"unchecked\"})\n    final ArrayList<Object> fStore = (ArrayList<Object>) ((Map<String,Object>)\n        Utils.fromJSONString(fstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < fStore.size(); ++ idx) {\n      @SuppressWarnings({\"unchecked\"})\n      String store = (String) ((Map<String,Object>)fStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test2\") || store.equals(\"test1\"));\n    }\n\n    @SuppressWarnings({\"unchecked\"})\n    final ArrayList<Object> mStore = (ArrayList<Object>) ((Map<String,Object>)\n        Utils.fromJSONString(mstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < mStore.size(); ++ idx) {\n      @SuppressWarnings({\"unchecked\"})\n      String store = (String) ((Map<String,Object>)mStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test1\"));\n    }\n\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/test-model2\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/[0]/name=='test-model'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/[0]/name=='test-model'\");\n\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/test-model\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/==[]\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/==[]\");\n  }\n\n","sourceOld":"  // executed first\n  @Test\n  public void testFeaturePersistence() throws Exception {\n\n    loadFeature(\"feature\", ValueFeature.class.getName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    loadFeature(\"feature1\", ValueFeature.class.getName(), \"test1\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature2\", ValueFeature.class.getName(), \"test\",\n        \"{\\\"value\\\":2}\");\n    loadFeature(\"feature3\", ValueFeature.class.getName(), \"test2\",\n        \"{\\\"value\\\":2}\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[0]/name=='feature'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test\",\n        \"/features/[1]/name=='feature2'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/[0]/name=='feature1'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/[0]/name=='feature3'\");\n    loadModel(\"test-model\", LinearModel.class.getName(),\n        new String[] {\"feature\"}, \"test\", \"{\\\"weights\\\":{\\\"feature\\\":1.0}}\");\n    loadModel(\"test-model2\", LinearModel.class.getName(),\n        new String[] {\"feature1\"}, \"test1\", \"{\\\"weights\\\":{\\\"feature1\\\":1.0}}\");\n    final String fstorecontent = FileUtils\n        .readFileToString(fstorefile, \"UTF-8\");\n    final String mstorecontent = FileUtils\n        .readFileToString(mstorefile, \"UTF-8\");\n\n    //check feature/model stores on deletion\n    final ArrayList<Object> fStore = (ArrayList<Object>) ((Map<String,Object>)\n        Utils.fromJSONString(fstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < fStore.size(); ++ idx) {\n      String store = (String) ((Map<String,Object>)fStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test2\") || store.equals(\"test1\"));\n    }\n\n    final ArrayList<Object> mStore = (ArrayList<Object>) ((Map<String,Object>)\n        Utils.fromJSONString(mstorecontent)).get(\"managedList\");\n    for (int idx = 0;idx < mStore.size(); ++ idx) {\n      String store = (String) ((Map<String,Object>)mStore.get(idx)).get(\"store\");\n      assertTrue(store.equals(\"test\") || store.equals(\"test1\"));\n    }\n\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/test-model2\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/[0]/name=='test-model'\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test2\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/[0]/name=='test-model'\");\n\n    assertJDelete(ManagedModelStore.REST_END_POINT + \"/test-model\",\n        \"/responseHeader/status==0\");\n    assertJDelete(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/responseHeader/status==0\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/==[]\");\n    restTestHarness.reload();\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/test1\",\n        \"/features/==[]\");\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/==[]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bf344c7efad3160a74c52ef1fd53f535978fc5b7":["b12a45e4bfdf664da77cb3d2ba1ebc43bf0ba162"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"b12a45e4bfdf664da77cb3d2ba1ebc43bf0ba162":["24c1c003d41edcd662a111a7fa869fe9c97ea18c","e80dd699120179c1fafb4fae84acf82bc2c486d7"],"24c1c003d41edcd662a111a7fa869fe9c97ea18c":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["3f906c3206e7eb174774f938416460e39170d819"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["24c1c003d41edcd662a111a7fa869fe9c97ea18c","b12a45e4bfdf664da77cb3d2ba1ebc43bf0ba162"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"e80dd699120179c1fafb4fae84acf82bc2c486d7":["24c1c003d41edcd662a111a7fa869fe9c97ea18c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"3f906c3206e7eb174774f938416460e39170d819":["b12a45e4bfdf664da77cb3d2ba1ebc43bf0ba162","bf344c7efad3160a74c52ef1fd53f535978fc5b7"],"491c9672ec42582fe43960452dbd37f1c80fe0f0":["9720b151fde2073f4e401450f4574e5f31c2d0ff","24c1c003d41edcd662a111a7fa869fe9c97ea18c"]},"commit2Childs":{"bf344c7efad3160a74c52ef1fd53f535978fc5b7":["3f906c3206e7eb174774f938416460e39170d819"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["9720b151fde2073f4e401450f4574e5f31c2d0ff","24c1c003d41edcd662a111a7fa869fe9c97ea18c"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["491c9672ec42582fe43960452dbd37f1c80fe0f0"],"b12a45e4bfdf664da77cb3d2ba1ebc43bf0ba162":["bf344c7efad3160a74c52ef1fd53f535978fc5b7","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","3f906c3206e7eb174774f938416460e39170d819"],"24c1c003d41edcd662a111a7fa869fe9c97ea18c":["b12a45e4bfdf664da77cb3d2ba1ebc43bf0ba162","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","e80dd699120179c1fafb4fae84acf82bc2c486d7","491c9672ec42582fe43960452dbd37f1c80fe0f0"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e80dd699120179c1fafb4fae84acf82bc2c486d7":["b12a45e4bfdf664da77cb3d2ba1ebc43bf0ba162"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"3f906c3206e7eb174774f938416460e39170d819":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"491c9672ec42582fe43960452dbd37f1c80fe0f0":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817","491c9672ec42582fe43960452dbd37f1c80fe0f0"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}