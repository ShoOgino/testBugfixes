{"path":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicy().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits.\n   */\n  public void testKeepLastNDeletionPolicy() throws IOException {\n    final int N = 5;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      for(int j=0;j<N+1;j++) {\n        IndexWriterConfig conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        MergePolicy mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        IndexWriter writer = new IndexWriter(dir, conf);\n        for(int i=0;i<17;i++) {\n          addDoc(writer);\n        }\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertTrue(policy.numDelete > 0);\n      assertEquals(N, policy.numOnInit);\n      assertEquals(N+1, policy.numOnCommit);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir);\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits prior to last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits.\n   */\n  public void testKeepLastNDeletionPolicy() throws IOException {\n    final int N = 5;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      for(int j=0;j<N+1;j++) {\n        IndexWriterConfig conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        MergePolicy mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        IndexWriter writer = new IndexWriter(dir, conf);\n        for(int i=0;i<17;i++) {\n          addDoc(writer);\n        }\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertTrue(policy.numDelete > 0);\n      assertEquals(N, policy.numOnInit);\n      assertEquals(N+1, policy.numOnCommit);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir);\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits prior to last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"438e995b4e32916f631722aab36254146830fefb","date":1328903827,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits.\n   */\n  public void testKeepLastNDeletionPolicy() throws IOException {\n    final int N = 5;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      for(int j=0;j<N+1;j++) {\n        IndexWriterConfig conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        MergePolicy mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        IndexWriter writer = new IndexWriter(dir, conf);\n        for(int i=0;i<17;i++) {\n          addDoc(writer);\n        }\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertTrue(policy.numDelete > 0);\n      assertEquals(N, policy.numOnInit);\n      assertEquals(N+1, policy.numOnCommit);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir);\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits prior to last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits.\n   */\n  public void testKeepLastNDeletionPolicy() throws IOException {\n    final int N = 5;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      for(int j=0;j<N+1;j++) {\n        IndexWriterConfig conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        MergePolicy mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        IndexWriter writer = new IndexWriter(dir, conf);\n        for(int i=0;i<17;i++) {\n          addDoc(writer);\n        }\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertTrue(policy.numDelete > 0);\n      assertEquals(N, policy.numOnInit);\n      assertEquals(N+1, policy.numOnCommit);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir);\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits prior to last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits.\n   */\n  public void testKeepLastNDeletionPolicy() throws IOException {\n    final int N = 5;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      for(int j=0;j<N+1;j++) {\n        IndexWriterConfig conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        MergePolicy mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        IndexWriter writer = new IndexWriter(dir, conf);\n        for(int i=0;i<17;i++) {\n          addDoc(writer);\n        }\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertTrue(policy.numDelete > 0);\n      assertEquals(N, policy.numOnInit);\n      assertEquals(N+1, policy.numOnCommit);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir);\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits prior to last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits.\n   */\n  public void testKeepLastNDeletionPolicy() throws IOException {\n    final int N = 5;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      for(int j=0;j<N+1;j++) {\n        IndexWriterConfig conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        MergePolicy mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        IndexWriter writer = new IndexWriter(dir, conf);\n        for(int i=0;i<17;i++) {\n          addDoc(writer);\n        }\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertTrue(policy.numDelete > 0);\n      assertEquals(N, policy.numOnInit);\n      assertEquals(N+1, policy.numOnCommit);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir);\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits prior to last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits.\n   */\n  public void testKeepLastNDeletionPolicy() throws IOException {\n    final int N = 5;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      for(int j=0;j<N+1;j++) {\n        IndexWriterConfig conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        MergePolicy mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        IndexWriter writer = new IndexWriter(dir, conf);\n        for(int i=0;i<17;i++) {\n          addDoc(writer);\n        }\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertTrue(policy.numDelete > 0);\n      assertEquals(N, policy.numOnInit);\n      assertEquals(N+1, policy.numOnCommit);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = DirectoryReader.open(dir);\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits prior to last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits.\n   */\n  public void testKeepLastNDeletionPolicy() throws IOException {\n    final int N = 5;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      for(int j=0;j<N+1;j++) {\n        IndexWriterConfig conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        MergePolicy mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        IndexWriter writer = new IndexWriter(dir, conf);\n        for(int i=0;i<17;i++) {\n          addDoc(writer);\n        }\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertTrue(policy.numDelete > 0);\n      assertEquals(N, policy.numOnInit);\n      assertEquals(N+1, policy.numOnCommit);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir);\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits prior to last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70790b11e79a0366b21b2cc5b82d03b6fddcef81","date":1364594206,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits.\n   */\n  public void testKeepLastNDeletionPolicy() throws IOException {\n    final int N = 5;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n      for(int j=0;j<N+1;j++) {\n        IndexWriterConfig conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.CREATE)\n            .setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        MergePolicy mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        IndexWriter writer = new IndexWriter(dir, conf);\n        policy = (KeepLastNDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        for(int i=0;i<17;i++) {\n          addDoc(writer);\n        }\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertTrue(policy.numDelete > 0);\n      assertEquals(N, policy.numOnInit);\n      assertEquals(N+1, policy.numOnCommit);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = DirectoryReader.open(dir);\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits prior to last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits.\n   */\n  public void testKeepLastNDeletionPolicy() throws IOException {\n    final int N = 5;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      for(int j=0;j<N+1;j++) {\n        IndexWriterConfig conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        MergePolicy mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        IndexWriter writer = new IndexWriter(dir, conf);\n        for(int i=0;i<17;i++) {\n          addDoc(writer);\n        }\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertTrue(policy.numDelete > 0);\n      assertEquals(N, policy.numOnInit);\n      assertEquals(N+1, policy.numOnCommit);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = DirectoryReader.open(dir);\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits prior to last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dce99db8590cdd065839ae4e6b228b66eeee8f38","date":1367579599,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits.\n   */\n  public void testKeepLastNDeletionPolicy() throws IOException {\n    final int N = 5;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n      for(int j=0;j<N+1;j++) {\n        IndexWriterConfig conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.CREATE)\n            .setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        MergePolicy mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        IndexWriter writer = new IndexWriter(dir, conf);\n        policy = (KeepLastNDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        for(int i=0;i<17;i++) {\n          addDoc(writer);\n        }\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertTrue(policy.numDelete > 0);\n      assertEquals(N+1, policy.numOnInit);\n      assertEquals(N+1, policy.numOnCommit);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = DirectoryReader.open(dir);\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits prior to last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits.\n   */\n  public void testKeepLastNDeletionPolicy() throws IOException {\n    final int N = 5;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n      for(int j=0;j<N+1;j++) {\n        IndexWriterConfig conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.CREATE)\n            .setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        MergePolicy mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        IndexWriter writer = new IndexWriter(dir, conf);\n        policy = (KeepLastNDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        for(int i=0;i<17;i++) {\n          addDoc(writer);\n        }\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertTrue(policy.numDelete > 0);\n      assertEquals(N, policy.numOnInit);\n      assertEquals(N+1, policy.numOnCommit);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = DirectoryReader.open(dir);\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits prior to last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"088a7ef694fd43d5d9a4d200c4005865f773d1e7","date":1371136274,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits.\n   */\n  public void testKeepLastNDeletionPolicy() throws IOException {\n    final int N = 5;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n      for(int j=0;j<N+1;j++) {\n        IndexWriterConfig conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.CREATE)\n            .setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        MergePolicy mp = conf.getMergePolicy();\n        mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n        IndexWriter writer = new IndexWriter(dir, conf);\n        policy = (KeepLastNDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        for(int i=0;i<17;i++) {\n          addDoc(writer);\n        }\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertTrue(policy.numDelete > 0);\n      assertEquals(N+1, policy.numOnInit);\n      assertEquals(N+1, policy.numOnCommit);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = DirectoryReader.open(dir);\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits prior to last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits.\n   */\n  public void testKeepLastNDeletionPolicy() throws IOException {\n    final int N = 5;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n      for(int j=0;j<N+1;j++) {\n        IndexWriterConfig conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.CREATE)\n            .setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        MergePolicy mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        IndexWriter writer = new IndexWriter(dir, conf);\n        policy = (KeepLastNDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        for(int i=0;i<17;i++) {\n          addDoc(writer);\n        }\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertTrue(policy.numDelete > 0);\n      assertEquals(N+1, policy.numOnInit);\n      assertEquals(N+1, policy.numOnCommit);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = DirectoryReader.open(dir);\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits prior to last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits.\n   */\n  public void testKeepLastNDeletionPolicy() throws IOException {\n    final int N = 5;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n      for(int j=0;j<N+1;j++) {\n        IndexWriterConfig conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.CREATE)\n            .setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        MergePolicy mp = conf.getMergePolicy();\n        mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n        IndexWriter writer = new IndexWriter(dir, conf);\n        policy = (KeepLastNDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        for(int i=0;i<17;i++) {\n          addDoc(writer);\n        }\n        writer.forceMerge(1);\n        writer.shutdown();\n      }\n\n      assertTrue(policy.numDelete > 0);\n      assertEquals(N+1, policy.numOnInit);\n      assertEquals(N+1, policy.numOnCommit);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = DirectoryReader.open(dir);\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits prior to last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits.\n   */\n  public void testKeepLastNDeletionPolicy() throws IOException {\n    final int N = 5;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n      for(int j=0;j<N+1;j++) {\n        IndexWriterConfig conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.CREATE)\n            .setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        MergePolicy mp = conf.getMergePolicy();\n        mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n        IndexWriter writer = new IndexWriter(dir, conf);\n        policy = (KeepLastNDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        for(int i=0;i<17;i++) {\n          addDoc(writer);\n        }\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertTrue(policy.numDelete > 0);\n      assertEquals(N+1, policy.numOnInit);\n      assertEquals(N+1, policy.numOnCommit);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = DirectoryReader.open(dir);\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits prior to last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits.\n   */\n  public void testKeepLastNDeletionPolicy() throws IOException {\n    final int N = 5;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n      for(int j=0;j<N+1;j++) {\n        IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.CREATE)\n            .setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        MergePolicy mp = conf.getMergePolicy();\n        mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n        IndexWriter writer = new IndexWriter(dir, conf);\n        policy = (KeepLastNDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        for(int i=0;i<17;i++) {\n          addDoc(writer);\n        }\n        writer.forceMerge(1);\n        writer.shutdown();\n      }\n\n      assertTrue(policy.numDelete > 0);\n      assertEquals(N+1, policy.numOnInit);\n      assertEquals(N+1, policy.numOnCommit);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = DirectoryReader.open(dir);\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits prior to last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits.\n   */\n  public void testKeepLastNDeletionPolicy() throws IOException {\n    final int N = 5;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n      for(int j=0;j<N+1;j++) {\n        IndexWriterConfig conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.CREATE)\n            .setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        MergePolicy mp = conf.getMergePolicy();\n        mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n        IndexWriter writer = new IndexWriter(dir, conf);\n        policy = (KeepLastNDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        for(int i=0;i<17;i++) {\n          addDoc(writer);\n        }\n        writer.forceMerge(1);\n        writer.shutdown();\n      }\n\n      assertTrue(policy.numDelete > 0);\n      assertEquals(N+1, policy.numOnInit);\n      assertEquals(N+1, policy.numOnCommit);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = DirectoryReader.open(dir);\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits prior to last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits.\n   */\n  public void testKeepLastNDeletionPolicy() throws IOException {\n    final int N = 5;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n      for(int j=0;j<N+1;j++) {\n        IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.CREATE)\n            .setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        MergePolicy mp = conf.getMergePolicy();\n        mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n        IndexWriter writer = new IndexWriter(dir, conf);\n        policy = (KeepLastNDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        for(int i=0;i<17;i++) {\n          addDoc(writer);\n        }\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertTrue(policy.numDelete > 0);\n      assertEquals(N+1, policy.numOnInit);\n      assertEquals(N+1, policy.numOnCommit);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = DirectoryReader.open(dir);\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits prior to last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits.\n   */\n  public void testKeepLastNDeletionPolicy() throws IOException {\n    final int N = 5;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n      for(int j=0;j<N+1;j++) {\n        IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.CREATE)\n            .setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        MergePolicy mp = conf.getMergePolicy();\n        mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n        IndexWriter writer = new IndexWriter(dir, conf);\n        policy = (KeepLastNDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        for(int i=0;i<17;i++) {\n          addDoc(writer);\n        }\n        writer.forceMerge(1);\n        writer.shutdown();\n      }\n\n      assertTrue(policy.numDelete > 0);\n      assertEquals(N+1, policy.numOnInit);\n      assertEquals(N+1, policy.numOnCommit);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = DirectoryReader.open(dir);\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits prior to last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","date":1409346855,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits.\n   */\n  public void testKeepLastNDeletionPolicy() throws IOException {\n    final int N = 5;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n      if (dir instanceof MockDirectoryWrapper) {\n        // test manually deletes files\n        ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n      }\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n      for(int j=0;j<N+1;j++) {\n        IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.CREATE)\n            .setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        MergePolicy mp = conf.getMergePolicy();\n        mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n        IndexWriter writer = new IndexWriter(dir, conf);\n        policy = (KeepLastNDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        for(int i=0;i<17;i++) {\n          addDoc(writer);\n        }\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertTrue(policy.numDelete > 0);\n      assertEquals(N+1, policy.numOnInit);\n      assertEquals(N+1, policy.numOnCommit);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = DirectoryReader.open(dir);\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits prior to last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits.\n   */\n  public void testKeepLastNDeletionPolicy() throws IOException {\n    final int N = 5;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n      for(int j=0;j<N+1;j++) {\n        IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.CREATE)\n            .setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        MergePolicy mp = conf.getMergePolicy();\n        mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n        IndexWriter writer = new IndexWriter(dir, conf);\n        policy = (KeepLastNDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        for(int i=0;i<17;i++) {\n          addDoc(writer);\n        }\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertTrue(policy.numDelete > 0);\n      assertEquals(N+1, policy.numOnInit);\n      assertEquals(N+1, policy.numOnCommit);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = DirectoryReader.open(dir);\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits prior to last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46e4a8bdfbafda795ef9c39a2bc2d47095770299","date":1410411846,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits.\n   */\n  public void testKeepLastNDeletionPolicy() throws IOException {\n    final int N = 5;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n      if (dir instanceof MockDirectoryWrapper) {\n        // test manually deletes files\n        ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n      }\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n      for(int j=0;j<N+1;j++) {\n        IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.CREATE)\n            .setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        MergePolicy mp = conf.getMergePolicy();\n        mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n        IndexWriter writer = new IndexWriter(dir, conf);\n        policy = (KeepLastNDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        for(int i=0;i<17;i++) {\n          addDoc(writer);\n        }\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertTrue(policy.numDelete > 0);\n      assertEquals(N+1, policy.numOnInit);\n      assertEquals(N+1, policy.numOnCommit);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = DirectoryReader.open(dir);\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits prior to last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits.\n   */\n  public void testKeepLastNDeletionPolicy() throws IOException {\n    final int N = 5;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n      if (dir instanceof MockDirectoryWrapper) {\n        // test manually deletes files\n        ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n      }\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n      for(int j=0;j<N+1;j++) {\n        IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.CREATE)\n            .setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        MergePolicy mp = conf.getMergePolicy();\n        mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n        IndexWriter writer = new IndexWriter(dir, conf);\n        policy = (KeepLastNDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        for(int i=0;i<17;i++) {\n          addDoc(writer);\n        }\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertTrue(policy.numDelete > 0);\n      assertEquals(N+1, policy.numOnInit);\n      assertEquals(N+1, policy.numOnCommit);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = DirectoryReader.open(dir);\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits prior to last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits.\n   */\n  public void testKeepLastNDeletionPolicy() throws IOException {\n    final int N = 5;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n      for(int j=0;j<N+1;j++) {\n        IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.CREATE)\n            .setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        MergePolicy mp = conf.getMergePolicy();\n        mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n        IndexWriter writer = new IndexWriter(dir, conf);\n        policy = (KeepLastNDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        for(int i=0;i<17;i++) {\n          addDoc(writer);\n        }\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertTrue(policy.numDelete > 0);\n      assertEquals(N+1, policy.numOnInit);\n      assertEquals(N+1, policy.numOnCommit);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = DirectoryReader.open(dir);\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits prior to last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFiles(Collections.singleton(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen)));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits.\n   */\n  public void testKeepLastNDeletionPolicy() throws IOException {\n    final int N = 5;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n      if (dir instanceof MockDirectoryWrapper) {\n        // test manually deletes files\n        ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n      }\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n      for(int j=0;j<N+1;j++) {\n        IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.CREATE)\n            .setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        MergePolicy mp = conf.getMergePolicy();\n        mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n        IndexWriter writer = new IndexWriter(dir, conf);\n        policy = (KeepLastNDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        for(int i=0;i<17;i++) {\n          addDoc(writer);\n        }\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertTrue(policy.numDelete > 0);\n      assertEquals(N+1, policy.numOnInit);\n      assertEquals(N+1, policy.numOnCommit);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = DirectoryReader.open(dir);\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits prior to last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1","date":1454513757,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits.\n   */\n  public void testKeepLastNDeletionPolicy() throws IOException {\n    final int N = 5;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n      for(int j=0;j<N+1;j++) {\n        IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.CREATE)\n            .setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        MergePolicy mp = conf.getMergePolicy();\n        mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n        IndexWriter writer = new IndexWriter(dir, conf);\n        policy = (KeepLastNDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        for(int i=0;i<17;i++) {\n          addDoc(writer);\n        }\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertTrue(policy.numDelete > 0);\n      assertEquals(N+1, policy.numOnInit);\n      assertEquals(N+1, policy.numOnCommit);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = DirectoryReader.open(dir);\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits prior to last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits.\n   */\n  public void testKeepLastNDeletionPolicy() throws IOException {\n    final int N = 5;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n      for(int j=0;j<N+1;j++) {\n        IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.CREATE)\n            .setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        MergePolicy mp = conf.getMergePolicy();\n        mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n        IndexWriter writer = new IndexWriter(dir, conf);\n        policy = (KeepLastNDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        for(int i=0;i<17;i++) {\n          addDoc(writer);\n        }\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertTrue(policy.numDelete > 0);\n      assertEquals(N+1, policy.numOnInit);\n      assertEquals(N+1, policy.numOnCommit);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = DirectoryReader.open(dir);\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits prior to last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFiles(Collections.singleton(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen)));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits.\n   */\n  public void testKeepLastNDeletionPolicy() throws IOException {\n    final int N = 5;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n      for(int j=0;j<N+1;j++) {\n        IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.CREATE)\n            .setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        MergePolicy mp = conf.getMergePolicy();\n        mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n        IndexWriter writer = new IndexWriter(dir, conf);\n        policy = (KeepLastNDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        for(int i=0;i<17;i++) {\n          addDoc(writer);\n        }\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertTrue(policy.numDelete > 0);\n      assertEquals(N+1, policy.numOnInit);\n      assertEquals(N+1, policy.numOnCommit);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = DirectoryReader.open(dir);\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits prior to last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits.\n   */\n  public void testKeepLastNDeletionPolicy() throws IOException {\n    final int N = 5;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n      if (dir instanceof MockDirectoryWrapper) {\n        // test manually deletes files\n        ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n      }\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n      for(int j=0;j<N+1;j++) {\n        IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.CREATE)\n            .setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        MergePolicy mp = conf.getMergePolicy();\n        mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n        IndexWriter writer = new IndexWriter(dir, conf);\n        policy = (KeepLastNDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        for(int i=0;i<17;i++) {\n          addDoc(writer);\n        }\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertTrue(policy.numDelete > 0);\n      assertEquals(N+1, policy.numOnInit);\n      assertEquals(N+1, policy.numOnCommit);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = DirectoryReader.open(dir);\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits prior to last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits.\n   */\n  public void testKeepLastNDeletionPolicy() throws IOException {\n    final int N = 5;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n      for(int j=0;j<N+1;j++) {\n        IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.CREATE)\n            .setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        MergePolicy mp = conf.getMergePolicy();\n        mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n        IndexWriter writer = new IndexWriter(dir, conf);\n        policy = (KeepLastNDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        for(int i=0;i<17;i++) {\n          addDoc(writer);\n        }\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertTrue(policy.numDelete > 0);\n      assertEquals(N+1, policy.numOnInit);\n      assertEquals(N+1, policy.numOnCommit);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = DirectoryReader.open(dir);\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits prior to last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits.\n   */\n  public void testKeepLastNDeletionPolicy() throws IOException {\n    final int N = 5;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n      if (dir instanceof MockDirectoryWrapper) {\n        // test manually deletes files\n        ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n      }\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n      for(int j=0;j<N+1;j++) {\n        IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.CREATE)\n            .setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        MergePolicy mp = conf.getMergePolicy();\n        mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n        IndexWriter writer = new IndexWriter(dir, conf);\n        policy = (KeepLastNDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        for(int i=0;i<17;i++) {\n          addDoc(writer);\n        }\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertTrue(policy.numDelete > 0);\n      assertEquals(N+1, policy.numOnInit);\n      assertEquals(N+1, policy.numOnCommit);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = DirectoryReader.open(dir);\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits prior to last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits.\n   */\n  public void testKeepLastNDeletionPolicy() throws IOException {\n    final int N = 5;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n      for(int j=0;j<N+1;j++) {\n        IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.CREATE)\n            .setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        MergePolicy mp = conf.getMergePolicy();\n        mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n        IndexWriter writer = new IndexWriter(dir, conf);\n        policy = (KeepLastNDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        for(int i=0;i<17;i++) {\n          addDoc(writer);\n        }\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertTrue(policy.numDelete > 0);\n      assertEquals(N+1, policy.numOnInit);\n      assertEquals(N+1, policy.numOnCommit);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = DirectoryReader.open(dir);\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits prior to last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits.\n   */\n  public void testKeepLastNDeletionPolicy() throws IOException {\n    final int N = 5;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      Directory dir = newDirectory();\n      if (dir instanceof MockDirectoryWrapper) {\n        // test manually deletes files\n        ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n      }\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n      for(int j=0;j<N+1;j++) {\n        IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.CREATE)\n            .setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        MergePolicy mp = conf.getMergePolicy();\n        mp.setNoCFSRatio(useCompoundFile ? 1.0 : 0.0);\n        IndexWriter writer = new IndexWriter(dir, conf);\n        policy = (KeepLastNDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n        for(int i=0;i<17;i++) {\n          addDoc(writer);\n        }\n        writer.forceMerge(1);\n        writer.close();\n      }\n\n      assertTrue(policy.numDelete > 0);\n      assertEquals(N+1, policy.numOnInit);\n      assertEquals(N+1, policy.numOnCommit);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = DirectoryReader.open(dir);\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits prior to last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70790b11e79a0366b21b2cc5b82d03b6fddcef81":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"dce99db8590cdd065839ae4e6b228b66eeee8f38":["70790b11e79a0366b21b2cc5b82d03b6fddcef81"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["46e4a8bdfbafda795ef9c39a2bc2d47095770299","b470f36a9372c97283360b1304eacbde22df6c0d"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["46e4a8bdfbafda795ef9c39a2bc2d47095770299","b470f36a9372c97283360b1304eacbde22df6c0d"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"46e4a8bdfbafda795ef9c39a2bc2d47095770299":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"088a7ef694fd43d5d9a4d200c4005865f773d1e7":["dce99db8590cdd065839ae4e6b228b66eeee8f38"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1":["6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"b470f36a9372c97283360b1304eacbde22df6c0d":["46e4a8bdfbafda795ef9c39a2bc2d47095770299","8f4e2dcb5e470991d83a63c264bfe20880d3b3c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["46e4a8bdfbafda795ef9c39a2bc2d47095770299"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["438e995b4e32916f631722aab36254146830fefb"],"438e995b4e32916f631722aab36254146830fefb":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a207d19eac354d649c3f0e2cce070017c78125e"]},"commit2Childs":{"70790b11e79a0366b21b2cc5b82d03b6fddcef81":["dce99db8590cdd065839ae4e6b228b66eeee8f38"],"dce99db8590cdd065839ae4e6b228b66eeee8f38":["088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["438e995b4e32916f631722aab36254146830fefb"],"5a207d19eac354d649c3f0e2cce070017c78125e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["46e4a8bdfbafda795ef9c39a2bc2d47095770299"],"46e4a8bdfbafda795ef9c39a2bc2d47095770299":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b470f36a9372c97283360b1304eacbde22df6c0d","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"088a7ef694fd43d5d9a4d200c4005865f773d1e7":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["70790b11e79a0366b21b2cc5b82d03b6fddcef81"],"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1":["b470f36a9372c97283360b1304eacbde22df6c0d"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["8f4e2dcb5e470991d83a63c264bfe20880d3b3c1"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"438e995b4e32916f631722aab36254146830fefb":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}