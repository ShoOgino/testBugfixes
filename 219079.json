{"path":"solr/core/src/java/org/apache/solr/handler/GraphHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"54d17c38a2ec6cf529776157e201d539c5c0ff2f","date":1462480579,"type":0,"author":"jbernste","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/GraphHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n\n    TupleStream tupleStream = null;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"expr\"));\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(logger, e);\n      Map requestContext = req.getContext();\n      requestContext.put(\"stream\", new DummyErrorStream(e));\n      return;\n    }\n\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(StreamHandler.clientCache);\n    context.put(\"core\", this.coreName);\n    Traversal traversal = new Traversal();\n    context.put(\"traversal\", traversal);\n    tupleStream.setStreamContext(context);\n    Map requestContext = req.getContext();\n    requestContext.put(\"stream\", new TimerStream(new ExceptionStream(tupleStream)));\n    requestContext.put(\"traversal\", traversal);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79728e71d79579147b18f43e27a36e34be4986e2","date":1462480538,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/GraphHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n\n    TupleStream tupleStream = null;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"expr\"));\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(logger, e);\n      Map requestContext = req.getContext();\n      requestContext.put(\"stream\", new DummyErrorStream(e));\n      return;\n    }\n\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(StreamHandler.clientCache);\n    context.put(\"core\", this.coreName);\n    Traversal traversal = new Traversal();\n    context.put(\"traversal\", traversal);\n    tupleStream.setStreamContext(context);\n    Map requestContext = req.getContext();\n    requestContext.put(\"stream\", new TimerStream(new ExceptionStream(tupleStream)));\n    requestContext.put(\"traversal\", traversal);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/GraphHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n\n    TupleStream tupleStream = null;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"expr\"));\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(logger, e);\n      Map requestContext = req.getContext();\n      requestContext.put(\"stream\", new DummyErrorStream(e));\n      return;\n    }\n\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(StreamHandler.clientCache);\n    context.put(\"core\", this.coreName);\n    Traversal traversal = new Traversal();\n    context.put(\"traversal\", traversal);\n    tupleStream.setStreamContext(context);\n    Map requestContext = req.getContext();\n    requestContext.put(\"stream\", new TimerStream(new ExceptionStream(tupleStream)));\n    requestContext.put(\"traversal\", traversal);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/GraphHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n\n    TupleStream tupleStream = null;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"expr\"));\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(logger, e);\n      Map requestContext = req.getContext();\n      requestContext.put(\"stream\", new DummyErrorStream(e));\n      return;\n    }\n\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(StreamHandler.clientCache);\n    context.put(\"core\", this.coreName);\n    Traversal traversal = new Traversal();\n    context.put(\"traversal\", traversal);\n    tupleStream.setStreamContext(context);\n    Map requestContext = req.getContext();\n    requestContext.put(\"stream\", new TimerStream(new ExceptionStream(tupleStream)));\n    requestContext.put(\"traversal\", traversal);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c80f6f4fe2e841ba56e6ce200951063ab91196d3","date":1533052731,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/GraphHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/GraphHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n\n    TupleStream tupleStream = null;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"expr\"));\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(log, e);\n      Map requestContext = req.getContext();\n      requestContext.put(\"stream\", new DummyErrorStream(e));\n      return;\n    }\n\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(StreamHandler.clientCache);\n    context.put(\"core\", this.coreName);\n    Traversal traversal = new Traversal();\n    context.put(\"traversal\", traversal);\n    tupleStream.setStreamContext(context);\n    Map requestContext = req.getContext();\n    requestContext.put(\"stream\", new TimerStream(new ExceptionStream(tupleStream)));\n    requestContext.put(\"traversal\", traversal);\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n\n    TupleStream tupleStream = null;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"expr\"));\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(logger, e);\n      Map requestContext = req.getContext();\n      requestContext.put(\"stream\", new DummyErrorStream(e));\n      return;\n    }\n\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(StreamHandler.clientCache);\n    context.put(\"core\", this.coreName);\n    Traversal traversal = new Traversal();\n    context.put(\"traversal\", traversal);\n    tupleStream.setStreamContext(context);\n    Map requestContext = req.getContext();\n    requestContext.put(\"stream\", new TimerStream(new ExceptionStream(tupleStream)));\n    requestContext.put(\"traversal\", traversal);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa","date":1589312640,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/GraphHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/GraphHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n\n    TupleStream tupleStream = null;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"expr\"));\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(log, e);\n      Map requestContext = req.getContext();\n      requestContext.put(\"stream\", new DummyErrorStream(e));\n      return;\n    }\n\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    context.put(\"core\", this.coreName);\n    Traversal traversal = new Traversal();\n    context.put(\"traversal\", traversal);\n    tupleStream.setStreamContext(context);\n    Map requestContext = req.getContext();\n    requestContext.put(\"stream\", new TimerStream(new ExceptionStream(tupleStream)));\n    requestContext.put(\"traversal\", traversal);\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n\n    TupleStream tupleStream = null;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"expr\"));\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(log, e);\n      Map requestContext = req.getContext();\n      requestContext.put(\"stream\", new DummyErrorStream(e));\n      return;\n    }\n\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(StreamHandler.clientCache);\n    context.put(\"core\", this.coreName);\n    Traversal traversal = new Traversal();\n    context.put(\"traversal\", traversal);\n    tupleStream.setStreamContext(context);\n    Map requestContext = req.getContext();\n    requestContext.put(\"stream\", new TimerStream(new ExceptionStream(tupleStream)));\n    requestContext.put(\"traversal\", traversal);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5","date":1591384964,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/GraphHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/GraphHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n\n    TupleStream tupleStream = null;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"expr\"));\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(log, e);\n      @SuppressWarnings({\"rawtypes\"})\n      Map requestContext = req.getContext();\n      requestContext.put(\"stream\", new DummyErrorStream(e));\n      return;\n    }\n\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    context.put(\"core\", this.coreName);\n    Traversal traversal = new Traversal();\n    context.put(\"traversal\", traversal);\n    tupleStream.setStreamContext(context);\n    @SuppressWarnings({\"rawtypes\"})\n    Map requestContext = req.getContext();\n    requestContext.put(\"stream\", new TimerStream(new ExceptionStream(tupleStream)));\n    requestContext.put(\"traversal\", traversal);\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n\n    TupleStream tupleStream = null;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"expr\"));\n    } catch (Exception e) {\n      //Catch exceptions that occur while the stream is being created. This will include streaming expression parse rules.\n      SolrException.log(log, e);\n      Map requestContext = req.getContext();\n      requestContext.put(\"stream\", new DummyErrorStream(e));\n      return;\n    }\n\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    context.put(\"core\", this.coreName);\n    Traversal traversal = new Traversal();\n    context.put(\"traversal\", traversal);\n    tupleStream.setStreamContext(context);\n    Map requestContext = req.getContext();\n    requestContext.put(\"stream\", new TimerStream(new ExceptionStream(tupleStream)));\n    requestContext.put(\"traversal\", traversal);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54d17c38a2ec6cf529776157e201d539c5c0ff2f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa":["c80f6f4fe2e841ba56e6ce200951063ab91196d3"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","79728e71d79579147b18f43e27a36e34be4986e2"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"79728e71d79579147b18f43e27a36e34be4986e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","54d17c38a2ec6cf529776157e201d539c5c0ff2f"],"c80f6f4fe2e841ba56e6ce200951063ab91196d3":["79728e71d79579147b18f43e27a36e34be4986e2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","79728e71d79579147b18f43e27a36e34be4986e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"]},"commit2Childs":{"54d17c38a2ec6cf529776157e201d539c5c0ff2f":["79728e71d79579147b18f43e27a36e34be4986e2"],"2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54d17c38a2ec6cf529776157e201d539c5c0ff2f","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","79728e71d79579147b18f43e27a36e34be4986e2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"79728e71d79579147b18f43e27a36e34be4986e2":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","c80f6f4fe2e841ba56e6ce200951063ab91196d3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c80f6f4fe2e841ba56e6ce200951063ab91196d3":["2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}