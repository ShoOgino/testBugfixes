{"path":"contrib/miscellaneous/src/test/org/apache/lucene/misc/TestLengthNormModifier#testFieldWithNoNorm().mjava","commits":[{"id":"74b183d06c98e975319fefb0a1bc672b66be868e","date":1148582944,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"contrib/miscellaneous/src/test/org/apache/lucene/misc/TestLengthNormModifier#testFieldWithNoNorm().mjava","pathOld":"/dev/null","sourceNew":"    public void testFieldWithNoNorm() throws Exception {\n\n\tIndexReader r = IndexReader.open(store);\n\tbyte[] norms = r.norms(\"nonorm\");\n\n\t// sanity check, norms should all be 1\n\tassertTrue(\"Whoops we have norms?\", !r.hasNorms(\"nonorm\"));\n\tfor (int i = 0; i< norms.length; i++) {\n\t    assertEquals(\"\"+i, DEFAULT_NORM, norms[i]);\n\t}\n\n\tr.close();\n\t\n\tLengthNormModifier lnm = new LengthNormModifier(store, s);\n\ttry {\n\t    lnm.reSetNorms(\"nonorm\");\n\t} catch (Exception e) {\n\t    assertNull(\"caught something\", e);\n\t}\n\n\t// nothing should have changed\n\tr = IndexReader.open(store);\n\t\n\tnorms = r.norms(\"nonorm\");\n\tassertTrue(\"Whoops we have norms?\", !r.hasNorms(\"nonorm\"));\n\tfor (int i = 0; i< norms.length; i++) {\n\t    assertEquals(\"\"+i, DEFAULT_NORM, norms[i]);\n\t}\n\n\tr.close();\n\t\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0e7f1e9c48dcf5351850e841f712bf65196dcf74"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"64714133cf5ec732e3bbceee63351bb9af0117dc","date":1239647636,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/miscellaneous/src/test/org/apache/lucene/misc/TestLengthNormModifier#testFieldWithNoNorm().mjava","pathOld":"contrib/miscellaneous/src/test/org/apache/lucene/misc/TestLengthNormModifier#testFieldWithNoNorm().mjava","sourceNew":"    public void testFieldWithNoNorm() throws Exception {\n\n\tIndexReader r = IndexReader.open(store);\n\tbyte[] norms = r.norms(\"nonorm\");\n\n\t// sanity check, norms should all be 1\n\tassertTrue(\"Whoops we have norms?\", !r.hasNorms(\"nonorm\"));\n\tfor (int i = 0; i< norms.length; i++) {\n\t    assertEquals(\"\"+i, DEFAULT_NORM, norms[i]);\n\t}\n\n\tr.close();\n\t\n\tFieldNormModifier fnm = new FieldNormModifier(store, s);\n\ttry {\n\t    fnm.reSetNorms(\"nonorm\");\n\t} catch (Exception e) {\n\t    assertNull(\"caught something\", e);\n\t}\n\n\t// nothing should have changed\n\tr = IndexReader.open(store);\n\t\n\tnorms = r.norms(\"nonorm\");\n\tassertTrue(\"Whoops we have norms?\", !r.hasNorms(\"nonorm\"));\n\tfor (int i = 0; i< norms.length; i++) {\n\t    assertEquals(\"\"+i, DEFAULT_NORM, norms[i]);\n\t}\n\n\tr.close();\n\t\n    }\n\n","sourceOld":"    public void testFieldWithNoNorm() throws Exception {\n\n\tIndexReader r = IndexReader.open(store);\n\tbyte[] norms = r.norms(\"nonorm\");\n\n\t// sanity check, norms should all be 1\n\tassertTrue(\"Whoops we have norms?\", !r.hasNorms(\"nonorm\"));\n\tfor (int i = 0; i< norms.length; i++) {\n\t    assertEquals(\"\"+i, DEFAULT_NORM, norms[i]);\n\t}\n\n\tr.close();\n\t\n\tLengthNormModifier lnm = new LengthNormModifier(store, s);\n\ttry {\n\t    lnm.reSetNorms(\"nonorm\");\n\t} catch (Exception e) {\n\t    assertNull(\"caught something\", e);\n\t}\n\n\t// nothing should have changed\n\tr = IndexReader.open(store);\n\t\n\tnorms = r.norms(\"nonorm\");\n\tassertTrue(\"Whoops we have norms?\", !r.hasNorms(\"nonorm\"));\n\tfor (int i = 0; i< norms.length; i++) {\n\t    assertEquals(\"\"+i, DEFAULT_NORM, norms[i]);\n\t}\n\n\tr.close();\n\t\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a","date":1240951127,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/miscellaneous/src/test/org/apache/lucene/misc/TestLengthNormModifier#testFieldWithNoNorm().mjava","pathOld":"contrib/miscellaneous/src/test/org/apache/lucene/misc/TestLengthNormModifier#testFieldWithNoNorm().mjava","sourceNew":"    public void testFieldWithNoNorm() throws Exception {\n\n\tIndexReader r = IndexReader.open(store);\n\tbyte[] norms = r.norms(\"nonorm\");\n\n\t// sanity check, norms should all be 1\n\tassertTrue(\"Whoops we have norms?\", !r.hasNorms(\"nonorm\"));\n        if (!r.getDisableFakeNorms()) {\n          for (int i = 0; i< norms.length; i++) {\n\t    assertEquals(\"\"+i, DEFAULT_NORM, norms[i]);\n          }\n        } else {\n          assertNull(norms);\n        }\n\n\tr.close();\n\t\n\tFieldNormModifier fnm = new FieldNormModifier(store, s);\n\ttry {\n\t    fnm.reSetNorms(\"nonorm\");\n\t} catch (Exception e) {\n\t    assertNull(\"caught something\", e);\n\t}\n\n\t// nothing should have changed\n\tr = IndexReader.open(store);\n\t\n\tnorms = r.norms(\"nonorm\");\n\tassertTrue(\"Whoops we have norms?\", !r.hasNorms(\"nonorm\"));\n        if (!r.getDisableFakeNorms()) {\n          for (int i = 0; i< norms.length; i++) {\n\t    assertEquals(\"\"+i, DEFAULT_NORM, norms[i]);\n          }\n        } else {\n          assertNull(norms);\n        }\n\n\tr.close();\n\t\n    }\n\n","sourceOld":"    public void testFieldWithNoNorm() throws Exception {\n\n\tIndexReader r = IndexReader.open(store);\n\tbyte[] norms = r.norms(\"nonorm\");\n\n\t// sanity check, norms should all be 1\n\tassertTrue(\"Whoops we have norms?\", !r.hasNorms(\"nonorm\"));\n\tfor (int i = 0; i< norms.length; i++) {\n\t    assertEquals(\"\"+i, DEFAULT_NORM, norms[i]);\n\t}\n\n\tr.close();\n\t\n\tFieldNormModifier fnm = new FieldNormModifier(store, s);\n\ttry {\n\t    fnm.reSetNorms(\"nonorm\");\n\t} catch (Exception e) {\n\t    assertNull(\"caught something\", e);\n\t}\n\n\t// nothing should have changed\n\tr = IndexReader.open(store);\n\t\n\tnorms = r.norms(\"nonorm\");\n\tassertTrue(\"Whoops we have norms?\", !r.hasNorms(\"nonorm\"));\n\tfor (int i = 0; i< norms.length; i++) {\n\t    assertEquals(\"\"+i, DEFAULT_NORM, norms[i]);\n\t}\n\n\tr.close();\n\t\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"48bedd31c61edafb8baaff4bcbcac19449fb7c3a","date":1251468037,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/misc/src/test/org/apache/lucene/misc/TestLengthNormModifier#testFieldWithNoNorm().mjava","pathOld":"contrib/miscellaneous/src/test/org/apache/lucene/misc/TestLengthNormModifier#testFieldWithNoNorm().mjava","sourceNew":"    public void testFieldWithNoNorm() throws Exception {\n\n\tIndexReader r = IndexReader.open(store);\n\tbyte[] norms = r.norms(\"nonorm\");\n\n\t// sanity check, norms should all be 1\n\tassertTrue(\"Whoops we have norms?\", !r.hasNorms(\"nonorm\"));\n        if (!r.getDisableFakeNorms()) {\n          for (int i = 0; i< norms.length; i++) {\n\t    assertEquals(\"\"+i, DEFAULT_NORM, norms[i]);\n          }\n        } else {\n          assertNull(norms);\n        }\n\n\tr.close();\n\t\n\tFieldNormModifier fnm = new FieldNormModifier(store, s);\n\ttry {\n\t    fnm.reSetNorms(\"nonorm\");\n\t} catch (Exception e) {\n\t    assertNull(\"caught something\", e);\n\t}\n\n\t// nothing should have changed\n\tr = IndexReader.open(store);\n\t\n\tnorms = r.norms(\"nonorm\");\n\tassertTrue(\"Whoops we have norms?\", !r.hasNorms(\"nonorm\"));\n        if (!r.getDisableFakeNorms()) {\n          for (int i = 0; i< norms.length; i++) {\n\t    assertEquals(\"\"+i, DEFAULT_NORM, norms[i]);\n          }\n        } else {\n          assertNull(norms);\n        }\n\n\tr.close();\n\t\n    }\n\n","sourceOld":"    public void testFieldWithNoNorm() throws Exception {\n\n\tIndexReader r = IndexReader.open(store);\n\tbyte[] norms = r.norms(\"nonorm\");\n\n\t// sanity check, norms should all be 1\n\tassertTrue(\"Whoops we have norms?\", !r.hasNorms(\"nonorm\"));\n        if (!r.getDisableFakeNorms()) {\n          for (int i = 0; i< norms.length; i++) {\n\t    assertEquals(\"\"+i, DEFAULT_NORM, norms[i]);\n          }\n        } else {\n          assertNull(norms);\n        }\n\n\tr.close();\n\t\n\tFieldNormModifier fnm = new FieldNormModifier(store, s);\n\ttry {\n\t    fnm.reSetNorms(\"nonorm\");\n\t} catch (Exception e) {\n\t    assertNull(\"caught something\", e);\n\t}\n\n\t// nothing should have changed\n\tr = IndexReader.open(store);\n\t\n\tnorms = r.norms(\"nonorm\");\n\tassertTrue(\"Whoops we have norms?\", !r.hasNorms(\"nonorm\"));\n        if (!r.getDisableFakeNorms()) {\n          for (int i = 0; i< norms.length; i++) {\n\t    assertEquals(\"\"+i, DEFAULT_NORM, norms[i]);\n          }\n        } else {\n          assertNull(norms);\n        }\n\n\tr.close();\n\t\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"74b183d06c98e975319fefb0a1bc672b66be868e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["74b183d06c98e975319fefb0a1bc672b66be868e"],"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"]},"commit2Childs":{"74b183d06c98e975319fefb0a1bc672b66be868e":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a"],"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74b183d06c98e975319fefb0a1bc672b66be868e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}