{"path":"lucene/core/src/test/org/apache/lucene/search/TestRegexpQuery#testCharacterClasses().mjava","commits":[{"id":"074f544130034fba3e820179fe98defcf2e5c165","date":1589447065,"type":0,"author":"markharwood","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestRegexpQuery#testCharacterClasses().mjava","pathOld":"/dev/null","sourceNew":"  public void testCharacterClasses() throws IOException {\n    assertEquals(0, regexQueryNrHits(\"\\\\d\"));\n    assertEquals(1, regexQueryNrHits(\"\\\\d*\"));\n    assertEquals(1, regexQueryNrHits(\"\\\\d{6}\"));\n    assertEquals(1, regexQueryNrHits(\"[a\\\\d]{6}\"));\n    assertEquals(1, regexQueryNrHits(\"\\\\d{2,7}\"));\n    assertEquals(0, regexQueryNrHits(\"\\\\d{4}\"));\n    assertEquals(0, regexQueryNrHits(\"\\\\dog\"));\n    assertEquals(1, regexQueryNrHits(\"493\\\\d32\"));\n    \n    assertEquals(1, regexQueryNrHits(\"\\\\wox\"));\n    assertEquals(1, regexQueryNrHits(\"493\\\\w32\"));\n    assertEquals(1, regexQueryNrHits(\"\\\\?\\\\?\\\\?\"));\n    assertEquals(1, regexQueryNrHits(\"\\\\?\\\\W\\\\?\"));\n    assertEquals(1, regexQueryNrHits(\"\\\\?\\\\S\\\\?\"));\n    \n    assertEquals(1, regexQueryNrHits(\"\\\\[foo\\\\]\"));\n    assertEquals(1, regexQueryNrHits(\"\\\\[\\\\w{3}\\\\]\"));\n    \n    assertEquals(0, regexQueryNrHits(\"\\\\s.*\")); // no matches because all whitespace stripped\n    assertEquals(1, regexQueryNrHits(\"\\\\S*ck\")); //matches quick\n    assertEquals(1, regexQueryNrHits(\"[\\\\d\\\\.]{3,10}\")); // matches 12.3\n    assertEquals(1, regexQueryNrHits(\"\\\\d{1,3}(\\\\.(\\\\d{1,2}))+\")); // matches 12.3\n    \n  }  \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"618a38498a850acb4a1a993550fd7960dc7cc2c6","date":1589539518,"type":3,"author":"markharwood","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestRegexpQuery#testCharacterClasses().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestRegexpQuery#testCharacterClasses().mjava","sourceNew":"  public void testCharacterClasses() throws IOException {\n    assertEquals(0, regexQueryNrHits(\"\\\\d\"));\n    assertEquals(1, regexQueryNrHits(\"\\\\d*\"));\n    assertEquals(1, regexQueryNrHits(\"\\\\d{6}\"));\n    assertEquals(1, regexQueryNrHits(\"[a\\\\d]{6}\"));\n    assertEquals(1, regexQueryNrHits(\"\\\\d{2,7}\"));\n    assertEquals(0, regexQueryNrHits(\"\\\\d{4}\"));\n    assertEquals(0, regexQueryNrHits(\"\\\\dog\"));\n    assertEquals(1, regexQueryNrHits(\"493\\\\d32\"));\n    \n    assertEquals(1, regexQueryNrHits(\"\\\\wox\"));\n    assertEquals(1, regexQueryNrHits(\"493\\\\w32\"));\n    assertEquals(1, regexQueryNrHits(\"\\\\?\\\\?\\\\?\"));\n    assertEquals(1, regexQueryNrHits(\"\\\\?\\\\W\\\\?\"));\n    assertEquals(1, regexQueryNrHits(\"\\\\?\\\\S\\\\?\"));\n    \n    assertEquals(1, regexQueryNrHits(\"\\\\[foo\\\\]\"));\n    assertEquals(1, regexQueryNrHits(\"\\\\[\\\\w{3}\\\\]\"));\n    \n    assertEquals(0, regexQueryNrHits(\"\\\\s.*\")); // no matches because all whitespace stripped\n    assertEquals(1, regexQueryNrHits(\"\\\\S*ck\")); //matches quick\n    assertEquals(1, regexQueryNrHits(\"[\\\\d\\\\.]{3,10}\")); // matches 12.3\n    assertEquals(1, regexQueryNrHits(\"\\\\d{1,3}(\\\\.(\\\\d{1,2}))+\")); // matches 12.3\n\n    assertEquals(1, regexQueryNrHits(\"\\\\\\\\\"));\n    assertEquals(1, regexQueryNrHits(\"\\\\\\\\.*\"));\n\n    IllegalArgumentException expected = expectThrows(\n        IllegalArgumentException.class, () -> {\n          regexQueryNrHits(\"\\\\p\");\n        }\n    );\n    assertTrue(expected.getMessage().contains(\"invalid character class\"));         \n  }  \n\n","sourceOld":"  public void testCharacterClasses() throws IOException {\n    assertEquals(0, regexQueryNrHits(\"\\\\d\"));\n    assertEquals(1, regexQueryNrHits(\"\\\\d*\"));\n    assertEquals(1, regexQueryNrHits(\"\\\\d{6}\"));\n    assertEquals(1, regexQueryNrHits(\"[a\\\\d]{6}\"));\n    assertEquals(1, regexQueryNrHits(\"\\\\d{2,7}\"));\n    assertEquals(0, regexQueryNrHits(\"\\\\d{4}\"));\n    assertEquals(0, regexQueryNrHits(\"\\\\dog\"));\n    assertEquals(1, regexQueryNrHits(\"493\\\\d32\"));\n    \n    assertEquals(1, regexQueryNrHits(\"\\\\wox\"));\n    assertEquals(1, regexQueryNrHits(\"493\\\\w32\"));\n    assertEquals(1, regexQueryNrHits(\"\\\\?\\\\?\\\\?\"));\n    assertEquals(1, regexQueryNrHits(\"\\\\?\\\\W\\\\?\"));\n    assertEquals(1, regexQueryNrHits(\"\\\\?\\\\S\\\\?\"));\n    \n    assertEquals(1, regexQueryNrHits(\"\\\\[foo\\\\]\"));\n    assertEquals(1, regexQueryNrHits(\"\\\\[\\\\w{3}\\\\]\"));\n    \n    assertEquals(0, regexQueryNrHits(\"\\\\s.*\")); // no matches because all whitespace stripped\n    assertEquals(1, regexQueryNrHits(\"\\\\S*ck\")); //matches quick\n    assertEquals(1, regexQueryNrHits(\"[\\\\d\\\\.]{3,10}\")); // matches 12.3\n    assertEquals(1, regexQueryNrHits(\"\\\\d{1,3}(\\\\.(\\\\d{1,2}))+\")); // matches 12.3\n    \n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"074f544130034fba3e820179fe98defcf2e5c165":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"618a38498a850acb4a1a993550fd7960dc7cc2c6":["074f544130034fba3e820179fe98defcf2e5c165"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["618a38498a850acb4a1a993550fd7960dc7cc2c6"]},"commit2Childs":{"074f544130034fba3e820179fe98defcf2e5c165":["618a38498a850acb4a1a993550fd7960dc7cc2c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["074f544130034fba3e820179fe98defcf2e5c165"],"618a38498a850acb4a1a993550fd7960dc7cc2c6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}