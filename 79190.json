{"path":"lucene/core/src/java/org/apache/lucene/search/spans/Spans#asTwoPhaseIterator().mjava","commits":[{"id":"30de45e50bdc1a79a6797f34dca6271c8866cb6e","date":1427790465,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/Spans#asTwoPhaseIterator().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Optional method: Return a {@link TwoPhaseIterator} view of this\n   * {@link Spans}. A return value of {@code null} indicates that\n   * two-phase iteration is not supported.\n   *\n   * Note that the returned {@link TwoPhaseIterator}'s\n   * {@link TwoPhaseIterator#approximation() approximation} must\n   * advance synchronously with this iterator: advancing the approximation must\n   * advance this iterator and vice-versa.\n   *\n   * Implementing this method is typically useful on {@link Spans}s\n   * that have a high per-document overhead in order to confirm matches.\n   *\n   * The default implementation returns {@code null}.\n   */\n  public TwoPhaseIterator asTwoPhaseIterator() {\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/Spans#asTwoPhaseIterator().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Optional method: Return a {@link TwoPhaseIterator} view of this\n   * {@link Spans}. A return value of {@code null} indicates that\n   * two-phase iteration is not supported.\n   *\n   * Note that the returned {@link TwoPhaseIterator}'s\n   * {@link TwoPhaseIterator#approximation() approximation} must\n   * advance synchronously with this iterator: advancing the approximation must\n   * advance this iterator and vice-versa.\n   *\n   * Implementing this method is typically useful on {@link Spans}s\n   * that have a high per-document overhead in order to confirm matches.\n   *\n   * The default implementation returns {@code null}.\n   */\n  public TwoPhaseIterator asTwoPhaseIterator() {\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7","date":1429852340,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/Spans#asTwoPhaseIterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/Spans#asTwoPhaseIterator().mjava","sourceNew":"  /**\n   * Optional method: Return a {@link TwoPhaseIterator} view of this\n   * {@link Spans}. A return value of {@code null} indicates that\n   * two-phase iteration is not supported.\n   *\n   * Note that the returned {@link TwoPhaseIterator}'s\n   * {@link TwoPhaseIterator#approximation() approximation} must\n   * advance documents synchronously with this iterator:\n   * advancing the approximation must\n   * advance this iterator and vice-versa.\n   *\n   * Implementing this method is typically useful on a {@link Spans}\n   * that has a high per-document overhead for confirming matches.\n   *\n   * The default implementation returns {@code null}.\n   */\n  public TwoPhaseIterator asTwoPhaseIterator() {\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Optional method: Return a {@link TwoPhaseIterator} view of this\n   * {@link Spans}. A return value of {@code null} indicates that\n   * two-phase iteration is not supported.\n   *\n   * Note that the returned {@link TwoPhaseIterator}'s\n   * {@link TwoPhaseIterator#approximation() approximation} must\n   * advance synchronously with this iterator: advancing the approximation must\n   * advance this iterator and vice-versa.\n   *\n   * Implementing this method is typically useful on {@link Spans}s\n   * that have a high per-document overhead in order to confirm matches.\n   *\n   * The default implementation returns {@code null}.\n   */\n  public TwoPhaseIterator asTwoPhaseIterator() {\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"557b118fdfb9d28b6cfe38fac273af58c4d51135","date":1445505363,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/Spans#asTwoPhaseIterator().mjava","sourceNew":null,"sourceOld":"  /**\n   * Optional method: Return a {@link TwoPhaseIterator} view of this\n   * {@link Spans}. A return value of {@code null} indicates that\n   * two-phase iteration is not supported.\n   *\n   * Note that the returned {@link TwoPhaseIterator}'s\n   * {@link TwoPhaseIterator#approximation() approximation} must\n   * advance documents synchronously with this iterator:\n   * advancing the approximation must\n   * advance this iterator and vice-versa.\n   *\n   * Implementing this method is typically useful on a {@link Spans}\n   * that has a high per-document overhead for confirming matches.\n   *\n   * The default implementation returns {@code null}.\n   */\n  public TwoPhaseIterator asTwoPhaseIterator() {\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/Spans#asTwoPhaseIterator().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Optional method: Return a {@link TwoPhaseIterator} view of this\n   * {@link Scorer}. A return value of {@code null} indicates that\n   * two-phase iteration is not supported.\n   * @see Scorer#twoPhaseIterator()\n   */\n  public TwoPhaseIterator asTwoPhaseIterator() {\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"557b118fdfb9d28b6cfe38fac273af58c4d51135":["7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["557b118fdfb9d28b6cfe38fac273af58c4d51135"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fab172655716b96f7e42376116235017a922de3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dd748bb245633a8195281556bb0e68a6ea97d18"]},"commit2Childs":{"7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7":["557b118fdfb9d28b6cfe38fac273af58c4d51135"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30de45e50bdc1a79a6797f34dca6271c8866cb6e","fab172655716b96f7e42376116235017a922de3a"],"557b118fdfb9d28b6cfe38fac273af58c4d51135":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7","fab172655716b96f7e42376116235017a922de3a"],"fab172655716b96f7e42376116235017a922de3a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}