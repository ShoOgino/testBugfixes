{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/lt/TestLithuanianStemming#testNounsIV().mjava","commits":[{"id":"6cc97ef80489825587c37e0ca2efa790041f7f76","date":1437752845,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/lt/TestLithuanianStemming#testNounsIV().mjava","pathOld":"/dev/null","sourceNew":"  public void testNounsIV() throws IOException {\n    // n. decl IV (-us)\n    checkOneTerm(a, \"sūnus\",   \"sūn\"); // nom. sing.\n    checkOneTerm(a, \"sūnūs\",   \"sūn\"); // nom. pl.\n    checkOneTerm(a, \"sūnaus\",  \"sūn\"); // gen. sg.\n    checkOneTerm(a, \"sūnų\",    \"sūn\"); // gen. pl.\n    checkOneTerm(a, \"sūnui\",   \"sūn\"); // dat. sg.\n    checkOneTerm(a, \"sūnums\",  \"sūn\"); // dat. pl.\n    checkOneTerm(a, \"sūnų\",    \"sūn\"); // acc. sg.\n    checkOneTerm(a, \"sūnus\",   \"sūn\"); // acc. pl.\n    checkOneTerm(a, \"sūnumi\",  \"sūn\"); // ins. sg.\n    checkOneTerm(a, \"sūnumis\", \"sūn\"); // ins. pl.\n    checkOneTerm(a, \"sūnuje\",  \"sūn\"); // loc. sg.\n    checkOneTerm(a, \"sūnuose\", \"sūn\"); // loc. pl.\n    checkOneTerm(a, \"sūnau\",   \"sūn\"); // voc. sg.\n    checkOneTerm(a, \"sūnūs\",   \"sūn\"); // voc. pl.\n    \n    // n. decl IV (-ius)\n    checkOneTerm(a, \"profesorius\",   \"profesor\"); // nom. sing.\n    checkOneTerm(a, \"profesoriai\",   \"profesor\"); // nom. pl.\n    checkOneTerm(a, \"profesoriaus\",  \"profesor\"); // gen. sg.\n    checkOneTerm(a, \"profesorių\",    \"profesor\"); // gen. pl.\n    checkOneTerm(a, \"profesoriui\",   \"profesor\"); // dat. sg.\n    checkOneTerm(a, \"profesoriams\",  \"profesor\"); // dat. pl.\n    checkOneTerm(a, \"profesorių\",    \"profesor\"); // acc. sg.\n    checkOneTerm(a, \"profesorius\",   \"profesor\"); // acc. pl.\n    checkOneTerm(a, \"profesoriumi\",  \"profesor\"); // ins. sg.\n    checkOneTerm(a, \"profesoriais\",  \"profesor\"); // ins. pl.\n    checkOneTerm(a, \"profesoriuje\",  \"profesor\"); // loc. sg.\n    checkOneTerm(a, \"profesoriuose\", \"profesor\"); // loc. pl.\n    checkOneTerm(a, \"profesoriau\",   \"profesor\"); // voc. sg.\n    checkOneTerm(a, \"profesoriai\",   \"profesor\"); // voc. pl.\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6cc97ef80489825587c37e0ca2efa790041f7f76":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6cc97ef80489825587c37e0ca2efa790041f7f76"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6cc97ef80489825587c37e0ca2efa790041f7f76"],"6cc97ef80489825587c37e0ca2efa790041f7f76":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}