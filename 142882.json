{"path":"backwards/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testNestedSpans().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testNestedSpans().mjava","pathOld":"/dev/null","sourceNew":"  public void testNestedSpans() throws Exception {\n    SpanTermQuery stq;\n    Spans spans;\n    IndexSearcher searcher = getSearcher();\n    stq = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"mark\"));\n    spans = stq.getSpans(searcher.getIndexReader());\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 0, null);\n\n\n    SpanQuery[] clauses = new SpanQuery[3];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"rr\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"yy\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"xx\"));\n    SpanNearQuery spanNearQuery = new SpanNearQuery(clauses, 12, false);\n\n    spans = spanNearQuery.getSpans(searcher.getIndexReader());\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 2, new int[]{3,3});\n\n     \n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"xx\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"rr\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"yy\"));\n\n    spanNearQuery = new SpanNearQuery(clauses, 6, true);\n   \n    \n    spans = spanNearQuery.getSpans(searcher.getIndexReader());\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 1, new int[]{3});\n     \n    clauses = new SpanQuery[2];\n     \n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"xx\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"rr\"));\n\n    spanNearQuery = new SpanNearQuery(clauses, 6, true);\n     \n    // xx within 6 of rr\n    \n    SpanQuery[] clauses2 = new SpanQuery[2];\n     \n    clauses2[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"yy\"));\n    clauses2[1] = spanNearQuery;\n     \n    SpanNearQuery nestedSpanNearQuery = new SpanNearQuery(clauses2, 6, false);\n    \n    // yy within 6 of xx within 6 of rr\n\n    spans = nestedSpanNearQuery.getSpans(searcher.getIndexReader());\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 2, new int[]{3,3});\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testNestedSpans().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testNestedSpans().mjava","sourceNew":"  public void testNestedSpans() throws Exception {\n    SpanTermQuery stq;\n    Spans spans;\n    IndexSearcher searcher = getSearcher();\n    stq = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"mark\"));\n    spans = stq.getSpans(searcher.getIndexReader());\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 0, null);\n\n\n    SpanQuery[] clauses = new SpanQuery[3];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"rr\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"yy\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"xx\"));\n    SpanNearQuery spanNearQuery = new SpanNearQuery(clauses, 12, false);\n\n    spans = spanNearQuery.getSpans(searcher.getIndexReader());\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 2, new int[]{3,3});\n\n     \n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"xx\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"rr\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"yy\"));\n\n    spanNearQuery = new SpanNearQuery(clauses, 6, true);\n   \n    \n    spans = spanNearQuery.getSpans(searcher.getIndexReader());\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 1, new int[]{3});\n     \n    clauses = new SpanQuery[2];\n     \n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"xx\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"rr\"));\n\n    spanNearQuery = new SpanNearQuery(clauses, 6, true);\n     \n    // xx within 6 of rr\n    \n    SpanQuery[] clauses2 = new SpanQuery[2];\n     \n    clauses2[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"yy\"));\n    clauses2[1] = spanNearQuery;\n     \n    SpanNearQuery nestedSpanNearQuery = new SpanNearQuery(clauses2, 6, false);\n    \n    // yy within 6 of xx within 6 of rr\n\n    spans = nestedSpanNearQuery.getSpans(searcher.getIndexReader());\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 2, new int[]{3,3});\n  }\n\n","sourceOld":"  public void testNestedSpans() throws Exception {\n    SpanTermQuery stq;\n    Spans spans;\n    IndexSearcher searcher = getSearcher();\n    stq = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"mark\"));\n    spans = stq.getSpans(searcher.getIndexReader());\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 0, null);\n\n\n    SpanQuery[] clauses = new SpanQuery[3];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"rr\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"yy\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"xx\"));\n    SpanNearQuery spanNearQuery = new SpanNearQuery(clauses, 12, false);\n\n    spans = spanNearQuery.getSpans(searcher.getIndexReader());\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 2, new int[]{3,3});\n\n     \n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"xx\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"rr\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"yy\"));\n\n    spanNearQuery = new SpanNearQuery(clauses, 6, true);\n   \n    \n    spans = spanNearQuery.getSpans(searcher.getIndexReader());\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 1, new int[]{3});\n     \n    clauses = new SpanQuery[2];\n     \n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"xx\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"rr\"));\n\n    spanNearQuery = new SpanNearQuery(clauses, 6, true);\n     \n    // xx within 6 of rr\n    \n    SpanQuery[] clauses2 = new SpanQuery[2];\n     \n    clauses2[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"yy\"));\n    clauses2[1] = spanNearQuery;\n     \n    SpanNearQuery nestedSpanNearQuery = new SpanNearQuery(clauses2, 6, false);\n    \n    // yy within 6 of xx within 6 of rr\n\n    spans = nestedSpanNearQuery.getSpans(searcher.getIndexReader());\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 2, new int[]{3,3});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}