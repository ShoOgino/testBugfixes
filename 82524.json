{"path":"lucene/src/java/org/apache/lucene/index/SegmentNorms#copyOnWrite().mjava","commits":[{"id":"8b5e0eebe355b14693e24007d721da78a79d8170","date":1305898401,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentNorms#copyOnWrite().mjava","pathOld":"/dev/null","sourceNew":"  // Called if we intend to change a norm value.  We make a\n  // private copy of bytes if it's shared with others:\n  public synchronized byte[] copyOnWrite() throws IOException {\n    assert refCount > 0 && (origNorm == null || origNorm.refCount > 0);\n    bytes();\n    assert bytes != null;\n    assert bytesRef != null;\n    if (bytesRef.get() > 1) {\n      // I cannot be the origNorm for another norm\n      // instance if I'm being changed.  Ie, only the\n      // \"head Norm\" can be changed:\n      assert refCount == 1;\n      final AtomicInteger oldRef = bytesRef;\n      bytes = owner.cloneNormBytes(bytes);\n      bytesRef = new AtomicInteger(1);\n      oldRef.decrementAndGet();\n    }\n    dirty = true;\n    return bytes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentNorms#copyOnWrite().mjava","pathOld":"/dev/null","sourceNew":"  // Called if we intend to change a norm value.  We make a\n  // private copy of bytes if it's shared with others:\n  public synchronized byte[] copyOnWrite() throws IOException {\n    assert refCount > 0 && (origNorm == null || origNorm.refCount > 0);\n    bytes();\n    assert bytes != null;\n    assert bytesRef != null;\n    if (bytesRef.get() > 1) {\n      // I cannot be the origNorm for another norm\n      // instance if I'm being changed.  Ie, only the\n      // \"head Norm\" can be changed:\n      assert refCount == 1;\n      final AtomicInteger oldRef = bytesRef;\n      bytes = owner.cloneNormBytes(bytes);\n      bytesRef = new AtomicInteger(1);\n      oldRef.decrementAndGet();\n    }\n    dirty = true;\n    return bytes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","date":1306150983,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentNorms#copyOnWrite().mjava","pathOld":"/dev/null","sourceNew":"  // Called if we intend to change a norm value.  We make a\n  // private copy of bytes if it's shared with others:\n  public synchronized byte[] copyOnWrite() throws IOException {\n    assert refCount > 0 && (origNorm == null || origNorm.refCount > 0);\n    bytes();\n    assert bytes != null;\n    assert bytesRef != null;\n    if (bytesRef.get() > 1) {\n      // I cannot be the origNorm for another norm\n      // instance if I'm being changed.  Ie, only the\n      // \"head Norm\" can be changed:\n      assert refCount == 1;\n      final AtomicInteger oldRef = bytesRef;\n      bytes = owner.cloneNormBytes(bytes);\n      bytesRef = new AtomicInteger(1);\n      oldRef.decrementAndGet();\n    }\n    dirty = true;\n    return bytes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4122a26e1fd0457a340616673a3d3aada370f713","date":1322955654,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentNorms#copyOnWrite().mjava","sourceNew":null,"sourceOld":"  // Called if we intend to change a norm value.  We make a\n  // private copy of bytes if it's shared with others:\n  public synchronized byte[] copyOnWrite() throws IOException {\n    assert refCount > 0 && (origNorm == null || origNorm.refCount > 0);\n    bytes();\n    assert bytes != null;\n    assert bytesRef != null;\n    if (bytesRef.get() > 1) {\n      // I cannot be the origNorm for another norm\n      // instance if I'm being changed.  Ie, only the\n      // \"head Norm\" can be changed:\n      assert refCount == 1;\n      final AtomicInteger oldRef = bytesRef;\n      bytes = owner.cloneNormBytes(bytes);\n      bytesRef = new AtomicInteger(1);\n      oldRef.decrementAndGet();\n    }\n    dirty = true;\n    return bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentNorms#copyOnWrite().mjava","sourceNew":null,"sourceOld":"  // Called if we intend to change a norm value.  We make a\n  // private copy of bytes if it's shared with others:\n  public synchronized byte[] copyOnWrite() throws IOException {\n    assert refCount > 0 && (origNorm == null || origNorm.refCount > 0);\n    bytes();\n    assert bytes != null;\n    assert bytesRef != null;\n    if (bytesRef.get() > 1) {\n      // I cannot be the origNorm for another norm\n      // instance if I'm being changed.  Ie, only the\n      // \"head Norm\" can be changed:\n      assert refCount == 1;\n      final AtomicInteger oldRef = bytesRef;\n      bytes = owner.cloneNormBytes(bytes);\n      bytesRef = new AtomicInteger(1);\n      oldRef.decrementAndGet();\n    }\n    dirty = true;\n    return bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentNorms#copyOnWrite().mjava","sourceNew":null,"sourceOld":"  // Called if we intend to change a norm value.  We make a\n  // private copy of bytes if it's shared with others:\n  public synchronized byte[] copyOnWrite() throws IOException {\n    assert refCount > 0 && (origNorm == null || origNorm.refCount > 0);\n    bytes();\n    assert bytes != null;\n    assert bytesRef != null;\n    if (bytesRef.get() > 1) {\n      // I cannot be the origNorm for another norm\n      // instance if I'm being changed.  Ie, only the\n      // \"head Norm\" can be changed:\n      assert refCount == 1;\n      final AtomicInteger oldRef = bytesRef;\n      bytes = owner.cloneNormBytes(bytes);\n      bytesRef = new AtomicInteger(1);\n      oldRef.decrementAndGet();\n    }\n    dirty = true;\n    return bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8b5e0eebe355b14693e24007d721da78a79d8170":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b5e0eebe355b14693e24007d721da78a79d8170"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["8b5e0eebe355b14693e24007d721da78a79d8170","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b5e0eebe355b14693e24007d721da78a79d8170"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["8b5e0eebe355b14693e24007d721da78a79d8170","4122a26e1fd0457a340616673a3d3aada370f713"],"4122a26e1fd0457a340616673a3d3aada370f713":["8b5e0eebe355b14693e24007d721da78a79d8170"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3615ce4a1f785ae1b779244de52c6a7d99227e60"]},"commit2Childs":{"8b5e0eebe355b14693e24007d721da78a79d8170":["5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","a3776dccca01c11e7046323cfad46a3b4a471233","3615ce4a1f785ae1b779244de52c6a7d99227e60","4122a26e1fd0457a340616673a3d3aada370f713"],"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a":[],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b5e0eebe355b14693e24007d721da78a79d8170","5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","a3776dccca01c11e7046323cfad46a3b4a471233"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4122a26e1fd0457a340616673a3d3aada370f713":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}