{"path":"src/java/org/apache/solr/core/CoreContainer#swap(String,String).mjava","commits":[{"id":"4926b5318ba4167d360445a0c5f3fc8af2cf8c49","date":1218678599,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#swap(String,String).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#swap(CoreDescriptor,CoreDescriptor).mjava","sourceNew":"  /**\n   * Swaps two SolrCore descriptors.\n   * @param c0\n   * @param c1\n   */\n  public void swap(String n0, String n1) {\n    if( n0 == null || n1 == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Can not swap unnamed cores.\" );\n    }\n    synchronized( cores ) {\n      CoreDescriptor c0 = cores.get(n0);\n      if (c0 == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + n0 );\n      CoreDescriptor c1 = cores.get(n1);\n      if (c1 == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + n1 );\n      cores.put(n0, c1);\n      cores.put(n1, c0);\n      c0.setName( n1 );\n      if (c0.getCore() != null)\n        c0.getCore().setName(n1);\n      c1.setName( n0 );\n      if (c1.getCore() != null)\n        c1.getCore().setName(n0);\n      log.info( \"swaped: \"+c0.getName() + \" with \" + c1.getName() );\n    }\n  }\n\n","sourceOld":"  /**\n   * Swaps two SolrCore descriptors.\n   * @param c0\n   * @param c1\n   */\n  public void swap(CoreDescriptor c0, CoreDescriptor c1) {\n    if( c0 == null || c1 == null ) {\n      throw new RuntimeException( \"Can not swap a null core.\" );\n    }\n    synchronized( cores ) {\n      String n0 = c0.getName();\n      String n1 = c1.getName();\n      cores.put(n0, c1);\n      cores.put(n1, c0);\n      c0.setName( n1 );\n      if (c0.getCore() != null)\n        c0.getCore().setName(n1);\n      c1.setName( n0 );\n      if (c1.getCore() != null)\n        c1.getCore().setName(n0);\n    }\n    log.info( \"swaped: \"+c0.getName() + \" with \" + c1.getName() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ec90489c1c4e4586d4b18904bc569d4e768c3c8","date":1218743144,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#swap(String,String).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#swap(String,String).mjava","sourceNew":"  /**\n   * Swaps two SolrCore descriptors.\n   * @param n0\n   * @param n1\n   */\n  public void swap(String n0, String n1) {\n    if( n0 == null || n1 == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Can not swap unnamed cores.\" );\n    }\n    synchronized( cores ) {\n      CoreDescriptor c0 = cores.get(n0);\n      if (c0 == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + n0 );\n      CoreDescriptor c1 = cores.get(n1);\n      if (c1 == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + n1 );\n      cores.put(n0, c1);\n      cores.put(n1, c0);\n      c0.setName( n1 );\n      if (c0.getCore() != null)\n        c0.getCore().setName(n1);\n      c1.setName( n0 );\n      if (c1.getCore() != null)\n        c1.getCore().setName(n0);\n      log.info( \"swaped: \"+c0.getName() + \" with \" + c1.getName() );\n    }\n  }\n\n","sourceOld":"  /**\n   * Swaps two SolrCore descriptors.\n   * @param c0\n   * @param c1\n   */\n  public void swap(String n0, String n1) {\n    if( n0 == null || n1 == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Can not swap unnamed cores.\" );\n    }\n    synchronized( cores ) {\n      CoreDescriptor c0 = cores.get(n0);\n      if (c0 == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + n0 );\n      CoreDescriptor c1 = cores.get(n1);\n      if (c1 == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + n1 );\n      cores.put(n0, c1);\n      cores.put(n1, c0);\n      c0.setName( n1 );\n      if (c0.getCore() != null)\n        c0.getCore().setName(n1);\n      c1.setName( n0 );\n      if (c1.getCore() != null)\n        c1.getCore().setName(n0);\n      log.info( \"swaped: \"+c0.getName() + \" with \" + c1.getName() );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c28792ff7d1774c306e16afbd44ded91a417049b","date":1219072108,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#swap(String,String).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#swap(String,String).mjava","sourceNew":"  /**\n   * Swaps two SolrCore descriptors.\n   * @param n0\n   * @param n1\n   */\n  public void swap(String n0, String n1) {\n    if( n0 == null || n1 == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Can not swap unnamed cores.\" );\n    }\n    synchronized( cores ) {\n      SolrCore c0 = cores.get(n0);\n      SolrCore c1 = cores.get(n1);\n      if (c0 == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + n0 );\n      if (c1 == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + n1 );\n      cores.put(n0, c1);\n      cores.put(n1, c0);\n\n      c0.setName(n1);\n      c1.setName(n0);\n    }\n\n\n    log.info(\"swaped: \"+n0 + \" with \" + n1);\n  }\n\n","sourceOld":"  /**\n   * Swaps two SolrCore descriptors.\n   * @param n0\n   * @param n1\n   */\n  public void swap(String n0, String n1) {\n    if( n0 == null || n1 == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Can not swap unnamed cores.\" );\n    }\n    synchronized( cores ) {\n      CoreDescriptor c0 = cores.get(n0);\n      if (c0 == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + n0 );\n      CoreDescriptor c1 = cores.get(n1);\n      if (c1 == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + n1 );\n      cores.put(n0, c1);\n      cores.put(n1, c0);\n      c0.setName( n1 );\n      if (c0.getCore() != null)\n        c0.getCore().setName(n1);\n      c1.setName( n0 );\n      if (c1.getCore() != null)\n        c1.getCore().setName(n0);\n      log.info( \"swaped: \"+c0.getName() + \" with \" + c1.getName() );\n    }\n  }\n\n","bugFix":["4926b5318ba4167d360445a0c5f3fc8af2cf8c49"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e27d2a5a3c200620d24f5ef16f61fcf9b6f27c72","date":1260860758,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#swap(String,String).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#swap(String,String).mjava","sourceNew":"  /**\n   * Swaps two SolrCore descriptors.\n   * @param n0\n   * @param n1\n   */\n  public void swap(String n0, String n1) {\n    if( n0 == null || n1 == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Can not swap unnamed cores.\" );\n    }\n    n0 = checkDefault(n0);\n    n1 = checkDefault(n1);\n    synchronized( cores ) {\n      SolrCore c0 = cores.get(n0);\n      SolrCore c1 = cores.get(n1);\n      if (c0 == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + n0 );\n      if (c1 == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + n1 );\n      cores.put(n0, c1);\n      cores.put(n1, c0);\n\n      c0.setName(n1);\n      c0.getCoreDescriptor().name = n1;\n      c1.setName(n0);\n      c1.getCoreDescriptor().name = n0;\n    }\n\n\n    log.info(\"swaped: \"+n0 + \" with \" + n1);\n  }\n\n","sourceOld":"  /**\n   * Swaps two SolrCore descriptors.\n   * @param n0\n   * @param n1\n   */\n  public void swap(String n0, String n1) {\n    if( n0 == null || n1 == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Can not swap unnamed cores.\" );\n    }\n    synchronized( cores ) {\n      SolrCore c0 = cores.get(n0);\n      SolrCore c1 = cores.get(n1);\n      if (c0 == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + n0 );\n      if (c1 == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + n1 );\n      cores.put(n0, c1);\n      cores.put(n1, c0);\n\n      c0.setName(n1);\n      c1.setName(n0);\n    }\n\n\n    log.info(\"swaped: \"+n0 + \" with \" + n1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#swap(String,String).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#swap(String,String).mjava","sourceNew":"  /**\n   * Swaps two SolrCore descriptors.\n   * @param n0\n   * @param n1\n   */\n  public void swap(String n0, String n1) {\n    if( n0 == null || n1 == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Can not swap unnamed cores.\" );\n    }\n    n0 = checkDefault(n0);\n    n1 = checkDefault(n1);\n    synchronized( cores ) {\n      SolrCore c0 = cores.get(n0);\n      SolrCore c1 = cores.get(n1);\n      if (c0 == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + n0 );\n      if (c1 == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + n1 );\n      cores.put(n0, c1);\n      cores.put(n1, c0);\n\n      c0.setName(n1);\n      c0.getCoreDescriptor().name = n1;\n      c1.setName(n0);\n      c1.getCoreDescriptor().name = n0;\n    }\n\n\n    log.info(\"swaped: \"+n0 + \" with \" + n1);\n  }\n\n","sourceOld":"  /**\n   * Swaps two SolrCore descriptors.\n   * @param n0\n   * @param n1\n   */\n  public void swap(String n0, String n1) {\n    if( n0 == null || n1 == null ) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Can not swap unnamed cores.\" );\n    }\n    n0 = checkDefault(n0);\n    n1 = checkDefault(n1);\n    synchronized( cores ) {\n      SolrCore c0 = cores.get(n0);\n      SolrCore c1 = cores.get(n1);\n      if (c0 == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + n0 );\n      if (c1 == null)\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"No such core: \" + n1 );\n      cores.put(n0, c1);\n      cores.put(n1, c0);\n\n      c0.setName(n1);\n      c0.getCoreDescriptor().name = n1;\n      c1.setName(n0);\n      c1.getCoreDescriptor().name = n0;\n    }\n\n\n    log.info(\"swaped: \"+n0 + \" with \" + n1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e27d2a5a3c200620d24f5ef16f61fcf9b6f27c72":["c28792ff7d1774c306e16afbd44ded91a417049b"],"4926b5318ba4167d360445a0c5f3fc8af2cf8c49":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3ec90489c1c4e4586d4b18904bc569d4e768c3c8":["4926b5318ba4167d360445a0c5f3fc8af2cf8c49"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"c28792ff7d1774c306e16afbd44ded91a417049b":["3ec90489c1c4e4586d4b18904bc569d4e768c3c8"],"ad94625fb8d088209f46650c8097196fec67f00c":["e27d2a5a3c200620d24f5ef16f61fcf9b6f27c72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e27d2a5a3c200620d24f5ef16f61fcf9b6f27c72":["ad94625fb8d088209f46650c8097196fec67f00c"],"4926b5318ba4167d360445a0c5f3fc8af2cf8c49":["3ec90489c1c4e4586d4b18904bc569d4e768c3c8"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4926b5318ba4167d360445a0c5f3fc8af2cf8c49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3ec90489c1c4e4586d4b18904bc569d4e768c3c8":["c28792ff7d1774c306e16afbd44ded91a417049b"],"c28792ff7d1774c306e16afbd44ded91a417049b":["e27d2a5a3c200620d24f5ef16f61fcf9b6f27c72"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}