{"path":"solr/core/src/java/org/apache/solr/update/UpdateLog#lookupVersion(BytesRef).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#lookupVersion(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  // This method works like realtime-get... it only guarantees to return the latest\n  // version of the *completed* update.  There can be updates in progress concurrently\n  // that have already grabbed higher version numbers.  Higher level coordination or\n  // synchronization is needed for stronger guarantees (as VersionUpdateProcessor does).\n  public Long lookupVersion(BytesRef indexedId) {\n    LogPtr entry;\n    TransactionLog lookupLog;\n\n    synchronized (this) {\n      entry = map.get(indexedId);\n      lookupLog = tlog;  // something found in \"map\" will always be in \"tlog\"\n      // SolrCore.verbose(\"TLOG: lookup ver: for id \",indexedId.utf8ToString(),\"in map\",System.identityHashCode(map),\"got\",entry,\"lookupLog=\",lookupLog);\n      if (entry == null && prevMap != null) {\n        entry = prevMap.get(indexedId);\n        // something found in prevMap will always be found in preMapLog (which could be tlog or prevTlog)\n        lookupLog = prevMapLog;\n        // SolrCore.verbose(\"TLOG: lookup ver: for id \",indexedId.utf8ToString(),\"in prevMap\",System.identityHashCode(map),\"got\",entry,\"lookupLog=\",lookupLog);\n      }\n      if (entry == null && prevMap2 != null) {\n        entry = prevMap2.get(indexedId);\n        // something found in prevMap2 will always be found in preMapLog2 (which could be tlog or prevTlog)\n        lookupLog = prevMapLog2;\n        // SolrCore.verbose(\"TLOG: lookup ver: for id \",indexedId.utf8ToString(),\"in prevMap2\",System.identityHashCode(map),\"got\",entry,\"lookupLog=\",lookupLog);\n      }\n    }\n\n    if (entry != null) {\n      return entry.version;\n    }\n\n    // Now check real index\n    Long version = versionInfo.getVersionFromIndex(indexedId);\n\n    if (version != null) {\n      return version;\n    }\n\n    // We can't get any version info for deletes from the index, so if the doc\n    // wasn't found, check a cache of recent deletes.\n\n    synchronized (this) {\n      entry = oldDeletes.get(indexedId);\n    }\n\n    if (entry != null) {\n      return entry.version;\n    }\n\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#lookupVersion(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  // This method works like realtime-get... it only guarantees to return the latest\n  // version of the *completed* update.  There can be updates in progress concurrently\n  // that have already grabbed higher version numbers.  Higher level coordination or\n  // synchronization is needed for stronger guarantees (as VersionUpdateProcessor does).\n  public Long lookupVersion(BytesRef indexedId) {\n    LogPtr entry;\n    TransactionLog lookupLog;\n\n    synchronized (this) {\n      entry = map.get(indexedId);\n      lookupLog = tlog;  // something found in \"map\" will always be in \"tlog\"\n      // SolrCore.verbose(\"TLOG: lookup ver: for id \",indexedId.utf8ToString(),\"in map\",System.identityHashCode(map),\"got\",entry,\"lookupLog=\",lookupLog);\n      if (entry == null && prevMap != null) {\n        entry = prevMap.get(indexedId);\n        // something found in prevMap will always be found in preMapLog (which could be tlog or prevTlog)\n        lookupLog = prevMapLog;\n        // SolrCore.verbose(\"TLOG: lookup ver: for id \",indexedId.utf8ToString(),\"in prevMap\",System.identityHashCode(map),\"got\",entry,\"lookupLog=\",lookupLog);\n      }\n      if (entry == null && prevMap2 != null) {\n        entry = prevMap2.get(indexedId);\n        // something found in prevMap2 will always be found in preMapLog2 (which could be tlog or prevTlog)\n        lookupLog = prevMapLog2;\n        // SolrCore.verbose(\"TLOG: lookup ver: for id \",indexedId.utf8ToString(),\"in prevMap2\",System.identityHashCode(map),\"got\",entry,\"lookupLog=\",lookupLog);\n      }\n    }\n\n    if (entry != null) {\n      return entry.version;\n    }\n\n    // Now check real index\n    Long version = versionInfo.getVersionFromIndex(indexedId);\n\n    if (version != null) {\n      return version;\n    }\n\n    // We can't get any version info for deletes from the index, so if the doc\n    // wasn't found, check a cache of recent deletes.\n\n    synchronized (this) {\n      entry = oldDeletes.get(indexedId);\n    }\n\n    if (entry != null) {\n      return entry.version;\n    }\n\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#lookupVersion(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  // This method works like realtime-get... it only guarantees to return the latest\n  // version of the *completed* update.  There can be updates in progress concurrently\n  // that have already grabbed higher version numbers.  Higher level coordination or\n  // synchronization is needed for stronger guarantees (as VersionUpdateProcessor does).\n  public Long lookupVersion(BytesRef indexedId) {\n    LogPtr entry;\n    TransactionLog lookupLog;\n\n    synchronized (this) {\n      entry = map.get(indexedId);\n      lookupLog = tlog;  // something found in \"map\" will always be in \"tlog\"\n      // SolrCore.verbose(\"TLOG: lookup ver: for id \",indexedId.utf8ToString(),\"in map\",System.identityHashCode(map),\"got\",entry,\"lookupLog=\",lookupLog);\n      if (entry == null && prevMap != null) {\n        entry = prevMap.get(indexedId);\n        // something found in prevMap will always be found in preMapLog (which could be tlog or prevTlog)\n        lookupLog = prevMapLog;\n        // SolrCore.verbose(\"TLOG: lookup ver: for id \",indexedId.utf8ToString(),\"in prevMap\",System.identityHashCode(map),\"got\",entry,\"lookupLog=\",lookupLog);\n      }\n      if (entry == null && prevMap2 != null) {\n        entry = prevMap2.get(indexedId);\n        // something found in prevMap2 will always be found in preMapLog2 (which could be tlog or prevTlog)\n        lookupLog = prevMapLog2;\n        // SolrCore.verbose(\"TLOG: lookup ver: for id \",indexedId.utf8ToString(),\"in prevMap2\",System.identityHashCode(map),\"got\",entry,\"lookupLog=\",lookupLog);\n      }\n    }\n\n    if (entry != null) {\n      return entry.version;\n    }\n\n    // Now check real index\n    Long version = versionInfo.getVersionFromIndex(indexedId);\n\n    if (version != null) {\n      return version;\n    }\n\n    // We can't get any version info for deletes from the index, so if the doc\n    // wasn't found, check a cache of recent deletes.\n\n    synchronized (this) {\n      entry = oldDeletes.get(indexedId);\n    }\n\n    if (entry != null) {\n      return entry.version;\n    }\n\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#lookupVersion(BytesRef).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#lookupVersion(BytesRef).mjava","sourceNew":"  // This method works like realtime-get... it only guarantees to return the latest\n  // version of the *completed* update.  There can be updates in progress concurrently\n  // that have already grabbed higher version numbers.  Higher level coordination or\n  // synchronization is needed for stronger guarantees (as VersionUpdateProcessor does).\n  public Long lookupVersion(BytesRef indexedId) {\n    LogPtr entry;\n    TransactionLog lookupLog;\n\n    synchronized (this) {\n      entry = map.get(indexedId);\n      lookupLog = tlog;  // something found in \"map\" will always be in \"tlog\"\n      // SolrCore.verbose(\"TLOG: lookup ver: for id \",indexedId.utf8ToString(),\"in map\",System.identityHashCode(map),\"got\",entry,\"lookupLog=\",lookupLog);\n      if (entry == null && prevMap != null) {\n        entry = prevMap.get(indexedId);\n        // something found in prevMap will always be found in prevMapLog (which could be tlog or prevTlog)\n        lookupLog = prevMapLog;\n        // SolrCore.verbose(\"TLOG: lookup ver: for id \",indexedId.utf8ToString(),\"in prevMap\",System.identityHashCode(map),\"got\",entry,\"lookupLog=\",lookupLog);\n      }\n      if (entry == null && prevMap2 != null) {\n        entry = prevMap2.get(indexedId);\n        // something found in prevMap2 will always be found in prevMapLog2 (which could be tlog or prevTlog)\n        lookupLog = prevMapLog2;\n        // SolrCore.verbose(\"TLOG: lookup ver: for id \",indexedId.utf8ToString(),\"in prevMap2\",System.identityHashCode(map),\"got\",entry,\"lookupLog=\",lookupLog);\n      }\n    }\n\n    if (entry != null) {\n      return entry.version;\n    }\n\n    // Now check real index\n    Long version = versionInfo.getVersionFromIndex(indexedId);\n\n    if (version != null) {\n      return version;\n    }\n\n    // We can't get any version info for deletes from the index, so if the doc\n    // wasn't found, check a cache of recent deletes.\n\n    synchronized (this) {\n      entry = oldDeletes.get(indexedId);\n    }\n\n    if (entry != null) {\n      return entry.version;\n    }\n\n    return null;\n  }\n\n","sourceOld":"  // This method works like realtime-get... it only guarantees to return the latest\n  // version of the *completed* update.  There can be updates in progress concurrently\n  // that have already grabbed higher version numbers.  Higher level coordination or\n  // synchronization is needed for stronger guarantees (as VersionUpdateProcessor does).\n  public Long lookupVersion(BytesRef indexedId) {\n    LogPtr entry;\n    TransactionLog lookupLog;\n\n    synchronized (this) {\n      entry = map.get(indexedId);\n      lookupLog = tlog;  // something found in \"map\" will always be in \"tlog\"\n      // SolrCore.verbose(\"TLOG: lookup ver: for id \",indexedId.utf8ToString(),\"in map\",System.identityHashCode(map),\"got\",entry,\"lookupLog=\",lookupLog);\n      if (entry == null && prevMap != null) {\n        entry = prevMap.get(indexedId);\n        // something found in prevMap will always be found in preMapLog (which could be tlog or prevTlog)\n        lookupLog = prevMapLog;\n        // SolrCore.verbose(\"TLOG: lookup ver: for id \",indexedId.utf8ToString(),\"in prevMap\",System.identityHashCode(map),\"got\",entry,\"lookupLog=\",lookupLog);\n      }\n      if (entry == null && prevMap2 != null) {\n        entry = prevMap2.get(indexedId);\n        // something found in prevMap2 will always be found in preMapLog2 (which could be tlog or prevTlog)\n        lookupLog = prevMapLog2;\n        // SolrCore.verbose(\"TLOG: lookup ver: for id \",indexedId.utf8ToString(),\"in prevMap2\",System.identityHashCode(map),\"got\",entry,\"lookupLog=\",lookupLog);\n      }\n    }\n\n    if (entry != null) {\n      return entry.version;\n    }\n\n    // Now check real index\n    Long version = versionInfo.getVersionFromIndex(indexedId);\n\n    if (version != null) {\n      return version;\n    }\n\n    // We can't get any version info for deletes from the index, so if the doc\n    // wasn't found, check a cache of recent deletes.\n\n    synchronized (this) {\n      entry = oldDeletes.get(indexedId);\n    }\n\n    if (entry != null) {\n      return entry.version;\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["86290366cefc1b9d4eced13b430858c4a4c0421d"]},"commit2Childs":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["86290366cefc1b9d4eced13b430858c4a4c0421d","0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}