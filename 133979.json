{"path":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#PostingsHighlighter(int,BreakIterator).mjava","commits":[{"id":"4831dd345148fcd7c33877b449ade21fc45459d8","date":1363963811,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#PostingsHighlighter(int,BreakIterator).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#PostingsHighlighter(int,BreakIterator,PassageScorer,PassageFormatter).mjava","sourceNew":"  /**\n   * Creates a new highlighter with custom parameters.\n   * @param maxLength maximum content size to process.\n   * @param breakIterator used for finding passage\n   *        boundaries; pass null to highlight the entire\n   *        content as a single Passage.\n   * @throws IllegalArgumentException if <code>maxLength</code> is negative or <code>Integer.MAX_VALUE</code>\n   */\n  public PostingsHighlighter(int maxLength, BreakIterator breakIterator) {\n    if (maxLength < 0 || maxLength == Integer.MAX_VALUE) {\n      // two reasons: no overflow problems in BreakIterator.preceding(offset+1),\n      // our sentinel in the offsets queue uses this value to terminate.\n      throw new IllegalArgumentException(\"maxLength must be < Integer.MAX_VALUE\");\n    }\n    if (breakIterator == null) {\n      breakIterator = new WholeBreakIterator();\n    }\n    this.maxLength = maxLength;\n    this.breakIterator = breakIterator;\n  }\n\n","sourceOld":"  /**\n   * Creates a new highlighter with custom parameters.\n   * @param maxLength maximum content size to process.\n   * @param breakIterator used for finding passage\n   *        boundaries; pass null to highlight the entire\n   *        content as a single Passage.\n   * @param scorer used for ranking passages.\n   * @param formatter used for formatting passages into highlighted snippets.\n   * @throws IllegalArgumentException if <code>maxLength</code> is negative or <code>Integer.MAX_VALUE</code>\n   */\n  public PostingsHighlighter(int maxLength, BreakIterator breakIterator, PassageScorer scorer, PassageFormatter formatter) {\n    if (maxLength < 0 || maxLength == Integer.MAX_VALUE) {\n      // two reasons: no overflow problems in BreakIterator.preceding(offset+1),\n      // our sentinel in the offsets queue uses this value to terminate.\n      throw new IllegalArgumentException(\"maxLength must be < Integer.MAX_VALUE\");\n    }\n    if (breakIterator == null) {\n      breakIterator = new WholeBreakIterator();\n    }\n    if (scorer == null || formatter == null) {\n      throw new NullPointerException();\n    }\n    this.maxLength = maxLength;\n    this.breakIterator = breakIterator;\n    this.scorer = scorer;\n    this.formatter = formatter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"157d49068cfc35be5fed366f40bc20cbcddea695","date":1364791189,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#PostingsHighlighter(int,BreakIterator).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a new highlighter with custom parameters.\n   * @param maxLength maximum content size to process.\n   * @param breakIterator used for finding passage\n   *        boundaries; pass null to highlight the entire\n   *        content as a single Passage.\n   * @throws IllegalArgumentException if <code>maxLength</code> is negative or <code>Integer.MAX_VALUE</code>\n   */\n  public PostingsHighlighter(int maxLength, BreakIterator breakIterator) {\n    if (maxLength < 0 || maxLength == Integer.MAX_VALUE) {\n      // two reasons: no overflow problems in BreakIterator.preceding(offset+1),\n      // our sentinel in the offsets queue uses this value to terminate.\n      throw new IllegalArgumentException(\"maxLength must be < Integer.MAX_VALUE\");\n    }\n    if (breakIterator == null) {\n      breakIterator = new WholeBreakIterator();\n    }\n    this.maxLength = maxLength;\n    this.breakIterator = breakIterator;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4831dd345148fcd7c33877b449ade21fc45459d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"157d49068cfc35be5fed366f40bc20cbcddea695":["4831dd345148fcd7c33877b449ade21fc45459d8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["157d49068cfc35be5fed366f40bc20cbcddea695"]},"commit2Childs":{"4831dd345148fcd7c33877b449ade21fc45459d8":["157d49068cfc35be5fed366f40bc20cbcddea695"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4831dd345148fcd7c33877b449ade21fc45459d8"],"157d49068cfc35be5fed366f40bc20cbcddea695":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}