{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#applyAllDeletes().mjava","commits":[{"id":"34067df01cbbefc83d0b316037fe4e10d89ba6a3","date":1559054674,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#applyAllDeletes().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#applyAllDeletes(DocumentsWriterDeleteQueue).mjava","sourceNew":"  /** If buffered deletes are using too much heap, resolve them and write disk and return true. */\n  private boolean applyAllDeletes() throws IOException {\n    final DocumentsWriterDeleteQueue deleteQueue = this.deleteQueue;\n    if (flushControl.isFullFlush() == false // never apply deletes during full flush this breaks happens before relationship\n        && deleteQueue.isOpen() // if it's closed then it's already fully applied and we have a new delete queue\n        && flushControl.getAndResetApplyAllDeletes()) {\n      if (ticketQueue.addDeletes(deleteQueue)) {\n        flushNotifications.onDeletesApplied(); // apply deletes event forces a purge\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /** If buffered deletes are using too much heap, resolve them and write disk and return true. */\n  private boolean applyAllDeletes(DocumentsWriterDeleteQueue deleteQueue) throws IOException {\n    if (flushControl.isFullFlush() == false // never apply deletes during full flush this breaks happens before relationship\n        && flushControl.getAndResetApplyAllDeletes()) {\n      if (deleteQueue != null) {\n        assert assertTicketQueueModification(deleteQueue);\n        ticketQueue.addDeletes(deleteQueue);\n      }\n      flushNotifications.onDeletesApplied(); // apply deletes event forces a purge\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34b5cf63f4ff3d985a7fc828c1a0d1624b0176d9","date":1559371943,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#applyAllDeletes().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#applyAllDeletes(DocumentsWriterDeleteQueue).mjava","sourceNew":"  /** If buffered deletes are using too much heap, resolve them and write disk and return true. */\n  private boolean applyAllDeletes() throws IOException {\n    final DocumentsWriterDeleteQueue deleteQueue = this.deleteQueue;\n    if (flushControl.isFullFlush() == false // never apply deletes during full flush this breaks happens before relationship\n        && deleteQueue.isOpen() // if it's closed then it's already fully applied and we have a new delete queue\n        && flushControl.getAndResetApplyAllDeletes()) {\n      if (ticketQueue.addDeletes(deleteQueue)) {\n        flushNotifications.onDeletesApplied(); // apply deletes event forces a purge\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /** If buffered deletes are using too much heap, resolve them and write disk and return true. */\n  private boolean applyAllDeletes(DocumentsWriterDeleteQueue deleteQueue) throws IOException {\n    if (flushControl.isFullFlush() == false // never apply deletes during full flush this breaks happens before relationship\n        && flushControl.getAndResetApplyAllDeletes()) {\n      if (deleteQueue != null) {\n        assert assertTicketQueueModification(deleteQueue);\n        ticketQueue.addDeletes(deleteQueue);\n      }\n      flushNotifications.onDeletesApplied(); // apply deletes event forces a purge\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"34b5cf63f4ff3d985a7fc828c1a0d1624b0176d9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","34067df01cbbefc83d0b316037fe4e10d89ba6a3"],"34067df01cbbefc83d0b316037fe4e10d89ba6a3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["34b5cf63f4ff3d985a7fc828c1a0d1624b0176d9"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["34b5cf63f4ff3d985a7fc828c1a0d1624b0176d9","34067df01cbbefc83d0b316037fe4e10d89ba6a3"],"34b5cf63f4ff3d985a7fc828c1a0d1624b0176d9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"34067df01cbbefc83d0b316037fe4e10d89ba6a3":["34b5cf63f4ff3d985a7fc828c1a0d1624b0176d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}