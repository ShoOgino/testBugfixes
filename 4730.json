{"path":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getSpanQueryScorer(Query,String,TokenStream,SolrQueryRequest).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getSpanQueryScorer(Query,String,TokenStream,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getSpanQueryScorer(Query,String,TokenStream,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Return a {@link org.apache.lucene.search.highlight.QueryScorer} suitable for this Query and field.\n   * @param query The current query\n   * @param tokenStream document text CachingTokenStream\n   * @param fieldName The name of the field\n   * @param request The SolrQueryRequest\n   * @throws IOException \n   */\n  private QueryScorer getSpanQueryScorer(Query query, String fieldName, TokenStream tokenStream, SolrQueryRequest request) throws IOException {\n    boolean reqFieldMatch = request.getParams().getFieldBool(fieldName, HighlightParams.FIELD_MATCH, false);\n    Boolean highlightMultiTerm = request.getParams().getBool(HighlightParams.HIGHLIGHT_MULTI_TERM, true);\n    if(highlightMultiTerm == null) {\n      highlightMultiTerm = false;\n    }\n    QueryScorer scorer;\n    if (reqFieldMatch) {\n      scorer = new QueryScorer(query, fieldName);\n    }\n    else {\n      scorer = new QueryScorer(query, null);\n    }\n    scorer.setExpandMultiTermQuery(highlightMultiTerm);\n    return scorer;\n  }\n\n","sourceOld":"  /**\n   * Return a {@link org.apache.lucene.search.highlight.QueryScorer} suitable for this Query and field.\n   * @param query The current query\n   * @param tokenStream document text CachingTokenStream\n   * @param fieldName The name of the field\n   * @param request The SolrQueryRequest\n   * @throws IOException \n   */\n  private QueryScorer getSpanQueryScorer(Query query, String fieldName, TokenStream tokenStream, SolrQueryRequest request) throws IOException {\n    boolean reqFieldMatch = request.getParams().getFieldBool(fieldName, HighlightParams.FIELD_MATCH, false);\n    Boolean highlightMultiTerm = request.getParams().getBool(HighlightParams.HIGHLIGHT_MULTI_TERM, true);\n    if(highlightMultiTerm == null) {\n      highlightMultiTerm = false;\n    }\n    QueryScorer scorer;\n    if (reqFieldMatch) {\n      scorer = new QueryScorer(query, fieldName);\n    }\n    else {\n      scorer = new QueryScorer(query, null);\n    }\n    scorer.setExpandMultiTermQuery(highlightMultiTerm);\n    return scorer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getSpanQueryScorer(Query,String,TokenStream,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getSpanQueryScorer(Query,String,TokenStream,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Return a {@link org.apache.lucene.search.highlight.QueryScorer} suitable for this Query and field.\n   * @param query The current query\n   * @param tokenStream document text CachingTokenStream\n   * @param fieldName The name of the field\n   * @param request The SolrQueryRequest\n   * @throws IOException \n   */\n  private QueryScorer getSpanQueryScorer(Query query, String fieldName, TokenStream tokenStream, SolrQueryRequest request) throws IOException {\n    boolean reqFieldMatch = request.getParams().getFieldBool(fieldName, HighlightParams.FIELD_MATCH, false);\n    Boolean highlightMultiTerm = request.getParams().getBool(HighlightParams.HIGHLIGHT_MULTI_TERM, true);\n    if(highlightMultiTerm == null) {\n      highlightMultiTerm = false;\n    }\n    QueryScorer scorer;\n    if (reqFieldMatch) {\n      scorer = new QueryScorer(query, fieldName);\n    }\n    else {\n      scorer = new QueryScorer(query, null);\n    }\n    scorer.setExpandMultiTermQuery(highlightMultiTerm);\n    return scorer;\n  }\n\n","sourceOld":"  /**\n   * Return a {@link org.apache.lucene.search.highlight.QueryScorer} suitable for this Query and field.\n   * @param query The current query\n   * @param tokenStream document text CachingTokenStream\n   * @param fieldName The name of the field\n   * @param request The SolrQueryRequest\n   * @throws IOException \n   */\n  private QueryScorer getSpanQueryScorer(Query query, String fieldName, TokenStream tokenStream, SolrQueryRequest request) throws IOException {\n    boolean reqFieldMatch = request.getParams().getFieldBool(fieldName, HighlightParams.FIELD_MATCH, false);\n    Boolean highlightMultiTerm = request.getParams().getBool(HighlightParams.HIGHLIGHT_MULTI_TERM, true);\n    if(highlightMultiTerm == null) {\n      highlightMultiTerm = false;\n    }\n    QueryScorer scorer;\n    if (reqFieldMatch) {\n      scorer = new QueryScorer(query, fieldName);\n    }\n    else {\n      scorer = new QueryScorer(query, null);\n    }\n    scorer.setExpandMultiTermQuery(highlightMultiTerm);\n    return scorer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getSpanQueryScorer(Query,String,TokenStream,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getSpanQueryScorer(Query,String,TokenStream,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Return a {@link org.apache.lucene.search.highlight.QueryScorer} suitable for this Query and field.\n   * @param query The current query\n   * @param tokenStream document text CachingTokenStream\n   * @param fieldName The name of the field\n   * @param request The SolrQueryRequest\n   * @throws IOException \n   */\n  private QueryScorer getSpanQueryScorer(Query query, String fieldName, TokenStream tokenStream, SolrQueryRequest request) throws IOException {\n    boolean reqFieldMatch = request.getParams().getFieldBool(fieldName, HighlightParams.FIELD_MATCH, false);\n    Boolean highlightMultiTerm = request.getParams().getBool(HighlightParams.HIGHLIGHT_MULTI_TERM, true);\n    if(highlightMultiTerm == null) {\n      highlightMultiTerm = false;\n    }\n    QueryScorer scorer;\n    if (reqFieldMatch) {\n      scorer = new QueryScorer(query, fieldName);\n    }\n    else {\n      scorer = new QueryScorer(query, null);\n    }\n    scorer.setExpandMultiTermQuery(highlightMultiTerm);\n    return scorer;\n  }\n\n","sourceOld":"  /**\n   * Return a {@link org.apache.lucene.search.highlight.QueryScorer} suitable for this Query and field.\n   * @param query The current query\n   * @param tokenStream document text CachingTokenStream\n   * @param fieldName The name of the field\n   * @param request The SolrQueryRequest\n   * @throws IOException \n   */\n  private QueryScorer getSpanQueryScorer(Query query, String fieldName, TokenStream tokenStream, SolrQueryRequest request) throws IOException {\n    boolean reqFieldMatch = request.getParams().getFieldBool(fieldName, HighlightParams.FIELD_MATCH, false);\n    Boolean highlightMultiTerm = request.getParams().getBool(HighlightParams.HIGHLIGHT_MULTI_TERM, true);\n    if(highlightMultiTerm == null) {\n      highlightMultiTerm = false;\n    }\n    QueryScorer scorer;\n    if (reqFieldMatch) {\n      scorer = new QueryScorer(query, fieldName);\n    }\n    else {\n      scorer = new QueryScorer(query, null);\n    }\n    scorer.setExpandMultiTermQuery(highlightMultiTerm);\n    return scorer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getSpanQueryScorer(Query,String,TokenStream,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getSpanQueryScorer(Query,String,TokenStream,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Return a {@link org.apache.lucene.search.highlight.QueryScorer} suitable for this Query and field.\n   * @param query The current query\n   * @param tokenStream document text CachingTokenStream\n   * @param fieldName The name of the field\n   * @param request The SolrQueryRequest\n   */\n  private QueryScorer getSpanQueryScorer(Query query, String fieldName, TokenStream tokenStream, SolrQueryRequest request) {\n    boolean reqFieldMatch = request.getParams().getFieldBool(fieldName, HighlightParams.FIELD_MATCH, false);\n    Boolean highlightMultiTerm = request.getParams().getBool(HighlightParams.HIGHLIGHT_MULTI_TERM, true);\n    if(highlightMultiTerm == null) {\n      highlightMultiTerm = false;\n    }\n    QueryScorer scorer;\n    if (reqFieldMatch) {\n      scorer = new QueryScorer(query, fieldName);\n    }\n    else {\n      scorer = new QueryScorer(query, null);\n    }\n    scorer.setExpandMultiTermQuery(highlightMultiTerm);\n    return scorer;\n  }\n\n","sourceOld":"  /**\n   * Return a {@link org.apache.lucene.search.highlight.QueryScorer} suitable for this Query and field.\n   * @param query The current query\n   * @param tokenStream document text CachingTokenStream\n   * @param fieldName The name of the field\n   * @param request The SolrQueryRequest\n   * @throws IOException \n   */\n  private QueryScorer getSpanQueryScorer(Query query, String fieldName, TokenStream tokenStream, SolrQueryRequest request) throws IOException {\n    boolean reqFieldMatch = request.getParams().getFieldBool(fieldName, HighlightParams.FIELD_MATCH, false);\n    Boolean highlightMultiTerm = request.getParams().getBool(HighlightParams.HIGHLIGHT_MULTI_TERM, true);\n    if(highlightMultiTerm == null) {\n      highlightMultiTerm = false;\n    }\n    QueryScorer scorer;\n    if (reqFieldMatch) {\n      scorer = new QueryScorer(query, fieldName);\n    }\n    else {\n      scorer = new QueryScorer(query, null);\n    }\n    scorer.setExpandMultiTermQuery(highlightMultiTerm);\n    return scorer;\n  }\n\n","bugFix":["c20f931a6f10b153366015604398a5eb7a4d17fa","c013889a237f29c0b690ee86faa24c165860f3f8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getSpanQueryScorer(Query,String,TokenStream,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getSpanQueryScorer(Query,String,TokenStream,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Return a {@link org.apache.lucene.search.highlight.QueryScorer} suitable for this Query and field.\n   * @param query The current query\n   * @param tokenStream document text CachingTokenStream\n   * @param fieldName The name of the field\n   * @param request The SolrQueryRequest\n   */\n  private QueryScorer getSpanQueryScorer(Query query, String fieldName, TokenStream tokenStream, SolrQueryRequest request) {\n    boolean reqFieldMatch = request.getParams().getFieldBool(fieldName, HighlightParams.FIELD_MATCH, false);\n    Boolean highlightMultiTerm = request.getParams().getBool(HighlightParams.HIGHLIGHT_MULTI_TERM, true);\n    if(highlightMultiTerm == null) {\n      highlightMultiTerm = false;\n    }\n    QueryScorer scorer;\n    if (reqFieldMatch) {\n      scorer = new QueryScorer(query, fieldName);\n    }\n    else {\n      scorer = new QueryScorer(query, null);\n    }\n    scorer.setExpandMultiTermQuery(highlightMultiTerm);\n    return scorer;\n  }\n\n","sourceOld":"  /**\n   * Return a {@link org.apache.lucene.search.highlight.QueryScorer} suitable for this Query and field.\n   * @param query The current query\n   * @param tokenStream document text CachingTokenStream\n   * @param fieldName The name of the field\n   * @param request The SolrQueryRequest\n   * @throws IOException \n   */\n  private QueryScorer getSpanQueryScorer(Query query, String fieldName, TokenStream tokenStream, SolrQueryRequest request) throws IOException {\n    boolean reqFieldMatch = request.getParams().getFieldBool(fieldName, HighlightParams.FIELD_MATCH, false);\n    Boolean highlightMultiTerm = request.getParams().getBool(HighlightParams.HIGHLIGHT_MULTI_TERM, true);\n    if(highlightMultiTerm == null) {\n      highlightMultiTerm = false;\n    }\n    QueryScorer scorer;\n    if (reqFieldMatch) {\n      scorer = new QueryScorer(query, fieldName);\n    }\n    else {\n      scorer = new QueryScorer(query, null);\n    }\n    scorer.setExpandMultiTermQuery(highlightMultiTerm);\n    return scorer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cad4d876350c7790594c78dc3c3fb1718bf06dc7","date":1417321437,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getSpanQueryScorer(Query,String,TokenStream,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getSpanQueryScorer(Query,String,TokenStream,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Return a {@link org.apache.lucene.search.highlight.QueryScorer} suitable for this Query and field.\n   * @param query The current query\n   * @param tokenStream document text tokenStream that implements reset() efficiently (e.g. CachingTokenFilter).\n   *                    If it's used, call reset() first.\n   * @param fieldName The name of the field\n   * @param request The SolrQueryRequest\n   */\n  private QueryScorer getSpanQueryScorer(Query query, String fieldName, TokenStream tokenStream, SolrQueryRequest request) {\n    boolean reqFieldMatch = request.getParams().getFieldBool(fieldName, HighlightParams.FIELD_MATCH, false);\n    boolean highlightMultiTerm = request.getParams().getBool(HighlightParams.HIGHLIGHT_MULTI_TERM, true);\n    QueryScorer scorer;\n    if (reqFieldMatch) {\n      scorer = new QueryScorer(query, fieldName);\n    }\n    else {\n      scorer = new QueryScorer(query, null);\n    }\n    scorer.setExpandMultiTermQuery(highlightMultiTerm);\n    return scorer;\n  }\n\n","sourceOld":"  /**\n   * Return a {@link org.apache.lucene.search.highlight.QueryScorer} suitable for this Query and field.\n   * @param query The current query\n   * @param tokenStream document text CachingTokenStream\n   * @param fieldName The name of the field\n   * @param request The SolrQueryRequest\n   */\n  private QueryScorer getSpanQueryScorer(Query query, String fieldName, TokenStream tokenStream, SolrQueryRequest request) {\n    boolean reqFieldMatch = request.getParams().getFieldBool(fieldName, HighlightParams.FIELD_MATCH, false);\n    Boolean highlightMultiTerm = request.getParams().getBool(HighlightParams.HIGHLIGHT_MULTI_TERM, true);\n    if(highlightMultiTerm == null) {\n      highlightMultiTerm = false;\n    }\n    QueryScorer scorer;\n    if (reqFieldMatch) {\n      scorer = new QueryScorer(query, fieldName);\n    }\n    else {\n      scorer = new QueryScorer(query, null);\n    }\n    scorer.setExpandMultiTermQuery(highlightMultiTerm);\n    return scorer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a7ab38c291565c0fabdbd2946cd2f614dea29ff","date":1421069415,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getSpanQueryScorer(Query,String,TokenStream,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getSpanQueryScorer(Query,String,TokenStream,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Return a {@link org.apache.lucene.search.highlight.QueryScorer} suitable for this Query and field.\n   * @param query The current query\n   * @param tokenStream document text tokenStream that implements reset() efficiently (e.g. CachingTokenFilter).\n   *                    If it's used, call reset() first.\n   * @param fieldName The name of the field\n   * @param request The SolrQueryRequest\n   */\n  private QueryScorer getSpanQueryScorer(Query query, String fieldName, TokenStream tokenStream, SolrQueryRequest request) {\n    QueryScorer scorer = new QueryScorer(query,\n        request.getParams().getFieldBool(fieldName, HighlightParams.FIELD_MATCH, false) ? fieldName : null);\n    scorer.setExpandMultiTermQuery(request.getParams().getBool(HighlightParams.HIGHLIGHT_MULTI_TERM, true));\n    scorer.setUsePayloads(request.getParams().getFieldBool(fieldName, HighlightParams.PAYLOADS,\n        request.getSearcher().getLeafReader().getFieldInfos().fieldInfo(fieldName).hasPayloads()));\n    return scorer;\n  }\n\n","sourceOld":"  /**\n   * Return a {@link org.apache.lucene.search.highlight.QueryScorer} suitable for this Query and field.\n   * @param query The current query\n   * @param tokenStream document text tokenStream that implements reset() efficiently (e.g. CachingTokenFilter).\n   *                    If it's used, call reset() first.\n   * @param fieldName The name of the field\n   * @param request The SolrQueryRequest\n   */\n  private QueryScorer getSpanQueryScorer(Query query, String fieldName, TokenStream tokenStream, SolrQueryRequest request) {\n    boolean reqFieldMatch = request.getParams().getFieldBool(fieldName, HighlightParams.FIELD_MATCH, false);\n    boolean highlightMultiTerm = request.getParams().getBool(HighlightParams.HIGHLIGHT_MULTI_TERM, true);\n    QueryScorer scorer;\n    if (reqFieldMatch) {\n      scorer = new QueryScorer(query, fieldName);\n    }\n    else {\n      scorer = new QueryScorer(query, null);\n    }\n    scorer.setExpandMultiTermQuery(highlightMultiTerm);\n    return scorer;\n  }\n\n","bugFix":null,"bugIntro":["b63ecfdb35f46a7d60ef0c9a17844dfd3a6a8cb4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"12aef50f649e6f5f9689970748f96e3f1ca6104e","date":1428932135,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getSpanQueryScorer(Query,String,TokenStream,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getSpanQueryScorer(Query,String,TokenStream,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Return a {@link org.apache.lucene.search.highlight.QueryScorer} suitable for this Query and field.\n   * @param query The current query\n   * @param tokenStream document text tokenStream that implements reset() efficiently (e.g. CachingTokenFilter).\n   *                    If it's used, call reset() first.\n   * @param fieldName The name of the field\n   * @param request The SolrQueryRequest\n   */\n  protected QueryScorer getSpanQueryScorer(Query query, String fieldName, TokenStream tokenStream, SolrQueryRequest request) {\n    QueryScorer scorer = new QueryScorer(query,\n        request.getParams().getFieldBool(fieldName, HighlightParams.FIELD_MATCH, false) ? fieldName : null);\n    scorer.setExpandMultiTermQuery(request.getParams().getBool(HighlightParams.HIGHLIGHT_MULTI_TERM, true));\n    scorer.setUsePayloads(request.getParams().getFieldBool(fieldName, HighlightParams.PAYLOADS,\n        request.getSearcher().getLeafReader().getFieldInfos().fieldInfo(fieldName).hasPayloads()));\n    return scorer;\n  }\n\n","sourceOld":"  /**\n   * Return a {@link org.apache.lucene.search.highlight.QueryScorer} suitable for this Query and field.\n   * @param query The current query\n   * @param tokenStream document text tokenStream that implements reset() efficiently (e.g. CachingTokenFilter).\n   *                    If it's used, call reset() first.\n   * @param fieldName The name of the field\n   * @param request The SolrQueryRequest\n   */\n  private QueryScorer getSpanQueryScorer(Query query, String fieldName, TokenStream tokenStream, SolrQueryRequest request) {\n    QueryScorer scorer = new QueryScorer(query,\n        request.getParams().getFieldBool(fieldName, HighlightParams.FIELD_MATCH, false) ? fieldName : null);\n    scorer.setExpandMultiTermQuery(request.getParams().getBool(HighlightParams.HIGHLIGHT_MULTI_TERM, true));\n    scorer.setUsePayloads(request.getParams().getFieldBool(fieldName, HighlightParams.PAYLOADS,\n        request.getSearcher().getLeafReader().getFieldInfos().fieldInfo(fieldName).hasPayloads()));\n    return scorer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b63ecfdb35f46a7d60ef0c9a17844dfd3a6a8cb4","date":1433940876,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getSpanQueryScorer(Query,String,TokenStream,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getSpanQueryScorer(Query,String,TokenStream,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Return a {@link org.apache.lucene.search.highlight.QueryScorer} suitable for this Query and field.\n   * @param query The current query\n   * @param tokenStream document text tokenStream that implements reset() efficiently (e.g. CachingTokenFilter).\n   *                    If it's used, call reset() first.\n   * @param fieldName The name of the field\n   * @param request The SolrQueryRequest\n   */\n  protected QueryScorer getSpanQueryScorer(Query query, String fieldName, TokenStream tokenStream, SolrQueryRequest request) {\n    QueryScorer scorer = new QueryScorer(query,\n        request.getParams().getFieldBool(fieldName, HighlightParams.FIELD_MATCH, false) ? fieldName : null);\n    scorer.setExpandMultiTermQuery(request.getParams().getBool(HighlightParams.HIGHLIGHT_MULTI_TERM, true));\n\n    boolean defaultPayloads = true;//overwritten below\n    try {\n      // It'd be nice to know if payloads are on the tokenStream but the presence of the attribute isn't a good\n      // indicator.\n      final Terms terms = request.getSearcher().getLeafReader().fields().terms(fieldName);\n      if (terms != null) {\n        defaultPayloads = terms.hasPayloads();\n      }\n    } catch (IOException e) {\n      log.error(\"Couldn't check for existence of payloads\", e);\n    }\n    scorer.setUsePayloads(request.getParams().getFieldBool(fieldName, HighlightParams.PAYLOADS, defaultPayloads));\n    return scorer;\n  }\n\n","sourceOld":"  /**\n   * Return a {@link org.apache.lucene.search.highlight.QueryScorer} suitable for this Query and field.\n   * @param query The current query\n   * @param tokenStream document text tokenStream that implements reset() efficiently (e.g. CachingTokenFilter).\n   *                    If it's used, call reset() first.\n   * @param fieldName The name of the field\n   * @param request The SolrQueryRequest\n   */\n  protected QueryScorer getSpanQueryScorer(Query query, String fieldName, TokenStream tokenStream, SolrQueryRequest request) {\n    QueryScorer scorer = new QueryScorer(query,\n        request.getParams().getFieldBool(fieldName, HighlightParams.FIELD_MATCH, false) ? fieldName : null);\n    scorer.setExpandMultiTermQuery(request.getParams().getBool(HighlightParams.HIGHLIGHT_MULTI_TERM, true));\n    scorer.setUsePayloads(request.getParams().getFieldBool(fieldName, HighlightParams.PAYLOADS,\n        request.getSearcher().getLeafReader().getFieldInfos().fieldInfo(fieldName).hasPayloads()));\n    return scorer;\n  }\n\n","bugFix":["4a7ab38c291565c0fabdbd2946cd2f614dea29ff"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e07c409cff8701e4dc3d45934b021a949a5a8822","date":1475694629,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getSpanQueryScorer(Query,String,TokenStream,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getSpanQueryScorer(Query,String,TokenStream,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Return a {@link org.apache.lucene.search.highlight.QueryScorer} suitable for this Query and field.\n   * @param query The current query\n   * @param tokenStream document text tokenStream that implements reset() efficiently (e.g. CachingTokenFilter).\n   *                    If it's used, call reset() first.\n   * @param fieldName The name of the field\n   * @param request The SolrQueryRequest\n   */\n  protected QueryScorer getSpanQueryScorer(Query query, String fieldName, TokenStream tokenStream, SolrQueryRequest request) {\n    QueryScorer scorer = new QueryScorer(query,\n        request.getParams().getFieldBool(fieldName, HighlightParams.FIELD_MATCH, false) ? fieldName : null);\n    scorer.setExpandMultiTermQuery(request.getParams().getBool(HighlightParams.HIGHLIGHT_MULTI_TERM, true));\n\n    boolean defaultPayloads = true;//overwritten below\n    try {\n      // It'd be nice to know if payloads are on the tokenStream but the presence of the attribute isn't a good\n      // indicator.\n      final Terms terms = request.getSearcher().getSlowAtomicReader().fields().terms(fieldName);\n      if (terms != null) {\n        defaultPayloads = terms.hasPayloads();\n      }\n    } catch (IOException e) {\n      log.error(\"Couldn't check for existence of payloads\", e);\n    }\n    scorer.setUsePayloads(request.getParams().getFieldBool(fieldName, HighlightParams.PAYLOADS, defaultPayloads));\n    return scorer;\n  }\n\n","sourceOld":"  /**\n   * Return a {@link org.apache.lucene.search.highlight.QueryScorer} suitable for this Query and field.\n   * @param query The current query\n   * @param tokenStream document text tokenStream that implements reset() efficiently (e.g. CachingTokenFilter).\n   *                    If it's used, call reset() first.\n   * @param fieldName The name of the field\n   * @param request The SolrQueryRequest\n   */\n  protected QueryScorer getSpanQueryScorer(Query query, String fieldName, TokenStream tokenStream, SolrQueryRequest request) {\n    QueryScorer scorer = new QueryScorer(query,\n        request.getParams().getFieldBool(fieldName, HighlightParams.FIELD_MATCH, false) ? fieldName : null);\n    scorer.setExpandMultiTermQuery(request.getParams().getBool(HighlightParams.HIGHLIGHT_MULTI_TERM, true));\n\n    boolean defaultPayloads = true;//overwritten below\n    try {\n      // It'd be nice to know if payloads are on the tokenStream but the presence of the attribute isn't a good\n      // indicator.\n      final Terms terms = request.getSearcher().getLeafReader().fields().terms(fieldName);\n      if (terms != null) {\n        defaultPayloads = terms.hasPayloads();\n      }\n    } catch (IOException e) {\n      log.error(\"Couldn't check for existence of payloads\", e);\n    }\n    scorer.setUsePayloads(request.getParams().getFieldBool(fieldName, HighlightParams.PAYLOADS, defaultPayloads));\n    return scorer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getSpanQueryScorer(Query,String,TokenStream,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getSpanQueryScorer(Query,String,TokenStream,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Return a {@link org.apache.lucene.search.highlight.QueryScorer} suitable for this Query and field.\n   * @param query The current query\n   * @param tokenStream document text tokenStream that implements reset() efficiently (e.g. CachingTokenFilter).\n   *                    If it's used, call reset() first.\n   * @param fieldName The name of the field\n   * @param request The SolrQueryRequest\n   */\n  protected QueryScorer getSpanQueryScorer(Query query, String fieldName, TokenStream tokenStream, SolrQueryRequest request) {\n    QueryScorer scorer = new QueryScorer(query,\n        request.getParams().getFieldBool(fieldName, HighlightParams.FIELD_MATCH, false) ? fieldName : null);\n    scorer.setExpandMultiTermQuery(request.getParams().getBool(HighlightParams.HIGHLIGHT_MULTI_TERM, true));\n\n    boolean defaultPayloads = true;//overwritten below\n    try {\n      // It'd be nice to know if payloads are on the tokenStream but the presence of the attribute isn't a good\n      // indicator.\n      final Terms terms = request.getSearcher().getSlowAtomicReader().fields().terms(fieldName);\n      if (terms != null) {\n        defaultPayloads = terms.hasPayloads();\n      }\n    } catch (IOException e) {\n      log.error(\"Couldn't check for existence of payloads\", e);\n    }\n    scorer.setUsePayloads(request.getParams().getFieldBool(fieldName, HighlightParams.PAYLOADS, defaultPayloads));\n    return scorer;\n  }\n\n","sourceOld":"  /**\n   * Return a {@link org.apache.lucene.search.highlight.QueryScorer} suitable for this Query and field.\n   * @param query The current query\n   * @param tokenStream document text tokenStream that implements reset() efficiently (e.g. CachingTokenFilter).\n   *                    If it's used, call reset() first.\n   * @param fieldName The name of the field\n   * @param request The SolrQueryRequest\n   */\n  protected QueryScorer getSpanQueryScorer(Query query, String fieldName, TokenStream tokenStream, SolrQueryRequest request) {\n    QueryScorer scorer = new QueryScorer(query,\n        request.getParams().getFieldBool(fieldName, HighlightParams.FIELD_MATCH, false) ? fieldName : null);\n    scorer.setExpandMultiTermQuery(request.getParams().getBool(HighlightParams.HIGHLIGHT_MULTI_TERM, true));\n\n    boolean defaultPayloads = true;//overwritten below\n    try {\n      // It'd be nice to know if payloads are on the tokenStream but the presence of the attribute isn't a good\n      // indicator.\n      final Terms terms = request.getSearcher().getLeafReader().fields().terms(fieldName);\n      if (terms != null) {\n        defaultPayloads = terms.hasPayloads();\n      }\n    } catch (IOException e) {\n      log.error(\"Couldn't check for existence of payloads\", e);\n    }\n    scorer.setUsePayloads(request.getParams().getFieldBool(fieldName, HighlightParams.PAYLOADS, defaultPayloads));\n    return scorer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b","date":1497408244,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getSpanQueryScorer(Query,String,TokenStream,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getSpanQueryScorer(Query,String,TokenStream,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Return a {@link org.apache.lucene.search.highlight.QueryScorer} suitable for this Query and field.\n   * @param query The current query\n   * @param tokenStream document text tokenStream that implements reset() efficiently (e.g. CachingTokenFilter).\n   *                    If it's used, call reset() first.\n   * @param fieldName The name of the field\n   * @param request The SolrQueryRequest\n   */\n  protected QueryScorer getSpanQueryScorer(Query query, String fieldName, TokenStream tokenStream, SolrQueryRequest request) {\n    QueryScorer scorer = new QueryScorer(query,\n        request.getParams().getFieldBool(fieldName, HighlightParams.FIELD_MATCH, false) ? fieldName : null);\n    scorer.setExpandMultiTermQuery(request.getParams().getBool(HighlightParams.HIGHLIGHT_MULTI_TERM, true));\n\n    boolean defaultPayloads = true;//overwritten below\n    try {\n      // It'd be nice to know if payloads are on the tokenStream but the presence of the attribute isn't a good\n      // indicator.\n      final Terms terms = request.getSearcher().getSlowAtomicReader().terms(fieldName);\n      if (terms != null) {\n        defaultPayloads = terms.hasPayloads();\n      }\n    } catch (IOException e) {\n      log.error(\"Couldn't check for existence of payloads\", e);\n    }\n    scorer.setUsePayloads(request.getParams().getFieldBool(fieldName, HighlightParams.PAYLOADS, defaultPayloads));\n    return scorer;\n  }\n\n","sourceOld":"  /**\n   * Return a {@link org.apache.lucene.search.highlight.QueryScorer} suitable for this Query and field.\n   * @param query The current query\n   * @param tokenStream document text tokenStream that implements reset() efficiently (e.g. CachingTokenFilter).\n   *                    If it's used, call reset() first.\n   * @param fieldName The name of the field\n   * @param request The SolrQueryRequest\n   */\n  protected QueryScorer getSpanQueryScorer(Query query, String fieldName, TokenStream tokenStream, SolrQueryRequest request) {\n    QueryScorer scorer = new QueryScorer(query,\n        request.getParams().getFieldBool(fieldName, HighlightParams.FIELD_MATCH, false) ? fieldName : null);\n    scorer.setExpandMultiTermQuery(request.getParams().getBool(HighlightParams.HIGHLIGHT_MULTI_TERM, true));\n\n    boolean defaultPayloads = true;//overwritten below\n    try {\n      // It'd be nice to know if payloads are on the tokenStream but the presence of the attribute isn't a good\n      // indicator.\n      final Terms terms = request.getSearcher().getSlowAtomicReader().fields().terms(fieldName);\n      if (terms != null) {\n        defaultPayloads = terms.hasPayloads();\n      }\n    } catch (IOException e) {\n      log.error(\"Couldn't check for existence of payloads\", e);\n    }\n    scorer.setUsePayloads(request.getParams().getFieldBool(fieldName, HighlightParams.PAYLOADS, defaultPayloads));\n    return scorer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getSpanQueryScorer(Query,String,TokenStream,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getSpanQueryScorer(Query,String,TokenStream,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Return a {@link org.apache.lucene.search.highlight.QueryScorer} suitable for this Query and field.\n   * @param query The current query\n   * @param tokenStream document text tokenStream that implements reset() efficiently (e.g. CachingTokenFilter).\n   *                    If it's used, call reset() first.\n   * @param fieldName The name of the field\n   * @param request The SolrQueryRequest\n   */\n  protected QueryScorer getSpanQueryScorer(Query query, String fieldName, TokenStream tokenStream, SolrQueryRequest request) {\n    QueryScorer scorer = new QueryScorer(query,\n        request.getParams().getFieldBool(fieldName, HighlightParams.FIELD_MATCH, false) ? fieldName : null);\n    scorer.setExpandMultiTermQuery(request.getParams().getBool(HighlightParams.HIGHLIGHT_MULTI_TERM, true));\n\n    boolean defaultPayloads = true;//overwritten below\n    try {\n      // It'd be nice to know if payloads are on the tokenStream but the presence of the attribute isn't a good\n      // indicator.\n      final Terms terms = request.getSearcher().getSlowAtomicReader().terms(fieldName);\n      if (terms != null) {\n        defaultPayloads = terms.hasPayloads();\n      }\n    } catch (IOException e) {\n      log.error(\"Couldn't check for existence of payloads\", e);\n    }\n    scorer.setUsePayloads(request.getParams().getFieldBool(fieldName, HighlightParams.PAYLOADS, defaultPayloads));\n    return scorer;\n  }\n\n","sourceOld":"  /**\n   * Return a {@link org.apache.lucene.search.highlight.QueryScorer} suitable for this Query and field.\n   * @param query The current query\n   * @param tokenStream document text tokenStream that implements reset() efficiently (e.g. CachingTokenFilter).\n   *                    If it's used, call reset() first.\n   * @param fieldName The name of the field\n   * @param request The SolrQueryRequest\n   */\n  protected QueryScorer getSpanQueryScorer(Query query, String fieldName, TokenStream tokenStream, SolrQueryRequest request) {\n    QueryScorer scorer = new QueryScorer(query,\n        request.getParams().getFieldBool(fieldName, HighlightParams.FIELD_MATCH, false) ? fieldName : null);\n    scorer.setExpandMultiTermQuery(request.getParams().getBool(HighlightParams.HIGHLIGHT_MULTI_TERM, true));\n\n    boolean defaultPayloads = true;//overwritten below\n    try {\n      // It'd be nice to know if payloads are on the tokenStream but the presence of the attribute isn't a good\n      // indicator.\n      final Terms terms = request.getSearcher().getSlowAtomicReader().fields().terms(fieldName);\n      if (terms != null) {\n        defaultPayloads = terms.hasPayloads();\n      }\n    } catch (IOException e) {\n      log.error(\"Couldn't check for existence of payloads\", e);\n    }\n    scorer.setUsePayloads(request.getParams().getFieldBool(fieldName, HighlightParams.PAYLOADS, defaultPayloads));\n    return scorer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getSpanQueryScorer(Query,String,TokenStream,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getSpanQueryScorer(Query,String,TokenStream,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Return a {@link org.apache.lucene.search.highlight.QueryScorer} suitable for this Query and field.\n   * @param query The current query\n   * @param tokenStream document text tokenStream that implements reset() efficiently (e.g. CachingTokenFilter).\n   *                    If it's used, call reset() first.\n   * @param fieldName The name of the field\n   * @param request The SolrQueryRequest\n   */\n  protected QueryScorer getSpanQueryScorer(Query query, String fieldName, TokenStream tokenStream, SolrQueryRequest request) {\n    QueryScorer scorer = new QueryScorer(query,\n        request.getParams().getFieldBool(fieldName, HighlightParams.FIELD_MATCH, false) ? fieldName : null);\n    scorer.setExpandMultiTermQuery(request.getParams().getBool(HighlightParams.HIGHLIGHT_MULTI_TERM, true));\n\n    boolean defaultPayloads = true;//overwritten below\n    try {\n      // It'd be nice to know if payloads are on the tokenStream but the presence of the attribute isn't a good\n      // indicator.\n      final Terms terms = request.getSearcher().getSlowAtomicReader().terms(fieldName);\n      if (terms != null) {\n        defaultPayloads = terms.hasPayloads();\n      }\n    } catch (IOException e) {\n      log.error(\"Couldn't check for existence of payloads\", e);\n    }\n    scorer.setUsePayloads(request.getParams().getFieldBool(fieldName, HighlightParams.PAYLOADS, defaultPayloads));\n    return scorer;\n  }\n\n","sourceOld":"  /**\n   * Return a {@link org.apache.lucene.search.highlight.QueryScorer} suitable for this Query and field.\n   * @param query The current query\n   * @param tokenStream document text tokenStream that implements reset() efficiently (e.g. CachingTokenFilter).\n   *                    If it's used, call reset() first.\n   * @param fieldName The name of the field\n   * @param request The SolrQueryRequest\n   */\n  protected QueryScorer getSpanQueryScorer(Query query, String fieldName, TokenStream tokenStream, SolrQueryRequest request) {\n    QueryScorer scorer = new QueryScorer(query,\n        request.getParams().getFieldBool(fieldName, HighlightParams.FIELD_MATCH, false) ? fieldName : null);\n    scorer.setExpandMultiTermQuery(request.getParams().getBool(HighlightParams.HIGHLIGHT_MULTI_TERM, true));\n\n    boolean defaultPayloads = true;//overwritten below\n    try {\n      // It'd be nice to know if payloads are on the tokenStream but the presence of the attribute isn't a good\n      // indicator.\n      final Terms terms = request.getSearcher().getSlowAtomicReader().fields().terms(fieldName);\n      if (terms != null) {\n        defaultPayloads = terms.hasPayloads();\n      }\n    } catch (IOException e) {\n      log.error(\"Couldn't check for existence of payloads\", e);\n    }\n    scorer.setUsePayloads(request.getParams().getFieldBool(fieldName, HighlightParams.PAYLOADS, defaultPayloads));\n    return scorer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"944feda4f2ab2e2de62f308b3cbb6ba6953902ef","date":1539867181,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getSpanQueryScorer(Query,String,TokenStream,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getSpanQueryScorer(Query,String,TokenStream,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Return a {@link org.apache.lucene.search.highlight.QueryScorer} suitable for this Query and field.\n   * @param query The current query\n   * @param tokenStream document text tokenStream that implements reset() efficiently (e.g. CachingTokenFilter).\n   *                    If it's used, call reset() first.\n   * @param fieldName The name of the field\n   * @param request The SolrQueryRequest\n   */\n  protected QueryScorer getSpanQueryScorer(Query query, String fieldName, TokenStream tokenStream, SolrQueryRequest request) {\n    QueryScorer scorer = new QueryScorer(query,\n        request.getParams().getFieldBool(fieldName, HighlightParams.FIELD_MATCH, false) ? fieldName : null) {\n      @Override\n      protected WeightedSpanTermExtractor newTermExtractor(String defaultField) {\n        return new CustomSpanTermExtractor(defaultField);\n      }\n    };\n    scorer.setExpandMultiTermQuery(request.getParams().getBool(HighlightParams.HIGHLIGHT_MULTI_TERM, true));\n\n    boolean defaultPayloads = true;//overwritten below\n    try {\n      // It'd be nice to know if payloads are on the tokenStream but the presence of the attribute isn't a good\n      // indicator.\n      final Terms terms = request.getSearcher().getSlowAtomicReader().terms(fieldName);\n      if (terms != null) {\n        defaultPayloads = terms.hasPayloads();\n      }\n    } catch (IOException e) {\n      log.error(\"Couldn't check for existence of payloads\", e);\n    }\n    scorer.setUsePayloads(request.getParams().getFieldBool(fieldName, HighlightParams.PAYLOADS, defaultPayloads));\n    return scorer;\n  }\n\n","sourceOld":"  /**\n   * Return a {@link org.apache.lucene.search.highlight.QueryScorer} suitable for this Query and field.\n   * @param query The current query\n   * @param tokenStream document text tokenStream that implements reset() efficiently (e.g. CachingTokenFilter).\n   *                    If it's used, call reset() first.\n   * @param fieldName The name of the field\n   * @param request The SolrQueryRequest\n   */\n  protected QueryScorer getSpanQueryScorer(Query query, String fieldName, TokenStream tokenStream, SolrQueryRequest request) {\n    QueryScorer scorer = new QueryScorer(query,\n        request.getParams().getFieldBool(fieldName, HighlightParams.FIELD_MATCH, false) ? fieldName : null);\n    scorer.setExpandMultiTermQuery(request.getParams().getBool(HighlightParams.HIGHLIGHT_MULTI_TERM, true));\n\n    boolean defaultPayloads = true;//overwritten below\n    try {\n      // It'd be nice to know if payloads are on the tokenStream but the presence of the attribute isn't a good\n      // indicator.\n      final Terms terms = request.getSearcher().getSlowAtomicReader().terms(fieldName);\n      if (terms != null) {\n        defaultPayloads = terms.hasPayloads();\n      }\n    } catch (IOException e) {\n      log.error(\"Couldn't check for existence of payloads\", e);\n    }\n    scorer.setUsePayloads(request.getParams().getFieldBool(fieldName, HighlightParams.PAYLOADS, defaultPayloads));\n    return scorer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getSpanQueryScorer(Query,String,TokenStream,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getSpanQueryScorer(Query,String,TokenStream,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Return a {@link org.apache.lucene.search.highlight.QueryScorer} suitable for this Query and field.\n   *\n   * @param query       The current query\n   * @param tokenStream document text tokenStream that implements reset() efficiently (e.g. CachingTokenFilter).\n   *                    If it's used, call reset() first.\n   * @param fieldName   The name of the field\n   * @param request     The SolrQueryRequest\n   */\n  protected QueryScorer getSpanQueryScorer(Query query, String fieldName, TokenStream tokenStream, SolrQueryRequest request) {\n    QueryScorer scorer = new QueryScorer(query,\n            request.getParams().getFieldBool(fieldName, HighlightParams.FIELD_MATCH, false) ? fieldName : null) {\n      @Override\n      protected WeightedSpanTermExtractor newTermExtractor(String defaultField) {\n        return new CustomSpanTermExtractor(defaultField);\n      }\n    };\n    scorer.setExpandMultiTermQuery(request.getParams().getBool(HighlightParams.HIGHLIGHT_MULTI_TERM, true));\n\n    boolean defaultPayloads = true;//overwritten below\n    try {\n      // It'd be nice to know if payloads are on the tokenStream but the presence of the attribute isn't a good\n      // indicator.\n      final Terms terms = request.getSearcher().getSlowAtomicReader().terms(fieldName);\n      if (terms != null) {\n        defaultPayloads = terms.hasPayloads();\n      }\n    } catch (IOException e) {\n      log.error(\"Couldn't check for existence of payloads\", e);\n    }\n    scorer.setUsePayloads(request.getParams().getFieldBool(fieldName, HighlightParams.PAYLOADS, defaultPayloads));\n    return scorer;\n  }\n\n","sourceOld":"  /**\n   * Return a {@link org.apache.lucene.search.highlight.QueryScorer} suitable for this Query and field.\n   * @param query The current query\n   * @param tokenStream document text tokenStream that implements reset() efficiently (e.g. CachingTokenFilter).\n   *                    If it's used, call reset() first.\n   * @param fieldName The name of the field\n   * @param request The SolrQueryRequest\n   */\n  protected QueryScorer getSpanQueryScorer(Query query, String fieldName, TokenStream tokenStream, SolrQueryRequest request) {\n    QueryScorer scorer = new QueryScorer(query,\n        request.getParams().getFieldBool(fieldName, HighlightParams.FIELD_MATCH, false) ? fieldName : null) {\n      @Override\n      protected WeightedSpanTermExtractor newTermExtractor(String defaultField) {\n        return new CustomSpanTermExtractor(defaultField);\n      }\n    };\n    scorer.setExpandMultiTermQuery(request.getParams().getBool(HighlightParams.HIGHLIGHT_MULTI_TERM, true));\n\n    boolean defaultPayloads = true;//overwritten below\n    try {\n      // It'd be nice to know if payloads are on the tokenStream but the presence of the attribute isn't a good\n      // indicator.\n      final Terms terms = request.getSearcher().getSlowAtomicReader().terms(fieldName);\n      if (terms != null) {\n        defaultPayloads = terms.hasPayloads();\n      }\n    } catch (IOException e) {\n      log.error(\"Couldn't check for existence of payloads\", e);\n    }\n    scorer.setUsePayloads(request.getParams().getFieldBool(fieldName, HighlightParams.PAYLOADS, defaultPayloads));\n    return scorer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b63ecfdb35f46a7d60ef0c9a17844dfd3a6a8cb4":["12aef50f649e6f5f9689970748f96e3f1ca6104e"],"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b":["e07c409cff8701e4dc3d45934b021a949a5a8822"],"cad4d876350c7790594c78dc3c3fb1718bf06dc7":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"12aef50f649e6f5f9689970748f96e3f1ca6104e":["4a7ab38c291565c0fabdbd2946cd2f614dea29ff"],"e07c409cff8701e4dc3d45934b021a949a5a8822":["b63ecfdb35f46a7d60ef0c9a17844dfd3a6a8cb4"],"28288370235ed02234a64753cdbf0c6ec096304a":["e07c409cff8701e4dc3d45934b021a949a5a8822","e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b63ecfdb35f46a7d60ef0c9a17844dfd3a6a8cb4","e07c409cff8701e4dc3d45934b021a949a5a8822"],"4a7ab38c291565c0fabdbd2946cd2f614dea29ff":["cad4d876350c7790594c78dc3c3fb1718bf06dc7"],"944feda4f2ab2e2de62f308b3cbb6ba6953902ef":["28288370235ed02234a64753cdbf0c6ec096304a"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["944feda4f2ab2e2de62f308b3cbb6ba6953902ef"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c26f00b574427b55127e869b935845554afde1fa","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["c26f00b574427b55127e869b935845554afde1fa"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["e07c409cff8701e4dc3d45934b021a949a5a8822","e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"]},"commit2Childs":{"b63ecfdb35f46a7d60ef0c9a17844dfd3a6a8cb4":["e07c409cff8701e4dc3d45934b021a949a5a8822","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"cad4d876350c7790594c78dc3c3fb1718bf06dc7":["4a7ab38c291565c0fabdbd2946cd2f614dea29ff"],"c26f00b574427b55127e869b935845554afde1fa":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"12aef50f649e6f5f9689970748f96e3f1ca6104e":["b63ecfdb35f46a7d60ef0c9a17844dfd3a6a8cb4"],"e07c409cff8701e4dc3d45934b021a949a5a8822":["e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b","28288370235ed02234a64753cdbf0c6ec096304a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["944feda4f2ab2e2de62f308b3cbb6ba6953902ef"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"4a7ab38c291565c0fabdbd2946cd2f614dea29ff":["12aef50f649e6f5f9689970748f96e3f1ca6104e"],"944feda4f2ab2e2de62f308b3cbb6ba6953902ef":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["cad4d876350c7790594c78dc3c3fb1718bf06dc7","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}