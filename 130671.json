{"path":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered#docSpansOrdered(Spans,Spans).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered#docSpansOrdered(Spans,Spans).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/NearSpansOrdered#docSpansOrdered(Spans,Spans).mjava","sourceNew":"  /** Check whether two Spans in the same document are ordered.\n   * @param spans1 \n   * @param spans2 \n   * @return true iff spans1 starts before spans2\n   *              or the spans start at the same position,\n   *              and spans1 ends before spans2.\n   */\n  static final boolean docSpansOrdered(Spans spans1, Spans spans2) {\n    assert spans1.doc() == spans2.doc() : \"doc1 \" + spans1.doc() + \" != doc2 \" + spans2.doc();\n    int start1 = spans1.start();\n    int start2 = spans2.start();\n    /* Do not call docSpansOrdered(int,int,int,int) to avoid invoking .end() : */\n    return (start1 == start2) ? (spans1.end() < spans2.end()) : (start1 < start2);\n  }\n\n","sourceOld":"  /** Check whether two Spans in the same document are ordered.\n   * @param spans1 \n   * @param spans2 \n   * @return true iff spans1 starts before spans2\n   *              or the spans start at the same position,\n   *              and spans1 ends before spans2.\n   */\n  static final boolean docSpansOrdered(Spans spans1, Spans spans2) {\n    assert spans1.doc() == spans2.doc() : \"doc1 \" + spans1.doc() + \" != doc2 \" + spans2.doc();\n    int start1 = spans1.start();\n    int start2 = spans2.start();\n    /* Do not call docSpansOrdered(int,int,int,int) to avoid invoking .end() : */\n    return (start1 == start2) ? (spans1.end() < spans2.end()) : (start1 < start2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered#docSpansOrdered(Spans,Spans).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered#docSpansOrdered(Spans,Spans).mjava","sourceNew":"  /** Check whether two Spans in the same document are ordered.\n   * @return true iff spans1 starts before spans2\n   *              or the spans start at the same position,\n   *              and spans1 ends before spans2.\n   */\n  static final boolean docSpansOrdered(Spans spans1, Spans spans2) {\n    assert spans1.doc() == spans2.doc() : \"doc1 \" + spans1.doc() + \" != doc2 \" + spans2.doc();\n    int start1 = spans1.start();\n    int start2 = spans2.start();\n    /* Do not call docSpansOrdered(int,int,int,int) to avoid invoking .end() : */\n    return (start1 == start2) ? (spans1.end() < spans2.end()) : (start1 < start2);\n  }\n\n","sourceOld":"  /** Check whether two Spans in the same document are ordered.\n   * @param spans1 \n   * @param spans2 \n   * @return true iff spans1 starts before spans2\n   *              or the spans start at the same position,\n   *              and spans1 ends before spans2.\n   */\n  static final boolean docSpansOrdered(Spans spans1, Spans spans2) {\n    assert spans1.doc() == spans2.doc() : \"doc1 \" + spans1.doc() + \" != doc2 \" + spans2.doc();\n    int start1 = spans1.start();\n    int start2 = spans2.start();\n    /* Do not call docSpansOrdered(int,int,int,int) to avoid invoking .end() : */\n    return (start1 == start2) ? (spans1.end() < spans2.end()) : (start1 < start2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77301f098b899884dd472e6b27fb5f8136189fe3","date":1415988476,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansUnordered#docSpansOrdered(Spans,Spans).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered#docSpansOrdered(Spans,Spans).mjava","sourceNew":"  /** Check whether two Spans in the same document are ordered with possible overlap.\n   * @return true iff spans1 starts before spans2\n   *              or the spans start at the same position,\n   *              and spans1 ends before spans2.\n   */\n  static final boolean docSpansOrdered(Spans spans1, Spans spans2) {\n    assert spans1.doc() == spans2.doc() : \"doc1 \" + spans1.doc() + \" != doc2 \" + spans2.doc();\n    int start1 = spans1.start();\n    int start2 = spans2.start();\n    return (start1 == start2) ? (spans1.end() < spans2.end()) : (start1 < start2);\n  }\n\n","sourceOld":"  /** Check whether two Spans in the same document are ordered.\n   * @return true iff spans1 starts before spans2\n   *              or the spans start at the same position,\n   *              and spans1 ends before spans2.\n   */\n  static final boolean docSpansOrdered(Spans spans1, Spans spans2) {\n    assert spans1.doc() == spans2.doc() : \"doc1 \" + spans1.doc() + \" != doc2 \" + spans2.doc();\n    int start1 = spans1.start();\n    int start2 = spans2.start();\n    /* Do not call docSpansOrdered(int,int,int,int) to avoid invoking .end() : */\n    return (start1 == start2) ? (spans1.end() < spans2.end()) : (start1 < start2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"77301f098b899884dd472e6b27fb5f8136189fe3":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["77301f098b899884dd472e6b27fb5f8136189fe3"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["77301f098b899884dd472e6b27fb5f8136189fe3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"77301f098b899884dd472e6b27fb5f8136189fe3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}