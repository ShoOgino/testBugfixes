{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testMultiVariateNormalDistribution().mjava","commits":[{"id":"8a3a0090dc960985448654a5dd4c117c71c3f7a5","date":1513795907,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testMultiVariateNormalDistribution().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMultiVariateNormalDistribution() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"     a=array(1,2,3,4,5,6,7),\" +\n        \"     b=array(100, 110, 120, 130,140,150,180),\" +\n        \"     c=transpose(matrix(a, b)),\" +\n        \"     d=array(mean(a), mean(b)),\" +\n        \"     e=cov(c),\" +\n        \"     f=multiVariateNormalDistribution(d, e),\" +\n        \"     g=sample(f, 10000),\" +\n        \"     h=cov(g),\" +\n        \"     i=sample(f))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cov = (List<List<Number>>)tuples.get(0).get(\"h\");\n    assertEquals(cov.size(), 2);\n    List<Number> row1 = cov.get(0);\n    assertEquals(row1.size(), 2);\n\n    double a = row1.get(0).doubleValue();\n    double b = row1.get(1).doubleValue();\n    assertEquals(a, 4.666666666666667, 2.5);\n    assertEquals(b, 56.66666666666667, 7);\n\n    List<Number> row2 = cov.get(1);\n\n    double c = row2.get(0).doubleValue();\n    double d = row2.get(1).doubleValue();\n    assertEquals(c, 56.66666666666667, 7);\n    assertEquals(d, 723.8095238095239, 50);\n\n    List<Number> sample = (List<Number>)tuples.get(0).get(\"i\");\n    assertEquals(sample.size(), 2);\n    Number sample1 = sample.get(0);\n    Number sample2 = sample.get(1);\n    assertTrue(sample1.doubleValue() > -30 && sample1.doubleValue() < 30);\n    assertTrue(sample2.doubleValue() > 50 && sample2.doubleValue() < 250);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"667b4a609c6416604e0f47843deceb73807cee4e","date":1513957302,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testMultiVariateNormalDistribution().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testMultiVariateNormalDistribution().mjava","sourceNew":"  @Test\n  public void testMultiVariateNormalDistribution() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"     a=array(1,2,3,4,5,6,7),\" +\n        \"     b=array(100, 110, 120, 130,140,150,180),\" +\n        \"     c=transpose(matrix(a, b)),\" +\n        \"     d=array(mean(a), mean(b)),\" +\n        \"     e=cov(c),\" +\n        \"     f=multiVariateNormalDistribution(d, e),\" +\n        \"     g=sample(f, 10000),\" +\n        \"     h=cov(g),\" +\n        \"     i=sample(f),\" +\n        \"     j=density(f, array(4.016093243274465, 138.7283428008585)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cov = (List<List<Number>>)tuples.get(0).get(\"h\");\n    assertEquals(cov.size(), 2);\n    List<Number> row1 = cov.get(0);\n    assertEquals(row1.size(), 2);\n\n    double a = row1.get(0).doubleValue();\n    double b = row1.get(1).doubleValue();\n    assertEquals(a, 4.666666666666667, 2.5);\n    assertEquals(b, 56.66666666666667, 7);\n\n    List<Number> row2 = cov.get(1);\n\n    double c = row2.get(0).doubleValue();\n    double d = row2.get(1).doubleValue();\n    assertEquals(c, 56.66666666666667, 7);\n    assertEquals(d, 723.8095238095239, 50);\n\n    List<Number> sample = (List<Number>)tuples.get(0).get(\"i\");\n    assertEquals(sample.size(), 2);\n    Number sample1 = sample.get(0);\n    Number sample2 = sample.get(1);\n    assertTrue(sample1.doubleValue() > -30 && sample1.doubleValue() < 30);\n    assertTrue(sample2.doubleValue() > 50 && sample2.doubleValue() < 250);\n\n    Number density = (Number)tuples.get(0).get(\"j\");\n    assertEquals(density.doubleValue(), 0.007852638121596995, .00001);\n  }\n\n","sourceOld":"  @Test\n  public void testMultiVariateNormalDistribution() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"     a=array(1,2,3,4,5,6,7),\" +\n        \"     b=array(100, 110, 120, 130,140,150,180),\" +\n        \"     c=transpose(matrix(a, b)),\" +\n        \"     d=array(mean(a), mean(b)),\" +\n        \"     e=cov(c),\" +\n        \"     f=multiVariateNormalDistribution(d, e),\" +\n        \"     g=sample(f, 10000),\" +\n        \"     h=cov(g),\" +\n        \"     i=sample(f))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cov = (List<List<Number>>)tuples.get(0).get(\"h\");\n    assertEquals(cov.size(), 2);\n    List<Number> row1 = cov.get(0);\n    assertEquals(row1.size(), 2);\n\n    double a = row1.get(0).doubleValue();\n    double b = row1.get(1).doubleValue();\n    assertEquals(a, 4.666666666666667, 2.5);\n    assertEquals(b, 56.66666666666667, 7);\n\n    List<Number> row2 = cov.get(1);\n\n    double c = row2.get(0).doubleValue();\n    double d = row2.get(1).doubleValue();\n    assertEquals(c, 56.66666666666667, 7);\n    assertEquals(d, 723.8095238095239, 50);\n\n    List<Number> sample = (List<Number>)tuples.get(0).get(\"i\");\n    assertEquals(sample.size(), 2);\n    Number sample1 = sample.get(0);\n    Number sample2 = sample.get(1);\n    assertTrue(sample1.doubleValue() > -30 && sample1.doubleValue() < 30);\n    assertTrue(sample2.doubleValue() > 50 && sample2.doubleValue() < 250);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bedc8e5595055009e34aaa41f94d3645ba103d98","date":1520708295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testMultiVariateNormalDistribution().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testMultiVariateNormalDistribution().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") //2018-03-10\n  public void testMultiVariateNormalDistribution() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"     a=array(1,2,3,4,5,6,7),\" +\n        \"     b=array(100, 110, 120, 130,140,150,180),\" +\n        \"     c=transpose(matrix(a, b)),\" +\n        \"     d=array(mean(a), mean(b)),\" +\n        \"     e=cov(c),\" +\n        \"     f=multiVariateNormalDistribution(d, e),\" +\n        \"     g=sample(f, 10000),\" +\n        \"     h=cov(g),\" +\n        \"     i=sample(f),\" +\n        \"     j=density(f, array(4.016093243274465, 138.7283428008585)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cov = (List<List<Number>>)tuples.get(0).get(\"h\");\n    assertEquals(cov.size(), 2);\n    List<Number> row1 = cov.get(0);\n    assertEquals(row1.size(), 2);\n\n    double a = row1.get(0).doubleValue();\n    double b = row1.get(1).doubleValue();\n    assertEquals(a, 4.666666666666667, 2.5);\n    assertEquals(b, 56.66666666666667, 7);\n\n    List<Number> row2 = cov.get(1);\n\n    double c = row2.get(0).doubleValue();\n    double d = row2.get(1).doubleValue();\n    assertEquals(c, 56.66666666666667, 7);\n    assertEquals(d, 723.8095238095239, 50);\n\n    List<Number> sample = (List<Number>)tuples.get(0).get(\"i\");\n    assertEquals(sample.size(), 2);\n    Number sample1 = sample.get(0);\n    Number sample2 = sample.get(1);\n    assertTrue(sample1.doubleValue() > -30 && sample1.doubleValue() < 30);\n    assertTrue(sample2.doubleValue() > 50 && sample2.doubleValue() < 250);\n\n    Number density = (Number)tuples.get(0).get(\"j\");\n    assertEquals(density.doubleValue(), 0.007852638121596995, .00001);\n  }\n\n","sourceOld":"  @Test\n  public void testMultiVariateNormalDistribution() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"     a=array(1,2,3,4,5,6,7),\" +\n        \"     b=array(100, 110, 120, 130,140,150,180),\" +\n        \"     c=transpose(matrix(a, b)),\" +\n        \"     d=array(mean(a), mean(b)),\" +\n        \"     e=cov(c),\" +\n        \"     f=multiVariateNormalDistribution(d, e),\" +\n        \"     g=sample(f, 10000),\" +\n        \"     h=cov(g),\" +\n        \"     i=sample(f),\" +\n        \"     j=density(f, array(4.016093243274465, 138.7283428008585)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cov = (List<List<Number>>)tuples.get(0).get(\"h\");\n    assertEquals(cov.size(), 2);\n    List<Number> row1 = cov.get(0);\n    assertEquals(row1.size(), 2);\n\n    double a = row1.get(0).doubleValue();\n    double b = row1.get(1).doubleValue();\n    assertEquals(a, 4.666666666666667, 2.5);\n    assertEquals(b, 56.66666666666667, 7);\n\n    List<Number> row2 = cov.get(1);\n\n    double c = row2.get(0).doubleValue();\n    double d = row2.get(1).doubleValue();\n    assertEquals(c, 56.66666666666667, 7);\n    assertEquals(d, 723.8095238095239, 50);\n\n    List<Number> sample = (List<Number>)tuples.get(0).get(\"i\");\n    assertEquals(sample.size(), 2);\n    Number sample1 = sample.get(0);\n    Number sample2 = sample.get(1);\n    assertTrue(sample1.doubleValue() > -30 && sample1.doubleValue() < 30);\n    assertTrue(sample2.doubleValue() > 50 && sample2.doubleValue() < 250);\n\n    Number density = (Number)tuples.get(0).get(\"j\");\n    assertEquals(density.doubleValue(), 0.007852638121596995, .00001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMultiVariateNormalDistribution().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testMultiVariateNormalDistribution().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") //2018-03-10\n  public void testMultiVariateNormalDistribution() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"     a=array(1,2,3,4,5,6,7),\" +\n        \"     b=array(100, 110, 120, 130,140,150,180),\" +\n        \"     c=transpose(matrix(a, b)),\" +\n        \"     d=array(mean(a), mean(b)),\" +\n        \"     e=cov(c),\" +\n        \"     f=multiVariateNormalDistribution(d, e),\" +\n        \"     g=sample(f, 10000),\" +\n        \"     h=cov(g),\" +\n        \"     i=sample(f),\" +\n        \"     j=density(f, array(4.016093243274465, 138.7283428008585)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cov = (List<List<Number>>)tuples.get(0).get(\"h\");\n    assertEquals(cov.size(), 2);\n    List<Number> row1 = cov.get(0);\n    assertEquals(row1.size(), 2);\n\n    double a = row1.get(0).doubleValue();\n    double b = row1.get(1).doubleValue();\n    assertEquals(a, 4.666666666666667, 2.5);\n    assertEquals(b, 56.66666666666667, 7);\n\n    List<Number> row2 = cov.get(1);\n\n    double c = row2.get(0).doubleValue();\n    double d = row2.get(1).doubleValue();\n    assertEquals(c, 56.66666666666667, 7);\n    assertEquals(d, 723.8095238095239, 50);\n\n    List<Number> sample = (List<Number>)tuples.get(0).get(\"i\");\n    assertEquals(sample.size(), 2);\n    Number sample1 = sample.get(0);\n    Number sample2 = sample.get(1);\n    assertTrue(sample1.doubleValue() > -30 && sample1.doubleValue() < 30);\n    assertTrue(sample2.doubleValue() > 50 && sample2.doubleValue() < 250);\n\n    Number density = (Number)tuples.get(0).get(\"j\");\n    assertEquals(density.doubleValue(), 0.007852638121596995, .00001);\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") //2018-03-10\n  public void testMultiVariateNormalDistribution() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"     a=array(1,2,3,4,5,6,7),\" +\n        \"     b=array(100, 110, 120, 130,140,150,180),\" +\n        \"     c=transpose(matrix(a, b)),\" +\n        \"     d=array(mean(a), mean(b)),\" +\n        \"     e=cov(c),\" +\n        \"     f=multiVariateNormalDistribution(d, e),\" +\n        \"     g=sample(f, 10000),\" +\n        \"     h=cov(g),\" +\n        \"     i=sample(f),\" +\n        \"     j=density(f, array(4.016093243274465, 138.7283428008585)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cov = (List<List<Number>>)tuples.get(0).get(\"h\");\n    assertEquals(cov.size(), 2);\n    List<Number> row1 = cov.get(0);\n    assertEquals(row1.size(), 2);\n\n    double a = row1.get(0).doubleValue();\n    double b = row1.get(1).doubleValue();\n    assertEquals(a, 4.666666666666667, 2.5);\n    assertEquals(b, 56.66666666666667, 7);\n\n    List<Number> row2 = cov.get(1);\n\n    double c = row2.get(0).doubleValue();\n    double d = row2.get(1).doubleValue();\n    assertEquals(c, 56.66666666666667, 7);\n    assertEquals(d, 723.8095238095239, 50);\n\n    List<Number> sample = (List<Number>)tuples.get(0).get(\"i\");\n    assertEquals(sample.size(), 2);\n    Number sample1 = sample.get(0);\n    Number sample2 = sample.get(1);\n    assertTrue(sample1.doubleValue() > -30 && sample1.doubleValue() < 30);\n    assertTrue(sample2.doubleValue() > 50 && sample2.doubleValue() < 250);\n\n    Number density = (Number)tuples.get(0).get(\"j\");\n    assertEquals(density.doubleValue(), 0.007852638121596995, .00001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a3a0090dc960985448654a5dd4c117c71c3f7a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bedc8e5595055009e34aaa41f94d3645ba103d98":["667b4a609c6416604e0f47843deceb73807cee4e"],"667b4a609c6416604e0f47843deceb73807cee4e":["8a3a0090dc960985448654a5dd4c117c71c3f7a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["bedc8e5595055009e34aaa41f94d3645ba103d98"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8a3a0090dc960985448654a5dd4c117c71c3f7a5"],"8a3a0090dc960985448654a5dd4c117c71c3f7a5":["667b4a609c6416604e0f47843deceb73807cee4e"],"bedc8e5595055009e34aaa41f94d3645ba103d98":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"667b4a609c6416604e0f47843deceb73807cee4e":["bedc8e5595055009e34aaa41f94d3645ba103d98"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}