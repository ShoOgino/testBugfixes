{"path":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getUninversionMap(IndexReader).mjava","commits":[{"id":"c7c19b4ecf30c060f4d2e29c25f027e73262713d","date":1400023065,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getUninversionMap(IndexReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getUninversionMap(DirectoryReader).mjava","sourceNew":"  public Map<String,UninvertingReader.Type> getUninversionMap(IndexReader reader) {\n    Map<String,UninvertingReader.Type> map = new HashMap<>();\n    for (FieldInfo f : MultiFields.getMergedFieldInfos(reader)) {\n      if (f.hasDocValues() == false && f.isIndexed()) {\n        SchemaField sf = getFieldOrNull(f.name);\n        if (sf != null) {\n          UninvertingReader.Type type = sf.getType().getUninversionType(sf);\n          if (type != null) {\n            map.put(f.name, type);\n          }\n        }\n      }\n    }\n    return map;\n  }\n\n","sourceOld":"  public Map<String,UninvertingReader.Type> getUninversionMap(DirectoryReader reader) {\n    Map<String,UninvertingReader.Type> map = new HashMap<>();\n    for (FieldInfo f : MultiFields.getMergedFieldInfos(reader)) {\n      if (f.hasDocValues() == false && f.isIndexed()) {\n        SchemaField sf = getFieldOrNull(f.name);\n        if (sf != null) {\n          UninvertingReader.Type type = sf.getType().getUninversionType(sf);\n          if (type != null) {\n            map.put(f.name, type);\n          }\n        }\n      }\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getUninversionMap(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public Map<String,UninvertingReader.Type> getUninversionMap(IndexReader reader) {\n    Map<String,UninvertingReader.Type> map = new HashMap<>();\n    for (FieldInfo f : MultiFields.getMergedFieldInfos(reader)) {\n      if (f.hasDocValues() == false && f.isIndexed()) {\n        SchemaField sf = getFieldOrNull(f.name);\n        if (sf != null) {\n          UninvertingReader.Type type = sf.getType().getUninversionType(sf);\n          if (type != null) {\n            map.put(f.name, type);\n          }\n        }\n      }\n    }\n    return map;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getUninversionMap(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public Map<String,UninvertingReader.Type> getUninversionMap(IndexReader reader) {\n    Map<String,UninvertingReader.Type> map = new HashMap<>();\n    for (FieldInfo f : MultiFields.getMergedFieldInfos(reader)) {\n      if (f.hasDocValues() == false && f.isIndexed()) {\n        SchemaField sf = getFieldOrNull(f.name);\n        if (sf != null) {\n          UninvertingReader.Type type = sf.getType().getUninversionType(sf);\n          if (type != null) {\n            map.put(f.name, type);\n          }\n        }\n      }\n    }\n    return map;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"556a4aab886d75371b2af129d87be3c2795cea76","date":1414954991,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getUninversionMap(IndexReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getUninversionMap(IndexReader).mjava","sourceNew":"  public Map<String,UninvertingReader.Type> getUninversionMap(IndexReader reader) {\n    Map<String,UninvertingReader.Type> map = new HashMap<>();\n    for (FieldInfo f : MultiFields.getMergedFieldInfos(reader)) {\n      if (f.getDocValuesType() == DocValuesType.NONE && f.getIndexOptions() != IndexOptions.NONE) {\n        SchemaField sf = getFieldOrNull(f.name);\n        if (sf != null) {\n          UninvertingReader.Type type = sf.getType().getUninversionType(sf);\n          if (type != null) {\n            map.put(f.name, type);\n          }\n        }\n      }\n    }\n    return map;\n  }\n\n","sourceOld":"  public Map<String,UninvertingReader.Type> getUninversionMap(IndexReader reader) {\n    Map<String,UninvertingReader.Type> map = new HashMap<>();\n    for (FieldInfo f : MultiFields.getMergedFieldInfos(reader)) {\n      if (f.hasDocValues() == false && f.isIndexed()) {\n        SchemaField sf = getFieldOrNull(f.name);\n        if (sf != null) {\n          UninvertingReader.Type type = sf.getType().getUninversionType(sf);\n          if (type != null) {\n            map.put(f.name, type);\n          }\n        }\n      }\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":["79900e89f08cc17c4bcf49789dd61a2236ee7840"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"79900e89f08cc17c4bcf49789dd61a2236ee7840","date":1492541915,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getUninversionMap(IndexReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getUninversionMap(IndexReader).mjava","sourceNew":"  public Map<String,UninvertingReader.Type> getUninversionMap(IndexReader reader) {\n    final Map<String,UninvertingReader.Type> map = new HashMap<>();\n    for (FieldInfo f : MultiFields.getMergedFieldInfos(reader)) {\n      if (f.getDocValuesType() == DocValuesType.NONE) {\n        // we have a field (of some kind) in the reader w/o DocValues\n        // if we have an equivilent indexed=true field in the schema, trust it's uninversion type (if any)\n        final SchemaField sf = getFieldOrNull(f.name);\n        if (sf != null && sf.indexed()) {\n          final UninvertingReader.Type type = sf.getType().getUninversionType(sf);\n          if (type != null) {\n            map.put(f.name, type);\n          }\n        }\n      }\n    }\n    return map;\n  }\n\n","sourceOld":"  public Map<String,UninvertingReader.Type> getUninversionMap(IndexReader reader) {\n    Map<String,UninvertingReader.Type> map = new HashMap<>();\n    for (FieldInfo f : MultiFields.getMergedFieldInfos(reader)) {\n      if (f.getDocValuesType() == DocValuesType.NONE && f.getIndexOptions() != IndexOptions.NONE) {\n        SchemaField sf = getFieldOrNull(f.name);\n        if (sf != null) {\n          UninvertingReader.Type type = sf.getType().getUninversionType(sf);\n          if (type != null) {\n            map.put(f.name, type);\n          }\n        }\n      }\n    }\n    return map;\n  }\n\n","bugFix":["556a4aab886d75371b2af129d87be3c2795cea76","30b6ad849a21206db510322a3f583ca70ae20a2f"],"bugIntro":["9f4251f14d2db68330fc1e6f0495c053a905d560"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getUninversionMap(IndexReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getUninversionMap(IndexReader).mjava","sourceNew":"  public Map<String,UninvertingReader.Type> getUninversionMap(IndexReader reader) {\n    final Map<String,UninvertingReader.Type> map = new HashMap<>();\n    for (FieldInfo f : MultiFields.getMergedFieldInfos(reader)) {\n      if (f.getDocValuesType() == DocValuesType.NONE) {\n        // we have a field (of some kind) in the reader w/o DocValues\n        // if we have an equivilent indexed=true field in the schema, trust it's uninversion type (if any)\n        final SchemaField sf = getFieldOrNull(f.name);\n        if (sf != null && sf.indexed()) {\n          final UninvertingReader.Type type = sf.getType().getUninversionType(sf);\n          if (type != null) {\n            map.put(f.name, type);\n          }\n        }\n      }\n    }\n    return map;\n  }\n\n","sourceOld":"  public Map<String,UninvertingReader.Type> getUninversionMap(IndexReader reader) {\n    Map<String,UninvertingReader.Type> map = new HashMap<>();\n    for (FieldInfo f : MultiFields.getMergedFieldInfos(reader)) {\n      if (f.getDocValuesType() == DocValuesType.NONE && f.getIndexOptions() != IndexOptions.NONE) {\n        SchemaField sf = getFieldOrNull(f.name);\n        if (sf != null) {\n          UninvertingReader.Type type = sf.getType().getUninversionType(sf);\n          if (type != null) {\n            map.put(f.name, type);\n          }\n        }\n      }\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f4251f14d2db68330fc1e6f0495c053a905d560","date":1537116380,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getUninversionMap(IndexReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getUninversionMap(IndexReader).mjava","sourceNew":"  public Map<String,UninvertingReader.Type> getUninversionMap(IndexReader reader) {\n    final Map<String,UninvertingReader.Type> map = new HashMap<>();\n    for (FieldInfo f : MultiFields.getMergedFieldInfos(reader)) {\n      if (f.getDocValuesType() == DocValuesType.NONE) {\n        // we have a field (of some kind) in the reader w/o DocValues\n        // if we have an equivalent indexed=true field in the schema, trust it's uninversion type (if any)\n        final SchemaField sf = getFieldOrNull(f.name);\n        if (sf != null && sf.indexed()) {\n          final UninvertingReader.Type type = sf.getType().getUninversionType(sf);\n          if (type != null) {\n            map.put(f.name, type);\n          }\n        }\n      }\n    }\n    return map;\n  }\n\n","sourceOld":"  public Map<String,UninvertingReader.Type> getUninversionMap(IndexReader reader) {\n    final Map<String,UninvertingReader.Type> map = new HashMap<>();\n    for (FieldInfo f : MultiFields.getMergedFieldInfos(reader)) {\n      if (f.getDocValuesType() == DocValuesType.NONE) {\n        // we have a field (of some kind) in the reader w/o DocValues\n        // if we have an equivilent indexed=true field in the schema, trust it's uninversion type (if any)\n        final SchemaField sf = getFieldOrNull(f.name);\n        if (sf != null && sf.indexed()) {\n          final UninvertingReader.Type type = sf.getType().getUninversionType(sf);\n          if (type != null) {\n            map.put(f.name, type);\n          }\n        }\n      }\n    }\n    return map;\n  }\n\n","bugFix":["79900e89f08cc17c4bcf49789dd61a2236ee7840"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a07eeba66d4090af0095b50cbd1795a3d6182c1d","date":1538797239,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getUninversionMap(IndexReader).mjava","sourceNew":null,"sourceOld":"  public Map<String,UninvertingReader.Type> getUninversionMap(IndexReader reader) {\n    final Map<String,UninvertingReader.Type> map = new HashMap<>();\n    for (FieldInfo f : MultiFields.getMergedFieldInfos(reader)) {\n      if (f.getDocValuesType() == DocValuesType.NONE) {\n        // we have a field (of some kind) in the reader w/o DocValues\n        // if we have an equivalent indexed=true field in the schema, trust it's uninversion type (if any)\n        final SchemaField sf = getFieldOrNull(f.name);\n        if (sf != null && sf.indexed()) {\n          final UninvertingReader.Type type = sf.getType().getUninversionType(sf);\n          if (type != null) {\n            map.put(f.name, type);\n          }\n        }\n      }\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["556a4aab886d75371b2af129d87be3c2795cea76"],"9f4251f14d2db68330fc1e6f0495c053a905d560":["79900e89f08cc17c4bcf49789dd61a2236ee7840"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7c19b4ecf30c060f4d2e29c25f027e73262713d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a07eeba66d4090af0095b50cbd1795a3d6182c1d":["9f4251f14d2db68330fc1e6f0495c053a905d560"],"79900e89f08cc17c4bcf49789dd61a2236ee7840":["556a4aab886d75371b2af129d87be3c2795cea76"],"556a4aab886d75371b2af129d87be3c2795cea76":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"c7c19b4ecf30c060f4d2e29c25f027e73262713d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a07eeba66d4090af0095b50cbd1795a3d6182c1d"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"9f4251f14d2db68330fc1e6f0495c053a905d560":["a07eeba66d4090af0095b50cbd1795a3d6182c1d"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["556a4aab886d75371b2af129d87be3c2795cea76","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["93dd449115a9247533e44bab47e8429e5dccbc6d","56572ec06f1407c066d6b7399413178b33176cd8","c7c19b4ecf30c060f4d2e29c25f027e73262713d"],"a07eeba66d4090af0095b50cbd1795a3d6182c1d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"79900e89f08cc17c4bcf49789dd61a2236ee7840":["9f4251f14d2db68330fc1e6f0495c053a905d560"],"556a4aab886d75371b2af129d87be3c2795cea76":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","79900e89f08cc17c4bcf49789dd61a2236ee7840"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"c7c19b4ecf30c060f4d2e29c25f027e73262713d":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}