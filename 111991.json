{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnumFrame#nextNonLeaf().mjava","commits":[{"id":"3f4ef2de7b0fd59ef22e20888773ad260c90bfb4","date":1400183621,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnumFrame#nextNonLeaf().mjava","pathOld":"/dev/null","sourceNew":"  public boolean nextNonLeaf() {\n    //if (DEBUG) System.out.println(\"  frame.next ord=\" + ord + \" nextEnt=\" + nextEnt + \" entCount=\" + entCount);\n    assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n    nextEnt++;\n    final int code = suffixesReader.readVInt();\n    suffix = code >>> 1;\n    startBytePos = suffixesReader.getPosition();\n    ste.term.length = prefix + suffix;\n    if (ste.term.bytes.length < ste.term.length) {\n      ste.term.grow(ste.term.length);\n    }\n    suffixesReader.readBytes(ste.term.bytes, prefix, suffix);\n    if ((code & 1) == 0) {\n      // A normal term\n      ste.termExists = true;\n      subCode = 0;\n      state.termBlockOrd++;\n      return false;\n    } else {\n      // A sub-block; make sub-FP absolute:\n      ste.termExists = false;\n      subCode = suffixesReader.readVLong();\n      lastSubFP = fp - subCode;\n      //if (DEBUG) {\n      //System.out.println(\"    lastSubFP=\" + lastSubFP);\n      //}\n      return true;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnumFrame#nextNonLeaf().mjava","pathOld":"/dev/null","sourceNew":"  public boolean nextNonLeaf() {\n    //if (DEBUG) System.out.println(\"  frame.next ord=\" + ord + \" nextEnt=\" + nextEnt + \" entCount=\" + entCount);\n    assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n    nextEnt++;\n    final int code = suffixesReader.readVInt();\n    suffix = code >>> 1;\n    startBytePos = suffixesReader.getPosition();\n    ste.term.length = prefix + suffix;\n    if (ste.term.bytes.length < ste.term.length) {\n      ste.term.grow(ste.term.length);\n    }\n    suffixesReader.readBytes(ste.term.bytes, prefix, suffix);\n    if ((code & 1) == 0) {\n      // A normal term\n      ste.termExists = true;\n      subCode = 0;\n      state.termBlockOrd++;\n      return false;\n    } else {\n      // A sub-block; make sub-FP absolute:\n      ste.termExists = false;\n      subCode = suffixesReader.readVLong();\n      lastSubFP = fp - subCode;\n      //if (DEBUG) {\n      //System.out.println(\"    lastSubFP=\" + lastSubFP);\n      //}\n      return true;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnumFrame#nextNonLeaf().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnumFrame#nextNonLeaf().mjava","sourceNew":"  public boolean nextNonLeaf() {\n    //if (DEBUG) System.out.println(\"  frame.next ord=\" + ord + \" nextEnt=\" + nextEnt + \" entCount=\" + entCount);\n    assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n    nextEnt++;\n    final int code = suffixesReader.readVInt();\n    suffix = code >>> 1;\n    startBytePos = suffixesReader.getPosition();\n    ste.term.setLength(prefix + suffix);\n    ste.term.grow(ste.term.length());\n    suffixesReader.readBytes(ste.term.bytes(), prefix, suffix);\n    if ((code & 1) == 0) {\n      // A normal term\n      ste.termExists = true;\n      subCode = 0;\n      state.termBlockOrd++;\n      return false;\n    } else {\n      // A sub-block; make sub-FP absolute:\n      ste.termExists = false;\n      subCode = suffixesReader.readVLong();\n      lastSubFP = fp - subCode;\n      //if (DEBUG) {\n      //System.out.println(\"    lastSubFP=\" + lastSubFP);\n      //}\n      return true;\n    }\n  }\n\n","sourceOld":"  public boolean nextNonLeaf() {\n    //if (DEBUG) System.out.println(\"  frame.next ord=\" + ord + \" nextEnt=\" + nextEnt + \" entCount=\" + entCount);\n    assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n    nextEnt++;\n    final int code = suffixesReader.readVInt();\n    suffix = code >>> 1;\n    startBytePos = suffixesReader.getPosition();\n    ste.term.length = prefix + suffix;\n    if (ste.term.bytes.length < ste.term.length) {\n      ste.term.grow(ste.term.length);\n    }\n    suffixesReader.readBytes(ste.term.bytes, prefix, suffix);\n    if ((code & 1) == 0) {\n      // A normal term\n      ste.termExists = true;\n      subCode = 0;\n      state.termBlockOrd++;\n      return false;\n    } else {\n      // A sub-block; make sub-FP absolute:\n      ste.termExists = false;\n      subCode = suffixesReader.readVLong();\n      lastSubFP = fp - subCode;\n      //if (DEBUG) {\n      //System.out.println(\"    lastSubFP=\" + lastSubFP);\n      //}\n      return true;\n    }\n  }\n\n","bugFix":["3f4ef2de7b0fd59ef22e20888773ad260c90bfb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnumFrame#nextNonLeaf().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnumFrame#nextNonLeaf().mjava","sourceNew":"  public boolean nextNonLeaf() throws IOException {\n    //if (DEBUG) System.out.println(\"  stef.next ord=\" + ord + \" nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + suffixesReader.getPosition());\n    while (true) {\n      if (nextEnt == entCount) {\n        assert arc == null || (isFloor && isLastInFloor == false): \"isFloor=\" + isFloor + \" isLastInFloor=\" + isLastInFloor;\n        loadNextFloorBlock();\n        if (isLeafBlock) {\n          nextLeaf();\n          return false;\n        } else {\n          continue;\n        }\n      }\n        \n      assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n      nextEnt++;\n      final int code = suffixesReader.readVInt();\n      if (versionAutoPrefix == false) {\n        suffix = code >>> 1;\n      } else {\n        suffix = code >>> 2;\n      }\n      startBytePos = suffixesReader.getPosition();\n      ste.term.setLength(prefix + suffix);\n      ste.term.grow(ste.term.length());\n      suffixesReader.readBytes(ste.term.bytes(), prefix, suffix);\n      if (versionAutoPrefix == false) {\n        if ((code & 1) == 0) {\n          // A normal term\n          ste.termExists = true;\n          subCode = 0;\n          state.termBlockOrd++;\n          return false;\n        } else {\n          // A sub-block; make sub-FP absolute:\n          ste.termExists = false;\n          subCode = suffixesReader.readVLong();\n          lastSubFP = fp - subCode;\n          //if (DEBUG) {\n          //System.out.println(\"    lastSubFP=\" + lastSubFP);\n          //}\n          return true;\n        }\n      } else {\n\n        switch(code & 3) {\n        case 0:\n          // A normal term\n          ste.termExists = true;\n          subCode = 0;\n          state.termBlockOrd++;\n          return false;\n        case 1:\n          // A sub-block; make sub-FP absolute:\n          ste.termExists = false;\n          subCode = suffixesReader.readVLong();\n          lastSubFP = fp - subCode;\n          //if (DEBUG) {\n          //System.out.println(\"    lastSubFP=\" + lastSubFP);\n          //}\n          return true;\n        case 2:\n        case 3:\n          // A prefix term: skip it\n          state.termBlockOrd++;\n          suffixesReader.readByte();\n          continue;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public boolean nextNonLeaf() {\n    //if (DEBUG) System.out.println(\"  frame.next ord=\" + ord + \" nextEnt=\" + nextEnt + \" entCount=\" + entCount);\n    assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n    nextEnt++;\n    final int code = suffixesReader.readVInt();\n    suffix = code >>> 1;\n    startBytePos = suffixesReader.getPosition();\n    ste.term.setLength(prefix + suffix);\n    ste.term.grow(ste.term.length());\n    suffixesReader.readBytes(ste.term.bytes(), prefix, suffix);\n    if ((code & 1) == 0) {\n      // A normal term\n      ste.termExists = true;\n      subCode = 0;\n      state.termBlockOrd++;\n      return false;\n    } else {\n      // A sub-block; make sub-FP absolute:\n      ste.termExists = false;\n      subCode = suffixesReader.readVLong();\n      lastSubFP = fp - subCode;\n      //if (DEBUG) {\n      //System.out.println(\"    lastSubFP=\" + lastSubFP);\n      //}\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnumFrame#nextNonLeaf().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnumFrame#nextNonLeaf().mjava","sourceNew":"  public boolean nextNonLeaf() throws IOException {\n    //if (DEBUG) System.out.println(\"  stef.next ord=\" + ord + \" nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + suffixesReader.getPosition());\n    while (true) {\n      if (nextEnt == entCount) {\n        assert arc == null || (isFloor && isLastInFloor == false): \"isFloor=\" + isFloor + \" isLastInFloor=\" + isLastInFloor;\n        loadNextFloorBlock();\n        if (isLeafBlock) {\n          nextLeaf();\n          return false;\n        } else {\n          continue;\n        }\n      }\n        \n      assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n      nextEnt++;\n      final int code = suffixesReader.readVInt();\n      if (versionAutoPrefix == false) {\n        suffix = code >>> 1;\n      } else {\n        suffix = code >>> 2;\n      }\n      startBytePos = suffixesReader.getPosition();\n      ste.term.setLength(prefix + suffix);\n      ste.term.grow(ste.term.length());\n      suffixesReader.readBytes(ste.term.bytes(), prefix, suffix);\n      if (versionAutoPrefix == false) {\n        if ((code & 1) == 0) {\n          // A normal term\n          ste.termExists = true;\n          subCode = 0;\n          state.termBlockOrd++;\n          return false;\n        } else {\n          // A sub-block; make sub-FP absolute:\n          ste.termExists = false;\n          subCode = suffixesReader.readVLong();\n          lastSubFP = fp - subCode;\n          //if (DEBUG) {\n          //System.out.println(\"    lastSubFP=\" + lastSubFP);\n          //}\n          return true;\n        }\n      } else {\n\n        switch(code & 3) {\n        case 0:\n          // A normal term\n          ste.termExists = true;\n          subCode = 0;\n          state.termBlockOrd++;\n          return false;\n        case 1:\n          // A sub-block; make sub-FP absolute:\n          ste.termExists = false;\n          subCode = suffixesReader.readVLong();\n          lastSubFP = fp - subCode;\n          //if (DEBUG) {\n          //System.out.println(\"    lastSubFP=\" + lastSubFP);\n          //}\n          return true;\n        case 2:\n        case 3:\n          // A prefix term: skip it\n          state.termBlockOrd++;\n          suffixesReader.readByte();\n          continue;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public boolean nextNonLeaf() {\n    //if (DEBUG) System.out.println(\"  frame.next ord=\" + ord + \" nextEnt=\" + nextEnt + \" entCount=\" + entCount);\n    assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n    nextEnt++;\n    final int code = suffixesReader.readVInt();\n    suffix = code >>> 1;\n    startBytePos = suffixesReader.getPosition();\n    ste.term.setLength(prefix + suffix);\n    ste.term.grow(ste.term.length());\n    suffixesReader.readBytes(ste.term.bytes(), prefix, suffix);\n    if ((code & 1) == 0) {\n      // A normal term\n      ste.termExists = true;\n      subCode = 0;\n      state.termBlockOrd++;\n      return false;\n    } else {\n      // A sub-block; make sub-FP absolute:\n      ste.termExists = false;\n      subCode = suffixesReader.readVLong();\n      lastSubFP = fp - subCode;\n      //if (DEBUG) {\n      //System.out.println(\"    lastSubFP=\" + lastSubFP);\n      //}\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59db5e5f780185e0155d296a323e440a6ecfd3b6","date":1435089559,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnumFrame#nextNonLeaf().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnumFrame#nextNonLeaf().mjava","sourceNew":"  public boolean nextNonLeaf() throws IOException {\n    //if (DEBUG) System.out.println(\"  stef.next ord=\" + ord + \" nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + suffixesReader.getPosition());\n    while (true) {\n      if (nextEnt == entCount) {\n        assert arc == null || (isFloor && isLastInFloor == false): \"isFloor=\" + isFloor + \" isLastInFloor=\" + isLastInFloor;\n        loadNextFloorBlock();\n        if (isLeafBlock) {\n          nextLeaf();\n          return false;\n        } else {\n          continue;\n        }\n      }\n        \n      assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n      nextEnt++;\n      final int code = suffixesReader.readVInt();\n      if (versionAutoPrefix == false) {\n        suffix = code >>> 1;\n        startBytePos = suffixesReader.getPosition();\n        ste.term.setLength(prefix + suffix);\n        ste.term.grow(ste.term.length());\n        suffixesReader.readBytes(ste.term.bytes(), prefix, suffix);\n        if ((code & 1) == 0) {\n          // A normal term\n          ste.termExists = true;\n          subCode = 0;\n          state.termBlockOrd++;\n          return false;\n        } else {\n          // A sub-block; make sub-FP absolute:\n          ste.termExists = false;\n          subCode = suffixesReader.readVLong();\n          lastSubFP = fp - subCode;\n          //if (DEBUG) {\n          //System.out.println(\"    lastSubFP=\" + lastSubFP);\n          //}\n          return true;\n        }\n      } else {\n        suffix = code >>> 2;\n        startBytePos = suffixesReader.getPosition();\n        ste.term.setLength(prefix + suffix);\n        ste.term.grow(ste.term.length());\n        suffixesReader.readBytes(ste.term.bytes(), prefix, suffix);\n\n        switch(code & 3) {\n        case 0:\n          // A normal term\n          ste.termExists = true;\n          subCode = 0;\n          state.termBlockOrd++;\n          return false;\n        case 1:\n          // A sub-block; make sub-FP absolute:\n          ste.termExists = false;\n          subCode = suffixesReader.readVLong();\n          lastSubFP = fp - subCode;\n          //if (DEBUG) {\n          //System.out.println(\"    lastSubFP=\" + lastSubFP);\n          //}\n          return true;\n        case 2:\n        case 3:\n          // A prefix term: skip it\n          state.termBlockOrd++;\n          suffixesReader.readByte();\n          continue;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public boolean nextNonLeaf() throws IOException {\n    //if (DEBUG) System.out.println(\"  stef.next ord=\" + ord + \" nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + suffixesReader.getPosition());\n    while (true) {\n      if (nextEnt == entCount) {\n        assert arc == null || (isFloor && isLastInFloor == false): \"isFloor=\" + isFloor + \" isLastInFloor=\" + isLastInFloor;\n        loadNextFloorBlock();\n        if (isLeafBlock) {\n          nextLeaf();\n          return false;\n        } else {\n          continue;\n        }\n      }\n        \n      assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n      nextEnt++;\n      final int code = suffixesReader.readVInt();\n      if (versionAutoPrefix == false) {\n        suffix = code >>> 1;\n      } else {\n        suffix = code >>> 2;\n      }\n      startBytePos = suffixesReader.getPosition();\n      ste.term.setLength(prefix + suffix);\n      ste.term.grow(ste.term.length());\n      suffixesReader.readBytes(ste.term.bytes(), prefix, suffix);\n      if (versionAutoPrefix == false) {\n        if ((code & 1) == 0) {\n          // A normal term\n          ste.termExists = true;\n          subCode = 0;\n          state.termBlockOrd++;\n          return false;\n        } else {\n          // A sub-block; make sub-FP absolute:\n          ste.termExists = false;\n          subCode = suffixesReader.readVLong();\n          lastSubFP = fp - subCode;\n          //if (DEBUG) {\n          //System.out.println(\"    lastSubFP=\" + lastSubFP);\n          //}\n          return true;\n        }\n      } else {\n\n        switch(code & 3) {\n        case 0:\n          // A normal term\n          ste.termExists = true;\n          subCode = 0;\n          state.termBlockOrd++;\n          return false;\n        case 1:\n          // A sub-block; make sub-FP absolute:\n          ste.termExists = false;\n          subCode = suffixesReader.readVLong();\n          lastSubFP = fp - subCode;\n          //if (DEBUG) {\n          //System.out.println(\"    lastSubFP=\" + lastSubFP);\n          //}\n          return true;\n        case 2:\n        case 3:\n          // A prefix term: skip it\n          state.termBlockOrd++;\n          suffixesReader.readByte();\n          continue;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7d165dc88e14a2b2f1cc4ac8133ffdde44acfd5","date":1488285484,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnumFrame#nextNonLeaf().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnumFrame#nextNonLeaf().mjava","sourceNew":"  public boolean nextNonLeaf() throws IOException {\n    //if (DEBUG) System.out.println(\"  stef.next ord=\" + ord + \" nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + suffixesReader.getPosition());\n    while (true) {\n      if (nextEnt == entCount) {\n        assert arc == null || (isFloor && isLastInFloor == false): \"isFloor=\" + isFloor + \" isLastInFloor=\" + isLastInFloor;\n        loadNextFloorBlock();\n        if (isLeafBlock) {\n          nextLeaf();\n          return false;\n        } else {\n          continue;\n        }\n      }\n        \n      assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n      nextEnt++;\n      final int code = suffixesReader.readVInt();\n      suffix = code >>> 1;\n      startBytePos = suffixesReader.getPosition();\n      ste.term.setLength(prefix + suffix);\n      ste.term.grow(ste.term.length());\n      suffixesReader.readBytes(ste.term.bytes(), prefix, suffix);\n      if ((code & 1) == 0) {\n        // A normal term\n        ste.termExists = true;\n        subCode = 0;\n        state.termBlockOrd++;\n        return false;\n      } else {\n        // A sub-block; make sub-FP absolute:\n        ste.termExists = false;\n        subCode = suffixesReader.readVLong();\n        lastSubFP = fp - subCode;\n        //if (DEBUG) {\n        //System.out.println(\"    lastSubFP=\" + lastSubFP);\n        //}\n        return true;\n      }\n    }\n  }\n\n","sourceOld":"  public boolean nextNonLeaf() throws IOException {\n    //if (DEBUG) System.out.println(\"  stef.next ord=\" + ord + \" nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + suffixesReader.getPosition());\n    while (true) {\n      if (nextEnt == entCount) {\n        assert arc == null || (isFloor && isLastInFloor == false): \"isFloor=\" + isFloor + \" isLastInFloor=\" + isLastInFloor;\n        loadNextFloorBlock();\n        if (isLeafBlock) {\n          nextLeaf();\n          return false;\n        } else {\n          continue;\n        }\n      }\n        \n      assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n      nextEnt++;\n      final int code = suffixesReader.readVInt();\n      if (versionAutoPrefix == false) {\n        suffix = code >>> 1;\n        startBytePos = suffixesReader.getPosition();\n        ste.term.setLength(prefix + suffix);\n        ste.term.grow(ste.term.length());\n        suffixesReader.readBytes(ste.term.bytes(), prefix, suffix);\n        if ((code & 1) == 0) {\n          // A normal term\n          ste.termExists = true;\n          subCode = 0;\n          state.termBlockOrd++;\n          return false;\n        } else {\n          // A sub-block; make sub-FP absolute:\n          ste.termExists = false;\n          subCode = suffixesReader.readVLong();\n          lastSubFP = fp - subCode;\n          //if (DEBUG) {\n          //System.out.println(\"    lastSubFP=\" + lastSubFP);\n          //}\n          return true;\n        }\n      } else {\n        suffix = code >>> 2;\n        startBytePos = suffixesReader.getPosition();\n        ste.term.setLength(prefix + suffix);\n        ste.term.grow(ste.term.length());\n        suffixesReader.readBytes(ste.term.bytes(), prefix, suffix);\n\n        switch(code & 3) {\n        case 0:\n          // A normal term\n          ste.termExists = true;\n          subCode = 0;\n          state.termBlockOrd++;\n          return false;\n        case 1:\n          // A sub-block; make sub-FP absolute:\n          ste.termExists = false;\n          subCode = suffixesReader.readVLong();\n          lastSubFP = fp - subCode;\n          //if (DEBUG) {\n          //System.out.println(\"    lastSubFP=\" + lastSubFP);\n          //}\n          return true;\n        case 2:\n        case 3:\n          // A prefix term: skip it\n          state.termBlockOrd++;\n          suffixesReader.readByte();\n          continue;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9407318969e8504257b4c5764c65755a043e5404","date":1579873617,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnumFrame#nextNonLeaf().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnumFrame#nextNonLeaf().mjava","sourceNew":"  public boolean nextNonLeaf() throws IOException {\n    //if (DEBUG) System.out.println(\"  stef.next ord=\" + ord + \" nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + suffixesReader.getPosition());\n    while (true) {\n      if (nextEnt == entCount) {\n        assert arc == null || (isFloor && isLastInFloor == false): \"isFloor=\" + isFloor + \" isLastInFloor=\" + isLastInFloor;\n        loadNextFloorBlock();\n        if (isLeafBlock) {\n          nextLeaf();\n          return false;\n        } else {\n          continue;\n        }\n      }\n        \n      assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n      nextEnt++;\n      final int code = suffixLengthsReader.readVInt();\n      suffix = code >>> 1;\n      startBytePos = suffixesReader.getPosition();\n      ste.term.setLength(prefix + suffix);\n      ste.term.grow(ste.term.length());\n      suffixesReader.readBytes(ste.term.bytes(), prefix, suffix);\n      if ((code & 1) == 0) {\n        // A normal term\n        ste.termExists = true;\n        subCode = 0;\n        state.termBlockOrd++;\n        return false;\n      } else {\n        // A sub-block; make sub-FP absolute:\n        ste.termExists = false;\n        subCode = suffixLengthsReader.readVLong();\n        lastSubFP = fp - subCode;\n        //if (DEBUG) {\n        //System.out.println(\"    lastSubFP=\" + lastSubFP);\n        //}\n        return true;\n      }\n    }\n  }\n\n","sourceOld":"  public boolean nextNonLeaf() throws IOException {\n    //if (DEBUG) System.out.println(\"  stef.next ord=\" + ord + \" nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + suffixesReader.getPosition());\n    while (true) {\n      if (nextEnt == entCount) {\n        assert arc == null || (isFloor && isLastInFloor == false): \"isFloor=\" + isFloor + \" isLastInFloor=\" + isLastInFloor;\n        loadNextFloorBlock();\n        if (isLeafBlock) {\n          nextLeaf();\n          return false;\n        } else {\n          continue;\n        }\n      }\n        \n      assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n      nextEnt++;\n      final int code = suffixesReader.readVInt();\n      suffix = code >>> 1;\n      startBytePos = suffixesReader.getPosition();\n      ste.term.setLength(prefix + suffix);\n      ste.term.grow(ste.term.length());\n      suffixesReader.readBytes(ste.term.bytes(), prefix, suffix);\n      if ((code & 1) == 0) {\n        // A normal term\n        ste.termExists = true;\n        subCode = 0;\n        state.termBlockOrd++;\n        return false;\n      } else {\n        // A sub-block; make sub-FP absolute:\n        ste.termExists = false;\n        subCode = suffixesReader.readVLong();\n        lastSubFP = fp - subCode;\n        //if (DEBUG) {\n        //System.out.println(\"    lastSubFP=\" + lastSubFP);\n        //}\n        return true;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f4ef2de7b0fd59ef22e20888773ad260c90bfb4"],"3f4ef2de7b0fd59ef22e20888773ad260c90bfb4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"59db5e5f780185e0155d296a323e440a6ecfd3b6":["3e8715d826e588419327562287d5d6a8040d63d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","3e8715d826e588419327562287d5d6a8040d63d6"],"9407318969e8504257b4c5764c65755a043e5404":["b7d165dc88e14a2b2f1cc4ac8133ffdde44acfd5"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"3e8715d826e588419327562287d5d6a8040d63d6":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"b7d165dc88e14a2b2f1cc4ac8133ffdde44acfd5":["59db5e5f780185e0155d296a323e440a6ecfd3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9407318969e8504257b4c5764c65755a043e5404"]},"commit2Childs":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"3f4ef2de7b0fd59ef22e20888773ad260c90bfb4":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"59db5e5f780185e0155d296a323e440a6ecfd3b6":["b7d165dc88e14a2b2f1cc4ac8133ffdde44acfd5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d637064d608752565d4f9f41b2497dfdfdde50e","3f4ef2de7b0fd59ef22e20888773ad260c90bfb4"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"9407318969e8504257b4c5764c65755a043e5404":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["d2638f781be724518ff6c2263d14a48cf6e68017","3e8715d826e588419327562287d5d6a8040d63d6"],"3e8715d826e588419327562287d5d6a8040d63d6":["59db5e5f780185e0155d296a323e440a6ecfd3b6","d2638f781be724518ff6c2263d14a48cf6e68017"],"b7d165dc88e14a2b2f1cc4ac8133ffdde44acfd5":["9407318969e8504257b4c5764c65755a043e5404"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}