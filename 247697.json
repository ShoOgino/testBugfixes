{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsReader.TermsReader#TermsReader(FieldInfo,IndexInput,long,long,long,int,int,FST[Long]).mjava","commits":[{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsReader.TermsReader#TermsReader(FieldInfo,IndexInput,long,long,long,int,int,FST[Long]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsReader.TermsReader#TermsReader(FieldInfo,long,long,long,int,int,FST[Long]).mjava","sourceNew":"    TermsReader(FieldInfo fieldInfo, IndexInput blockIn, long numTerms, long sumTotalTermFreq, long sumDocFreq, int docCount, int longsSize, FST<Long> index) throws IOException {\n      this.fieldInfo = fieldInfo;\n      this.numTerms = numTerms;\n      this.sumTotalTermFreq = sumTotalTermFreq;\n      this.sumDocFreq = sumDocFreq;\n      this.docCount = docCount;\n      this.longsSize = longsSize;\n      this.index = index;\n\n      assert (numTerms & (~0xffffffffL)) == 0;\n      final int numBlocks = (int)(numTerms + INTERVAL - 1) / INTERVAL;\n      this.numSkipInfo = longsSize + 3;\n      this.skipInfo = new long[numBlocks * numSkipInfo];\n      this.statsBlock = new byte[(int)blockIn.readVLong()];\n      this.metaLongsBlock = new byte[(int)blockIn.readVLong()];\n      this.metaBytesBlock = new byte[(int)blockIn.readVLong()];\n\n      int last = 0, next = 0;\n      for (int i = 1; i < numBlocks; i++) {\n        next = numSkipInfo * i;\n        for (int j = 0; j < numSkipInfo; j++) {\n          skipInfo[next + j] = skipInfo[last + j] + blockIn.readVLong();\n        }\n        last = next;\n      }\n      blockIn.readBytes(statsBlock, 0, statsBlock.length);\n      blockIn.readBytes(metaLongsBlock, 0, metaLongsBlock.length);\n      blockIn.readBytes(metaBytesBlock, 0, metaBytesBlock.length);\n    }\n\n","sourceOld":"    TermsReader(FieldInfo fieldInfo, long numTerms, long sumTotalTermFreq, long sumDocFreq, int docCount, int longsSize, FST<Long> index) throws IOException {\n      this.fieldInfo = fieldInfo;\n      this.numTerms = numTerms;\n      this.sumTotalTermFreq = sumTotalTermFreq;\n      this.sumDocFreq = sumDocFreq;\n      this.docCount = docCount;\n      this.longsSize = longsSize;\n      this.index = index;\n\n      assert (numTerms & (~0xffffffffL)) == 0;\n      final int numBlocks = (int)(numTerms + INTERVAL - 1) / INTERVAL;\n      this.numSkipInfo = longsSize + 3;\n      this.skipInfo = new long[numBlocks * numSkipInfo];\n      this.statsBlock = new byte[(int)blockIn.readVLong()];\n      this.metaLongsBlock = new byte[(int)blockIn.readVLong()];\n      this.metaBytesBlock = new byte[(int)blockIn.readVLong()];\n\n      int last = 0, next = 0;\n      for (int i = 1; i < numBlocks; i++) {\n        next = numSkipInfo * i;\n        for (int j = 0; j < numSkipInfo; j++) {\n          skipInfo[next + j] = skipInfo[last + j] + blockIn.readVLong();\n        }\n        last = next;\n      }\n      blockIn.readBytes(statsBlock, 0, statsBlock.length);\n      blockIn.readBytes(metaLongsBlock, 0, metaLongsBlock.length);\n      blockIn.readBytes(metaBytesBlock, 0, metaBytesBlock.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":1,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsReader.TermsReader#TermsReader(FieldInfo,IndexInput,long,long,long,int,int,FST[Long]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsReader.TermsReader#TermsReader(FieldInfo,long,long,long,int,int,FST[Long]).mjava","sourceNew":"    TermsReader(FieldInfo fieldInfo, IndexInput blockIn, long numTerms, long sumTotalTermFreq, long sumDocFreq, int docCount, int longsSize, FST<Long> index) throws IOException {\n      this.fieldInfo = fieldInfo;\n      this.numTerms = numTerms;\n      this.sumTotalTermFreq = sumTotalTermFreq;\n      this.sumDocFreq = sumDocFreq;\n      this.docCount = docCount;\n      this.longsSize = longsSize;\n      this.index = index;\n\n      assert (numTerms & (~0xffffffffL)) == 0;\n      final int numBlocks = (int)(numTerms + INTERVAL - 1) / INTERVAL;\n      this.numSkipInfo = longsSize + 3;\n      this.skipInfo = new long[numBlocks * numSkipInfo];\n      this.statsBlock = new byte[(int)blockIn.readVLong()];\n      this.metaLongsBlock = new byte[(int)blockIn.readVLong()];\n      this.metaBytesBlock = new byte[(int)blockIn.readVLong()];\n\n      int last = 0, next = 0;\n      for (int i = 1; i < numBlocks; i++) {\n        next = numSkipInfo * i;\n        for (int j = 0; j < numSkipInfo; j++) {\n          skipInfo[next + j] = skipInfo[last + j] + blockIn.readVLong();\n        }\n        last = next;\n      }\n      blockIn.readBytes(statsBlock, 0, statsBlock.length);\n      blockIn.readBytes(metaLongsBlock, 0, metaLongsBlock.length);\n      blockIn.readBytes(metaBytesBlock, 0, metaBytesBlock.length);\n    }\n\n","sourceOld":"    TermsReader(FieldInfo fieldInfo, long numTerms, long sumTotalTermFreq, long sumDocFreq, int docCount, int longsSize, FST<Long> index) throws IOException {\n      this.fieldInfo = fieldInfo;\n      this.numTerms = numTerms;\n      this.sumTotalTermFreq = sumTotalTermFreq;\n      this.sumDocFreq = sumDocFreq;\n      this.docCount = docCount;\n      this.longsSize = longsSize;\n      this.index = index;\n\n      assert (numTerms & (~0xffffffffL)) == 0;\n      final int numBlocks = (int)(numTerms + INTERVAL - 1) / INTERVAL;\n      this.numSkipInfo = longsSize + 3;\n      this.skipInfo = new long[numBlocks * numSkipInfo];\n      this.statsBlock = new byte[(int)blockIn.readVLong()];\n      this.metaLongsBlock = new byte[(int)blockIn.readVLong()];\n      this.metaBytesBlock = new byte[(int)blockIn.readVLong()];\n\n      int last = 0, next = 0;\n      for (int i = 1; i < numBlocks; i++) {\n        next = numSkipInfo * i;\n        for (int j = 0; j < numSkipInfo; j++) {\n          skipInfo[next + j] = skipInfo[last + j] + blockIn.readVLong();\n        }\n        last = next;\n      }\n      blockIn.readBytes(statsBlock, 0, statsBlock.length);\n      blockIn.readBytes(metaLongsBlock, 0, metaLongsBlock.length);\n      blockIn.readBytes(metaBytesBlock, 0, metaBytesBlock.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb77022ef17ff655c519a3f6ecd393747ac88bcf","date":1578579386,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsReader.TermsReader#TermsReader(FieldInfo,IndexInput,long,long,long,int,int,FST[Long]).mjava","sourceNew":null,"sourceOld":"    TermsReader(FieldInfo fieldInfo, IndexInput blockIn, long numTerms, long sumTotalTermFreq, long sumDocFreq, int docCount, int longsSize, FST<Long> index) throws IOException {\n      this.fieldInfo = fieldInfo;\n      this.numTerms = numTerms;\n      this.sumTotalTermFreq = sumTotalTermFreq;\n      this.sumDocFreq = sumDocFreq;\n      this.docCount = docCount;\n      this.longsSize = longsSize;\n      this.index = index;\n\n      assert (numTerms & (~0xffffffffL)) == 0;\n      final int numBlocks = (int)(numTerms + INTERVAL - 1) / INTERVAL;\n      this.numSkipInfo = longsSize + 3;\n      this.skipInfo = new long[numBlocks * numSkipInfo];\n      this.statsBlock = new byte[(int)blockIn.readVLong()];\n      this.metaLongsBlock = new byte[(int)blockIn.readVLong()];\n      this.metaBytesBlock = new byte[(int)blockIn.readVLong()];\n\n      int last = 0, next = 0;\n      for (int i = 1; i < numBlocks; i++) {\n        next = numSkipInfo * i;\n        for (int j = 0; j < numSkipInfo; j++) {\n          skipInfo[next + j] = skipInfo[last + j] + blockIn.readVLong();\n        }\n        last = next;\n      }\n      blockIn.readBytes(statsBlock, 0, statsBlock.length);\n      blockIn.readBytes(metaLongsBlock, 0, metaLongsBlock.length);\n      blockIn.readBytes(metaBytesBlock, 0, metaBytesBlock.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06ab276a5660cb79daae8c5ede063531c700a03a","date":1578587874,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsReader.TermsReader#TermsReader(FieldInfo,IndexInput,long,long,long,int,int,FST[Long]).mjava","pathOld":"/dev/null","sourceNew":"    TermsReader(FieldInfo fieldInfo, IndexInput blockIn, long numTerms, long sumTotalTermFreq, long sumDocFreq, int docCount, int longsSize, FST<Long> index) throws IOException {\n      this.fieldInfo = fieldInfo;\n      this.numTerms = numTerms;\n      this.sumTotalTermFreq = sumTotalTermFreq;\n      this.sumDocFreq = sumDocFreq;\n      this.docCount = docCount;\n      this.longsSize = longsSize;\n      this.index = index;\n\n      assert (numTerms & (~0xffffffffL)) == 0;\n      final int numBlocks = (int)(numTerms + INTERVAL - 1) / INTERVAL;\n      this.numSkipInfo = longsSize + 3;\n      this.skipInfo = new long[numBlocks * numSkipInfo];\n      this.statsBlock = new byte[(int)blockIn.readVLong()];\n      this.metaLongsBlock = new byte[(int)blockIn.readVLong()];\n      this.metaBytesBlock = new byte[(int)blockIn.readVLong()];\n\n      int last = 0, next = 0;\n      for (int i = 1; i < numBlocks; i++) {\n        next = numSkipInfo * i;\n        for (int j = 0; j < numSkipInfo; j++) {\n          skipInfo[next + j] = skipInfo[last + j] + blockIn.readVLong();\n        }\n        last = next;\n      }\n      blockIn.readBytes(statsBlock, 0, statsBlock.length);\n      blockIn.readBytes(metaLongsBlock, 0, metaLongsBlock.length);\n      blockIn.readBytes(metaBytesBlock, 0, metaBytesBlock.length);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08a5168e06e037794c0aba7f94f76ff3c09704d2","date":1579264785,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsReader.TermsReader#TermsReader(FieldInfo,IndexInput,long,long,long,int,int,FST[Long]).mjava","sourceNew":null,"sourceOld":"    TermsReader(FieldInfo fieldInfo, IndexInput blockIn, long numTerms, long sumTotalTermFreq, long sumDocFreq, int docCount, int longsSize, FST<Long> index) throws IOException {\n      this.fieldInfo = fieldInfo;\n      this.numTerms = numTerms;\n      this.sumTotalTermFreq = sumTotalTermFreq;\n      this.sumDocFreq = sumDocFreq;\n      this.docCount = docCount;\n      this.longsSize = longsSize;\n      this.index = index;\n\n      assert (numTerms & (~0xffffffffL)) == 0;\n      final int numBlocks = (int)(numTerms + INTERVAL - 1) / INTERVAL;\n      this.numSkipInfo = longsSize + 3;\n      this.skipInfo = new long[numBlocks * numSkipInfo];\n      this.statsBlock = new byte[(int)blockIn.readVLong()];\n      this.metaLongsBlock = new byte[(int)blockIn.readVLong()];\n      this.metaBytesBlock = new byte[(int)blockIn.readVLong()];\n\n      int last = 0, next = 0;\n      for (int i = 1; i < numBlocks; i++) {\n        next = numSkipInfo * i;\n        for (int j = 0; j < numSkipInfo; j++) {\n          skipInfo[next + j] = skipInfo[last + j] + blockIn.readVLong();\n        }\n        last = next;\n      }\n      blockIn.readBytes(statsBlock, 0, statsBlock.length);\n      blockIn.readBytes(metaLongsBlock, 0, metaLongsBlock.length);\n      blockIn.readBytes(metaBytesBlock, 0, metaBytesBlock.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["06ab276a5660cb79daae8c5ede063531c700a03a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"06ab276a5660cb79daae8c5ede063531c700a03a":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["5eb2511ababf862ea11e10761c70ee560cd84510","cb77022ef17ff655c519a3f6ecd393747ac88bcf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5eb2511ababf862ea11e10761c70ee560cd84510","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["06ab276a5660cb79daae8c5ede063531c700a03a"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06ab276a5660cb79daae8c5ede063531c700a03a":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}