{"path":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrServer,String).mjava","commits":[{"id":"9a57adc9bfabbc207ed17740dd86e0a2401ea385","date":1355507623,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrServer,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrServer).mjava","sourceNew":"  protected void createCollection(Map<String,List<Integer>> collectionInfos,\n      String collectionName, int numShards, int numReplicas, int maxShardsPerNode, SolrServer client, String createNodeSetStr) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(OverseerCollectionProcessor.NUM_SLICES, numShards);\n    params.set(OverseerCollectionProcessor.REPLICATION_FACTOR, numReplicas);\n    params.set(OverseerCollectionProcessor.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n    if (createNodeSetStr != null) params.set(OverseerCollectionProcessor.CREATE_NODE_SET, createNodeSetStr);\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<Integer>();\n    list.add(numShards);\n    list.add(numReplicas);\n    collectionInfos.put(collectionName, list);\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n  \n    if (client == null) {\n      final String baseUrl = ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().substring(\n          0,\n          ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().length()\n              - DEFAULT_COLLECTION.length() - 1);\n      \n      createNewSolrServer(\"\", baseUrl).request(request);\n    } else {\n      client.request(request);\n    }\n  }\n\n","sourceOld":"  protected void createCollection(Map<String,List<Integer>> collectionInfos,\n      String collectionName, int numShards, int numReplicas, int maxShardsPerNode, SolrServer client) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(OverseerCollectionProcessor.NUM_SLICES, numShards);\n    params.set(OverseerCollectionProcessor.REPLICATION_FACTOR, numReplicas);\n    params.set(OverseerCollectionProcessor.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<Integer>();\n    list.add(numShards);\n    list.add(numReplicas);\n    list.add(maxShardsPerNode);\n    collectionInfos.put(collectionName, list);\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n  \n    if (client == null) {\n      final String baseUrl = ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().substring(\n          0,\n          ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().length()\n              - DEFAULT_COLLECTION.length() - 1);\n      \n      createNewSolrServer(\"\", baseUrl).request(request);\n    } else {\n      client.request(request);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrServer,String).mjava","pathOld":"/dev/null","sourceNew":"  protected void createCollection(Map<String,List<Integer>> collectionInfos,\n      String collectionName, int numShards, int numReplicas, int maxShardsPerNode, SolrServer client, String createNodeSetStr) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(OverseerCollectionProcessor.NUM_SLICES, numShards);\n    params.set(OverseerCollectionProcessor.REPLICATION_FACTOR, numReplicas);\n    params.set(OverseerCollectionProcessor.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n    if (createNodeSetStr != null) params.set(OverseerCollectionProcessor.CREATE_NODE_SET, createNodeSetStr);\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<Integer>();\n    list.add(numShards);\n    list.add(numReplicas);\n    collectionInfos.put(collectionName, list);\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n  \n    if (client == null) {\n      final String baseUrl = ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().substring(\n          0,\n          ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().length()\n              - DEFAULT_COLLECTION.length() - 1);\n      \n      createNewSolrServer(\"\", baseUrl).request(request);\n    } else {\n      client.request(request);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrServer,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrServer,String).mjava","sourceNew":"  protected void createCollection(Map<String,List<Integer>> collectionInfos,\n      String collectionName, int numShards, int numReplicas, int maxShardsPerNode, SolrServer client, String createNodeSetStr) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(OverseerCollectionProcessor.NUM_SLICES, numShards);\n    params.set(OverseerCollectionProcessor.REPLICATION_FACTOR, numReplicas);\n    params.set(OverseerCollectionProcessor.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n    if (createNodeSetStr != null) params.set(OverseerCollectionProcessor.CREATE_NODE_SET, createNodeSetStr);\n\n    int clientIndex = clients.size() > 1 ? random().nextInt(2) : 0;\n    List<Integer> list = new ArrayList<Integer>();\n    list.add(numShards);\n    list.add(numReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n  \n    if (client == null) {\n      final String baseUrl = ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().substring(\n          0,\n          ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().length()\n              - DEFAULT_COLLECTION.length() - 1);\n      \n      createNewSolrServer(\"\", baseUrl).request(request);\n    } else {\n      client.request(request);\n    }\n  }\n\n","sourceOld":"  protected void createCollection(Map<String,List<Integer>> collectionInfos,\n      String collectionName, int numShards, int numReplicas, int maxShardsPerNode, SolrServer client, String createNodeSetStr) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(OverseerCollectionProcessor.NUM_SLICES, numShards);\n    params.set(OverseerCollectionProcessor.REPLICATION_FACTOR, numReplicas);\n    params.set(OverseerCollectionProcessor.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n    if (createNodeSetStr != null) params.set(OverseerCollectionProcessor.CREATE_NODE_SET, createNodeSetStr);\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<Integer>();\n    list.add(numShards);\n    list.add(numReplicas);\n    collectionInfos.put(collectionName, list);\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n  \n    if (client == null) {\n      final String baseUrl = ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().substring(\n          0,\n          ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().length()\n              - DEFAULT_COLLECTION.length() - 1);\n      \n      createNewSolrServer(\"\", baseUrl).request(request);\n    } else {\n      client.request(request);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrServer,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrServer,String).mjava","sourceNew":"  protected void createCollection(Map<String,List<Integer>> collectionInfos,\n      String collectionName, int numShards, int numReplicas, int maxShardsPerNode, SolrServer client, String createNodeSetStr) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(OverseerCollectionProcessor.NUM_SLICES, numShards);\n    params.set(OverseerCollectionProcessor.REPLICATION_FACTOR, numReplicas);\n    params.set(OverseerCollectionProcessor.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n    if (createNodeSetStr != null) params.set(OverseerCollectionProcessor.CREATE_NODE_SET, createNodeSetStr);\n\n    int clientIndex = clients.size() > 1 ? random().nextInt(2) : 0;\n    List<Integer> list = new ArrayList<Integer>();\n    list.add(numShards);\n    list.add(numReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n  \n    if (client == null) {\n      final String baseUrl = ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().substring(\n          0,\n          ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().length()\n              - DEFAULT_COLLECTION.length() - 1);\n      \n      createNewSolrServer(\"\", baseUrl).request(request);\n    } else {\n      client.request(request);\n    }\n  }\n\n","sourceOld":"  protected void createCollection(Map<String,List<Integer>> collectionInfos,\n      String collectionName, int numShards, int numReplicas, int maxShardsPerNode, SolrServer client, String createNodeSetStr) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(OverseerCollectionProcessor.NUM_SLICES, numShards);\n    params.set(OverseerCollectionProcessor.REPLICATION_FACTOR, numReplicas);\n    params.set(OverseerCollectionProcessor.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n    if (createNodeSetStr != null) params.set(OverseerCollectionProcessor.CREATE_NODE_SET, createNodeSetStr);\n\n    int clientIndex = random().nextInt(2);\n    List<Integer> list = new ArrayList<Integer>();\n    list.add(numShards);\n    list.add(numReplicas);\n    collectionInfos.put(collectionName, list);\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n  \n    if (client == null) {\n      final String baseUrl = ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().substring(\n          0,\n          ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().length()\n              - DEFAULT_COLLECTION.length() - 1);\n      \n      createNewSolrServer(\"\", baseUrl).request(request);\n    } else {\n      client.request(request);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ea7454b4afcb5dc9f7504f83d77b134df2b7c57","date":1391252295,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrServer,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrServer,String).mjava","sourceNew":"  protected void createCollection(Map<String,List<Integer>> collectionInfos,\n      String collectionName, int numShards, int numReplicas, int maxShardsPerNode, SolrServer client, String createNodeSetStr) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(OverseerCollectionProcessor.NUM_SLICES, numShards);\n    params.set(OverseerCollectionProcessor.REPLICATION_FACTOR, numReplicas);\n    params.set(OverseerCollectionProcessor.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n    if (createNodeSetStr != null) params.set(OverseerCollectionProcessor.CREATE_NODE_SET, createNodeSetStr);\n\n    int clientIndex = clients.size() > 1 ? random().nextInt(2) : 0;\n    List<Integer> list = new ArrayList<Integer>();\n    list.add(numShards);\n    list.add(numReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n  \n    if (client == null) {\n      final String baseUrl = ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().substring(\n          0,\n          ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().length()\n              - DEFAULT_COLLECTION.length() - 1);\n      \n      SolrServer aClient = createNewSolrServer(\"\", baseUrl);\n      aClient.request(request);\n      aClient.shutdown();\n    } else {\n      client.request(request);\n    }\n  }\n\n","sourceOld":"  protected void createCollection(Map<String,List<Integer>> collectionInfos,\n      String collectionName, int numShards, int numReplicas, int maxShardsPerNode, SolrServer client, String createNodeSetStr) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(OverseerCollectionProcessor.NUM_SLICES, numShards);\n    params.set(OverseerCollectionProcessor.REPLICATION_FACTOR, numReplicas);\n    params.set(OverseerCollectionProcessor.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n    if (createNodeSetStr != null) params.set(OverseerCollectionProcessor.CREATE_NODE_SET, createNodeSetStr);\n\n    int clientIndex = clients.size() > 1 ? random().nextInt(2) : 0;\n    List<Integer> list = new ArrayList<Integer>();\n    list.add(numShards);\n    list.add(numReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n  \n    if (client == null) {\n      final String baseUrl = ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().substring(\n          0,\n          ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().length()\n              - DEFAULT_COLLECTION.length() - 1);\n      \n      createNewSolrServer(\"\", baseUrl).request(request);\n    } else {\n      client.request(request);\n    }\n  }\n\n","bugFix":["d334938e866757266d62025305edd378ac505a06"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrServer,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrServer,String).mjava","sourceNew":"  protected void createCollection(Map<String,List<Integer>> collectionInfos,\n      String collectionName, int numShards, int numReplicas, int maxShardsPerNode, SolrServer client, String createNodeSetStr) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(OverseerCollectionProcessor.NUM_SLICES, numShards);\n    params.set(OverseerCollectionProcessor.REPLICATION_FACTOR, numReplicas);\n    params.set(OverseerCollectionProcessor.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n    if (createNodeSetStr != null) params.set(OverseerCollectionProcessor.CREATE_NODE_SET, createNodeSetStr);\n\n    int clientIndex = clients.size() > 1 ? random().nextInt(2) : 0;\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n  \n    if (client == null) {\n      final String baseUrl = ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().substring(\n          0,\n          ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().length()\n              - DEFAULT_COLLECTION.length() - 1);\n      \n      SolrServer aClient = createNewSolrServer(\"\", baseUrl);\n      aClient.request(request);\n      aClient.shutdown();\n    } else {\n      client.request(request);\n    }\n  }\n\n","sourceOld":"  protected void createCollection(Map<String,List<Integer>> collectionInfos,\n      String collectionName, int numShards, int numReplicas, int maxShardsPerNode, SolrServer client, String createNodeSetStr) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(OverseerCollectionProcessor.NUM_SLICES, numShards);\n    params.set(OverseerCollectionProcessor.REPLICATION_FACTOR, numReplicas);\n    params.set(OverseerCollectionProcessor.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n    if (createNodeSetStr != null) params.set(OverseerCollectionProcessor.CREATE_NODE_SET, createNodeSetStr);\n\n    int clientIndex = clients.size() > 1 ? random().nextInt(2) : 0;\n    List<Integer> list = new ArrayList<Integer>();\n    list.add(numShards);\n    list.add(numReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n  \n    if (client == null) {\n      final String baseUrl = ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().substring(\n          0,\n          ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().length()\n              - DEFAULT_COLLECTION.length() - 1);\n      \n      SolrServer aClient = createNewSolrServer(\"\", baseUrl);\n      aClient.request(request);\n      aClient.shutdown();\n    } else {\n      client.request(request);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8f0529666139e562ee655d544b667bfedab70c7","date":1394717900,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrServer,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrServer,String).mjava","sourceNew":"  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, int numShards, int numReplicas, int maxShardsPerNode, SolrServer client, String createNodeSetStr) throws SolrServerException, IOException {\n    // TODO: Use CollectionAdminRequest for this test\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(OverseerCollectionProcessor.NUM_SLICES, numShards);\n    params.set(OverseerCollectionProcessor.REPLICATION_FACTOR, numReplicas);\n    params.set(OverseerCollectionProcessor.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n    if (createNodeSetStr != null) params.set(OverseerCollectionProcessor.CREATE_NODE_SET, createNodeSetStr);\n\n    int clientIndex = clients.size() > 1 ? random().nextInt(2) : 0;\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().substring(\n          0,\n          ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().length()\n              - DEFAULT_COLLECTION.length() - 1);\n      \n      SolrServer aClient = createNewSolrServer(\"\", baseUrl);\n      res.setResponse(aClient.request(request));\n      aClient.shutdown();\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","sourceOld":"  protected void createCollection(Map<String,List<Integer>> collectionInfos,\n      String collectionName, int numShards, int numReplicas, int maxShardsPerNode, SolrServer client, String createNodeSetStr) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(OverseerCollectionProcessor.NUM_SLICES, numShards);\n    params.set(OverseerCollectionProcessor.REPLICATION_FACTOR, numReplicas);\n    params.set(OverseerCollectionProcessor.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n    if (createNodeSetStr != null) params.set(OverseerCollectionProcessor.CREATE_NODE_SET, createNodeSetStr);\n\n    int clientIndex = clients.size() > 1 ? random().nextInt(2) : 0;\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n  \n    if (client == null) {\n      final String baseUrl = ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().substring(\n          0,\n          ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().length()\n              - DEFAULT_COLLECTION.length() - 1);\n      \n      SolrServer aClient = createNewSolrServer(\"\", baseUrl);\n      aClient.request(request);\n      aClient.shutdown();\n    } else {\n      client.request(request);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad7bdba3e91cf3373cda2e52239cb761fc0b452","date":1408019547,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrServer,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrServer,String).mjava","sourceNew":"  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, int numShards, int numReplicas, int maxShardsPerNode, SolrServer client, String createNodeSetStr) throws SolrServerException, IOException {\n    // TODO: Use CollectionAdminRequest for this test\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(OverseerCollectionProcessor.NUM_SLICES, numShards);\n    params.set(ZkStateReader.REPLICATION_FACTOR, numReplicas);\n    params.set(ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n    if (createNodeSetStr != null) params.set(OverseerCollectionProcessor.CREATE_NODE_SET, createNodeSetStr);\n\n    int clientIndex = clients.size() > 1 ? random().nextInt(2) : 0;\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().substring(\n          0,\n          ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().length()\n              - DEFAULT_COLLECTION.length() - 1);\n      \n      SolrServer aClient = createNewSolrServer(\"\", baseUrl);\n      res.setResponse(aClient.request(request));\n      aClient.shutdown();\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","sourceOld":"  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, int numShards, int numReplicas, int maxShardsPerNode, SolrServer client, String createNodeSetStr) throws SolrServerException, IOException {\n    // TODO: Use CollectionAdminRequest for this test\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(OverseerCollectionProcessor.NUM_SLICES, numShards);\n    params.set(OverseerCollectionProcessor.REPLICATION_FACTOR, numReplicas);\n    params.set(OverseerCollectionProcessor.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n    if (createNodeSetStr != null) params.set(OverseerCollectionProcessor.CREATE_NODE_SET, createNodeSetStr);\n\n    int clientIndex = clients.size() > 1 ? random().nextInt(2) : 0;\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().substring(\n          0,\n          ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().length()\n              - DEFAULT_COLLECTION.length() - 1);\n      \n      SolrServer aClient = createNewSolrServer(\"\", baseUrl);\n      res.setResponse(aClient.request(request));\n      aClient.shutdown();\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(Map[String,List[Integer]],String,int,int,int,SolrServer,String).mjava","sourceNew":"  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, int numShards, int numReplicas, int maxShardsPerNode, SolrClient client, String createNodeSetStr) throws SolrServerException, IOException {\n    // TODO: Use CollectionAdminRequest for this test\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(OverseerCollectionProcessor.NUM_SLICES, numShards);\n    params.set(ZkStateReader.REPLICATION_FACTOR, numReplicas);\n    params.set(ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n    if (createNodeSetStr != null) params.set(OverseerCollectionProcessor.CREATE_NODE_SET, createNodeSetStr);\n\n    int clientIndex = clients.size() > 1 ? random().nextInt(2) : 0;\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = ((HttpSolrClient) clients.get(clientIndex)).getBaseURL().substring(\n          0,\n          ((HttpSolrClient) clients.get(clientIndex)).getBaseURL().length()\n              - DEFAULT_COLLECTION.length() - 1);\n      \n      SolrClient aClient = createNewSolrClient(\"\", baseUrl);\n      res.setResponse(aClient.request(request));\n      aClient.shutdown();\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","sourceOld":"  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, int numShards, int numReplicas, int maxShardsPerNode, SolrServer client, String createNodeSetStr) throws SolrServerException, IOException {\n    // TODO: Use CollectionAdminRequest for this test\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(OverseerCollectionProcessor.NUM_SLICES, numShards);\n    params.set(ZkStateReader.REPLICATION_FACTOR, numReplicas);\n    params.set(ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n    if (createNodeSetStr != null) params.set(OverseerCollectionProcessor.CREATE_NODE_SET, createNodeSetStr);\n\n    int clientIndex = clients.size() > 1 ? random().nextInt(2) : 0;\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().substring(\n          0,\n          ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().length()\n              - DEFAULT_COLLECTION.length() - 1);\n      \n      SolrServer aClient = createNewSolrServer(\"\", baseUrl);\n      res.setResponse(aClient.request(request));\n      aClient.shutdown();\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7ea7454b4afcb5dc9f7504f83d77b134df2b7c57":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["9a57adc9bfabbc207ed17740dd86e0a2401ea385"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9a57adc9bfabbc207ed17740dd86e0a2401ea385"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7ea7454b4afcb5dc9f7504f83d77b134df2b7c57"],"9a57adc9bfabbc207ed17740dd86e0a2401ea385":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e8f0529666139e562ee655d544b667bfedab70c7":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["9a57adc9bfabbc207ed17740dd86e0a2401ea385","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["e8f0529666139e562ee655d544b667bfedab70c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"7ea7454b4afcb5dc9f7504f83d77b134df2b7c57":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["7ea7454b4afcb5dc9f7504f83d77b134df2b7c57","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["e8f0529666139e562ee655d544b667bfedab70c7"],"9a57adc9bfabbc207ed17740dd86e0a2401ea385":["849494cf2f3a96af5c8c84995108ddd8456fcd04","d3fcb70cf561547c7bb1506e0cf32ca7b1287064","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"e8f0529666139e562ee655d544b667bfedab70c7":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","9a57adc9bfabbc207ed17740dd86e0a2401ea385"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}