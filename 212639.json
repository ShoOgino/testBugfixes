{"path":"solr/core/src/java/org/apache/solr/handler/admin/SecurityConfHandler#doEdit(SolrQueryRequest,SolrQueryResponse,String,String,Object).mjava","commits":[{"id":"6bdcb86c29922edae9a14852e636303bc52df094","date":1438887454,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SecurityConfHandler#doEdit(SolrQueryRequest,SolrQueryResponse,String,String,Object).mjava","pathOld":"/dev/null","sourceNew":"  private void doEdit(SolrQueryRequest req, SolrQueryResponse rsp, String path, final String key, final Object plugin)\n      throws IOException {\n    ConfigEditablePlugin configEditablePlugin = null;\n\n    if (plugin == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No \" + key + \" plugin configured\");\n    }\n    if (plugin instanceof ConfigEditablePlugin) {\n      configEditablePlugin = (ConfigEditablePlugin) plugin;\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, key + \" plugin is not editable\");\n    }\n\n    if (req.getContentStreams() == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No contentStream\");\n    }\n    List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp);\n    if (ops == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands\");\n    }\n    for (; ; ) {\n      ConfigData data = getSecurityProps(true);\n      Map<String, Object> latestConf = (Map<String, Object>) data.data.get(key);\n      if (latestConf == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No configuration present for \" + key);\n      }\n      List<CommandOperation> commandsCopy = CommandOperation.clone(ops);\n      Map<String, Object> out = configEditablePlugin.edit(Utils.getDeepCopy(latestConf, 4) , commandsCopy);\n      if (out == null) {\n        List<Map> errs = CommandOperation.captureErrors(commandsCopy);\n        if (!errs.isEmpty()) {\n          rsp.add(CommandOperation.ERR_MSGS, errs);\n          return;\n        }\n        //no edits\n        return;\n      } else {\n        if(!Objects.equals(latestConf.get(\"class\") , out.get(\"class\"))){\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"class cannot be modified\");\n        }\n        Map meta = getMapValue(out, \"\");\n        meta.put(\"v\", data.version+1);//encode the expected zkversion\n        data.data.put(key, out);\n        if(persistConf(\"/security.json\", Utils.toJSON(data.data), data.version)) return;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"170ef9c82c0d27d4151feff316ba63fbedd91bbf","date":1477436680,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SecurityConfHandler#doEdit(SolrQueryRequest,SolrQueryResponse,String,String,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SecurityConfHandler#doEdit(SolrQueryRequest,SolrQueryResponse,String,String,Object).mjava","sourceNew":"  private void doEdit(SolrQueryRequest req, SolrQueryResponse rsp, String path, final String key, final Object plugin)\n      throws IOException {\n    ConfigEditablePlugin configEditablePlugin = null;\n\n    if (plugin == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No \" + key + \" plugin configured\");\n    }\n    if (plugin instanceof ConfigEditablePlugin) {\n      configEditablePlugin = (ConfigEditablePlugin) plugin;\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, key + \" plugin is not editable\");\n    }\n\n    if (req.getContentStreams() == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No contentStream\");\n    }\n    List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp);\n    if (ops == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands\");\n    }\n    for (int count = 1; count <= 3 ; count++ ) {\n      SecurityConfig securityConfig = getSecurityConfig(true);\n      Map<String, Object> data = securityConfig.getData();\n      Map<String, Object> latestConf = (Map<String, Object>) data.get(key);\n      if (latestConf == null) {\n        throw new SolrException(SERVER_ERROR, \"No configuration present for \" + key);\n      }\n      List<CommandOperation> commandsCopy = CommandOperation.clone(ops);\n      Map<String, Object> out = configEditablePlugin.edit(Utils.getDeepCopy(latestConf, 4) , commandsCopy);\n      if (out == null) {\n        List<Map> errs = CommandOperation.captureErrors(commandsCopy);\n        if (!errs.isEmpty()) {\n          rsp.add(CommandOperation.ERR_MSGS, errs);\n          return;\n        }\n        log.debug(\"No edits made\");\n        return;\n      } else {\n        if(!Objects.equals(latestConf.get(\"class\") , out.get(\"class\"))){\n          throw new SolrException(SERVER_ERROR, \"class cannot be modified\");\n        }\n        Map meta = getMapValue(out, \"\");\n        meta.put(\"v\", securityConfig.getVersion()+1);//encode the expected zkversion\n        data.put(key, out);\n        \n        if(persistConf(securityConfig)) {\n          securityConfEdited();\n          return;\n        }\n      }\n      log.debug(\"Security edit operation failed {} time(s)\" + count);\n    }\n    throw new SolrException(SERVER_ERROR, \"Failed to persist security config after 3 attempts. Giving up\");\n  }\n\n","sourceOld":"  private void doEdit(SolrQueryRequest req, SolrQueryResponse rsp, String path, final String key, final Object plugin)\n      throws IOException {\n    ConfigEditablePlugin configEditablePlugin = null;\n\n    if (plugin == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No \" + key + \" plugin configured\");\n    }\n    if (plugin instanceof ConfigEditablePlugin) {\n      configEditablePlugin = (ConfigEditablePlugin) plugin;\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, key + \" plugin is not editable\");\n    }\n\n    if (req.getContentStreams() == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No contentStream\");\n    }\n    List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp);\n    if (ops == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands\");\n    }\n    for (; ; ) {\n      ConfigData data = getSecurityProps(true);\n      Map<String, Object> latestConf = (Map<String, Object>) data.data.get(key);\n      if (latestConf == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No configuration present for \" + key);\n      }\n      List<CommandOperation> commandsCopy = CommandOperation.clone(ops);\n      Map<String, Object> out = configEditablePlugin.edit(Utils.getDeepCopy(latestConf, 4) , commandsCopy);\n      if (out == null) {\n        List<Map> errs = CommandOperation.captureErrors(commandsCopy);\n        if (!errs.isEmpty()) {\n          rsp.add(CommandOperation.ERR_MSGS, errs);\n          return;\n        }\n        //no edits\n        return;\n      } else {\n        if(!Objects.equals(latestConf.get(\"class\") , out.get(\"class\"))){\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"class cannot be modified\");\n        }\n        Map meta = getMapValue(out, \"\");\n        meta.put(\"v\", data.version+1);//encode the expected zkversion\n        data.data.put(key, out);\n        if(persistConf(\"/security.json\", Utils.toJSON(data.data), data.version)) return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["6afb0ba86024b96e8b34cfc2e15562239dc36360"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b363b110592b02d7f488aff0dbe40a53d3ce81df","date":1477469211,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SecurityConfHandler#doEdit(SolrQueryRequest,SolrQueryResponse,String,String,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SecurityConfHandler#doEdit(SolrQueryRequest,SolrQueryResponse,String,String,Object).mjava","sourceNew":"  private void doEdit(SolrQueryRequest req, SolrQueryResponse rsp, String path, final String key, final Object plugin)\n      throws IOException {\n    ConfigEditablePlugin configEditablePlugin = null;\n\n    if (plugin == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No \" + key + \" plugin configured\");\n    }\n    if (plugin instanceof ConfigEditablePlugin) {\n      configEditablePlugin = (ConfigEditablePlugin) plugin;\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, key + \" plugin is not editable\");\n    }\n\n    if (req.getContentStreams() == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No contentStream\");\n    }\n    List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp);\n    if (ops == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands\");\n    }\n    for (int count = 1; count <= 3 ; count++ ) {\n      SecurityConfig securityConfig = getSecurityConfig(true);\n      Map<String, Object> data = securityConfig.getData();\n      Map<String, Object> latestConf = (Map<String, Object>) data.get(key);\n      if (latestConf == null) {\n        throw new SolrException(SERVER_ERROR, \"No configuration present for \" + key);\n      }\n      List<CommandOperation> commandsCopy = CommandOperation.clone(ops);\n      Map<String, Object> out = configEditablePlugin.edit(Utils.getDeepCopy(latestConf, 4) , commandsCopy);\n      if (out == null) {\n        List<Map> errs = CommandOperation.captureErrors(commandsCopy);\n        if (!errs.isEmpty()) {\n          rsp.add(CommandOperation.ERR_MSGS, errs);\n          return;\n        }\n        log.debug(\"No edits made\");\n        return;\n      } else {\n        if(!Objects.equals(latestConf.get(\"class\") , out.get(\"class\"))){\n          throw new SolrException(SERVER_ERROR, \"class cannot be modified\");\n        }\n        Map meta = getMapValue(out, \"\");\n        meta.put(\"v\", securityConfig.getVersion()+1);//encode the expected zkversion\n        data.put(key, out);\n        \n        if(persistConf(securityConfig)) {\n          securityConfEdited();\n          return;\n        }\n      }\n      log.debug(\"Security edit operation failed {} time(s)\" + count);\n    }\n    throw new SolrException(SERVER_ERROR, \"Failed to persist security config after 3 attempts. Giving up\");\n  }\n\n","sourceOld":"  private void doEdit(SolrQueryRequest req, SolrQueryResponse rsp, String path, final String key, final Object plugin)\n      throws IOException {\n    ConfigEditablePlugin configEditablePlugin = null;\n\n    if (plugin == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No \" + key + \" plugin configured\");\n    }\n    if (plugin instanceof ConfigEditablePlugin) {\n      configEditablePlugin = (ConfigEditablePlugin) plugin;\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, key + \" plugin is not editable\");\n    }\n\n    if (req.getContentStreams() == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No contentStream\");\n    }\n    List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp);\n    if (ops == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands\");\n    }\n    for (; ; ) {\n      ConfigData data = getSecurityProps(true);\n      Map<String, Object> latestConf = (Map<String, Object>) data.data.get(key);\n      if (latestConf == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No configuration present for \" + key);\n      }\n      List<CommandOperation> commandsCopy = CommandOperation.clone(ops);\n      Map<String, Object> out = configEditablePlugin.edit(Utils.getDeepCopy(latestConf, 4) , commandsCopy);\n      if (out == null) {\n        List<Map> errs = CommandOperation.captureErrors(commandsCopy);\n        if (!errs.isEmpty()) {\n          rsp.add(CommandOperation.ERR_MSGS, errs);\n          return;\n        }\n        //no edits\n        return;\n      } else {\n        if(!Objects.equals(latestConf.get(\"class\") , out.get(\"class\"))){\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"class cannot be modified\");\n        }\n        Map meta = getMapValue(out, \"\");\n        meta.put(\"v\", data.version+1);//encode the expected zkversion\n        data.data.put(key, out);\n        if(persistConf(\"/security.json\", Utils.toJSON(data.data), data.version)) return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SecurityConfHandler#doEdit(SolrQueryRequest,SolrQueryResponse,String,String,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SecurityConfHandler#doEdit(SolrQueryRequest,SolrQueryResponse,String,String,Object).mjava","sourceNew":"  private void doEdit(SolrQueryRequest req, SolrQueryResponse rsp, String path, final String key, final Object plugin)\n      throws IOException {\n    ConfigEditablePlugin configEditablePlugin = null;\n\n    if (plugin == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No \" + key + \" plugin configured\");\n    }\n    if (plugin instanceof ConfigEditablePlugin) {\n      configEditablePlugin = (ConfigEditablePlugin) plugin;\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, key + \" plugin is not editable\");\n    }\n\n    if (req.getContentStreams() == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No contentStream\");\n    }\n    List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp);\n    if (ops == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands\");\n    }\n    for (int count = 1; count <= 3 ; count++ ) {\n      SecurityConfig securityConfig = getSecurityConfig(true);\n      Map<String, Object> data = securityConfig.getData();\n      Map<String, Object> latestConf = (Map<String, Object>) data.get(key);\n      if (latestConf == null) {\n        throw new SolrException(SERVER_ERROR, \"No configuration present for \" + key);\n      }\n      List<CommandOperation> commandsCopy = CommandOperation.clone(ops);\n      Map<String, Object> out = configEditablePlugin.edit(Utils.getDeepCopy(latestConf, 4) , commandsCopy);\n      if (out == null) {\n        List<Map> errs = CommandOperation.captureErrors(commandsCopy);\n        if (!errs.isEmpty()) {\n          rsp.add(CommandOperation.ERR_MSGS, errs);\n          return;\n        }\n        log.debug(\"No edits made\");\n        return;\n      } else {\n        if(!Objects.equals(latestConf.get(\"class\") , out.get(\"class\"))){\n          throw new SolrException(SERVER_ERROR, \"class cannot be modified\");\n        }\n        Map meta = getMapValue(out, \"\");\n        meta.put(\"v\", securityConfig.getVersion()+1);//encode the expected zkversion\n        data.put(key, out);\n        \n        if(persistConf(securityConfig)) {\n          securityConfEdited();\n          return;\n        }\n      }\n      log.debug(\"Security edit operation failed {} time(s)\" + count);\n    }\n    throw new SolrException(SERVER_ERROR, \"Failed to persist security config after 3 attempts. Giving up\");\n  }\n\n","sourceOld":"  private void doEdit(SolrQueryRequest req, SolrQueryResponse rsp, String path, final String key, final Object plugin)\n      throws IOException {\n    ConfigEditablePlugin configEditablePlugin = null;\n\n    if (plugin == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No \" + key + \" plugin configured\");\n    }\n    if (plugin instanceof ConfigEditablePlugin) {\n      configEditablePlugin = (ConfigEditablePlugin) plugin;\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, key + \" plugin is not editable\");\n    }\n\n    if (req.getContentStreams() == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No contentStream\");\n    }\n    List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp);\n    if (ops == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands\");\n    }\n    for (; ; ) {\n      ConfigData data = getSecurityProps(true);\n      Map<String, Object> latestConf = (Map<String, Object>) data.data.get(key);\n      if (latestConf == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No configuration present for \" + key);\n      }\n      List<CommandOperation> commandsCopy = CommandOperation.clone(ops);\n      Map<String, Object> out = configEditablePlugin.edit(Utils.getDeepCopy(latestConf, 4) , commandsCopy);\n      if (out == null) {\n        List<Map> errs = CommandOperation.captureErrors(commandsCopy);\n        if (!errs.isEmpty()) {\n          rsp.add(CommandOperation.ERR_MSGS, errs);\n          return;\n        }\n        //no edits\n        return;\n      } else {\n        if(!Objects.equals(latestConf.get(\"class\") , out.get(\"class\"))){\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"class cannot be modified\");\n        }\n        Map meta = getMapValue(out, \"\");\n        meta.put(\"v\", data.version+1);//encode the expected zkversion\n        data.data.put(key, out);\n        if(persistConf(\"/security.json\", Utils.toJSON(data.data), data.version)) return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d21112928e2aedcec0c17025bc0e91f8fcfcf30","date":1494423367,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SecurityConfHandler#doEdit(SolrQueryRequest,SolrQueryResponse,String,String,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SecurityConfHandler#doEdit(SolrQueryRequest,SolrQueryResponse,String,String,Object).mjava","sourceNew":"  private void doEdit(SolrQueryRequest req, SolrQueryResponse rsp, String path, final String key, final Object plugin)\n      throws IOException {\n    ConfigEditablePlugin configEditablePlugin = null;\n\n    if (plugin == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No \" + key + \" plugin configured\");\n    }\n    if (plugin instanceof ConfigEditablePlugin) {\n      configEditablePlugin = (ConfigEditablePlugin) plugin;\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, key + \" plugin is not editable\");\n    }\n\n    if (req.getContentStreams() == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No contentStream\");\n    }\n    List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp.getValues());\n    if (ops == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands\");\n    }\n    for (int count = 1; count <= 3 ; count++ ) {\n      SecurityConfig securityConfig = getSecurityConfig(true);\n      Map<String, Object> data = securityConfig.getData();\n      Map<String, Object> latestConf = (Map<String, Object>) data.get(key);\n      if (latestConf == null) {\n        throw new SolrException(SERVER_ERROR, \"No configuration present for \" + key);\n      }\n      List<CommandOperation> commandsCopy = CommandOperation.clone(ops);\n      Map<String, Object> out = configEditablePlugin.edit(Utils.getDeepCopy(latestConf, 4) , commandsCopy);\n      if (out == null) {\n        List<Map> errs = CommandOperation.captureErrors(commandsCopy);\n        if (!errs.isEmpty()) {\n          rsp.add(CommandOperation.ERR_MSGS, errs);\n          return;\n        }\n        log.debug(\"No edits made\");\n        return;\n      } else {\n        if(!Objects.equals(latestConf.get(\"class\") , out.get(\"class\"))){\n          throw new SolrException(SERVER_ERROR, \"class cannot be modified\");\n        }\n        Map meta = getMapValue(out, \"\");\n        meta.put(\"v\", securityConfig.getVersion()+1);//encode the expected zkversion\n        data.put(key, out);\n        \n        if(persistConf(securityConfig)) {\n          securityConfEdited();\n          return;\n        }\n      }\n      log.debug(\"Security edit operation failed {} time(s)\" + count);\n    }\n    throw new SolrException(SERVER_ERROR, \"Failed to persist security config after 3 attempts. Giving up\");\n  }\n\n","sourceOld":"  private void doEdit(SolrQueryRequest req, SolrQueryResponse rsp, String path, final String key, final Object plugin)\n      throws IOException {\n    ConfigEditablePlugin configEditablePlugin = null;\n\n    if (plugin == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No \" + key + \" plugin configured\");\n    }\n    if (plugin instanceof ConfigEditablePlugin) {\n      configEditablePlugin = (ConfigEditablePlugin) plugin;\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, key + \" plugin is not editable\");\n    }\n\n    if (req.getContentStreams() == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No contentStream\");\n    }\n    List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp);\n    if (ops == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands\");\n    }\n    for (int count = 1; count <= 3 ; count++ ) {\n      SecurityConfig securityConfig = getSecurityConfig(true);\n      Map<String, Object> data = securityConfig.getData();\n      Map<String, Object> latestConf = (Map<String, Object>) data.get(key);\n      if (latestConf == null) {\n        throw new SolrException(SERVER_ERROR, \"No configuration present for \" + key);\n      }\n      List<CommandOperation> commandsCopy = CommandOperation.clone(ops);\n      Map<String, Object> out = configEditablePlugin.edit(Utils.getDeepCopy(latestConf, 4) , commandsCopy);\n      if (out == null) {\n        List<Map> errs = CommandOperation.captureErrors(commandsCopy);\n        if (!errs.isEmpty()) {\n          rsp.add(CommandOperation.ERR_MSGS, errs);\n          return;\n        }\n        log.debug(\"No edits made\");\n        return;\n      } else {\n        if(!Objects.equals(latestConf.get(\"class\") , out.get(\"class\"))){\n          throw new SolrException(SERVER_ERROR, \"class cannot be modified\");\n        }\n        Map meta = getMapValue(out, \"\");\n        meta.put(\"v\", securityConfig.getVersion()+1);//encode the expected zkversion\n        data.put(key, out);\n        \n        if(persistConf(securityConfig)) {\n          securityConfEdited();\n          return;\n        }\n      }\n      log.debug(\"Security edit operation failed {} time(s)\" + count);\n    }\n    throw new SolrException(SERVER_ERROR, \"Failed to persist security config after 3 attempts. Giving up\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SecurityConfHandler#doEdit(SolrQueryRequest,SolrQueryResponse,String,String,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SecurityConfHandler#doEdit(SolrQueryRequest,SolrQueryResponse,String,String,Object).mjava","sourceNew":"  private void doEdit(SolrQueryRequest req, SolrQueryResponse rsp, String path, final String key, final Object plugin)\n      throws IOException {\n    ConfigEditablePlugin configEditablePlugin = null;\n\n    if (plugin == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No \" + key + \" plugin configured\");\n    }\n    if (plugin instanceof ConfigEditablePlugin) {\n      configEditablePlugin = (ConfigEditablePlugin) plugin;\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, key + \" plugin is not editable\");\n    }\n\n    if (req.getContentStreams() == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No contentStream\");\n    }\n    List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp.getValues());\n    if (ops == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands\");\n    }\n    for (int count = 1; count <= 3 ; count++ ) {\n      SecurityConfig securityConfig = getSecurityConfig(true);\n      Map<String, Object> data = securityConfig.getData();\n      Map<String, Object> latestConf = (Map<String, Object>) data.get(key);\n      if (latestConf == null) {\n        throw new SolrException(SERVER_ERROR, \"No configuration present for \" + key);\n      }\n      List<CommandOperation> commandsCopy = CommandOperation.clone(ops);\n      Map<String, Object> out = configEditablePlugin.edit(Utils.getDeepCopy(latestConf, 4) , commandsCopy);\n      if (out == null) {\n        List<Map> errs = CommandOperation.captureErrors(commandsCopy);\n        if (!errs.isEmpty()) {\n          rsp.add(CommandOperation.ERR_MSGS, errs);\n          return;\n        }\n        log.debug(\"No edits made\");\n        return;\n      } else {\n        if(!Objects.equals(latestConf.get(\"class\") , out.get(\"class\"))){\n          throw new SolrException(SERVER_ERROR, \"class cannot be modified\");\n        }\n        Map meta = getMapValue(out, \"\");\n        meta.put(\"v\", securityConfig.getVersion()+1);//encode the expected zkversion\n        data.put(key, out);\n        \n        if(persistConf(securityConfig)) {\n          securityConfEdited();\n          return;\n        }\n      }\n      log.debug(\"Security edit operation failed {} time(s)\" + count);\n    }\n    throw new SolrException(SERVER_ERROR, \"Failed to persist security config after 3 attempts. Giving up\");\n  }\n\n","sourceOld":"  private void doEdit(SolrQueryRequest req, SolrQueryResponse rsp, String path, final String key, final Object plugin)\n      throws IOException {\n    ConfigEditablePlugin configEditablePlugin = null;\n\n    if (plugin == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No \" + key + \" plugin configured\");\n    }\n    if (plugin instanceof ConfigEditablePlugin) {\n      configEditablePlugin = (ConfigEditablePlugin) plugin;\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, key + \" plugin is not editable\");\n    }\n\n    if (req.getContentStreams() == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No contentStream\");\n    }\n    List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp);\n    if (ops == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands\");\n    }\n    for (int count = 1; count <= 3 ; count++ ) {\n      SecurityConfig securityConfig = getSecurityConfig(true);\n      Map<String, Object> data = securityConfig.getData();\n      Map<String, Object> latestConf = (Map<String, Object>) data.get(key);\n      if (latestConf == null) {\n        throw new SolrException(SERVER_ERROR, \"No configuration present for \" + key);\n      }\n      List<CommandOperation> commandsCopy = CommandOperation.clone(ops);\n      Map<String, Object> out = configEditablePlugin.edit(Utils.getDeepCopy(latestConf, 4) , commandsCopy);\n      if (out == null) {\n        List<Map> errs = CommandOperation.captureErrors(commandsCopy);\n        if (!errs.isEmpty()) {\n          rsp.add(CommandOperation.ERR_MSGS, errs);\n          return;\n        }\n        log.debug(\"No edits made\");\n        return;\n      } else {\n        if(!Objects.equals(latestConf.get(\"class\") , out.get(\"class\"))){\n          throw new SolrException(SERVER_ERROR, \"class cannot be modified\");\n        }\n        Map meta = getMapValue(out, \"\");\n        meta.put(\"v\", securityConfig.getVersion()+1);//encode the expected zkversion\n        data.put(key, out);\n        \n        if(persistConf(securityConfig)) {\n          securityConfEdited();\n          return;\n        }\n      }\n      log.debug(\"Security edit operation failed {} time(s)\" + count);\n    }\n    throw new SolrException(SERVER_ERROR, \"Failed to persist security config after 3 attempts. Giving up\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6afb0ba86024b96e8b34cfc2e15562239dc36360","date":1579768208,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SecurityConfHandler#doEdit(SolrQueryRequest,SolrQueryResponse,String,String,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SecurityConfHandler#doEdit(SolrQueryRequest,SolrQueryResponse,String,String,Object).mjava","sourceNew":"  private void doEdit(SolrQueryRequest req, SolrQueryResponse rsp, String path, final String key, final Object plugin)\n      throws IOException {\n    ConfigEditablePlugin configEditablePlugin = null;\n\n    if (plugin == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No \" + key + \" plugin configured\");\n    }\n    if (plugin instanceof ConfigEditablePlugin) {\n      configEditablePlugin = (ConfigEditablePlugin) plugin;\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, key + \" plugin is not editable\");\n    }\n\n    if (req.getContentStreams() == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No contentStream\");\n    }\n    List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp.getValues());\n    if (ops == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands\");\n    }\n    for (int count = 1; count <= 3 ; count++ ) {\n      SecurityConfig securityConfig = getSecurityConfig(true);\n      Map<String, Object> data = securityConfig.getData();\n      Map<String, Object> latestConf = (Map<String, Object>) data.get(key);\n      if (latestConf == null) {\n        throw new SolrException(SERVER_ERROR, \"No configuration present for \" + key);\n      }\n      List<CommandOperation> commandsCopy = CommandOperation.clone(ops);\n      Map<String, Object> out = configEditablePlugin.edit(Utils.getDeepCopy(latestConf, 4) , commandsCopy);\n      if (out == null) {\n        List<Map> errs = CommandOperation.captureErrors(commandsCopy);\n        if (!errs.isEmpty()) {\n          rsp.add(CommandOperation.ERR_MSGS, errs);\n          return;\n        }\n        log.debug(\"No edits made\");\n        return;\n      } else {\n        if(!Objects.equals(latestConf.get(\"class\") , out.get(\"class\"))){\n          throw new SolrException(SERVER_ERROR, \"class cannot be modified\");\n        }\n        Map meta = getMapValue(out, \"\");\n        meta.put(\"v\", securityConfig.getVersion()+1);//encode the expected zkversion\n        data.put(key, out);\n        \n        if(persistConf(securityConfig)) {\n          securityConfEdited();\n          return;\n        }\n      }\n      log.debug(\"Security edit operation failed {} time(s)\", count);\n    }\n    throw new SolrException(SERVER_ERROR, \"Failed to persist security config after 3 attempts. Giving up\");\n  }\n\n","sourceOld":"  private void doEdit(SolrQueryRequest req, SolrQueryResponse rsp, String path, final String key, final Object plugin)\n      throws IOException {\n    ConfigEditablePlugin configEditablePlugin = null;\n\n    if (plugin == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No \" + key + \" plugin configured\");\n    }\n    if (plugin instanceof ConfigEditablePlugin) {\n      configEditablePlugin = (ConfigEditablePlugin) plugin;\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, key + \" plugin is not editable\");\n    }\n\n    if (req.getContentStreams() == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No contentStream\");\n    }\n    List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp.getValues());\n    if (ops == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands\");\n    }\n    for (int count = 1; count <= 3 ; count++ ) {\n      SecurityConfig securityConfig = getSecurityConfig(true);\n      Map<String, Object> data = securityConfig.getData();\n      Map<String, Object> latestConf = (Map<String, Object>) data.get(key);\n      if (latestConf == null) {\n        throw new SolrException(SERVER_ERROR, \"No configuration present for \" + key);\n      }\n      List<CommandOperation> commandsCopy = CommandOperation.clone(ops);\n      Map<String, Object> out = configEditablePlugin.edit(Utils.getDeepCopy(latestConf, 4) , commandsCopy);\n      if (out == null) {\n        List<Map> errs = CommandOperation.captureErrors(commandsCopy);\n        if (!errs.isEmpty()) {\n          rsp.add(CommandOperation.ERR_MSGS, errs);\n          return;\n        }\n        log.debug(\"No edits made\");\n        return;\n      } else {\n        if(!Objects.equals(latestConf.get(\"class\") , out.get(\"class\"))){\n          throw new SolrException(SERVER_ERROR, \"class cannot be modified\");\n        }\n        Map meta = getMapValue(out, \"\");\n        meta.put(\"v\", securityConfig.getVersion()+1);//encode the expected zkversion\n        data.put(key, out);\n        \n        if(persistConf(securityConfig)) {\n          securityConfEdited();\n          return;\n        }\n      }\n      log.debug(\"Security edit operation failed {} time(s)\" + count);\n    }\n    throw new SolrException(SERVER_ERROR, \"Failed to persist security config after 3 attempts. Giving up\");\n  }\n\n","bugFix":["170ef9c82c0d27d4151feff316ba63fbedd91bbf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba055e19afc289adcb5bedaf68513793a7254012","date":1591268575,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SecurityConfHandler#doEdit(SolrQueryRequest,SolrQueryResponse,String,String,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SecurityConfHandler#doEdit(SolrQueryRequest,SolrQueryResponse,String,String,Object).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private void doEdit(SolrQueryRequest req, SolrQueryResponse rsp, String path, final String key, final Object plugin)\n      throws IOException {\n    ConfigEditablePlugin configEditablePlugin = null;\n\n    if (plugin == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No \" + key + \" plugin configured\");\n    }\n    if (plugin instanceof ConfigEditablePlugin) {\n      configEditablePlugin = (ConfigEditablePlugin) plugin;\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, key + \" plugin is not editable\");\n    }\n\n    if (req.getContentStreams() == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No contentStream\");\n    }\n    List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp.getValues());\n    if (ops == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands\");\n    }\n    for (int count = 1; count <= 3 ; count++ ) {\n      SecurityConfig securityConfig = getSecurityConfig(true);\n      Map<String, Object> data = securityConfig.getData();\n      Map<String, Object> latestConf = (Map<String, Object>) data.get(key);\n      if (latestConf == null) {\n        throw new SolrException(SERVER_ERROR, \"No configuration present for \" + key);\n      }\n      List<CommandOperation> commandsCopy = CommandOperation.clone(ops);\n      Map<String, Object> out = configEditablePlugin.edit(Utils.getDeepCopy(latestConf, 4) , commandsCopy);\n      if (out == null) {\n        List<Map> errs = CommandOperation.captureErrors(commandsCopy);\n        if (!errs.isEmpty()) {\n          rsp.add(CommandOperation.ERR_MSGS, errs);\n          return;\n        }\n        log.debug(\"No edits made\");\n        return;\n      } else {\n        if(!Objects.equals(latestConf.get(\"class\") , out.get(\"class\"))){\n          throw new SolrException(SERVER_ERROR, \"class cannot be modified\");\n        }\n        Map meta = getMapValue(out, \"\");\n        meta.put(\"v\", securityConfig.getVersion()+1);//encode the expected zkversion\n        data.put(key, out);\n        \n        if(persistConf(securityConfig)) {\n          securityConfEdited();\n          return;\n        }\n      }\n      log.debug(\"Security edit operation failed {} time(s)\", count);\n    }\n    throw new SolrException(SERVER_ERROR, \"Failed to persist security config after 3 attempts. Giving up\");\n  }\n\n","sourceOld":"  private void doEdit(SolrQueryRequest req, SolrQueryResponse rsp, String path, final String key, final Object plugin)\n      throws IOException {\n    ConfigEditablePlugin configEditablePlugin = null;\n\n    if (plugin == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No \" + key + \" plugin configured\");\n    }\n    if (plugin instanceof ConfigEditablePlugin) {\n      configEditablePlugin = (ConfigEditablePlugin) plugin;\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, key + \" plugin is not editable\");\n    }\n\n    if (req.getContentStreams() == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No contentStream\");\n    }\n    List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp.getValues());\n    if (ops == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands\");\n    }\n    for (int count = 1; count <= 3 ; count++ ) {\n      SecurityConfig securityConfig = getSecurityConfig(true);\n      Map<String, Object> data = securityConfig.getData();\n      Map<String, Object> latestConf = (Map<String, Object>) data.get(key);\n      if (latestConf == null) {\n        throw new SolrException(SERVER_ERROR, \"No configuration present for \" + key);\n      }\n      List<CommandOperation> commandsCopy = CommandOperation.clone(ops);\n      Map<String, Object> out = configEditablePlugin.edit(Utils.getDeepCopy(latestConf, 4) , commandsCopy);\n      if (out == null) {\n        List<Map> errs = CommandOperation.captureErrors(commandsCopy);\n        if (!errs.isEmpty()) {\n          rsp.add(CommandOperation.ERR_MSGS, errs);\n          return;\n        }\n        log.debug(\"No edits made\");\n        return;\n      } else {\n        if(!Objects.equals(latestConf.get(\"class\") , out.get(\"class\"))){\n          throw new SolrException(SERVER_ERROR, \"class cannot be modified\");\n        }\n        Map meta = getMapValue(out, \"\");\n        meta.put(\"v\", securityConfig.getVersion()+1);//encode the expected zkversion\n        data.put(key, out);\n        \n        if(persistConf(securityConfig)) {\n          securityConfEdited();\n          return;\n        }\n      }\n      log.debug(\"Security edit operation failed {} time(s)\", count);\n    }\n    throw new SolrException(SERVER_ERROR, \"Failed to persist security config after 3 attempts. Giving up\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2d21112928e2aedcec0c17025bc0e91f8fcfcf30":["b363b110592b02d7f488aff0dbe40a53d3ce81df"],"6bdcb86c29922edae9a14852e636303bc52df094":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["b363b110592b02d7f488aff0dbe40a53d3ce81df","2d21112928e2aedcec0c17025bc0e91f8fcfcf30"],"6afb0ba86024b96e8b34cfc2e15562239dc36360":["2d21112928e2aedcec0c17025bc0e91f8fcfcf30"],"170ef9c82c0d27d4151feff316ba63fbedd91bbf":["6bdcb86c29922edae9a14852e636303bc52df094"],"ba055e19afc289adcb5bedaf68513793a7254012":["6afb0ba86024b96e8b34cfc2e15562239dc36360"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["6bdcb86c29922edae9a14852e636303bc52df094","b363b110592b02d7f488aff0dbe40a53d3ce81df"],"b363b110592b02d7f488aff0dbe40a53d3ce81df":["6bdcb86c29922edae9a14852e636303bc52df094","170ef9c82c0d27d4151feff316ba63fbedd91bbf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba055e19afc289adcb5bedaf68513793a7254012"]},"commit2Childs":{"2d21112928e2aedcec0c17025bc0e91f8fcfcf30":["e9017cf144952056066919f1ebc7897ff9bd71b1","6afb0ba86024b96e8b34cfc2e15562239dc36360"],"6bdcb86c29922edae9a14852e636303bc52df094":["170ef9c82c0d27d4151feff316ba63fbedd91bbf","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","b363b110592b02d7f488aff0dbe40a53d3ce81df"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"6afb0ba86024b96e8b34cfc2e15562239dc36360":["ba055e19afc289adcb5bedaf68513793a7254012"],"170ef9c82c0d27d4151feff316ba63fbedd91bbf":["b363b110592b02d7f488aff0dbe40a53d3ce81df"],"ba055e19afc289adcb5bedaf68513793a7254012":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6bdcb86c29922edae9a14852e636303bc52df094"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"b363b110592b02d7f488aff0dbe40a53d3ce81df":["2d21112928e2aedcec0c17025bc0e91f8fcfcf30","e9017cf144952056066919f1ebc7897ff9bd71b1","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}