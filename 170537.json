{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testReusableTokenStream().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testReusableTokenStream().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testReusableTokenStream().mjava","sourceNew":"  public void testReusableTokenStream() throws Exception {\n    Analyzer a = new ShingleAnalyzerWrapper(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false), 2);\n    assertAnalyzesToReuse(a, \"please divide into shingles\",\n        new String[] { \"please\", \"please divide\", \"divide\", \"divide into\", \"into\", \"into shingles\", \"shingles\" },\n        new int[] { 0, 0, 7, 7, 14, 14, 19 },\n        new int[] { 6, 13, 13, 18, 18, 27, 27 },\n        new int[] { 1, 0, 1, 0, 1, 0, 1 });\n    assertAnalyzesToReuse(a, \"divide me up again\",\n        new String[] { \"divide\", \"divide me\", \"me\", \"me up\", \"up\", \"up again\", \"again\" },\n        new int[] { 0, 0, 7, 7, 10, 10, 13 },\n        new int[] { 6, 9, 9, 12, 12, 18, 18 },\n        new int[] { 1, 0, 1, 0, 1, 0, 1 });\n  }\n\n","sourceOld":"  public void testReusableTokenStream() throws Exception {\n    Analyzer a = new ShingleAnalyzerWrapper(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false), 2);\n    assertAnalyzesToReuse(a, \"please divide into shingles\",\n        new String[] { \"please\", \"please divide\", \"divide\", \"divide into\", \"into\", \"into shingles\", \"shingles\" },\n        new int[] { 0, 0, 7, 7, 14, 14, 19 },\n        new int[] { 6, 13, 13, 18, 18, 27, 27 },\n        new int[] { 1, 0, 1, 0, 1, 0, 1 });\n    assertAnalyzesToReuse(a, \"divide me up again\",\n        new String[] { \"divide\", \"divide me\", \"me\", \"me up\", \"up\", \"up again\", \"again\" },\n        new int[] { 0, 0, 7, 7, 10, 10, 13 },\n        new int[] { 6, 9, 9, 12, 12, 18, 18 },\n        new int[] { 1, 0, 1, 0, 1, 0, 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b735b811bfe6055a98336ee8dfd1e43cf2dc0","date":1379858263,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testReusableTokenStream().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testReusableTokenStream().mjava","sourceNew":"  public void testReusableTokenStream() throws Exception {\n    Analyzer a = new ShingleAnalyzerWrapper(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false), 2);\n    assertAnalyzesTo(a, \"please divide into shingles\",\n        new String[] { \"please\", \"please divide\", \"divide\", \"divide into\", \"into\", \"into shingles\", \"shingles\" },\n        new int[] { 0, 0, 7, 7, 14, 14, 19 },\n        new int[] { 6, 13, 13, 18, 18, 27, 27 },\n        new int[] { 1, 0, 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"divide me up again\",\n        new String[] { \"divide\", \"divide me\", \"me\", \"me up\", \"up\", \"up again\", \"again\" },\n        new int[] { 0, 0, 7, 7, 10, 10, 13 },\n        new int[] { 6, 9, 9, 12, 12, 18, 18 },\n        new int[] { 1, 0, 1, 0, 1, 0, 1 });\n  }\n\n","sourceOld":"  public void testReusableTokenStream() throws Exception {\n    Analyzer a = new ShingleAnalyzerWrapper(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false), 2);\n    assertAnalyzesToReuse(a, \"please divide into shingles\",\n        new String[] { \"please\", \"please divide\", \"divide\", \"divide into\", \"into\", \"into shingles\", \"shingles\" },\n        new int[] { 0, 0, 7, 7, 14, 14, 19 },\n        new int[] { 6, 13, 13, 18, 18, 27, 27 },\n        new int[] { 1, 0, 1, 0, 1, 0, 1 });\n    assertAnalyzesToReuse(a, \"divide me up again\",\n        new String[] { \"divide\", \"divide me\", \"me\", \"me up\", \"up\", \"up again\", \"again\" },\n        new int[] { 0, 0, 7, 7, 10, 10, 13 },\n        new int[] { 6, 9, 9, 12, 12, 18, 18 },\n        new int[] { 1, 0, 1, 0, 1, 0, 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testReusableTokenStream().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testReusableTokenStream().mjava","sourceNew":"  public void testReusableTokenStream() throws Exception {\n    Analyzer a = new ShingleAnalyzerWrapper(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false), 2);\n    assertAnalyzesTo(a, \"please divide into shingles\",\n        new String[] { \"please\", \"please divide\", \"divide\", \"divide into\", \"into\", \"into shingles\", \"shingles\" },\n        new int[] { 0, 0, 7, 7, 14, 14, 19 },\n        new int[] { 6, 13, 13, 18, 18, 27, 27 },\n        new int[] { 1, 0, 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"divide me up again\",\n        new String[] { \"divide\", \"divide me\", \"me\", \"me up\", \"up\", \"up again\", \"again\" },\n        new int[] { 0, 0, 7, 7, 10, 10, 13 },\n        new int[] { 6, 9, 9, 12, 12, 18, 18 },\n        new int[] { 1, 0, 1, 0, 1, 0, 1 });\n    a.close();\n  }\n\n","sourceOld":"  public void testReusableTokenStream() throws Exception {\n    Analyzer a = new ShingleAnalyzerWrapper(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false), 2);\n    assertAnalyzesTo(a, \"please divide into shingles\",\n        new String[] { \"please\", \"please divide\", \"divide\", \"divide into\", \"into\", \"into shingles\", \"shingles\" },\n        new int[] { 0, 0, 7, 7, 14, 14, 19 },\n        new int[] { 6, 13, 13, 18, 18, 27, 27 },\n        new int[] { 1, 0, 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"divide me up again\",\n        new String[] { \"divide\", \"divide me\", \"me\", \"me up\", \"up\", \"up again\", \"again\" },\n        new int[] { 0, 0, 7, 7, 10, 10, 13 },\n        new int[] { 6, 9, 9, 12, 12, 18, 18 },\n        new int[] { 1, 0, 1, 0, 1, 0, 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testReusableTokenStream().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testReusableTokenStream().mjava","sourceNew":"  public void testReusableTokenStream() throws Exception {\n    Analyzer a = new ShingleAnalyzerWrapper(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false), 2);\n    assertAnalyzesTo(a, \"please divide into shingles\",\n        new String[] { \"please\", \"please divide\", \"divide\", \"divide into\", \"into\", \"into shingles\", \"shingles\" },\n        new int[] { 0, 0, 7, 7, 14, 14, 19 },\n        new int[] { 6, 13, 13, 18, 18, 27, 27 },\n        new int[] { 1, 0, 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"divide me up again\",\n        new String[] { \"divide\", \"divide me\", \"me\", \"me up\", \"up\", \"up again\", \"again\" },\n        new int[] { 0, 0, 7, 7, 10, 10, 13 },\n        new int[] { 6, 9, 9, 12, 12, 18, 18 },\n        new int[] { 1, 0, 1, 0, 1, 0, 1 });\n    a.close();\n  }\n\n","sourceOld":"  public void testReusableTokenStream() throws Exception {\n    Analyzer a = new ShingleAnalyzerWrapper(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false), 2);\n    assertAnalyzesTo(a, \"please divide into shingles\",\n        new String[] { \"please\", \"please divide\", \"divide\", \"divide into\", \"into\", \"into shingles\", \"shingles\" },\n        new int[] { 0, 0, 7, 7, 14, 14, 19 },\n        new int[] { 6, 13, 13, 18, 18, 27, 27 },\n        new int[] { 1, 0, 1, 0, 1, 0, 1 });\n    assertAnalyzesTo(a, \"divide me up again\",\n        new String[] { \"divide\", \"divide me\", \"me\", \"me up\", \"up\", \"up again\", \"again\" },\n        new int[] { 0, 0, 7, 7, 10, 10, 13 },\n        new int[] { 6, 9, 9, 12, 12, 18, 18 },\n        new int[] { 1, 0, 1, 0, 1, 0, 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df1b735b811bfe6055a98336ee8dfd1e43cf2dc0":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["df1b735b811bfe6055a98336ee8dfd1e43cf2dc0","a56958d7f71a28824f20031ffbb2e13502a0274e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["df1b735b811bfe6055a98336ee8dfd1e43cf2dc0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56958d7f71a28824f20031ffbb2e13502a0274e"]},"commit2Childs":{"df1b735b811bfe6055a98336ee8dfd1e43cf2dc0":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["df1b735b811bfe6055a98336ee8dfd1e43cf2dc0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}