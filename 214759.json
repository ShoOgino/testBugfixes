{"path":"solr/core/src/java/org/apache/solr/cloud/rule/Rule#parseRule(String).mjava","commits":[{"id":"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe","date":1430750405,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/Rule#parseRule(String).mjava","pathOld":"/dev/null","sourceNew":"  public static Map parseRule(String s) {\n    Map<String, String> result = new LinkedHashMap<>();\n    s = s.trim();\n    List<String> keyVals = StrUtils.splitSmart(s, ',');\n    for (String kv : keyVals) {\n      List<String> keyVal = StrUtils.splitSmart(kv, ':');\n      if (keyVal.size() != 2) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid rule. should have only key and val in : \" + kv);\n      }\n      if (keyVal.get(0).trim().length() == 0 || keyVal.get(1).trim().length() == 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid rule. should have key and val in : \" + kv);\n      }\n      result.put(keyVal.get(0).trim(), keyVal.get(1).trim());\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8891f085f71282bb3ece1b1732b68f07813a3","date":1591912889,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/Rule#parseRule(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/Rule#parseRule(String).mjava","sourceNew":"  @SuppressWarnings({\"rawtypes\"})\n  public static Map parseRule(String s) {\n    Map<String, String> result = new LinkedHashMap<>();\n    s = s.trim();\n    List<String> keyVals = StrUtils.splitSmart(s, ',');\n    for (String kv : keyVals) {\n      List<String> keyVal = StrUtils.splitSmart(kv, ':');\n      if (keyVal.size() != 2) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid rule. should have only key and val in : \" + kv);\n      }\n      if (keyVal.get(0).trim().length() == 0 || keyVal.get(1).trim().length() == 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid rule. should have key and val in : \" + kv);\n      }\n      result.put(keyVal.get(0).trim(), keyVal.get(1).trim());\n    }\n    return result;\n  }\n\n","sourceOld":"  public static Map parseRule(String s) {\n    Map<String, String> result = new LinkedHashMap<>();\n    s = s.trim();\n    List<String> keyVals = StrUtils.splitSmart(s, ',');\n    for (String kv : keyVals) {\n      List<String> keyVal = StrUtils.splitSmart(kv, ':');\n      if (keyVal.size() != 2) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid rule. should have only key and val in : \" + kv);\n      }\n      if (keyVal.get(0).trim().length() == 0 || keyVal.get(1).trim().length() == 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid rule. should have key and val in : \" + kv);\n      }\n      result.put(keyVal.get(0).trim(), keyVal.get(1).trim());\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06a8891f085f71282bb3ece1b1732b68f07813a3":["8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06a8891f085f71282bb3ece1b1732b68f07813a3"]},"commit2Childs":{"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}