{"path":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdScoreCollector#OrdScoreCollector(int,int,DocValuesProducer,int,IntIntHashMap).mjava","commits":[{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdScoreCollector#OrdScoreCollector(int,int,DocValuesProducer,int,IntIntHashMap).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdScoreCollector#OrdScoreCollector(int,int,SortedDocValues,int,IntIntHashMap).mjava","sourceNew":"    public OrdScoreCollector(int maxDoc,\n                             int segments,\n                             DocValuesProducer collapseValuesProducer,\n                             int nullPolicy,\n                             IntIntHashMap boostDocsMap) throws IOException {\n      this.maxDoc = maxDoc;\n      this.contexts = new LeafReaderContext[segments];\n      this.collapsedSet = new FixedBitSet(maxDoc);\n      this.collapseValuesProducer = collapseValuesProducer;\n      this.collapseValues = collapseValuesProducer.getSorted(null);\n      \n      int valueCount = collapseValues.getValueCount();\n      if(collapseValues instanceof MultiDocValues.MultiSortedDocValues) {\n        this.multiSortedDocValues = (MultiDocValues.MultiSortedDocValues)collapseValues;\n        this.ordinalMap = multiSortedDocValues.mapping;\n      }\n      this.ords = new int[valueCount];\n      Arrays.fill(this.ords, -1);\n      this.scores = new float[valueCount];\n      Arrays.fill(this.scores, -Float.MAX_VALUE);\n      this.nullPolicy = nullPolicy;\n      if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        nullScores = new FloatArrayList();\n      }\n\n      if(boostDocsMap != null) {\n        this.boosts = true;\n        this.boostOrds = new IntArrayList();\n        this.boostDocs = new IntArrayList();\n        int[] bd = new int[boostDocsMap.size()];\n        Iterator<IntIntCursor> it =  boostDocsMap.iterator();\n        int index = -1;\n        while(it.hasNext()) {\n          IntIntCursor cursor = it.next();\n          bd[++index] = cursor.key;\n        }\n\n        Arrays.sort(bd);\n        this.mergeBoost = new MergeBoost(bd);\n      }\n    }\n\n","sourceOld":"    public OrdScoreCollector(int maxDoc,\n                             int segments,\n                             SortedDocValues collapseValues,\n                             int nullPolicy,\n                             IntIntHashMap boostDocsMap) {\n      this.maxDoc = maxDoc;\n      this.contexts = new LeafReaderContext[segments];\n      this.collapsedSet = new FixedBitSet(maxDoc);\n      this.collapseValues = collapseValues;\n      int valueCount = collapseValues.getValueCount();\n      if(collapseValues instanceof MultiDocValues.MultiSortedDocValues) {\n        this.multiSortedDocValues = (MultiDocValues.MultiSortedDocValues)collapseValues;\n        this.ordinalMap = multiSortedDocValues.mapping;\n      }\n      this.ords = new int[valueCount];\n      Arrays.fill(this.ords, -1);\n      this.scores = new float[valueCount];\n      Arrays.fill(this.scores, -Float.MAX_VALUE);\n      this.nullPolicy = nullPolicy;\n      if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        nullScores = new FloatArrayList();\n      }\n\n      if(boostDocsMap != null) {\n        this.boosts = true;\n        this.boostOrds = new IntArrayList();\n        this.boostDocs = new IntArrayList();\n        int[] bd = new int[boostDocsMap.size()];\n        Iterator<IntIntCursor> it =  boostDocsMap.iterator();\n        int index = -1;\n        while(it.hasNext()) {\n          IntIntCursor cursor = it.next();\n          bd[++index] = cursor.key;\n        }\n\n        Arrays.sort(bd);\n        this.mergeBoost = new MergeBoost(bd);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdScoreCollector#OrdScoreCollector(int,int,DocValuesProducer,int,IntIntHashMap).mjava","pathOld":"/dev/null","sourceNew":"    public OrdScoreCollector(int maxDoc,\n                             int segments,\n                             DocValuesProducer collapseValuesProducer,\n                             int nullPolicy,\n                             IntIntHashMap boostDocsMap) throws IOException {\n      this.maxDoc = maxDoc;\n      this.contexts = new LeafReaderContext[segments];\n      this.collapsedSet = new FixedBitSet(maxDoc);\n      this.collapseValuesProducer = collapseValuesProducer;\n      this.collapseValues = collapseValuesProducer.getSorted(null);\n      \n      int valueCount = collapseValues.getValueCount();\n      if(collapseValues instanceof MultiDocValues.MultiSortedDocValues) {\n        this.multiSortedDocValues = (MultiDocValues.MultiSortedDocValues)collapseValues;\n        this.ordinalMap = multiSortedDocValues.mapping;\n      }\n      this.ords = new int[valueCount];\n      Arrays.fill(this.ords, -1);\n      this.scores = new float[valueCount];\n      Arrays.fill(this.scores, -Float.MAX_VALUE);\n      this.nullPolicy = nullPolicy;\n      if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        nullScores = new FloatArrayList();\n      }\n\n      if(boostDocsMap != null) {\n        this.boosts = true;\n        this.boostOrds = new IntArrayList();\n        this.boostDocs = new IntArrayList();\n        int[] bd = new int[boostDocsMap.size()];\n        Iterator<IntIntCursor> it =  boostDocsMap.iterator();\n        int index = -1;\n        while(it.hasNext()) {\n          IntIntCursor cursor = it.next();\n          bd[++index] = cursor.key;\n        }\n\n        Arrays.sort(bd);\n        this.mergeBoost = new MergeBoost(bd);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdScoreCollector#OrdScoreCollector(int,int,DocValuesProducer,int,IntIntHashMap).mjava","pathOld":"/dev/null","sourceNew":"    public OrdScoreCollector(int maxDoc,\n                             int segments,\n                             DocValuesProducer collapseValuesProducer,\n                             int nullPolicy,\n                             IntIntHashMap boostDocsMap) throws IOException {\n      this.maxDoc = maxDoc;\n      this.contexts = new LeafReaderContext[segments];\n      this.collapsedSet = new FixedBitSet(maxDoc);\n      this.collapseValuesProducer = collapseValuesProducer;\n      this.collapseValues = collapseValuesProducer.getSorted(null);\n      \n      int valueCount = collapseValues.getValueCount();\n      if(collapseValues instanceof MultiDocValues.MultiSortedDocValues) {\n        this.multiSortedDocValues = (MultiDocValues.MultiSortedDocValues)collapseValues;\n        this.ordinalMap = multiSortedDocValues.mapping;\n      }\n      this.ords = new int[valueCount];\n      Arrays.fill(this.ords, -1);\n      this.scores = new float[valueCount];\n      Arrays.fill(this.scores, -Float.MAX_VALUE);\n      this.nullPolicy = nullPolicy;\n      if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        nullScores = new FloatArrayList();\n      }\n\n      if(boostDocsMap != null) {\n        this.boosts = true;\n        this.boostOrds = new IntArrayList();\n        this.boostDocs = new IntArrayList();\n        int[] bd = new int[boostDocsMap.size()];\n        Iterator<IntIntCursor> it =  boostDocsMap.iterator();\n        int index = -1;\n        while(it.hasNext()) {\n          IntIntCursor cursor = it.next();\n          bd[++index] = cursor.key;\n        }\n\n        Arrays.sort(bd);\n        this.mergeBoost = new MergeBoost(bd);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ece7e3f03c890461bce71fb45142b75807c28a4e","date":1583713564,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdScoreCollector#OrdScoreCollector(int,int,DocValuesProducer,int,IntIntHashMap,IndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdScoreCollector#OrdScoreCollector(int,int,DocValuesProducer,int,IntIntHashMap).mjava","sourceNew":"    public OrdScoreCollector(int maxDoc,\n                             int segments,\n                             DocValuesProducer collapseValuesProducer,\n                             int nullPolicy,\n                             IntIntHashMap boostDocsMap,\n                             IndexSearcher searcher) throws IOException {\n      this.maxDoc = maxDoc;\n      this.contexts = new LeafReaderContext[segments];\n      List<LeafReaderContext> con = searcher.getTopReaderContext().leaves();\n      for(int i=0; i<con.size(); i++) {\n        contexts[i] = con.get(i);\n      }\n\n      this.collapsedSet = new FixedBitSet(maxDoc);\n      this.collapseValuesProducer = collapseValuesProducer;\n      this.collapseValues = collapseValuesProducer.getSorted(null);\n      \n      int valueCount = collapseValues.getValueCount();\n      if(collapseValues instanceof MultiDocValues.MultiSortedDocValues) {\n        this.multiSortedDocValues = (MultiDocValues.MultiSortedDocValues)collapseValues;\n        this.ordinalMap = multiSortedDocValues.mapping;\n      }\n      this.ords = new int[valueCount];\n      Arrays.fill(this.ords, -1);\n      this.scores = new float[valueCount];\n      Arrays.fill(this.scores, -Float.MAX_VALUE);\n      this.nullPolicy = nullPolicy;\n      if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        nullScores = new FloatArrayList();\n      }\n\n      if(boostDocsMap != null) {\n        this.boosts = true;\n        this.boostOrds = new IntArrayList();\n        this.boostDocs = new IntArrayList();\n        int[] bd = new int[boostDocsMap.size()];\n        Iterator<IntIntCursor> it =  boostDocsMap.iterator();\n        int index = -1;\n        while(it.hasNext()) {\n          IntIntCursor cursor = it.next();\n          bd[++index] = cursor.key;\n        }\n\n        Arrays.sort(bd);\n        this.mergeBoost = new MergeBoost(bd);\n      }\n    }\n\n","sourceOld":"    public OrdScoreCollector(int maxDoc,\n                             int segments,\n                             DocValuesProducer collapseValuesProducer,\n                             int nullPolicy,\n                             IntIntHashMap boostDocsMap) throws IOException {\n      this.maxDoc = maxDoc;\n      this.contexts = new LeafReaderContext[segments];\n      this.collapsedSet = new FixedBitSet(maxDoc);\n      this.collapseValuesProducer = collapseValuesProducer;\n      this.collapseValues = collapseValuesProducer.getSorted(null);\n      \n      int valueCount = collapseValues.getValueCount();\n      if(collapseValues instanceof MultiDocValues.MultiSortedDocValues) {\n        this.multiSortedDocValues = (MultiDocValues.MultiSortedDocValues)collapseValues;\n        this.ordinalMap = multiSortedDocValues.mapping;\n      }\n      this.ords = new int[valueCount];\n      Arrays.fill(this.ords, -1);\n      this.scores = new float[valueCount];\n      Arrays.fill(this.scores, -Float.MAX_VALUE);\n      this.nullPolicy = nullPolicy;\n      if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        nullScores = new FloatArrayList();\n      }\n\n      if(boostDocsMap != null) {\n        this.boosts = true;\n        this.boostOrds = new IntArrayList();\n        this.boostDocs = new IntArrayList();\n        int[] bd = new int[boostDocsMap.size()];\n        Iterator<IntIntCursor> it =  boostDocsMap.iterator();\n        int index = -1;\n        while(it.hasNext()) {\n          IntIntCursor cursor = it.next();\n          bd[++index] = cursor.key;\n        }\n\n        Arrays.sort(bd);\n        this.mergeBoost = new MergeBoost(bd);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ece7e3f03c890461bce71fb45142b75807c28a4e":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ece7e3f03c890461bce71fb45142b75807c28a4e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["ece7e3f03c890461bce71fb45142b75807c28a4e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"ece7e3f03c890461bce71fb45142b75807c28a4e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}