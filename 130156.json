{"path":"solr/core/src/test/org/apache/solr/analysis/SnowballPorterFilterFactoryTest#test().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/SnowballPorterFilterFactoryTest#test().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/SnowballPorterFilterFactoryTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    EnglishStemmer stemmer = new EnglishStemmer();\n    String[] test = {\"The\", \"fledgling\", \"banks\", \"were\", \"counting\", \"on\", \"a\", \"big\", \"boom\", \"in\", \"banking\"};\n    String[] gold = new String[test.length];\n    for (int i = 0; i < test.length; i++) {\n      stemmer.setCurrent(test[i]);\n      stemmer.stem();\n      gold[i] = stemmer.getCurrent();\n    }\n\n    SnowballPorterFilterFactory factory = new SnowballPorterFilterFactory();\n    Map<String, String> args = new HashMap<String, String>(DEFAULT_VERSION_PARAM);\n    args.put(\"language\", \"English\");\n\n    factory.init(args);\n    factory.inform(new LinesMockSolrResourceLoader(new ArrayList<String>()));\n    Tokenizer tokenizer = new WhitespaceTokenizer(DEFAULT_VERSION,\n        new StringReader(StrUtils.join(Arrays.asList(test), ' ')));\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, gold);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    EnglishStemmer stemmer = new EnglishStemmer();\n    String[] test = {\"The\", \"fledgling\", \"banks\", \"were\", \"counting\", \"on\", \"a\", \"big\", \"boom\", \"in\", \"banking\"};\n    String[] gold = new String[test.length];\n    for (int i = 0; i < test.length; i++) {\n      stemmer.setCurrent(test[i]);\n      stemmer.stem();\n      gold[i] = stemmer.getCurrent();\n    }\n\n    SnowballPorterFilterFactory factory = new SnowballPorterFilterFactory();\n    Map<String, String> args = new HashMap<String, String>(DEFAULT_VERSION_PARAM);\n    args.put(\"language\", \"English\");\n\n    factory.init(args);\n    factory.inform(new LinesMockSolrResourceLoader(new ArrayList<String>()));\n    Tokenizer tokenizer = new WhitespaceTokenizer(DEFAULT_VERSION,\n        new StringReader(StrUtils.join(Arrays.asList(test), ' ')));\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, gold);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/SnowballPorterFilterFactoryTest#test().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/SnowballPorterFilterFactoryTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    EnglishStemmer stemmer = new EnglishStemmer();\n    String[] test = {\"The\", \"fledgling\", \"banks\", \"were\", \"counting\", \"on\", \"a\", \"big\", \"boom\", \"in\", \"banking\"};\n    String[] gold = new String[test.length];\n    for (int i = 0; i < test.length; i++) {\n      stemmer.setCurrent(test[i]);\n      stemmer.stem();\n      gold[i] = stemmer.getCurrent();\n    }\n\n    SnowballPorterFilterFactory factory = new SnowballPorterFilterFactory();\n    Map<String, String> args = new HashMap<String, String>(DEFAULT_VERSION_PARAM);\n    args.put(\"language\", \"English\");\n\n    factory.init(args);\n    factory.inform(new LinesMockSolrResourceLoader(new ArrayList<String>()));\n    Tokenizer tokenizer = new WhitespaceTokenizer(DEFAULT_VERSION,\n        new StringReader(StrUtils.join(Arrays.asList(test), ' ')));\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, gold);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    EnglishStemmer stemmer = new EnglishStemmer();\n    String[] test = {\"The\", \"fledgling\", \"banks\", \"were\", \"counting\", \"on\", \"a\", \"big\", \"boom\", \"in\", \"banking\"};\n    String[] gold = new String[test.length];\n    for (int i = 0; i < test.length; i++) {\n      stemmer.setCurrent(test[i]);\n      stemmer.stem();\n      gold[i] = stemmer.getCurrent();\n    }\n\n    SnowballPorterFilterFactory factory = new SnowballPorterFilterFactory();\n    Map<String, String> args = new HashMap<String, String>(DEFAULT_VERSION_PARAM);\n    args.put(\"language\", \"English\");\n\n    factory.init(args);\n    factory.inform(new LinesMockSolrResourceLoader(new ArrayList<String>()));\n    Tokenizer tokenizer = new WhitespaceTokenizer(DEFAULT_VERSION,\n        new StringReader(StrUtils.join(Arrays.asList(test), ' ')));\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, gold);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analysis/SnowballPorterFilterFactoryTest#test().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/SnowballPorterFilterFactoryTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    EnglishStemmer stemmer = new EnglishStemmer();\n    String[] test = {\"The\", \"fledgling\", \"banks\", \"were\", \"counting\", \"on\", \"a\", \"big\", \"boom\", \"in\", \"banking\"};\n    String[] gold = new String[test.length];\n    for (int i = 0; i < test.length; i++) {\n      stemmer.setCurrent(test[i]);\n      stemmer.stem();\n      gold[i] = stemmer.getCurrent();\n    }\n\n    SnowballPorterFilterFactory factory = new SnowballPorterFilterFactory();\n    Map<String, String> args = new HashMap<String, String>(DEFAULT_VERSION_PARAM);\n    args.put(\"language\", \"English\");\n\n    factory.init(args);\n    factory.inform(new LinesMockSolrResourceLoader(new ArrayList<String>()));\n    Tokenizer tokenizer = new WhitespaceTokenizer(DEFAULT_VERSION,\n        new StringReader(StrUtils.join(Arrays.asList(test), ' ')));\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, gold);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    EnglishStemmer stemmer = new EnglishStemmer();\n    String[] test = {\"The\", \"fledgling\", \"banks\", \"were\", \"counting\", \"on\", \"a\", \"big\", \"boom\", \"in\", \"banking\"};\n    String[] gold = new String[test.length];\n    for (int i = 0; i < test.length; i++) {\n      stemmer.setCurrent(test[i]);\n      stemmer.stem();\n      gold[i] = stemmer.getCurrent();\n    }\n\n    SnowballPorterFilterFactory factory = new SnowballPorterFilterFactory();\n    Map<String, String> args = new HashMap<String, String>(DEFAULT_VERSION_PARAM);\n    args.put(\"language\", \"English\");\n\n    factory.init(args);\n    factory.inform(new LinesMockSolrResourceLoader(new ArrayList<String>()));\n    Tokenizer tokenizer = new WhitespaceTokenizer(DEFAULT_VERSION,\n        new StringReader(StrUtils.join(Arrays.asList(test), ' ')));\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, gold);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2639ce99440b7a55fa879228f7e66c337443e77a","date":1317007442,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/SnowballPorterFilterFactoryTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/SnowballPorterFilterFactoryTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    EnglishStemmer stemmer = new EnglishStemmer();\n    String[] test = {\"The\", \"fledgling\", \"banks\", \"were\", \"counting\", \"on\", \"a\", \"big\", \"boom\", \"in\", \"banking\"};\n    String[] gold = new String[test.length];\n    for (int i = 0; i < test.length; i++) {\n      stemmer.setCurrent(test[i]);\n      stemmer.stem();\n      gold[i] = stemmer.getCurrent();\n    }\n\n    SnowballPorterFilterFactory factory = new SnowballPorterFilterFactory();\n    Map<String, String> args = new HashMap<String, String>(DEFAULT_VERSION_PARAM);\n    args.put(\"language\", \"English\");\n\n    factory.init(args);\n    factory.inform(new LinesMockSolrResourceLoader(new ArrayList<String>()));\n    Tokenizer tokenizer = new MockTokenizer(\n        new StringReader(StrUtils.join(Arrays.asList(test), ' ')), MockTokenizer.WHITESPACE, false);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, gold);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    EnglishStemmer stemmer = new EnglishStemmer();\n    String[] test = {\"The\", \"fledgling\", \"banks\", \"were\", \"counting\", \"on\", \"a\", \"big\", \"boom\", \"in\", \"banking\"};\n    String[] gold = new String[test.length];\n    for (int i = 0; i < test.length; i++) {\n      stemmer.setCurrent(test[i]);\n      stemmer.stem();\n      gold[i] = stemmer.getCurrent();\n    }\n\n    SnowballPorterFilterFactory factory = new SnowballPorterFilterFactory();\n    Map<String, String> args = new HashMap<String, String>(DEFAULT_VERSION_PARAM);\n    args.put(\"language\", \"English\");\n\n    factory.init(args);\n    factory.inform(new LinesMockSolrResourceLoader(new ArrayList<String>()));\n    Tokenizer tokenizer = new WhitespaceTokenizer(DEFAULT_VERSION,\n        new StringReader(StrUtils.join(Arrays.asList(test), ' ')));\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, gold);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6d3ad4230a9094e97925f9395cf6db4729284d9","date":1335503918,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/SnowballPorterFilterFactoryTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/SnowballPorterFilterFactoryTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    EnglishStemmer stemmer = new EnglishStemmer();\n    String[] test = {\"The\", \"fledgling\", \"banks\", \"were\", \"counting\", \"on\", \"a\", \"big\", \"boom\", \"in\", \"banking\"};\n    String[] gold = new String[test.length];\n    for (int i = 0; i < test.length; i++) {\n      stemmer.setCurrent(test[i]);\n      stemmer.stem();\n      gold[i] = stemmer.getCurrent();\n    }\n\n    SnowballPorterFilterFactory factory = new SnowballPorterFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"language\", \"English\");\n\n    factory.setLuceneMatchVersion(DEFAULT_VERSION);\n    factory.init(args);\n    factory.inform(new LinesMockSolrResourceLoader(new ArrayList<String>()));\n    Tokenizer tokenizer = new MockTokenizer(\n        new StringReader(StrUtils.join(Arrays.asList(test), ' ')), MockTokenizer.WHITESPACE, false);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, gold);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    EnglishStemmer stemmer = new EnglishStemmer();\n    String[] test = {\"The\", \"fledgling\", \"banks\", \"were\", \"counting\", \"on\", \"a\", \"big\", \"boom\", \"in\", \"banking\"};\n    String[] gold = new String[test.length];\n    for (int i = 0; i < test.length; i++) {\n      stemmer.setCurrent(test[i]);\n      stemmer.stem();\n      gold[i] = stemmer.getCurrent();\n    }\n\n    SnowballPorterFilterFactory factory = new SnowballPorterFilterFactory();\n    Map<String, String> args = new HashMap<String, String>(DEFAULT_VERSION_PARAM);\n    args.put(\"language\", \"English\");\n\n    factory.init(args);\n    factory.inform(new LinesMockSolrResourceLoader(new ArrayList<String>()));\n    Tokenizer tokenizer = new MockTokenizer(\n        new StringReader(StrUtils.join(Arrays.asList(test), ' ')), MockTokenizer.WHITESPACE, false);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, gold);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92ed69fd02d759d98f62e869eaa64e64e22302bf","date":1336612003,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/SnowballPorterFilterFactoryTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/SnowballPorterFilterFactoryTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    EnglishStemmer stemmer = new EnglishStemmer();\n    String[] test = {\"The\", \"fledgling\", \"banks\", \"were\", \"counting\", \"on\", \"a\", \"big\", \"boom\", \"in\", \"banking\"};\n    String[] gold = new String[test.length];\n    for (int i = 0; i < test.length; i++) {\n      stemmer.setCurrent(test[i]);\n      stemmer.stem();\n      gold[i] = stemmer.getCurrent();\n    }\n\n    SnowballPorterFilterFactory factory = new SnowballPorterFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"language\", \"English\");\n\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(new LinesMockSolrResourceLoader(new ArrayList<String>()));\n    Tokenizer tokenizer = new MockTokenizer(\n        new StringReader(StrUtils.join(Arrays.asList(test), ' ')), MockTokenizer.WHITESPACE, false);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, gold);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    EnglishStemmer stemmer = new EnglishStemmer();\n    String[] test = {\"The\", \"fledgling\", \"banks\", \"were\", \"counting\", \"on\", \"a\", \"big\", \"boom\", \"in\", \"banking\"};\n    String[] gold = new String[test.length];\n    for (int i = 0; i < test.length; i++) {\n      stemmer.setCurrent(test[i]);\n      stemmer.stem();\n      gold[i] = stemmer.getCurrent();\n    }\n\n    SnowballPorterFilterFactory factory = new SnowballPorterFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"language\", \"English\");\n\n    factory.setLuceneMatchVersion(DEFAULT_VERSION);\n    factory.init(args);\n    factory.inform(new LinesMockSolrResourceLoader(new ArrayList<String>()));\n    Tokenizer tokenizer = new MockTokenizer(\n        new StringReader(StrUtils.join(Arrays.asList(test), ' ')), MockTokenizer.WHITESPACE, false);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, gold);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/snowball/SnowballPorterFilterFactoryTest[TestSnowballPorterFilterFactory]#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/SnowballPorterFilterFactoryTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    EnglishStemmer stemmer = new EnglishStemmer();\n    String[] test = {\"The\", \"fledgling\", \"banks\", \"were\", \"counting\", \"on\", \"a\", \"big\", \"boom\", \"in\", \"banking\"};\n    String[] gold = new String[test.length];\n    for (int i = 0; i < test.length; i++) {\n      stemmer.setCurrent(test[i]);\n      stemmer.stem();\n      gold[i] = stemmer.getCurrent();\n    }\n\n    SnowballPorterFilterFactory factory = new SnowballPorterFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"language\", \"English\");\n\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(new LinesMockSolrResourceLoader(new ArrayList<String>()));\n    Tokenizer tokenizer = new MockTokenizer(\n        new StringReader(StrUtils.join(Arrays.asList(test), ' ')), MockTokenizer.WHITESPACE, false);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, gold);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    EnglishStemmer stemmer = new EnglishStemmer();\n    String[] test = {\"The\", \"fledgling\", \"banks\", \"were\", \"counting\", \"on\", \"a\", \"big\", \"boom\", \"in\", \"banking\"};\n    String[] gold = new String[test.length];\n    for (int i = 0; i < test.length; i++) {\n      stemmer.setCurrent(test[i]);\n      stemmer.stem();\n      gold[i] = stemmer.getCurrent();\n    }\n\n    SnowballPorterFilterFactory factory = new SnowballPorterFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"language\", \"English\");\n\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(new LinesMockSolrResourceLoader(new ArrayList<String>()));\n    Tokenizer tokenizer = new MockTokenizer(\n        new StringReader(StrUtils.join(Arrays.asList(test), ' ')), MockTokenizer.WHITESPACE, false);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, gold);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/snowball/TestSnowballPorterFilterFactory#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/SnowballPorterFilterFactoryTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    EnglishStemmer stemmer = new EnglishStemmer();\n    String[] test = {\"The\", \"fledgling\", \"banks\", \"were\", \"counting\", \"on\", \"a\", \"big\", \"boom\", \"in\", \"banking\"};\n    String[] gold = new String[test.length];\n    for (int i = 0; i < test.length; i++) {\n      stemmer.setCurrent(test[i]);\n      stemmer.stem();\n      gold[i] = stemmer.getCurrent();\n    }\n\n    SnowballPorterFilterFactory factory = new SnowballPorterFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"language\", \"English\");\n\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(new StringMockResourceLoader(\"\"));\n    Tokenizer tokenizer = new MockTokenizer(\n        new StringReader(join(test, ' ')), MockTokenizer.WHITESPACE, false);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, gold);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    EnglishStemmer stemmer = new EnglishStemmer();\n    String[] test = {\"The\", \"fledgling\", \"banks\", \"were\", \"counting\", \"on\", \"a\", \"big\", \"boom\", \"in\", \"banking\"};\n    String[] gold = new String[test.length];\n    for (int i = 0; i < test.length; i++) {\n      stemmer.setCurrent(test[i]);\n      stemmer.stem();\n      gold[i] = stemmer.getCurrent();\n    }\n\n    SnowballPorterFilterFactory factory = new SnowballPorterFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"language\", \"English\");\n\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(new LinesMockSolrResourceLoader(new ArrayList<String>()));\n    Tokenizer tokenizer = new MockTokenizer(\n        new StringReader(StrUtils.join(Arrays.asList(test), ' ')), MockTokenizer.WHITESPACE, false);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, gold);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/analysis/SnowballPorterFilterFactoryTest#test().mjava","sourceNew":null,"sourceOld":"  public void test() throws IOException {\n    EnglishStemmer stemmer = new EnglishStemmer();\n    String[] test = {\"The\", \"fledgling\", \"banks\", \"were\", \"counting\", \"on\", \"a\", \"big\", \"boom\", \"in\", \"banking\"};\n    String[] gold = new String[test.length];\n    for (int i = 0; i < test.length; i++) {\n      stemmer.setCurrent(test[i]);\n      stemmer.stem();\n      gold[i] = stemmer.getCurrent();\n    }\n\n    SnowballPorterFilterFactory factory = new SnowballPorterFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"language\", \"English\");\n\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(new LinesMockSolrResourceLoader(new ArrayList<String>()));\n    Tokenizer tokenizer = new MockTokenizer(\n        new StringReader(StrUtils.join(Arrays.asList(test), ' ')), MockTokenizer.WHITESPACE, false);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, gold);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/analysis/SnowballPorterFilterFactoryTest#test().mjava","sourceNew":null,"sourceOld":"  public void test() throws IOException {\n    EnglishStemmer stemmer = new EnglishStemmer();\n    String[] test = {\"The\", \"fledgling\", \"banks\", \"were\", \"counting\", \"on\", \"a\", \"big\", \"boom\", \"in\", \"banking\"};\n    String[] gold = new String[test.length];\n    for (int i = 0; i < test.length; i++) {\n      stemmer.setCurrent(test[i]);\n      stemmer.stem();\n      gold[i] = stemmer.getCurrent();\n    }\n\n    SnowballPorterFilterFactory factory = new SnowballPorterFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"language\", \"English\");\n\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(new LinesMockSolrResourceLoader(new ArrayList<String>()));\n    Tokenizer tokenizer = new MockTokenizer(\n        new StringReader(StrUtils.join(Arrays.asList(test), ' ')), MockTokenizer.WHITESPACE, false);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, gold);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2639ce99440b7a55fa879228f7e66c337443e77a":["c26f00b574427b55127e869b935845554afde1fa"],"aba371508186796cc6151d8223a5b4e16d02e26e":["92ed69fd02d759d98f62e869eaa64e64e22302bf","5a1a22b1ad88b436661458df567f3fdb446392a4"],"d6d3ad4230a9094e97925f9395cf6db4729284d9":["2639ce99440b7a55fa879228f7e66c337443e77a"],"92ed69fd02d759d98f62e869eaa64e64e22302bf":["d6d3ad4230a9094e97925f9395cf6db4729284d9"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["92ed69fd02d759d98f62e869eaa64e64e22302bf","5a1a22b1ad88b436661458df567f3fdb446392a4"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["92ed69fd02d759d98f62e869eaa64e64e22302bf","3241e06e642196396b80bb293acd9c0814d079e0"],"3241e06e642196396b80bb293acd9c0814d079e0":["92ed69fd02d759d98f62e869eaa64e64e22302bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a1a22b1ad88b436661458df567f3fdb446392a4"]},"commit2Childs":{"2639ce99440b7a55fa879228f7e66c337443e77a":["d6d3ad4230a9094e97925f9395cf6db4729284d9"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"d6d3ad4230a9094e97925f9395cf6db4729284d9":["92ed69fd02d759d98f62e869eaa64e64e22302bf"],"92ed69fd02d759d98f62e869eaa64e64e22302bf":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","5a1a22b1ad88b436661458df567f3fdb446392a4","3241e06e642196396b80bb293acd9c0814d079e0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["2639ce99440b7a55fa879228f7e66c337443e77a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3241e06e642196396b80bb293acd9c0814d079e0":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}