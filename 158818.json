{"path":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],BytesReader).mjava","commits":[{"id":"87e78f3c129251e74ecc2ff73a32de0f27cf09d5","date":1358006150,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],FST.BytesReader).mjava","sourceNew":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      in.setPosition(getNodeAddress(follow.target));\n      arc.node = follow.target;\n      final byte b = in.readByte();\n      if (b == ARCS_AS_FIXED_ARRAY) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        if (packed) {\n          arc.bytesPerArc = in.readVInt();\n        } else {\n          arc.bytesPerArc = in.readInt();\n        }\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.getPosition();\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.readFinalOutput(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            if (packed) {\n              in.readVInt();\n            } else {\n              in.skipBytes(4);\n            }\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read:\n        in.skipBytes(-1);\n        arc.nextArc = in.getPosition();\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","sourceOld":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc, FST.BytesReader in) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      in.pos = getNodeAddress(follow.target);\n      arc.node = follow.target;\n      final byte b = in.readByte();\n      if (b == ARCS_AS_FIXED_ARRAY) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        if (packed) {\n          arc.bytesPerArc = in.readVInt();\n        } else {\n          arc.bytesPerArc = in.readInt();\n        }\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.pos;\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.readFinalOutput(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            if (packed) {\n              in.readVInt();\n            } else {\n              in.skip(4);\n            }\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read: \n        in.skip(-1);\n        arc.nextArc = in.pos;\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"556c8202987f72dd8458e25e21a82d98fc274979","date":1358008288,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],BytesReader).mjava","sourceNew":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      in.setPosition(getNodeAddress(follow.target));\n      arc.node = follow.target;\n      final byte b = in.readByte();\n      if (b == ARCS_AS_FIXED_ARRAY) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        if (packed) {\n          arc.bytesPerArc = in.readVInt();\n        } else {\n          arc.bytesPerArc = in.readInt();\n        }\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.getPosition();\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.readFinalOutput(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else if (packed) {\n            in.readVInt();\n          } else {\n            readUnpackedNodeTarget(in);\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read:\n        in.skipBytes(-1);\n        arc.nextArc = in.getPosition();\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","sourceOld":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      in.setPosition(getNodeAddress(follow.target));\n      arc.node = follow.target;\n      final byte b = in.readByte();\n      if (b == ARCS_AS_FIXED_ARRAY) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        if (packed) {\n          arc.bytesPerArc = in.readVInt();\n        } else {\n          arc.bytesPerArc = in.readInt();\n        }\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.getPosition();\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.readFinalOutput(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            if (packed) {\n              in.readVInt();\n            } else {\n              in.skipBytes(4);\n            }\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read:\n        in.skipBytes(-1);\n        arc.nextArc = in.getPosition();\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc6d3be942e675e8251dbe10796cdb3a484bf607","date":1358026184,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],BytesReader).mjava","sourceNew":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      in.setPosition(getNodeAddress(follow.target));\n      arc.node = follow.target;\n      final byte b = in.readByte();\n      if (b == ARCS_AS_FIXED_ARRAY) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        if (packed || version >= VERSION_VINT_TARGET) {\n          arc.bytesPerArc = in.readVInt();\n        } else {\n          arc.bytesPerArc = in.readInt();\n        }\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.getPosition();\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.readFinalOutput(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else if (packed) {\n            in.readVInt();\n          } else {\n            readUnpackedNodeTarget(in);\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read:\n        in.skipBytes(-1);\n        arc.nextArc = in.getPosition();\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","sourceOld":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      in.setPosition(getNodeAddress(follow.target));\n      arc.node = follow.target;\n      final byte b = in.readByte();\n      if (b == ARCS_AS_FIXED_ARRAY) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        if (packed) {\n          arc.bytesPerArc = in.readVInt();\n        } else {\n          arc.bytesPerArc = in.readInt();\n        }\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.getPosition();\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.readFinalOutput(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else if (packed) {\n            in.readVInt();\n          } else {\n            readUnpackedNodeTarget(in);\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read:\n        in.skipBytes(-1);\n        arc.nextArc = in.getPosition();\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0","date":1358188277,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],BytesReader).mjava","sourceNew":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      in.setPosition(getNodeAddress(follow.target));\n      arc.node = follow.target;\n      final byte b = in.readByte();\n      if (b == ARCS_AS_FIXED_ARRAY) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        if (packed || version >= VERSION_VINT_TARGET) {\n          arc.bytesPerArc = in.readVInt();\n        } else {\n          arc.bytesPerArc = in.readInt();\n        }\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.getPosition();\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.readFinalOutput(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else if (packed) {\n            in.readVLong();\n          } else {\n            readUnpackedNodeTarget(in);\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read:\n        in.skipBytes(-1);\n        arc.nextArc = in.getPosition();\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","sourceOld":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      in.setPosition(getNodeAddress(follow.target));\n      arc.node = follow.target;\n      final byte b = in.readByte();\n      if (b == ARCS_AS_FIXED_ARRAY) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        if (packed || version >= VERSION_VINT_TARGET) {\n          arc.bytesPerArc = in.readVInt();\n        } else {\n          arc.bytesPerArc = in.readInt();\n        }\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.getPosition();\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.readFinalOutput(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else if (packed) {\n            in.readVInt();\n          } else {\n            readUnpackedNodeTarget(in);\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read:\n        in.skipBytes(-1);\n        arc.nextArc = in.getPosition();\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],FST.BytesReader).mjava","sourceNew":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      in.setPosition(getNodeAddress(follow.target));\n      arc.node = follow.target;\n      final byte b = in.readByte();\n      if (b == ARCS_AS_FIXED_ARRAY) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        if (packed || version >= VERSION_VINT_TARGET) {\n          arc.bytesPerArc = in.readVInt();\n        } else {\n          arc.bytesPerArc = in.readInt();\n        }\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.getPosition();\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.readFinalOutput(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else if (packed) {\n            in.readVLong();\n          } else {\n            readUnpackedNodeTarget(in);\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read:\n        in.skipBytes(-1);\n        arc.nextArc = in.getPosition();\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","sourceOld":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc, FST.BytesReader in) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      in.pos = getNodeAddress(follow.target);\n      arc.node = follow.target;\n      final byte b = in.readByte();\n      if (b == ARCS_AS_FIXED_ARRAY) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        if (packed) {\n          arc.bytesPerArc = in.readVInt();\n        } else {\n          arc.bytesPerArc = in.readInt();\n        }\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.pos;\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.readFinalOutput(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            if (packed) {\n              in.readVInt();\n            } else {\n              in.skip(4);\n            }\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read: \n        in.skip(-1);\n        arc.nextArc = in.pos;\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"775c2566119fc914aaa5f131744dd2810a204565","date":1400612867,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],BytesReader).mjava","sourceNew":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      in.setPosition(getNodeAddress(follow.target));\n      arc.node = follow.target;\n      final byte b = in.readByte();\n      if (b == ARCS_AS_FIXED_ARRAY) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        if (packed || version >= VERSION_VINT_TARGET) {\n          arc.bytesPerArc = in.readVInt();\n        } else {\n          arc.bytesPerArc = in.readInt();\n        }\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.getPosition();\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.skipOutput(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.skipFinalOutput(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else if (packed) {\n            in.readVLong();\n          } else {\n            readUnpackedNodeTarget(in);\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read:\n        in.skipBytes(-1);\n        arc.nextArc = in.getPosition();\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","sourceOld":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      in.setPosition(getNodeAddress(follow.target));\n      arc.node = follow.target;\n      final byte b = in.readByte();\n      if (b == ARCS_AS_FIXED_ARRAY) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        if (packed || version >= VERSION_VINT_TARGET) {\n          arc.bytesPerArc = in.readVInt();\n        } else {\n          arc.bytesPerArc = in.readInt();\n        }\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.getPosition();\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.readFinalOutput(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else if (packed) {\n            in.readVLong();\n          } else {\n            readUnpackedNodeTarget(in);\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read:\n        in.skipBytes(-1);\n        arc.nextArc = in.getPosition();\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],BytesReader).mjava","sourceNew":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      in.setPosition(getNodeAddress(follow.target));\n      arc.node = follow.target;\n      final byte b = in.readByte();\n      if (b == ARCS_AS_FIXED_ARRAY) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        if (packed || version >= VERSION_VINT_TARGET) {\n          arc.bytesPerArc = in.readVInt();\n        } else {\n          arc.bytesPerArc = in.readInt();\n        }\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.getPosition();\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.skipOutput(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.skipFinalOutput(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else if (packed) {\n            in.readVLong();\n          } else {\n            readUnpackedNodeTarget(in);\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read:\n        in.skipBytes(-1);\n        arc.nextArc = in.getPosition();\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","sourceOld":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      in.setPosition(getNodeAddress(follow.target));\n      arc.node = follow.target;\n      final byte b = in.readByte();\n      if (b == ARCS_AS_FIXED_ARRAY) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        if (packed || version >= VERSION_VINT_TARGET) {\n          arc.bytesPerArc = in.readVInt();\n        } else {\n          arc.bytesPerArc = in.readInt();\n        }\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.getPosition();\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.readFinalOutput(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else if (packed) {\n            in.readVLong();\n          } else {\n            readUnpackedNodeTarget(in);\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read:\n        in.skipBytes(-1);\n        arc.nextArc = in.getPosition();\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6244579a467d5f2673ac98265d74bddbea1a8114","date":1478786509,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],BytesReader).mjava","sourceNew":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      in.setPosition(follow.target);\n      arc.node = follow.target;\n      final byte b = in.readByte();\n      if (b == ARCS_AS_FIXED_ARRAY) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        if (version >= VERSION_VINT_TARGET) {\n          arc.bytesPerArc = in.readVInt();\n        } else {\n          arc.bytesPerArc = in.readInt();\n        }\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.getPosition();\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.skipOutput(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.skipFinalOutput(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            readUnpackedNodeTarget(in);\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read:\n        in.skipBytes(-1);\n        arc.nextArc = in.getPosition();\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","sourceOld":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      in.setPosition(getNodeAddress(follow.target));\n      arc.node = follow.target;\n      final byte b = in.readByte();\n      if (b == ARCS_AS_FIXED_ARRAY) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        if (packed || version >= VERSION_VINT_TARGET) {\n          arc.bytesPerArc = in.readVInt();\n        } else {\n          arc.bytesPerArc = in.readInt();\n        }\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.getPosition();\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.skipOutput(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.skipFinalOutput(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else if (packed) {\n            in.readVLong();\n          } else {\n            readUnpackedNodeTarget(in);\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read:\n        in.skipBytes(-1);\n        arc.nextArc = in.getPosition();\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],BytesReader).mjava","sourceNew":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      in.setPosition(follow.target);\n      arc.node = follow.target;\n      final byte b = in.readByte();\n      if (b == ARCS_AS_FIXED_ARRAY) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        if (version >= VERSION_VINT_TARGET) {\n          arc.bytesPerArc = in.readVInt();\n        } else {\n          arc.bytesPerArc = in.readInt();\n        }\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.getPosition();\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.skipOutput(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.skipFinalOutput(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            readUnpackedNodeTarget(in);\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read:\n        in.skipBytes(-1);\n        arc.nextArc = in.getPosition();\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","sourceOld":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      in.setPosition(getNodeAddress(follow.target));\n      arc.node = follow.target;\n      final byte b = in.readByte();\n      if (b == ARCS_AS_FIXED_ARRAY) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        if (packed || version >= VERSION_VINT_TARGET) {\n          arc.bytesPerArc = in.readVInt();\n        } else {\n          arc.bytesPerArc = in.readInt();\n        }\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.getPosition();\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.skipOutput(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.skipFinalOutput(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else if (packed) {\n            in.readVLong();\n          } else {\n            readUnpackedNodeTarget(in);\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read:\n        in.skipBytes(-1);\n        arc.nextArc = in.getPosition();\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9cbc4730743fac2e69e7d622848778d3ad9f2151","date":1502282443,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],BytesReader).mjava","sourceNew":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      in.setPosition(follow.target);\n      final byte b = in.readByte();\n      if (b == ARCS_AS_FIXED_ARRAY) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        if (version >= VERSION_VINT_TARGET) {\n          arc.bytesPerArc = in.readVInt();\n        } else {\n          arc.bytesPerArc = in.readInt();\n        }\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.getPosition();\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.skipOutput(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.skipFinalOutput(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            readUnpackedNodeTarget(in);\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read:\n        in.skipBytes(-1);\n        arc.nextArc = in.getPosition();\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","sourceOld":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      in.setPosition(follow.target);\n      arc.node = follow.target;\n      final byte b = in.readByte();\n      if (b == ARCS_AS_FIXED_ARRAY) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        if (version >= VERSION_VINT_TARGET) {\n          arc.bytesPerArc = in.readVInt();\n        } else {\n          arc.bytesPerArc = in.readInt();\n        }\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.getPosition();\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.skipOutput(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.skipFinalOutput(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            readUnpackedNodeTarget(in);\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read:\n        in.skipBytes(-1);\n        arc.nextArc = in.getPosition();\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],BytesReader).mjava","sourceNew":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      in.setPosition(follow.target);\n      final byte b = in.readByte();\n      if (b == ARCS_AS_FIXED_ARRAY) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        if (version >= VERSION_VINT_TARGET) {\n          arc.bytesPerArc = in.readVInt();\n        } else {\n          arc.bytesPerArc = in.readInt();\n        }\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.getPosition();\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.skipOutput(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.skipFinalOutput(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            readUnpackedNodeTarget(in);\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read:\n        in.skipBytes(-1);\n        arc.nextArc = in.getPosition();\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","sourceOld":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      in.setPosition(follow.target);\n      arc.node = follow.target;\n      final byte b = in.readByte();\n      if (b == ARCS_AS_FIXED_ARRAY) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        if (version >= VERSION_VINT_TARGET) {\n          arc.bytesPerArc = in.readVInt();\n        } else {\n          arc.bytesPerArc = in.readInt();\n        }\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.getPosition();\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.skipOutput(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.skipFinalOutput(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            readUnpackedNodeTarget(in);\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read:\n        in.skipBytes(-1);\n        arc.nextArc = in.getPosition();\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],BytesReader).mjava","sourceNew":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      in.setPosition(follow.target);\n      final byte b = in.readByte();\n      if (b == ARCS_AS_FIXED_ARRAY) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        if (version >= VERSION_VINT_TARGET) {\n          arc.bytesPerArc = in.readVInt();\n        } else {\n          arc.bytesPerArc = in.readInt();\n        }\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.getPosition();\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.skipOutput(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.skipFinalOutput(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            readUnpackedNodeTarget(in);\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read:\n        in.skipBytes(-1);\n        arc.nextArc = in.getPosition();\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","sourceOld":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      in.setPosition(follow.target);\n      arc.node = follow.target;\n      final byte b = in.readByte();\n      if (b == ARCS_AS_FIXED_ARRAY) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        if (version >= VERSION_VINT_TARGET) {\n          arc.bytesPerArc = in.readVInt();\n        } else {\n          arc.bytesPerArc = in.readInt();\n        }\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.getPosition();\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.skipOutput(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.skipFinalOutput(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            readUnpackedNodeTarget(in);\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read:\n        in.skipBytes(-1);\n        arc.nextArc = in.getPosition();\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0e7448656541edc407546460641f47950451b16","date":1519150500,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],BytesReader).mjava","sourceNew":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      in.setPosition(follow.target);\n      final byte b = in.readByte();\n      if (b == ARCS_AS_FIXED_ARRAY) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        arc.bytesPerArc = in.readVInt();\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.getPosition();\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.skipOutput(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.skipFinalOutput(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            readUnpackedNodeTarget(in);\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read:\n        in.skipBytes(-1);\n        arc.nextArc = in.getPosition();\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","sourceOld":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      in.setPosition(follow.target);\n      final byte b = in.readByte();\n      if (b == ARCS_AS_FIXED_ARRAY) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        if (version >= VERSION_VINT_TARGET) {\n          arc.bytesPerArc = in.readVInt();\n        } else {\n          arc.bytesPerArc = in.readInt();\n        }\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.getPosition();\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.skipOutput(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.skipFinalOutput(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            readUnpackedNodeTarget(in);\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read:\n        in.skipBytes(-1);\n        arc.nextArc = in.getPosition();\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae67e1f82a53594208ca929f382ee861dad3d7a8","date":1557134375,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],BytesReader).mjava","sourceNew":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      in.setPosition(follow.target);\n      final byte b = in.readByte();\n      if (b == ARCS_AS_ARRAY_PACKED || b == ARCS_AS_ARRAY_WITH_GAPS) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        arc.bytesPerArc = in.readVInt();\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.getPosition();\n        if (b == ARCS_AS_ARRAY_WITH_GAPS) {\n          arc.arcIdx = Integer.MIN_VALUE;\n          arc.nextArc = arc.posArcsStart - (arc.numArcs - 1) * arc.bytesPerArc;\n        } else {\n          arc.arcIdx = arc.numArcs - 2;\n        }\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.skipOutput(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.skipFinalOutput(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            readUnpackedNodeTarget(in);\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read:\n        in.skipBytes(-1);\n        arc.nextArc = in.getPosition();\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","sourceOld":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      in.setPosition(follow.target);\n      final byte b = in.readByte();\n      if (b == ARCS_AS_FIXED_ARRAY) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        arc.bytesPerArc = in.readVInt();\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.getPosition();\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.skipOutput(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.skipFinalOutput(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            readUnpackedNodeTarget(in);\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read:\n        in.skipBytes(-1);\n        arc.nextArc = in.getPosition();\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54204c8a3ca26aeafd273139fc29baf70d0f6786","date":1564170395,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],BytesReader).mjava","sourceNew":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput();\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      in.setPosition(follow.target());\n      final byte b = in.readByte();\n      if (b == ARCS_AS_ARRAY_PACKED || b == ARCS_AS_ARRAY_WITH_GAPS) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        arc.bytesPerArc = in.readVInt();\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.getPosition();\n        if (b == ARCS_AS_ARRAY_WITH_GAPS) {\n          arc.arcIdx = Integer.MIN_VALUE;\n          arc.nextArc = arc.posArcsStart() - (arc.numArcs() - 1) * arc.bytesPerArc();\n        } else {\n          arc.arcIdx = arc.numArcs() - 2;\n        }\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.skipOutput(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.skipFinalOutput(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            readUnpackedNodeTarget(in);\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read:\n        in.skipBytes(-1);\n        arc.nextArc = in.getPosition();\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","sourceOld":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      in.setPosition(follow.target);\n      final byte b = in.readByte();\n      if (b == ARCS_AS_ARRAY_PACKED || b == ARCS_AS_ARRAY_WITH_GAPS) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        arc.bytesPerArc = in.readVInt();\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.getPosition();\n        if (b == ARCS_AS_ARRAY_WITH_GAPS) {\n          arc.arcIdx = Integer.MIN_VALUE;\n          arc.nextArc = arc.posArcsStart - (arc.numArcs - 1) * arc.bytesPerArc;\n        } else {\n          arc.arcIdx = arc.numArcs - 2;\n        }\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.skipOutput(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.skipFinalOutput(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            readUnpackedNodeTarget(in);\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read:\n        in.skipBytes(-1);\n        arc.nextArc = in.getPosition();\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],BytesReader).mjava","sourceNew":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput();\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      in.setPosition(follow.target());\n      final byte b = in.readByte();\n      if (b == ARCS_AS_ARRAY_PACKED || b == ARCS_AS_ARRAY_WITH_GAPS) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        arc.bytesPerArc = in.readVInt();\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.getPosition();\n        if (b == ARCS_AS_ARRAY_WITH_GAPS) {\n          arc.arcIdx = Integer.MIN_VALUE;\n          arc.nextArc = arc.posArcsStart() - (arc.numArcs() - 1) * arc.bytesPerArc();\n        } else {\n          arc.arcIdx = arc.numArcs() - 2;\n        }\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.skipOutput(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.skipFinalOutput(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            readUnpackedNodeTarget(in);\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read:\n        in.skipBytes(-1);\n        arc.nextArc = in.getPosition();\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","sourceOld":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      in.setPosition(follow.target);\n      final byte b = in.readByte();\n      if (b == ARCS_AS_ARRAY_PACKED || b == ARCS_AS_ARRAY_WITH_GAPS) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        arc.bytesPerArc = in.readVInt();\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.getPosition();\n        if (b == ARCS_AS_ARRAY_WITH_GAPS) {\n          arc.arcIdx = Integer.MIN_VALUE;\n          arc.nextArc = arc.posArcsStart - (arc.numArcs - 1) * arc.bytesPerArc;\n        } else {\n          arc.arcIdx = arc.numArcs - 2;\n        }\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.skipOutput(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.skipFinalOutput(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            readUnpackedNodeTarget(in);\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read:\n        in.skipBytes(-1);\n        arc.nextArc = in.getPosition();\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e19a701ad1d5fd2dd25e0f79bb5d81df864116b","date":1571070636,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],BytesReader).mjava","sourceNew":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput();\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      in.setPosition(follow.target());\n      final byte b = in.readByte();\n      if (b == ARCS_AS_ARRAY_PACKED) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        arc.bytesPerArc = in.readVInt();\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.getPosition();\n        arc.arcIdx = arc.numArcs() - 2;\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.skipOutput(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.skipFinalOutput(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            readUnpackedNodeTarget(in);\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read:\n        in.skipBytes(-1);\n        arc.nextArc = in.getPosition();\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","sourceOld":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput();\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      in.setPosition(follow.target());\n      final byte b = in.readByte();\n      if (b == ARCS_AS_ARRAY_PACKED || b == ARCS_AS_ARRAY_WITH_GAPS) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        arc.bytesPerArc = in.readVInt();\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.getPosition();\n        if (b == ARCS_AS_ARRAY_WITH_GAPS) {\n          arc.arcIdx = Integer.MIN_VALUE;\n          arc.nextArc = arc.posArcsStart() - (arc.numArcs() - 1) * arc.bytesPerArc();\n        } else {\n          arc.arcIdx = arc.numArcs() - 2;\n        }\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.skipOutput(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.skipFinalOutput(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            readUnpackedNodeTarget(in);\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read:\n        in.skipBytes(-1);\n        arc.nextArc = in.getPosition();\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],BytesReader).mjava","sourceNew":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput();\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      in.setPosition(follow.target());\n      final byte b = in.readByte();\n      if (b == ARCS_AS_ARRAY_PACKED) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        arc.bytesPerArc = in.readVInt();\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.getPosition();\n        arc.arcIdx = arc.numArcs() - 2;\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.skipOutput(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.skipFinalOutput(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            readUnpackedNodeTarget(in);\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read:\n        in.skipBytes(-1);\n        arc.nextArc = in.getPosition();\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","sourceOld":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput();\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      in.setPosition(follow.target());\n      final byte b = in.readByte();\n      if (b == ARCS_AS_ARRAY_PACKED || b == ARCS_AS_ARRAY_WITH_GAPS) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        arc.bytesPerArc = in.readVInt();\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.getPosition();\n        if (b == ARCS_AS_ARRAY_WITH_GAPS) {\n          arc.arcIdx = Integer.MIN_VALUE;\n          arc.nextArc = arc.posArcsStart() - (arc.numArcs() - 1) * arc.bytesPerArc();\n        } else {\n          arc.arcIdx = arc.numArcs() - 2;\n        }\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.skipOutput(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.skipFinalOutput(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            readUnpackedNodeTarget(in);\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read:\n        in.skipBytes(-1);\n        arc.nextArc = in.getPosition();\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71d31a7d5773508492505519bb5230b87c8937ad","date":1573681693,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],BytesReader).mjava","sourceNew":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput();\n      arc.flags = BIT_LAST_ARC;\n      arc.nodeFlags = arc.flags;\n      return arc;\n    } else {\n      in.setPosition(follow.target());\n      byte flags = arc.nodeFlags = in.readByte();\n      if (flags == ARCS_FOR_BINARY_SEARCH || flags == ARCS_FOR_DIRECT_ADDRESSING) {\n        // Special arc which is actually a node header for fixed length arcs.\n        // Jump straight to end to find the last arc.\n        arc.numArcs = in.readVInt();\n        arc.bytesPerArc = in.readVInt();\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        if (flags == ARCS_FOR_DIRECT_ADDRESSING) {\n          readPresenceBytes(arc, in);\n          arc.firstLabel = readLabel(in);\n          arc.posArcsStart = in.getPosition();\n          readArcByDirectAddressing(arc, in, arc.numArcs() - 1);\n        } else {\n          arc.arcIdx = arc.numArcs() - 2;\n          arc.posArcsStart = in.getPosition();\n          readNextRealArc(arc, in);\n        }\n      } else {\n        arc.flags = flags;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.skipOutput(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.skipFinalOutput(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            readUnpackedNodeTarget(in);\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read:\n        in.skipBytes(-1);\n        arc.nextArc = in.getPosition();\n        readNextRealArc(arc, in);\n      }\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","sourceOld":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput();\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      in.setPosition(follow.target());\n      final byte b = in.readByte();\n      if (b == ARCS_AS_ARRAY_PACKED) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        arc.bytesPerArc = in.readVInt();\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.getPosition();\n        arc.arcIdx = arc.numArcs() - 2;\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.skipOutput(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.skipFinalOutput(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            readUnpackedNodeTarget(in);\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read:\n        in.skipBytes(-1);\n        arc.nextArc = in.getPosition();\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","bugFix":null,"bugIntro":["06086b5bd0f0d57858f0675becc58edf1f6b7c11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06086b5bd0f0d57858f0675becc58edf1f6b7c11","date":1586421397,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T],BytesReader).mjava","sourceNew":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput();\n      arc.flags = BIT_LAST_ARC;\n      arc.nodeFlags = arc.flags;\n      return arc;\n    } else {\n      in.setPosition(follow.target());\n      byte flags = arc.nodeFlags = in.readByte();\n      if (flags == ARCS_FOR_BINARY_SEARCH || flags == ARCS_FOR_DIRECT_ADDRESSING) {\n        // Special arc which is actually a node header for fixed length arcs.\n        // Jump straight to end to find the last arc.\n        arc.numArcs = in.readVInt();\n        arc.bytesPerArc = in.readVInt();\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        if (flags == ARCS_FOR_DIRECT_ADDRESSING) {\n          readPresenceBytes(arc, in);\n          arc.firstLabel = readLabel(in);\n          arc.posArcsStart = in.getPosition();\n          readLastArcByDirectAddressing(arc, in);\n        } else {\n          arc.arcIdx = arc.numArcs() - 2;\n          arc.posArcsStart = in.getPosition();\n          readNextRealArc(arc, in);\n        }\n      } else {\n        arc.flags = flags;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.skipOutput(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.skipFinalOutput(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            readUnpackedNodeTarget(in);\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read:\n        in.skipBytes(-1);\n        arc.nextArc = in.getPosition();\n        readNextRealArc(arc, in);\n      }\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","sourceOld":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc, BytesReader in) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput();\n      arc.flags = BIT_LAST_ARC;\n      arc.nodeFlags = arc.flags;\n      return arc;\n    } else {\n      in.setPosition(follow.target());\n      byte flags = arc.nodeFlags = in.readByte();\n      if (flags == ARCS_FOR_BINARY_SEARCH || flags == ARCS_FOR_DIRECT_ADDRESSING) {\n        // Special arc which is actually a node header for fixed length arcs.\n        // Jump straight to end to find the last arc.\n        arc.numArcs = in.readVInt();\n        arc.bytesPerArc = in.readVInt();\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        if (flags == ARCS_FOR_DIRECT_ADDRESSING) {\n          readPresenceBytes(arc, in);\n          arc.firstLabel = readLabel(in);\n          arc.posArcsStart = in.getPosition();\n          readArcByDirectAddressing(arc, in, arc.numArcs() - 1);\n        } else {\n          arc.arcIdx = arc.numArcs() - 2;\n          arc.posArcsStart = in.getPosition();\n          readNextRealArc(arc, in);\n        }\n      } else {\n        arc.flags = flags;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.skipOutput(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.skipFinalOutput(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            readUnpackedNodeTarget(in);\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read:\n        in.skipBytes(-1);\n        arc.nextArc = in.getPosition();\n        readNextRealArc(arc, in);\n      }\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","bugFix":["71d31a7d5773508492505519bb5230b87c8937ad"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0e7448656541edc407546460641f47950451b16":["9cbc4730743fac2e69e7d622848778d3ad9f2151"],"775c2566119fc914aaa5f131744dd2810a204565":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0":["fc6d3be942e675e8251dbe10796cdb3a484bf607"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"556c8202987f72dd8458e25e21a82d98fc274979":["87e78f3c129251e74ecc2ff73a32de0f27cf09d5"],"9cbc4730743fac2e69e7d622848778d3ad9f2151":["6244579a467d5f2673ac98265d74bddbea1a8114"],"6244579a467d5f2673ac98265d74bddbea1a8114":["775c2566119fc914aaa5f131744dd2810a204565"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["775c2566119fc914aaa5f131744dd2810a204565","6244579a467d5f2673ac98265d74bddbea1a8114"],"71d31a7d5773508492505519bb5230b87c8937ad":["3e19a701ad1d5fd2dd25e0f79bb5d81df864116b"],"ae67e1f82a53594208ca929f382ee861dad3d7a8":["c0e7448656541edc407546460641f47950451b16"],"87e78f3c129251e74ecc2ff73a32de0f27cf09d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b7605579001505896d48b07160075a5c8b8e128e":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0","775c2566119fc914aaa5f131744dd2810a204565"],"f8061ddd97f3352007d927dae445884a6f3d857b":["ae67e1f82a53594208ca929f382ee861dad3d7a8","54204c8a3ca26aeafd273139fc29baf70d0f6786"],"54204c8a3ca26aeafd273139fc29baf70d0f6786":["ae67e1f82a53594208ca929f382ee861dad3d7a8"],"58884af1f68e9d61c217c753fbd6266d86a63b14":["6244579a467d5f2673ac98265d74bddbea1a8114","9cbc4730743fac2e69e7d622848778d3ad9f2151"],"06086b5bd0f0d57858f0675becc58edf1f6b7c11":["71d31a7d5773508492505519bb5230b87c8937ad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["6244579a467d5f2673ac98265d74bddbea1a8114","9cbc4730743fac2e69e7d622848778d3ad9f2151"],"3e19a701ad1d5fd2dd25e0f79bb5d81df864116b":["54204c8a3ca26aeafd273139fc29baf70d0f6786"],"fc6d3be942e675e8251dbe10796cdb3a484bf607":["556c8202987f72dd8458e25e21a82d98fc274979"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06086b5bd0f0d57858f0675becc58edf1f6b7c11"],"b0b597c65628ca9e73913a07e81691f8229bae35":["54204c8a3ca26aeafd273139fc29baf70d0f6786","3e19a701ad1d5fd2dd25e0f79bb5d81df864116b"]},"commit2Childs":{"c0e7448656541edc407546460641f47950451b16":["ae67e1f82a53594208ca929f382ee861dad3d7a8"],"775c2566119fc914aaa5f131744dd2810a204565":["6244579a467d5f2673ac98265d74bddbea1a8114","199dfa410f1fdbfd3294106b04096cce5ed34b21","b7605579001505896d48b07160075a5c8b8e128e"],"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0":["775c2566119fc914aaa5f131744dd2810a204565","8917bfede3b4ca30f4305c1e391e9218959cd723","b7605579001505896d48b07160075a5c8b8e128e"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"556c8202987f72dd8458e25e21a82d98fc274979":["fc6d3be942e675e8251dbe10796cdb3a484bf607"],"9cbc4730743fac2e69e7d622848778d3ad9f2151":["c0e7448656541edc407546460641f47950451b16","58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"6244579a467d5f2673ac98265d74bddbea1a8114":["9cbc4730743fac2e69e7d622848778d3ad9f2151","199dfa410f1fdbfd3294106b04096cce5ed34b21","58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"87e78f3c129251e74ecc2ff73a32de0f27cf09d5":["556c8202987f72dd8458e25e21a82d98fc274979"],"71d31a7d5773508492505519bb5230b87c8937ad":["06086b5bd0f0d57858f0675becc58edf1f6b7c11"],"ae67e1f82a53594208ca929f382ee861dad3d7a8":["f8061ddd97f3352007d927dae445884a6f3d857b","54204c8a3ca26aeafd273139fc29baf70d0f6786"],"b7605579001505896d48b07160075a5c8b8e128e":[],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"54204c8a3ca26aeafd273139fc29baf70d0f6786":["f8061ddd97f3352007d927dae445884a6f3d857b","3e19a701ad1d5fd2dd25e0f79bb5d81df864116b","b0b597c65628ca9e73913a07e81691f8229bae35"],"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8917bfede3b4ca30f4305c1e391e9218959cd723","87e78f3c129251e74ecc2ff73a32de0f27cf09d5"],"06086b5bd0f0d57858f0675becc58edf1f6b7c11":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":[],"3e19a701ad1d5fd2dd25e0f79bb5d81df864116b":["71d31a7d5773508492505519bb5230b87c8937ad","b0b597c65628ca9e73913a07e81691f8229bae35"],"fc6d3be942e675e8251dbe10796cdb3a484bf607":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["8917bfede3b4ca30f4305c1e391e9218959cd723","199dfa410f1fdbfd3294106b04096cce5ed34b21","b7605579001505896d48b07160075a5c8b8e128e","f8061ddd97f3352007d927dae445884a6f3d857b","58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}