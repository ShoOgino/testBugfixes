{"path":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReferenceCountingMultiReader().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReferenceCountingMultiReader().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testReferenceCountingMultiReader().mjava","sourceNew":"  public void testReferenceCountingMultiReader() throws IOException {\n    for (int mode = 0; mode <=1; mode++) {\n      Directory dir1 = new MockRAMDirectory();\n      createIndex(dir1, false);\n      Directory dir2 = new MockRAMDirectory();\n      createIndex(dir2, true);\n      \n      IndexReader reader1 = IndexReader.open(dir1, false);\n      assertRefCountEquals(1, reader1);\n\n      IndexReader initReader2 = IndexReader.open(dir2, false);\n      IndexReader multiReader1 = new MultiReader(new IndexReader[] {reader1, initReader2}, (mode == 0));\n      modifyIndex(0, dir2);\n      assertRefCountEquals(1 + mode, reader1);\n      \n      IndexReader multiReader2 = multiReader1.reopen();\n      // index1 hasn't changed, so multiReader2 should share reader1 now with multiReader1\n      assertRefCountEquals(2 + mode, reader1);\n      \n      modifyIndex(0, dir1);\n      IndexReader reader2 = reader1.reopen();\n      assertRefCountEquals(2 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      modifyIndex(1, dir1);\n      IndexReader reader3 = reader2.reopen();\n      assertRefCountEquals(2 + mode, reader1);\n      assertRefCountEquals(1, reader2);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      reader1.close();\n      assertRefCountEquals(1, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, true);\n      dir1.close();\n      dir2.close();\n    }\n\n  }\n\n","sourceOld":"  public void testReferenceCountingMultiReader() throws IOException {\n    for (int mode = 0; mode <=1; mode++) {\n      Directory dir1 = new MockRAMDirectory();\n      createIndex(dir1, false);\n      Directory dir2 = new MockRAMDirectory();\n      createIndex(dir2, true);\n      \n      IndexReader reader1 = IndexReader.open(dir1, false);\n      assertRefCountEquals(1, reader1);\n\n      IndexReader initReader2 = IndexReader.open(dir2, false);\n      IndexReader multiReader1 = new MultiReader(new IndexReader[] {reader1, initReader2}, (mode == 0));\n      modifyIndex(0, dir2);\n      assertRefCountEquals(1 + mode, reader1);\n      \n      IndexReader multiReader2 = multiReader1.reopen();\n      // index1 hasn't changed, so multiReader2 should share reader1 now with multiReader1\n      assertRefCountEquals(2 + mode, reader1);\n      \n      modifyIndex(0, dir1);\n      IndexReader reader2 = reader1.reopen();\n      assertRefCountEquals(2 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      modifyIndex(1, dir1);\n      IndexReader reader3 = reader2.reopen();\n      assertRefCountEquals(2 + mode, reader1);\n      assertRefCountEquals(1, reader2);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      reader1.close();\n      assertRefCountEquals(1, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, true);\n      dir1.close();\n      dir2.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReferenceCountingMultiReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReferenceCountingMultiReader().mjava","sourceNew":"  public void testReferenceCountingMultiReader() throws IOException {\n    Random random = newRandom();\n    for (int mode = 0; mode <=1; mode++) {\n      Directory dir1 = new MockRAMDirectory();\n      createIndex(random, dir1, false);\n      Directory dir2 = new MockRAMDirectory();\n      createIndex(random, dir2, true);\n      \n      IndexReader reader1 = IndexReader.open(dir1, false);\n      assertRefCountEquals(1, reader1);\n\n      IndexReader initReader2 = IndexReader.open(dir2, false);\n      IndexReader multiReader1 = new MultiReader(new IndexReader[] {reader1, initReader2}, (mode == 0));\n      modifyIndex(0, dir2);\n      assertRefCountEquals(1 + mode, reader1);\n      \n      IndexReader multiReader2 = multiReader1.reopen();\n      // index1 hasn't changed, so multiReader2 should share reader1 now with multiReader1\n      assertRefCountEquals(2 + mode, reader1);\n      \n      modifyIndex(0, dir1);\n      IndexReader reader2 = reader1.reopen();\n      assertRefCountEquals(2 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      modifyIndex(1, dir1);\n      IndexReader reader3 = reader2.reopen();\n      assertRefCountEquals(2 + mode, reader1);\n      assertRefCountEquals(1, reader2);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      reader1.close();\n      assertRefCountEquals(1, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, true);\n      dir1.close();\n      dir2.close();\n    }\n\n  }\n\n","sourceOld":"  public void testReferenceCountingMultiReader() throws IOException {\n    for (int mode = 0; mode <=1; mode++) {\n      Directory dir1 = new MockRAMDirectory();\n      createIndex(dir1, false);\n      Directory dir2 = new MockRAMDirectory();\n      createIndex(dir2, true);\n      \n      IndexReader reader1 = IndexReader.open(dir1, false);\n      assertRefCountEquals(1, reader1);\n\n      IndexReader initReader2 = IndexReader.open(dir2, false);\n      IndexReader multiReader1 = new MultiReader(new IndexReader[] {reader1, initReader2}, (mode == 0));\n      modifyIndex(0, dir2);\n      assertRefCountEquals(1 + mode, reader1);\n      \n      IndexReader multiReader2 = multiReader1.reopen();\n      // index1 hasn't changed, so multiReader2 should share reader1 now with multiReader1\n      assertRefCountEquals(2 + mode, reader1);\n      \n      modifyIndex(0, dir1);\n      IndexReader reader2 = reader1.reopen();\n      assertRefCountEquals(2 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      modifyIndex(1, dir1);\n      IndexReader reader3 = reader2.reopen();\n      assertRefCountEquals(2 + mode, reader1);\n      assertRefCountEquals(1, reader2);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      reader1.close();\n      assertRefCountEquals(1, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, true);\n      dir1.close();\n      dir2.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReferenceCountingMultiReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReferenceCountingMultiReader().mjava","sourceNew":"  public void testReferenceCountingMultiReader() throws IOException {\n    Random random = newRandom();\n    for (int mode = 0; mode <=1; mode++) {\n      Directory dir1 = newDirectory(random);\n      createIndex(random, dir1, false);\n      Directory dir2 = newDirectory(random);\n      createIndex(random, dir2, true);\n      \n      IndexReader reader1 = IndexReader.open(dir1, false);\n      assertRefCountEquals(1, reader1);\n\n      IndexReader initReader2 = IndexReader.open(dir2, false);\n      IndexReader multiReader1 = new MultiReader(new IndexReader[] {reader1, initReader2}, (mode == 0));\n      modifyIndex(0, dir2);\n      assertRefCountEquals(1 + mode, reader1);\n      \n      IndexReader multiReader2 = multiReader1.reopen();\n      // index1 hasn't changed, so multiReader2 should share reader1 now with multiReader1\n      assertRefCountEquals(2 + mode, reader1);\n      \n      modifyIndex(0, dir1);\n      IndexReader reader2 = reader1.reopen();\n      assertRefCountEquals(2 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      modifyIndex(1, dir1);\n      IndexReader reader3 = reader2.reopen();\n      assertRefCountEquals(2 + mode, reader1);\n      assertRefCountEquals(1, reader2);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      reader1.close();\n      assertRefCountEquals(1, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, true);\n      dir1.close();\n      dir2.close();\n    }\n\n  }\n\n","sourceOld":"  public void testReferenceCountingMultiReader() throws IOException {\n    Random random = newRandom();\n    for (int mode = 0; mode <=1; mode++) {\n      Directory dir1 = new MockRAMDirectory();\n      createIndex(random, dir1, false);\n      Directory dir2 = new MockRAMDirectory();\n      createIndex(random, dir2, true);\n      \n      IndexReader reader1 = IndexReader.open(dir1, false);\n      assertRefCountEquals(1, reader1);\n\n      IndexReader initReader2 = IndexReader.open(dir2, false);\n      IndexReader multiReader1 = new MultiReader(new IndexReader[] {reader1, initReader2}, (mode == 0));\n      modifyIndex(0, dir2);\n      assertRefCountEquals(1 + mode, reader1);\n      \n      IndexReader multiReader2 = multiReader1.reopen();\n      // index1 hasn't changed, so multiReader2 should share reader1 now with multiReader1\n      assertRefCountEquals(2 + mode, reader1);\n      \n      modifyIndex(0, dir1);\n      IndexReader reader2 = reader1.reopen();\n      assertRefCountEquals(2 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      modifyIndex(1, dir1);\n      IndexReader reader3 = reader2.reopen();\n      assertRefCountEquals(2 + mode, reader1);\n      assertRefCountEquals(1, reader2);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      reader1.close();\n      assertRefCountEquals(1, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, true);\n      dir1.close();\n      dir2.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReferenceCountingMultiReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReferenceCountingMultiReader().mjava","sourceNew":"  public void testReferenceCountingMultiReader() throws IOException {\n    for (int mode = 0; mode <=1; mode++) {\n      Directory dir1 = newDirectory();\n      createIndex(random, dir1, false);\n      Directory dir2 = newDirectory();\n      createIndex(random, dir2, true);\n      \n      IndexReader reader1 = IndexReader.open(dir1, false);\n      assertRefCountEquals(1, reader1);\n\n      IndexReader initReader2 = IndexReader.open(dir2, false);\n      IndexReader multiReader1 = new MultiReader(new IndexReader[] {reader1, initReader2}, (mode == 0));\n      modifyIndex(0, dir2);\n      assertRefCountEquals(1 + mode, reader1);\n      \n      IndexReader multiReader2 = multiReader1.reopen();\n      // index1 hasn't changed, so multiReader2 should share reader1 now with multiReader1\n      assertRefCountEquals(2 + mode, reader1);\n      \n      modifyIndex(0, dir1);\n      IndexReader reader2 = reader1.reopen();\n      assertRefCountEquals(2 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      modifyIndex(1, dir1);\n      IndexReader reader3 = reader2.reopen();\n      assertRefCountEquals(2 + mode, reader1);\n      assertRefCountEquals(1, reader2);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      reader1.close();\n      assertRefCountEquals(1, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, true);\n      dir1.close();\n      dir2.close();\n    }\n\n  }\n\n","sourceOld":"  public void testReferenceCountingMultiReader() throws IOException {\n    Random random = newRandom();\n    for (int mode = 0; mode <=1; mode++) {\n      Directory dir1 = newDirectory(random);\n      createIndex(random, dir1, false);\n      Directory dir2 = newDirectory(random);\n      createIndex(random, dir2, true);\n      \n      IndexReader reader1 = IndexReader.open(dir1, false);\n      assertRefCountEquals(1, reader1);\n\n      IndexReader initReader2 = IndexReader.open(dir2, false);\n      IndexReader multiReader1 = new MultiReader(new IndexReader[] {reader1, initReader2}, (mode == 0));\n      modifyIndex(0, dir2);\n      assertRefCountEquals(1 + mode, reader1);\n      \n      IndexReader multiReader2 = multiReader1.reopen();\n      // index1 hasn't changed, so multiReader2 should share reader1 now with multiReader1\n      assertRefCountEquals(2 + mode, reader1);\n      \n      modifyIndex(0, dir1);\n      IndexReader reader2 = reader1.reopen();\n      assertRefCountEquals(2 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      modifyIndex(1, dir1);\n      IndexReader reader3 = reader2.reopen();\n      assertRefCountEquals(2 + mode, reader1);\n      assertRefCountEquals(1, reader2);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      reader1.close();\n      assertRefCountEquals(1, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, true);\n      dir1.close();\n      dir2.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReferenceCountingMultiReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReferenceCountingMultiReader().mjava","sourceNew":"  public void testReferenceCountingMultiReader() throws IOException {\n    for (int mode = 0; mode <=1; mode++) {\n      Directory dir1 = newDirectory();\n      createIndex(random, dir1, false);\n      Directory dir2 = newDirectory();\n      createIndex(random, dir2, true);\n      \n      IndexReader reader1 = IndexReader.open(dir1, false);\n      assertRefCountEquals(1, reader1);\n\n      IndexReader initReader2 = IndexReader.open(dir2, false);\n      IndexReader multiReader1 = new MultiReader(new IndexReader[] {reader1, initReader2}, (mode == 0));\n      modifyIndex(0, dir2);\n      assertRefCountEquals(1 + mode, reader1);\n      \n      IndexReader multiReader2 = multiReader1.reopen();\n      // index1 hasn't changed, so multiReader2 should share reader1 now with multiReader1\n      assertRefCountEquals(2 + mode, reader1);\n      \n      modifyIndex(0, dir1);\n      IndexReader reader2 = reader1.reopen();\n      assertRefCountEquals(2 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      modifyIndex(1, dir1);\n      IndexReader reader3 = reader2.reopen();\n      assertRefCountEquals(2 + mode, reader1);\n      assertRefCountEquals(1, reader2);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      reader1.close();\n      assertRefCountEquals(1, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, true);\n      dir1.close();\n      dir2.close();\n    }\n\n  }\n\n","sourceOld":"  public void testReferenceCountingMultiReader() throws IOException {\n    for (int mode = 0; mode <=1; mode++) {\n      Directory dir1 = new MockRAMDirectory();\n      createIndex(dir1, false);\n      Directory dir2 = new MockRAMDirectory();\n      createIndex(dir2, true);\n      \n      IndexReader reader1 = IndexReader.open(dir1, false);\n      assertRefCountEquals(1, reader1);\n\n      IndexReader initReader2 = IndexReader.open(dir2, false);\n      IndexReader multiReader1 = new MultiReader(new IndexReader[] {reader1, initReader2}, (mode == 0));\n      modifyIndex(0, dir2);\n      assertRefCountEquals(1 + mode, reader1);\n      \n      IndexReader multiReader2 = multiReader1.reopen();\n      // index1 hasn't changed, so multiReader2 should share reader1 now with multiReader1\n      assertRefCountEquals(2 + mode, reader1);\n      \n      modifyIndex(0, dir1);\n      IndexReader reader2 = reader1.reopen();\n      assertRefCountEquals(2 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      modifyIndex(1, dir1);\n      IndexReader reader3 = reader2.reopen();\n      assertRefCountEquals(2 + mode, reader1);\n      assertRefCountEquals(1, reader2);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      reader1.close();\n      assertRefCountEquals(1, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, true);\n      dir1.close();\n      dir2.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a8259c922a83abc544609227a60d48e5ee93e7e","date":1317679620,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReferenceCountingMultiReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReferenceCountingMultiReader().mjava","sourceNew":"  public void testReferenceCountingMultiReader() throws IOException {\n    for (int mode = 0; mode <=1; mode++) {\n      Directory dir1 = newDirectory();\n      createIndex(random, dir1, false);\n      Directory dir2 = newDirectory();\n      createIndex(random, dir2, true);\n      \n      IndexReader reader1 = IndexReader.open(dir1, false);\n      assertRefCountEquals(1, reader1);\n\n      IndexReader initReader2 = IndexReader.open(dir2, false);\n      IndexReader multiReader1 = new MultiReader(new IndexReader[] {reader1, initReader2}, (mode == 0));\n      modifyIndex(0, dir2);\n      assertRefCountEquals(1 + mode, reader1);\n      \n      IndexReader multiReader2 = IndexReader.openIfChanged(multiReader1);\n      assertNotNull(multiReader2);\n      // index1 hasn't changed, so multiReader2 should share reader1 now with multiReader1\n      assertRefCountEquals(2 + mode, reader1);\n      \n      modifyIndex(0, dir1);\n      IndexReader reader2 = IndexReader.openIfChanged(reader1);\n      assertNotNull(reader2);\n      assertNull(IndexReader.openIfChanged(reader2));\n      assertRefCountEquals(2 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      modifyIndex(1, dir1);\n      IndexReader reader3 = IndexReader.openIfChanged(reader2);\n      assertNotNull(reader3);\n      assertRefCountEquals(2 + mode, reader1);\n      assertRefCountEquals(1, reader2);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      reader1.close();\n      assertRefCountEquals(1, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, true);\n      dir1.close();\n      dir2.close();\n    }\n\n  }\n\n","sourceOld":"  public void testReferenceCountingMultiReader() throws IOException {\n    for (int mode = 0; mode <=1; mode++) {\n      Directory dir1 = newDirectory();\n      createIndex(random, dir1, false);\n      Directory dir2 = newDirectory();\n      createIndex(random, dir2, true);\n      \n      IndexReader reader1 = IndexReader.open(dir1, false);\n      assertRefCountEquals(1, reader1);\n\n      IndexReader initReader2 = IndexReader.open(dir2, false);\n      IndexReader multiReader1 = new MultiReader(new IndexReader[] {reader1, initReader2}, (mode == 0));\n      modifyIndex(0, dir2);\n      assertRefCountEquals(1 + mode, reader1);\n      \n      IndexReader multiReader2 = multiReader1.reopen();\n      // index1 hasn't changed, so multiReader2 should share reader1 now with multiReader1\n      assertRefCountEquals(2 + mode, reader1);\n      \n      modifyIndex(0, dir1);\n      IndexReader reader2 = reader1.reopen();\n      assertRefCountEquals(2 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      modifyIndex(1, dir1);\n      IndexReader reader3 = reader2.reopen();\n      assertRefCountEquals(2 + mode, reader1);\n      assertRefCountEquals(1, reader2);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      reader1.close();\n      assertRefCountEquals(1, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, true);\n      dir1.close();\n      dir2.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4122a26e1fd0457a340616673a3d3aada370f713","date":1322955654,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReferenceCountingMultiReader().mjava","sourceNew":null,"sourceOld":"  public void testReferenceCountingMultiReader() throws IOException {\n    for (int mode = 0; mode <=1; mode++) {\n      Directory dir1 = newDirectory();\n      createIndex(random, dir1, false);\n      Directory dir2 = newDirectory();\n      createIndex(random, dir2, true);\n      \n      IndexReader reader1 = IndexReader.open(dir1, false);\n      assertRefCountEquals(1, reader1);\n\n      IndexReader initReader2 = IndexReader.open(dir2, false);\n      IndexReader multiReader1 = new MultiReader(new IndexReader[] {reader1, initReader2}, (mode == 0));\n      modifyIndex(0, dir2);\n      assertRefCountEquals(1 + mode, reader1);\n      \n      IndexReader multiReader2 = IndexReader.openIfChanged(multiReader1);\n      assertNotNull(multiReader2);\n      // index1 hasn't changed, so multiReader2 should share reader1 now with multiReader1\n      assertRefCountEquals(2 + mode, reader1);\n      \n      modifyIndex(0, dir1);\n      IndexReader reader2 = IndexReader.openIfChanged(reader1);\n      assertNotNull(reader2);\n      assertNull(IndexReader.openIfChanged(reader2));\n      assertRefCountEquals(2 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      modifyIndex(1, dir1);\n      IndexReader reader3 = IndexReader.openIfChanged(reader2);\n      assertNotNull(reader3);\n      assertRefCountEquals(2 + mode, reader1);\n      assertRefCountEquals(1, reader2);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      reader1.close();\n      assertRefCountEquals(1, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, true);\n      dir1.close();\n      dir2.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ec62bd7d903ac435fcc4ad1f5a67ccc5700d9a3","date":1322958335,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReferenceCountingMultiReader().mjava","pathOld":"/dev/null","sourceNew":"  public void testReferenceCountingMultiReader() throws IOException {\n    for (int mode = 0; mode <=1; mode++) {\n      Directory dir1 = newDirectory();\n      createIndex(random, dir1, false);\n      Directory dir2 = newDirectory();\n      createIndex(random, dir2, true);\n      \n      IndexReader reader1 = IndexReader.open(dir1);\n      assertRefCountEquals(1, reader1);\n\n      IndexReader initReader2 = IndexReader.open(dir2);\n      IndexReader multiReader1 = new MultiReader(new IndexReader[] {reader1, initReader2}, (mode == 0));\n      modifyIndex(0, dir2);\n      assertRefCountEquals(1 + mode, reader1);\n      \n      IndexReader multiReader2 = IndexReader.openIfChanged(multiReader1);\n      assertNotNull(multiReader2);\n      // index1 hasn't changed, so multiReader2 should share reader1 now with multiReader1\n      assertRefCountEquals(2 + mode, reader1);\n      \n      modifyIndex(0, dir1);\n      IndexReader reader2 = IndexReader.openIfChanged(reader1);\n      assertNotNull(reader2);\n      assertNull(IndexReader.openIfChanged(reader2));\n      assertRefCountEquals(2 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      modifyIndex(1, dir1);\n      IndexReader reader3 = IndexReader.openIfChanged(reader2);\n      assertNotNull(reader3);\n      assertRefCountEquals(2 + mode, reader1);\n      assertRefCountEquals(1, reader2);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      reader1.close();\n      assertRefCountEquals(1, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, true);\n      dir1.close();\n      dir2.close();\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReferenceCountingMultiReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReferenceCountingMultiReader().mjava","sourceNew":"  public void testReferenceCountingMultiReader() throws IOException {\n    for (int mode = 0; mode <=1; mode++) {\n      Directory dir1 = newDirectory();\n      createIndex(random, dir1, false);\n      Directory dir2 = newDirectory();\n      createIndex(random, dir2, true);\n      \n      IndexReader reader1 = IndexReader.open(dir1);\n      assertRefCountEquals(1, reader1);\n\n      IndexReader initReader2 = IndexReader.open(dir2);\n      IndexReader multiReader1 = new MultiReader(new IndexReader[] {reader1, initReader2}, (mode == 0));\n      modifyIndex(0, dir2);\n      assertRefCountEquals(1 + mode, reader1);\n      \n      IndexReader multiReader2 = IndexReader.openIfChanged(multiReader1);\n      assertNotNull(multiReader2);\n      // index1 hasn't changed, so multiReader2 should share reader1 now with multiReader1\n      assertRefCountEquals(2 + mode, reader1);\n      \n      modifyIndex(0, dir1);\n      IndexReader reader2 = IndexReader.openIfChanged(reader1);\n      assertNotNull(reader2);\n      assertNull(IndexReader.openIfChanged(reader2));\n      assertRefCountEquals(2 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      modifyIndex(1, dir1);\n      IndexReader reader3 = IndexReader.openIfChanged(reader2);\n      assertNotNull(reader3);\n      assertRefCountEquals(2 + mode, reader1);\n      assertRefCountEquals(1, reader2);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      reader1.close();\n      assertRefCountEquals(1, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, true);\n      dir1.close();\n      dir2.close();\n    }\n\n  }\n\n","sourceOld":"  public void testReferenceCountingMultiReader() throws IOException {\n    for (int mode = 0; mode <=1; mode++) {\n      Directory dir1 = newDirectory();\n      createIndex(random, dir1, false);\n      Directory dir2 = newDirectory();\n      createIndex(random, dir2, true);\n      \n      IndexReader reader1 = IndexReader.open(dir1, false);\n      assertRefCountEquals(1, reader1);\n\n      IndexReader initReader2 = IndexReader.open(dir2, false);\n      IndexReader multiReader1 = new MultiReader(new IndexReader[] {reader1, initReader2}, (mode == 0));\n      modifyIndex(0, dir2);\n      assertRefCountEquals(1 + mode, reader1);\n      \n      IndexReader multiReader2 = IndexReader.openIfChanged(multiReader1);\n      assertNotNull(multiReader2);\n      // index1 hasn't changed, so multiReader2 should share reader1 now with multiReader1\n      assertRefCountEquals(2 + mode, reader1);\n      \n      modifyIndex(0, dir1);\n      IndexReader reader2 = IndexReader.openIfChanged(reader1);\n      assertNotNull(reader2);\n      assertNull(IndexReader.openIfChanged(reader2));\n      assertRefCountEquals(2 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      modifyIndex(1, dir1);\n      IndexReader reader3 = IndexReader.openIfChanged(reader2);\n      assertNotNull(reader3);\n      assertRefCountEquals(2 + mode, reader1);\n      assertRefCountEquals(1, reader2);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      reader1.close();\n      assertRefCountEquals(1, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, true);\n      dir1.close();\n      dir2.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReferenceCountingMultiReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReferenceCountingMultiReader().mjava","sourceNew":"  public void testReferenceCountingMultiReader() throws IOException {\n    for (int mode = 0; mode <=1; mode++) {\n      Directory dir1 = newDirectory();\n      createIndex(random, dir1, false);\n      Directory dir2 = newDirectory();\n      createIndex(random, dir2, true);\n      \n      IndexReader reader1 = IndexReader.open(dir1);\n      assertRefCountEquals(1, reader1);\n\n      IndexReader initReader2 = IndexReader.open(dir2);\n      IndexReader multiReader1 = new MultiReader(new IndexReader[] {reader1, initReader2}, (mode == 0));\n      modifyIndex(0, dir2);\n      assertRefCountEquals(1 + mode, reader1);\n      \n      IndexReader multiReader2 = IndexReader.openIfChanged(multiReader1);\n      assertNotNull(multiReader2);\n      // index1 hasn't changed, so multiReader2 should share reader1 now with multiReader1\n      assertRefCountEquals(2 + mode, reader1);\n      \n      modifyIndex(0, dir1);\n      IndexReader reader2 = IndexReader.openIfChanged(reader1);\n      assertNotNull(reader2);\n      assertNull(IndexReader.openIfChanged(reader2));\n      assertRefCountEquals(2 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      modifyIndex(1, dir1);\n      IndexReader reader3 = IndexReader.openIfChanged(reader2);\n      assertNotNull(reader3);\n      assertRefCountEquals(2 + mode, reader1);\n      assertRefCountEquals(1, reader2);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      reader1.close();\n      assertRefCountEquals(1, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, true);\n      dir1.close();\n      dir2.close();\n    }\n\n  }\n\n","sourceOld":"  public void testReferenceCountingMultiReader() throws IOException {\n    for (int mode = 0; mode <=1; mode++) {\n      Directory dir1 = newDirectory();\n      createIndex(random, dir1, false);\n      Directory dir2 = newDirectory();\n      createIndex(random, dir2, true);\n      \n      IndexReader reader1 = IndexReader.open(dir1, false);\n      assertRefCountEquals(1, reader1);\n\n      IndexReader initReader2 = IndexReader.open(dir2, false);\n      IndexReader multiReader1 = new MultiReader(new IndexReader[] {reader1, initReader2}, (mode == 0));\n      modifyIndex(0, dir2);\n      assertRefCountEquals(1 + mode, reader1);\n      \n      IndexReader multiReader2 = IndexReader.openIfChanged(multiReader1);\n      assertNotNull(multiReader2);\n      // index1 hasn't changed, so multiReader2 should share reader1 now with multiReader1\n      assertRefCountEquals(2 + mode, reader1);\n      \n      modifyIndex(0, dir1);\n      IndexReader reader2 = IndexReader.openIfChanged(reader1);\n      assertNotNull(reader2);\n      assertNull(IndexReader.openIfChanged(reader2));\n      assertRefCountEquals(2 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      modifyIndex(1, dir1);\n      IndexReader reader3 = IndexReader.openIfChanged(reader2);\n      assertNotNull(reader3);\n      assertRefCountEquals(2 + mode, reader1);\n      assertRefCountEquals(1, reader2);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      reader1.close();\n      assertRefCountEquals(1, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, true);\n      dir1.close();\n      dir2.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d40b62adb64d8f7b2f85ee849349cfb0bef03f45","date":1327855938,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReferenceCountingMultiReader().mjava","sourceNew":null,"sourceOld":"  public void testReferenceCountingMultiReader() throws IOException {\n    for (int mode = 0; mode <=1; mode++) {\n      Directory dir1 = newDirectory();\n      createIndex(random, dir1, false);\n      Directory dir2 = newDirectory();\n      createIndex(random, dir2, true);\n      \n      IndexReader reader1 = IndexReader.open(dir1);\n      assertRefCountEquals(1, reader1);\n\n      IndexReader initReader2 = IndexReader.open(dir2);\n      IndexReader multiReader1 = new MultiReader(new IndexReader[] {reader1, initReader2}, (mode == 0));\n      modifyIndex(0, dir2);\n      assertRefCountEquals(1 + mode, reader1);\n      \n      IndexReader multiReader2 = IndexReader.openIfChanged(multiReader1);\n      assertNotNull(multiReader2);\n      // index1 hasn't changed, so multiReader2 should share reader1 now with multiReader1\n      assertRefCountEquals(2 + mode, reader1);\n      \n      modifyIndex(0, dir1);\n      IndexReader reader2 = IndexReader.openIfChanged(reader1);\n      assertNotNull(reader2);\n      assertNull(IndexReader.openIfChanged(reader2));\n      assertRefCountEquals(2 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      modifyIndex(1, dir1);\n      IndexReader reader3 = IndexReader.openIfChanged(reader2);\n      assertNotNull(reader3);\n      assertRefCountEquals(2 + mode, reader1);\n      assertRefCountEquals(1, reader2);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      reader1.close();\n      assertRefCountEquals(1, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, true);\n      dir1.close();\n      dir2.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReferenceCountingMultiReader().mjava","sourceNew":null,"sourceOld":"  public void testReferenceCountingMultiReader() throws IOException {\n    for (int mode = 0; mode <=1; mode++) {\n      Directory dir1 = newDirectory();\n      createIndex(random, dir1, false);\n      Directory dir2 = newDirectory();\n      createIndex(random, dir2, true);\n      \n      IndexReader reader1 = IndexReader.open(dir1);\n      assertRefCountEquals(1, reader1);\n\n      IndexReader initReader2 = IndexReader.open(dir2);\n      IndexReader multiReader1 = new MultiReader(new IndexReader[] {reader1, initReader2}, (mode == 0));\n      modifyIndex(0, dir2);\n      assertRefCountEquals(1 + mode, reader1);\n      \n      IndexReader multiReader2 = IndexReader.openIfChanged(multiReader1);\n      assertNotNull(multiReader2);\n      // index1 hasn't changed, so multiReader2 should share reader1 now with multiReader1\n      assertRefCountEquals(2 + mode, reader1);\n      \n      modifyIndex(0, dir1);\n      IndexReader reader2 = IndexReader.openIfChanged(reader1);\n      assertNotNull(reader2);\n      assertNull(IndexReader.openIfChanged(reader2));\n      assertRefCountEquals(2 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      modifyIndex(1, dir1);\n      IndexReader reader3 = IndexReader.openIfChanged(reader2);\n      assertNotNull(reader3);\n      assertRefCountEquals(2 + mode, reader1);\n      assertRefCountEquals(1, reader2);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      reader1.close();\n      assertRefCountEquals(1, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, true);\n      dir1.close();\n      dir2.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["8a8259c922a83abc544609227a60d48e5ee93e7e","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","1f653cfcf159baeaafe5d01682a911e95bba4012"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3615ce4a1f785ae1b779244de52c6a7d99227e60","d40b62adb64d8f7b2f85ee849349cfb0bef03f45"],"8a8259c922a83abc544609227a60d48e5ee93e7e":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"2ec62bd7d903ac435fcc4ad1f5a67ccc5700d9a3":["4122a26e1fd0457a340616673a3d3aada370f713"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["8a8259c922a83abc544609227a60d48e5ee93e7e","2ec62bd7d903ac435fcc4ad1f5a67ccc5700d9a3"],"d40b62adb64d8f7b2f85ee849349cfb0bef03f45":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"4122a26e1fd0457a340616673a3d3aada370f713":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8a8259c922a83abc544609227a60d48e5ee93e7e":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","4122a26e1fd0457a340616673a3d3aada370f713"],"2ec62bd7d903ac435fcc4ad1f5a67ccc5700d9a3":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8a8259c922a83abc544609227a60d48e5ee93e7e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","5cab9a86bd67202d20b6adc463008c8e982b070a","d40b62adb64d8f7b2f85ee849349cfb0bef03f45"],"d40b62adb64d8f7b2f85ee849349cfb0bef03f45":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"4122a26e1fd0457a340616673a3d3aada370f713":["2ec62bd7d903ac435fcc4ad1f5a67ccc5700d9a3"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}