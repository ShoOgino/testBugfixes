{"path":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/hhmm/HHMMSegmenter#getCharTypes(String).mjava","commits":[{"id":"05ff0cc6e864c7d71a48579f2acfca4f58943568","date":1242295762,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/hhmm/HHMMSegmenter#getCharTypes(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * 为sentence中的每个字符确定唯一的字符类型\n   * \n   * @see Utility.charType(char)\n   * @param sentence 输入的完成句子\n   * @return 返回的字符类型数组，如果输入为null，返回也是null\n   */\n  private static int[] getCharTypes(String sentence) {\n    int length = sentence.length();\n    int[] charTypeArray = new int[length];\n    // 生成对应单个汉字的字符类型数组\n    for (int i = 0; i < length; i++) {\n      charTypeArray[i] = Utility.getCharType(sentence.charAt(i));\n    }\n\n    return charTypeArray;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0bf529f7fed34c3c76abb3bda2ecc9a01a0822aa"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"be5ef2f970a6c1141562b06dd26ed04c3dc29d70","date":1246444343,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/hhmm/HHMMSegmenter#getCharTypes(String).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/hhmm/HHMMSegmenter#getCharTypes(String).mjava","sourceNew":"  /**\n   * Get the character types for every character in a sentence.\n   * \n   * @see Utility.charType(char)\n   * @param sentence input sentence\n   * @return array of character types corresponding to character positions in the sentence\n   */\n  private static int[] getCharTypes(String sentence) {\n    int length = sentence.length();\n    int[] charTypeArray = new int[length];\n    // the type of each character by position\n    for (int i = 0; i < length; i++) {\n      charTypeArray[i] = Utility.getCharType(sentence.charAt(i));\n    }\n\n    return charTypeArray;\n  }\n\n","sourceOld":"  /**\n   * 为sentence中的每个字符确定唯一的字符类型\n   * \n   * @see Utility.charType(char)\n   * @param sentence 输入的完成句子\n   * @return 返回的字符类型数组，如果输入为null，返回也是null\n   */\n  private static int[] getCharTypes(String sentence) {\n    int length = sentence.length();\n    int[] charTypeArray = new int[length];\n    // 生成对应单个汉字的字符类型数组\n    for (int i = 0; i < length; i++) {\n      charTypeArray[i] = Utility.getCharType(sentence.charAt(i));\n    }\n\n    return charTypeArray;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/HHMMSegmenter#getCharTypes(String).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/hhmm/HHMMSegmenter#getCharTypes(String).mjava","sourceNew":"  /**\n   * Get the character types for every character in a sentence.\n   * \n   * @see Utility.charType(char)\n   * @param sentence input sentence\n   * @return array of character types corresponding to character positions in the sentence\n   */\n  private static int[] getCharTypes(String sentence) {\n    int length = sentence.length();\n    int[] charTypeArray = new int[length];\n    // the type of each character by position\n    for (int i = 0; i < length; i++) {\n      charTypeArray[i] = Utility.getCharType(sentence.charAt(i));\n    }\n\n    return charTypeArray;\n  }\n\n","sourceOld":"  /**\n   * Get the character types for every character in a sentence.\n   * \n   * @see Utility.charType(char)\n   * @param sentence input sentence\n   * @return array of character types corresponding to character positions in the sentence\n   */\n  private static int[] getCharTypes(String sentence) {\n    int length = sentence.length();\n    int[] charTypeArray = new int[length];\n    // the type of each character by position\n    for (int i = 0; i < length; i++) {\n      charTypeArray[i] = Utility.getCharType(sentence.charAt(i));\n    }\n\n    return charTypeArray;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"be5ef2f970a6c1141562b06dd26ed04c3dc29d70":["05ff0cc6e864c7d71a48579f2acfca4f58943568"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["be5ef2f970a6c1141562b06dd26ed04c3dc29d70"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05ff0cc6e864c7d71a48579f2acfca4f58943568":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd745d580729e528151b58aeda87ef82f1b95c9b"]},"commit2Childs":{"be5ef2f970a6c1141562b06dd26ed04c3dc29d70":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05ff0cc6e864c7d71a48579f2acfca4f58943568"],"05ff0cc6e864c7d71a48579f2acfca4f58943568":["be5ef2f970a6c1141562b06dd26ed04c3dc29d70"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}