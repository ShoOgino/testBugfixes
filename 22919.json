{"path":"src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","commits":[{"id":"6eb6723414c7578e3be2fa28b281a224547cdf93","date":1144287642,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","pathOld":"/dev/null","sourceNew":"  /**\r\n   * Tests that index merging (specifically addIndexes()) doesn't\r\n   * change the index order of documents.\r\n   */\r\n  public void testLucene() throws IOException\r\n  {\r\n\r\n    int num=100;\r\n\r\n    Directory indexA = new RAMDirectory();\r\n    Directory indexB = new RAMDirectory();\r\n\r\n    fillIndex(indexA, 0, num);\r\n    boolean fail = verifyIndex(indexA, 0);\r\n    if (fail)\r\n    {\r\n      fail(\"Index a is invalid\");\r\n    }\r\n\r\n    fillIndex(indexB, num, num);\r\n    fail = verifyIndex(indexB, num);\r\n    if (fail)\r\n    {\r\n      fail(\"Index b is invalid\");\r\n    }\r\n\r\n    Directory merged = new RAMDirectory();\r\n\r\n    IndexWriter writer = new IndexWriter(merged, new StandardAnalyzer(), true);\r\n    writer.setMergeFactor(2);\r\n\r\n    writer.addIndexes(new Directory[]{indexA, indexB});\r\n    writer.close();\r\n    merged.close();\r\n\r\n    fail = verifyIndex(merged, 0);\r\n\r\n    assertFalse(\"The merged index is invalid\", fail);\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f213e1a7b0f5f10ce77e61a72c912096fe815ae6","date":1152224047,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","sourceNew":"  /**\r\n   * Tests that index merging (specifically addIndexes()) doesn't\r\n   * change the index order of documents.\r\n   */\r\n  public void testLucene() throws IOException\r\n  {\r\n\r\n    int num=100;\r\n\r\n    Directory indexA = new RAMDirectory();\r\n    Directory indexB = new RAMDirectory();\r\n\r\n    fillIndex(indexA, 0, num);\r\n    boolean fail = verifyIndex(indexA, 0);\r\n    if (fail)\r\n    {\r\n      fail(\"Index a is invalid\");\r\n    }\r\n\r\n    fillIndex(indexB, num, num);\r\n    fail = verifyIndex(indexB, num);\r\n    if (fail)\r\n    {\r\n      fail(\"Index b is invalid\");\r\n    }\r\n\r\n    Directory merged = new RAMDirectory();\r\n\r\n    IndexWriter writer = new IndexWriter(merged, new StandardAnalyzer(), true);\r\n    writer.setMergeFactor(2);\r\n\r\n    writer.addIndexes(new Directory[]{indexA, indexB});\r\n    writer.close();\r\n\r\n    fail = verifyIndex(merged, 0);\r\n    merged.close();\r\n\r\n    assertFalse(\"The merged index is invalid\", fail);\r\n  }\r\n\n","sourceOld":"  /**\r\n   * Tests that index merging (specifically addIndexes()) doesn't\r\n   * change the index order of documents.\r\n   */\r\n  public void testLucene() throws IOException\r\n  {\r\n\r\n    int num=100;\r\n\r\n    Directory indexA = new RAMDirectory();\r\n    Directory indexB = new RAMDirectory();\r\n\r\n    fillIndex(indexA, 0, num);\r\n    boolean fail = verifyIndex(indexA, 0);\r\n    if (fail)\r\n    {\r\n      fail(\"Index a is invalid\");\r\n    }\r\n\r\n    fillIndex(indexB, num, num);\r\n    fail = verifyIndex(indexB, num);\r\n    if (fail)\r\n    {\r\n      fail(\"Index b is invalid\");\r\n    }\r\n\r\n    Directory merged = new RAMDirectory();\r\n\r\n    IndexWriter writer = new IndexWriter(merged, new StandardAnalyzer(), true);\r\n    writer.setMergeFactor(2);\r\n\r\n    writer.addIndexes(new Directory[]{indexA, indexB});\r\n    writer.close();\r\n    merged.close();\r\n\r\n    fail = verifyIndex(merged, 0);\r\n\r\n    assertFalse(\"The merged index is invalid\", fail);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1405362241b561f5590ff4a87d5d6e173bcd9cf","date":1190107634,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","sourceNew":"  /**\r\n   * Tests that index merging (specifically addIndexes()) doesn't\r\n   * change the index order of documents.\r\n   */\r\n  public void testLucene() throws IOException\r\n  {\r\n\r\n    int num=100;\r\n\r\n    Directory indexA = new MockRAMDirectory();\r\n    Directory indexB = new MockRAMDirectory();\r\n\r\n    fillIndex(indexA, 0, num);\r\n    boolean fail = verifyIndex(indexA, 0);\r\n    if (fail)\r\n    {\r\n      fail(\"Index a is invalid\");\r\n    }\r\n\r\n    fillIndex(indexB, num, num);\r\n    fail = verifyIndex(indexB, num);\r\n    if (fail)\r\n    {\r\n      fail(\"Index b is invalid\");\r\n    }\r\n\r\n    Directory merged = new MockRAMDirectory();\r\n\r\n    IndexWriter writer = new IndexWriter(merged, new StandardAnalyzer(), true);\r\n    writer.setMergeFactor(2);\r\n\r\n    writer.addIndexes(new Directory[]{indexA, indexB});\r\n    writer.close();\r\n\r\n    fail = verifyIndex(merged, 0);\r\n    merged.close();\r\n\r\n    assertFalse(\"The merged index is invalid\", fail);\r\n  }\r\n\n","sourceOld":"  /**\r\n   * Tests that index merging (specifically addIndexes()) doesn't\r\n   * change the index order of documents.\r\n   */\r\n  public void testLucene() throws IOException\r\n  {\r\n\r\n    int num=100;\r\n\r\n    Directory indexA = new RAMDirectory();\r\n    Directory indexB = new RAMDirectory();\r\n\r\n    fillIndex(indexA, 0, num);\r\n    boolean fail = verifyIndex(indexA, 0);\r\n    if (fail)\r\n    {\r\n      fail(\"Index a is invalid\");\r\n    }\r\n\r\n    fillIndex(indexB, num, num);\r\n    fail = verifyIndex(indexB, num);\r\n    if (fail)\r\n    {\r\n      fail(\"Index b is invalid\");\r\n    }\r\n\r\n    Directory merged = new RAMDirectory();\r\n\r\n    IndexWriter writer = new IndexWriter(merged, new StandardAnalyzer(), true);\r\n    writer.setMergeFactor(2);\r\n\r\n    writer.addIndexes(new Directory[]{indexA, indexB});\r\n    writer.close();\r\n\r\n    fail = verifyIndex(merged, 0);\r\n    merged.close();\r\n\r\n    assertFalse(\"The merged index is invalid\", fail);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","sourceNew":"  /**\r\n   * Tests that index merging (specifically addIndexes()) doesn't\r\n   * change the index order of documents.\r\n   */\r\n  public void testLucene() throws IOException\r\n  {\r\n\r\n    int num=100;\r\n\r\n    Directory indexA = new MockRAMDirectory();\r\n    Directory indexB = new MockRAMDirectory();\r\n\r\n    fillIndex(indexA, 0, num);\r\n    boolean fail = verifyIndex(indexA, 0);\r\n    if (fail)\r\n    {\r\n      fail(\"Index a is invalid\");\r\n    }\r\n\r\n    fillIndex(indexB, num, num);\r\n    fail = verifyIndex(indexB, num);\r\n    if (fail)\r\n    {\r\n      fail(\"Index b is invalid\");\r\n    }\r\n\r\n    Directory merged = new MockRAMDirectory();\r\n\r\n    IndexWriter writer = new IndexWriter(merged, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\r\n    writer.setMergeFactor(2);\r\n\r\n    writer.addIndexes(new Directory[]{indexA, indexB});\r\n    writer.close();\r\n\r\n    fail = verifyIndex(merged, 0);\r\n    merged.close();\r\n\r\n    assertFalse(\"The merged index is invalid\", fail);\r\n  }\r\n\n","sourceOld":"  /**\r\n   * Tests that index merging (specifically addIndexes()) doesn't\r\n   * change the index order of documents.\r\n   */\r\n  public void testLucene() throws IOException\r\n  {\r\n\r\n    int num=100;\r\n\r\n    Directory indexA = new MockRAMDirectory();\r\n    Directory indexB = new MockRAMDirectory();\r\n\r\n    fillIndex(indexA, 0, num);\r\n    boolean fail = verifyIndex(indexA, 0);\r\n    if (fail)\r\n    {\r\n      fail(\"Index a is invalid\");\r\n    }\r\n\r\n    fillIndex(indexB, num, num);\r\n    fail = verifyIndex(indexB, num);\r\n    if (fail)\r\n    {\r\n      fail(\"Index b is invalid\");\r\n    }\r\n\r\n    Directory merged = new MockRAMDirectory();\r\n\r\n    IndexWriter writer = new IndexWriter(merged, new StandardAnalyzer(), true);\r\n    writer.setMergeFactor(2);\r\n\r\n    writer.addIndexes(new Directory[]{indexA, indexB});\r\n    writer.close();\r\n\r\n    fail = verifyIndex(merged, 0);\r\n    merged.close();\r\n\r\n    assertFalse(\"The merged index is invalid\", fail);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2123bddbd65dea198cac380540636ce43a880403","date":1211269254,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","sourceNew":"  /**\n   * Tests that index merging (specifically addIndexes()) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException\n  {\n\n    int num=100;\n\n    Directory indexA = new MockRAMDirectory();\n    Directory indexB = new MockRAMDirectory();\n\n    fillIndex(indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(merged, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n\n    writer.addIndexes(new Directory[]{indexA, indexB});\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n    merged.close();\n\n    assertFalse(\"The merged index is invalid\", fail);\n  }\n\n","sourceOld":"  /**\r\n   * Tests that index merging (specifically addIndexes()) doesn't\r\n   * change the index order of documents.\r\n   */\r\n  public void testLucene() throws IOException\r\n  {\r\n\r\n    int num=100;\r\n\r\n    Directory indexA = new MockRAMDirectory();\r\n    Directory indexB = new MockRAMDirectory();\r\n\r\n    fillIndex(indexA, 0, num);\r\n    boolean fail = verifyIndex(indexA, 0);\r\n    if (fail)\r\n    {\r\n      fail(\"Index a is invalid\");\r\n    }\r\n\r\n    fillIndex(indexB, num, num);\r\n    fail = verifyIndex(indexB, num);\r\n    if (fail)\r\n    {\r\n      fail(\"Index b is invalid\");\r\n    }\r\n\r\n    Directory merged = new MockRAMDirectory();\r\n\r\n    IndexWriter writer = new IndexWriter(merged, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\r\n    writer.setMergeFactor(2);\r\n\r\n    writer.addIndexes(new Directory[]{indexA, indexB});\r\n    writer.close();\r\n\r\n    fail = verifyIndex(merged, 0);\r\n    merged.close();\r\n\r\n    assertFalse(\"The merged index is invalid\", fail);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7","date":1255555265,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","sourceNew":"  /**\n   * Tests that index merging (specifically addIndexesNoOptimize()) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException\n  {\n\n    int num=100;\n\n    Directory indexA = new MockRAMDirectory();\n    Directory indexB = new MockRAMDirectory();\n\n    fillIndex(indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(merged, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n\n    writer.addIndexesNoOptimize(new Directory[]{indexA, indexB});\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n    merged.close();\n\n    assertFalse(\"The merged index is invalid\", fail);\n  }\n\n","sourceOld":"  /**\n   * Tests that index merging (specifically addIndexes()) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException\n  {\n\n    int num=100;\n\n    Directory indexA = new MockRAMDirectory();\n    Directory indexB = new MockRAMDirectory();\n\n    fillIndex(indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(merged, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n\n    writer.addIndexes(new Directory[]{indexA, indexB});\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n    merged.close();\n\n    assertFalse(\"The merged index is invalid\", fail);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","sourceNew":"  /**\n   * Tests that index merging (specifically addIndexesNoOptimize()) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException\n  {\n\n    int num=100;\n\n    Directory indexA = new MockRAMDirectory();\n    Directory indexB = new MockRAMDirectory();\n\n    fillIndex(indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(merged, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n\n    writer.addIndexesNoOptimize(new Directory[]{indexA, indexB});\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n    merged.close();\n\n    assertFalse(\"The merged index is invalid\", fail);\n  }\n\n","sourceOld":"  /**\n   * Tests that index merging (specifically addIndexesNoOptimize()) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException\n  {\n\n    int num=100;\n\n    Directory indexA = new MockRAMDirectory();\n    Directory indexB = new MockRAMDirectory();\n\n    fillIndex(indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(merged, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n\n    writer.addIndexesNoOptimize(new Directory[]{indexA, indexB});\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n    merged.close();\n\n    assertFalse(\"The merged index is invalid\", fail);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","sourceNew":"  /**\n   * Tests that index merging (specifically addIndexesNoOptimize()) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException\n  {\n\n    int num=100;\n\n    Directory indexA = new MockRAMDirectory();\n    Directory indexB = new MockRAMDirectory();\n\n    fillIndex(indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(merged, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n\n    writer.addIndexesNoOptimize(new Directory[]{indexA, indexB});\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n    merged.close();\n\n    assertFalse(\"The merged index is invalid\", fail);\n  }\n\n","sourceOld":"  /**\n   * Tests that index merging (specifically addIndexesNoOptimize()) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException\n  {\n\n    int num=100;\n\n    Directory indexA = new MockRAMDirectory();\n    Directory indexB = new MockRAMDirectory();\n\n    fillIndex(indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(merged, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n\n    writer.addIndexesNoOptimize(new Directory[]{indexA, indexB});\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n    merged.close();\n\n    assertFalse(\"The merged index is invalid\", fail);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","sourceNew":"  /**\n   * Tests that index merging (specifically addIndexesNoOptimize()) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException\n  {\n\n    int num=100;\n\n    Directory indexA = new MockRAMDirectory();\n    Directory indexB = new MockRAMDirectory();\n\n    fillIndex(indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(merged, new IndexWriterConfig(TEST_VERSION_CURRENT).setAnalyzer(new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n\n    writer.addIndexesNoOptimize(new Directory[]{indexA, indexB});\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n    merged.close();\n\n    assertFalse(\"The merged index is invalid\", fail);\n  }\n\n","sourceOld":"  /**\n   * Tests that index merging (specifically addIndexesNoOptimize()) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException\n  {\n\n    int num=100;\n\n    Directory indexA = new MockRAMDirectory();\n    Directory indexB = new MockRAMDirectory();\n\n    fillIndex(indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(merged, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n\n    writer.addIndexesNoOptimize(new Directory[]{indexA, indexB});\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n    merged.close();\n\n    assertFalse(\"The merged index is invalid\", fail);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","sourceNew":"  /**\n   * Tests that index merging (specifically addIndexesNoOptimize()) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException\n  {\n\n    int num=100;\n\n    Directory indexA = new MockRAMDirectory();\n    Directory indexB = new MockRAMDirectory();\n\n    fillIndex(indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(merged, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n\n    writer.addIndexesNoOptimize(new Directory[]{indexA, indexB});\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n    merged.close();\n\n    assertFalse(\"The merged index is invalid\", fail);\n  }\n\n","sourceOld":"  /**\n   * Tests that index merging (specifically addIndexesNoOptimize()) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException\n  {\n\n    int num=100;\n\n    Directory indexA = new MockRAMDirectory();\n    Directory indexB = new MockRAMDirectory();\n\n    fillIndex(indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(merged, new IndexWriterConfig(TEST_VERSION_CURRENT).setAnalyzer(new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n\n    writer.addIndexesNoOptimize(new Directory[]{indexA, indexB});\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n    merged.close();\n\n    assertFalse(\"The merged index is invalid\", fail);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","sourceNew":"  /**\n   * Tests that index merging (specifically addIndexesNoOptimize()) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException\n  {\n\n    int num=100;\n\n    Directory indexA = new MockRAMDirectory();\n    Directory indexB = new MockRAMDirectory();\n\n    fillIndex(indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(merged, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n\n    writer.addIndexesNoOptimize(new Directory[]{indexA, indexB});\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n    merged.close();\n\n    assertFalse(\"The merged index is invalid\", fail);\n  }\n\n","sourceOld":"  /**\n   * Tests that index merging (specifically addIndexesNoOptimize()) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException\n  {\n\n    int num=100;\n\n    Directory indexA = new MockRAMDirectory();\n    Directory indexB = new MockRAMDirectory();\n\n    fillIndex(indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(merged, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n\n    writer.addIndexesNoOptimize(new Directory[]{indexA, indexB});\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n    merged.close();\n\n    assertFalse(\"The merged index is invalid\", fail);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMerging#testLucene().mjava","sourceNew":"  /**\n   * Tests that index merging (specifically addIndexesNoOptimize()) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException\n  {\n\n    int num=100;\n\n    Directory indexA = new MockRAMDirectory();\n    Directory indexB = new MockRAMDirectory();\n\n    fillIndex(indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(merged, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n\n    writer.addIndexesNoOptimize(new Directory[]{indexA, indexB});\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n    merged.close();\n\n    assertFalse(\"The merged index is invalid\", fail);\n  }\n\n","sourceOld":"  /**\n   * Tests that index merging (specifically addIndexesNoOptimize()) doesn't\n   * change the index order of documents.\n   */\n  public void testLucene() throws IOException\n  {\n\n    int num=100;\n\n    Directory indexA = new MockRAMDirectory();\n    Directory indexB = new MockRAMDirectory();\n\n    fillIndex(indexA, 0, num);\n    boolean fail = verifyIndex(indexA, 0);\n    if (fail)\n    {\n      fail(\"Index a is invalid\");\n    }\n\n    fillIndex(indexB, num, num);\n    fail = verifyIndex(indexB, num);\n    if (fail)\n    {\n      fail(\"Index b is invalid\");\n    }\n\n    Directory merged = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(merged, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n\n    writer.addIndexesNoOptimize(new Directory[]{indexA, indexB});\n    writer.optimize();\n    writer.close();\n\n    fail = verifyIndex(merged, 0);\n    merged.close();\n\n    assertFalse(\"The merged index is invalid\", fail);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["f213e1a7b0f5f10ce77e61a72c912096fe815ae6"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"2123bddbd65dea198cac380540636ce43a880403":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7":["2123bddbd65dea198cac380540636ce43a880403"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"6eb6723414c7578e3be2fa28b281a224547cdf93":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f213e1a7b0f5f10ce77e61a72c912096fe815ae6":["6eb6723414c7578e3be2fa28b281a224547cdf93"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"2123bddbd65dea198cac380540636ce43a880403":["560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["2123bddbd65dea198cac380540636ce43a880403"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"6eb6723414c7578e3be2fa28b281a224547cdf93":["f213e1a7b0f5f10ce77e61a72c912096fe815ae6"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6eb6723414c7578e3be2fa28b281a224547cdf93"],"f213e1a7b0f5f10ce77e61a72c912096fe815ae6":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}