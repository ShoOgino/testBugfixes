{"path":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testPointRangeQuery(IndexSearcher).mjava","commits":[{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testPointRangeQuery(IndexSearcher).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testDimensionalRangeQuery(IndexSearcher).mjava","sourceNew":"  private static void testPointRangeQuery(IndexSearcher s) throws IOException {\n    NumericDocValues numbers = MultiDocValues.getNumericValues(s.getIndexReader(), \"number\");\n    for(int i=0;i<100;i++) {\n      // Confirm we can range search by the new indexed (numeric) field:\n      long min = random().nextLong();\n      long max = random().nextLong();\n      if (min > max) {\n        long x = min;\n        min = max;\n        max = x;\n      }\n\n      TopDocs hits = s.search(PointRangeQuery.new1DLongRange(\"number\", min, true, max, true), 100);\n      for(ScoreDoc scoreDoc : hits.scoreDocs) {\n        long value = Long.parseLong(s.doc(scoreDoc.doc).get(\"text\").split(\" \")[1]);\n        assertTrue(value >= min);\n        assertTrue(value <= max);\n        assertEquals(value, numbers.get(scoreDoc.doc));\n      }\n    }\n  }\n\n","sourceOld":"  private static void testDimensionalRangeQuery(IndexSearcher s) throws IOException {\n    NumericDocValues numbers = MultiDocValues.getNumericValues(s.getIndexReader(), \"number\");\n    for(int i=0;i<100;i++) {\n      // Confirm we can range search by the new indexed (numeric) field:\n      long min = random().nextLong();\n      long max = random().nextLong();\n      if (min > max) {\n        long x = min;\n        min = max;\n        max = x;\n      }\n\n      TopDocs hits = s.search(DimensionalRangeQuery.new1DLongRange(\"number\", min, true, max, true), 100);\n      for(ScoreDoc scoreDoc : hits.scoreDocs) {\n        long value = Long.parseLong(s.doc(scoreDoc.doc).get(\"text\").split(\" \")[1]);\n        assertTrue(value >= min);\n        assertTrue(value <= max);\n        assertEquals(value, numbers.get(scoreDoc.doc));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86cab68ee900a31d093b114182b488ea8e85c59d","date":1456171815,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testPointRangeQuery(IndexSearcher).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testPointRangeQuery(IndexSearcher).mjava","sourceNew":"  private static void testPointRangeQuery(IndexSearcher s) throws IOException {\n    NumericDocValues numbers = MultiDocValues.getNumericValues(s.getIndexReader(), \"number\");\n    for(int i=0;i<100;i++) {\n      // Confirm we can range search by the new indexed (numeric) field:\n      long min = random().nextLong();\n      long max = random().nextLong();\n      if (min > max) {\n        long x = min;\n        min = max;\n        max = x;\n      }\n\n      TopDocs hits = s.search(PointRangeQuery.newLongRange(\"number\", min, true, max, true), 100);\n      for(ScoreDoc scoreDoc : hits.scoreDocs) {\n        long value = Long.parseLong(s.doc(scoreDoc.doc).get(\"text\").split(\" \")[1]);\n        assertTrue(value >= min);\n        assertTrue(value <= max);\n        assertEquals(value, numbers.get(scoreDoc.doc));\n      }\n    }\n  }\n\n","sourceOld":"  private static void testPointRangeQuery(IndexSearcher s) throws IOException {\n    NumericDocValues numbers = MultiDocValues.getNumericValues(s.getIndexReader(), \"number\");\n    for(int i=0;i<100;i++) {\n      // Confirm we can range search by the new indexed (numeric) field:\n      long min = random().nextLong();\n      long max = random().nextLong();\n      if (min > max) {\n        long x = min;\n        min = max;\n        max = x;\n      }\n\n      TopDocs hits = s.search(PointRangeQuery.new1DLongRange(\"number\", min, true, max, true), 100);\n      for(ScoreDoc scoreDoc : hits.scoreDocs) {\n        long value = Long.parseLong(s.doc(scoreDoc.doc).get(\"text\").split(\" \")[1]);\n        assertTrue(value >= min);\n        assertTrue(value <= max);\n        assertEquals(value, numbers.get(scoreDoc.doc));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"419a8f52c6635419beb951255cacbbb281044c57","date":1456189353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testPointRangeQuery(IndexSearcher).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testPointRangeQuery(IndexSearcher).mjava","sourceNew":"  private static void testPointRangeQuery(IndexSearcher s) throws IOException {\n    NumericDocValues numbers = MultiDocValues.getNumericValues(s.getIndexReader(), \"number\");\n    for(int i=0;i<100;i++) {\n      // Confirm we can range search by the new indexed (numeric) field:\n      long min = random().nextLong();\n      long max = random().nextLong();\n      if (min > max) {\n        long x = min;\n        min = max;\n        max = x;\n      }\n\n      TopDocs hits = s.search(PointRangeQuery.newLongRange(\"number\", min, true, max, true), 100);\n      for(ScoreDoc scoreDoc : hits.scoreDocs) {\n        long value = Long.parseLong(s.doc(scoreDoc.doc).get(\"text\").split(\" \")[1]);\n        assertTrue(value >= min);\n        assertTrue(value <= max);\n        assertEquals(value, numbers.get(scoreDoc.doc));\n      }\n    }\n  }\n\n","sourceOld":"  private static void testPointRangeQuery(IndexSearcher s) throws IOException {\n    NumericDocValues numbers = MultiDocValues.getNumericValues(s.getIndexReader(), \"number\");\n    for(int i=0;i<100;i++) {\n      // Confirm we can range search by the new indexed (numeric) field:\n      long min = random().nextLong();\n      long max = random().nextLong();\n      if (min > max) {\n        long x = min;\n        min = max;\n        max = x;\n      }\n\n      TopDocs hits = s.search(PointRangeQuery.new1DLongRange(\"number\", min, true, max, true), 100);\n      for(ScoreDoc scoreDoc : hits.scoreDocs) {\n        long value = Long.parseLong(s.doc(scoreDoc.doc).get(\"text\").split(\" \")[1]);\n        assertTrue(value >= min);\n        assertTrue(value <= max);\n        assertEquals(value, numbers.get(scoreDoc.doc));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3104a6ba367dfb690806b227c5ef17c42c6107b","date":1456265035,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testPointRangeQuery(IndexSearcher).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testPointRangeQuery(IndexSearcher).mjava","sourceNew":"  private static void testPointRangeQuery(IndexSearcher s) throws IOException {\n    NumericDocValues numbers = MultiDocValues.getNumericValues(s.getIndexReader(), \"number\");\n    for(int i=0;i<100;i++) {\n      // Confirm we can range search by the new indexed (numeric) field:\n      long min = random().nextLong();\n      long max = random().nextLong();\n      if (min > max) {\n        long x = min;\n        min = max;\n        max = x;\n      }\n\n      TopDocs hits = s.search(LongPoint.newRangeQuery(\"number\", min, true, max, true), 100);\n      for(ScoreDoc scoreDoc : hits.scoreDocs) {\n        long value = Long.parseLong(s.doc(scoreDoc.doc).get(\"text\").split(\" \")[1]);\n        assertTrue(value >= min);\n        assertTrue(value <= max);\n        assertEquals(value, numbers.get(scoreDoc.doc));\n      }\n    }\n  }\n\n","sourceOld":"  private static void testPointRangeQuery(IndexSearcher s) throws IOException {\n    NumericDocValues numbers = MultiDocValues.getNumericValues(s.getIndexReader(), \"number\");\n    for(int i=0;i<100;i++) {\n      // Confirm we can range search by the new indexed (numeric) field:\n      long min = random().nextLong();\n      long max = random().nextLong();\n      if (min > max) {\n        long x = min;\n        min = max;\n        max = x;\n      }\n\n      TopDocs hits = s.search(PointRangeQuery.newLongRange(\"number\", min, true, max, true), 100);\n      for(ScoreDoc scoreDoc : hits.scoreDocs) {\n        long value = Long.parseLong(s.doc(scoreDoc.doc).get(\"text\").split(\" \")[1]);\n        assertTrue(value >= min);\n        assertTrue(value <= max);\n        assertEquals(value, numbers.get(scoreDoc.doc));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["1800b996d8677670482a071dcb7a48b08c423ace"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","date":1456265720,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testPointRangeQuery(IndexSearcher).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testPointRangeQuery(IndexSearcher).mjava","sourceNew":"  private static void testPointRangeQuery(IndexSearcher s) throws IOException {\n    NumericDocValues numbers = MultiDocValues.getNumericValues(s.getIndexReader(), \"number\");\n    for(int i=0;i<100;i++) {\n      // Confirm we can range search by the new indexed (numeric) field:\n      long min = random().nextLong();\n      long max = random().nextLong();\n      if (min > max) {\n        long x = min;\n        min = max;\n        max = x;\n      }\n\n      TopDocs hits = s.search(LongPoint.newRangeQuery(\"number\", min, true, max, true), 100);\n      for(ScoreDoc scoreDoc : hits.scoreDocs) {\n        long value = Long.parseLong(s.doc(scoreDoc.doc).get(\"text\").split(\" \")[1]);\n        assertTrue(value >= min);\n        assertTrue(value <= max);\n        assertEquals(value, numbers.get(scoreDoc.doc));\n      }\n    }\n  }\n\n","sourceOld":"  private static void testPointRangeQuery(IndexSearcher s) throws IOException {\n    NumericDocValues numbers = MultiDocValues.getNumericValues(s.getIndexReader(), \"number\");\n    for(int i=0;i<100;i++) {\n      // Confirm we can range search by the new indexed (numeric) field:\n      long min = random().nextLong();\n      long max = random().nextLong();\n      if (min > max) {\n        long x = min;\n        min = max;\n        max = x;\n      }\n\n      TopDocs hits = s.search(PointRangeQuery.newLongRange(\"number\", min, true, max, true), 100);\n      for(ScoreDoc scoreDoc : hits.scoreDocs) {\n        long value = Long.parseLong(s.doc(scoreDoc.doc).get(\"text\").split(\" \")[1]);\n        assertTrue(value >= min);\n        assertTrue(value <= max);\n        assertEquals(value, numbers.get(scoreDoc.doc));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5296efc4b319f5647b606629c093a94b23692c6","date":1456267155,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testPointRangeQuery(IndexSearcher).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testPointRangeQuery(IndexSearcher).mjava","sourceNew":"  private static void testPointRangeQuery(IndexSearcher s) throws IOException {\n    NumericDocValues numbers = MultiDocValues.getNumericValues(s.getIndexReader(), \"number\");\n    for(int i=0;i<100;i++) {\n      // Confirm we can range search by the new indexed (numeric) field:\n      long min = random().nextLong();\n      long max = random().nextLong();\n      if (min > max) {\n        long x = min;\n        min = max;\n        max = x;\n      }\n\n      TopDocs hits = s.search(LongPoint.newRangeQuery(\"number\", min, true, max, true), 100);\n      for(ScoreDoc scoreDoc : hits.scoreDocs) {\n        long value = Long.parseLong(s.doc(scoreDoc.doc).get(\"text\").split(\" \")[1]);\n        assertTrue(value >= min);\n        assertTrue(value <= max);\n        assertEquals(value, numbers.get(scoreDoc.doc));\n      }\n    }\n  }\n\n","sourceOld":"  private static void testPointRangeQuery(IndexSearcher s) throws IOException {\n    NumericDocValues numbers = MultiDocValues.getNumericValues(s.getIndexReader(), \"number\");\n    for(int i=0;i<100;i++) {\n      // Confirm we can range search by the new indexed (numeric) field:\n      long min = random().nextLong();\n      long max = random().nextLong();\n      if (min > max) {\n        long x = min;\n        min = max;\n        max = x;\n      }\n\n      TopDocs hits = s.search(PointRangeQuery.newLongRange(\"number\", min, true, max, true), 100);\n      for(ScoreDoc scoreDoc : hits.scoreDocs) {\n        long value = Long.parseLong(s.doc(scoreDoc.doc).get(\"text\").split(\" \")[1]);\n        assertTrue(value >= min);\n        assertTrue(value <= max);\n        assertEquals(value, numbers.get(scoreDoc.doc));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","date":1456306182,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testPointRangeQuery(IndexSearcher).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testPointRangeQuery(IndexSearcher).mjava","sourceNew":"  private static void testPointRangeQuery(IndexSearcher s) throws IOException {\n    NumericDocValues numbers = MultiDocValues.getNumericValues(s.getIndexReader(), \"number\");\n    for(int i=0;i<100;i++) {\n      // Confirm we can range search by the new indexed (numeric) field:\n      long min = random().nextLong();\n      long max = random().nextLong();\n      if (min > max) {\n        long x = min;\n        min = max;\n        max = x;\n      }\n\n      TopDocs hits = s.search(LongPoint.newRangeQuery(\"number\", min, true, max, true), 100);\n      for(ScoreDoc scoreDoc : hits.scoreDocs) {\n        long value = Long.parseLong(s.doc(scoreDoc.doc).get(\"text\").split(\" \")[1]);\n        assertTrue(value >= min);\n        assertTrue(value <= max);\n        assertEquals(value, numbers.get(scoreDoc.doc));\n      }\n    }\n  }\n\n","sourceOld":"  private static void testPointRangeQuery(IndexSearcher s) throws IOException {\n    NumericDocValues numbers = MultiDocValues.getNumericValues(s.getIndexReader(), \"number\");\n    for(int i=0;i<100;i++) {\n      // Confirm we can range search by the new indexed (numeric) field:\n      long min = random().nextLong();\n      long max = random().nextLong();\n      if (min > max) {\n        long x = min;\n        min = max;\n        max = x;\n      }\n\n      TopDocs hits = s.search(PointRangeQuery.newLongRange(\"number\", min, true, max, true), 100);\n      for(ScoreDoc scoreDoc : hits.scoreDocs) {\n        long value = Long.parseLong(s.doc(scoreDoc.doc).get(\"text\").split(\" \")[1]);\n        assertTrue(value >= min);\n        assertTrue(value <= max);\n        assertEquals(value, numbers.get(scoreDoc.doc));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1800b996d8677670482a071dcb7a48b08c423ace","date":1456955558,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testPointRangeQuery(IndexSearcher).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testPointRangeQuery(IndexSearcher).mjava","sourceNew":"  private static void testPointRangeQuery(IndexSearcher s) throws IOException {\n    NumericDocValues numbers = MultiDocValues.getNumericValues(s.getIndexReader(), \"number\");\n    for(int i=0;i<100;i++) {\n      // Confirm we can range search by the new indexed (numeric) field:\n      long min = random().nextLong();\n      long max = random().nextLong();\n      if (min > max) {\n        long x = min;\n        min = max;\n        max = x;\n      }\n\n      TopDocs hits = s.search(LongPoint.newRangeQuery(\"number\", min, max), 100);\n      for(ScoreDoc scoreDoc : hits.scoreDocs) {\n        long value = Long.parseLong(s.doc(scoreDoc.doc).get(\"text\").split(\" \")[1]);\n        assertTrue(value >= min);\n        assertTrue(value <= max);\n        assertEquals(value, numbers.get(scoreDoc.doc));\n      }\n    }\n  }\n\n","sourceOld":"  private static void testPointRangeQuery(IndexSearcher s) throws IOException {\n    NumericDocValues numbers = MultiDocValues.getNumericValues(s.getIndexReader(), \"number\");\n    for(int i=0;i<100;i++) {\n      // Confirm we can range search by the new indexed (numeric) field:\n      long min = random().nextLong();\n      long max = random().nextLong();\n      if (min > max) {\n        long x = min;\n        min = max;\n        max = x;\n      }\n\n      TopDocs hits = s.search(LongPoint.newRangeQuery(\"number\", min, true, max, true), 100);\n      for(ScoreDoc scoreDoc : hits.scoreDocs) {\n        long value = Long.parseLong(s.doc(scoreDoc.doc).get(\"text\").split(\" \")[1]);\n        assertTrue(value >= min);\n        assertTrue(value <= max);\n        assertEquals(value, numbers.get(scoreDoc.doc));\n      }\n    }\n  }\n\n","bugFix":["d3104a6ba367dfb690806b227c5ef17c42c6107b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c422e924212367b334b4938f1fd3e44438e88c40","date":1456962933,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testPointRangeQuery(IndexSearcher).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testPointRangeQuery(IndexSearcher).mjava","sourceNew":"  private static void testPointRangeQuery(IndexSearcher s) throws IOException {\n    NumericDocValues numbers = MultiDocValues.getNumericValues(s.getIndexReader(), \"number\");\n    for(int i=0;i<100;i++) {\n      // Confirm we can range search by the new indexed (numeric) field:\n      long min = random().nextLong();\n      long max = random().nextLong();\n      if (min > max) {\n        long x = min;\n        min = max;\n        max = x;\n      }\n\n      TopDocs hits = s.search(LongPoint.newRangeQuery(\"number\", min, max), 100);\n      for(ScoreDoc scoreDoc : hits.scoreDocs) {\n        long value = Long.parseLong(s.doc(scoreDoc.doc).get(\"text\").split(\" \")[1]);\n        assertTrue(value >= min);\n        assertTrue(value <= max);\n        assertEquals(value, numbers.get(scoreDoc.doc));\n      }\n    }\n  }\n\n","sourceOld":"  private static void testPointRangeQuery(IndexSearcher s) throws IOException {\n    NumericDocValues numbers = MultiDocValues.getNumericValues(s.getIndexReader(), \"number\");\n    for(int i=0;i<100;i++) {\n      // Confirm we can range search by the new indexed (numeric) field:\n      long min = random().nextLong();\n      long max = random().nextLong();\n      if (min > max) {\n        long x = min;\n        min = max;\n        max = x;\n      }\n\n      TopDocs hits = s.search(LongPoint.newRangeQuery(\"number\", min, true, max, true), 100);\n      for(ScoreDoc scoreDoc : hits.scoreDocs) {\n        long value = Long.parseLong(s.doc(scoreDoc.doc).get(\"text\").split(\" \")[1]);\n        assertTrue(value >= min);\n        assertTrue(value <= max);\n        assertEquals(value, numbers.get(scoreDoc.doc));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testPointRangeQuery(IndexSearcher).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testPointRangeQuery(IndexSearcher).mjava","sourceNew":"  private static void testPointRangeQuery(IndexSearcher s) throws IOException {\n    NumericDocValues numbers = MultiDocValues.getNumericValues(s.getIndexReader(), \"number\");\n    for(int i=0;i<100;i++) {\n      // Confirm we can range search by the new indexed (numeric) field:\n      long min = random().nextLong();\n      long max = random().nextLong();\n      if (min > max) {\n        long x = min;\n        min = max;\n        max = x;\n      }\n\n      TopDocs hits = s.search(LongPoint.newRangeQuery(\"number\", min, max), 100);\n      for(ScoreDoc scoreDoc : hits.scoreDocs) {\n        long value = Long.parseLong(s.doc(scoreDoc.doc).get(\"text\").split(\" \")[1]);\n        assertTrue(value >= min);\n        assertTrue(value <= max);\n        assertEquals(value, numbers.get(scoreDoc.doc));\n      }\n    }\n  }\n\n","sourceOld":"  private static void testPointRangeQuery(IndexSearcher s) throws IOException {\n    NumericDocValues numbers = MultiDocValues.getNumericValues(s.getIndexReader(), \"number\");\n    for(int i=0;i<100;i++) {\n      // Confirm we can range search by the new indexed (numeric) field:\n      long min = random().nextLong();\n      long max = random().nextLong();\n      if (min > max) {\n        long x = min;\n        min = max;\n        max = x;\n      }\n\n      TopDocs hits = s.search(LongPoint.newRangeQuery(\"number\", min, true, max, true), 100);\n      for(ScoreDoc scoreDoc : hits.scoreDocs) {\n        long value = Long.parseLong(s.doc(scoreDoc.doc).get(\"text\").split(\" \")[1]);\n        assertTrue(value >= min);\n        assertTrue(value <= max);\n        assertEquals(value, numbers.get(scoreDoc.doc));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testPointRangeQuery(IndexSearcher).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testPointRangeQuery(IndexSearcher).mjava","sourceNew":"  private static void testPointRangeQuery(IndexSearcher s) throws IOException {\n    for(int i=0;i<100;i++) {\n      // Confirm we can range search by the new indexed (numeric) field:\n      long min = random().nextLong();\n      long max = random().nextLong();\n      if (min > max) {\n        long x = min;\n        min = max;\n        max = x;\n      }\n\n      TopDocs hits = s.search(LongPoint.newRangeQuery(\"number\", min, max), 100);\n      for(ScoreDoc scoreDoc : hits.scoreDocs) {\n        long value = Long.parseLong(s.doc(scoreDoc.doc).get(\"text\").split(\" \")[1]);\n        assertTrue(value >= min);\n        assertTrue(value <= max);\n      }\n\n      Arrays.sort(hits.scoreDocs,\n                  new Comparator<ScoreDoc>() {\n                    @Override\n                    public int compare(ScoreDoc a, ScoreDoc b) {\n                      return a.doc - b.doc;\n                    }\n                  });\n\n      NumericDocValues numbers = MultiDocValues.getNumericValues(s.getIndexReader(), \"number\");\n      for(ScoreDoc hit : hits.scoreDocs) {\n        if (numbers.docID() < hit.doc) {\n          numbers.advance(hit.doc);\n        }\n        assertEquals(hit.doc, numbers.docID());\n        long value = Long.parseLong(s.doc(hit.doc).get(\"text\").split(\" \")[1]);\n        assertEquals(value, numbers.longValue());\n      }\n    }\n  }\n\n","sourceOld":"  private static void testPointRangeQuery(IndexSearcher s) throws IOException {\n    NumericDocValues numbers = MultiDocValues.getNumericValues(s.getIndexReader(), \"number\");\n    for(int i=0;i<100;i++) {\n      // Confirm we can range search by the new indexed (numeric) field:\n      long min = random().nextLong();\n      long max = random().nextLong();\n      if (min > max) {\n        long x = min;\n        min = max;\n        max = x;\n      }\n\n      TopDocs hits = s.search(LongPoint.newRangeQuery(\"number\", min, max), 100);\n      for(ScoreDoc scoreDoc : hits.scoreDocs) {\n        long value = Long.parseLong(s.doc(scoreDoc.doc).get(\"text\").split(\" \")[1]);\n        assertTrue(value >= min);\n        assertTrue(value <= max);\n        assertEquals(value, numbers.get(scoreDoc.doc));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testPointRangeQuery(IndexSearcher).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testPointRangeQuery(IndexSearcher).mjava","sourceNew":"  private static void testPointRangeQuery(IndexSearcher s) throws IOException {\n    for(int i=0;i<100;i++) {\n      // Confirm we can range search by the new indexed (numeric) field:\n      long min = random().nextLong();\n      long max = random().nextLong();\n      if (min > max) {\n        long x = min;\n        min = max;\n        max = x;\n      }\n\n      TopDocs hits = s.search(LongPoint.newRangeQuery(\"number\", min, max), 100);\n      for(ScoreDoc scoreDoc : hits.scoreDocs) {\n        long value = Long.parseLong(s.doc(scoreDoc.doc).get(\"text\").split(\" \")[1]);\n        assertTrue(value >= min);\n        assertTrue(value <= max);\n      }\n\n      Arrays.sort(hits.scoreDocs,\n                  new Comparator<ScoreDoc>() {\n                    @Override\n                    public int compare(ScoreDoc a, ScoreDoc b) {\n                      return a.doc - b.doc;\n                    }\n                  });\n\n      NumericDocValues numbers = MultiDocValues.getNumericValues(s.getIndexReader(), \"number\");\n      for(ScoreDoc hit : hits.scoreDocs) {\n        if (numbers.docID() < hit.doc) {\n          numbers.advance(hit.doc);\n        }\n        assertEquals(hit.doc, numbers.docID());\n        long value = Long.parseLong(s.doc(hit.doc).get(\"text\").split(\" \")[1]);\n        assertEquals(value, numbers.longValue());\n      }\n    }\n  }\n\n","sourceOld":"  private static void testPointRangeQuery(IndexSearcher s) throws IOException {\n    NumericDocValues numbers = MultiDocValues.getNumericValues(s.getIndexReader(), \"number\");\n    for(int i=0;i<100;i++) {\n      // Confirm we can range search by the new indexed (numeric) field:\n      long min = random().nextLong();\n      long max = random().nextLong();\n      if (min > max) {\n        long x = min;\n        min = max;\n        max = x;\n      }\n\n      TopDocs hits = s.search(LongPoint.newRangeQuery(\"number\", min, max), 100);\n      for(ScoreDoc scoreDoc : hits.scoreDocs) {\n        long value = Long.parseLong(s.doc(scoreDoc.doc).get(\"text\").split(\" \")[1]);\n        assertTrue(value >= min);\n        assertTrue(value <= max);\n        assertEquals(value, numbers.get(scoreDoc.doc));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testPointRangeQuery(IndexSearcher).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testPointRangeQuery(IndexSearcher).mjava","sourceNew":"  private static void testPointRangeQuery(IndexSearcher s) throws IOException {\n    for(int i=0;i<100;i++) {\n      // Confirm we can range search by the new indexed (numeric) field:\n      long min = random().nextLong();\n      long max = random().nextLong();\n      if (min > max) {\n        long x = min;\n        min = max;\n        max = x;\n      }\n\n      TopDocs hits = s.search(LongPoint.newRangeQuery(\"number\", min, max), 100);\n      for(ScoreDoc scoreDoc : hits.scoreDocs) {\n        long value = Long.parseLong(s.doc(scoreDoc.doc).get(\"text\").split(\" \")[1]);\n        assertTrue(value >= min);\n        assertTrue(value <= max);\n      }\n\n      Arrays.sort(hits.scoreDocs,\n                  new Comparator<ScoreDoc>() {\n                    @Override\n                    public int compare(ScoreDoc a, ScoreDoc b) {\n                      return a.doc - b.doc;\n                    }\n                  });\n\n      NumericDocValues numbers = MultiDocValues.getNumericValues(s.getIndexReader(), \"number\");\n      for(ScoreDoc hit : hits.scoreDocs) {\n        if (numbers.docID() < hit.doc) {\n          numbers.advance(hit.doc);\n        }\n        assertEquals(hit.doc, numbers.docID());\n        long value = Long.parseLong(s.doc(hit.doc).get(\"text\").split(\" \")[1]);\n        assertEquals(value, numbers.longValue());\n      }\n    }\n  }\n\n","sourceOld":"  private static void testPointRangeQuery(IndexSearcher s) throws IOException {\n    NumericDocValues numbers = MultiDocValues.getNumericValues(s.getIndexReader(), \"number\");\n    for(int i=0;i<100;i++) {\n      // Confirm we can range search by the new indexed (numeric) field:\n      long min = random().nextLong();\n      long max = random().nextLong();\n      if (min > max) {\n        long x = min;\n        min = max;\n        max = x;\n      }\n\n      TopDocs hits = s.search(LongPoint.newRangeQuery(\"number\", min, max), 100);\n      for(ScoreDoc scoreDoc : hits.scoreDocs) {\n        long value = Long.parseLong(s.doc(scoreDoc.doc).get(\"text\").split(\" \")[1]);\n        assertTrue(value >= min);\n        assertTrue(value <= max);\n        assertEquals(value, numbers.get(scoreDoc.doc));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"419a8f52c6635419beb951255cacbbb281044c57":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","86cab68ee900a31d093b114182b488ea8e85c59d"],"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6":["419a8f52c6635419beb951255cacbbb281044c57","a5296efc4b319f5647b606629c093a94b23692c6"],"c422e924212367b334b4938f1fd3e44438e88c40":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","1800b996d8677670482a071dcb7a48b08c423ace"],"1800b996d8677670482a071dcb7a48b08c423ace":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d3104a6ba367dfb690806b227c5ef17c42c6107b":["419a8f52c6635419beb951255cacbbb281044c57"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5":["419a8f52c6635419beb951255cacbbb281044c57","d3104a6ba367dfb690806b227c5ef17c42c6107b"],"a5296efc4b319f5647b606629c093a94b23692c6":["419a8f52c6635419beb951255cacbbb281044c57","d3104a6ba367dfb690806b227c5ef17c42c6107b"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","c422e924212367b334b4938f1fd3e44438e88c40"],"86cab68ee900a31d093b114182b488ea8e85c59d":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["419a8f52c6635419beb951255cacbbb281044c57","86cab68ee900a31d093b114182b488ea8e85c59d"],"419a8f52c6635419beb951255cacbbb281044c57":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","d3104a6ba367dfb690806b227c5ef17c42c6107b","7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","a5296efc4b319f5647b606629c093a94b23692c6"],"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6":["c422e924212367b334b4938f1fd3e44438e88c40","1800b996d8677670482a071dcb7a48b08c423ace","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"c422e924212367b334b4938f1fd3e44438e88c40":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"1800b996d8677670482a071dcb7a48b08c423ace":["c422e924212367b334b4938f1fd3e44438e88c40"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d3104a6ba367dfb690806b227c5ef17c42c6107b":["7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","a5296efc4b319f5647b606629c093a94b23692c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5":[],"a5296efc4b319f5647b606629c093a94b23692c6":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"86cab68ee900a31d093b114182b488ea8e85c59d":["419a8f52c6635419beb951255cacbbb281044c57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}