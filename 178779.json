{"path":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2#testSingleSpanQuery().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2#testSingleSpanQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2#testSingleSpanQuery().mjava","sourceNew":"  /**\n   * Tests a single span query that matches multiple documents.\n   * \n   * @throws IOException\n   */\n  public void testSingleSpanQuery() throws IOException {\n    \n    final Query spanQuery = new SpanTermQuery(new Term(FIELD_TEXT, \"should\"));\n    final String[] expectedIds = new String[] {\"B\", \"D\", \"1\", \"2\", \"3\", \"4\",\n        \"A\"};\n    final float[] expectedScores = new float[] {0.625f, 0.45927936f,\n        0.35355338f, 0.35355338f, 0.35355338f, 0.35355338f, 0.26516503f,};\n    assertHits(searcher2, spanQuery, \"single span query\", expectedIds,\n        expectedScores);\n  }\n\n","sourceOld":"  /**\n   * Tests a single span query that matches multiple documents.\n   * \n   * @throws IOException\n   */\n  public void testSingleSpanQuery() throws IOException {\n    \n    final Query spanQuery = new SpanTermQuery(new Term(FIELD_TEXT, \"should\"));\n    final String[] expectedIds = new String[] {\"B\", \"D\", \"1\", \"2\", \"3\", \"4\",\n        \"A\"};\n    final float[] expectedScores = new float[] {0.625f, 0.45927936f,\n        0.35355338f, 0.35355338f, 0.35355338f, 0.35355338f, 0.26516503f,};\n    assertHits(searcher2, spanQuery, \"single span query\", expectedIds,\n        expectedScores);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2#testSingleSpanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2#testSingleSpanQuery().mjava","sourceNew":"  /**\n   * Tests a single span query that matches multiple documents.\n   */\n  public void testSingleSpanQuery() throws IOException {\n    \n    final Query spanQuery = new SpanTermQuery(new Term(FIELD_TEXT, \"should\"));\n    final String[] expectedIds = new String[] {\"B\", \"D\", \"1\", \"2\", \"3\", \"4\",\n        \"A\"};\n    final float[] expectedScores = new float[] {0.625f, 0.45927936f,\n        0.35355338f, 0.35355338f, 0.35355338f, 0.35355338f, 0.26516503f,};\n    assertHits(searcher2, spanQuery, \"single span query\", expectedIds,\n        expectedScores);\n  }\n\n","sourceOld":"  /**\n   * Tests a single span query that matches multiple documents.\n   * \n   * @throws IOException\n   */\n  public void testSingleSpanQuery() throws IOException {\n    \n    final Query spanQuery = new SpanTermQuery(new Term(FIELD_TEXT, \"should\"));\n    final String[] expectedIds = new String[] {\"B\", \"D\", \"1\", \"2\", \"3\", \"4\",\n        \"A\"};\n    final float[] expectedScores = new float[] {0.625f, 0.45927936f,\n        0.35355338f, 0.35355338f, 0.35355338f, 0.35355338f, 0.26516503f,};\n    assertHits(searcher2, spanQuery, \"single span query\", expectedIds,\n        expectedScores);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e10aa10647f2ded96fbb246cbbd6e13eb8b032dc","date":1434656225,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2#testSingleSpanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2#testSingleSpanQuery().mjava","sourceNew":"  /**\n   * Tests a single span query that matches multiple documents.\n   */\n  public void testSingleSpanQuery() throws IOException {\n    \n    final Query spanQuery = new SpanTermQuery(new Term(FIELD_TEXT, \"should\"));\n    final String[] expectedIds = new String[] {\"B\", \"D\", \"1\", \"2\", \"3\", \"4\",\n        \"A\"};\n    final float[] expectedScores = new float[] {0.8838834f, 0.64951903f,\n        0.5f, 0.5f, 0.5f, 0.5f, 0.375f,};\n    assertHits(searcher2, spanQuery, \"single span query\", expectedIds,\n        expectedScores);\n  }\n\n","sourceOld":"  /**\n   * Tests a single span query that matches multiple documents.\n   */\n  public void testSingleSpanQuery() throws IOException {\n    \n    final Query spanQuery = new SpanTermQuery(new Term(FIELD_TEXT, \"should\"));\n    final String[] expectedIds = new String[] {\"B\", \"D\", \"1\", \"2\", \"3\", \"4\",\n        \"A\"};\n    final float[] expectedScores = new float[] {0.625f, 0.45927936f,\n        0.35355338f, 0.35355338f, 0.35355338f, 0.35355338f, 0.26516503f,};\n    assertHits(searcher2, spanQuery, \"single span query\", expectedIds,\n        expectedScores);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e75448368ba628d73e9967b45e29c40bbfe39fa","date":1441768575,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced2#testSingleSpanQuery().mjava","sourceNew":null,"sourceOld":"  /**\n   * Tests a single span query that matches multiple documents.\n   */\n  public void testSingleSpanQuery() throws IOException {\n    \n    final Query spanQuery = new SpanTermQuery(new Term(FIELD_TEXT, \"should\"));\n    final String[] expectedIds = new String[] {\"B\", \"D\", \"1\", \"2\", \"3\", \"4\",\n        \"A\"};\n    final float[] expectedScores = new float[] {0.8838834f, 0.64951903f,\n        0.5f, 0.5f, 0.5f, 0.5f, 0.375f,};\n    assertHits(searcher2, spanQuery, \"single span query\", expectedIds,\n        expectedScores);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6e75448368ba628d73e9967b45e29c40bbfe39fa":["e10aa10647f2ded96fbb246cbbd6e13eb8b032dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e10aa10647f2ded96fbb246cbbd6e13eb8b032dc":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6e75448368ba628d73e9967b45e29c40bbfe39fa"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["e10aa10647f2ded96fbb246cbbd6e13eb8b032dc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"6e75448368ba628d73e9967b45e29c40bbfe39fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e10aa10647f2ded96fbb246cbbd6e13eb8b032dc":["6e75448368ba628d73e9967b45e29c40bbfe39fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}