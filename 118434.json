{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/FuzzyCompletionQuery#toLevenshteinAutomata(Automaton,Set[IntsRef]).mjava","commits":[{"id":"35fa550f45857d99d3d6d743420ee54b4d0c37f8","date":1436039255,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/FuzzyCompletionQuery#toLevenshteinAutomata(Automaton,Set[IntsRef]).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/FuzzyCompletionQuery#toLevenshteinAutomata(Set[IntsRef]).mjava","sourceNew":"  private Automaton toLevenshteinAutomata(Automaton automaton, Set<IntsRef> refs) {\n    List<Automaton> subs = new ArrayList<>();\n    FiniteStringsIterator finiteStrings = new FiniteStringsIterator(automaton);\n    for (IntsRef string; (string = finiteStrings.next()) != null;) {\n      refs.add(IntsRef.deepCopyOf(string));\n\n      if (string.length <= nonFuzzyPrefix || string.length < minFuzzyLength) {\n        subs.add(Automata.makeString(string.ints, string.offset, string.length));\n      } else {\n        int ints[] = new int[string.length - nonFuzzyPrefix];\n        System.arraycopy(string.ints, string.offset + nonFuzzyPrefix, ints, 0, ints.length);\n        // TODO: maybe add alphaMin to LevenshteinAutomata,\n        // and pass 1 instead of 0?  We probably don't want\n        // to allow the trailing dedup bytes to be\n        // edited... but then 0 byte is \"in general\" allowed\n        // on input (but not in UTF8).\n        LevenshteinAutomata lev = new LevenshteinAutomata(ints,\n            unicodeAware ? Character.MAX_CODE_POINT : 255,\n            transpositions);\n        subs.add(lev.toAutomaton(maxEdits,\n            UnicodeUtil.newString(string.ints, string.offset, nonFuzzyPrefix)));\n      }\n    }\n\n    if (subs.isEmpty()) {\n      // automaton is empty, there is no accepted paths through it\n      return Automata.makeEmpty(); // matches nothing\n    } else if (subs.size() == 1) {\n      // no synonyms or anything: just a single path through the tokenstream\n      return subs.get(0);\n    } else {\n      // multiple paths: this is really scary! is it slow?\n      // maybe we should not do this and throw UOE?\n      Automaton a = Operations.union(subs);\n      // TODO: we could call toLevenshteinAutomata() before det?\n      // this only happens if you have multiple paths anyway (e.g. synonyms)\n      return Operations.determinize(a, maxDeterminizedStates);\n    }\n  }\n\n","sourceOld":"  private Automaton toLevenshteinAutomata(Set<IntsRef> ref) {\n    Automaton subs[] = new Automaton[ref.size()];\n    int upto = 0;\n    for (IntsRef path : ref) {\n      if (path.length <= nonFuzzyPrefix || path.length < minFuzzyLength) {\n        subs[upto] = Automata.makeString(path.ints, path.offset, path.length);\n        upto++;\n      } else {\n        int ints[] = new int[path.length - nonFuzzyPrefix];\n        System.arraycopy(path.ints, path.offset + nonFuzzyPrefix, ints, 0, ints.length);\n        // TODO: maybe add alphaMin to LevenshteinAutomata,\n        // and pass 1 instead of 0?  We probably don't want\n        // to allow the trailing dedup bytes to be\n        // edited... but then 0 byte is \"in general\" allowed\n        // on input (but not in UTF8).\n        LevenshteinAutomata lev = new LevenshteinAutomata(ints,\n            unicodeAware ? Character.MAX_CODE_POINT : 255,\n            transpositions);\n        subs[upto] = lev.toAutomaton(maxEdits,\n            UnicodeUtil.newString(path.ints, path.offset, nonFuzzyPrefix));\n        upto++;\n      }\n    }\n\n    if (subs.length == 0) {\n      // automaton is empty, there is no accepted paths through it\n      return Automata.makeEmpty(); // matches nothing\n    } else if (subs.length == 1) {\n      // no synonyms or anything: just a single path through the tokenstream\n      return subs[0];\n    } else {\n      // multiple paths: this is really scary! is it slow?\n      // maybe we should not do this and throw UOE?\n      Automaton a = Operations.union(Arrays.asList(subs));\n      // TODO: we could call toLevenshteinAutomata() before det?\n      // this only happens if you have multiple paths anyway (e.g. synonyms)\n      return Operations.determinize(a, maxDeterminizedStates);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"35fa550f45857d99d3d6d743420ee54b4d0c37f8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["35fa550f45857d99d3d6d743420ee54b4d0c37f8"]},"commit2Childs":{"35fa550f45857d99d3d6d743420ee54b4d0c37f8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["35fa550f45857d99d3d6d743420ee54b4d0c37f8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}