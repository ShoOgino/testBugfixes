{"path":"lucene/src/test/org/apache/lucene/search/function/TestCustomScoreQuery#testRewrite().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestCustomScoreQuery#testRewrite().mjava","pathOld":"src/test/org/apache/lucene/search/function/TestCustomScoreQuery#testRewrite().mjava","sourceNew":"  @Test\n  public void testRewrite() throws Exception {\n    final IndexSearcher s = new IndexSearcher(dir, true);\n\n    Query q = new TermQuery(new Term(TEXT_FIELD, \"first\"));\n    CustomScoreQuery original = new CustomScoreQuery(q);\n    CustomScoreQuery rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should be identical, as TermQuery does not rewrite\", original == rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n\n    q = new TermRangeQuery(TEXT_FIELD, null, null, true, true); // everything\n    original = new CustomScoreQuery(q);\n    rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should not be identical, as TermRangeQuery rewrites\", original != rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(original,1).totalHits);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n    \n    s.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRewrite() throws Exception {\n    final IndexSearcher s = new IndexSearcher(dir, true);\n\n    Query q = new TermQuery(new Term(TEXT_FIELD, \"first\"));\n    CustomScoreQuery original = new CustomScoreQuery(q);\n    CustomScoreQuery rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should be identical, as TermQuery does not rewrite\", original == rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n\n    q = new TermRangeQuery(TEXT_FIELD, null, null, true, true); // everything\n    original = new CustomScoreQuery(q);\n    rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should not be identical, as TermRangeQuery rewrites\", original != rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(original,1).totalHits);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n    \n    s.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8fda790e002fff32e201cbd0f7bed4c2b333a64","date":1309401082,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testRewrite().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestCustomScoreQuery#testRewrite().mjava","sourceNew":"  @Test\n  public void testRewrite() throws Exception {\n    final IndexSearcher s = new IndexSearcher(dir, true);\n\n    Query q = new TermQuery(new Term(TEXT_FIELD, \"first\"));\n    CustomScoreQuery original = new CustomScoreQuery(q);\n    CustomScoreQuery rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should be identical, as TermQuery does not rewrite\", original == rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n\n    q = new TermRangeQuery(TEXT_FIELD, null, null, true, true); // everything\n    original = new CustomScoreQuery(q);\n    rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should not be identical, as TermRangeQuery rewrites\", original != rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(original,1).totalHits);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n    \n    s.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRewrite() throws Exception {\n    final IndexSearcher s = new IndexSearcher(dir, true);\n\n    Query q = new TermQuery(new Term(TEXT_FIELD, \"first\"));\n    CustomScoreQuery original = new CustomScoreQuery(q);\n    CustomScoreQuery rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should be identical, as TermQuery does not rewrite\", original == rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n\n    q = new TermRangeQuery(TEXT_FIELD, null, null, true, true); // everything\n    original = new CustomScoreQuery(q);\n    rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should not be identical, as TermRangeQuery rewrites\", original != rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(original,1).totalHits);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n    \n    s.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testRewrite().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestCustomScoreQuery#testRewrite().mjava","sourceNew":"  @Test\n  public void testRewrite() throws Exception {\n    final IndexSearcher s = new IndexSearcher(dir, true);\n\n    Query q = new TermQuery(new Term(TEXT_FIELD, \"first\"));\n    CustomScoreQuery original = new CustomScoreQuery(q);\n    CustomScoreQuery rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should be identical, as TermQuery does not rewrite\", original == rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n\n    q = new TermRangeQuery(TEXT_FIELD, null, null, true, true); // everything\n    original = new CustomScoreQuery(q);\n    rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should not be identical, as TermRangeQuery rewrites\", original != rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(original,1).totalHits);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n    \n    s.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRewrite() throws Exception {\n    final IndexSearcher s = new IndexSearcher(dir, true);\n\n    Query q = new TermQuery(new Term(TEXT_FIELD, \"first\"));\n    CustomScoreQuery original = new CustomScoreQuery(q);\n    CustomScoreQuery rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should be identical, as TermQuery does not rewrite\", original == rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n\n    q = new TermRangeQuery(TEXT_FIELD, null, null, true, true); // everything\n    original = new CustomScoreQuery(q);\n    rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should not be identical, as TermRangeQuery rewrites\", original != rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(original,1).totalHits);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n    \n    s.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testRewrite().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestCustomScoreQuery#testRewrite().mjava","sourceNew":"  @Test\n  public void testRewrite() throws Exception {\n    final IndexSearcher s = new IndexSearcher(dir, true);\n\n    Query q = new TermQuery(new Term(TEXT_FIELD, \"first\"));\n    CustomScoreQuery original = new CustomScoreQuery(q);\n    CustomScoreQuery rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should be identical, as TermQuery does not rewrite\", original == rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n\n    q = new TermRangeQuery(TEXT_FIELD, null, null, true, true); // everything\n    original = new CustomScoreQuery(q);\n    rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should not be identical, as TermRangeQuery rewrites\", original != rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(original,1).totalHits);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n    \n    s.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRewrite() throws Exception {\n    final IndexSearcher s = new IndexSearcher(dir, true);\n\n    Query q = new TermQuery(new Term(TEXT_FIELD, \"first\"));\n    CustomScoreQuery original = new CustomScoreQuery(q);\n    CustomScoreQuery rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should be identical, as TermQuery does not rewrite\", original == rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n\n    q = new TermRangeQuery(TEXT_FIELD, null, null, true, true); // everything\n    original = new CustomScoreQuery(q);\n    rewritten = (CustomScoreQuery) original.rewrite(s.getIndexReader());\n    assertTrue(\"rewritten query should not be identical, as TermRangeQuery rewrites\", original != rewritten);\n    assertTrue(\"no hits for query\", s.search(rewritten,1).totalHits > 0);\n    assertEquals(s.search(q,1).totalHits, s.search(original,1).totalHits);\n    assertEquals(s.search(q,1).totalHits, s.search(rewritten,1).totalHits);\n    \n    s.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c8fda790e002fff32e201cbd0f7bed4c2b333a64":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["9454a6510e2db155fb01faa5c049b06ece95fab9","c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["9454a6510e2db155fb01faa5c049b06ece95fab9","c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c8fda790e002fff32e201cbd0f7bed4c2b333a64":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c8fda790e002fff32e201cbd0f7bed4c2b333a64","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}