{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternReplaceFilter#PatternReplaceFilter(TokenStream,Pattern,String,boolean).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternReplaceFilter#PatternReplaceFilter(TokenStream,Pattern,String,boolean).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternReplaceFilter#PatternReplaceFilter(TokenStream,Pattern,String,boolean).mjava","sourceNew":"  /**\n   * Constructs an instance to replace either the first, or all occurances\n   *\n   * @param in the TokenStream to process\n   * @param p the patterm to apply to each Token\n   * @param replacement the \"replacement string\" to substitute, if null a\n   *        blank string will be used. Note that this is not the literal\n   *        string that will be used, '$' and '\\' have special meaning.\n   * @param all if true, all matches will be replaced otherwise just the first match.\n   * @see Matcher#quoteReplacement\n   */\n  public PatternReplaceFilter(TokenStream in,\n                              Pattern p,\n                              String replacement,\n                              boolean all) {\n    super(in);\n    this.p=p;\n    this.replacement = (null == replacement) ? \"\" : replacement;\n    this.all=all;\n    this.m = p.matcher(termAtt);\n  }\n\n","sourceOld":"  /**\n   * Constructs an instance to replace either the first, or all occurances\n   *\n   * @param in the TokenStream to process\n   * @param p the patterm to apply to each Token\n   * @param replacement the \"replacement string\" to substitute, if null a\n   *        blank string will be used. Note that this is not the literal\n   *        string that will be used, '$' and '\\' have special meaning.\n   * @param all if true, all matches will be replaced otherwise just the first match.\n   * @see Matcher#quoteReplacement\n   */\n  public PatternReplaceFilter(TokenStream in,\n                              Pattern p,\n                              String replacement,\n                              boolean all) {\n    super(in);\n    this.p=p;\n    this.replacement = (null == replacement) ? \"\" : replacement;\n    this.all=all;\n    this.m = p.matcher(termAtt);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"40e1523ffd1c98c46180e96f5e5e3612267d09d0","date":1366798864,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternReplaceFilter#PatternReplaceFilter(TokenStream,Pattern,String,boolean).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternReplaceFilter#PatternReplaceFilter(TokenStream,Pattern,String,boolean).mjava","sourceNew":"  /**\n   * Constructs an instance to replace either the first, or all occurances\n   *\n   * @param in the TokenStream to process\n   * @param p the patterm to apply to each Token\n   * @param replacement the \"replacement string\" to substitute, if null a\n   *        blank string will be used. Note that this is not the literal\n   *        string that will be used, '$' and '\\' have special meaning.\n   * @param all if true, all matches will be replaced otherwise just the first match.\n   * @see Matcher#quoteReplacement\n   */\n  public PatternReplaceFilter(TokenStream in,\n                              Pattern p,\n                              String replacement,\n                              boolean all) {\n    super(in);\n    this.replacement = (null == replacement) ? \"\" : replacement;\n    this.all=all;\n    this.m = p.matcher(termAtt);\n  }\n\n","sourceOld":"  /**\n   * Constructs an instance to replace either the first, or all occurances\n   *\n   * @param in the TokenStream to process\n   * @param p the patterm to apply to each Token\n   * @param replacement the \"replacement string\" to substitute, if null a\n   *        blank string will be used. Note that this is not the literal\n   *        string that will be used, '$' and '\\' have special meaning.\n   * @param all if true, all matches will be replaced otherwise just the first match.\n   * @see Matcher#quoteReplacement\n   */\n  public PatternReplaceFilter(TokenStream in,\n                              Pattern p,\n                              String replacement,\n                              boolean all) {\n    super(in);\n    this.p=p;\n    this.replacement = (null == replacement) ? \"\" : replacement;\n    this.all=all;\n    this.m = p.matcher(termAtt);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a","date":1550036130,"type":3,"author":"Bruno P. Kinoshita","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternReplaceFilter#PatternReplaceFilter(TokenStream,Pattern,String,boolean).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternReplaceFilter#PatternReplaceFilter(TokenStream,Pattern,String,boolean).mjava","sourceNew":"  /**\n   * Constructs an instance to replace either the first, or all occurrences\n   *\n   * @param in the TokenStream to process\n   * @param p the patterm to apply to each Token\n   * @param replacement the \"replacement string\" to substitute, if null a\n   *        blank string will be used. Note that this is not the literal\n   *        string that will be used, '$' and '\\' have special meaning.\n   * @param all if true, all matches will be replaced otherwise just the first match.\n   * @see Matcher#quoteReplacement\n   */\n  public PatternReplaceFilter(TokenStream in,\n                              Pattern p,\n                              String replacement,\n                              boolean all) {\n    super(in);\n    this.replacement = (null == replacement) ? \"\" : replacement;\n    this.all=all;\n    this.m = p.matcher(termAtt);\n  }\n\n","sourceOld":"  /**\n   * Constructs an instance to replace either the first, or all occurances\n   *\n   * @param in the TokenStream to process\n   * @param p the patterm to apply to each Token\n   * @param replacement the \"replacement string\" to substitute, if null a\n   *        blank string will be used. Note that this is not the literal\n   *        string that will be used, '$' and '\\' have special meaning.\n   * @param all if true, all matches will be replaced otherwise just the first match.\n   * @see Matcher#quoteReplacement\n   */\n  public PatternReplaceFilter(TokenStream in,\n                              Pattern p,\n                              String replacement,\n                              boolean all) {\n    super(in);\n    this.replacement = (null == replacement) ? \"\" : replacement;\n    this.all=all;\n    this.m = p.matcher(termAtt);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a":["40e1523ffd1c98c46180e96f5e5e3612267d09d0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"40e1523ffd1c98c46180e96f5e5e3612267d09d0":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["40e1523ffd1c98c46180e96f5e5e3612267d09d0"],"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"40e1523ffd1c98c46180e96f5e5e3612267d09d0":["d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}