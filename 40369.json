{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getParent(int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getParent(int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getParent(int).mjava","sourceNew":"  public int getParent(int ordinal) {\n    ensureOpen();\n    // Note how we don't need to hold the read lock to do the following,\n    // because the array reference is volatile, ensuring the correct\n    // visibility and ordering: if we get the new reference, the new\n    // data is also visible to this thread.\n    return getParentArray()[ordinal];\n  }\n\n","sourceOld":"  public int getParent(int ordinal) {\n    ensureOpen();\n    // Note how we don't need to hold the read lock to do the following,\n    // because the array reference is volatile, ensuring the correct\n    // visibility and ordering: if we get the new reference, the new\n    // data is also visible to this thread.\n    return getParentArray()[ordinal];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78e3613d9274c0d98ca67d976e415c82e9f9cf46","date":1352285414,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getParent(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getParent(int).mjava","sourceNew":"  @Override\n  public int getParent(int ordinal) {\n    ensureOpen();\n    // Note how we don't need to hold the read lock to do the following,\n    // because the array reference is volatile, ensuring the correct\n    // visibility and ordering: if we get the new reference, the new\n    // data is also visible to this thread.\n    return getParentArray()[ordinal];\n  }\n\n","sourceOld":"  public int getParent(int ordinal) {\n    ensureOpen();\n    // Note how we don't need to hold the read lock to do the following,\n    // because the array reference is volatile, ensuring the correct\n    // visibility and ordering: if we get the new reference, the new\n    // data is also visible to this thread.\n    return getParentArray()[ordinal];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1","date":1353511594,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getParent(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getParent(int).mjava","sourceNew":"  // TODO: move to a ParentInfo class? (see TODO for parentArray)\n  @Override\n  public int getParent(int ordinal) throws IOException {\n    ensureOpen();\n    return getParentArray()[ordinal];\n  }\n\n","sourceOld":"  @Override\n  public int getParent(int ordinal) {\n    ensureOpen();\n    // Note how we don't need to hold the read lock to do the following,\n    // because the array reference is volatile, ensuring the correct\n    // visibility and ordering: if we get the new reference, the new\n    // data is also visible to this thread.\n    return getParentArray()[ordinal];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d58d08788c3fd51172ba34474cca42499d6391b","date":1354802133,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getParent(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getParent(int).mjava","sourceNew":"  @Override\n  public int getParent(int ordinal) throws IOException {\n    ensureOpen();\n    return getParallelTaxonomyArrays().parents()[ordinal];\n  }\n\n","sourceOld":"  // TODO: move to a ParentInfo class? (see TODO for parentArray)\n  @Override\n  public int getParent(int ordinal) throws IOException {\n    ensureOpen();\n    return getParentArray()[ordinal];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getParent(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getParent(int).mjava","sourceNew":"  @Override\n  public int getParent(int ordinal) throws IOException {\n    ensureOpen();\n    return getParallelTaxonomyArrays().parents()[ordinal];\n  }\n\n","sourceOld":"  @Override\n  public int getParent(int ordinal) {\n    ensureOpen();\n    // Note how we don't need to hold the read lock to do the following,\n    // because the array reference is volatile, ensuring the correct\n    // visibility and ordering: if we get the new reference, the new\n    // data is also visible to this thread.\n    return getParentArray()[ordinal];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29e1a91414f603bce5a59a5cb61fa8603997de87","date":1363597288,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getParent(int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public int getParent(int ordinal) throws IOException {\n    ensureOpen();\n    return getParallelTaxonomyArrays().parents()[ordinal];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"78e3613d9274c0d98ca67d976e415c82e9f9cf46":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["78e3613d9274c0d98ca67d976e415c82e9f9cf46","3d58d08788c3fd51172ba34474cca42499d6391b"],"3d58d08788c3fd51172ba34474cca42499d6391b":["219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"29e1a91414f603bce5a59a5cb61fa8603997de87":["3d58d08788c3fd51172ba34474cca42499d6391b"],"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1":["78e3613d9274c0d98ca67d976e415c82e9f9cf46"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["29e1a91414f603bce5a59a5cb61fa8603997de87"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["78e3613d9274c0d98ca67d976e415c82e9f9cf46"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"78e3613d9274c0d98ca67d976e415c82e9f9cf46":["407687e67faf6e1f02a211ca078d8e3eed631027","219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"3d58d08788c3fd51172ba34474cca42499d6391b":["407687e67faf6e1f02a211ca078d8e3eed631027","29e1a91414f603bce5a59a5cb61fa8603997de87"],"29e1a91414f603bce5a59a5cb61fa8603997de87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1":["3d58d08788c3fd51172ba34474cca42499d6391b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}