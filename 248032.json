{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createIndexableFields(Shape,double).mjava","commits":[{"id":"6e2410e27320f6aaba450cbf500d7822baf642f8","date":1347075066,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createIndexableFields(Shape,double).mjava","pathOld":"/dev/null","sourceNew":"  public Field[] createIndexableFields(Shape shape, double distErr) {\n    int detailLevel = grid.getLevelForDistance(distErr);\n    List<Node> cells = grid.getNodes(shape, detailLevel, true);//true=intermediates cells\n    //If shape isn't a point, add a full-resolution center-point so that\n    // PointPrefixTreeFieldCacheProvider has the center-points.\n    // TODO index each center of a multi-point? Yes/no?\n    if (!(shape instanceof Point)) {\n      Point ctr = shape.getCenter();\n      //TODO should be smarter; don't index 2 tokens for this in CellTokenStream. Harmless though.\n      cells.add(grid.getNodes(ctr,grid.getMaxLevels(),false).get(0));\n    }\n\n    //TODO is CellTokenStream supposed to be re-used somehow? see Uwe's comments:\n    //  http://code.google.com/p/lucene-spatial-playground/issues/detail?id=4\n\n    Field field = new Field(getFieldName(), new CellTokenStream(cells.iterator()), FIELD_TYPE);\n    return new Field[]{field};\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6b43aca0f70aef9b914114574de1d0916ad2a32b","29ccadfdb4b31f5bd2d0876fdf5e8a8e85d27934"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"11a538ad124424bb29a1a6b3d94f142b8264b802","date":1348462001,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createIndexableFields(Shape,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createIndexableFields(Shape,double).mjava","sourceNew":"  public Field[] createIndexableFields(Shape shape, double distErr) {\n    int detailLevel = grid.getLevelForDistance(distErr);\n    List<Node> cells = grid.getNodes(shape, detailLevel, true);//true=intermediates cells\n    //If shape isn't a point, add a full-resolution center-point so that\n    // PointPrefixTreeFieldCacheProvider has the center-points.\n    //TODO index each point of a multi-point or other aggregate.\n    //TODO remove this once support for a distance ValueSource is removed.\n    if (!(shape instanceof Point)) {\n      Point ctr = shape.getCenter();\n      //TODO should be smarter; don't index 2 tokens for this in CellTokenStream. Harmless though.\n      cells.add(grid.getNodes(ctr,grid.getMaxLevels(),false).get(0));\n    }\n\n    //TODO is CellTokenStream supposed to be re-used somehow? see Uwe's comments:\n    //  http://code.google.com/p/lucene-spatial-playground/issues/detail?id=4\n\n    Field field = new Field(getFieldName(), new CellTokenStream(cells.iterator()), FIELD_TYPE);\n    return new Field[]{field};\n  }\n\n","sourceOld":"  public Field[] createIndexableFields(Shape shape, double distErr) {\n    int detailLevel = grid.getLevelForDistance(distErr);\n    List<Node> cells = grid.getNodes(shape, detailLevel, true);//true=intermediates cells\n    //If shape isn't a point, add a full-resolution center-point so that\n    // PointPrefixTreeFieldCacheProvider has the center-points.\n    // TODO index each center of a multi-point? Yes/no?\n    if (!(shape instanceof Point)) {\n      Point ctr = shape.getCenter();\n      //TODO should be smarter; don't index 2 tokens for this in CellTokenStream. Harmless though.\n      cells.add(grid.getNodes(ctr,grid.getMaxLevels(),false).get(0));\n    }\n\n    //TODO is CellTokenStream supposed to be re-used somehow? see Uwe's comments:\n    //  http://code.google.com/p/lucene-spatial-playground/issues/detail?id=4\n\n    Field field = new Field(getFieldName(), new CellTokenStream(cells.iterator()), FIELD_TYPE);\n    return new Field[]{field};\n  }\n\n","bugFix":null,"bugIntro":["29ccadfdb4b31f5bd2d0876fdf5e8a8e85d27934"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ccadfdb4b31f5bd2d0876fdf5e8a8e85d27934","date":1355163942,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createIndexableFields(Shape,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createIndexableFields(Shape,double).mjava","sourceNew":"  public Field[] createIndexableFields(Shape shape, double distErr) {\n    int detailLevel = grid.getLevelForDistance(distErr);\n    List<Node> cells = grid.getNodes(shape, detailLevel, true);//true=intermediates cells\n\n    //TODO is CellTokenStream supposed to be re-used somehow? see Uwe's comments:\n    //  http://code.google.com/p/lucene-spatial-playground/issues/detail?id=4\n\n    Field field = new Field(getFieldName(),\n        new CellTokenStream(cells.iterator()), FIELD_TYPE);\n    return new Field[]{field};\n  }\n\n","sourceOld":"  public Field[] createIndexableFields(Shape shape, double distErr) {\n    int detailLevel = grid.getLevelForDistance(distErr);\n    List<Node> cells = grid.getNodes(shape, detailLevel, true);//true=intermediates cells\n    //If shape isn't a point, add a full-resolution center-point so that\n    // PointPrefixTreeFieldCacheProvider has the center-points.\n    //TODO index each point of a multi-point or other aggregate.\n    //TODO remove this once support for a distance ValueSource is removed.\n    if (!(shape instanceof Point)) {\n      Point ctr = shape.getCenter();\n      //TODO should be smarter; don't index 2 tokens for this in CellTokenStream. Harmless though.\n      cells.add(grid.getNodes(ctr,grid.getMaxLevels(),false).get(0));\n    }\n\n    //TODO is CellTokenStream supposed to be re-used somehow? see Uwe's comments:\n    //  http://code.google.com/p/lucene-spatial-playground/issues/detail?id=4\n\n    Field field = new Field(getFieldName(), new CellTokenStream(cells.iterator()), FIELD_TYPE);\n    return new Field[]{field};\n  }\n\n","bugFix":["6e2410e27320f6aaba450cbf500d7822baf642f8","11a538ad124424bb29a1a6b3d94f142b8264b802"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createIndexableFields(Shape,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createIndexableFields(Shape,double).mjava","sourceNew":"  public Field[] createIndexableFields(Shape shape, double distErr) {\n    int detailLevel = grid.getLevelForDistance(distErr);\n    List<Node> cells = grid.getNodes(shape, detailLevel, true);//true=intermediates cells\n\n    //TODO is CellTokenStream supposed to be re-used somehow? see Uwe's comments:\n    //  http://code.google.com/p/lucene-spatial-playground/issues/detail?id=4\n\n    Field field = new Field(getFieldName(),\n        new CellTokenStream(cells.iterator()), FIELD_TYPE);\n    return new Field[]{field};\n  }\n\n","sourceOld":"  public Field[] createIndexableFields(Shape shape, double distErr) {\n    int detailLevel = grid.getLevelForDistance(distErr);\n    List<Node> cells = grid.getNodes(shape, detailLevel, true);//true=intermediates cells\n    //If shape isn't a point, add a full-resolution center-point so that\n    // PointPrefixTreeFieldCacheProvider has the center-points.\n    //TODO index each point of a multi-point or other aggregate.\n    //TODO remove this once support for a distance ValueSource is removed.\n    if (!(shape instanceof Point)) {\n      Point ctr = shape.getCenter();\n      //TODO should be smarter; don't index 2 tokens for this in CellTokenStream. Harmless though.\n      cells.add(grid.getNodes(ctr,grid.getMaxLevels(),false).get(0));\n    }\n\n    //TODO is CellTokenStream supposed to be re-used somehow? see Uwe's comments:\n    //  http://code.google.com/p/lucene-spatial-playground/issues/detail?id=4\n\n    Field field = new Field(getFieldName(), new CellTokenStream(cells.iterator()), FIELD_TYPE);\n    return new Field[]{field};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b43aca0f70aef9b914114574de1d0916ad2a32b","date":1360908147,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createIndexableFields(Shape,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createIndexableFields(Shape,double).mjava","sourceNew":"  public Field[] createIndexableFields(Shape shape, double distErr) {\n    int detailLevel = grid.getLevelForDistance(distErr);\n    List<Node> cells = grid.getNodes(shape, detailLevel, true, simplifyIndexedCells);//intermediates cells\n\n    //TODO is CellTokenStream supposed to be re-used somehow? see Uwe's comments:\n    //  http://code.google.com/p/lucene-spatial-playground/issues/detail?id=4\n\n    Field field = new Field(getFieldName(),\n        new CellTokenStream(cells.iterator()), FIELD_TYPE);\n    return new Field[]{field};\n  }\n\n","sourceOld":"  public Field[] createIndexableFields(Shape shape, double distErr) {\n    int detailLevel = grid.getLevelForDistance(distErr);\n    List<Node> cells = grid.getNodes(shape, detailLevel, true);//true=intermediates cells\n\n    //TODO is CellTokenStream supposed to be re-used somehow? see Uwe's comments:\n    //  http://code.google.com/p/lucene-spatial-playground/issues/detail?id=4\n\n    Field field = new Field(getFieldName(),\n        new CellTokenStream(cells.iterator()), FIELD_TYPE);\n    return new Field[]{field};\n  }\n\n","bugFix":["6e2410e27320f6aaba450cbf500d7822baf642f8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b41f996b22bd5518650f897d050088ff808ec03","date":1360969107,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createIndexableFields(Shape,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createIndexableFields(Shape,double).mjava","sourceNew":"  public Field[] createIndexableFields(Shape shape, double distErr) {\n    int detailLevel = grid.getLevelForDistance(distErr);\n    List<Node> cells = grid.getNodes(shape, detailLevel, true, simplifyIndexedCells);//intermediates cells\n\n    //TODO is CellTokenStream supposed to be re-used somehow? see Uwe's comments:\n    //  http://code.google.com/p/lucene-spatial-playground/issues/detail?id=4\n\n    Field field = new Field(getFieldName(),\n        new CellTokenStream(cells.iterator()), FIELD_TYPE);\n    return new Field[]{field};\n  }\n\n","sourceOld":"  public Field[] createIndexableFields(Shape shape, double distErr) {\n    int detailLevel = grid.getLevelForDistance(distErr);\n    List<Node> cells = grid.getNodes(shape, detailLevel, true);//true=intermediates cells\n\n    //TODO is CellTokenStream supposed to be re-used somehow? see Uwe's comments:\n    //  http://code.google.com/p/lucene-spatial-playground/issues/detail?id=4\n\n    Field field = new Field(getFieldName(),\n        new CellTokenStream(cells.iterator()), FIELD_TYPE);\n    return new Field[]{field};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8259c159da2de2e8528524fb76b244b46cbded59","date":1364478249,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createIndexableFields(Shape,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createIndexableFields(Shape,double).mjava","sourceNew":"  public Field[] createIndexableFields(Shape shape, double distErr) {\n    int detailLevel = grid.getLevelForDistance(distErr);\n    List<Cell> cells = grid.getCells(shape, detailLevel, true, simplifyIndexedCells);//intermediates cells\n\n    //TODO is CellTokenStream supposed to be re-used somehow? see Uwe's comments:\n    //  http://code.google.com/p/lucene-spatial-playground/issues/detail?id=4\n\n    Field field = new Field(getFieldName(),\n        new CellTokenStream(cells.iterator()), FIELD_TYPE);\n    return new Field[]{field};\n  }\n\n","sourceOld":"  public Field[] createIndexableFields(Shape shape, double distErr) {\n    int detailLevel = grid.getLevelForDistance(distErr);\n    List<Node> cells = grid.getNodes(shape, detailLevel, true, simplifyIndexedCells);//intermediates cells\n\n    //TODO is CellTokenStream supposed to be re-used somehow? see Uwe's comments:\n    //  http://code.google.com/p/lucene-spatial-playground/issues/detail?id=4\n\n    Field field = new Field(getFieldName(),\n        new CellTokenStream(cells.iterator()), FIELD_TYPE);\n    return new Field[]{field};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4de14be4bd1b857ba37ca138b61c4661c6d1bed3","date":1396628861,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createIndexableFields(Shape,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createIndexableFields(Shape,double).mjava","sourceNew":"  public Field[] createIndexableFields(Shape shape, double distErr) {\n    int detailLevel = grid.getLevelForDistance(distErr);\n    // note: maybe CellTokenStream should do this line, but it doesn't matter and it would create extra\n    // coupling\n    List<Cell> cells = grid.getCells(shape, detailLevel, true, simplifyIndexedCells);//intermediates cells\n\n    Field field = new Field(getFieldName(),\n        new CellTokenStream().setCells(cells.iterator()), FIELD_TYPE);\n    return new Field[]{field};\n  }\n\n","sourceOld":"  public Field[] createIndexableFields(Shape shape, double distErr) {\n    int detailLevel = grid.getLevelForDistance(distErr);\n    List<Cell> cells = grid.getCells(shape, detailLevel, true, simplifyIndexedCells);//intermediates cells\n\n    //TODO is CellTokenStream supposed to be re-used somehow? see Uwe's comments:\n    //  http://code.google.com/p/lucene-spatial-playground/issues/detail?id=4\n\n    Field field = new Field(getFieldName(),\n        new CellTokenStream(cells.iterator()), FIELD_TYPE);\n    return new Field[]{field};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createIndexableFields(Shape,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createIndexableFields(Shape,double).mjava","sourceNew":"  public Field[] createIndexableFields(Shape shape, double distErr) {\n    int detailLevel = grid.getLevelForDistance(distErr);\n    // note: maybe CellTokenStream should do this line, but it doesn't matter and it would create extra\n    // coupling\n    List<Cell> cells = grid.getCells(shape, detailLevel, true, simplifyIndexedCells);//intermediates cells\n\n    Field field = new Field(getFieldName(),\n        new CellTokenStream().setCells(cells.iterator()), FIELD_TYPE);\n    return new Field[]{field};\n  }\n\n","sourceOld":"  public Field[] createIndexableFields(Shape shape, double distErr) {\n    int detailLevel = grid.getLevelForDistance(distErr);\n    List<Cell> cells = grid.getCells(shape, detailLevel, true, simplifyIndexedCells);//intermediates cells\n\n    //TODO is CellTokenStream supposed to be re-used somehow? see Uwe's comments:\n    //  http://code.google.com/p/lucene-spatial-playground/issues/detail?id=4\n\n    Field field = new Field(getFieldName(),\n        new CellTokenStream(cells.iterator()), FIELD_TYPE);\n    return new Field[]{field};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6","date":1397789149,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createIndexableFields(Shape,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createIndexableFields(Shape,double).mjava","sourceNew":"  /**\n   * Turns {@link SpatialPrefixTree#getTreeCellIterator(Shape, int)} into a\n   * {@link org.apache.lucene.analysis.TokenStream}.\n   * {@code simplifyIndexedCells} is an optional hint affecting non-point shapes: it will\n   * simply/aggregate sets of complete leaves in a cell to its parent, resulting in ~20-25%\n   * fewer cells. It will likely be removed in the future.\n   */\n  public Field[] createIndexableFields(Shape shape, double distErr) {\n    int detailLevel = grid.getLevelForDistance(distErr);\n    TokenStream tokenStream = createTokenStream(shape, detailLevel);\n    Field field = new Field(getFieldName(), tokenStream, FIELD_TYPE);\n    return new Field[]{field};\n  }\n\n","sourceOld":"  public Field[] createIndexableFields(Shape shape, double distErr) {\n    int detailLevel = grid.getLevelForDistance(distErr);\n    // note: maybe CellTokenStream should do this line, but it doesn't matter and it would create extra\n    // coupling\n    List<Cell> cells = grid.getCells(shape, detailLevel, true, simplifyIndexedCells);//intermediates cells\n\n    Field field = new Field(getFieldName(),\n        new CellTokenStream().setCells(cells.iterator()), FIELD_TYPE);\n    return new Field[]{field};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0","date":1426015524,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createIndexableFields(Shape,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createIndexableFields(Shape,double).mjava","sourceNew":"  /**\n   * Turns {@link SpatialPrefixTree#getTreeCellIterator(Shape, int)} into a\n   * {@link org.apache.lucene.analysis.TokenStream}.\n   */\n  public Field[] createIndexableFields(Shape shape, double distErr) {\n    int detailLevel = grid.getLevelForDistance(distErr);\n    return createIndexableFields(shape, detailLevel);\n  }\n\n","sourceOld":"  /**\n   * Turns {@link SpatialPrefixTree#getTreeCellIterator(Shape, int)} into a\n   * {@link org.apache.lucene.analysis.TokenStream}.\n   * {@code simplifyIndexedCells} is an optional hint affecting non-point shapes: it will\n   * simply/aggregate sets of complete leaves in a cell to its parent, resulting in ~20-25%\n   * fewer cells. It will likely be removed in the future.\n   */\n  public Field[] createIndexableFields(Shape shape, double distErr) {\n    int detailLevel = grid.getLevelForDistance(distErr);\n    TokenStream tokenStream = createTokenStream(shape, detailLevel);\n    Field field = new Field(getFieldName(), tokenStream, FIELD_TYPE);\n    return new Field[]{field};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createIndexableFields(Shape,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createIndexableFields(Shape,double).mjava","sourceNew":"  /**\n   * Turns {@link SpatialPrefixTree#getTreeCellIterator(Shape, int)} into a\n   * {@link org.apache.lucene.analysis.TokenStream}.\n   */\n  public Field[] createIndexableFields(Shape shape, double distErr) {\n    int detailLevel = grid.getLevelForDistance(distErr);\n    return createIndexableFields(shape, detailLevel);\n  }\n\n","sourceOld":"  /**\n   * Turns {@link SpatialPrefixTree#getTreeCellIterator(Shape, int)} into a\n   * {@link org.apache.lucene.analysis.TokenStream}.\n   * {@code simplifyIndexedCells} is an optional hint affecting non-point shapes: it will\n   * simply/aggregate sets of complete leaves in a cell to its parent, resulting in ~20-25%\n   * fewer cells. It will likely be removed in the future.\n   */\n  public Field[] createIndexableFields(Shape shape, double distErr) {\n    int detailLevel = grid.getLevelForDistance(distErr);\n    TokenStream tokenStream = createTokenStream(shape, detailLevel);\n    Field field = new Field(getFieldName(), tokenStream, FIELD_TYPE);\n    return new Field[]{field};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createIndexableFields(Shape,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createIndexableFields(Shape,double).mjava","sourceNew":"  /**\n   * Turns {@link SpatialPrefixTree#getTreeCellIterator(Shape, int)} into a\n   * {@link org.apache.lucene.analysis.TokenStream}.\n   */\n  public Field[] createIndexableFields(Shape shape, double distErr) {\n    int detailLevel = grid.getLevelForDistance(distErr);\n    return createIndexableFields(shape, detailLevel);\n  }\n\n","sourceOld":"  /**\n   * Turns {@link SpatialPrefixTree#getTreeCellIterator(Shape, int)} into a\n   * {@link org.apache.lucene.analysis.TokenStream}.\n   */\n  public Field[] createIndexableFields(Shape shape, double distErr) {\n    int detailLevel = grid.getLevelForDistance(distErr);\n    return createIndexableFields(shape, detailLevel);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createIndexableFields(Shape,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createIndexableFields(Shape,double).mjava","sourceNew":"  /**\n   * Turns {@link SpatialPrefixTree#getTreeCellIterator(Shape, int)} into a\n   * {@link org.apache.lucene.analysis.TokenStream}.\n   */\n  public Field[] createIndexableFields(Shape shape, double distErr) {\n    int detailLevel = grid.getLevelForDistance(distErr);\n    return createIndexableFields(shape, detailLevel);\n  }\n\n","sourceOld":"  /**\n   * Turns {@link SpatialPrefixTree#getTreeCellIterator(Shape, int)} into a\n   * {@link org.apache.lucene.analysis.TokenStream}.\n   */\n  public Field[] createIndexableFields(Shape shape, double distErr) {\n    int detailLevel = grid.getLevelForDistance(distErr);\n    return createIndexableFields(shape, detailLevel);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["11a538ad124424bb29a1a6b3d94f142b8264b802","29ccadfdb4b31f5bd2d0876fdf5e8a8e85d27934"],"af2638813028b254a88b418ebeafb541afb49653":["11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0","112d77ac8d3e10a362516ad834c9a11d35c94234"],"11a538ad124424bb29a1a6b3d94f142b8264b802":["6e2410e27320f6aaba450cbf500d7822baf642f8"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0"],"6b43aca0f70aef9b914114574de1d0916ad2a32b":["29ccadfdb4b31f5bd2d0876fdf5e8a8e85d27934"],"8259c159da2de2e8528524fb76b244b46cbded59":["6b43aca0f70aef9b914114574de1d0916ad2a32b"],"6e2410e27320f6aaba450cbf500d7822baf642f8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6","11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["8259c159da2de2e8528524fb76b244b46cbded59","4de14be4bd1b857ba37ca138b61c4661c6d1bed3"],"3b41f996b22bd5518650f897d050088ff808ec03":["29ccadfdb4b31f5bd2d0876fdf5e8a8e85d27934","6b43aca0f70aef9b914114574de1d0916ad2a32b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4de14be4bd1b857ba37ca138b61c4661c6d1bed3":["8259c159da2de2e8528524fb76b244b46cbded59"],"29ccadfdb4b31f5bd2d0876fdf5e8a8e85d27934":["11a538ad124424bb29a1a6b3d94f142b8264b802"],"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6":["4de14be4bd1b857ba37ca138b61c4661c6d1bed3"],"11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0":["8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"11a538ad124424bb29a1a6b3d94f142b8264b802":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","29ccadfdb4b31f5bd2d0876fdf5e8a8e85d27934"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"6b43aca0f70aef9b914114574de1d0916ad2a32b":["8259c159da2de2e8528524fb76b244b46cbded59","3b41f996b22bd5518650f897d050088ff808ec03"],"8259c159da2de2e8528524fb76b244b46cbded59":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","4de14be4bd1b857ba37ca138b61c4661c6d1bed3"],"6e2410e27320f6aaba450cbf500d7822baf642f8":["11a538ad124424bb29a1a6b3d94f142b8264b802"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"3b41f996b22bd5518650f897d050088ff808ec03":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6e2410e27320f6aaba450cbf500d7822baf642f8"],"29ccadfdb4b31f5bd2d0876fdf5e8a8e85d27934":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","6b43aca0f70aef9b914114574de1d0916ad2a32b","3b41f996b22bd5518650f897d050088ff808ec03"],"4de14be4bd1b857ba37ca138b61c4661c6d1bed3":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6"],"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0"],"11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","15e323346eac5e4685c0a9f2df85eb96b4239bbb","3b41f996b22bd5518650f897d050088ff808ec03","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}