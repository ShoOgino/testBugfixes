{"path":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","commits":[{"id":"8b6187898fc4413ccd18229711786550a280383c","date":1173776782,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","pathOld":"/dev/null","sourceNew":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockRAMDirectory to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer  = new IndexWriter(dir, false, new WhitespaceAnalyzer(), false);\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used to much space while adding documents when autoCommit=false\",     \n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used to much space after close when autoCommit=false\",     \n                 endDiskUsage < 100*startDiskUsage);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0f44610301174bfb430443d89a88dc1c502feea1","0f44610301174bfb430443d89a88dc1c502feea1","8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5","8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd9aba6db0f2adde620bb61f591ed18dcfee36ac","date":1201778618,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","sourceNew":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockRAMDirectory to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer  = new IndexWriter(dir, false, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used to much space while adding documents when autoCommit=false\",     \n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used to much space after close when autoCommit=false\",     \n                 endDiskUsage < 100*startDiskUsage);\n    }\n\n","sourceOld":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockRAMDirectory to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer  = new IndexWriter(dir, false, new WhitespaceAnalyzer(), false);\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used to much space while adding documents when autoCommit=false\",     \n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used to much space after close when autoCommit=false\",     \n                 endDiskUsage < 100*startDiskUsage);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","sourceNew":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockRAMDirectory to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, false, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used to much space while adding documents when autoCommit=false\",     \n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used to much space after close when autoCommit=false endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n    }\n\n","sourceOld":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockRAMDirectory to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer  = new IndexWriter(dir, false, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used to much space while adding documents when autoCommit=false\",     \n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used to much space after close when autoCommit=false\",     \n                 endDiskUsage < 100*startDiskUsage);\n    }\n\n","bugFix":null,"bugIntro":["0f44610301174bfb430443d89a88dc1c502feea1","0f44610301174bfb430443d89a88dc1c502feea1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4ae99f08f69aa3acba7cd75134e8447eb747559","date":1222344278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","sourceNew":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockRAMDirectory to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used to much space while adding documents when autoCommit=false\",     \n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used to much space after close when autoCommit=false endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n    }\n\n","sourceOld":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockRAMDirectory to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, false, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used to much space while adding documents when autoCommit=false\",     \n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used to much space after close when autoCommit=false endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0f44610301174bfb430443d89a88dc1c502feea1","date":1231194664,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","sourceNew":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockRAMDirectory to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents when autoCommit=false: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage,\n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used too much space after close when autoCommit=false endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n    }\n\n","sourceOld":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockRAMDirectory to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used to much space while adding documents when autoCommit=false\",     \n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used to much space after close when autoCommit=false endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n    }\n\n","bugFix":["5350389bf83287111f7760b9e3db3af8e3648474","8b6187898fc4413ccd18229711786550a280383c"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestCommitOnCloseDiskUsage().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","sourceNew":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockRAMDirectory to\n     * measure max temp disk space used.\n     */\n    public void xxxtestCommitOnCloseDiskUsage() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents when autoCommit=false: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage,\n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used too much space after close when autoCommit=false endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n    }\n\n","sourceOld":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockRAMDirectory to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents when autoCommit=false: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage,\n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used too much space after close when autoCommit=false endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestCommitOnCloseDiskUsage().mjava","sourceNew":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockRAMDirectory to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents when autoCommit=false: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage,\n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used too much space after close when autoCommit=false endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n    }\n\n","sourceOld":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockRAMDirectory to\n     * measure max temp disk space used.\n     */\n    public void xxxtestCommitOnCloseDiskUsage() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents when autoCommit=false: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage,\n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used too much space after close when autoCommit=false endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","sourceNew":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockRAMDirectory to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents when autoCommit=false: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage,\n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used too much space after close when autoCommit=false endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n    }\n\n","sourceOld":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockRAMDirectory to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents when autoCommit=false: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage,\n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used too much space after close when autoCommit=false endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","sourceNew":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockRAMDirectory to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents when autoCommit=false: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage,\n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used too much space after close when autoCommit=false endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n    }\n\n","sourceOld":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockRAMDirectory to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents when autoCommit=false: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage,\n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used too much space after close when autoCommit=false endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","sourceNew":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockRAMDirectory to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage,\n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n    }\n\n","sourceOld":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockRAMDirectory to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents when autoCommit=false: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage,\n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used too much space after close when autoCommit=false endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n    }\n\n","bugFix":null,"bugIntro":["8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","sourceNew":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockRAMDirectory to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage,\n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n    }\n\n","sourceOld":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockRAMDirectory to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage,\n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","sourceNew":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockRAMDirectory to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage,\n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n    }\n\n","sourceOld":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockRAMDirectory to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage,\n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","sourceNew":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockRAMDirectory to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT)\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10).setMergeScheduler(\n            new SerialMergeScheduler()));\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage,\n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n    }\n\n","sourceOld":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockRAMDirectory to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage,\n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","sourceNew":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockRAMDirectory to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage,\n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n    }\n\n","sourceOld":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockRAMDirectory to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT)\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10).setMergeScheduler(\n            new SerialMergeScheduler()));\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage,\n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","sourceNew":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockRAMDirectory to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10).setMergeScheduler(\n            new SerialMergeScheduler()));\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage,\n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n    }\n\n","sourceOld":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockRAMDirectory to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeScheduler(new SerialMergeScheduler());\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage,\n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseDiskUsage().mjava","sourceNew":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockRAMDirectory to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10).setMergeScheduler(\n            new SerialMergeScheduler()));\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage,\n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n    }\n\n","sourceOld":"    /*\n     * Verify that a writer with \"commit on close\" indeed\n     * cleans up the temp segments created after opening\n     * that are not referenced by the starting segments\n     * file.  We check this by using MockRAMDirectory to\n     * measure max temp disk space used.\n     */\n    public void testCommitOnCloseDiskUsage() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      for(int j=0;j<30;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n      dir.resetMaxUsedSizeInBytes();\n\n      long startDiskUsage = dir.getMaxUsedSizeInBytes();\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10).setMergeScheduler(\n            new SerialMergeScheduler()));\n      for(int j=0;j<1470;j++) {\n        addDocWithIndex(writer, j);\n      }\n      long midDiskUsage = dir.getMaxUsedSizeInBytes();\n      dir.resetMaxUsedSizeInBytes();\n      writer.optimize();\n      writer.close();\n\n      IndexReader.open(dir, true).close();\n\n      long endDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      // Ending index is 50X as large as starting index; due\n      // to 2X disk usage normally we allow 100X max\n      // transient usage.  If something is wrong w/ deleter\n      // and it doesn't delete intermediate segments then it\n      // will exceed this 100X:\n      // System.out.println(\"start \" + startDiskUsage + \"; mid \" + midDiskUsage + \";end \" + endDiskUsage);\n      assertTrue(\"writer used too much space while adding documents: mid=\" + midDiskUsage + \" start=\" + startDiskUsage + \" end=\" + endDiskUsage,\n                 midDiskUsage < 100*startDiskUsage);\n      assertTrue(\"writer used too much space after close: endDiskUsage=\" + endDiskUsage + \" startDiskUsage=\" + startDiskUsage,\n                 endDiskUsage < 100*startDiskUsage);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c4ae99f08f69aa3acba7cd75134e8447eb747559":["5350389bf83287111f7760b9e3db3af8e3648474"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["09c482d1e63332617181729a225b215c452d8a79","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["0f44610301174bfb430443d89a88dc1c502feea1"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["8b6187898fc4413ccd18229711786550a280383c"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"0f44610301174bfb430443d89a88dc1c502feea1":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["09c482d1e63332617181729a225b215c452d8a79"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["87c966e9308847938a7c905c2e46a56d8df788b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b6187898fc4413ccd18229711786550a280383c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"87c966e9308847938a7c905c2e46a56d8df788b8":["0a046c0c310bc77931fc8441bd920053b607dd14"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"5350389bf83287111f7760b9e3db3af8e3648474":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"c4ae99f08f69aa3acba7cd75134e8447eb747559":["0f44610301174bfb430443d89a88dc1c502feea1"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["87c966e9308847938a7c905c2e46a56d8df788b8"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["5350389bf83287111f7760b9e3db3af8e3648474"],"0f44610301174bfb430443d89a88dc1c502feea1":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b6187898fc4413ccd18229711786550a280383c"],"8b6187898fc4413ccd18229711786550a280383c":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"87c966e9308847938a7c905c2e46a56d8df788b8":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"5350389bf83287111f7760b9e3db3af8e3648474":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"09c482d1e63332617181729a225b215c452d8a79":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}