{"path":"solr/src/test/org/apache/solr/TestGroupingSearch#createMaxDocComparator(Comparator[Doc]).mjava","commits":[{"id":"e62f57eded31ecb5e6b09f8edad73ba2819a5269","date":1290374488,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/TestGroupingSearch#createMaxDocComparator(Comparator[Doc]).mjava","pathOld":"/dev/null","sourceNew":"  public static Comparator<Grp> createMaxDocComparator(final Comparator<Doc> docComparator) {\n    return new Comparator<Grp>() {\n      @Override\n      public int compare(Grp o1, Grp o2) {\n        // all groups should have at least one doc\n        Doc d1 = o1.maxDoc;\n        Doc d2 = o2.maxDoc;\n        return docComparator.compare(d1, d2);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/TestGroupingSearch#createMaxDocComparator(Comparator[Doc]).mjava","pathOld":"/dev/null","sourceNew":"  public static Comparator<Grp> createMaxDocComparator(final Comparator<Doc> docComparator) {\n    return new Comparator<Grp>() {\n      @Override\n      public int compare(Grp o1, Grp o2) {\n        // all groups should have at least one doc\n        Doc d1 = o1.maxDoc;\n        Doc d2 = o2.maxDoc;\n        return docComparator.compare(d1, d2);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/TestGroupingSearch#createMaxDocComparator(Comparator[Doc]).mjava","pathOld":"/dev/null","sourceNew":"  public static Comparator<Grp> createMaxDocComparator(final Comparator<Doc> docComparator) {\n    return new Comparator<Grp>() {\n      @Override\n      public int compare(Grp o1, Grp o2) {\n        // all groups should have at least one doc\n        Doc d1 = o1.maxDoc;\n        Doc d2 = o2.maxDoc;\n        return docComparator.compare(d1, d2);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestGroupingSearch#createMaxDocComparator(Comparator[Doc]).mjava","pathOld":"solr/src/test/org/apache/solr/TestGroupingSearch#createMaxDocComparator(Comparator[Doc]).mjava","sourceNew":"  public static Comparator<Grp> createMaxDocComparator(final Comparator<Doc> docComparator) {\n    return new Comparator<Grp>() {\n      @Override\n      public int compare(Grp o1, Grp o2) {\n        // all groups should have at least one doc\n        Doc d1 = o1.maxDoc;\n        Doc d2 = o2.maxDoc;\n        return docComparator.compare(d1, d2);\n      }\n    };\n  }\n\n","sourceOld":"  public static Comparator<Grp> createMaxDocComparator(final Comparator<Doc> docComparator) {\n    return new Comparator<Grp>() {\n      @Override\n      public int compare(Grp o1, Grp o2) {\n        // all groups should have at least one doc\n        Doc d1 = o1.maxDoc;\n        Doc d2 = o2.maxDoc;\n        return docComparator.compare(d1, d2);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestGroupingSearch#createMaxDocComparator(Comparator[Doc]).mjava","pathOld":"solr/src/test/org/apache/solr/TestGroupingSearch#createMaxDocComparator(Comparator[Doc]).mjava","sourceNew":"  public static Comparator<Grp> createMaxDocComparator(final Comparator<Doc> docComparator) {\n    return new Comparator<Grp>() {\n      @Override\n      public int compare(Grp o1, Grp o2) {\n        // all groups should have at least one doc\n        Doc d1 = o1.maxDoc;\n        Doc d2 = o2.maxDoc;\n        return docComparator.compare(d1, d2);\n      }\n    };\n  }\n\n","sourceOld":"  public static Comparator<Grp> createMaxDocComparator(final Comparator<Doc> docComparator) {\n    return new Comparator<Grp>() {\n      @Override\n      public int compare(Grp o1, Grp o2) {\n        // all groups should have at least one doc\n        Doc d1 = o1.maxDoc;\n        Doc d2 = o2.maxDoc;\n        return docComparator.compare(d1, d2);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/TestGroupingSearch#createMaxDocComparator(Comparator[Doc]).mjava","pathOld":"solr/src/test/org/apache/solr/TestGroupingSearch#createMaxDocComparator(Comparator[Doc]).mjava","sourceNew":"  public static Comparator<Grp> createMaxDocComparator(final Comparator<Doc> docComparator) {\n    return new Comparator<Grp>() {\n      @Override\n      public int compare(Grp o1, Grp o2) {\n        // all groups should have at least one doc\n        Doc d1 = o1.maxDoc;\n        Doc d2 = o2.maxDoc;\n        return docComparator.compare(d1, d2);\n      }\n    };\n  }\n\n","sourceOld":"  public static Comparator<Grp> createMaxDocComparator(final Comparator<Doc> docComparator) {\n    return new Comparator<Grp>() {\n      @Override\n      public int compare(Grp o1, Grp o2) {\n        // all groups should have at least one doc\n        Doc d1 = o1.maxDoc;\n        Doc d2 = o2.maxDoc;\n        return docComparator.compare(d1, d2);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["e62f57eded31ecb5e6b09f8edad73ba2819a5269"],"c26f00b574427b55127e869b935845554afde1fa":["e62f57eded31ecb5e6b09f8edad73ba2819a5269","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["e62f57eded31ecb5e6b09f8edad73ba2819a5269"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e62f57eded31ecb5e6b09f8edad73ba2819a5269"],"e62f57eded31ecb5e6b09f8edad73ba2819a5269":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3bb13258feba31ab676502787ab2e1779f129b7a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e62f57eded31ecb5e6b09f8edad73ba2819a5269"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","e62f57eded31ecb5e6b09f8edad73ba2819a5269","3bb13258feba31ab676502787ab2e1779f129b7a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"e62f57eded31ecb5e6b09f8edad73ba2819a5269":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}