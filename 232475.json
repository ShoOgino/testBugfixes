{"path":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#testScorerWrappingForTopScores().mjava","commits":[{"id":"063dae9421f2da2fe272aee10b891f49d21538bd","date":1592500789,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#testScorerWrappingForTopScores().mjava","pathOld":"/dev/null","sourceNew":"  public void testScorerWrappingForTopScores() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    iw.addDocument(new Document());\n    DirectoryReader reader = iw.getReader();\n    iw.close();\n    final LeafReaderContext ctx = reader.leaves().get(0);\n    Collector c1 = collector(ScoreMode.TOP_SCORES, MultiCollector.MinCompetitiveScoreAwareScorable.class);\n    Collector c2 = collector(ScoreMode.TOP_SCORES, MultiCollector.MinCompetitiveScoreAwareScorable.class);\n    MultiCollector.wrap(c1, c2).getLeafCollector(ctx).setScorer(new ScoreAndDoc());\n    \n    c1 = collector(ScoreMode.TOP_SCORES, ScoreCachingWrappingScorer.class);\n    c2 = collector(ScoreMode.COMPLETE, ScoreCachingWrappingScorer.class);\n    MultiCollector.wrap(c1, c2).getLeafCollector(ctx).setScorer(new ScoreAndDoc());\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d488a38bddbdcc0d425b27beb126f54df6dd82a4","date":1598268476,"type":5,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiCollector#testScorerWrappingForTopScores().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#testScorerWrappingForTopScores().mjava","sourceNew":"  public void testScorerWrappingForTopScores() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    iw.addDocument(new Document());\n    DirectoryReader reader = iw.getReader();\n    iw.close();\n    final LeafReaderContext ctx = reader.leaves().get(0);\n    Collector c1 = collector(ScoreMode.TOP_SCORES, MultiCollector.MinCompetitiveScoreAwareScorable.class);\n    Collector c2 = collector(ScoreMode.TOP_SCORES, MultiCollector.MinCompetitiveScoreAwareScorable.class);\n    MultiCollector.wrap(c1, c2).getLeafCollector(ctx).setScorer(new ScoreAndDoc());\n    \n    c1 = collector(ScoreMode.TOP_SCORES, ScoreCachingWrappingScorer.class);\n    c2 = collector(ScoreMode.COMPLETE, ScoreCachingWrappingScorer.class);\n    MultiCollector.wrap(c1, c2).getLeafCollector(ctx).setScorer(new ScoreAndDoc());\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testScorerWrappingForTopScores() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    iw.addDocument(new Document());\n    DirectoryReader reader = iw.getReader();\n    iw.close();\n    final LeafReaderContext ctx = reader.leaves().get(0);\n    Collector c1 = collector(ScoreMode.TOP_SCORES, MultiCollector.MinCompetitiveScoreAwareScorable.class);\n    Collector c2 = collector(ScoreMode.TOP_SCORES, MultiCollector.MinCompetitiveScoreAwareScorable.class);\n    MultiCollector.wrap(c1, c2).getLeafCollector(ctx).setScorer(new ScoreAndDoc());\n    \n    c1 = collector(ScoreMode.TOP_SCORES, ScoreCachingWrappingScorer.class);\n    c2 = collector(ScoreMode.COMPLETE, ScoreCachingWrappingScorer.class);\n    MultiCollector.wrap(c1, c2).getLeafCollector(ctx).setScorer(new ScoreAndDoc());\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"063dae9421f2da2fe272aee10b891f49d21538bd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d488a38bddbdcc0d425b27beb126f54df6dd82a4":["063dae9421f2da2fe272aee10b891f49d21538bd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d488a38bddbdcc0d425b27beb126f54df6dd82a4"]},"commit2Childs":{"063dae9421f2da2fe272aee10b891f49d21538bd":["d488a38bddbdcc0d425b27beb126f54df6dd82a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["063dae9421f2da2fe272aee10b891f49d21538bd"],"d488a38bddbdcc0d425b27beb126f54df6dd82a4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}