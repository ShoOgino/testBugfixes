{"path":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#randomSubString(Random,int,boolean).mjava","commits":[{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":1,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#randomSubString(Random,int,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#randomSubString(Random,int,boolean).mjava","sourceNew":"  public static String randomSubString(Random random, int wordLength, boolean simple) {\n    if (wordLength == 0) {\n      return \"\";\n    }\n\n    int evilness = TestUtil.nextInt(random, 0, 20);\n\n    StringBuilder sb = new StringBuilder();\n    while (sb.length() < wordLength) {;\n      if (simple) {\n        sb.append(random.nextBoolean() ? TestUtil.randomSimpleString(random, wordLength) : TestUtil.randomHtmlishString(random, wordLength));\n      } else {\n        if (evilness < 10) {\n          sb.append(TestUtil.randomSimpleString(random, wordLength));\n        } else if (evilness < 15) {\n          assert sb.length() == 0; // we should always get wordLength back!\n          sb.append(TestUtil.randomRealisticUnicodeString(random, wordLength, wordLength));\n        } else if (evilness == 16) {\n          sb.append(TestUtil.randomHtmlishString(random, wordLength));\n        } else if (evilness == 17) {\n          // gives a lot of punctuation\n          sb.append(TestUtil.randomRegexpishString(random, wordLength));\n        } else {\n          sb.append(TestUtil.randomUnicodeString(random, wordLength));\n        }\n      }\n    }\n    if (sb.length() > wordLength) {\n      sb.setLength(wordLength);\n      if (Character.isHighSurrogate(sb.charAt(wordLength-1))) {\n        sb.setLength(wordLength-1);\n      }\n    }\n\n    if (random.nextInt(17) == 0) {\n      // mix up case\n      String mixedUp = TestUtil.randomlyRecaseCodePoints(random, sb.toString());\n      assert mixedUp.length() == sb.length();\n      return mixedUp;\n    } else {\n      return sb.toString();\n    }\n  }\n\n","sourceOld":"  public static String randomSubString(Random random, int wordLength, boolean simple) {\n    if (wordLength == 0) {\n      return \"\";\n    }\n\n    int evilness = _TestUtil.nextInt(random, 0, 20);\n\n    StringBuilder sb = new StringBuilder();\n    while (sb.length() < wordLength) {;\n      if (simple) {\n        sb.append(random.nextBoolean() ? _TestUtil.randomSimpleString(random, wordLength) : _TestUtil.randomHtmlishString(random, wordLength));\n      } else {\n        if (evilness < 10) {\n          sb.append(_TestUtil.randomSimpleString(random, wordLength));\n        } else if (evilness < 15) {\n          assert sb.length() == 0; // we should always get wordLength back!\n          sb.append(_TestUtil.randomRealisticUnicodeString(random, wordLength, wordLength));\n        } else if (evilness == 16) {\n          sb.append(_TestUtil.randomHtmlishString(random, wordLength));\n        } else if (evilness == 17) {\n          // gives a lot of punctuation\n          sb.append(_TestUtil.randomRegexpishString(random, wordLength));\n        } else {\n          sb.append(_TestUtil.randomUnicodeString(random, wordLength));\n        }\n      }\n    }\n    if (sb.length() > wordLength) {\n      sb.setLength(wordLength);\n      if (Character.isHighSurrogate(sb.charAt(wordLength-1))) {\n        sb.setLength(wordLength-1);\n      }\n    }\n\n    if (random.nextInt(17) == 0) {\n      // mix up case\n      String mixedUp = _TestUtil.randomlyRecaseCodePoints(random, sb.toString());\n      assert mixedUp.length() == sb.length();\n      return mixedUp;\n    } else {\n      return sb.toString();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a836deab3a09546740b8ee2f1f776e83062f39e7","date":1453109062,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#randomSubString(Random,int,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#randomSubString(Random,int,boolean).mjava","sourceNew":"  public static String randomSubString(Random random, int wordLength, boolean simple) {\n    if (wordLength == 0) {\n      return \"\";\n    }\n\n    int evilness = TestUtil.nextInt(random, 0, 20);\n\n    StringBuilder sb = new StringBuilder();\n    while (sb.length() < wordLength) {\n      if (simple) {\n        sb.append(random.nextBoolean() ? TestUtil.randomSimpleString(random, wordLength) : TestUtil.randomHtmlishString(random, wordLength));\n      } else {\n        if (evilness < 10) {\n          sb.append(TestUtil.randomSimpleString(random, wordLength));\n        } else if (evilness < 15) {\n          assert sb.length() == 0; // we should always get wordLength back!\n          sb.append(TestUtil.randomRealisticUnicodeString(random, wordLength, wordLength));\n        } else if (evilness == 16) {\n          sb.append(TestUtil.randomHtmlishString(random, wordLength));\n        } else if (evilness == 17) {\n          // gives a lot of punctuation\n          sb.append(TestUtil.randomRegexpishString(random, wordLength));\n        } else {\n          sb.append(TestUtil.randomUnicodeString(random, wordLength));\n        }\n      }\n    }\n    if (sb.length() > wordLength) {\n      sb.setLength(wordLength);\n      if (Character.isHighSurrogate(sb.charAt(wordLength-1))) {\n        sb.setLength(wordLength-1);\n      }\n    }\n\n    if (random.nextInt(17) == 0) {\n      // mix up case\n      String mixedUp = TestUtil.randomlyRecaseCodePoints(random, sb.toString());\n      assert mixedUp.length() == sb.length();\n      return mixedUp;\n    } else {\n      return sb.toString();\n    }\n  }\n\n","sourceOld":"  public static String randomSubString(Random random, int wordLength, boolean simple) {\n    if (wordLength == 0) {\n      return \"\";\n    }\n\n    int evilness = TestUtil.nextInt(random, 0, 20);\n\n    StringBuilder sb = new StringBuilder();\n    while (sb.length() < wordLength) {;\n      if (simple) {\n        sb.append(random.nextBoolean() ? TestUtil.randomSimpleString(random, wordLength) : TestUtil.randomHtmlishString(random, wordLength));\n      } else {\n        if (evilness < 10) {\n          sb.append(TestUtil.randomSimpleString(random, wordLength));\n        } else if (evilness < 15) {\n          assert sb.length() == 0; // we should always get wordLength back!\n          sb.append(TestUtil.randomRealisticUnicodeString(random, wordLength, wordLength));\n        } else if (evilness == 16) {\n          sb.append(TestUtil.randomHtmlishString(random, wordLength));\n        } else if (evilness == 17) {\n          // gives a lot of punctuation\n          sb.append(TestUtil.randomRegexpishString(random, wordLength));\n        } else {\n          sb.append(TestUtil.randomUnicodeString(random, wordLength));\n        }\n      }\n    }\n    if (sb.length() > wordLength) {\n      sb.setLength(wordLength);\n      if (Character.isHighSurrogate(sb.charAt(wordLength-1))) {\n        sb.setLength(wordLength-1);\n      }\n    }\n\n    if (random.nextInt(17) == 0) {\n      // mix up case\n      String mixedUp = TestUtil.randomlyRecaseCodePoints(random, sb.toString());\n      assert mixedUp.length() == sb.length();\n      return mixedUp;\n    } else {\n      return sb.toString();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a836deab3a09546740b8ee2f1f776e83062f39e7":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a836deab3a09546740b8ee2f1f776e83062f39e7"]},"commit2Childs":{"a836deab3a09546740b8ee2f1f776e83062f39e7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6613659748fe4411a7dcf85266e55db1f95f7315":["a836deab3a09546740b8ee2f1f776e83062f39e7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}