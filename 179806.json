{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46FieldInfosWriter#write(Directory,String,String,FieldInfos,IOContext).mjava","commits":[{"id":"8435160e9702b19398118ddf76b61c846612b6a4","date":1380349140,"type":2,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46FieldInfosWriter#write(Directory,String,String,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42FieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, Lucene46FieldInfosFormat.EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene46FieldInfosFormat.CODEC_NAME, Lucene46FieldInfosFormat.FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        IndexOptions indexOptions = fi.getIndexOptions();\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= Lucene46FieldInfosFormat.STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= Lucene46FieldInfosFormat.OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= Lucene46FieldInfosFormat.STORE_PAYLOADS;\n        if (fi.isIndexed()) {\n          bits |= Lucene46FieldInfosFormat.IS_INDEXED;\n          assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          if (indexOptions == IndexOptions.DOCS_ONLY) {\n            bits |= Lucene46FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n            bits |= Lucene46FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n            bits |= Lucene46FieldInfosFormat.OMIT_POSITIONS;\n          }\n        }\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType());\n        final byte nrm = docValuesByte(fi.getNormType());\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n        output.writeLong(fi.getDocValuesGen());\n        output.writeStringStringMap(fi.attributes());\n      }\n      success = true;\n    } finally {\n      if (success) {\n        output.close();\n      } else {\n        IOUtils.closeWhileHandlingException(output);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", Lucene42FieldInfosFormat.EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene42FieldInfosFormat.CODEC_NAME, Lucene42FieldInfosFormat.FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        IndexOptions indexOptions = fi.getIndexOptions();\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= Lucene42FieldInfosFormat.STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= Lucene42FieldInfosFormat.OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= Lucene42FieldInfosFormat.STORE_PAYLOADS;\n        if (fi.isIndexed()) {\n          bits |= Lucene42FieldInfosFormat.IS_INDEXED;\n          assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          if (indexOptions == IndexOptions.DOCS_ONLY) {\n            bits |= Lucene42FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n            bits |= Lucene42FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n            bits |= Lucene42FieldInfosFormat.OMIT_POSITIONS;\n          }\n        }\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType());\n        final byte nrm = docValuesByte(fi.getNormType());\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n        output.writeStringStringMap(fi.attributes());\n      }\n      success = true;\n    } finally {\n      if (success) {\n        output.close();\n      } else {\n        IOUtils.closeWhileHandlingException(output);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46FieldInfosWriter#write(Directory,String,String,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46FieldInfosWriter#write(Directory,String,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, Lucene46FieldInfosFormat.EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene46FieldInfosFormat.CODEC_NAME, Lucene46FieldInfosFormat.FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        IndexOptions indexOptions = fi.getIndexOptions();\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= Lucene46FieldInfosFormat.STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= Lucene46FieldInfosFormat.OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= Lucene46FieldInfosFormat.STORE_PAYLOADS;\n        if (fi.isIndexed()) {\n          bits |= Lucene46FieldInfosFormat.IS_INDEXED;\n          assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          if (indexOptions == IndexOptions.DOCS_ONLY) {\n            bits |= Lucene46FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n            bits |= Lucene46FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n            bits |= Lucene46FieldInfosFormat.OMIT_POSITIONS;\n          }\n        }\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType());\n        final byte nrm = docValuesByte(fi.getNormType());\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n        output.writeLong(fi.getDocValuesGen());\n        output.writeStringStringMap(fi.attributes());\n      }\n      CodecUtil.writeFooter(output);\n      success = true;\n    } finally {\n      if (success) {\n        output.close();\n      } else {\n        IOUtils.closeWhileHandlingException(output);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, Lucene46FieldInfosFormat.EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene46FieldInfosFormat.CODEC_NAME, Lucene46FieldInfosFormat.FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        IndexOptions indexOptions = fi.getIndexOptions();\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= Lucene46FieldInfosFormat.STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= Lucene46FieldInfosFormat.OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= Lucene46FieldInfosFormat.STORE_PAYLOADS;\n        if (fi.isIndexed()) {\n          bits |= Lucene46FieldInfosFormat.IS_INDEXED;\n          assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          if (indexOptions == IndexOptions.DOCS_ONLY) {\n            bits |= Lucene46FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n            bits |= Lucene46FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n            bits |= Lucene46FieldInfosFormat.OMIT_POSITIONS;\n          }\n        }\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType());\n        final byte nrm = docValuesByte(fi.getNormType());\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n        output.writeLong(fi.getDocValuesGen());\n        output.writeStringStringMap(fi.attributes());\n      }\n      success = true;\n    } finally {\n      if (success) {\n        output.close();\n      } else {\n        IOUtils.closeWhileHandlingException(output);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46FieldInfosWriter#write(Directory,String,String,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46FieldInfosWriter#write(Directory,String,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, Lucene46FieldInfosFormat.EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene46FieldInfosFormat.CODEC_NAME, Lucene46FieldInfosFormat.FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        IndexOptions indexOptions = fi.getIndexOptions();\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= Lucene46FieldInfosFormat.STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= Lucene46FieldInfosFormat.OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= Lucene46FieldInfosFormat.STORE_PAYLOADS;\n        if (fi.isIndexed()) {\n          bits |= Lucene46FieldInfosFormat.IS_INDEXED;\n          assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          if (indexOptions == IndexOptions.DOCS_ONLY) {\n            bits |= Lucene46FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n            bits |= Lucene46FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n            bits |= Lucene46FieldInfosFormat.OMIT_POSITIONS;\n          }\n        }\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType());\n        final byte nrm = docValuesByte(fi.getNormType());\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n        output.writeLong(fi.getDocValuesGen());\n        output.writeStringStringMap(fi.attributes());\n      }\n      CodecUtil.writeFooter(output);\n      success = true;\n    } finally {\n      if (success) {\n        output.close();\n      } else {\n        IOUtils.closeWhileHandlingException(output);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, Lucene46FieldInfosFormat.EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene46FieldInfosFormat.CODEC_NAME, Lucene46FieldInfosFormat.FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        IndexOptions indexOptions = fi.getIndexOptions();\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= Lucene46FieldInfosFormat.STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= Lucene46FieldInfosFormat.OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= Lucene46FieldInfosFormat.STORE_PAYLOADS;\n        if (fi.isIndexed()) {\n          bits |= Lucene46FieldInfosFormat.IS_INDEXED;\n          assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          if (indexOptions == IndexOptions.DOCS_ONLY) {\n            bits |= Lucene46FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n            bits |= Lucene46FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n            bits |= Lucene46FieldInfosFormat.OMIT_POSITIONS;\n          }\n        }\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType());\n        final byte nrm = docValuesByte(fi.getNormType());\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n        output.writeLong(fi.getDocValuesGen());\n        output.writeStringStringMap(fi.attributes());\n      }\n      success = true;\n    } finally {\n      if (success) {\n        output.close();\n      } else {\n        IOUtils.closeWhileHandlingException(output);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a70ce9bddc6f985feb8e5e182aebe20872328d4","date":1411172748,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46FieldInfosWriter#write(Directory,String,String,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46FieldInfosWriter#write(Directory,String,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, Lucene46FieldInfosFormat.EXTENSION);\n    try (IndexOutput output = directory.createOutput(fileName, context)) {\n      CodecUtil.writeHeader(output, Lucene46FieldInfosFormat.CODEC_NAME, Lucene46FieldInfosFormat.FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        IndexOptions indexOptions = fi.getIndexOptions();\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= Lucene46FieldInfosFormat.STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= Lucene46FieldInfosFormat.OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= Lucene46FieldInfosFormat.STORE_PAYLOADS;\n        if (fi.isIndexed()) {\n          bits |= Lucene46FieldInfosFormat.IS_INDEXED;\n          assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          if (indexOptions == IndexOptions.DOCS_ONLY) {\n            bits |= Lucene46FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n            bits |= Lucene46FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n            bits |= Lucene46FieldInfosFormat.OMIT_POSITIONS;\n          }\n        }\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType());\n        final byte nrm = docValuesByte(fi.getNormType());\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n        output.writeLong(fi.getDocValuesGen());\n        output.writeStringStringMap(fi.attributes());\n      }\n      CodecUtil.writeFooter(output);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, Lucene46FieldInfosFormat.EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene46FieldInfosFormat.CODEC_NAME, Lucene46FieldInfosFormat.FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        IndexOptions indexOptions = fi.getIndexOptions();\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= Lucene46FieldInfosFormat.STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= Lucene46FieldInfosFormat.OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= Lucene46FieldInfosFormat.STORE_PAYLOADS;\n        if (fi.isIndexed()) {\n          bits |= Lucene46FieldInfosFormat.IS_INDEXED;\n          assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          if (indexOptions == IndexOptions.DOCS_ONLY) {\n            bits |= Lucene46FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n            bits |= Lucene46FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n            bits |= Lucene46FieldInfosFormat.OMIT_POSITIONS;\n          }\n        }\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType());\n        final byte nrm = docValuesByte(fi.getNormType());\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n        output.writeLong(fi.getDocValuesGen());\n        output.writeStringStringMap(fi.attributes());\n      }\n      CodecUtil.writeFooter(output);\n      success = true;\n    } finally {\n      if (success) {\n        output.close();\n      } else {\n        IOUtils.closeWhileHandlingException(output);\n      }\n    }\n  }\n\n","bugFix":["29a18ef0e63118ffdd0b5a1f2e8781c9d72323d5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77d177b70aefca41f3edc910b0a703c76283d8b6","date":1411650976,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene46/Lucene46FieldInfosWriter#write(Directory,String,String,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46FieldInfosWriter#write(Directory,String,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, Lucene46FieldInfosFormat.EXTENSION);\n    try (IndexOutput output = directory.createOutput(fileName, context)) {\n      CodecUtil.writeHeader(output, Lucene46FieldInfosFormat.CODEC_NAME, Lucene46FieldInfosFormat.FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        IndexOptions indexOptions = fi.getIndexOptions();\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= Lucene46FieldInfosFormat.STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= Lucene46FieldInfosFormat.OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= Lucene46FieldInfosFormat.STORE_PAYLOADS;\n        if (fi.isIndexed()) {\n          bits |= Lucene46FieldInfosFormat.IS_INDEXED;\n          assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          if (indexOptions == IndexOptions.DOCS_ONLY) {\n            bits |= Lucene46FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n            bits |= Lucene46FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n            bits |= Lucene46FieldInfosFormat.OMIT_POSITIONS;\n          }\n        }\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType());\n        final byte nrm = docValuesByte(fi.getNormType());\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n        output.writeLong(fi.getDocValuesGen());\n        output.writeStringStringMap(fi.attributes());\n      }\n      CodecUtil.writeFooter(output);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, Lucene46FieldInfosFormat.EXTENSION);\n    try (IndexOutput output = directory.createOutput(fileName, context)) {\n      CodecUtil.writeHeader(output, Lucene46FieldInfosFormat.CODEC_NAME, Lucene46FieldInfosFormat.FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        IndexOptions indexOptions = fi.getIndexOptions();\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= Lucene46FieldInfosFormat.STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= Lucene46FieldInfosFormat.OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= Lucene46FieldInfosFormat.STORE_PAYLOADS;\n        if (fi.isIndexed()) {\n          bits |= Lucene46FieldInfosFormat.IS_INDEXED;\n          assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          if (indexOptions == IndexOptions.DOCS_ONLY) {\n            bits |= Lucene46FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n            bits |= Lucene46FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n            bits |= Lucene46FieldInfosFormat.OMIT_POSITIONS;\n          }\n        }\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType());\n        final byte nrm = docValuesByte(fi.getNormType());\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n        output.writeLong(fi.getDocValuesGen());\n        output.writeStringStringMap(fi.attributes());\n      }\n      CodecUtil.writeFooter(output);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f6bd27530a2846413fe2d00030493c0e2d3a072","date":1411811855,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene46/Lucene46FieldInfosWriter#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene46/Lucene46FieldInfosWriter#write(Directory,String,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, Lucene46FieldInfosFormat.EXTENSION);\n    try (IndexOutput output = directory.createOutput(fileName, context)) {\n      CodecUtil.writeHeader(output, Lucene46FieldInfosFormat.CODEC_NAME, Lucene46FieldInfosFormat.FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        IndexOptions indexOptions = fi.getIndexOptions();\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= Lucene46FieldInfosFormat.STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= Lucene46FieldInfosFormat.OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= Lucene46FieldInfosFormat.STORE_PAYLOADS;\n        if (fi.isIndexed()) {\n          bits |= Lucene46FieldInfosFormat.IS_INDEXED;\n          assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          if (indexOptions == IndexOptions.DOCS_ONLY) {\n            bits |= Lucene46FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n            bits |= Lucene46FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n            bits |= Lucene46FieldInfosFormat.OMIT_POSITIONS;\n          }\n        }\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType());\n        final byte nrm = docValuesByte(fi.getNormType());\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n        output.writeLong(fi.getDocValuesGen());\n        output.writeStringStringMap(fi.attributes());\n      }\n      CodecUtil.writeFooter(output);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, Lucene46FieldInfosFormat.EXTENSION);\n    try (IndexOutput output = directory.createOutput(fileName, context)) {\n      CodecUtil.writeHeader(output, Lucene46FieldInfosFormat.CODEC_NAME, Lucene46FieldInfosFormat.FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        IndexOptions indexOptions = fi.getIndexOptions();\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= Lucene46FieldInfosFormat.STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= Lucene46FieldInfosFormat.OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= Lucene46FieldInfosFormat.STORE_PAYLOADS;\n        if (fi.isIndexed()) {\n          bits |= Lucene46FieldInfosFormat.IS_INDEXED;\n          assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          if (indexOptions == IndexOptions.DOCS_ONLY) {\n            bits |= Lucene46FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n            bits |= Lucene46FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n            bits |= Lucene46FieldInfosFormat.OMIT_POSITIONS;\n          }\n        }\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType());\n        final byte nrm = docValuesByte(fi.getNormType());\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n        output.writeLong(fi.getDocValuesGen());\n        output.writeStringStringMap(fi.attributes());\n      }\n      CodecUtil.writeFooter(output);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["8435160e9702b19398118ddf76b61c846612b6a4","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["8435160e9702b19398118ddf76b61c846612b6a4"],"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"77d177b70aefca41f3edc910b0a703c76283d8b6":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["9a70ce9bddc6f985feb8e5e182aebe20872328d4","77d177b70aefca41f3edc910b0a703c76283d8b6"],"8435160e9702b19398118ddf76b61c846612b6a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5f6bd27530a2846413fe2d00030493c0e2d3a072"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["5eb2511ababf862ea11e10761c70ee560cd84510","9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["77d177b70aefca41f3edc910b0a703c76283d8b6","5f6bd27530a2846413fe2d00030493c0e2d3a072"],"77d177b70aefca41f3edc910b0a703c76283d8b6":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8435160e9702b19398118ddf76b61c846612b6a4"],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8435160e9702b19398118ddf76b61c846612b6a4":["5eb2511ababf862ea11e10761c70ee560cd84510","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}