{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testStarParsing().mjava","commits":[{"id":"ee76d213d935c68932ca13b55fa0a8a32bf6af1a","date":1343572717,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testStarParsing().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)) {\n      @Override\n      protected Query getWildcardQuery(String field, String termStr) {\n        // override error checking of superclass\n        type[0] = 1;\n        return new TermQuery(new Term(field, termStr));\n      }\n      \n      @Override\n      protected Query getPrefixQuery(String field, String termStr) {\n        // override error checking of superclass\n        type[0] = 2;\n        return new TermQuery(new Term(field, termStr));\n      }\n      \n      @Override\n      protected Query getFieldQuery(String field, String queryText,\n          boolean quoted) throws ParseException {\n        type[0] = 3;\n        return super.getFieldQuery(field, queryText, quoted);\n      }\n    };\n    \n    TermQuery tq;\n    \n    tq = (TermQuery) qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\", tq.getTerm().text());\n    assertEquals(2, type[0]);\n    \n    tq = (TermQuery) qp.parse(\"foo:zoo*^2\");\n    assertEquals(\"zoo\", tq.getTerm().text());\n    assertEquals(2, type[0]);\n    assertEquals(tq.getBoost(), 2, 0);\n    \n    tq = (TermQuery) qp.parse(\"foo:*\");\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]); // could be a valid prefix query in the future too\n    \n    tq = (TermQuery) qp.parse(\"foo:*^2\");\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]);\n    assertEquals(tq.getBoost(), 2, 0);\n    \n    tq = (TermQuery) qp.parse(\"*:foo\");\n    assertEquals(\"*\", tq.getTerm().field());\n    assertEquals(\"foo\", tq.getTerm().text());\n    assertEquals(3, type[0]);\n    \n    tq = (TermQuery) qp.parse(\"*:*\");\n    assertEquals(\"*\", tq.getTerm().field());\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]); // could be handled as a prefix query in the\n                              // future\n    \n    tq = (TermQuery) qp.parse(\"(*:*)\");\n    assertEquals(\"*\", tq.getTerm().field());\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]);\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testStarParsing().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)) {\n      @Override\n      protected Query getWildcardQuery(String field, String termStr) {\n        // override error checking of superclass\n        type[0] = 1;\n        return new TermQuery(new Term(field, termStr));\n      }\n      \n      @Override\n      protected Query getPrefixQuery(String field, String termStr) {\n        // override error checking of superclass\n        type[0] = 2;\n        return new TermQuery(new Term(field, termStr));\n      }\n      \n      @Override\n      protected Query getFieldQuery(String field, String queryText,\n          boolean quoted) throws ParseException {\n        type[0] = 3;\n        return super.getFieldQuery(field, queryText, quoted);\n      }\n    };\n    \n    TermQuery tq;\n    \n    tq = (TermQuery) qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\", tq.getTerm().text());\n    assertEquals(2, type[0]);\n    \n    tq = (TermQuery) qp.parse(\"foo:zoo*^2\");\n    assertEquals(\"zoo\", tq.getTerm().text());\n    assertEquals(2, type[0]);\n    assertEquals(tq.getBoost(), 2, 0);\n    \n    tq = (TermQuery) qp.parse(\"foo:*\");\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]); // could be a valid prefix query in the future too\n    \n    tq = (TermQuery) qp.parse(\"foo:*^2\");\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]);\n    assertEquals(tq.getBoost(), 2, 0);\n    \n    tq = (TermQuery) qp.parse(\"*:foo\");\n    assertEquals(\"*\", tq.getTerm().field());\n    assertEquals(\"foo\", tq.getTerm().text());\n    assertEquals(3, type[0]);\n    \n    tq = (TermQuery) qp.parse(\"*:*\");\n    assertEquals(\"*\", tq.getTerm().field());\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]); // could be handled as a prefix query in the\n                              // future\n    \n    tq = (TermQuery) qp.parse(\"(*:*)\");\n    assertEquals(\"*\", tq.getTerm().field());\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]);\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testStarParsing().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)) {\n      @Override\n      protected Query getWildcardQuery(String field, String termStr) {\n        // override error checking of superclass\n        type[0] = 1;\n        return new TermQuery(new Term(field, termStr));\n      }\n      \n      @Override\n      protected Query getPrefixQuery(String field, String termStr) {\n        // override error checking of superclass\n        type[0] = 2;\n        return new TermQuery(new Term(field, termStr));\n      }\n      \n      @Override\n      protected Query getFieldQuery(String field, String queryText,\n          boolean quoted) throws ParseException {\n        type[0] = 3;\n        return super.getFieldQuery(field, queryText, quoted);\n      }\n    };\n    \n    TermQuery tq;\n    \n    tq = (TermQuery) qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\", tq.getTerm().text());\n    assertEquals(2, type[0]);\n    \n    tq = (TermQuery) qp.parse(\"foo:zoo*^2\");\n    assertEquals(\"zoo\", tq.getTerm().text());\n    assertEquals(2, type[0]);\n    assertEquals(tq.getBoost(), 2, 0);\n    \n    tq = (TermQuery) qp.parse(\"foo:*\");\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]); // could be a valid prefix query in the future too\n    \n    tq = (TermQuery) qp.parse(\"foo:*^2\");\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]);\n    assertEquals(tq.getBoost(), 2, 0);\n    \n    tq = (TermQuery) qp.parse(\"*:foo\");\n    assertEquals(\"*\", tq.getTerm().field());\n    assertEquals(\"foo\", tq.getTerm().text());\n    assertEquals(3, type[0]);\n    \n    tq = (TermQuery) qp.parse(\"*:*\");\n    assertEquals(\"*\", tq.getTerm().field());\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]); // could be handled as a prefix query in the\n                              // future\n    \n    tq = (TermQuery) qp.parse(\"(*:*)\");\n    assertEquals(\"*\", tq.getTerm().field());\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]);\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testStarParsing().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testStarParsing().mjava","sourceNew":"  @Override\n  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(\"field\",\n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)) {\n      @Override\n      protected Query getWildcardQuery(String field, String termStr) {\n        // override error checking of superclass\n        type[0] = 1;\n        return new TermQuery(new Term(field, termStr));\n      }\n      \n      @Override\n      protected Query getPrefixQuery(String field, String termStr) {\n        // override error checking of superclass\n        type[0] = 2;\n        return new TermQuery(new Term(field, termStr));\n      }\n      \n      @Override\n      protected Query getFieldQuery(String field, String queryText,\n          boolean quoted) throws ParseException {\n        type[0] = 3;\n        return super.getFieldQuery(field, queryText, quoted);\n      }\n    };\n    \n    TermQuery tq;\n    \n    tq = (TermQuery) qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\", tq.getTerm().text());\n    assertEquals(2, type[0]);\n    \n    tq = (TermQuery) qp.parse(\"foo:zoo*^2\");\n    assertEquals(\"zoo\", tq.getTerm().text());\n    assertEquals(2, type[0]);\n    assertEquals(tq.getBoost(), 2, 0);\n    \n    tq = (TermQuery) qp.parse(\"foo:*\");\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]); // could be a valid prefix query in the future too\n    \n    tq = (TermQuery) qp.parse(\"foo:*^2\");\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]);\n    assertEquals(tq.getBoost(), 2, 0);\n    \n    tq = (TermQuery) qp.parse(\"*:foo\");\n    assertEquals(\"*\", tq.getTerm().field());\n    assertEquals(\"foo\", tq.getTerm().text());\n    assertEquals(3, type[0]);\n    \n    tq = (TermQuery) qp.parse(\"*:*\");\n    assertEquals(\"*\", tq.getTerm().field());\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]); // could be handled as a prefix query in the\n                              // future\n    \n    tq = (TermQuery) qp.parse(\"(*:*)\");\n    assertEquals(\"*\", tq.getTerm().field());\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]);\n    \n  }\n\n","sourceOld":"  @Override\n  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)) {\n      @Override\n      protected Query getWildcardQuery(String field, String termStr) {\n        // override error checking of superclass\n        type[0] = 1;\n        return new TermQuery(new Term(field, termStr));\n      }\n      \n      @Override\n      protected Query getPrefixQuery(String field, String termStr) {\n        // override error checking of superclass\n        type[0] = 2;\n        return new TermQuery(new Term(field, termStr));\n      }\n      \n      @Override\n      protected Query getFieldQuery(String field, String queryText,\n          boolean quoted) throws ParseException {\n        type[0] = 3;\n        return super.getFieldQuery(field, queryText, quoted);\n      }\n    };\n    \n    TermQuery tq;\n    \n    tq = (TermQuery) qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\", tq.getTerm().text());\n    assertEquals(2, type[0]);\n    \n    tq = (TermQuery) qp.parse(\"foo:zoo*^2\");\n    assertEquals(\"zoo\", tq.getTerm().text());\n    assertEquals(2, type[0]);\n    assertEquals(tq.getBoost(), 2, 0);\n    \n    tq = (TermQuery) qp.parse(\"foo:*\");\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]); // could be a valid prefix query in the future too\n    \n    tq = (TermQuery) qp.parse(\"foo:*^2\");\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]);\n    assertEquals(tq.getBoost(), 2, 0);\n    \n    tq = (TermQuery) qp.parse(\"*:foo\");\n    assertEquals(\"*\", tq.getTerm().field());\n    assertEquals(\"foo\", tq.getTerm().text());\n    assertEquals(3, type[0]);\n    \n    tq = (TermQuery) qp.parse(\"*:*\");\n    assertEquals(\"*\", tq.getTerm().field());\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]); // could be handled as a prefix query in the\n                              // future\n    \n    tq = (TermQuery) qp.parse(\"(*:*)\");\n    assertEquals(\"*\", tq.getTerm().field());\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testStarParsing().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testStarParsing().mjava","sourceNew":"  @Override\n  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)) {\n      @Override\n      protected Query getWildcardQuery(String field, String termStr) {\n        // override error checking of superclass\n        type[0] = 1;\n        return new TermQuery(new Term(field, termStr));\n      }\n      \n      @Override\n      protected Query getPrefixQuery(String field, String termStr) {\n        // override error checking of superclass\n        type[0] = 2;\n        return new TermQuery(new Term(field, termStr));\n      }\n      \n      @Override\n      protected Query getFieldQuery(String field, String queryText,\n          boolean quoted) throws ParseException {\n        type[0] = 3;\n        return super.getFieldQuery(field, queryText, quoted);\n      }\n    };\n    \n    TermQuery tq;\n    \n    tq = (TermQuery) qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\", tq.getTerm().text());\n    assertEquals(2, type[0]);\n    \n    tq = (TermQuery) qp.parse(\"foo:zoo*^2\");\n    assertEquals(\"zoo\", tq.getTerm().text());\n    assertEquals(2, type[0]);\n    assertEquals(tq.getBoost(), 2, 0);\n    \n    tq = (TermQuery) qp.parse(\"foo:*\");\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]); // could be a valid prefix query in the future too\n    \n    tq = (TermQuery) qp.parse(\"foo:*^2\");\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]);\n    assertEquals(tq.getBoost(), 2, 0);\n    \n    tq = (TermQuery) qp.parse(\"*:foo\");\n    assertEquals(\"*\", tq.getTerm().field());\n    assertEquals(\"foo\", tq.getTerm().text());\n    assertEquals(3, type[0]);\n    \n    tq = (TermQuery) qp.parse(\"*:*\");\n    assertEquals(\"*\", tq.getTerm().field());\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]); // could be handled as a prefix query in the\n                              // future\n    \n    tq = (TermQuery) qp.parse(\"(*:*)\");\n    assertEquals(\"*\", tq.getTerm().field());\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]);\n    \n  }\n\n","sourceOld":"  @Override\n  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(\"field\",\n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)) {\n      @Override\n      protected Query getWildcardQuery(String field, String termStr) {\n        // override error checking of superclass\n        type[0] = 1;\n        return new TermQuery(new Term(field, termStr));\n      }\n      \n      @Override\n      protected Query getPrefixQuery(String field, String termStr) {\n        // override error checking of superclass\n        type[0] = 2;\n        return new TermQuery(new Term(field, termStr));\n      }\n      \n      @Override\n      protected Query getFieldQuery(String field, String queryText,\n          boolean quoted) throws ParseException {\n        type[0] = 3;\n        return super.getFieldQuery(field, queryText, quoted);\n      }\n    };\n    \n    TermQuery tq;\n    \n    tq = (TermQuery) qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\", tq.getTerm().text());\n    assertEquals(2, type[0]);\n    \n    tq = (TermQuery) qp.parse(\"foo:zoo*^2\");\n    assertEquals(\"zoo\", tq.getTerm().text());\n    assertEquals(2, type[0]);\n    assertEquals(tq.getBoost(), 2, 0);\n    \n    tq = (TermQuery) qp.parse(\"foo:*\");\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]); // could be a valid prefix query in the future too\n    \n    tq = (TermQuery) qp.parse(\"foo:*^2\");\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]);\n    assertEquals(tq.getBoost(), 2, 0);\n    \n    tq = (TermQuery) qp.parse(\"*:foo\");\n    assertEquals(\"*\", tq.getTerm().field());\n    assertEquals(\"foo\", tq.getTerm().text());\n    assertEquals(3, type[0]);\n    \n    tq = (TermQuery) qp.parse(\"*:*\");\n    assertEquals(\"*\", tq.getTerm().field());\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]); // could be handled as a prefix query in the\n                              // future\n    \n    tq = (TermQuery) qp.parse(\"(*:*)\");\n    assertEquals(\"*\", tq.getTerm().field());\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testStarParsing().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testStarParsing().mjava","sourceNew":"  @Override\n  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(\"field\",\n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)) {\n      @Override\n      protected Query getWildcardQuery(String field, String termStr) {\n        // override error checking of superclass\n        type[0] = 1;\n        return new TermQuery(new Term(field, termStr));\n      }\n      \n      @Override\n      protected Query getPrefixQuery(String field, String termStr) {\n        // override error checking of superclass\n        type[0] = 2;\n        return new TermQuery(new Term(field, termStr));\n      }\n      \n      @Override\n      protected Query getFieldQuery(String field, String queryText,\n          boolean quoted) throws ParseException {\n        type[0] = 3;\n        return super.getFieldQuery(field, queryText, quoted);\n      }\n    };\n    \n    TermQuery tq;\n    \n    tq = (TermQuery) qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\", tq.getTerm().text());\n    assertEquals(2, type[0]);\n    \n    tq = (TermQuery) qp.parse(\"foo:zoo*^2\");\n    assertEquals(\"zoo\", tq.getTerm().text());\n    assertEquals(2, type[0]);\n    assertEquals(tq.getBoost(), 2, 0);\n    \n    tq = (TermQuery) qp.parse(\"foo:*\");\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]); // could be a valid prefix query in the future too\n    \n    tq = (TermQuery) qp.parse(\"foo:*^2\");\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]);\n    assertEquals(tq.getBoost(), 2, 0);\n    \n    tq = (TermQuery) qp.parse(\"*:foo\");\n    assertEquals(\"*\", tq.getTerm().field());\n    assertEquals(\"foo\", tq.getTerm().text());\n    assertEquals(3, type[0]);\n    \n    tq = (TermQuery) qp.parse(\"*:*\");\n    assertEquals(\"*\", tq.getTerm().field());\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]); // could be handled as a prefix query in the\n                              // future\n    \n    tq = (TermQuery) qp.parse(\"(*:*)\");\n    assertEquals(\"*\", tq.getTerm().field());\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]);\n    \n  }\n\n","sourceOld":"  @Override\n  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)) {\n      @Override\n      protected Query getWildcardQuery(String field, String termStr) {\n        // override error checking of superclass\n        type[0] = 1;\n        return new TermQuery(new Term(field, termStr));\n      }\n      \n      @Override\n      protected Query getPrefixQuery(String field, String termStr) {\n        // override error checking of superclass\n        type[0] = 2;\n        return new TermQuery(new Term(field, termStr));\n      }\n      \n      @Override\n      protected Query getFieldQuery(String field, String queryText,\n          boolean quoted) throws ParseException {\n        type[0] = 3;\n        return super.getFieldQuery(field, queryText, quoted);\n      }\n    };\n    \n    TermQuery tq;\n    \n    tq = (TermQuery) qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\", tq.getTerm().text());\n    assertEquals(2, type[0]);\n    \n    tq = (TermQuery) qp.parse(\"foo:zoo*^2\");\n    assertEquals(\"zoo\", tq.getTerm().text());\n    assertEquals(2, type[0]);\n    assertEquals(tq.getBoost(), 2, 0);\n    \n    tq = (TermQuery) qp.parse(\"foo:*\");\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]); // could be a valid prefix query in the future too\n    \n    tq = (TermQuery) qp.parse(\"foo:*^2\");\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]);\n    assertEquals(tq.getBoost(), 2, 0);\n    \n    tq = (TermQuery) qp.parse(\"*:foo\");\n    assertEquals(\"*\", tq.getTerm().field());\n    assertEquals(\"foo\", tq.getTerm().text());\n    assertEquals(3, type[0]);\n    \n    tq = (TermQuery) qp.parse(\"*:*\");\n    assertEquals(\"*\", tq.getTerm().field());\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]); // could be handled as a prefix query in the\n                              // future\n    \n    tq = (TermQuery) qp.parse(\"(*:*)\");\n    assertEquals(\"*\", tq.getTerm().field());\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testStarParsing().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testStarParsing().mjava","sourceNew":"  @Override\n  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(\"field\",\n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)) {\n      @Override\n      protected Query getWildcardQuery(String field, String termStr) {\n        // override error checking of superclass\n        type[0] = 1;\n        return new TermQuery(new Term(field, termStr));\n      }\n      \n      @Override\n      protected Query getPrefixQuery(String field, String termStr) {\n        // override error checking of superclass\n        type[0] = 2;\n        return new TermQuery(new Term(field, termStr));\n      }\n      \n      @Override\n      protected Query getFieldQuery(String field, String queryText,\n          boolean quoted) throws ParseException {\n        type[0] = 3;\n        return super.getFieldQuery(field, queryText, quoted);\n      }\n    };\n    \n    TermQuery tq;\n    \n    tq = (TermQuery) qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\", tq.getTerm().text());\n    assertEquals(2, type[0]);\n\n    BoostQuery bq = (BoostQuery) qp.parse(\"foo:zoo*^2\");\n    tq = (TermQuery) bq.getQuery();\n    assertEquals(\"zoo\", tq.getTerm().text());\n    assertEquals(2, type[0]);\n    assertEquals(bq.getBoost(), 2, 0);\n    \n    tq = (TermQuery) qp.parse(\"foo:*\");\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]); // could be a valid prefix query in the future too\n    \n    bq = (BoostQuery) qp.parse(\"foo:*^2\");\n    tq = (TermQuery) bq.getQuery();\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]);\n    assertEquals(bq.getBoost(), 2, 0);\n    \n    tq = (TermQuery) qp.parse(\"*:foo\");\n    assertEquals(\"*\", tq.getTerm().field());\n    assertEquals(\"foo\", tq.getTerm().text());\n    assertEquals(3, type[0]);\n    \n    tq = (TermQuery) qp.parse(\"*:*\");\n    assertEquals(\"*\", tq.getTerm().field());\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]); // could be handled as a prefix query in the\n                              // future\n    \n    tq = (TermQuery) qp.parse(\"(*:*)\");\n    assertEquals(\"*\", tq.getTerm().field());\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]);\n    \n  }\n\n","sourceOld":"  @Override\n  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(\"field\",\n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)) {\n      @Override\n      protected Query getWildcardQuery(String field, String termStr) {\n        // override error checking of superclass\n        type[0] = 1;\n        return new TermQuery(new Term(field, termStr));\n      }\n      \n      @Override\n      protected Query getPrefixQuery(String field, String termStr) {\n        // override error checking of superclass\n        type[0] = 2;\n        return new TermQuery(new Term(field, termStr));\n      }\n      \n      @Override\n      protected Query getFieldQuery(String field, String queryText,\n          boolean quoted) throws ParseException {\n        type[0] = 3;\n        return super.getFieldQuery(field, queryText, quoted);\n      }\n    };\n    \n    TermQuery tq;\n    \n    tq = (TermQuery) qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\", tq.getTerm().text());\n    assertEquals(2, type[0]);\n    \n    tq = (TermQuery) qp.parse(\"foo:zoo*^2\");\n    assertEquals(\"zoo\", tq.getTerm().text());\n    assertEquals(2, type[0]);\n    assertEquals(tq.getBoost(), 2, 0);\n    \n    tq = (TermQuery) qp.parse(\"foo:*\");\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]); // could be a valid prefix query in the future too\n    \n    tq = (TermQuery) qp.parse(\"foo:*^2\");\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]);\n    assertEquals(tq.getBoost(), 2, 0);\n    \n    tq = (TermQuery) qp.parse(\"*:foo\");\n    assertEquals(\"*\", tq.getTerm().field());\n    assertEquals(\"foo\", tq.getTerm().text());\n    assertEquals(3, type[0]);\n    \n    tq = (TermQuery) qp.parse(\"*:*\");\n    assertEquals(\"*\", tq.getTerm().field());\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]); // could be handled as a prefix query in the\n                              // future\n    \n    tq = (TermQuery) qp.parse(\"(*:*)\");\n    assertEquals(\"*\", tq.getTerm().field());\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea4107f60b9f95623c16025c9c247412ff809092","date":1468333987,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testStarParsing().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testStarParsing().mjava","sourceNew":"  @Override\n  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(FIELD,\n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)) {\n      @Override\n      protected Query getWildcardQuery(String field, String termStr) {\n        // override error checking of superclass\n        type[0] = 1;\n        return new TermQuery(new Term(field, termStr));\n      }\n      \n      @Override\n      protected Query getPrefixQuery(String field, String termStr) {\n        // override error checking of superclass\n        type[0] = 2;\n        return new TermQuery(new Term(field, termStr));\n      }\n      \n      @Override\n      protected Query getFieldQuery(String field, String queryText,\n          boolean quoted) throws ParseException {\n        type[0] = 3;\n        return super.getFieldQuery(field, queryText, quoted);\n      }\n    };\n    \n    TermQuery tq;\n    \n    tq = (TermQuery) qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\", tq.getTerm().text());\n    assertEquals(2, type[0]);\n\n    BoostQuery bq = (BoostQuery) qp.parse(\"foo:zoo*^2\");\n    tq = (TermQuery) bq.getQuery();\n    assertEquals(\"zoo\", tq.getTerm().text());\n    assertEquals(2, type[0]);\n    assertEquals(bq.getBoost(), 2, 0);\n    \n    tq = (TermQuery) qp.parse(\"foo:*\");\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]); // could be a valid prefix query in the future too\n    \n    bq = (BoostQuery) qp.parse(\"foo:*^2\");\n    tq = (TermQuery) bq.getQuery();\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]);\n    assertEquals(bq.getBoost(), 2, 0);\n    \n    tq = (TermQuery) qp.parse(\"*:foo\");\n    assertEquals(\"*\", tq.getTerm().field());\n    assertEquals(\"foo\", tq.getTerm().text());\n    assertEquals(3, type[0]);\n    \n    tq = (TermQuery) qp.parse(\"*:*\");\n    assertEquals(\"*\", tq.getTerm().field());\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]); // could be handled as a prefix query in the\n                              // future\n    \n    tq = (TermQuery) qp.parse(\"(*:*)\");\n    assertEquals(\"*\", tq.getTerm().field());\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]);\n    \n  }\n\n","sourceOld":"  @Override\n  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(\"field\",\n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)) {\n      @Override\n      protected Query getWildcardQuery(String field, String termStr) {\n        // override error checking of superclass\n        type[0] = 1;\n        return new TermQuery(new Term(field, termStr));\n      }\n      \n      @Override\n      protected Query getPrefixQuery(String field, String termStr) {\n        // override error checking of superclass\n        type[0] = 2;\n        return new TermQuery(new Term(field, termStr));\n      }\n      \n      @Override\n      protected Query getFieldQuery(String field, String queryText,\n          boolean quoted) throws ParseException {\n        type[0] = 3;\n        return super.getFieldQuery(field, queryText, quoted);\n      }\n    };\n    \n    TermQuery tq;\n    \n    tq = (TermQuery) qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\", tq.getTerm().text());\n    assertEquals(2, type[0]);\n\n    BoostQuery bq = (BoostQuery) qp.parse(\"foo:zoo*^2\");\n    tq = (TermQuery) bq.getQuery();\n    assertEquals(\"zoo\", tq.getTerm().text());\n    assertEquals(2, type[0]);\n    assertEquals(bq.getBoost(), 2, 0);\n    \n    tq = (TermQuery) qp.parse(\"foo:*\");\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]); // could be a valid prefix query in the future too\n    \n    bq = (BoostQuery) qp.parse(\"foo:*^2\");\n    tq = (TermQuery) bq.getQuery();\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]);\n    assertEquals(bq.getBoost(), 2, 0);\n    \n    tq = (TermQuery) qp.parse(\"*:foo\");\n    assertEquals(\"*\", tq.getTerm().field());\n    assertEquals(\"foo\", tq.getTerm().text());\n    assertEquals(3, type[0]);\n    \n    tq = (TermQuery) qp.parse(\"*:*\");\n    assertEquals(\"*\", tq.getTerm().field());\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]); // could be handled as a prefix query in the\n                              // future\n    \n    tq = (TermQuery) qp.parse(\"(*:*)\");\n    assertEquals(\"*\", tq.getTerm().field());\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testStarParsing().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testStarParsing().mjava","sourceNew":"  @Override\n  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(FIELD,\n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)) {\n      @Override\n      protected Query getWildcardQuery(String field, String termStr) {\n        // override error checking of superclass\n        type[0] = 1;\n        return new TermQuery(new Term(field, termStr));\n      }\n      \n      @Override\n      protected Query getPrefixQuery(String field, String termStr) {\n        // override error checking of superclass\n        type[0] = 2;\n        return new TermQuery(new Term(field, termStr));\n      }\n      \n      @Override\n      protected Query getFieldQuery(String field, String queryText,\n          boolean quoted) throws ParseException {\n        type[0] = 3;\n        return super.getFieldQuery(field, queryText, quoted);\n      }\n    };\n    \n    TermQuery tq;\n    \n    tq = (TermQuery) qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\", tq.getTerm().text());\n    assertEquals(2, type[0]);\n\n    BoostQuery bq = (BoostQuery) qp.parse(\"foo:zoo*^2\");\n    tq = (TermQuery) bq.getQuery();\n    assertEquals(\"zoo\", tq.getTerm().text());\n    assertEquals(2, type[0]);\n    assertEquals(bq.getBoost(), 2, 0);\n    \n    tq = (TermQuery) qp.parse(\"foo:*\");\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]); // could be a valid prefix query in the future too\n    \n    bq = (BoostQuery) qp.parse(\"foo:*^2\");\n    tq = (TermQuery) bq.getQuery();\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]);\n    assertEquals(bq.getBoost(), 2, 0);\n    \n    tq = (TermQuery) qp.parse(\"*:foo\");\n    assertEquals(\"*\", tq.getTerm().field());\n    assertEquals(\"foo\", tq.getTerm().text());\n    assertEquals(3, type[0]);\n    \n    tq = (TermQuery) qp.parse(\"*:*\");\n    assertEquals(\"*\", tq.getTerm().field());\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]); // could be handled as a prefix query in the\n                              // future\n    \n    tq = (TermQuery) qp.parse(\"(*:*)\");\n    assertEquals(\"*\", tq.getTerm().field());\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]);\n    \n  }\n\n","sourceOld":"  @Override\n  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(\"field\",\n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)) {\n      @Override\n      protected Query getWildcardQuery(String field, String termStr) {\n        // override error checking of superclass\n        type[0] = 1;\n        return new TermQuery(new Term(field, termStr));\n      }\n      \n      @Override\n      protected Query getPrefixQuery(String field, String termStr) {\n        // override error checking of superclass\n        type[0] = 2;\n        return new TermQuery(new Term(field, termStr));\n      }\n      \n      @Override\n      protected Query getFieldQuery(String field, String queryText,\n          boolean quoted) throws ParseException {\n        type[0] = 3;\n        return super.getFieldQuery(field, queryText, quoted);\n      }\n    };\n    \n    TermQuery tq;\n    \n    tq = (TermQuery) qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\", tq.getTerm().text());\n    assertEquals(2, type[0]);\n\n    BoostQuery bq = (BoostQuery) qp.parse(\"foo:zoo*^2\");\n    tq = (TermQuery) bq.getQuery();\n    assertEquals(\"zoo\", tq.getTerm().text());\n    assertEquals(2, type[0]);\n    assertEquals(bq.getBoost(), 2, 0);\n    \n    tq = (TermQuery) qp.parse(\"foo:*\");\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]); // could be a valid prefix query in the future too\n    \n    bq = (BoostQuery) qp.parse(\"foo:*^2\");\n    tq = (TermQuery) bq.getQuery();\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]);\n    assertEquals(bq.getBoost(), 2, 0);\n    \n    tq = (TermQuery) qp.parse(\"*:foo\");\n    assertEquals(\"*\", tq.getTerm().field());\n    assertEquals(\"foo\", tq.getTerm().text());\n    assertEquals(3, type[0]);\n    \n    tq = (TermQuery) qp.parse(\"*:*\");\n    assertEquals(\"*\", tq.getTerm().field());\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]); // could be handled as a prefix query in the\n                              // future\n    \n    tq = (TermQuery) qp.parse(\"(*:*)\");\n    assertEquals(\"*\", tq.getTerm().field());\n    assertEquals(\"*\", tq.getTerm().text());\n    assertEquals(1, type[0]);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ee76d213d935c68932ca13b55fa0a8a32bf6af1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ff4227bb146f97aabae888091c19e48c88dbb0db":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"ea4107f60b9f95623c16025c9c247412ff809092":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2dfdf766e55e943d942055d7de53c7ad6bc45283","ea4107f60b9f95623c16025c9c247412ff809092"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ea4107f60b9f95623c16025c9c247412ff809092"]},"commit2Childs":{"ee76d213d935c68932ca13b55fa0a8a32bf6af1a":["ff4227bb146f97aabae888091c19e48c88dbb0db","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["ea4107f60b9f95623c16025c9c247412ff809092","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"ea4107f60b9f95623c16025c9c247412ff809092":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}