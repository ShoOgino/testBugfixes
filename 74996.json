{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitForNewShard(String,String).mjava","commits":[{"id":"4ddb837927b3de29503b68a05fec256665edab50","date":1400760638,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitForNewShard(String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void waitForNewShard(String collectionName, String sliceName) throws KeeperException, InterruptedException {\n    log.info(\"Waiting for slice {} of collection {} to be available\", sliceName, collectionName);\n    long startTime = System.currentTimeMillis();\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Unable to find collection: \" + collectionName + \" in clusterstate\");\n      }\n      Slice slice = collection.getSlice(sliceName);\n      if (slice != null) {\n        log.info(\"Waited for {} seconds for slice {} of collection {} to be available\",\n            (System.currentTimeMillis() - startTime) / 1000, sliceName, collectionName);\n        return;\n      }\n      Thread.sleep(1000);\n      zkStateReader.updateClusterState(true);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not find new slice \" + sliceName + \" in collection \" + collectionName\n            + \" even after waiting for \" + (System.currentTimeMillis() - startTime) / 1000 + \" seconds\"\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1498cb4cd65cf2303ccde0e0d6edf5a5e1e8fd28","1498cb4cd65cf2303ccde0e0d6edf5a5e1e8fd28"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"102da6baafc0f534a59f31729343dbab9d3b9e9a","date":1438410244,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitForNewShard(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitForNewShard(String,String).mjava","sourceNew":"  private void waitForNewShard(String collectionName, String sliceName) throws KeeperException, InterruptedException {\n    log.info(\"Waiting for slice {} of collection {} to be available\", sliceName, collectionName);\n    long startTime = System.currentTimeMillis();\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Unable to find collection: \" + collectionName + \" in clusterstate\");\n      }\n      Slice slice = collection.getSlice(sliceName);\n      if (slice != null) {\n        log.info(\"Waited for {} seconds for slice {} of collection {} to be available\",\n            (System.currentTimeMillis() - startTime) / 1000, sliceName, collectionName);\n        return;\n      }\n      Thread.sleep(1000);\n      zkStateReader.updateClusterState();\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not find new slice \" + sliceName + \" in collection \" + collectionName\n            + \" even after waiting for \" + (System.currentTimeMillis() - startTime) / 1000 + \" seconds\"\n    );\n  }\n\n","sourceOld":"  private void waitForNewShard(String collectionName, String sliceName) throws KeeperException, InterruptedException {\n    log.info(\"Waiting for slice {} of collection {} to be available\", sliceName, collectionName);\n    long startTime = System.currentTimeMillis();\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Unable to find collection: \" + collectionName + \" in clusterstate\");\n      }\n      Slice slice = collection.getSlice(sliceName);\n      if (slice != null) {\n        log.info(\"Waited for {} seconds for slice {} of collection {} to be available\",\n            (System.currentTimeMillis() - startTime) / 1000, sliceName, collectionName);\n        return;\n      }\n      Thread.sleep(1000);\n      zkStateReader.updateClusterState(true);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not find new slice \" + sliceName + \" in collection \" + collectionName\n            + \" even after waiting for \" + (System.currentTimeMillis() - startTime) / 1000 + \" seconds\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":5,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForNewShard(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitForNewShard(String,String).mjava","sourceNew":"  private void waitForNewShard(String collectionName, String sliceName) throws KeeperException, InterruptedException {\n    log.info(\"Waiting for slice {} of collection {} to be available\", sliceName, collectionName);\n    long startTime = System.currentTimeMillis();\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Unable to find collection: \" + collectionName + \" in clusterstate\");\n      }\n      Slice slice = collection.getSlice(sliceName);\n      if (slice != null) {\n        log.info(\"Waited for {} seconds for slice {} of collection {} to be available\",\n            (System.currentTimeMillis() - startTime) / 1000, sliceName, collectionName);\n        return;\n      }\n      Thread.sleep(1000);\n      zkStateReader.updateClusterState();\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not find new slice \" + sliceName + \" in collection \" + collectionName\n            + \" even after waiting for \" + (System.currentTimeMillis() - startTime) / 1000 + \" seconds\"\n    );\n  }\n\n","sourceOld":"  private void waitForNewShard(String collectionName, String sliceName) throws KeeperException, InterruptedException {\n    log.info(\"Waiting for slice {} of collection {} to be available\", sliceName, collectionName);\n    long startTime = System.currentTimeMillis();\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Unable to find collection: \" + collectionName + \" in clusterstate\");\n      }\n      Slice slice = collection.getSlice(sliceName);\n      if (slice != null) {\n        log.info(\"Waited for {} seconds for slice {} of collection {} to be available\",\n            (System.currentTimeMillis() - startTime) / 1000, sliceName, collectionName);\n        return;\n      }\n      Thread.sleep(1000);\n      zkStateReader.updateClusterState();\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not find new slice \" + sliceName + \" in collection \" + collectionName\n            + \" even after waiting for \" + (System.currentTimeMillis() - startTime) / 1000 + \" seconds\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"4ddb837927b3de29503b68a05fec256665edab50":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["4ddb837927b3de29503b68a05fec256665edab50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"]},"commit2Childs":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ddb837927b3de29503b68a05fec256665edab50":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ddb837927b3de29503b68a05fec256665edab50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}