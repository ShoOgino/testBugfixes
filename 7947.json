{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#dumpResults(String,Query,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#dumpResults(String,Query,int).mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#dumpResults(String,Query,int).mjava","sourceNew":"  private void dumpResults(String qType, Query q, int numDocs) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: query=\" + q);\n    }\n    TopDocs hits = searcher.search(q, null, numDocs);\n    assertTrue(qType + \" should produce results \", hits.totalHits > 0);\n    if (VERBOSE) {\n      System.out.println(\"=========\" + qType + \"============\");\n      ScoreDoc[] scoreDocs = hits.scoreDocs;\n      for (int i = 0; i < Math.min(numDocs, hits.totalHits); i++) {\n        Document ldoc = searcher.doc(scoreDocs[i].doc);\n        System.out.println(\"[\" + ldoc.get(\"date\") + \"]\" + ldoc.get(\"contents\"));\n      }\n      System.out.println();\n    }\n  }\n\n","sourceOld":"  private void dumpResults(String qType, Query q, int numDocs) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: query=\" + q);\n    }\n    TopDocs hits = searcher.search(q, null, numDocs);\n    assertTrue(qType + \" should produce results \", hits.totalHits > 0);\n    if (VERBOSE) {\n      System.out.println(\"=========\" + qType + \"============\");\n      ScoreDoc[] scoreDocs = hits.scoreDocs;\n      for (int i = 0; i < Math.min(numDocs, hits.totalHits); i++) {\n        Document ldoc = searcher.doc(scoreDocs[i].doc);\n        System.out.println(\"[\" + ldoc.get(\"date\") + \"]\" + ldoc.get(\"contents\"));\n      }\n      System.out.println();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7e4907084808af8fdb14b9809e6dceaccf6867b","date":1343473006,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#dumpResults(String,Query,int).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#dumpResults(String,Query,int).mjava","sourceNew":"  private void dumpResults(String qType, Query q, int numDocs) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: query=\" + q);\n    }\n    TopDocs hits = searcher.search(q, null, numDocs);\n    assertTrue(qType + \" should produce results \", hits.totalHits > 0);\n    if (VERBOSE) {\n      System.out.println(\"=========\" + qType + \"============\");\n      ScoreDoc[] scoreDocs = hits.scoreDocs;\n      for (int i = 0; i < Math.min(numDocs, hits.totalHits); i++) {\n        StoredDocument ldoc = searcher.doc(scoreDocs[i].doc);\n        System.out.println(\"[\" + ldoc.get(\"date\") + \"]\" + ldoc.get(\"contents\"));\n      }\n      System.out.println();\n    }\n  }\n\n","sourceOld":"  private void dumpResults(String qType, Query q, int numDocs) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: query=\" + q);\n    }\n    TopDocs hits = searcher.search(q, null, numDocs);\n    assertTrue(qType + \" should produce results \", hits.totalHits > 0);\n    if (VERBOSE) {\n      System.out.println(\"=========\" + qType + \"============\");\n      ScoreDoc[] scoreDocs = hits.scoreDocs;\n      for (int i = 0; i < Math.min(numDocs, hits.totalHits); i++) {\n        Document ldoc = searcher.doc(scoreDocs[i].doc);\n        System.out.println(\"[\" + ldoc.get(\"date\") + \"]\" + ldoc.get(\"contents\"));\n      }\n      System.out.println();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#dumpResults(String,Query,int).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#dumpResults(String,Query,int).mjava","sourceNew":"  private void dumpResults(String qType, Query q, int numDocs) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: query=\" + q);\n    }\n    TopDocs hits = searcher.search(q, null, numDocs);\n    assertTrue(qType + \" should produce results \", hits.totalHits > 0);\n    if (VERBOSE) {\n      System.out.println(\"=========\" + qType + \"============\");\n      ScoreDoc[] scoreDocs = hits.scoreDocs;\n      for (int i = 0; i < Math.min(numDocs, hits.totalHits); i++) {\n        StoredDocument ldoc = searcher.doc(scoreDocs[i].doc);\n        System.out.println(\"[\" + ldoc.get(\"date\") + \"]\" + ldoc.get(\"contents\"));\n      }\n      System.out.println();\n    }\n  }\n\n","sourceOld":"  private void dumpResults(String qType, Query q, int numDocs) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: query=\" + q);\n    }\n    TopDocs hits = searcher.search(q, null, numDocs);\n    assertTrue(qType + \" should produce results \", hits.totalHits > 0);\n    if (VERBOSE) {\n      System.out.println(\"=========\" + qType + \"============\");\n      ScoreDoc[] scoreDocs = hits.scoreDocs;\n      for (int i = 0; i < Math.min(numDocs, hits.totalHits); i++) {\n        Document ldoc = searcher.doc(scoreDocs[i].doc);\n        System.out.println(\"[\" + ldoc.get(\"date\") + \"]\" + ldoc.get(\"contents\"));\n      }\n      System.out.println();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#dumpResults(String,Query,int).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#dumpResults(String,Query,int).mjava","sourceNew":"  private void dumpResults(String qType, Query q, int numDocs) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: query=\" + q);\n    }\n    TopDocs hits = searcher.search(q, numDocs);\n    assertTrue(qType + \" should produce results \", hits.totalHits > 0);\n    if (VERBOSE) {\n      System.out.println(\"=========\" + qType + \"============\");\n      ScoreDoc[] scoreDocs = hits.scoreDocs;\n      for (int i = 0; i < Math.min(numDocs, hits.totalHits); i++) {\n        StoredDocument ldoc = searcher.doc(scoreDocs[i].doc);\n        System.out.println(\"[\" + ldoc.get(\"date\") + \"]\" + ldoc.get(\"contents\"));\n      }\n      System.out.println();\n    }\n  }\n\n","sourceOld":"  private void dumpResults(String qType, Query q, int numDocs) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: query=\" + q);\n    }\n    TopDocs hits = searcher.search(q, null, numDocs);\n    assertTrue(qType + \" should produce results \", hits.totalHits > 0);\n    if (VERBOSE) {\n      System.out.println(\"=========\" + qType + \"============\");\n      ScoreDoc[] scoreDocs = hits.scoreDocs;\n      for (int i = 0; i < Math.min(numDocs, hits.totalHits); i++) {\n        StoredDocument ldoc = searcher.doc(scoreDocs[i].doc);\n        System.out.println(\"[\" + ldoc.get(\"date\") + \"]\" + ldoc.get(\"contents\"));\n      }\n      System.out.println();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"388b4c6df4255b848d4c97621ebcf07cc4c46a2a","date":1450786558,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#dumpResults(String,Query,int).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#dumpResults(String,Query,int).mjava","sourceNew":"  protected void dumpResults(String qType, Query q, int numDocs) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: query=\" + q);\n    }\n    TopDocs hits = searcher.search(q, numDocs);\n    assertTrue(qType + \" should produce results \", hits.totalHits > 0);\n    if (VERBOSE) {\n      System.out.println(\"=========\" + qType + \"============\");\n      ScoreDoc[] scoreDocs = hits.scoreDocs;\n      for (int i = 0; i < Math.min(numDocs, hits.totalHits); i++) {\n        StoredDocument ldoc = searcher.doc(scoreDocs[i].doc);\n        System.out.println(\"[\" + ldoc.get(\"date\") + \"]\" + ldoc.get(\"contents\"));\n      }\n      System.out.println();\n    }\n  }\n\n","sourceOld":"  private void dumpResults(String qType, Query q, int numDocs) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: query=\" + q);\n    }\n    TopDocs hits = searcher.search(q, numDocs);\n    assertTrue(qType + \" should produce results \", hits.totalHits > 0);\n    if (VERBOSE) {\n      System.out.println(\"=========\" + qType + \"============\");\n      ScoreDoc[] scoreDocs = hits.scoreDocs;\n      for (int i = 0; i < Math.min(numDocs, hits.totalHits); i++) {\n        StoredDocument ldoc = searcher.doc(scoreDocs[i].doc);\n        System.out.println(\"[\" + ldoc.get(\"date\") + \"]\" + ldoc.get(\"contents\"));\n      }\n      System.out.println();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f054843acc706da8f2f007c842699d62e4af736c","date":1450870707,"type":5,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestCoreParser#dumpResults(String,Query,int).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#dumpResults(String,Query,int).mjava","sourceNew":"  protected void dumpResults(String qType, Query q, int numDocs) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: query=\" + q);\n    }\n    TopDocs hits = searcher.search(q, numDocs);\n    assertTrue(qType + \" should produce results \", hits.totalHits > 0);\n    if (VERBOSE) {\n      System.out.println(\"=========\" + qType + \"============\");\n      ScoreDoc[] scoreDocs = hits.scoreDocs;\n      for (int i = 0; i < Math.min(numDocs, hits.totalHits); i++) {\n        StoredDocument ldoc = searcher.doc(scoreDocs[i].doc);\n        System.out.println(\"[\" + ldoc.get(\"date\") + \"]\" + ldoc.get(\"contents\"));\n      }\n      System.out.println();\n    }\n  }\n\n","sourceOld":"  protected void dumpResults(String qType, Query q, int numDocs) throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: query=\" + q);\n    }\n    TopDocs hits = searcher.search(q, numDocs);\n    assertTrue(qType + \" should produce results \", hits.totalHits > 0);\n    if (VERBOSE) {\n      System.out.println(\"=========\" + qType + \"============\");\n      ScoreDoc[] scoreDocs = hits.scoreDocs;\n      for (int i = 0; i < Math.min(numDocs, hits.totalHits); i++) {\n        StoredDocument ldoc = searcher.doc(scoreDocs[i].doc);\n        System.out.println(\"[\" + ldoc.get(\"date\") + \"]\" + ldoc.get(\"contents\"));\n      }\n      System.out.println();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"388b4c6df4255b848d4c97621ebcf07cc4c46a2a":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1d028314cced5858683a1bb4741423d0f934257b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"f054843acc706da8f2f007c842699d62e4af736c":["388b4c6df4255b848d4c97621ebcf07cc4c46a2a"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["1d028314cced5858683a1bb4741423d0f934257b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f054843acc706da8f2f007c842699d62e4af736c"]},"commit2Childs":{"388b4c6df4255b848d4c97621ebcf07cc4c46a2a":["f054843acc706da8f2f007c842699d62e4af736c"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["1d028314cced5858683a1bb4741423d0f934257b","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"1d028314cced5858683a1bb4741423d0f934257b":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"f054843acc706da8f2f007c842699d62e4af736c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["388b4c6df4255b848d4c97621ebcf07cc4c46a2a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["1d028314cced5858683a1bb4741423d0f934257b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}