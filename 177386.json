{"path":"src/java/org/apache/lucene/analysis/NormalizeCharMap#add(String,String).mjava","commits":[{"id":"cd27af5c226d98a7c6378c388a67a3bff7c0b3a2","date":1245784531,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/NormalizeCharMap#add(String,String).mjava","pathOld":"/dev/null","sourceNew":"  public void add(String singleMatch, String replacement) {\n    NormalizeCharMap currMap = this;\n    for(int i = 0; i < singleMatch.length(); i++) {\n      char c = singleMatch.charAt(i);\n      if (currMap.submap == null) {\n        currMap.submap = new HashMap(1);\n      }\n      NormalizeCharMap map = (NormalizeCharMap) currMap.submap.get(Character.valueOf(c));\n      if (map == null) {\n        map = new NormalizeCharMap();\n        currMap.submap.put(new Character(c), map);\n      }\n      currMap = map;\n    }\n    if (currMap.normStr != null) {\n      throw new RuntimeException(\"MappingCharFilter: there is already a mapping for \" + singleMatch);\n    }\n    currMap.normStr = replacement;\n    currMap.diff = singleMatch.length() - replacement.length();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84851fda840d985baf8ca736613e357a623597e8","date":1246359019,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/NormalizeCharMap#add(String,String).mjava","pathOld":"src/java/org/apache/lucene/analysis/NormalizeCharMap#add(String,String).mjava","sourceNew":"  public void add(String singleMatch, String replacement) {\n    NormalizeCharMap currMap = this;\n    for(int i = 0; i < singleMatch.length(); i++) {\n      char c = singleMatch.charAt(i);\n      if (currMap.submap == null) {\n        currMap.submap = new HashMap(1);\n      }\n      NormalizeCharMap map = (NormalizeCharMap) currMap.submap.get(CharacterCache.valueOf(c));\n      if (map == null) {\n        map = new NormalizeCharMap();\n        currMap.submap.put(new Character(c), map);\n      }\n      currMap = map;\n    }\n    if (currMap.normStr != null) {\n      throw new RuntimeException(\"MappingCharFilter: there is already a mapping for \" + singleMatch);\n    }\n    currMap.normStr = replacement;\n    currMap.diff = singleMatch.length() - replacement.length();\n  }\n\n","sourceOld":"  public void add(String singleMatch, String replacement) {\n    NormalizeCharMap currMap = this;\n    for(int i = 0; i < singleMatch.length(); i++) {\n      char c = singleMatch.charAt(i);\n      if (currMap.submap == null) {\n        currMap.submap = new HashMap(1);\n      }\n      NormalizeCharMap map = (NormalizeCharMap) currMap.submap.get(Character.valueOf(c));\n      if (map == null) {\n        map = new NormalizeCharMap();\n        currMap.submap.put(new Character(c), map);\n      }\n      currMap = map;\n    }\n    if (currMap.normStr != null) {\n      throw new RuntimeException(\"MappingCharFilter: there is already a mapping for \" + singleMatch);\n    }\n    currMap.normStr = replacement;\n    currMap.diff = singleMatch.length() - replacement.length();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"894f658e976bac6be9220d704374c373a4f98d9b","date":1251201737,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/NormalizeCharMap#add(String,String).mjava","pathOld":"src/java/org/apache/lucene/analysis/NormalizeCharMap#add(String,String).mjava","sourceNew":"  /** Records a replacement to be applied to the inputs\n   *  stream.  Whenever <code>singleMatch</code> occurs in\n   *  the input, it will be replaced with\n   *  <code>replacement</code>.\n   *\n   * @param singleMatch input String to be replaced\n   * @param replacement output String\n   */\n  public void add(String singleMatch, String replacement) {\n    NormalizeCharMap currMap = this;\n    for(int i = 0; i < singleMatch.length(); i++) {\n      char c = singleMatch.charAt(i);\n      if (currMap.submap == null) {\n        currMap.submap = new HashMap(1);\n      }\n      NormalizeCharMap map = (NormalizeCharMap) currMap.submap.get(CharacterCache.valueOf(c));\n      if (map == null) {\n        map = new NormalizeCharMap();\n        currMap.submap.put(new Character(c), map);\n      }\n      currMap = map;\n    }\n    if (currMap.normStr != null) {\n      throw new RuntimeException(\"MappingCharFilter: there is already a mapping for \" + singleMatch);\n    }\n    currMap.normStr = replacement;\n    currMap.diff = singleMatch.length() - replacement.length();\n  }\n\n","sourceOld":"  public void add(String singleMatch, String replacement) {\n    NormalizeCharMap currMap = this;\n    for(int i = 0; i < singleMatch.length(); i++) {\n      char c = singleMatch.charAt(i);\n      if (currMap.submap == null) {\n        currMap.submap = new HashMap(1);\n      }\n      NormalizeCharMap map = (NormalizeCharMap) currMap.submap.get(CharacterCache.valueOf(c));\n      if (map == null) {\n        map = new NormalizeCharMap();\n        currMap.submap.put(new Character(c), map);\n      }\n      currMap = map;\n    }\n    if (currMap.normStr != null) {\n      throw new RuntimeException(\"MappingCharFilter: there is already a mapping for \" + singleMatch);\n    }\n    currMap.normStr = replacement;\n    currMap.diff = singleMatch.length() - replacement.length();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc","date":1255773182,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/NormalizeCharMap#add(String,String).mjava","pathOld":"src/java/org/apache/lucene/analysis/NormalizeCharMap#add(String,String).mjava","sourceNew":"  /** Records a replacement to be applied to the inputs\n   *  stream.  Whenever <code>singleMatch</code> occurs in\n   *  the input, it will be replaced with\n   *  <code>replacement</code>.\n   *\n   * @param singleMatch input String to be replaced\n   * @param replacement output String\n   */\n  public void add(String singleMatch, String replacement) {\n    NormalizeCharMap currMap = this;\n    for(int i = 0; i < singleMatch.length(); i++) {\n      char c = singleMatch.charAt(i);\n      if (currMap.submap == null) {\n        currMap.submap = new HashMap<Character, NormalizeCharMap>(1);\n      }\n      NormalizeCharMap map = currMap.submap.get(CharacterCache.valueOf(c));\n      if (map == null) {\n        map = new NormalizeCharMap();\n        currMap.submap.put(new Character(c), map);\n      }\n      currMap = map;\n    }\n    if (currMap.normStr != null) {\n      throw new RuntimeException(\"MappingCharFilter: there is already a mapping for \" + singleMatch);\n    }\n    currMap.normStr = replacement;\n    currMap.diff = singleMatch.length() - replacement.length();\n  }\n\n","sourceOld":"  /** Records a replacement to be applied to the inputs\n   *  stream.  Whenever <code>singleMatch</code> occurs in\n   *  the input, it will be replaced with\n   *  <code>replacement</code>.\n   *\n   * @param singleMatch input String to be replaced\n   * @param replacement output String\n   */\n  public void add(String singleMatch, String replacement) {\n    NormalizeCharMap currMap = this;\n    for(int i = 0; i < singleMatch.length(); i++) {\n      char c = singleMatch.charAt(i);\n      if (currMap.submap == null) {\n        currMap.submap = new HashMap(1);\n      }\n      NormalizeCharMap map = (NormalizeCharMap) currMap.submap.get(CharacterCache.valueOf(c));\n      if (map == null) {\n        map = new NormalizeCharMap();\n        currMap.submap.put(new Character(c), map);\n      }\n      currMap = map;\n    }\n    if (currMap.normStr != null) {\n      throw new RuntimeException(\"MappingCharFilter: there is already a mapping for \" + singleMatch);\n    }\n    currMap.normStr = replacement;\n    currMap.diff = singleMatch.length() - replacement.length();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64af8690a948c97feaa9e2844a0c7051034f153d","date":1255862276,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/NormalizeCharMap#add(String,String).mjava","pathOld":"src/java/org/apache/lucene/analysis/NormalizeCharMap#add(String,String).mjava","sourceNew":"  /** Records a replacement to be applied to the inputs\n   *  stream.  Whenever <code>singleMatch</code> occurs in\n   *  the input, it will be replaced with\n   *  <code>replacement</code>.\n   *\n   * @param singleMatch input String to be replaced\n   * @param replacement output String\n   */\n  public void add(String singleMatch, String replacement) {\n    NormalizeCharMap currMap = this;\n    for(int i = 0; i < singleMatch.length(); i++) {\n      char c = singleMatch.charAt(i);\n      if (currMap.submap == null) {\n        currMap.submap = new HashMap<Character, NormalizeCharMap>(1);\n      }\n      NormalizeCharMap map = currMap.submap.get(Character.valueOf(c));\n      if (map == null) {\n        map = new NormalizeCharMap();\n        currMap.submap.put(Character.valueOf(c), map);\n      }\n      currMap = map;\n    }\n    if (currMap.normStr != null) {\n      throw new RuntimeException(\"MappingCharFilter: there is already a mapping for \" + singleMatch);\n    }\n    currMap.normStr = replacement;\n    currMap.diff = singleMatch.length() - replacement.length();\n  }\n\n","sourceOld":"  /** Records a replacement to be applied to the inputs\n   *  stream.  Whenever <code>singleMatch</code> occurs in\n   *  the input, it will be replaced with\n   *  <code>replacement</code>.\n   *\n   * @param singleMatch input String to be replaced\n   * @param replacement output String\n   */\n  public void add(String singleMatch, String replacement) {\n    NormalizeCharMap currMap = this;\n    for(int i = 0; i < singleMatch.length(); i++) {\n      char c = singleMatch.charAt(i);\n      if (currMap.submap == null) {\n        currMap.submap = new HashMap<Character, NormalizeCharMap>(1);\n      }\n      NormalizeCharMap map = currMap.submap.get(CharacterCache.valueOf(c));\n      if (map == null) {\n        map = new NormalizeCharMap();\n        currMap.submap.put(new Character(c), map);\n      }\n      currMap = map;\n    }\n    if (currMap.normStr != null) {\n      throw new RuntimeException(\"MappingCharFilter: there is already a mapping for \" + singleMatch);\n    }\n    currMap.normStr = replacement;\n    currMap.diff = singleMatch.length() - replacement.length();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/analysis/NormalizeCharMap#add(String,String).mjava","sourceNew":null,"sourceOld":"  /** Records a replacement to be applied to the inputs\n   *  stream.  Whenever <code>singleMatch</code> occurs in\n   *  the input, it will be replaced with\n   *  <code>replacement</code>.\n   *\n   * @param singleMatch input String to be replaced\n   * @param replacement output String\n   */\n  public void add(String singleMatch, String replacement) {\n    NormalizeCharMap currMap = this;\n    for(int i = 0; i < singleMatch.length(); i++) {\n      char c = singleMatch.charAt(i);\n      if (currMap.submap == null) {\n        currMap.submap = new HashMap<Character, NormalizeCharMap>(1);\n      }\n      NormalizeCharMap map = currMap.submap.get(Character.valueOf(c));\n      if (map == null) {\n        map = new NormalizeCharMap();\n        currMap.submap.put(Character.valueOf(c), map);\n      }\n      currMap = map;\n    }\n    if (currMap.normStr != null) {\n      throw new RuntimeException(\"MappingCharFilter: there is already a mapping for \" + singleMatch);\n    }\n    currMap.normStr = replacement;\n    currMap.diff = singleMatch.length() - replacement.length();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84851fda840d985baf8ca736613e357a623597e8":["cd27af5c226d98a7c6378c388a67a3bff7c0b3a2"],"64af8690a948c97feaa9e2844a0c7051034f153d":["b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc"],"894f658e976bac6be9220d704374c373a4f98d9b":["84851fda840d985baf8ca736613e357a623597e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc":["894f658e976bac6be9220d704374c373a4f98d9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["64af8690a948c97feaa9e2844a0c7051034f153d"],"cd27af5c226d98a7c6378c388a67a3bff7c0b3a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"84851fda840d985baf8ca736613e357a623597e8":["894f658e976bac6be9220d704374c373a4f98d9b"],"64af8690a948c97feaa9e2844a0c7051034f153d":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"894f658e976bac6be9220d704374c373a4f98d9b":["b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd27af5c226d98a7c6378c388a67a3bff7c0b3a2"],"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc":["64af8690a948c97feaa9e2844a0c7051034f153d"],"cd27af5c226d98a7c6378c388a67a3bff7c0b3a2":["84851fda840d985baf8ca736613e357a623597e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}