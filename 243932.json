{"path":"solr/core/src/java/org/apache/solr/cloud/Overseer#getStateUpdateQueue().mjava","commits":[{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":1,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#getStateUpdateQueue().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#getStateUpdateQueue(SolrZkClient).mjava","sourceNew":"  /**\n   * Get queue that can be used to send messages to Overseer.\n   * <p>\n   * Any and all modifications to the cluster state must be sent to\n   * the overseer via this queue. The complete list of overseer actions\n   * supported by this queue are documented inside the {@link OverseerAction} enum.\n   * <p>\n   * Performance statistics on the returned queue\n   * are <em>not</em> tracked by the Overseer Stats API,\n   * see {@link org.apache.solr.common.params.CollectionParams.CollectionAction#OVERSEERSTATUS}.\n   * Therefore, this method should be used only by clients for writing to the overseer queue.\n   * <p>\n   * This method will create the /overseer znode in ZooKeeper if it does not exist already.\n   *\n   * @return a {@link ZkDistributedQueue} object\n   */\n  ZkDistributedQueue getStateUpdateQueue() {\n    return getStateUpdateQueue(new Stats());\n  }\n\n","sourceOld":"  /**\n   * Get queue that can be used to send messages to Overseer.\n   * <p>\n   * Any and all modifications to the cluster state must be sent to\n   * the overseer via this queue. The complete list of overseer actions\n   * supported by this queue are documented inside the {@link OverseerAction} enum.\n   * <p>\n   * Performance statistics on the returned queue\n   * are <em>not</em> tracked by the Overseer Stats API,\n   * see {@link org.apache.solr.common.params.CollectionParams.CollectionAction#OVERSEERSTATUS}.\n   * Therefore, this method should be used only by clients for writing to the overseer queue.\n   * <p>\n   * This method will create the /overseer znode in ZooKeeper if it does not exist already.\n   *\n   * @param zkClient the {@link SolrZkClient} to be used for reading/writing to the queue\n   * @return a {@link ZkDistributedQueue} object\n   */\n  public static ZkDistributedQueue getStateUpdateQueue(final SolrZkClient zkClient) {\n    return getStateUpdateQueue(zkClient, new Stats());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}