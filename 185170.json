{"path":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestSelectiveWeightCreation#testScoringQueryWeightCreation().mjava","commits":[{"id":"58c36d634c9789cb739fbd175c1a8d50b3303f6b","date":1478022614,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestSelectiveWeightCreation#testScoringQueryWeightCreation().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testScoringQueryWeightCreation() throws IOException, ModelException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 1.0f));\n\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 2.0f));\n    w.addDocument(doc);\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    final BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"wizard\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"oz\")), BooleanClause.Occur.SHOULD);\n    final IndexSearcher searcher = getSearcher(r);\n    // first run the standard query\n    final TopDocs hits = searcher.search(bqBuilder.build(), 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    List<Feature> features = makeFeatures(new int[] {0, 1, 2});\n    final List<Feature> allFeatures = makeFeatures(new int[] {0, 1, 2, 3, 4, 5,\n        6, 7, 8, 9});\n    final List<Normalizer> norms = new ArrayList<>();\n    for (int k=0; k < features.size(); ++k){\n        norms.add(IdentityNormalizer.INSTANCE);\n    }\n\n    // when features are NOT requested in the response, only the modelFeature weights should be created\n    final LTRScoringModel ltrScoringModel1 = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures,\n        makeFeatureWeights(features));\n    LTRScoringQuery.ModelWeight modelWeight = performQuery(hits, searcher,\n        hits.scoreDocs[0].doc, new LTRScoringQuery(ltrScoringModel1, false)); // features not requested in response\n    LTRScoringQuery.FeatureInfo[] featuresInfo = modelWeight.getFeaturesInfo();\n\n    assertEquals(features.size(), modelWeight.getModelFeatureValuesNormalized().length);\n    int validFeatures = 0;\n    for (int i=0; i < featuresInfo.length; ++i){\n      if (featuresInfo[i] != null && featuresInfo[i].isUsed()){\n        validFeatures += 1;\n      }\n    }\n    assertEquals(validFeatures, features.size());\n\n    // when features are requested in the response, weights should be created for all features\n    final LTRScoringModel ltrScoringModel2 = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures,\n        makeFeatureWeights(features));\n    modelWeight = performQuery(hits, searcher,\n        hits.scoreDocs[0].doc, new LTRScoringQuery(ltrScoringModel2, true)); // features requested in response\n    featuresInfo = modelWeight.getFeaturesInfo();\n\n    assertEquals(features.size(), modelWeight.getModelFeatureValuesNormalized().length);\n    assertEquals(allFeatures.size(), modelWeight.getExtractedFeatureWeights().length);\n\n    validFeatures = 0;\n    for (int i=0; i < featuresInfo.length; ++i){\n      if (featuresInfo[i] != null && featuresInfo[i].isUsed()){\n        validFeatures += 1;\n      }\n    }\n    assertEquals(validFeatures, allFeatures.size());\n\n    assertU(delI(\"0\"));assertU(delI(\"1\"));\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestSelectiveWeightCreation#testScoringQueryWeightCreation().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testScoringQueryWeightCreation() throws IOException, ModelException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 1.0f));\n\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 2.0f));\n    w.addDocument(doc);\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    final BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"wizard\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"oz\")), BooleanClause.Occur.SHOULD);\n    final IndexSearcher searcher = getSearcher(r);\n    // first run the standard query\n    final TopDocs hits = searcher.search(bqBuilder.build(), 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    List<Feature> features = makeFeatures(new int[] {0, 1, 2});\n    final List<Feature> allFeatures = makeFeatures(new int[] {0, 1, 2, 3, 4, 5,\n        6, 7, 8, 9});\n    final List<Normalizer> norms = new ArrayList<>();\n    for (int k=0; k < features.size(); ++k){\n        norms.add(IdentityNormalizer.INSTANCE);\n    }\n\n    // when features are NOT requested in the response, only the modelFeature weights should be created\n    final LTRScoringModel ltrScoringModel1 = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures,\n        makeFeatureWeights(features));\n    LTRScoringQuery.ModelWeight modelWeight = performQuery(hits, searcher,\n        hits.scoreDocs[0].doc, new LTRScoringQuery(ltrScoringModel1, false)); // features not requested in response\n    LTRScoringQuery.FeatureInfo[] featuresInfo = modelWeight.getFeaturesInfo();\n\n    assertEquals(features.size(), modelWeight.getModelFeatureValuesNormalized().length);\n    int validFeatures = 0;\n    for (int i=0; i < featuresInfo.length; ++i){\n      if (featuresInfo[i] != null && featuresInfo[i].isUsed()){\n        validFeatures += 1;\n      }\n    }\n    assertEquals(validFeatures, features.size());\n\n    // when features are requested in the response, weights should be created for all features\n    final LTRScoringModel ltrScoringModel2 = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures,\n        makeFeatureWeights(features));\n    modelWeight = performQuery(hits, searcher,\n        hits.scoreDocs[0].doc, new LTRScoringQuery(ltrScoringModel2, true)); // features requested in response\n    featuresInfo = modelWeight.getFeaturesInfo();\n\n    assertEquals(features.size(), modelWeight.getModelFeatureValuesNormalized().length);\n    assertEquals(allFeatures.size(), modelWeight.getExtractedFeatureWeights().length);\n\n    validFeatures = 0;\n    for (int i=0; i < featuresInfo.length; ++i){\n      if (featuresInfo[i] != null && featuresInfo[i].isUsed()){\n        validFeatures += 1;\n      }\n    }\n    assertEquals(validFeatures, allFeatures.size());\n\n    assertU(delI(\"0\"));assertU(delI(\"1\"));\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eb6d1b3417708a3e41731ad9fabbecae8f08ca8","date":1486937063,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestSelectiveWeightCreation#testScoringQueryWeightCreation().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestSelectiveWeightCreation#testScoringQueryWeightCreation().mjava","sourceNew":"  @Test\n  public void testScoringQueryWeightCreation() throws IOException, ModelException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"10\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 1.0f));\n\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"11\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 2.0f));\n    w.addDocument(doc);\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    final BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"wizard\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"oz\")), BooleanClause.Occur.SHOULD);\n    final IndexSearcher searcher = getSearcher(r);\n    // first run the standard query\n    final TopDocs hits = searcher.search(bqBuilder.build(), 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"10\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"11\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    List<Feature> features = makeFeatures(new int[] {0, 1, 2});\n    final List<Feature> allFeatures = makeFeatures(new int[] {0, 1, 2, 3, 4, 5,\n        6, 7, 8, 9});\n    final List<Normalizer> norms = new ArrayList<>();\n    for (int k=0; k < features.size(); ++k){\n        norms.add(IdentityNormalizer.INSTANCE);\n    }\n\n    // when features are NOT requested in the response, only the modelFeature weights should be created\n    final LTRScoringModel ltrScoringModel1 = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures,\n        makeFeatureWeights(features));\n    LTRScoringQuery.ModelWeight modelWeight = performQuery(hits, searcher,\n        hits.scoreDocs[0].doc, new LTRScoringQuery(ltrScoringModel1, false)); // features not requested in response\n    LTRScoringQuery.FeatureInfo[] featuresInfo = modelWeight.getFeaturesInfo();\n\n    assertEquals(features.size(), modelWeight.getModelFeatureValuesNormalized().length);\n    int validFeatures = 0;\n    for (int i=0; i < featuresInfo.length; ++i){\n      if (featuresInfo[i] != null && featuresInfo[i].isUsed()){\n        validFeatures += 1;\n      }\n    }\n    assertEquals(validFeatures, features.size());\n\n    // when features are requested in the response, weights should be created for all features\n    final LTRScoringModel ltrScoringModel2 = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures,\n        makeFeatureWeights(features));\n    modelWeight = performQuery(hits, searcher,\n        hits.scoreDocs[0].doc, new LTRScoringQuery(ltrScoringModel2, true)); // features requested in response\n    featuresInfo = modelWeight.getFeaturesInfo();\n\n    assertEquals(features.size(), modelWeight.getModelFeatureValuesNormalized().length);\n    assertEquals(allFeatures.size(), modelWeight.getExtractedFeatureWeights().length);\n\n    validFeatures = 0;\n    for (int i=0; i < featuresInfo.length; ++i){\n      if (featuresInfo[i] != null && featuresInfo[i].isUsed()){\n        validFeatures += 1;\n      }\n    }\n    assertEquals(validFeatures, allFeatures.size());\n\n    assertU(delI(\"10\"));assertU(delI(\"11\"));\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testScoringQueryWeightCreation() throws IOException, ModelException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 1.0f));\n\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 2.0f));\n    w.addDocument(doc);\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    final BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"wizard\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"oz\")), BooleanClause.Occur.SHOULD);\n    final IndexSearcher searcher = getSearcher(r);\n    // first run the standard query\n    final TopDocs hits = searcher.search(bqBuilder.build(), 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    List<Feature> features = makeFeatures(new int[] {0, 1, 2});\n    final List<Feature> allFeatures = makeFeatures(new int[] {0, 1, 2, 3, 4, 5,\n        6, 7, 8, 9});\n    final List<Normalizer> norms = new ArrayList<>();\n    for (int k=0; k < features.size(); ++k){\n        norms.add(IdentityNormalizer.INSTANCE);\n    }\n\n    // when features are NOT requested in the response, only the modelFeature weights should be created\n    final LTRScoringModel ltrScoringModel1 = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures,\n        makeFeatureWeights(features));\n    LTRScoringQuery.ModelWeight modelWeight = performQuery(hits, searcher,\n        hits.scoreDocs[0].doc, new LTRScoringQuery(ltrScoringModel1, false)); // features not requested in response\n    LTRScoringQuery.FeatureInfo[] featuresInfo = modelWeight.getFeaturesInfo();\n\n    assertEquals(features.size(), modelWeight.getModelFeatureValuesNormalized().length);\n    int validFeatures = 0;\n    for (int i=0; i < featuresInfo.length; ++i){\n      if (featuresInfo[i] != null && featuresInfo[i].isUsed()){\n        validFeatures += 1;\n      }\n    }\n    assertEquals(validFeatures, features.size());\n\n    // when features are requested in the response, weights should be created for all features\n    final LTRScoringModel ltrScoringModel2 = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures,\n        makeFeatureWeights(features));\n    modelWeight = performQuery(hits, searcher,\n        hits.scoreDocs[0].doc, new LTRScoringQuery(ltrScoringModel2, true)); // features requested in response\n    featuresInfo = modelWeight.getFeaturesInfo();\n\n    assertEquals(features.size(), modelWeight.getModelFeatureValuesNormalized().length);\n    assertEquals(allFeatures.size(), modelWeight.getExtractedFeatureWeights().length);\n\n    validFeatures = 0;\n    for (int i=0; i < featuresInfo.length; ++i){\n      if (featuresInfo[i] != null && featuresInfo[i].isUsed()){\n        validFeatures += 1;\n      }\n    }\n    assertEquals(validFeatures, allFeatures.size());\n\n    assertU(delI(\"0\"));assertU(delI(\"1\"));\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4bb8aa50eb067e6c60b53a4b0c32db5c692c572f","date":1496913354,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestSelectiveWeightCreation#testScoringQueryWeightCreation().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestSelectiveWeightCreation#testScoringQueryWeightCreation().mjava","sourceNew":"  @Test\n  public void testScoringQueryWeightCreation() throws IOException, ModelException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"10\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 1.0f));\n\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"11\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 2.0f));\n    w.addDocument(doc);\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    final BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"wizard\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"oz\")), BooleanClause.Occur.SHOULD);\n    final IndexSearcher searcher = getSearcher(r);\n    // first run the standard query\n    final TopDocs hits = searcher.search(bqBuilder.build(), 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"10\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"11\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    List<Feature> features = makeFeatures(new int[] {0, 1, 2});\n    final List<Feature> allFeatures = makeFeatures(new int[] {0, 1, 2, 3, 4, 5,\n        6, 7, 8, 9});\n    final List<Normalizer> norms = new ArrayList<>();\n    for (int k=0; k < features.size(); ++k){\n        norms.add(IdentityNormalizer.INSTANCE);\n    }\n\n    // when features are NOT requested in the response, only the modelFeature weights should be created\n    final LTRScoringModel ltrScoringModel1 = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures,\n        TestLinearModel.makeFeatureWeights(features));\n    LTRScoringQuery.ModelWeight modelWeight = performQuery(hits, searcher,\n        hits.scoreDocs[0].doc, new LTRScoringQuery(ltrScoringModel1, false)); // features not requested in response\n    LTRScoringQuery.FeatureInfo[] featuresInfo = modelWeight.getFeaturesInfo();\n\n    assertEquals(features.size(), modelWeight.getModelFeatureValuesNormalized().length);\n    int validFeatures = 0;\n    for (int i=0; i < featuresInfo.length; ++i){\n      if (featuresInfo[i] != null && featuresInfo[i].isUsed()){\n        validFeatures += 1;\n      }\n    }\n    assertEquals(validFeatures, features.size());\n\n    // when features are requested in the response, weights should be created for all features\n    final LTRScoringModel ltrScoringModel2 = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures,\n        TestLinearModel.makeFeatureWeights(features));\n    modelWeight = performQuery(hits, searcher,\n        hits.scoreDocs[0].doc, new LTRScoringQuery(ltrScoringModel2, true)); // features requested in response\n    featuresInfo = modelWeight.getFeaturesInfo();\n\n    assertEquals(features.size(), modelWeight.getModelFeatureValuesNormalized().length);\n    assertEquals(allFeatures.size(), modelWeight.getExtractedFeatureWeights().length);\n\n    validFeatures = 0;\n    for (int i=0; i < featuresInfo.length; ++i){\n      if (featuresInfo[i] != null && featuresInfo[i].isUsed()){\n        validFeatures += 1;\n      }\n    }\n    assertEquals(validFeatures, allFeatures.size());\n\n    assertU(delI(\"10\"));assertU(delI(\"11\"));\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testScoringQueryWeightCreation() throws IOException, ModelException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"10\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 1.0f));\n\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"11\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 2.0f));\n    w.addDocument(doc);\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    final BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"wizard\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"oz\")), BooleanClause.Occur.SHOULD);\n    final IndexSearcher searcher = getSearcher(r);\n    // first run the standard query\n    final TopDocs hits = searcher.search(bqBuilder.build(), 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"10\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"11\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    List<Feature> features = makeFeatures(new int[] {0, 1, 2});\n    final List<Feature> allFeatures = makeFeatures(new int[] {0, 1, 2, 3, 4, 5,\n        6, 7, 8, 9});\n    final List<Normalizer> norms = new ArrayList<>();\n    for (int k=0; k < features.size(); ++k){\n        norms.add(IdentityNormalizer.INSTANCE);\n    }\n\n    // when features are NOT requested in the response, only the modelFeature weights should be created\n    final LTRScoringModel ltrScoringModel1 = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures,\n        makeFeatureWeights(features));\n    LTRScoringQuery.ModelWeight modelWeight = performQuery(hits, searcher,\n        hits.scoreDocs[0].doc, new LTRScoringQuery(ltrScoringModel1, false)); // features not requested in response\n    LTRScoringQuery.FeatureInfo[] featuresInfo = modelWeight.getFeaturesInfo();\n\n    assertEquals(features.size(), modelWeight.getModelFeatureValuesNormalized().length);\n    int validFeatures = 0;\n    for (int i=0; i < featuresInfo.length; ++i){\n      if (featuresInfo[i] != null && featuresInfo[i].isUsed()){\n        validFeatures += 1;\n      }\n    }\n    assertEquals(validFeatures, features.size());\n\n    // when features are requested in the response, weights should be created for all features\n    final LTRScoringModel ltrScoringModel2 = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures,\n        makeFeatureWeights(features));\n    modelWeight = performQuery(hits, searcher,\n        hits.scoreDocs[0].doc, new LTRScoringQuery(ltrScoringModel2, true)); // features requested in response\n    featuresInfo = modelWeight.getFeaturesInfo();\n\n    assertEquals(features.size(), modelWeight.getModelFeatureValuesNormalized().length);\n    assertEquals(allFeatures.size(), modelWeight.getExtractedFeatureWeights().length);\n\n    validFeatures = 0;\n    for (int i=0; i < featuresInfo.length; ++i){\n      if (featuresInfo[i] != null && featuresInfo[i].isUsed()){\n        validFeatures += 1;\n      }\n    }\n    assertEquals(validFeatures, allFeatures.size());\n\n    assertU(delI(\"10\"));assertU(delI(\"11\"));\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestSelectiveWeightCreation#testScoringQueryWeightCreation().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestSelectiveWeightCreation#testScoringQueryWeightCreation().mjava","sourceNew":"  @Test\n  public void testScoringQueryWeightCreation() throws IOException, ModelException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"10\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 1.0f));\n\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"11\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 2.0f));\n    w.addDocument(doc);\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    final BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"wizard\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"oz\")), BooleanClause.Occur.SHOULD);\n    final IndexSearcher searcher = getSearcher(r);\n    // first run the standard query\n    final TopDocs hits = searcher.search(bqBuilder.build(), 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"10\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"11\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    List<Feature> features = makeFeatures(new int[] {0, 1, 2});\n    final List<Feature> allFeatures = makeFeatures(new int[] {0, 1, 2, 3, 4, 5,\n        6, 7, 8, 9});\n    final List<Normalizer> norms = new ArrayList<>();\n    for (int k=0; k < features.size(); ++k){\n        norms.add(IdentityNormalizer.INSTANCE);\n    }\n\n    // when features are NOT requested in the response, only the modelFeature weights should be created\n    final LTRScoringModel ltrScoringModel1 = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures,\n        TestLinearModel.makeFeatureWeights(features));\n    LTRScoringQuery.ModelWeight modelWeight = performQuery(hits, searcher,\n        hits.scoreDocs[0].doc, new LTRScoringQuery(ltrScoringModel1, false)); // features not requested in response\n    LTRScoringQuery.FeatureInfo[] featuresInfo = modelWeight.getFeaturesInfo();\n\n    assertEquals(features.size(), modelWeight.getModelFeatureValuesNormalized().length);\n    int validFeatures = 0;\n    for (int i=0; i < featuresInfo.length; ++i){\n      if (featuresInfo[i] != null && featuresInfo[i].isUsed()){\n        validFeatures += 1;\n      }\n    }\n    assertEquals(validFeatures, features.size());\n\n    // when features are requested in the response, weights should be created for all features\n    final LTRScoringModel ltrScoringModel2 = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures,\n        TestLinearModel.makeFeatureWeights(features));\n    modelWeight = performQuery(hits, searcher,\n        hits.scoreDocs[0].doc, new LTRScoringQuery(ltrScoringModel2, true)); // features requested in response\n    featuresInfo = modelWeight.getFeaturesInfo();\n\n    assertEquals(features.size(), modelWeight.getModelFeatureValuesNormalized().length);\n    assertEquals(allFeatures.size(), modelWeight.getExtractedFeatureWeights().length);\n\n    validFeatures = 0;\n    for (int i=0; i < featuresInfo.length; ++i){\n      if (featuresInfo[i] != null && featuresInfo[i].isUsed()){\n        validFeatures += 1;\n      }\n    }\n    assertEquals(validFeatures, allFeatures.size());\n\n    assertU(delI(\"10\"));assertU(delI(\"11\"));\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testScoringQueryWeightCreation() throws IOException, ModelException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"10\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 1.0f));\n\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"11\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 2.0f));\n    w.addDocument(doc);\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    final BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"wizard\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"oz\")), BooleanClause.Occur.SHOULD);\n    final IndexSearcher searcher = getSearcher(r);\n    // first run the standard query\n    final TopDocs hits = searcher.search(bqBuilder.build(), 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"10\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"11\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    List<Feature> features = makeFeatures(new int[] {0, 1, 2});\n    final List<Feature> allFeatures = makeFeatures(new int[] {0, 1, 2, 3, 4, 5,\n        6, 7, 8, 9});\n    final List<Normalizer> norms = new ArrayList<>();\n    for (int k=0; k < features.size(); ++k){\n        norms.add(IdentityNormalizer.INSTANCE);\n    }\n\n    // when features are NOT requested in the response, only the modelFeature weights should be created\n    final LTRScoringModel ltrScoringModel1 = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures,\n        makeFeatureWeights(features));\n    LTRScoringQuery.ModelWeight modelWeight = performQuery(hits, searcher,\n        hits.scoreDocs[0].doc, new LTRScoringQuery(ltrScoringModel1, false)); // features not requested in response\n    LTRScoringQuery.FeatureInfo[] featuresInfo = modelWeight.getFeaturesInfo();\n\n    assertEquals(features.size(), modelWeight.getModelFeatureValuesNormalized().length);\n    int validFeatures = 0;\n    for (int i=0; i < featuresInfo.length; ++i){\n      if (featuresInfo[i] != null && featuresInfo[i].isUsed()){\n        validFeatures += 1;\n      }\n    }\n    assertEquals(validFeatures, features.size());\n\n    // when features are requested in the response, weights should be created for all features\n    final LTRScoringModel ltrScoringModel2 = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures,\n        makeFeatureWeights(features));\n    modelWeight = performQuery(hits, searcher,\n        hits.scoreDocs[0].doc, new LTRScoringQuery(ltrScoringModel2, true)); // features requested in response\n    featuresInfo = modelWeight.getFeaturesInfo();\n\n    assertEquals(features.size(), modelWeight.getModelFeatureValuesNormalized().length);\n    assertEquals(allFeatures.size(), modelWeight.getExtractedFeatureWeights().length);\n\n    validFeatures = 0;\n    for (int i=0; i < featuresInfo.length; ++i){\n      if (featuresInfo[i] != null && featuresInfo[i].isUsed()){\n        validFeatures += 1;\n      }\n    }\n    assertEquals(validFeatures, allFeatures.size());\n\n    assertU(delI(\"10\"));assertU(delI(\"11\"));\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestSelectiveWeightCreation#testScoringQueryWeightCreation().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestSelectiveWeightCreation#testScoringQueryWeightCreation().mjava","sourceNew":"  @Test\n  public void testScoringQueryWeightCreation() throws IOException, ModelException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"10\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 1.0f));\n\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"11\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 2.0f));\n    w.addDocument(doc);\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    final BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"wizard\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"oz\")), BooleanClause.Occur.SHOULD);\n    final IndexSearcher searcher = getSearcher(r);\n    // first run the standard query\n    final TopDocs hits = searcher.search(bqBuilder.build(), 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"10\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"11\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    List<Feature> features = makeFeatures(new int[] {0, 1, 2});\n    final List<Feature> allFeatures = makeFeatures(new int[] {0, 1, 2, 3, 4, 5,\n        6, 7, 8, 9});\n    final List<Normalizer> norms = new ArrayList<>();\n    for (int k=0; k < features.size(); ++k){\n        norms.add(IdentityNormalizer.INSTANCE);\n    }\n\n    // when features are NOT requested in the response, only the modelFeature weights should be created\n    final LTRScoringModel ltrScoringModel1 = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures,\n        TestLinearModel.makeFeatureWeights(features));\n    LTRScoringQuery.ModelWeight modelWeight = performQuery(hits, searcher,\n        hits.scoreDocs[0].doc, new LTRScoringQuery(ltrScoringModel1, false)); // features not requested in response\n    LTRScoringQuery.FeatureInfo[] featuresInfo = modelWeight.getFeaturesInfo();\n\n    assertEquals(features.size(), modelWeight.getModelFeatureValuesNormalized().length);\n    int validFeatures = 0;\n    for (int i=0; i < featuresInfo.length; ++i){\n      if (featuresInfo[i] != null && featuresInfo[i].isUsed()){\n        validFeatures += 1;\n      }\n    }\n    assertEquals(validFeatures, features.size());\n\n    // when features are requested in the response, weights should be created for all features\n    final LTRScoringModel ltrScoringModel2 = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures,\n        TestLinearModel.makeFeatureWeights(features));\n    modelWeight = performQuery(hits, searcher,\n        hits.scoreDocs[0].doc, new LTRScoringQuery(ltrScoringModel2, true)); // features requested in response\n    featuresInfo = modelWeight.getFeaturesInfo();\n\n    assertEquals(features.size(), modelWeight.getModelFeatureValuesNormalized().length);\n    assertEquals(allFeatures.size(), modelWeight.getExtractedFeatureWeights().length);\n\n    validFeatures = 0;\n    for (int i=0; i < featuresInfo.length; ++i){\n      if (featuresInfo[i] != null && featuresInfo[i].isUsed()){\n        validFeatures += 1;\n      }\n    }\n    assertEquals(validFeatures, allFeatures.size());\n\n    assertU(delI(\"10\"));assertU(delI(\"11\"));\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testScoringQueryWeightCreation() throws IOException, ModelException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"10\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 1.0f));\n\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"11\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 2.0f));\n    w.addDocument(doc);\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    final BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"wizard\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"oz\")), BooleanClause.Occur.SHOULD);\n    final IndexSearcher searcher = getSearcher(r);\n    // first run the standard query\n    final TopDocs hits = searcher.search(bqBuilder.build(), 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"10\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"11\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    List<Feature> features = makeFeatures(new int[] {0, 1, 2});\n    final List<Feature> allFeatures = makeFeatures(new int[] {0, 1, 2, 3, 4, 5,\n        6, 7, 8, 9});\n    final List<Normalizer> norms = new ArrayList<>();\n    for (int k=0; k < features.size(); ++k){\n        norms.add(IdentityNormalizer.INSTANCE);\n    }\n\n    // when features are NOT requested in the response, only the modelFeature weights should be created\n    final LTRScoringModel ltrScoringModel1 = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures,\n        makeFeatureWeights(features));\n    LTRScoringQuery.ModelWeight modelWeight = performQuery(hits, searcher,\n        hits.scoreDocs[0].doc, new LTRScoringQuery(ltrScoringModel1, false)); // features not requested in response\n    LTRScoringQuery.FeatureInfo[] featuresInfo = modelWeight.getFeaturesInfo();\n\n    assertEquals(features.size(), modelWeight.getModelFeatureValuesNormalized().length);\n    int validFeatures = 0;\n    for (int i=0; i < featuresInfo.length; ++i){\n      if (featuresInfo[i] != null && featuresInfo[i].isUsed()){\n        validFeatures += 1;\n      }\n    }\n    assertEquals(validFeatures, features.size());\n\n    // when features are requested in the response, weights should be created for all features\n    final LTRScoringModel ltrScoringModel2 = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures,\n        makeFeatureWeights(features));\n    modelWeight = performQuery(hits, searcher,\n        hits.scoreDocs[0].doc, new LTRScoringQuery(ltrScoringModel2, true)); // features requested in response\n    featuresInfo = modelWeight.getFeaturesInfo();\n\n    assertEquals(features.size(), modelWeight.getModelFeatureValuesNormalized().length);\n    assertEquals(allFeatures.size(), modelWeight.getExtractedFeatureWeights().length);\n\n    validFeatures = 0;\n    for (int i=0; i < featuresInfo.length; ++i){\n      if (featuresInfo[i] != null && featuresInfo[i].isUsed()){\n        validFeatures += 1;\n      }\n    }\n    assertEquals(validFeatures, allFeatures.size());\n\n    assertU(delI(\"10\"));assertU(delI(\"11\"));\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestSelectiveWeightCreation#testScoringQueryWeightCreation().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestSelectiveWeightCreation#testScoringQueryWeightCreation().mjava","sourceNew":"  @Test\n  public void testScoringQueryWeightCreation() throws IOException, ModelException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"10\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 1.0f));\n\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"11\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 2.0f));\n    w.addDocument(doc);\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    final BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"wizard\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"oz\")), BooleanClause.Occur.SHOULD);\n    final IndexSearcher searcher = getSearcher(r);\n    // first run the standard query\n    final TopDocs hits = searcher.search(bqBuilder.build(), 10);\n    assertEquals(2, hits.totalHits.value);\n    assertEquals(\"10\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"11\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    List<Feature> features = makeFeatures(new int[] {0, 1, 2});\n    final List<Feature> allFeatures = makeFeatures(new int[] {0, 1, 2, 3, 4, 5,\n        6, 7, 8, 9});\n    final List<Normalizer> norms = new ArrayList<>();\n    for (int k=0; k < features.size(); ++k){\n        norms.add(IdentityNormalizer.INSTANCE);\n    }\n\n    // when features are NOT requested in the response, only the modelFeature weights should be created\n    final LTRScoringModel ltrScoringModel1 = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures,\n        TestLinearModel.makeFeatureWeights(features));\n    LTRScoringQuery.ModelWeight modelWeight = performQuery(hits, searcher,\n        hits.scoreDocs[0].doc, new LTRScoringQuery(ltrScoringModel1, false)); // features not requested in response\n    LTRScoringQuery.FeatureInfo[] featuresInfo = modelWeight.getFeaturesInfo();\n\n    assertEquals(features.size(), modelWeight.getModelFeatureValuesNormalized().length);\n    int validFeatures = 0;\n    for (int i=0; i < featuresInfo.length; ++i){\n      if (featuresInfo[i] != null && featuresInfo[i].isUsed()){\n        validFeatures += 1;\n      }\n    }\n    assertEquals(validFeatures, features.size());\n\n    // when features are requested in the response, weights should be created for all features\n    final LTRScoringModel ltrScoringModel2 = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures,\n        TestLinearModel.makeFeatureWeights(features));\n    modelWeight = performQuery(hits, searcher,\n        hits.scoreDocs[0].doc, new LTRScoringQuery(ltrScoringModel2, true)); // features requested in response\n    featuresInfo = modelWeight.getFeaturesInfo();\n\n    assertEquals(features.size(), modelWeight.getModelFeatureValuesNormalized().length);\n    assertEquals(allFeatures.size(), modelWeight.getExtractedFeatureWeights().length);\n\n    validFeatures = 0;\n    for (int i=0; i < featuresInfo.length; ++i){\n      if (featuresInfo[i] != null && featuresInfo[i].isUsed()){\n        validFeatures += 1;\n      }\n    }\n    assertEquals(validFeatures, allFeatures.size());\n\n    assertU(delI(\"10\"));assertU(delI(\"11\"));\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testScoringQueryWeightCreation() throws IOException, ModelException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"10\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 1.0f));\n\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"11\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 2.0f));\n    w.addDocument(doc);\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    final BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"wizard\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"oz\")), BooleanClause.Occur.SHOULD);\n    final IndexSearcher searcher = getSearcher(r);\n    // first run the standard query\n    final TopDocs hits = searcher.search(bqBuilder.build(), 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"10\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"11\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    List<Feature> features = makeFeatures(new int[] {0, 1, 2});\n    final List<Feature> allFeatures = makeFeatures(new int[] {0, 1, 2, 3, 4, 5,\n        6, 7, 8, 9});\n    final List<Normalizer> norms = new ArrayList<>();\n    for (int k=0; k < features.size(); ++k){\n        norms.add(IdentityNormalizer.INSTANCE);\n    }\n\n    // when features are NOT requested in the response, only the modelFeature weights should be created\n    final LTRScoringModel ltrScoringModel1 = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures,\n        TestLinearModel.makeFeatureWeights(features));\n    LTRScoringQuery.ModelWeight modelWeight = performQuery(hits, searcher,\n        hits.scoreDocs[0].doc, new LTRScoringQuery(ltrScoringModel1, false)); // features not requested in response\n    LTRScoringQuery.FeatureInfo[] featuresInfo = modelWeight.getFeaturesInfo();\n\n    assertEquals(features.size(), modelWeight.getModelFeatureValuesNormalized().length);\n    int validFeatures = 0;\n    for (int i=0; i < featuresInfo.length; ++i){\n      if (featuresInfo[i] != null && featuresInfo[i].isUsed()){\n        validFeatures += 1;\n      }\n    }\n    assertEquals(validFeatures, features.size());\n\n    // when features are requested in the response, weights should be created for all features\n    final LTRScoringModel ltrScoringModel2 = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures,\n        TestLinearModel.makeFeatureWeights(features));\n    modelWeight = performQuery(hits, searcher,\n        hits.scoreDocs[0].doc, new LTRScoringQuery(ltrScoringModel2, true)); // features requested in response\n    featuresInfo = modelWeight.getFeaturesInfo();\n\n    assertEquals(features.size(), modelWeight.getModelFeatureValuesNormalized().length);\n    assertEquals(allFeatures.size(), modelWeight.getExtractedFeatureWeights().length);\n\n    validFeatures = 0;\n    for (int i=0; i < featuresInfo.length; ++i){\n      if (featuresInfo[i] != null && featuresInfo[i].isUsed()){\n        validFeatures += 1;\n      }\n    }\n    assertEquals(validFeatures, allFeatures.size());\n\n    assertU(delI(\"10\"));assertU(delI(\"11\"));\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7eb6d1b3417708a3e41731ad9fabbecae8f08ca8":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4bb8aa50eb067e6c60b53a4b0c32db5c692c572f":["7eb6d1b3417708a3e41731ad9fabbecae8f08ca8"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["7eb6d1b3417708a3e41731ad9fabbecae8f08ca8","4bb8aa50eb067e6c60b53a4b0c32db5c692c572f"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["7eb6d1b3417708a3e41731ad9fabbecae8f08ca8","4bb8aa50eb067e6c60b53a4b0c32db5c692c572f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"7eb6d1b3417708a3e41731ad9fabbecae8f08ca8":["4bb8aa50eb067e6c60b53a4b0c32db5c692c572f","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["7eb6d1b3417708a3e41731ad9fabbecae8f08ca8","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"4bb8aa50eb067e6c60b53a4b0c32db5c692c572f":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"28288370235ed02234a64753cdbf0c6ec096304a":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9720b151fde2073f4e401450f4574e5f31c2d0ff","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}