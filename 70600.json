{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCaseRunner#computeTestMethods().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCaseRunner#computeTestMethods().mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCaseRunner#computeTestMethods().mjava","sourceNew":"  @Override\n  protected List<FrameworkMethod> computeTestMethods() {\n    if (testMethods != null)\n      return testMethods;\n    \n    Random r = new Random(runnerSeed);\n    \n    LuceneTestCase.testClassesRun.add(getTestClass().getJavaClass().getSimpleName());\n    testMethods = new ArrayList<FrameworkMethod>();\n    for (Method m : getTestClass().getJavaClass().getMethods()) {\n      // check if the current test's class has methods annotated with @Ignore\n      final Ignore ignored = m.getAnnotation(Ignore.class);\n      if (ignored != null && !m.getName().equals(\"alwaysIgnoredTestMethod\")) {\n        System.err.println(\"NOTE: Ignoring test method '\" + m.getName() + \"': \" + ignored.value());\n      }\n      // add methods starting with \"test\"\n      final int mod = m.getModifiers();\n      if (m.getAnnotation(Test.class) != null ||\n          (m.getName().startsWith(\"test\") &&\n              !Modifier.isAbstract(mod) &&\n              m.getParameterTypes().length == 0 &&\n              m.getReturnType() == Void.TYPE))\n      {\n        if (Modifier.isStatic(mod))\n          throw new RuntimeException(\"Test methods must not be static.\");\n        testMethods.add(new FrameworkMethod(m));\n      }\n    }\n    \n    if (testMethods.isEmpty()) {\n      throw new RuntimeException(\"No runnable methods!\");\n    }\n    \n    if (TEST_NIGHTLY == false) {\n      removeAnnotatedTests(Nightly.class, \"@nightly\");\n    }\n    if (TEST_WEEKLY == false) {\n      removeAnnotatedTests(Weekly.class, \"@weekly\");\n    }\n    if (TEST_SLOW == false) {\n      removeAnnotatedTests(Slow.class, \"@slow\");\n    }\n    // sort the test methods first before shuffling them, so that the shuffle is consistent\n    // across different implementations that might order the methods different originally.\n    Collections.sort(testMethods, new Comparator<FrameworkMethod>() {\n      @Override\n      public int compare(FrameworkMethod f1, FrameworkMethod f2) {\n        return f1.getName().compareTo(f2.getName());\n      }\n    });\n    Collections.shuffle(testMethods, r);\n    return testMethods;\n  }\n\n","sourceOld":"  @Override\n  protected List<FrameworkMethod> computeTestMethods() {\n    if (testMethods != null)\n      return testMethods;\n    \n    Random r = new Random(runnerSeed);\n    \n    LuceneTestCase.testClassesRun.add(getTestClass().getJavaClass().getSimpleName());\n    testMethods = new ArrayList<FrameworkMethod>();\n    for (Method m : getTestClass().getJavaClass().getMethods()) {\n      // check if the current test's class has methods annotated with @Ignore\n      final Ignore ignored = m.getAnnotation(Ignore.class);\n      if (ignored != null && !m.getName().equals(\"alwaysIgnoredTestMethod\")) {\n        System.err.println(\"NOTE: Ignoring test method '\" + m.getName() + \"': \" + ignored.value());\n      }\n      // add methods starting with \"test\"\n      final int mod = m.getModifiers();\n      if (m.getAnnotation(Test.class) != null ||\n          (m.getName().startsWith(\"test\") &&\n              !Modifier.isAbstract(mod) &&\n              m.getParameterTypes().length == 0 &&\n              m.getReturnType() == Void.TYPE))\n      {\n        if (Modifier.isStatic(mod))\n          throw new RuntimeException(\"Test methods must not be static.\");\n        testMethods.add(new FrameworkMethod(m));\n      }\n    }\n    \n    if (testMethods.isEmpty()) {\n      throw new RuntimeException(\"No runnable methods!\");\n    }\n    \n    if (TEST_NIGHTLY == false) {\n      removeAnnotatedTests(Nightly.class, \"@nightly\");\n    }\n    if (TEST_WEEKLY == false) {\n      removeAnnotatedTests(Weekly.class, \"@weekly\");\n    }\n    if (TEST_SLOW == false) {\n      removeAnnotatedTests(Slow.class, \"@slow\");\n    }\n    // sort the test methods first before shuffling them, so that the shuffle is consistent\n    // across different implementations that might order the methods different originally.\n    Collections.sort(testMethods, new Comparator<FrameworkMethod>() {\n      @Override\n      public int compare(FrameworkMethod f1, FrameworkMethod f2) {\n        return f1.getName().compareTo(f2.getName());\n      }\n    });\n    Collections.shuffle(testMethods, r);\n    return testMethods;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b6d24a43afa23be4e3a366300f50af467daef1d","date":1331119216,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCaseRunner#computeTestMethods().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCaseRunner#computeTestMethods().mjava","sourceNew":"  @Override\n  protected List<FrameworkMethod> computeTestMethods() {\n    if (testMethods != null)\n      return testMethods;\n    \n    Random r = new Random(runnerSeed);\n    \n    testMethods = new ArrayList<FrameworkMethod>();\n    for (Method m : getTestClass().getJavaClass().getMethods()) {\n      // check if the current test's class has methods annotated with @Ignore\n      final Ignore ignored = m.getAnnotation(Ignore.class);\n      if (ignored != null && !m.getName().equals(\"alwaysIgnoredTestMethod\")) {\n        System.err.println(\"NOTE: Ignoring test method '\" + m.getName() + \"': \" + ignored.value());\n      }\n      // add methods starting with \"test\"\n      final int mod = m.getModifiers();\n      if (m.getAnnotation(Test.class) != null ||\n          (m.getName().startsWith(\"test\") &&\n              !Modifier.isAbstract(mod) &&\n              m.getParameterTypes().length == 0 &&\n              m.getReturnType() == Void.TYPE))\n      {\n        if (Modifier.isStatic(mod))\n          throw new RuntimeException(\"Test methods must not be static.\");\n        testMethods.add(new FrameworkMethod(m));\n      }\n    }\n    \n    if (testMethods.isEmpty()) {\n      throw new RuntimeException(\"No runnable methods!\");\n    }\n    \n    if (TEST_NIGHTLY == false) {\n      removeAnnotatedTests(Nightly.class, \"@nightly\");\n    }\n    if (TEST_WEEKLY == false) {\n      removeAnnotatedTests(Weekly.class, \"@weekly\");\n    }\n    if (TEST_SLOW == false) {\n      removeAnnotatedTests(Slow.class, \"@slow\");\n    }\n    // sort the test methods first before shuffling them, so that the shuffle is consistent\n    // across different implementations that might order the methods different originally.\n    Collections.sort(testMethods, new Comparator<FrameworkMethod>() {\n      @Override\n      public int compare(FrameworkMethod f1, FrameworkMethod f2) {\n        return f1.getName().compareTo(f2.getName());\n      }\n    });\n    Collections.shuffle(testMethods, r);\n    return testMethods;\n  }\n\n","sourceOld":"  @Override\n  protected List<FrameworkMethod> computeTestMethods() {\n    if (testMethods != null)\n      return testMethods;\n    \n    Random r = new Random(runnerSeed);\n    \n    LuceneTestCase.testClassesRun.add(getTestClass().getJavaClass().getSimpleName());\n    testMethods = new ArrayList<FrameworkMethod>();\n    for (Method m : getTestClass().getJavaClass().getMethods()) {\n      // check if the current test's class has methods annotated with @Ignore\n      final Ignore ignored = m.getAnnotation(Ignore.class);\n      if (ignored != null && !m.getName().equals(\"alwaysIgnoredTestMethod\")) {\n        System.err.println(\"NOTE: Ignoring test method '\" + m.getName() + \"': \" + ignored.value());\n      }\n      // add methods starting with \"test\"\n      final int mod = m.getModifiers();\n      if (m.getAnnotation(Test.class) != null ||\n          (m.getName().startsWith(\"test\") &&\n              !Modifier.isAbstract(mod) &&\n              m.getParameterTypes().length == 0 &&\n              m.getReturnType() == Void.TYPE))\n      {\n        if (Modifier.isStatic(mod))\n          throw new RuntimeException(\"Test methods must not be static.\");\n        testMethods.add(new FrameworkMethod(m));\n      }\n    }\n    \n    if (testMethods.isEmpty()) {\n      throw new RuntimeException(\"No runnable methods!\");\n    }\n    \n    if (TEST_NIGHTLY == false) {\n      removeAnnotatedTests(Nightly.class, \"@nightly\");\n    }\n    if (TEST_WEEKLY == false) {\n      removeAnnotatedTests(Weekly.class, \"@weekly\");\n    }\n    if (TEST_SLOW == false) {\n      removeAnnotatedTests(Slow.class, \"@slow\");\n    }\n    // sort the test methods first before shuffling them, so that the shuffle is consistent\n    // across different implementations that might order the methods different originally.\n    Collections.sort(testMethods, new Comparator<FrameworkMethod>() {\n      @Override\n      public int compare(FrameworkMethod f1, FrameworkMethod f2) {\n        return f1.getName().compareTo(f2.getName());\n      }\n    });\n    Collections.shuffle(testMethods, r);\n    return testMethods;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCaseRunner#computeTestMethods().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCaseRunner#computeTestMethods().mjava","sourceNew":"  @Override\n  protected List<FrameworkMethod> computeTestMethods() {\n    if (testMethods != null)\n      return testMethods;\n    \n    Random r = new Random(runnerSeed);\n    \n    testMethods = new ArrayList<FrameworkMethod>();\n    for (Method m : getTestClass().getJavaClass().getMethods()) {\n      // check if the current test's class has methods annotated with @Ignore\n      final Ignore ignored = m.getAnnotation(Ignore.class);\n      if (ignored != null && !m.getName().equals(\"alwaysIgnoredTestMethod\")) {\n        System.err.println(\"NOTE: Ignoring test method '\" + m.getName() + \"': \" + ignored.value());\n      }\n      // add methods starting with \"test\"\n      final int mod = m.getModifiers();\n      if (m.getAnnotation(Test.class) != null ||\n          (m.getName().startsWith(\"test\") &&\n              !Modifier.isAbstract(mod) &&\n              m.getParameterTypes().length == 0 &&\n              m.getReturnType() == Void.TYPE))\n      {\n        if (Modifier.isStatic(mod))\n          throw new RuntimeException(\"Test methods must not be static.\");\n        testMethods.add(new FrameworkMethod(m));\n      }\n    }\n    \n    if (testMethods.isEmpty()) {\n      throw new RuntimeException(\"No runnable methods!\");\n    }\n    \n    if (TEST_NIGHTLY == false) {\n      removeAnnotatedTests(Nightly.class, \"@nightly\");\n    }\n    if (TEST_WEEKLY == false) {\n      removeAnnotatedTests(Weekly.class, \"@weekly\");\n    }\n    if (TEST_SLOW == false) {\n      removeAnnotatedTests(Slow.class, \"@slow\");\n    }\n    // sort the test methods first before shuffling them, so that the shuffle is consistent\n    // across different implementations that might order the methods different originally.\n    Collections.sort(testMethods, new Comparator<FrameworkMethod>() {\n      @Override\n      public int compare(FrameworkMethod f1, FrameworkMethod f2) {\n        return f1.getName().compareTo(f2.getName());\n      }\n    });\n    Collections.shuffle(testMethods, r);\n    return testMethods;\n  }\n\n","sourceOld":"  @Override\n  protected List<FrameworkMethod> computeTestMethods() {\n    if (testMethods != null)\n      return testMethods;\n    \n    Random r = new Random(runnerSeed);\n    \n    LuceneTestCase.testClassesRun.add(getTestClass().getJavaClass().getSimpleName());\n    testMethods = new ArrayList<FrameworkMethod>();\n    for (Method m : getTestClass().getJavaClass().getMethods()) {\n      // check if the current test's class has methods annotated with @Ignore\n      final Ignore ignored = m.getAnnotation(Ignore.class);\n      if (ignored != null && !m.getName().equals(\"alwaysIgnoredTestMethod\")) {\n        System.err.println(\"NOTE: Ignoring test method '\" + m.getName() + \"': \" + ignored.value());\n      }\n      // add methods starting with \"test\"\n      final int mod = m.getModifiers();\n      if (m.getAnnotation(Test.class) != null ||\n          (m.getName().startsWith(\"test\") &&\n              !Modifier.isAbstract(mod) &&\n              m.getParameterTypes().length == 0 &&\n              m.getReturnType() == Void.TYPE))\n      {\n        if (Modifier.isStatic(mod))\n          throw new RuntimeException(\"Test methods must not be static.\");\n        testMethods.add(new FrameworkMethod(m));\n      }\n    }\n    \n    if (testMethods.isEmpty()) {\n      throw new RuntimeException(\"No runnable methods!\");\n    }\n    \n    if (TEST_NIGHTLY == false) {\n      removeAnnotatedTests(Nightly.class, \"@nightly\");\n    }\n    if (TEST_WEEKLY == false) {\n      removeAnnotatedTests(Weekly.class, \"@weekly\");\n    }\n    if (TEST_SLOW == false) {\n      removeAnnotatedTests(Slow.class, \"@slow\");\n    }\n    // sort the test methods first before shuffling them, so that the shuffle is consistent\n    // across different implementations that might order the methods different originally.\n    Collections.sort(testMethods, new Comparator<FrameworkMethod>() {\n      @Override\n      public int compare(FrameworkMethod f1, FrameworkMethod f2) {\n        return f1.getName().compareTo(f2.getName());\n      }\n    });\n    Collections.shuffle(testMethods, r);\n    return testMethods;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCaseRunner#computeTestMethods().mjava","sourceNew":null,"sourceOld":"  @Override\n  protected List<FrameworkMethod> computeTestMethods() {\n    if (testMethods != null)\n      return testMethods;\n    \n    Random r = new Random(runnerSeed);\n    \n    testMethods = new ArrayList<FrameworkMethod>();\n    for (Method m : getTestClass().getJavaClass().getMethods()) {\n      // check if the current test's class has methods annotated with @Ignore\n      final Ignore ignored = m.getAnnotation(Ignore.class);\n      if (ignored != null && !m.getName().equals(\"alwaysIgnoredTestMethod\")) {\n        System.err.println(\"NOTE: Ignoring test method '\" + m.getName() + \"': \" + ignored.value());\n      }\n      // add methods starting with \"test\"\n      final int mod = m.getModifiers();\n      if (m.getAnnotation(Test.class) != null ||\n          (m.getName().startsWith(\"test\") &&\n              !Modifier.isAbstract(mod) &&\n              m.getParameterTypes().length == 0 &&\n              m.getReturnType() == Void.TYPE))\n      {\n        if (Modifier.isStatic(mod))\n          throw new RuntimeException(\"Test methods must not be static.\");\n        testMethods.add(new FrameworkMethod(m));\n      }\n    }\n    \n    if (testMethods.isEmpty()) {\n      throw new RuntimeException(\"No runnable methods!\");\n    }\n    \n    if (TEST_NIGHTLY == false) {\n      removeAnnotatedTests(Nightly.class, \"@nightly\");\n    }\n    if (TEST_WEEKLY == false) {\n      removeAnnotatedTests(Weekly.class, \"@weekly\");\n    }\n    if (TEST_SLOW == false) {\n      removeAnnotatedTests(Slow.class, \"@slow\");\n    }\n    // sort the test methods first before shuffling them, so that the shuffle is consistent\n    // across different implementations that might order the methods different originally.\n    Collections.sort(testMethods, new Comparator<FrameworkMethod>() {\n      @Override\n      public int compare(FrameworkMethod f1, FrameworkMethod f2) {\n        return f1.getName().compareTo(f2.getName());\n      }\n    });\n    Collections.shuffle(testMethods, r);\n    return testMethods;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","1b6d24a43afa23be4e3a366300f50af467daef1d"],"1b6d24a43afa23be4e3a366300f50af467daef1d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["1b6d24a43afa23be4e3a366300f50af467daef1d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"1b6d24a43afa23be4e3a366300f50af467daef1d":["38e3b736c7ca086d61b7dbb841c905ee115490da","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["38e3b736c7ca086d61b7dbb841c905ee115490da","1b6d24a43afa23be4e3a366300f50af467daef1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}