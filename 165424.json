{"path":"lucene/queries/src/java/org/apache/lucene/queries/ChainedFilter#initialResult(AtomicReaderContext,int,int[]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/ChainedFilter#initialResult(AtomicReaderContext,int,int[]).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/ChainedFilter#initialResult(AtomicReaderContext,int,int[]).mjava","sourceNew":"  private OpenBitSetDISI initialResult(AtomicReaderContext context, int logic, int[] index)\n      throws IOException {\n    AtomicReader reader = context.reader();\n    OpenBitSetDISI result;\n    /**\n     * First AND operation takes place against a completely false\n     * bitset and will always return zero results.\n     */\n    if (logic == AND) {\n      result = new OpenBitSetDISI(getDISI(chain[index[0]], context), reader.maxDoc());\n      ++index[0];\n    } else if (logic == ANDNOT) {\n      result = new OpenBitSetDISI(getDISI(chain[index[0]], context), reader.maxDoc());\n      result.flip(0, reader.maxDoc()); // NOTE: may set bits for deleted docs.\n      ++index[0];\n    } else {\n      result = new OpenBitSetDISI(reader.maxDoc());\n    }\n    return result;\n  }\n\n","sourceOld":"  private OpenBitSetDISI initialResult(AtomicReaderContext context, int logic, int[] index)\n      throws IOException {\n    AtomicReader reader = context.reader();\n    OpenBitSetDISI result;\n    /**\n     * First AND operation takes place against a completely false\n     * bitset and will always return zero results.\n     */\n    if (logic == AND) {\n      result = new OpenBitSetDISI(getDISI(chain[index[0]], context), reader.maxDoc());\n      ++index[0];\n    } else if (logic == ANDNOT) {\n      result = new OpenBitSetDISI(getDISI(chain[index[0]], context), reader.maxDoc());\n      result.flip(0, reader.maxDoc()); // NOTE: may set bits for deleted docs.\n      ++index[0];\n    } else {\n      result = new OpenBitSetDISI(reader.maxDoc());\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3995f83351082af8ae83bb017e63c56818fc1568","date":1392047063,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/ChainedFilter#initialResult(AtomicReaderContext,int,int[]).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/ChainedFilter#initialResult(AtomicReaderContext,int,int[]).mjava","sourceNew":"  private FixedBitSet initialResult(AtomicReaderContext context, int logic, int[] index)\n      throws IOException {\n    AtomicReader reader = context.reader();\n    FixedBitSet result = new FixedBitSet(reader.maxDoc());\n    if (logic == AND) {\n      result.or(getDISI(chain[index[0]], context));\n      ++index[0];\n    } else if (logic == ANDNOT) {\n      result.or(getDISI(chain[index[0]], context));\n      result.flip(0, reader.maxDoc()); // NOTE: may set bits for deleted docs.\n      ++index[0];\n    }\n    return result;\n  }\n\n","sourceOld":"  private OpenBitSetDISI initialResult(AtomicReaderContext context, int logic, int[] index)\n      throws IOException {\n    AtomicReader reader = context.reader();\n    OpenBitSetDISI result;\n    /**\n     * First AND operation takes place against a completely false\n     * bitset and will always return zero results.\n     */\n    if (logic == AND) {\n      result = new OpenBitSetDISI(getDISI(chain[index[0]], context), reader.maxDoc());\n      ++index[0];\n    } else if (logic == ANDNOT) {\n      result = new OpenBitSetDISI(getDISI(chain[index[0]], context), reader.maxDoc());\n      result.flip(0, reader.maxDoc()); // NOTE: may set bits for deleted docs.\n      ++index[0];\n    } else {\n      result = new OpenBitSetDISI(reader.maxDoc());\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/ChainedFilter#initialResult(AtomicReaderContext,int,int[]).mjava","sourceNew":null,"sourceOld":"  private FixedBitSet initialResult(AtomicReaderContext context, int logic, int[] index)\n      throws IOException {\n    AtomicReader reader = context.reader();\n    FixedBitSet result = new FixedBitSet(reader.maxDoc());\n    if (logic == AND) {\n      result.or(getDISI(chain[index[0]], context));\n      ++index[0];\n    } else if (logic == ANDNOT) {\n      result.or(getDISI(chain[index[0]], context));\n      result.flip(0, reader.maxDoc()); // NOTE: may set bits for deleted docs.\n      ++index[0];\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["3995f83351082af8ae83bb017e63c56818fc1568"],"3995f83351082af8ae83bb017e63c56818fc1568":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["3995f83351082af8ae83bb017e63c56818fc1568"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3995f83351082af8ae83bb017e63c56818fc1568":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}