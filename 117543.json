{"path":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestPointFieldFacetField(String,String,String[]).mjava","commits":[{"id":"17e844d4f9ba6804f10747d7e51e83a9a8868c94","date":1500054875,"type":1,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestPointFieldFacetField(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldFacetField(String,String,String[]).mjava","sourceNew":"  private void doTestPointFieldFacetField(String nonDocValuesField, String docValuesField, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 10;\n    \n    assertFalse(h.getCore().getLatestSchema().getField(docValuesField).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    \n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), docValuesField, numbers[i], nonDocValuesField, numbers[i]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n    assertU(adoc(\"id\", \"10\", docValuesField, numbers[1], nonDocValuesField, numbers[1]));\n    \n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='11']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"Can't facet on a PointField without docValues\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDocValuesField, \"facet\", \"true\", \"facet.field\", nonDocValuesField), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","sourceOld":"  private void testPointFieldFacetField(String nonDocValuesField, String docValuesField, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 10;\n    \n    assertFalse(h.getCore().getLatestSchema().getField(docValuesField).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    \n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), docValuesField, numbers[i], nonDocValuesField, numbers[i]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n    assertU(adoc(\"id\", \"10\", docValuesField, numbers[1], nonDocValuesField, numbers[1]));\n    \n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='11']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"Can't facet on a PointField without docValues\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDocValuesField, \"facet\", \"true\", \"facet.field\", nonDocValuesField), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaf90fc29510e72665ac7934f34c3d1c25efad64","date":1500354819,"type":1,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestPointFieldFacetField(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldFacetField(String,String,String[]).mjava","sourceNew":"  private void doTestPointFieldFacetField(String nonDocValuesField, String docValuesField, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 10;\n    \n    assertFalse(h.getCore().getLatestSchema().getField(docValuesField).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    \n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), docValuesField, numbers[i], nonDocValuesField, numbers[i]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n    assertU(adoc(\"id\", \"10\", docValuesField, numbers[1], nonDocValuesField, numbers[1]));\n    \n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='11']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"Can't facet on a PointField without docValues\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDocValuesField, \"facet\", \"true\", \"facet.field\", nonDocValuesField), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","sourceOld":"  private void testPointFieldFacetField(String nonDocValuesField, String docValuesField, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 10;\n    \n    assertFalse(h.getCore().getLatestSchema().getField(docValuesField).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    \n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), docValuesField, numbers[i], nonDocValuesField, numbers[i]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n    assertU(adoc(\"id\", \"10\", docValuesField, numbers[1], nonDocValuesField, numbers[1]));\n    \n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='11']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"Can't facet on a PointField without docValues\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDocValuesField, \"facet\", \"true\", \"facet.field\", nonDocValuesField), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aaf90fc29510e72665ac7934f34c3d1c25efad64":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e844d4f9ba6804f10747d7e51e83a9a8868c94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e844d4f9ba6804f10747d7e51e83a9a8868c94"]},"commit2Childs":{"aaf90fc29510e72665ac7934f34c3d1c25efad64":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aaf90fc29510e72665ac7934f34c3d1c25efad64","17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"17e844d4f9ba6804f10747d7e51e83a9a8868c94":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}