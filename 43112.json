{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#getValueForNormalization().mjava","commits":[{"id":"a18a03f140cbd3f78694787c9f98cf452aab7b7f","date":1423241474,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#getValueForNormalization().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public float getValueForNormalization() throws IOException {\n    float sum = 0.0f;\n    for (int i = 0 ; i < weights.size(); i++) {\n      // call sumOfSquaredWeights for all clauses in case of side effects\n      float s = weights.get(i).getValueForNormalization();         // sum sub weights\n      if (!query.clauses().get(i).isProhibited()) {\n        // only add to sum for non-prohibited clauses\n        sum += s;\n      }\n    }\n\n    sum *= query.getBoost() * query.getBoost();             // boost each sub-weight\n\n    return sum ;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25f698887111a682424e759ba36083180899a1fd","date":1423588899,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#getValueForNormalization().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#getValueForNormalization().mjava","sourceNew":"  @Override\n  public float getValueForNormalization() throws IOException {\n    float sum = 0.0f;\n    for (int i = 0 ; i < weights.size(); i++) {\n      // call sumOfSquaredWeights for all clauses in case of side effects\n      float s = weights.get(i).getValueForNormalization();         // sum sub weights\n      if (query.clauses().get(i).isScoring()) {\n        // only add to sum for scoring clauses\n        sum += s;\n      }\n    }\n\n    sum *= query.getBoost() * query.getBoost();             // boost each sub-weight\n\n    return sum ;\n  }\n\n","sourceOld":"  @Override\n  public float getValueForNormalization() throws IOException {\n    float sum = 0.0f;\n    for (int i = 0 ; i < weights.size(); i++) {\n      // call sumOfSquaredWeights for all clauses in case of side effects\n      float s = weights.get(i).getValueForNormalization();         // sum sub weights\n      if (!query.clauses().get(i).isProhibited()) {\n        // only add to sum for non-prohibited clauses\n        sum += s;\n      }\n    }\n\n    sum *= query.getBoost() * query.getBoost();             // boost each sub-weight\n\n    return sum ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#getValueForNormalization().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#getValueForNormalization().mjava","sourceNew":"  @Override\n  public float getValueForNormalization() throws IOException {\n    float sum = 0.0f;\n    int i = 0;\n    for (BooleanClause clause : query) {\n      // call sumOfSquaredWeights for all clauses in case of side effects\n      float s = weights.get(i).getValueForNormalization();         // sum sub weights\n      if (clause.isScoring()) {\n        // only add to sum for scoring clauses\n        sum += s;\n      }\n      i += 1;\n    }\n\n    sum *= query.getBoost() * query.getBoost();             // boost each sub-weight\n\n    return sum ;\n  }\n\n","sourceOld":"  @Override\n  public float getValueForNormalization() throws IOException {\n    float sum = 0.0f;\n    for (int i = 0 ; i < weights.size(); i++) {\n      // call sumOfSquaredWeights for all clauses in case of side effects\n      float s = weights.get(i).getValueForNormalization();         // sum sub weights\n      if (query.clauses().get(i).isScoring()) {\n        // only add to sum for scoring clauses\n        sum += s;\n      }\n    }\n\n    sum *= query.getBoost() * query.getBoost();             // boost each sub-weight\n\n    return sum ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#getValueForNormalization().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#getValueForNormalization().mjava","sourceNew":"  @Override\n  public float getValueForNormalization() throws IOException {\n    float sum = 0.0f;\n    int i = 0;\n    for (BooleanClause clause : query) {\n      // call sumOfSquaredWeights for all clauses in case of side effects\n      float s = weights.get(i).getValueForNormalization();         // sum sub weights\n      if (clause.isScoring()) {\n        // only add to sum for scoring clauses\n        sum += s;\n      }\n      i += 1;\n    }\n\n    sum *= boost * boost; // boost each sub-weight\n\n    return sum ;\n  }\n\n","sourceOld":"  @Override\n  public float getValueForNormalization() throws IOException {\n    float sum = 0.0f;\n    int i = 0;\n    for (BooleanClause clause : query) {\n      // call sumOfSquaredWeights for all clauses in case of side effects\n      float s = weights.get(i).getValueForNormalization();         // sum sub weights\n      if (clause.isScoring()) {\n        // only add to sum for scoring clauses\n        sum += s;\n      }\n      i += 1;\n    }\n\n    sum *= query.getBoost() * query.getBoost();             // boost each sub-weight\n\n    return sum ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8e73be6d7bc69f9c149bebd6b66b5f0ef56a857","date":1441700656,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#getValueForNormalization().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#getValueForNormalization().mjava","sourceNew":"  @Override\n  public float getValueForNormalization() throws IOException {\n    float sum = 0.0f;\n    int i = 0;\n    for (BooleanClause clause : query) {\n      // call sumOfSquaredWeights for all clauses in case of side effects\n      float s = weights.get(i).getValueForNormalization();         // sum sub weights\n      if (clause.isScoring()) {\n        // only add to sum for scoring clauses\n        sum += s;\n      }\n      i += 1;\n    }\n\n    return sum ;\n  }\n\n","sourceOld":"  @Override\n  public float getValueForNormalization() throws IOException {\n    float sum = 0.0f;\n    int i = 0;\n    for (BooleanClause clause : query) {\n      // call sumOfSquaredWeights for all clauses in case of side effects\n      float s = weights.get(i).getValueForNormalization();         // sum sub weights\n      if (clause.isScoring()) {\n        // only add to sum for scoring clauses\n        sum += s;\n      }\n      i += 1;\n    }\n\n    sum *= boost * boost; // boost each sub-weight\n\n    return sum ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#getValueForNormalization().mjava","sourceNew":null,"sourceOld":"  @Override\n  public float getValueForNormalization() throws IOException {\n    float sum = 0.0f;\n    int i = 0;\n    for (BooleanClause clause : query) {\n      // call sumOfSquaredWeights for all clauses in case of side effects\n      float s = weights.get(i).getValueForNormalization();         // sum sub weights\n      if (clause.isScoring()) {\n        // only add to sum for scoring clauses\n        sum += s;\n      }\n      i += 1;\n    }\n\n    return sum ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#getValueForNormalization().mjava","sourceNew":null,"sourceOld":"  @Override\n  public float getValueForNormalization() throws IOException {\n    float sum = 0.0f;\n    int i = 0;\n    for (BooleanClause clause : query) {\n      // call sumOfSquaredWeights for all clauses in case of side effects\n      float s = weights.get(i).getValueForNormalization();         // sum sub weights\n      if (clause.isScoring()) {\n        // only add to sum for scoring clauses\n        sum += s;\n      }\n      i += 1;\n    }\n\n    return sum ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["25f698887111a682424e759ba36083180899a1fd"],"c8e73be6d7bc69f9c149bebd6b66b5f0ef56a857":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["c8e73be6d7bc69f9c149bebd6b66b5f0ef56a857"],"a18a03f140cbd3f78694787c9f98cf452aab7b7f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"25f698887111a682424e759ba36083180899a1fd":["a18a03f140cbd3f78694787c9f98cf452aab7b7f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c8e73be6d7bc69f9c149bebd6b66b5f0ef56a857","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"c8e73be6d7bc69f9c149bebd6b66b5f0ef56a857":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a18a03f140cbd3f78694787c9f98cf452aab7b7f"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["c8e73be6d7bc69f9c149bebd6b66b5f0ef56a857"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a18a03f140cbd3f78694787c9f98cf452aab7b7f":["25f698887111a682424e759ba36083180899a1fd"],"25f698887111a682424e759ba36083180899a1fd":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}