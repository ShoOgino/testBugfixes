{"path":"src/java/org/apache/lucene/search/BooleanScorer2#countingDisjunctionSumScorer(List,int).mjava","commits":[{"id":"b6bffc7c3c9ddfcefe91b728c0680af2a3a96444","date":1132159199,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#countingDisjunctionSumScorer(List,int).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#countingDisjunctionSumScorer(List).mjava","sourceNew":"  private Scorer countingDisjunctionSumScorer(List scorers,\n                                              int minMrShouldMatch)\n  // each scorer from the list counted as a single matcher\n  {\n    return new DisjunctionSumScorer(scorers, minMrShouldMatch) {\n      private int lastScoredDoc = -1;\n      public float score() throws IOException {\n        if (doc() > lastScoredDoc) {\n          lastScoredDoc = doc();\n          coordinator.nrMatchers += super.nrMatchers;\n        }\n        return super.score();\n      }\n    };\n  }\n\n","sourceOld":"  private Scorer countingDisjunctionSumScorer(List scorers)\n  // each scorer from the list counted as a single matcher\n  {\n    return new DisjunctionSumScorer(scorers) {\n      private int lastScoredDoc = -1;\n      public float score() throws IOException {\n        if (doc() > lastScoredDoc) {\n          lastScoredDoc = doc();\n          coordinator.nrMatchers += super.nrMatchers;\n        }\n        return super.score();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fd58432f55321d0a48511242c1830dc12680132","date":1150924313,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#countingDisjunctionSumScorer(List,int).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#countingDisjunctionSumScorer(List,int).mjava","sourceNew":"  private Scorer countingDisjunctionSumScorer(List scorers,\n                                              int minMrShouldMatch)\n  // each scorer from the list counted as a single matcher\n  {\n    return new DisjunctionSumScorer(scorers, minMrShouldMatch) {\n      private int lastScoredDoc = -1;\n      public float score() throws IOException {\n        if (this.doc() > lastScoredDoc) {\n          lastScoredDoc = this.doc();\n          coordinator.nrMatchers += super.nrMatchers;\n        }\n        return super.score();\n      }\n    };\n  }\n\n","sourceOld":"  private Scorer countingDisjunctionSumScorer(List scorers,\n                                              int minMrShouldMatch)\n  // each scorer from the list counted as a single matcher\n  {\n    return new DisjunctionSumScorer(scorers, minMrShouldMatch) {\n      private int lastScoredDoc = -1;\n      public float score() throws IOException {\n        if (doc() > lastScoredDoc) {\n          lastScoredDoc = doc();\n          coordinator.nrMatchers += super.nrMatchers;\n        }\n        return super.score();\n      }\n    };\n  }\n\n","bugFix":["932db587e9455a3b90b120d2aa13d5e52dc2558e"],"bugIntro":["facd440f562ba04187b82c36465181d6ba7030fa"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"76349ae49451ab1e1e63e8eeb254f82684b1da25","date":1176847207,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#countingDisjunctionSumScorer(List,int).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#countingDisjunctionSumScorer(List,int).mjava","sourceNew":"  private Scorer countingDisjunctionSumScorer(final List scorers,\n                                              int minNrShouldMatch)\n  // each scorer from the list counted as a single matcher\n  {\n    return new DisjunctionSumScorer(scorers, minNrShouldMatch) {\n      private int lastScoredDoc = -1;\n      public float score() throws IOException {\n        if (this.doc() > lastScoredDoc) {\n          lastScoredDoc = this.doc();\n          coordinator.nrMatchers += super.nrMatchers;\n        }\n        return super.score();\n      }\n    };\n  }\n\n","sourceOld":"  private Scorer countingDisjunctionSumScorer(List scorers,\n                                              int minMrShouldMatch)\n  // each scorer from the list counted as a single matcher\n  {\n    return new DisjunctionSumScorer(scorers, minMrShouldMatch) {\n      private int lastScoredDoc = -1;\n      public float score() throws IOException {\n        if (this.doc() > lastScoredDoc) {\n          lastScoredDoc = this.doc();\n          coordinator.nrMatchers += super.nrMatchers;\n        }\n        return super.score();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"facd440f562ba04187b82c36465181d6ba7030fa","date":1181183679,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#countingDisjunctionSumScorer(List,int).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#countingDisjunctionSumScorer(List,int).mjava","sourceNew":"  private Scorer countingDisjunctionSumScorer(final List scorers,\n                                              int minNrShouldMatch)\n  // each scorer from the list counted as a single matcher\n  {\n    return new DisjunctionSumScorer(scorers, minNrShouldMatch) {\n      private int lastScoredDoc = -1;\n      public float score() throws IOException {\n        if (this.doc() >= lastScoredDoc) {\n          lastScoredDoc = this.doc();\n          coordinator.nrMatchers += super.nrMatchers;\n        }\n        return super.score();\n      }\n    };\n  }\n\n","sourceOld":"  private Scorer countingDisjunctionSumScorer(final List scorers,\n                                              int minNrShouldMatch)\n  // each scorer from the list counted as a single matcher\n  {\n    return new DisjunctionSumScorer(scorers, minNrShouldMatch) {\n      private int lastScoredDoc = -1;\n      public float score() throws IOException {\n        if (this.doc() > lastScoredDoc) {\n          lastScoredDoc = this.doc();\n          coordinator.nrMatchers += super.nrMatchers;\n        }\n        return super.score();\n      }\n    };\n  }\n\n","bugFix":["3fd58432f55321d0a48511242c1830dc12680132"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7be534ca83a593a45a836cbffd544f2671d9ca60","date":1237394690,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#countingDisjunctionSumScorer(List,int).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#countingDisjunctionSumScorer(List,int).mjava","sourceNew":"  private Scorer countingDisjunctionSumScorer(final List scorers,\n                                              int minNrShouldMatch) throws IOException\n  // each scorer from the list counted as a single matcher\n  {\n    return new DisjunctionSumScorer(scorers, minNrShouldMatch) {\n      private int lastScoredDoc = -1;\n      public float score() throws IOException {\n        if (this.doc() >= lastScoredDoc) {\n          lastScoredDoc = this.doc();\n          coordinator.nrMatchers += super.nrMatchers;\n        }\n        return super.score();\n      }\n    };\n  }\n\n","sourceOld":"  private Scorer countingDisjunctionSumScorer(final List scorers,\n                                              int minNrShouldMatch)\n  // each scorer from the list counted as a single matcher\n  {\n    return new DisjunctionSumScorer(scorers, minNrShouldMatch) {\n      private int lastScoredDoc = -1;\n      public float score() throws IOException {\n        if (this.doc() >= lastScoredDoc) {\n          lastScoredDoc = this.doc();\n          coordinator.nrMatchers += super.nrMatchers;\n        }\n        return super.score();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc","date":1241865401,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#countingDisjunctionSumScorer(List,int).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#countingDisjunctionSumScorer(List,int).mjava","sourceNew":"  private Scorer countingDisjunctionSumScorer(final List scorers,\n      int minNrShouldMatch) throws IOException {\n    // each scorer from the list counted as a single matcher\n    return new DisjunctionSumScorer(scorers, minNrShouldMatch) {\n      private int lastScoredDoc = -1;\n      // Save the score of lastScoredDoc, so that we don't compute it more than\n      // once in score().\n      private float lastDocScore = Float.NaN;\n      public float score() throws IOException {\n        int doc = doc();\n        if (doc >= lastScoredDoc) {\n          if (doc > lastScoredDoc) {\n            lastDocScore = super.score();\n            lastScoredDoc = doc;\n          }\n          coordinator.nrMatchers += super.nrMatchers;\n        }\n        return lastDocScore;\n      }\n    };\n  }\n\n","sourceOld":"  private Scorer countingDisjunctionSumScorer(final List scorers,\n                                              int minNrShouldMatch) throws IOException\n  // each scorer from the list counted as a single matcher\n  {\n    return new DisjunctionSumScorer(scorers, minNrShouldMatch) {\n      private int lastScoredDoc = -1;\n      public float score() throws IOException {\n        if (this.doc() >= lastScoredDoc) {\n          lastScoredDoc = this.doc();\n          coordinator.nrMatchers += super.nrMatchers;\n        }\n        return super.score();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30a558487f2298c2c19ceca9103c1b6865d64708","date":1244393921,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#countingDisjunctionSumScorer(List,int).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#countingDisjunctionSumScorer(List,int).mjava","sourceNew":"  private Scorer countingDisjunctionSumScorer(final List scorers,\n      int minNrShouldMatch) throws IOException {\n    // each scorer from the list counted as a single matcher\n    return new DisjunctionSumScorer(scorers, minNrShouldMatch) {\n      private int lastScoredDoc = -1;\n      // Save the score of lastScoredDoc, so that we don't compute it more than\n      // once in score().\n      private float lastDocScore = Float.NaN;\n      public float score() throws IOException {\n        int doc = docID();\n        if (doc >= lastScoredDoc) {\n          if (doc > lastScoredDoc) {\n            lastDocScore = super.score();\n            lastScoredDoc = doc;\n          }\n          coordinator.nrMatchers += super.nrMatchers;\n        }\n        return lastDocScore;\n      }\n    };\n  }\n\n","sourceOld":"  private Scorer countingDisjunctionSumScorer(final List scorers,\n      int minNrShouldMatch) throws IOException {\n    // each scorer from the list counted as a single matcher\n    return new DisjunctionSumScorer(scorers, minNrShouldMatch) {\n      private int lastScoredDoc = -1;\n      // Save the score of lastScoredDoc, so that we don't compute it more than\n      // once in score().\n      private float lastDocScore = Float.NaN;\n      public float score() throws IOException {\n        int doc = doc();\n        if (doc >= lastScoredDoc) {\n          if (doc > lastScoredDoc) {\n            lastDocScore = super.score();\n            lastScoredDoc = doc;\n          }\n          coordinator.nrMatchers += super.nrMatchers;\n        }\n        return lastDocScore;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc","date":1255773182,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#countingDisjunctionSumScorer(List[Scorer],int).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#countingDisjunctionSumScorer(List,int).mjava","sourceNew":"  private Scorer countingDisjunctionSumScorer(final List<Scorer> scorers,\n      int minNrShouldMatch) throws IOException {\n    // each scorer from the list counted as a single matcher\n    return new DisjunctionSumScorer(scorers, minNrShouldMatch) {\n      private int lastScoredDoc = -1;\n      // Save the score of lastScoredDoc, so that we don't compute it more than\n      // once in score().\n      private float lastDocScore = Float.NaN;\n      public float score() throws IOException {\n        int doc = docID();\n        if (doc >= lastScoredDoc) {\n          if (doc > lastScoredDoc) {\n            lastDocScore = super.score();\n            lastScoredDoc = doc;\n          }\n          coordinator.nrMatchers += super.nrMatchers;\n        }\n        return lastDocScore;\n      }\n    };\n  }\n\n","sourceOld":"  private Scorer countingDisjunctionSumScorer(final List scorers,\n      int minNrShouldMatch) throws IOException {\n    // each scorer from the list counted as a single matcher\n    return new DisjunctionSumScorer(scorers, minNrShouldMatch) {\n      private int lastScoredDoc = -1;\n      // Save the score of lastScoredDoc, so that we don't compute it more than\n      // once in score().\n      private float lastDocScore = Float.NaN;\n      public float score() throws IOException {\n        int doc = docID();\n        if (doc >= lastScoredDoc) {\n          if (doc > lastScoredDoc) {\n            lastDocScore = super.score();\n            lastScoredDoc = doc;\n          }\n          coordinator.nrMatchers += super.nrMatchers;\n        }\n        return lastDocScore;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc":["7be534ca83a593a45a836cbffd544f2671d9ca60"],"facd440f562ba04187b82c36465181d6ba7030fa":["76349ae49451ab1e1e63e8eeb254f82684b1da25"],"30a558487f2298c2c19ceca9103c1b6865d64708":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"76349ae49451ab1e1e63e8eeb254f82684b1da25":["3fd58432f55321d0a48511242c1830dc12680132"],"7be534ca83a593a45a836cbffd544f2671d9ca60":["facd440f562ba04187b82c36465181d6ba7030fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc":["30a558487f2298c2c19ceca9103c1b6865d64708"],"b6bffc7c3c9ddfcefe91b728c0680af2a3a96444":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3fd58432f55321d0a48511242c1830dc12680132":["b6bffc7c3c9ddfcefe91b728c0680af2a3a96444"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc"]},"commit2Childs":{"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc":["30a558487f2298c2c19ceca9103c1b6865d64708"],"facd440f562ba04187b82c36465181d6ba7030fa":["7be534ca83a593a45a836cbffd544f2671d9ca60"],"30a558487f2298c2c19ceca9103c1b6865d64708":["b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc"],"76349ae49451ab1e1e63e8eeb254f82684b1da25":["facd440f562ba04187b82c36465181d6ba7030fa"],"7be534ca83a593a45a836cbffd544f2671d9ca60":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b6bffc7c3c9ddfcefe91b728c0680af2a3a96444"],"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b6bffc7c3c9ddfcefe91b728c0680af2a3a96444":["3fd58432f55321d0a48511242c1830dc12680132"],"3fd58432f55321d0a48511242c1830dc12680132":["76349ae49451ab1e1e63e8eeb254f82684b1da25"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}