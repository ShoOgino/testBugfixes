{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#streamTests().mjava","commits":[{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#streamTests().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#streamTests().mjava","sourceNew":"  @Test\n  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n    Map params = null;\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,2,1,3,4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testSpacesInParams();\n    testNonePartitionKeys();\n    testTrace();\n    testUniqueStream();\n    testRankStream();\n    testMergeStream();\n    testReducerStream();\n    testZeroReducerStream();\n    testParallelEOF();\n    testParallelUniqueStream();\n    testParallelRankStream();\n    testParallelMergeStream();\n    testParallelReducerStream();\n    testZeroParallelReducerStream();\n  }\n\n","sourceOld":"  @Test\n  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    Map params = null;\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,2,1,3,4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testSpacesInParams();\n    testNonePartitionKeys();\n    testTrace();\n    testUniqueStream();\n    testRankStream();\n    testMergeStream();\n    testReducerStream();\n    testZeroReducerStream();\n    testParallelEOF();\n    testParallelUniqueStream();\n    testParallelRankStream();\n    testParallelMergeStream();\n    testParallelReducerStream();\n    testZeroParallelReducerStream();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b2c4e17100e207bc842e56d016b9f91f411304e","date":1434336696,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#streamTests().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#streamTests().mjava","sourceNew":"  @Test\n  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n    Map params = null;\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testSpacesInParams();\n    testNonePartitionKeys();\n    testTrace();\n    testUniqueStream();\n    testRankStream();\n    testMergeStream();\n    testReducerStream();\n    testRollupStream();\n    testZeroReducerStream();\n    testParallelEOF();\n    testParallelUniqueStream();\n    testParallelRankStream();\n    testParallelMergeStream();\n    testParallelRollupStream();\n    testParallelReducerStream();\n    testZeroParallelReducerStream();\n  }\n\n","sourceOld":"  @Test\n  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n    Map params = null;\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,2,1,3,4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testSpacesInParams();\n    testNonePartitionKeys();\n    testTrace();\n    testUniqueStream();\n    testRankStream();\n    testMergeStream();\n    testReducerStream();\n    testZeroReducerStream();\n    testParallelEOF();\n    testParallelUniqueStream();\n    testParallelRankStream();\n    testParallelMergeStream();\n    testParallelReducerStream();\n    testZeroParallelReducerStream();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a55bf71f91aeded06b44ad1abea6666ea168b697","date":1435941127,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#streamTests().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#streamTests().mjava","sourceNew":"  @Test\n  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n    Map params = null;\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testSpacesInParams();\n    testNonePartitionKeys();\n    testTrace();\n    testUniqueStream();\n    testRankStream();\n    testMergeStream();\n    testReducerStream();\n    testRollupStream();\n    testZeroReducerStream();\n    testExceptionStream();\n    testParallelEOF();\n    testParallelUniqueStream();\n    testParallelRankStream();\n    testParallelMergeStream();\n    testParallelRollupStream();\n    testParallelReducerStream();\n    testParallelExceptionStream();\n    testZeroParallelReducerStream();\n  }\n\n","sourceOld":"  @Test\n  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n    Map params = null;\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testSpacesInParams();\n    testNonePartitionKeys();\n    testTrace();\n    testUniqueStream();\n    testRankStream();\n    testMergeStream();\n    testReducerStream();\n    testRollupStream();\n    testZeroReducerStream();\n    testParallelEOF();\n    testParallelUniqueStream();\n    testParallelRankStream();\n    testParallelMergeStream();\n    testParallelRollupStream();\n    testParallelReducerStream();\n    testZeroParallelReducerStream();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a85839a65c6bd6e46a24cc518ce639054d94b97","date":1436235509,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#streamTests().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#streamTests().mjava","sourceNew":"  @Test\n  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n    Map params = null;\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testSpacesInParams();\n    testNonePartitionKeys();\n    testTrace();\n    testUniqueStream();\n    testRankStream();\n    testMergeStream();\n    testReducerStream();\n    testRollupStream();\n    testZeroReducerStream();\n    //testExceptionStream();\n    testParallelEOF();\n    testParallelUniqueStream();\n    testParallelRankStream();\n    testParallelMergeStream();\n    testParallelRollupStream();\n    testParallelReducerStream();\n    //testParallelExceptionStream();\n    testZeroParallelReducerStream();\n  }\n\n","sourceOld":"  @Test\n  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n    Map params = null;\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testSpacesInParams();\n    testNonePartitionKeys();\n    testTrace();\n    testUniqueStream();\n    testRankStream();\n    testMergeStream();\n    testReducerStream();\n    testRollupStream();\n    testZeroReducerStream();\n    testExceptionStream();\n    testParallelEOF();\n    testParallelUniqueStream();\n    testParallelRankStream();\n    testParallelMergeStream();\n    testParallelRollupStream();\n    testParallelReducerStream();\n    testParallelExceptionStream();\n    testZeroParallelReducerStream();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79509167584beb75c0b777d2b701adeb1f06d885","date":1441841855,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#streamTests().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#streamTests().mjava","sourceNew":"  @Test\n  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n    Map params = null;\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testSpacesInParams();\n    testNonePartitionKeys();\n    testTrace();\n    testUniqueStream();\n    testRankStream();\n    testMergeStream();\n    testReducerStream();\n    testRollupStream();\n    testZeroReducerStream();\n    testFacetStream();\n    testSubFacetStream();\n    //testExceptionStream();\n    testParallelEOF();\n    testParallelUniqueStream();\n    testParallelRankStream();\n    testParallelMergeStream();\n    testParallelRollupStream();\n    testParallelReducerStream();\n    //testParallelExceptionStream();\n    testZeroParallelReducerStream();\n  }\n\n","sourceOld":"  @Test\n  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n    Map params = null;\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testSpacesInParams();\n    testNonePartitionKeys();\n    testTrace();\n    testUniqueStream();\n    testRankStream();\n    testMergeStream();\n    testReducerStream();\n    testRollupStream();\n    testZeroReducerStream();\n    //testExceptionStream();\n    testParallelEOF();\n    testParallelUniqueStream();\n    testParallelRankStream();\n    testParallelMergeStream();\n    testParallelRollupStream();\n    testParallelReducerStream();\n    //testParallelExceptionStream();\n    testZeroParallelReducerStream();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0bba396c158346d92cdd5ff662e97ac6166a2147","date":1443059349,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#streamTests().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#streamTests().mjava","sourceNew":"  @Test\n  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n    Map params = null;\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testSpacesInParams();\n    testNonePartitionKeys();\n    testTrace();\n    testUniqueStream();\n    testRankStream();\n    testMergeStream();\n    testReducerStream();\n    testRollupStream();\n    testZeroReducerStream();\n    testFacetStream();\n    testSubFacetStream();\n    testStatsStream();\n    //testExceptionStream();\n    testParallelEOF();\n    testParallelUniqueStream();\n    testParallelRankStream();\n    testParallelMergeStream();\n    testParallelRollupStream();\n    testParallelReducerStream();\n    //testParallelExceptionStream();\n    testZeroParallelReducerStream();\n  }\n\n","sourceOld":"  @Test\n  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n    Map params = null;\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testSpacesInParams();\n    testNonePartitionKeys();\n    testTrace();\n    testUniqueStream();\n    testRankStream();\n    testMergeStream();\n    testReducerStream();\n    testRollupStream();\n    testZeroReducerStream();\n    testFacetStream();\n    testSubFacetStream();\n    //testExceptionStream();\n    testParallelEOF();\n    testParallelUniqueStream();\n    testParallelRankStream();\n    testParallelMergeStream();\n    testParallelRollupStream();\n    testParallelReducerStream();\n    //testParallelExceptionStream();\n    testZeroParallelReducerStream();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a813196a14e626731f76db3b693930509ef6edd","date":1443824338,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#streamTests().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#streamTests().mjava","sourceNew":"  @Test\n  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForRecoveriesToFinish(false);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n    Map params = null;\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testSpacesInParams();\n    testNonePartitionKeys();\n    testTrace();\n    testUniqueStream();\n    testRankStream();\n    testMergeStream();\n    testReducerStream();\n    testRollupStream();\n    testZeroReducerStream();\n    testFacetStream();\n    testSubFacetStream();\n    testStatsStream();\n    //testExceptionStream();\n    testParallelEOF();\n    testParallelUniqueStream();\n    testParallelRankStream();\n    testParallelMergeStream();\n    testParallelRollupStream();\n    testParallelReducerStream();\n    //testParallelExceptionStream();\n    testZeroParallelReducerStream();\n  }\n\n","sourceOld":"  @Test\n  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForThingsToLevelOut(30);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n    Map params = null;\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testSpacesInParams();\n    testNonePartitionKeys();\n    testTrace();\n    testUniqueStream();\n    testRankStream();\n    testMergeStream();\n    testReducerStream();\n    testRollupStream();\n    testZeroReducerStream();\n    testFacetStream();\n    testSubFacetStream();\n    testStatsStream();\n    //testExceptionStream();\n    testParallelEOF();\n    testParallelUniqueStream();\n    testParallelRankStream();\n    testParallelMergeStream();\n    testParallelRollupStream();\n    testParallelReducerStream();\n    //testParallelExceptionStream();\n    testZeroParallelReducerStream();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ab3f83fe809caa1d81a4ed52dfa5372723b348d","date":1458525918,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#streamTests().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#streamTests().mjava","sourceNew":"  @Test\n  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForRecoveriesToFinish(false);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n    Map params = null;\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testSpacesInParams();\n    testNonePartitionKeys();\n    testTrace();\n    testUniqueStream();\n    testRankStream();\n    testMergeStream();\n    testReducerStream();\n    testRollupStream();\n    testZeroReducerStream();\n    testFacetStream();\n    testSubFacetStream();\n    testStatsStream();\n    //testExceptionStream();\n    testDaemonTopicStream();\n    testParallelEOF();\n    testParallelUniqueStream();\n    testParallelRankStream();\n    testParallelMergeStream();\n    testParallelRollupStream();\n    testParallelReducerStream();\n    //testParallelExceptionStream();\n    testZeroParallelReducerStream();\n  }\n\n","sourceOld":"  @Test\n  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForRecoveriesToFinish(false);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n    Map params = null;\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testSpacesInParams();\n    testNonePartitionKeys();\n    testTrace();\n    testUniqueStream();\n    testRankStream();\n    testMergeStream();\n    testReducerStream();\n    testRollupStream();\n    testZeroReducerStream();\n    testFacetStream();\n    testSubFacetStream();\n    testStatsStream();\n    //testExceptionStream();\n    testParallelEOF();\n    testParallelUniqueStream();\n    testParallelRankStream();\n    testParallelMergeStream();\n    testParallelRollupStream();\n    testParallelReducerStream();\n    //testParallelExceptionStream();\n    testZeroParallelReducerStream();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b940572a59da1b42b6c20ab5278155b12816807a","date":1462388874,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#streamTests().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#streamTests().mjava","sourceNew":"  @Test\n  public void streamTests() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map params = null;\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n  }\n\n","sourceOld":"  @Test\n  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForRecoveriesToFinish(false);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n    Map params = null;\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testSpacesInParams();\n    testNonePartitionKeys();\n    testTrace();\n    testUniqueStream();\n    testRankStream();\n    testMergeStream();\n    testReducerStream();\n    testRollupStream();\n    testZeroReducerStream();\n    testFacetStream();\n    testSubFacetStream();\n    testStatsStream();\n    //testExceptionStream();\n    testDaemonTopicStream();\n    testParallelEOF();\n    testParallelUniqueStream();\n    testParallelRankStream();\n    testParallelMergeStream();\n    testParallelRollupStream();\n    testParallelReducerStream();\n    //testParallelExceptionStream();\n    testZeroParallelReducerStream();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd78ba595fa6cdd7fff930f26d154d13a823fa47","date":1462400514,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#streamTests().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#streamTests().mjava","sourceNew":"  @Test\n  public void streamTests() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map params = null;\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n  }\n\n","sourceOld":"  @Test\n  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForRecoveriesToFinish(false);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n    Map params = null;\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testSpacesInParams();\n    testNonePartitionKeys();\n    testTrace();\n    testUniqueStream();\n    testRankStream();\n    testMergeStream();\n    testReducerStream();\n    testRollupStream();\n    testZeroReducerStream();\n    testFacetStream();\n    testSubFacetStream();\n    testStatsStream();\n    //testExceptionStream();\n    testDaemonTopicStream();\n    testParallelEOF();\n    testParallelUniqueStream();\n    testParallelRankStream();\n    testParallelMergeStream();\n    testParallelRollupStream();\n    testParallelReducerStream();\n    //testParallelExceptionStream();\n    testZeroParallelReducerStream();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#streamTests().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#streamTests().mjava","sourceNew":"  @Test\n  public void streamTests() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map params = null;\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n  }\n\n","sourceOld":"  @Test\n  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForRecoveriesToFinish(false);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n    Map params = null;\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testSpacesInParams();\n    testNonePartitionKeys();\n    testTrace();\n    testUniqueStream();\n    testRankStream();\n    testMergeStream();\n    testReducerStream();\n    testRollupStream();\n    testZeroReducerStream();\n    testFacetStream();\n    testSubFacetStream();\n    testStatsStream();\n    //testExceptionStream();\n    testDaemonTopicStream();\n    testParallelEOF();\n    testParallelUniqueStream();\n    testParallelRankStream();\n    testParallelMergeStream();\n    testParallelRollupStream();\n    testParallelReducerStream();\n    //testParallelExceptionStream();\n    testZeroParallelReducerStream();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#streamTests().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#streamTests().mjava","sourceNew":"  @Test\n  public void streamTests() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map params = null;\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n  }\n\n","sourceOld":"  @Test\n  public void streamTests() throws Exception {\n    assertNotNull(cloudClient);\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n\n    waitForRecoveriesToFinish(false);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n    Map params = null;\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n    del(\"*:*\");\n    commit();\n\n    testTuple();\n    testSpacesInParams();\n    testNonePartitionKeys();\n    testTrace();\n    testUniqueStream();\n    testRankStream();\n    testMergeStream();\n    testReducerStream();\n    testRollupStream();\n    testZeroReducerStream();\n    testFacetStream();\n    testSubFacetStream();\n    testStatsStream();\n    //testExceptionStream();\n    testDaemonTopicStream();\n    testParallelEOF();\n    testParallelUniqueStream();\n    testParallelRankStream();\n    testParallelMergeStream();\n    testParallelRollupStream();\n    testParallelReducerStream();\n    //testParallelExceptionStream();\n    testZeroParallelReducerStream();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"826d15444ddf61716dc768c229cd54b2c2ccce1c","date":1462822652,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#streamTests().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#streamTests().mjava","sourceNew":"  @Test\n  public void streamTests() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n  }\n\n","sourceOld":"  @Test\n  public void streamTests() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map params = null;\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#streamTests().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#streamTests().mjava","sourceNew":"  @Test\n  public void streamTests() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n  }\n\n","sourceOld":"  @Test\n  public void streamTests() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map params = null;\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#streamTests().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#streamTests().mjava","sourceNew":"  @Test\n  public void streamTests() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n  }\n\n","sourceOld":"  @Test\n  public void streamTests() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map params = null;\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#streamTests().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#streamTests().mjava","sourceNew":"  @Test\n  public void streamTests() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n  }\n\n","sourceOld":"  @Test\n  public void streamTests() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map params = null;\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dcd5c85eb915cc76364e331e44a9040a7638d7ca","date":1479107519,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#streamTests().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#streamTests().mjava","sourceNew":"  @Test\n  public void streamTests() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    List<Tuple> tuples = getTuples(stream);\n\n    assertEquals(5,tuples.size());\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n  }\n\n","sourceOld":"  @Test\n  public void streamTests() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8243e301531f97de264740d6afa71de6781dd64","date":1479139589,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#streamTests().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#streamTests().mjava","sourceNew":"  @Test\n  public void streamTests() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    List<Tuple> tuples = getTuples(stream);\n\n    assertEquals(5,tuples.size());\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n  }\n\n","sourceOld":"  @Test\n  public void streamTests() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    List<Tuple> tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assert (tuples.size() == 5);\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c969f15cd04d31e520319c619a445ae21f02d72","date":1479263638,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#streamTests().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#streamTests().mjava","sourceNew":"  @Test\n  public void streamTests() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n    List<Tuple> tuples = getTuples(stream);\n\n    assertEquals(5,tuples.size());\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n  }\n\n","sourceOld":"  @Test\n  public void streamTests() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    List<Tuple> tuples = getTuples(stream);\n\n    assertEquals(5,tuples.size());\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#streamTests().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#streamTests().mjava","sourceNew":"  @Test\n  public void streamTests() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n    List<Tuple> tuples = getTuples(stream);\n\n    assertEquals(5,tuples.size());\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n  }\n\n","sourceOld":"  @Test\n  public void streamTests() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    List<Tuple> tuples = getTuples(stream);\n\n    assertEquals(5,tuples.size());\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c405288c4553ffb50ab8ca5adbdde9881bcec4e4","date":1491938682,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#streamTests().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#streamTests().mjava","sourceNew":"  @Test\n  public void streamTests() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    //Basic CloudSolrStream Test with Descending Sort\n\n    try {\n      SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\");\n      CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n      stream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(stream);\n\n      assertEquals(5, tuples.size());\n      assertOrder(tuples, 4, 3, 2, 1, 0);\n\n      //With Ascending Sort\n      sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n      stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(5, tuples.size());\n      assertOrder(tuples, 0, 1, 2, 3, 4);\n\n\n      //Test compound sort\n      sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i desc\");\n      stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(5, tuples.size());\n      assertOrder(tuples, 2, 0, 1, 3, 4);\n\n\n      sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n      stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(5, tuples.size());\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void streamTests() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n    List<Tuple> tuples = getTuples(stream);\n\n    assertEquals(5,tuples.size());\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#streamTests().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#streamTests().mjava","sourceNew":"  @Test\n  public void streamTests() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    //Basic CloudSolrStream Test with Descending Sort\n\n    try {\n      SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\");\n      CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n      stream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(stream);\n\n      assertEquals(5, tuples.size());\n      assertOrder(tuples, 4, 3, 2, 1, 0);\n\n      //With Ascending Sort\n      sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n      stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(5, tuples.size());\n      assertOrder(tuples, 0, 1, 2, 3, 4);\n\n\n      //Test compound sort\n      sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i desc\");\n      stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(5, tuples.size());\n      assertOrder(tuples, 2, 0, 1, 3, 4);\n\n\n      sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n      stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(5, tuples.size());\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void streamTests() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n\n    //Basic CloudSolrStream Test with Descending Sort\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n    List<Tuple> tuples = getTuples(stream);\n\n    assertEquals(5,tuples.size());\n    assertOrder(tuples, 4, 3, 2, 1, 0);\n\n    //With Ascending Sort\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0,1,2,3,4);\n\n\n    //Test compound sort\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i desc\");\n    stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 2,0,1,3,4);\n\n\n    sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n    stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n    tuples = getTuples(stream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0, 2, 1, 3, 4);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["8c969f15cd04d31e520319c619a445ae21f02d72"],"dcd5c85eb915cc76364e331e44a9040a7638d7ca":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"79509167584beb75c0b777d2b701adeb1f06d885":["4a85839a65c6bd6e46a24cc518ce639054d94b97"],"73450c0955930295d34703e7ddbfc6973b7a121a":["5ab3f83fe809caa1d81a4ed52dfa5372723b348d","b940572a59da1b42b6c20ab5278155b12816807a"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["8c969f15cd04d31e520319c619a445ae21f02d72"],"7b2c4e17100e207bc842e56d016b9f91f411304e":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"b940572a59da1b42b6c20ab5278155b12816807a":["5ab3f83fe809caa1d81a4ed52dfa5372723b348d"],"0bba396c158346d92cdd5ff662e97ac6166a2147":["79509167584beb75c0b777d2b701adeb1f06d885"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["73450c0955930295d34703e7ddbfc6973b7a121a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["73450c0955930295d34703e7ddbfc6973b7a121a","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["5ab3f83fe809caa1d81a4ed52dfa5372723b348d","b940572a59da1b42b6c20ab5278155b12816807a"],"4a85839a65c6bd6e46a24cc518ce639054d94b97":["a55bf71f91aeded06b44ad1abea6666ea168b697"],"a55bf71f91aeded06b44ad1abea6666ea168b697":["7b2c4e17100e207bc842e56d016b9f91f411304e"],"c8243e301531f97de264740d6afa71de6781dd64":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","dcd5c85eb915cc76364e331e44a9040a7638d7ca"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["5ab3f83fe809caa1d81a4ed52dfa5372723b348d","73450c0955930295d34703e7ddbfc6973b7a121a"],"6a813196a14e626731f76db3b693930509ef6edd":["0bba396c158346d92cdd5ff662e97ac6166a2147"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["c8243e301531f97de264740d6afa71de6781dd64","8c969f15cd04d31e520319c619a445ae21f02d72"],"5ab3f83fe809caa1d81a4ed52dfa5372723b348d":["6a813196a14e626731f76db3b693930509ef6edd"],"e66a459d38c1c4a2f97128433dab546f683a9fed":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"8c969f15cd04d31e520319c619a445ae21f02d72":["dcd5c85eb915cc76364e331e44a9040a7638d7ca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c405288c4553ffb50ab8ca5adbdde9881bcec4e4"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["7b2c4e17100e207bc842e56d016b9f91f411304e"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"dcd5c85eb915cc76364e331e44a9040a7638d7ca":["c8243e301531f97de264740d6afa71de6781dd64","8c969f15cd04d31e520319c619a445ae21f02d72"],"79509167584beb75c0b777d2b701adeb1f06d885":["0bba396c158346d92cdd5ff662e97ac6166a2147"],"73450c0955930295d34703e7ddbfc6973b7a121a":["826d15444ddf61716dc768c229cd54b2c2ccce1c","d470c8182e92b264680e34081b75e70a9f2b3c89","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7b2c4e17100e207bc842e56d016b9f91f411304e":["a55bf71f91aeded06b44ad1abea6666ea168b697"],"b940572a59da1b42b6c20ab5278155b12816807a":["73450c0955930295d34703e7ddbfc6973b7a121a","bd78ba595fa6cdd7fff930f26d154d13a823fa47"],"0bba396c158346d92cdd5ff662e97ac6166a2147":["6a813196a14e626731f76db3b693930509ef6edd"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["d470c8182e92b264680e34081b75e70a9f2b3c89","e66a459d38c1c4a2f97128433dab546f683a9fed"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c8243e301531f97de264740d6afa71de6781dd64"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["dcd5c85eb915cc76364e331e44a9040a7638d7ca","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4a85839a65c6bd6e46a24cc518ce639054d94b97":["79509167584beb75c0b777d2b701adeb1f06d885"],"a55bf71f91aeded06b44ad1abea6666ea168b697":["4a85839a65c6bd6e46a24cc518ce639054d94b97"],"c8243e301531f97de264740d6afa71de6781dd64":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["e66a459d38c1c4a2f97128433dab546f683a9fed"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"6a813196a14e626731f76db3b693930509ef6edd":["5ab3f83fe809caa1d81a4ed52dfa5372723b348d"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"5ab3f83fe809caa1d81a4ed52dfa5372723b348d":["73450c0955930295d34703e7ddbfc6973b7a121a","b940572a59da1b42b6c20ab5278155b12816807a","bd78ba595fa6cdd7fff930f26d154d13a823fa47","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"8c969f15cd04d31e520319c619a445ae21f02d72":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","c405288c4553ffb50ab8ca5adbdde9881bcec4e4","a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","e66a459d38c1c4a2f97128433dab546f683a9fed","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}