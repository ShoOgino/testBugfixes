{"path":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/FileUtils#forceDelete(File).mjava","commits":[{"id":"c170e9d4c93c47801b611c5f124a91c5d27e0d73","date":1392824784,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/FileUtils#forceDelete(File).mjava","pathOld":"/dev/null","sourceNew":"  //-----------------------------------------------------------------------\n  /**\n   * Deletes a file. If file is a directory, delete it and all sub-directories.\n   * <p>\n   * The difference between File.delete() and this method are:\n   * <ul>\n   * <li>A directory to be deleted does not have to be empty.</li>\n   * <li>You get exceptions when a file or directory cannot be deleted.\n   *      (java.io.File methods returns a boolean)</li>\n   * </ul>\n   *\n   * @param file  file or directory to delete, must not be <code>null</code>\n   * @throws NullPointerException if the directory is <code>null</code>\n   * @throws FileNotFoundException if the file was not found\n   * @throws IOException in case deletion is unsuccessful\n   */\n  public static void forceDelete(File file) throws IOException {\n      if (file.isDirectory()) {\n          deleteDirectory(file);\n      } else {\n          boolean filePresent = file.exists();\n          if (!file.delete()) {\n              if (!filePresent){\n                  throw new FileNotFoundException(\"File does not exist: \" + file);\n              }\n              String message =\n                  \"Unable to delete file: \" + file;\n              throw new IOException(message);\n          }\n      }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cbc3688252d4a8045d69a164236b2cf87b721f17","date":1409846185,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/FileUtils#forceDelete(File).mjava","pathOld":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/FileUtils#forceDelete(File).mjava","sourceNew":"  //-----------------------------------------------------------------------\n  /**\n   * Deletes a file. If file is a directory, delete it and all sub-directories.\n   * <p>\n   * The difference between File.delete() and this method are:\n   * <ul>\n   * <li>A directory to be deleted does not have to be empty.</li>\n   * <li>You get exceptions when a file or directory cannot be deleted.\n   *      (java.io.File methods returns a boolean)</li>\n   * </ul>\n   *\n   * @param file  file or directory to delete, must not be <code>null</code>\n   * @throws NullPointerException if the directory is <code>null</code>\n   * @throws FileNotFoundException if the file was not found\n   * @throws IOException in case deletion is unsuccessful\n   */\n  public static void forceDelete(File file) throws IOException {\n      if (file.isDirectory()) {\n          deleteDirectory(file);\n      } else {\n          Files.delete(file.toPath());\n      }\n  }\n\n","sourceOld":"  //-----------------------------------------------------------------------\n  /**\n   * Deletes a file. If file is a directory, delete it and all sub-directories.\n   * <p>\n   * The difference between File.delete() and this method are:\n   * <ul>\n   * <li>A directory to be deleted does not have to be empty.</li>\n   * <li>You get exceptions when a file or directory cannot be deleted.\n   *      (java.io.File methods returns a boolean)</li>\n   * </ul>\n   *\n   * @param file  file or directory to delete, must not be <code>null</code>\n   * @throws NullPointerException if the directory is <code>null</code>\n   * @throws FileNotFoundException if the file was not found\n   * @throws IOException in case deletion is unsuccessful\n   */\n  public static void forceDelete(File file) throws IOException {\n      if (file.isDirectory()) {\n          deleteDirectory(file);\n      } else {\n          boolean filePresent = file.exists();\n          if (!file.delete()) {\n              if (!filePresent){\n                  throw new FileNotFoundException(\"File does not exist: \" + file);\n              }\n              String message =\n                  \"Unable to delete file: \" + file;\n              throw new IOException(message);\n          }\n      }\n  }\n\n","bugFix":["c170e9d4c93c47801b611c5f124a91c5d27e0d73"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12109b652e9210b8d58fca47f6c4a725d058a58e","date":1490373076,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/FileUtils#forceDelete(File).mjava","sourceNew":null,"sourceOld":"  //-----------------------------------------------------------------------\n  /**\n   * Deletes a file. If file is a directory, delete it and all sub-directories.\n   * <p>\n   * The difference between File.delete() and this method are:\n   * <ul>\n   * <li>A directory to be deleted does not have to be empty.</li>\n   * <li>You get exceptions when a file or directory cannot be deleted.\n   *      (java.io.File methods returns a boolean)</li>\n   * </ul>\n   *\n   * @param file  file or directory to delete, must not be <code>null</code>\n   * @throws NullPointerException if the directory is <code>null</code>\n   * @throws FileNotFoundException if the file was not found\n   * @throws IOException in case deletion is unsuccessful\n   */\n  public static void forceDelete(File file) throws IOException {\n      if (file.isDirectory()) {\n          deleteDirectory(file);\n      } else {\n          Files.delete(file.toPath());\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe1c4aa9af769a38e878f608070f672efbeac27f","date":1490594650,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/FileUtils#forceDelete(File).mjava","sourceNew":null,"sourceOld":"  //-----------------------------------------------------------------------\n  /**\n   * Deletes a file. If file is a directory, delete it and all sub-directories.\n   * <p>\n   * The difference between File.delete() and this method are:\n   * <ul>\n   * <li>A directory to be deleted does not have to be empty.</li>\n   * <li>You get exceptions when a file or directory cannot be deleted.\n   *      (java.io.File methods returns a boolean)</li>\n   * </ul>\n   *\n   * @param file  file or directory to delete, must not be <code>null</code>\n   * @throws NullPointerException if the directory is <code>null</code>\n   * @throws FileNotFoundException if the file was not found\n   * @throws IOException in case deletion is unsuccessful\n   */\n  public static void forceDelete(File file) throws IOException {\n      if (file.isDirectory()) {\n          deleteDirectory(file);\n      } else {\n          Files.delete(file.toPath());\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c170e9d4c93c47801b611c5f124a91c5d27e0d73":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["c170e9d4c93c47801b611c5f124a91c5d27e0d73"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fe1c4aa9af769a38e878f608070f672efbeac27f":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12109b652e9210b8d58fca47f6c4a725d058a58e"]},"commit2Childs":{"c170e9d4c93c47801b611c5f124a91c5d27e0d73":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["12109b652e9210b8d58fca47f6c4a725d058a58e","fe1c4aa9af769a38e878f608070f672efbeac27f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c170e9d4c93c47801b611c5f124a91c5d27e0d73"],"fe1c4aa9af769a38e878f608070f672efbeac27f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe1c4aa9af769a38e878f608070f672efbeac27f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}