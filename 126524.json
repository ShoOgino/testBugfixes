{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(ThreadAffinityDocumentsWriterThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(ThreadAffinityDocumentsWriterThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(ThreadAffinityDocumentsWriterThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(ThreadAffinityDocumentsWriterThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"088a7ef694fd43d5d9a4d200c4005865f773d1e7","date":1371136274,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(ThreadAffinityDocumentsWriterThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    assertEquals(IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM, conf.getUseCompoundFile());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    getters.add(\"getUseCompoundFile\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(ThreadAffinityDocumentsWriterThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a45bec74b98f6fc05f52770cfb425739e6563960","date":1375119292,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(ThreadAffinityDocumentsWriterThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    assertEquals(IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM, conf.getUseCompoundFile());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    getters.add(\"getUseCompoundFile\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(ThreadAffinityDocumentsWriterThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    assertEquals(IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM, conf.getUseCompoundFile());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    getters.add(\"getUseCompoundFile\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(ThreadAffinityDocumentsWriterThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    assertEquals(IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM, conf.getUseCompoundFile());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    getters.add(\"getUseCompoundFile\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(ThreadAffinityDocumentsWriterThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    assertEquals(IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM, conf.getUseCompoundFile());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    getters.add(\"getUseCompoundFile\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(ThreadAffinityDocumentsWriterThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    assertEquals(IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM, conf.getUseCompoundFile());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    getters.add(\"getUseCompoundFile\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(ThreadAffinityDocumentsWriterThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    assertEquals(IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM, conf.getUseCompoundFile());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    getters.add(\"getUseCompoundFile\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"839ca1793cd9a8eb5bd7c7c62918192d47972f73","date":1399544004,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(DocumentsWriterPerThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    assertEquals(IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM, conf.getUseCompoundFile());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    getters.add(\"getUseCompoundFile\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(ThreadAffinityDocumentsWriterThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    assertEquals(IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM, conf.getUseCompoundFile());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    getters.add(\"getUseCompoundFile\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(DocumentsWriterPerThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    assertEquals(IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM, conf.getUseCompoundFile());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    getters.add(\"getUseCompoundFile\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(DocumentsWriterPerThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    assertEquals(IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM, conf.getUseCompoundFile());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    getters.add(\"getUseCompoundFile\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f86ce8c7390eeb4b24bceee343195d17e92103a1","date":1434276789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(DocumentsWriterPerThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    assertEquals(IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM, conf.getUseCompoundFile());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    getters.add(\"getUseCompoundFile\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(DocumentsWriterPerThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    assertEquals(IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM, conf.getUseCompoundFile());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    getters.add(\"getUseCompoundFile\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"122251c49e5a9fa95f056ea257ae3ab452099fc7","date":1464820065,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(DocumentsWriterPerThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    assertEquals(IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM, conf.getUseCompoundFile());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    getters.add(\"getUseCompoundFile\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(DocumentsWriterPerThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    assertEquals(IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM, conf.getUseCompoundFile());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    getters.add(\"getUseCompoundFile\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","date":1464821470,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(DocumentsWriterPerThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    assertEquals(IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM, conf.getUseCompoundFile());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    getters.add(\"getUseCompoundFile\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(DocumentsWriterPerThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    assertEquals(IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM, conf.getUseCompoundFile());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    getters.add(\"getUseCompoundFile\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6483e4260c08168709c02238ae083a51519a28dd","date":1465117546,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(DocumentsWriterPerThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    assertEquals(IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM, conf.getUseCompoundFile());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    getters.add(\"getUseCompoundFile\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(DocumentsWriterPerThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    assertEquals(IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM, conf.getUseCompoundFile());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    getters.add(\"getUseCompoundFile\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"191128ac5b85671b1671e2c857437694283b6ebf","date":1465297861,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(DocumentsWriterPerThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    assertEquals(IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM, conf.getUseCompoundFile());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    getters.add(\"getUseCompoundFile\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(DocumentsWriterPerThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    assertEquals(IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM, conf.getUseCompoundFile());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    getters.add(\"getUseCompoundFile\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(DocumentsWriterPerThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    assertEquals(IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM, conf.getUseCompoundFile());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    getters.add(\"getUseCompoundFile\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(DocumentsWriterPerThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    assertEquals(IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM, conf.getUseCompoundFile());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    getters.add(\"getUseCompoundFile\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(DocumentsWriterPerThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    assertEquals(IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM, conf.getUseCompoundFile());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    getters.add(\"getUseCompoundFile\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(DocumentsWriterPerThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    assertEquals(IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM, conf.getUseCompoundFile());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    getters.add(\"getUseCompoundFile\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(DocumentsWriterPerThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    assertEquals(IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM, conf.getUseCompoundFile());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    getters.add(\"getUseCompoundFile\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(DocumentsWriterPerThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    assertEquals(IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM, conf.getUseCompoundFile());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    getters.add(\"getUseCompoundFile\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(DocumentsWriterPerThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    assertEquals(IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM, conf.getUseCompoundFile());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    getters.add(\"getUseCompoundFile\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(DocumentsWriterPerThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    assertEquals(IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM, conf.getUseCompoundFile());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    getters.add(\"getUseCompoundFile\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1ea5763a93795952100d48e19c48f19777c552c","date":1512660172,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(DocumentsWriterPerThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    assertEquals(IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM, conf.getUseCompoundFile());\n    assertTrue(conf.isCheckPendingFlushOnUpdate());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    getters.add(\"getUseCompoundFile\");\n    getters.add(\"isCheckPendingFlushOnUpdate\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(DocumentsWriterPerThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    assertEquals(IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM, conf.getUseCompoundFile());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    getters.add(\"getUseCompoundFile\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(DocumentsWriterPerThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    assertEquals(IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM, conf.getUseCompoundFile());\n    assertTrue(conf.isCheckPendingFlushOnUpdate());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    getters.add(\"getUseCompoundFile\");\n    getters.add(\"isCheckPendingFlushOnUpdate\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(DocumentsWriterPerThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    assertEquals(IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM, conf.getUseCompoundFile());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    getters.add(\"getUseCompoundFile\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ee0394b8176abd7c90a4be8c05465be1879db79","date":1522842314,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(DocumentsWriterPerThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    assertEquals(IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM, conf.getUseCompoundFile());\n    assertTrue(conf.isCheckPendingFlushOnUpdate());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    getters.add(\"getUseCompoundFile\");\n    getters.add(\"isCheckPendingFlushOnUpdate\");\n    getters.add(\"getSoftDeletesField\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(DocumentsWriterPerThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    assertEquals(IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM, conf.getUseCompoundFile());\n    assertTrue(conf.isCheckPendingFlushOnUpdate());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    getters.add(\"getUseCompoundFile\");\n    getters.add(\"isCheckPendingFlushOnUpdate\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"264935965977b4a9e2f3920420647072c9c49176","date":1586600626,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    assertEquals(IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM, conf.getUseCompoundFile());\n    assertTrue(conf.isCheckPendingFlushOnUpdate());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    getters.add(\"getUseCompoundFile\");\n    getters.add(\"isCheckPendingFlushOnUpdate\");\n    getters.add(\"getSoftDeletesField\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(DocumentsWriterPerThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    assertEquals(IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM, conf.getUseCompoundFile());\n    assertTrue(conf.isCheckPendingFlushOnUpdate());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    getters.add(\"getUseCompoundFile\");\n    getters.add(\"isCheckPendingFlushOnUpdate\");\n    getters.add(\"getSoftDeletesField\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a6f8af01d9b3067b143bbdc0a492720e2af97cf","date":1600157724,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    assertEquals(IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM, conf.getUseCompoundFile());\n    assertTrue(conf.isCheckPendingFlushOnUpdate());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    getters.add(\"getUseCompoundFile\");\n    getters.add(\"isCheckPendingFlushOnUpdate\");\n    getters.add(\"getSoftDeletesField\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    assertEquals(IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM, conf.getUseCompoundFile());\n    assertTrue(conf.isCheckPendingFlushOnUpdate());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    getters.add(\"getUseCompoundFile\");\n    getters.add(\"isCheckPendingFlushOnUpdate\");\n    getters.add(\"getSoftDeletesField\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"680b6449f09827f58fe987aff279e014c311d966","date":1600247985,"type":3,"author":"noblepaul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    assertEquals(IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM, conf.getUseCompoundFile());\n    assertTrue(conf.isCheckPendingFlushOnUpdate());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    getters.add(\"getUseCompoundFile\");\n    getters.add(\"isCheckPendingFlushOnUpdate\");\n    getters.add(\"getSoftDeletesField\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    assertEquals(IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM, conf.getUseCompoundFile());\n    assertTrue(conf.isCheckPendingFlushOnUpdate());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    getters.add(\"getUseCompoundFile\");\n    getters.add(\"isCheckPendingFlushOnUpdate\");\n    getters.add(\"getSoftDeletesField\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a6f8af01d9b3067b143bbdc0a492720e2af97cf":["264935965977b4a9e2f3920420647072c9c49176"],"f1ea5763a93795952100d48e19c48f19777c552c":["28288370235ed02234a64753cdbf0c6ec096304a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["191128ac5b85671b1671e2c857437694283b6ebf"],"191128ac5b85671b1671e2c857437694283b6ebf":["f86ce8c7390eeb4b24bceee343195d17e92103a1","6483e4260c08168709c02238ae083a51519a28dd"],"680b6449f09827f58fe987aff279e014c311d966":["264935965977b4a9e2f3920420647072c9c49176","7a6f8af01d9b3067b143bbdc0a492720e2af97cf"],"839ca1793cd9a8eb5bd7c7c62918192d47972f73":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"122251c49e5a9fa95f056ea257ae3ab452099fc7":["f86ce8c7390eeb4b24bceee343195d17e92103a1"],"264935965977b4a9e2f3920420647072c9c49176":["5ee0394b8176abd7c90a4be8c05465be1879db79"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a45bec74b98f6fc05f52770cfb425739e6563960"],"a45bec74b98f6fc05f52770cfb425739e6563960":["088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"5ee0394b8176abd7c90a4be8c05465be1879db79":["417142ff08fda9cf0b72d5133e63097a166c6458"],"6483e4260c08168709c02238ae083a51519a28dd":["f86ce8c7390eeb4b24bceee343195d17e92103a1","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["191128ac5b85671b1671e2c857437694283b6ebf","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":["f86ce8c7390eeb4b24bceee343195d17e92103a1","122251c49e5a9fa95f056ea257ae3ab452099fc7"],"28288370235ed02234a64753cdbf0c6ec096304a":["191128ac5b85671b1671e2c857437694283b6ebf","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f86ce8c7390eeb4b24bceee343195d17e92103a1","191128ac5b85671b1671e2c857437694283b6ebf"],"417142ff08fda9cf0b72d5133e63097a166c6458":["28288370235ed02234a64753cdbf0c6ec096304a","f1ea5763a93795952100d48e19c48f19777c552c"],"088a7ef694fd43d5d9a4d200c4005865f773d1e7":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"f86ce8c7390eeb4b24bceee343195d17e92103a1":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["839ca1793cd9a8eb5bd7c7c62918192d47972f73"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["680b6449f09827f58fe987aff279e014c311d966"]},"commit2Childs":{"7a6f8af01d9b3067b143bbdc0a492720e2af97cf":["680b6449f09827f58fe987aff279e014c311d966"],"f1ea5763a93795952100d48e19c48f19777c552c":["417142ff08fda9cf0b72d5133e63097a166c6458"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"191128ac5b85671b1671e2c857437694283b6ebf":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"680b6449f09827f58fe987aff279e014c311d966":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"839ca1793cd9a8eb5bd7c7c62918192d47972f73":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"122251c49e5a9fa95f056ea257ae3ab452099fc7":["b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"264935965977b4a9e2f3920420647072c9c49176":["7a6f8af01d9b3067b143bbdc0a492720e2af97cf","680b6449f09827f58fe987aff279e014c311d966"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["839ca1793cd9a8eb5bd7c7c62918192d47972f73"],"a45bec74b98f6fc05f52770cfb425739e6563960":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"5ee0394b8176abd7c90a4be8c05465be1879db79":["264935965977b4a9e2f3920420647072c9c49176"],"6483e4260c08168709c02238ae083a51519a28dd":["191128ac5b85671b1671e2c857437694283b6ebf"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["f1ea5763a93795952100d48e19c48f19777c552c","417142ff08fda9cf0b72d5133e63097a166c6458"],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":["6483e4260c08168709c02238ae083a51519a28dd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["5ee0394b8176abd7c90a4be8c05465be1879db79"],"088a7ef694fd43d5d9a4d200c4005865f773d1e7":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","a45bec74b98f6fc05f52770cfb425739e6563960"],"f86ce8c7390eeb4b24bceee343195d17e92103a1":["191128ac5b85671b1671e2c857437694283b6ebf","122251c49e5a9fa95f056ea257ae3ab452099fc7","6483e4260c08168709c02238ae083a51519a28dd","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["f86ce8c7390eeb4b24bceee343195d17e92103a1"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}