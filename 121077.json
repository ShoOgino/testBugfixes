{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestOrdinalMappingAtomicReader#buildIndexWithFacets(Directory,Directory,boolean).mjava","commits":[{"id":"eea8c27c2188d3e8ca3bf2d389f1038806956abd","date":1404444860,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestOrdinalMappingAtomicReader#buildIndexWithFacets(Directory,Directory,boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/OrdinalMappingReaderTest#buildIndexWithFacets(Directory,Directory,boolean).mjava","sourceNew":"  private void buildIndexWithFacets(Directory indexDir, Directory taxoDir, boolean asc) throws IOException {\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexDir, config);\n    \n    DirectoryTaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    for (int i = 1; i <= NUM_DOCS; i++) {\n      Document doc = new Document();\n      for (int j = i; j <= NUM_DOCS; j++) {\n        int facetValue = asc ? j: NUM_DOCS - j;\n        doc.add(new FacetField(\"tag\", Integer.toString(facetValue)));\n      }\n      writer.addDocument(facetConfig.build(taxonomyWriter, doc));\n    }\n    taxonomyWriter.commit();\n    taxonomyWriter.close();\n    writer.commit();\n    writer.close();\n  }\n\n","sourceOld":"  private void buildIndexWithFacets(Directory dir, Directory taxDir, boolean asc) throws IOException {\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    \n    DirectoryTaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxDir);\n    for (int i = 1; i <= NUM_DOCS; i++) {\n      Document doc = new Document();\n      for (int j = i; j <= NUM_DOCS; j++) {\n        int facetValue = asc? j: NUM_DOCS - j;\n        doc.add(new FacetField(\"tag\", Integer.toString(facetValue)));\n      }\n      writer.addDocument(facetConfig.build(taxonomyWriter, doc));\n    }\n    taxonomyWriter.commit();\n    taxonomyWriter.close();\n    writer.commit();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da07b17df48cd6809d50473d39ce15f3c54a7773","date":1405858094,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestOrdinalMappingAtomicReader#buildIndexWithFacets(Directory,Directory,boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestOrdinalMappingAtomicReader#buildIndexWithFacets(Directory,Directory,boolean).mjava","sourceNew":"  private void buildIndexWithFacets(Directory indexDir, Directory taxoDir, boolean asc) throws IOException {\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexDir, config);\n    \n    DirectoryTaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    for (int i = 1; i <= NUM_DOCS; i++) {\n      Document doc = new Document();\n      for (int j = i; j <= NUM_DOCS; j++) {\n        int facetValue = asc ? j: NUM_DOCS - j;\n        doc.add(new FacetField(\"tag\", Integer.toString(facetValue)));\n      }\n      // make sure OrdinalMappingAtomicReader ignores non-facet fields\n      doc.add(new BinaryDocValuesField(\"bdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new BinaryDocValuesField(\"cbdv\", new BytesRef(Integer.toString(i*2))));\n      writer.addDocument(facetConfig.build(taxonomyWriter, doc));\n    }\n    taxonomyWriter.commit();\n    taxonomyWriter.close();\n    writer.commit();\n    writer.close();\n  }\n\n","sourceOld":"  private void buildIndexWithFacets(Directory indexDir, Directory taxoDir, boolean asc) throws IOException {\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexDir, config);\n    \n    DirectoryTaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    for (int i = 1; i <= NUM_DOCS; i++) {\n      Document doc = new Document();\n      for (int j = i; j <= NUM_DOCS; j++) {\n        int facetValue = asc ? j: NUM_DOCS - j;\n        doc.add(new FacetField(\"tag\", Integer.toString(facetValue)));\n      }\n      writer.addDocument(facetConfig.build(taxonomyWriter, doc));\n    }\n    taxonomyWriter.commit();\n    taxonomyWriter.close();\n    writer.commit();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":["826915a1a26e283898ce16169b6e05ebeca4287f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"826915a1a26e283898ce16169b6e05ebeca4287f","date":1405926462,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestOrdinalMappingAtomicReader#buildIndexWithFacets(Directory,Directory,boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestOrdinalMappingAtomicReader#buildIndexWithFacets(Directory,Directory,boolean).mjava","sourceNew":"  private void buildIndexWithFacets(Directory indexDir, Directory taxoDir, boolean asc) throws IOException {\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexDir, config);\n    \n    DirectoryTaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    for (int i = 1; i <= NUM_DOCS; i++) {\n      Document doc = new Document();\n      for (int j = i; j <= NUM_DOCS; j++) {\n        int facetValue = asc ? j: NUM_DOCS - j;\n        doc.add(new FacetField(\"tag\", Integer.toString(facetValue)));\n      }\n      // add a facet under default dim config\n      doc.add(new FacetField(\"id\", Integer.toString(i)));\n      \n      // make sure OrdinalMappingAtomicReader ignores non-facet BinaryDocValues fields\n      doc.add(new BinaryDocValuesField(\"bdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new BinaryDocValuesField(\"cbdv\", new BytesRef(Integer.toString(i*2))));\n      writer.addDocument(facetConfig.build(taxonomyWriter, doc));\n    }\n    taxonomyWriter.commit();\n    taxonomyWriter.close();\n    writer.commit();\n    writer.close();\n  }\n\n","sourceOld":"  private void buildIndexWithFacets(Directory indexDir, Directory taxoDir, boolean asc) throws IOException {\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexDir, config);\n    \n    DirectoryTaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    for (int i = 1; i <= NUM_DOCS; i++) {\n      Document doc = new Document();\n      for (int j = i; j <= NUM_DOCS; j++) {\n        int facetValue = asc ? j: NUM_DOCS - j;\n        doc.add(new FacetField(\"tag\", Integer.toString(facetValue)));\n      }\n      // make sure OrdinalMappingAtomicReader ignores non-facet fields\n      doc.add(new BinaryDocValuesField(\"bdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new BinaryDocValuesField(\"cbdv\", new BytesRef(Integer.toString(i*2))));\n      writer.addDocument(facetConfig.build(taxonomyWriter, doc));\n    }\n    taxonomyWriter.commit();\n    taxonomyWriter.close();\n    writer.commit();\n    writer.close();\n  }\n\n","bugFix":["da07b17df48cd6809d50473d39ce15f3c54a7773"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestOrdinalMappingAtomicReader#buildIndexWithFacets(Directory,Directory,boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestOrdinalMappingAtomicReader#buildIndexWithFacets(Directory,Directory,boolean).mjava","sourceNew":"  private void buildIndexWithFacets(Directory indexDir, Directory taxoDir, boolean asc) throws IOException {\n    IndexWriterConfig config = newIndexWriterConfig(null);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexDir, config);\n    \n    DirectoryTaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    for (int i = 1; i <= NUM_DOCS; i++) {\n      Document doc = new Document();\n      for (int j = i; j <= NUM_DOCS; j++) {\n        int facetValue = asc ? j: NUM_DOCS - j;\n        doc.add(new FacetField(\"tag\", Integer.toString(facetValue)));\n      }\n      // add a facet under default dim config\n      doc.add(new FacetField(\"id\", Integer.toString(i)));\n      \n      // make sure OrdinalMappingAtomicReader ignores non-facet BinaryDocValues fields\n      doc.add(new BinaryDocValuesField(\"bdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new BinaryDocValuesField(\"cbdv\", new BytesRef(Integer.toString(i*2))));\n      writer.addDocument(facetConfig.build(taxonomyWriter, doc));\n    }\n    taxonomyWriter.commit();\n    taxonomyWriter.close();\n    writer.commit();\n    writer.close();\n  }\n\n","sourceOld":"  private void buildIndexWithFacets(Directory indexDir, Directory taxoDir, boolean asc) throws IOException {\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexDir, config);\n    \n    DirectoryTaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    for (int i = 1; i <= NUM_DOCS; i++) {\n      Document doc = new Document();\n      for (int j = i; j <= NUM_DOCS; j++) {\n        int facetValue = asc ? j: NUM_DOCS - j;\n        doc.add(new FacetField(\"tag\", Integer.toString(facetValue)));\n      }\n      // add a facet under default dim config\n      doc.add(new FacetField(\"id\", Integer.toString(i)));\n      \n      // make sure OrdinalMappingAtomicReader ignores non-facet BinaryDocValues fields\n      doc.add(new BinaryDocValuesField(\"bdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new BinaryDocValuesField(\"cbdv\", new BytesRef(Integer.toString(i*2))));\n      writer.addDocument(facetConfig.build(taxonomyWriter, doc));\n    }\n    taxonomyWriter.commit();\n    taxonomyWriter.close();\n    writer.commit();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9644a32526f2e2ae87543b00e8be543aa25f29c","date":1411548458,"type":5,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestOrdinalMappingLeafReader#buildIndexWithFacets(Directory,Directory,boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestOrdinalMappingAtomicReader#buildIndexWithFacets(Directory,Directory,boolean).mjava","sourceNew":"  private void buildIndexWithFacets(Directory indexDir, Directory taxoDir, boolean asc) throws IOException {\n    IndexWriterConfig config = newIndexWriterConfig(null);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexDir, config);\n    \n    DirectoryTaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    for (int i = 1; i <= NUM_DOCS; i++) {\n      Document doc = new Document();\n      for (int j = i; j <= NUM_DOCS; j++) {\n        int facetValue = asc ? j: NUM_DOCS - j;\n        doc.add(new FacetField(\"tag\", Integer.toString(facetValue)));\n      }\n      // add a facet under default dim config\n      doc.add(new FacetField(\"id\", Integer.toString(i)));\n      \n      // make sure OrdinalMappingLeafReader ignores non-facet BinaryDocValues fields\n      doc.add(new BinaryDocValuesField(\"bdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new BinaryDocValuesField(\"cbdv\", new BytesRef(Integer.toString(i*2))));\n      writer.addDocument(facetConfig.build(taxonomyWriter, doc));\n    }\n    taxonomyWriter.commit();\n    taxonomyWriter.close();\n    writer.commit();\n    writer.close();\n  }\n\n","sourceOld":"  private void buildIndexWithFacets(Directory indexDir, Directory taxoDir, boolean asc) throws IOException {\n    IndexWriterConfig config = newIndexWriterConfig(null);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexDir, config);\n    \n    DirectoryTaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    for (int i = 1; i <= NUM_DOCS; i++) {\n      Document doc = new Document();\n      for (int j = i; j <= NUM_DOCS; j++) {\n        int facetValue = asc ? j: NUM_DOCS - j;\n        doc.add(new FacetField(\"tag\", Integer.toString(facetValue)));\n      }\n      // add a facet under default dim config\n      doc.add(new FacetField(\"id\", Integer.toString(i)));\n      \n      // make sure OrdinalMappingAtomicReader ignores non-facet BinaryDocValues fields\n      doc.add(new BinaryDocValuesField(\"bdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new BinaryDocValuesField(\"cbdv\", new BytesRef(Integer.toString(i*2))));\n      writer.addDocument(facetConfig.build(taxonomyWriter, doc));\n    }\n    taxonomyWriter.commit();\n    taxonomyWriter.close();\n    writer.commit();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da07b17df48cd6809d50473d39ce15f3c54a7773":["eea8c27c2188d3e8ca3bf2d389f1038806956abd"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["826915a1a26e283898ce16169b6e05ebeca4287f"],"c9644a32526f2e2ae87543b00e8be543aa25f29c":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"826915a1a26e283898ce16169b6e05ebeca4287f":["da07b17df48cd6809d50473d39ce15f3c54a7773"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eea8c27c2188d3e8ca3bf2d389f1038806956abd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9644a32526f2e2ae87543b00e8be543aa25f29c"]},"commit2Childs":{"da07b17df48cd6809d50473d39ce15f3c54a7773":["826915a1a26e283898ce16169b6e05ebeca4287f"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["c9644a32526f2e2ae87543b00e8be543aa25f29c"],"c9644a32526f2e2ae87543b00e8be543aa25f29c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"826915a1a26e283898ce16169b6e05ebeca4287f":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eea8c27c2188d3e8ca3bf2d389f1038806956abd"],"eea8c27c2188d3e8ca3bf2d389f1038806956abd":["da07b17df48cd6809d50473d39ce15f3c54a7773"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}