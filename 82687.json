{"path":"lucene/src/java/org/apache/lucene/search/cache/DocTermsIndexCreator.DocTermsIndexImpl.DocTermsIndexEnum#seek(BytesRef,boolean).mjava","commits":[{"id":"eee9156bf08d7eaae5e8d8ab5f855ba61012e257","date":1285443157,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/cache/DocTermsIndexCreator.DocTermsIndexImpl.DocTermsIndexEnum#seek(BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.DocTermsIndexImpl.DocTermsIndexEnum#seek(BytesRef,boolean).mjava","sourceNew":"      @Override\r\n      public SeekStatus seek(BytesRef text, boolean useCache) throws IOException {\r\n        // TODO - we can support with binary search\r\n        throw new UnsupportedOperationException();\r\n      }\r\n\n","sourceOld":"      @Override\n      public SeekStatus seek(BytesRef text, boolean useCache) throws IOException {\n        // TODO - we can support with binary search\n        throw new UnsupportedOperationException();\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5637938a7dc36e7ff09a5d9398957bd46b15129a","date":1285538458,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/cache/DocTermsIndexCreator.DocTermsIndexImpl.DocTermsIndexEnum#seek(BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/cache/DocTermsIndexCreator.DocTermsIndexImpl.DocTermsIndexEnum#seek(BytesRef,boolean).mjava","sourceNew":"      @Override\n      public SeekStatus seek(BytesRef text, boolean useCache) throws IOException {\n        // TODO - we can support with binary search\n        throw new UnsupportedOperationException();\n      }\n\n","sourceOld":"      @Override\r\n      public SeekStatus seek(BytesRef text, boolean useCache) throws IOException {\r\n        // TODO - we can support with binary search\r\n        throw new UnsupportedOperationException();\r\n      }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/cache/DocTermsIndexCreator.DocTermsIndexImpl.DocTermsIndexEnum#seek(BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.DocTermsIndexImpl.DocTermsIndexEnum#seek(BytesRef,boolean).mjava","sourceNew":"      @Override\n      public SeekStatus seek(BytesRef text, boolean useCache) throws IOException {\n        // TODO - we can support with binary search\n        throw new UnsupportedOperationException();\n      }\n\n","sourceOld":"      @Override\n      public SeekStatus seek(BytesRef text, boolean useCache) throws IOException {\n        // TODO - we can support with binary search\n        throw new UnsupportedOperationException();\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25833e37398c5210d7bddaca9d14de45e194439a","date":1294165371,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/cache/DocTermsIndexCreator.DocTermsIndexImpl.DocTermsIndexEnum#seek(BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/cache/DocTermsIndexCreator.DocTermsIndexImpl.DocTermsIndexEnum#seek(BytesRef,boolean).mjava","sourceNew":"      @Override\n      public SeekStatus seek(BytesRef text, boolean useCache) throws IOException {\n        int low = 1;\n        int high = numOrd-1;\n        \n        while (low <= high) {\n          int mid = (low + high) >>> 1;\n          seek(mid);\n          int cmp = term.compareTo(text);\n\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else\n            return SeekStatus.FOUND; // key found\n        }\n        \n        if (low == numOrd) {\n          return SeekStatus.END;\n        } else {\n          seek(low);\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n\n","sourceOld":"      @Override\n      public SeekStatus seek(BytesRef text, boolean useCache) throws IOException {\n        // TODO - we can support with binary search\n        throw new UnsupportedOperationException();\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/cache/DocTermsIndexCreator.DocTermsIndexImpl.DocTermsIndexEnum#seek(BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/cache/DocTermsIndexCreator.DocTermsIndexImpl.DocTermsIndexEnum#seek(BytesRef,boolean).mjava","sourceNew":"      @Override\n      public SeekStatus seek(BytesRef text, boolean useCache) throws IOException {\n        int low = 1;\n        int high = numOrd-1;\n        \n        while (low <= high) {\n          int mid = (low + high) >>> 1;\n          seek(mid);\n          int cmp = term.compareTo(text);\n\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else\n            return SeekStatus.FOUND; // key found\n        }\n        \n        if (low == numOrd) {\n          return SeekStatus.END;\n        } else {\n          seek(low);\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n\n","sourceOld":"      @Override\n      public SeekStatus seek(BytesRef text, boolean useCache) throws IOException {\n        // TODO - we can support with binary search\n        throw new UnsupportedOperationException();\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/cache/DocTermsIndexCreator.DocTermsIndexImpl.DocTermsIndexEnum#seek(BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/cache/DocTermsIndexCreator.DocTermsIndexImpl.DocTermsIndexEnum#seek(BytesRef,boolean).mjava","sourceNew":"      @Override\n      public SeekStatus seek(BytesRef text, boolean useCache) throws IOException {\n        int low = 1;\n        int high = numOrd-1;\n        \n        while (low <= high) {\n          int mid = (low + high) >>> 1;\n          seek(mid);\n          int cmp = term.compareTo(text);\n\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else\n            return SeekStatus.FOUND; // key found\n        }\n        \n        if (low == numOrd) {\n          return SeekStatus.END;\n        } else {\n          seek(low);\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n\n","sourceOld":"      @Override\n      public SeekStatus seek(BytesRef text, boolean useCache) throws IOException {\n        // TODO - we can support with binary search\n        throw new UnsupportedOperationException();\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9cc9d77712aba3662f24632df7539ab75e3667","date":1309095238,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/cache/DocTermsIndexCreator.DocTermsIndexImpl.DocTermsIndexEnum#seekCeil(BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/cache/DocTermsIndexCreator.DocTermsIndexImpl.DocTermsIndexEnum#seek(BytesRef,boolean).mjava","sourceNew":"      @Override\n      public SeekStatus seekCeil(BytesRef text, boolean useCache /* ignored */) throws IOException {\n        int low = 1;\n        int high = numOrd-1;\n        \n        while (low <= high) {\n          int mid = (low + high) >>> 1;\n          seekExact(mid);\n          int cmp = term.compareTo(text);\n\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else\n            return SeekStatus.FOUND; // key found\n        }\n        \n        if (low == numOrd) {\n          return SeekStatus.END;\n        } else {\n          seekExact(low);\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n\n","sourceOld":"      @Override\n      public SeekStatus seek(BytesRef text, boolean useCache) throws IOException {\n        int low = 1;\n        int high = numOrd-1;\n        \n        while (low <= high) {\n          int mid = (low + high) >>> 1;\n          seek(mid);\n          int cmp = term.compareTo(text);\n\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else\n            return SeekStatus.FOUND; // key found\n        }\n        \n        if (low == numOrd) {\n          return SeekStatus.END;\n        } else {\n          seek(low);\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/cache/DocTermsIndexCreator.DocTermsIndexImpl.DocTermsIndexEnum#seekCeil(BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/cache/DocTermsIndexCreator.DocTermsIndexImpl.DocTermsIndexEnum#seek(BytesRef,boolean).mjava","sourceNew":"      @Override\n      public SeekStatus seekCeil(BytesRef text, boolean useCache /* ignored */) throws IOException {\n        int low = 1;\n        int high = numOrd-1;\n        \n        while (low <= high) {\n          int mid = (low + high) >>> 1;\n          seekExact(mid);\n          int cmp = term.compareTo(text);\n\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else\n            return SeekStatus.FOUND; // key found\n        }\n        \n        if (low == numOrd) {\n          return SeekStatus.END;\n        } else {\n          seekExact(low);\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n\n","sourceOld":"      @Override\n      public SeekStatus seek(BytesRef text, boolean useCache) throws IOException {\n        int low = 1;\n        int high = numOrd-1;\n        \n        while (low <= high) {\n          int mid = (low + high) >>> 1;\n          seek(mid);\n          int cmp = term.compareTo(text);\n\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else\n            return SeekStatus.FOUND; // key found\n        }\n        \n        if (low == numOrd) {\n          return SeekStatus.END;\n        } else {\n          seek(low);\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/cache/DocTermsIndexCreator.DocTermsIndexImpl.DocTermsIndexEnum#seek(BytesRef,boolean).mjava","sourceNew":null,"sourceOld":"      @Override\n      public SeekStatus seek(BytesRef text, boolean useCache) throws IOException {\n        int low = 1;\n        int high = numOrd-1;\n        \n        while (low <= high) {\n          int mid = (low + high) >>> 1;\n          seek(mid);\n          int cmp = term.compareTo(text);\n\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else\n            return SeekStatus.FOUND; // key found\n        }\n        \n        if (low == numOrd) {\n          return SeekStatus.END;\n        } else {\n          seek(low);\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eee9156bf08d7eaae5e8d8ab5f855ba61012e257":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"70ad682703b8585f5d0a637efec044d57ec05efb":["5637938a7dc36e7ff09a5d9398957bd46b15129a","25833e37398c5210d7bddaca9d14de45e194439a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2553b00f699380c64959ccb27991289aae87be2e":["25833e37398c5210d7bddaca9d14de45e194439a","fd9cc9d77712aba3662f24632df7539ab75e3667"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5637938a7dc36e7ff09a5d9398957bd46b15129a"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["25833e37398c5210d7bddaca9d14de45e194439a"],"5637938a7dc36e7ff09a5d9398957bd46b15129a":["eee9156bf08d7eaae5e8d8ab5f855ba61012e257"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["25833e37398c5210d7bddaca9d14de45e194439a","fd9cc9d77712aba3662f24632df7539ab75e3667"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","25833e37398c5210d7bddaca9d14de45e194439a"],"25833e37398c5210d7bddaca9d14de45e194439a":["5637938a7dc36e7ff09a5d9398957bd46b15129a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fd9cc9d77712aba3662f24632df7539ab75e3667"]},"commit2Childs":{"eee9156bf08d7eaae5e8d8ab5f855ba61012e257":["5637938a7dc36e7ff09a5d9398957bd46b15129a"],"70ad682703b8585f5d0a637efec044d57ec05efb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eee9156bf08d7eaae5e8d8ab5f855ba61012e257","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"2553b00f699380c64959ccb27991289aae87be2e":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"5637938a7dc36e7ff09a5d9398957bd46b15129a":["70ad682703b8585f5d0a637efec044d57ec05efb","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","25833e37398c5210d7bddaca9d14de45e194439a"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"25833e37398c5210d7bddaca9d14de45e194439a":["70ad682703b8585f5d0a637efec044d57ec05efb","2553b00f699380c64959ccb27991289aae87be2e","fd9cc9d77712aba3662f24632df7539ab75e3667","d083e83f225b11e5fdd900e83d26ddb385b6955c","868da859b43505d9d2a023bfeae6dd0c795f5295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}