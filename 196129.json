{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/values/TestDocValues#runTestFloats(Type).mjava","commits":[{"id":"e0f5e4b06eda9c2996435d90659faa1a8601d196","date":1329255071,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/values/TestDocValues#runTestFloats(Type).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestDocValues#runTestFloats(Type).mjava","sourceNew":"  private void runTestFloats(Type type) throws IOException {\n    DocValueHolder valueHolder = new DocValueHolder();\n    Directory dir = newDirectory();\n    final Counter trackBytes = Counter.newCounter();\n    DocValuesConsumer w = Floats.getWriter(dir, \"test\", trackBytes, newIOContext(random), type);\n    final int NUM_VALUES = 777 + random.nextInt(777);\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = type == Type.FLOAT_32 ? random.nextFloat() : random\n          .nextDouble();\n      valueHolder.numberValue = values[i] = v;\n      w.add(i, valueHolder);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n    assertEquals(0, trackBytes.get());\n\n    DocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues, newIOContext(random), type);\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = getSource(r);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(\"\" + i, values[i], s.getFloat(i), 0.0f);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void runTestFloats(Type type) throws IOException {\n    DocValueHolder valueHolder = new DocValueHolder();\n    Directory dir = newDirectory();\n    final Counter trackBytes = Counter.newCounter();\n    DocValuesConsumer w = Floats.getWriter(dir, \"test\", trackBytes, newIOContext(random), type);\n    final int NUM_VALUES = 777 + random.nextInt(777);\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = type == Type.FLOAT_32 ? random.nextFloat() : random\n          .nextDouble();\n      valueHolder.numberValue = values[i] = v;\n      w.add(i, valueHolder);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n    assertEquals(0, trackBytes.get());\n\n    DocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues, newIOContext(random), type);\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = getSource(r);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(\"\" + i, values[i], s.getFloat(i), 0.0f);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/values/TestDocValues#runTestFloats(Type).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/values/TestDocValues#runTestFloats(Type).mjava","sourceNew":"  private void runTestFloats(Type type) throws IOException {\n    DocValueHolder valueHolder = new DocValueHolder();\n    Directory dir = newDirectory();\n    final Counter trackBytes = Counter.newCounter();\n    DocValuesConsumer w = Floats.getWriter(dir, \"test\", trackBytes, newIOContext(random()), type);\n    final int NUM_VALUES = 777 + random().nextInt(777);\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = type == Type.FLOAT_32 ? random().nextFloat() : random()\n          .nextDouble();\n      valueHolder.numberValue = values[i] = v;\n      w.add(i, valueHolder);\n    }\n    final int additionalValues = 1 + random().nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n    assertEquals(0, trackBytes.get());\n\n    DocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues, newIOContext(random()), type);\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = getSource(r);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(\"\" + i, values[i], s.getFloat(i), 0.0f);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void runTestFloats(Type type) throws IOException {\n    DocValueHolder valueHolder = new DocValueHolder();\n    Directory dir = newDirectory();\n    final Counter trackBytes = Counter.newCounter();\n    DocValuesConsumer w = Floats.getWriter(dir, \"test\", trackBytes, newIOContext(random), type);\n    final int NUM_VALUES = 777 + random.nextInt(777);\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = type == Type.FLOAT_32 ? random.nextFloat() : random\n          .nextDouble();\n      valueHolder.numberValue = values[i] = v;\n      w.add(i, valueHolder);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n    assertEquals(0, trackBytes.get());\n\n    DocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues, newIOContext(random), type);\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = getSource(r);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(\"\" + i, values[i], s.getFloat(i), 0.0f);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84dc6f07c86dcb7de2ae6e6bb6ec0d0c2e4da6ce","date":1358288854,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/values/TestDocValues#runTestFloats(Type).mjava","sourceNew":null,"sourceOld":"  private void runTestFloats(Type type) throws IOException {\n    DocValueHolder valueHolder = new DocValueHolder();\n    Directory dir = newDirectory();\n    final Counter trackBytes = Counter.newCounter();\n    DocValuesConsumer w = Floats.getWriter(dir, \"test\", trackBytes, newIOContext(random()), type);\n    final int NUM_VALUES = 777 + random().nextInt(777);\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = type == Type.FLOAT_32 ? random().nextFloat() : random()\n          .nextDouble();\n      valueHolder.numberValue = values[i] = v;\n      w.add(i, valueHolder);\n    }\n    final int additionalValues = 1 + random().nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n    assertEquals(0, trackBytes.get());\n\n    DocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues, newIOContext(random()), type);\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = getSource(r);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(\"\" + i, values[i], s.getFloat(i), 0.0f);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/values/TestDocValues#runTestFloats(Type).mjava","sourceNew":null,"sourceOld":"  private void runTestFloats(Type type) throws IOException {\n    DocValueHolder valueHolder = new DocValueHolder();\n    Directory dir = newDirectory();\n    final Counter trackBytes = Counter.newCounter();\n    DocValuesConsumer w = Floats.getWriter(dir, \"test\", trackBytes, newIOContext(random()), type);\n    final int NUM_VALUES = 777 + random().nextInt(777);\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = type == Type.FLOAT_32 ? random().nextFloat() : random()\n          .nextDouble();\n      valueHolder.numberValue = values[i] = v;\n      w.add(i, valueHolder);\n    }\n    final int additionalValues = 1 + random().nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n    assertEquals(0, trackBytes.get());\n\n    DocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues, newIOContext(random()), type);\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = getSource(r);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(\"\" + i, values[i], s.getFloat(i), 0.0f);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e0f5e4b06eda9c2996435d90659faa1a8601d196":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","84dc6f07c86dcb7de2ae6e6bb6ec0d0c2e4da6ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e0f5e4b06eda9c2996435d90659faa1a8601d196"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"84dc6f07c86dcb7de2ae6e6bb6ec0d0c2e4da6ce":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"]},"commit2Childs":{"e0f5e4b06eda9c2996435d90659faa1a8601d196":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e0f5e4b06eda9c2996435d90659faa1a8601d196"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["d4d69c535930b5cce125cff868d40f6373dc27d4","84dc6f07c86dcb7de2ae6e6bb6ec0d0c2e4da6ce"],"84dc6f07c86dcb7de2ae6e6bb6ec0d0c2e4da6ce":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}