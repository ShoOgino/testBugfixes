{"path":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    \n    NamedList<String> args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"string\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    QueryElevationComponent comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n\n    SolrQueryRequest req = req();\n    IndexReader reader = req.getSearcher().getIndexReader();\n    Map<String, ElevationObj> map = comp.getElevationMap( reader, core );\n    req.close();\n\n    // Make sure the boosts loaded properly\n    assertEquals( 3, map.size() );\n    assertEquals( 1, map.get( \"XXXX\" ).priority.size() );\n    assertEquals( 2, map.get( \"YYYY\" ).priority.size() );\n    assertEquals( 3, map.get( \"ZZZZ\" ).priority.size() );\n    assertEquals( null, map.get( \"xxxx\" ) );\n    assertEquals( null, map.get( \"yyyy\" ) );\n    assertEquals( null, map.get( \"zzzz\" ) );\n    \n    // Now test the same thing with a lowercase filter: 'lowerfilt'\n    args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"lowerfilt\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    map = comp.getElevationMap( reader, core );\n    assertEquals( 3, map.size() );\n    assertEquals( null, map.get( \"XXXX\" ) );\n    assertEquals( null, map.get( \"YYYY\" ) );\n    assertEquals( null, map.get( \"ZZZZ\" ) );\n    assertEquals( 1, map.get( \"xxxx\" ).priority.size() );\n    assertEquals( 2, map.get( \"yyyy\" ).priority.size() );\n    assertEquals( 3, map.get( \"zzzz\" ).priority.size() );\n    \n    assertEquals( \"xxxx\", comp.getAnalyzedQuery( \"XXXX\" ) );\n    assertEquals( \"xxxxyyyy\", comp.getAnalyzedQuery( \"XXXX YYYY\" ) );\n\n    assertQ(\"Make sure QEC handles null queries\", req(\"qt\",\"/elevate\", \"q.alt\",\"*:*\", \"defType\",\"dismax\"),\n        \"//*[@numFound='0']\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    \n    NamedList<String> args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"string\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    QueryElevationComponent comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n\n    SolrQueryRequest req = req();\n    IndexReader reader = req.getSearcher().getIndexReader();\n    Map<String, ElevationObj> map = comp.getElevationMap( reader, core );\n    req.close();\n\n    // Make sure the boosts loaded properly\n    assertEquals( 3, map.size() );\n    assertEquals( 1, map.get( \"XXXX\" ).priority.size() );\n    assertEquals( 2, map.get( \"YYYY\" ).priority.size() );\n    assertEquals( 3, map.get( \"ZZZZ\" ).priority.size() );\n    assertEquals( null, map.get( \"xxxx\" ) );\n    assertEquals( null, map.get( \"yyyy\" ) );\n    assertEquals( null, map.get( \"zzzz\" ) );\n    \n    // Now test the same thing with a lowercase filter: 'lowerfilt'\n    args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"lowerfilt\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    map = comp.getElevationMap( reader, core );\n    assertEquals( 3, map.size() );\n    assertEquals( null, map.get( \"XXXX\" ) );\n    assertEquals( null, map.get( \"YYYY\" ) );\n    assertEquals( null, map.get( \"ZZZZ\" ) );\n    assertEquals( 1, map.get( \"xxxx\" ).priority.size() );\n    assertEquals( 2, map.get( \"yyyy\" ).priority.size() );\n    assertEquals( 3, map.get( \"zzzz\" ).priority.size() );\n    \n    assertEquals( \"xxxx\", comp.getAnalyzedQuery( \"XXXX\" ) );\n    assertEquals( \"xxxxyyyy\", comp.getAnalyzedQuery( \"XXXX YYYY\" ) );\n\n    assertQ(\"Make sure QEC handles null queries\", req(\"qt\",\"/elevate\", \"q.alt\",\"*:*\", \"defType\",\"dismax\"),\n        \"//*[@numFound='0']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    \n    NamedList<String> args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"string\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    QueryElevationComponent comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n\n    SolrQueryRequest req = req();\n    IndexReader reader = req.getSearcher().getIndexReader();\n    Map<String, ElevationObj> map = comp.getElevationMap( reader, core );\n    req.close();\n\n    // Make sure the boosts loaded properly\n    assertEquals( 3, map.size() );\n    assertEquals( 1, map.get( \"XXXX\" ).priority.size() );\n    assertEquals( 2, map.get( \"YYYY\" ).priority.size() );\n    assertEquals( 3, map.get( \"ZZZZ\" ).priority.size() );\n    assertEquals( null, map.get( \"xxxx\" ) );\n    assertEquals( null, map.get( \"yyyy\" ) );\n    assertEquals( null, map.get( \"zzzz\" ) );\n    \n    // Now test the same thing with a lowercase filter: 'lowerfilt'\n    args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"lowerfilt\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    map = comp.getElevationMap( reader, core );\n    assertEquals( 3, map.size() );\n    assertEquals( null, map.get( \"XXXX\" ) );\n    assertEquals( null, map.get( \"YYYY\" ) );\n    assertEquals( null, map.get( \"ZZZZ\" ) );\n    assertEquals( 1, map.get( \"xxxx\" ).priority.size() );\n    assertEquals( 2, map.get( \"yyyy\" ).priority.size() );\n    assertEquals( 3, map.get( \"zzzz\" ).priority.size() );\n    \n    assertEquals( \"xxxx\", comp.getAnalyzedQuery( \"XXXX\" ) );\n    assertEquals( \"xxxxyyyy\", comp.getAnalyzedQuery( \"XXXX YYYY\" ) );\n\n    assertQ(\"Make sure QEC handles null queries\", req(\"qt\",\"/elevate\", \"q.alt\",\"*:*\", \"defType\",\"dismax\"),\n        \"//*[@numFound='0']\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    \n    NamedList<String> args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"string\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    QueryElevationComponent comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n\n    SolrQueryRequest req = req();\n    IndexReader reader = req.getSearcher().getIndexReader();\n    Map<String, ElevationObj> map = comp.getElevationMap( reader, core );\n    req.close();\n\n    // Make sure the boosts loaded properly\n    assertEquals( 3, map.size() );\n    assertEquals( 1, map.get( \"XXXX\" ).priority.size() );\n    assertEquals( 2, map.get( \"YYYY\" ).priority.size() );\n    assertEquals( 3, map.get( \"ZZZZ\" ).priority.size() );\n    assertEquals( null, map.get( \"xxxx\" ) );\n    assertEquals( null, map.get( \"yyyy\" ) );\n    assertEquals( null, map.get( \"zzzz\" ) );\n    \n    // Now test the same thing with a lowercase filter: 'lowerfilt'\n    args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"lowerfilt\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    map = comp.getElevationMap( reader, core );\n    assertEquals( 3, map.size() );\n    assertEquals( null, map.get( \"XXXX\" ) );\n    assertEquals( null, map.get( \"YYYY\" ) );\n    assertEquals( null, map.get( \"ZZZZ\" ) );\n    assertEquals( 1, map.get( \"xxxx\" ).priority.size() );\n    assertEquals( 2, map.get( \"yyyy\" ).priority.size() );\n    assertEquals( 3, map.get( \"zzzz\" ).priority.size() );\n    \n    assertEquals( \"xxxx\", comp.getAnalyzedQuery( \"XXXX\" ) );\n    assertEquals( \"xxxxyyyy\", comp.getAnalyzedQuery( \"XXXX YYYY\" ) );\n\n    assertQ(\"Make sure QEC handles null queries\", req(\"qt\",\"/elevate\", \"q.alt\",\"*:*\", \"defType\",\"dismax\"),\n        \"//*[@numFound='0']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    \n    NamedList<String> args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"string\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    QueryElevationComponent comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n\n    SolrQueryRequest req = req();\n    IndexReader reader = req.getSearcher().getIndexReader();\n    Map<String, ElevationObj> map = comp.getElevationMap( reader, core );\n    req.close();\n\n    // Make sure the boosts loaded properly\n    assertEquals( 3, map.size() );\n    assertEquals( 1, map.get( \"XXXX\" ).priority.size() );\n    assertEquals( 2, map.get( \"YYYY\" ).priority.size() );\n    assertEquals( 3, map.get( \"ZZZZ\" ).priority.size() );\n    assertEquals( null, map.get( \"xxxx\" ) );\n    assertEquals( null, map.get( \"yyyy\" ) );\n    assertEquals( null, map.get( \"zzzz\" ) );\n    \n    // Now test the same thing with a lowercase filter: 'lowerfilt'\n    args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"lowerfilt\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    map = comp.getElevationMap( reader, core );\n    assertEquals( 3, map.size() );\n    assertEquals( null, map.get( \"XXXX\" ) );\n    assertEquals( null, map.get( \"YYYY\" ) );\n    assertEquals( null, map.get( \"ZZZZ\" ) );\n    assertEquals( 1, map.get( \"xxxx\" ).priority.size() );\n    assertEquals( 2, map.get( \"yyyy\" ).priority.size() );\n    assertEquals( 3, map.get( \"zzzz\" ).priority.size() );\n    \n    assertEquals( \"xxxx\", comp.getAnalyzedQuery( \"XXXX\" ) );\n    assertEquals( \"xxxxyyyy\", comp.getAnalyzedQuery( \"XXXX YYYY\" ) );\n\n    assertQ(\"Make sure QEC handles null queries\", req(\"qt\",\"/elevate\", \"q.alt\",\"*:*\", \"defType\",\"dismax\"),\n        \"//*[@numFound='0']\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    \n    NamedList<String> args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"string\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    QueryElevationComponent comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n\n    SolrQueryRequest req = req();\n    IndexReader reader = req.getSearcher().getIndexReader();\n    Map<String, ElevationObj> map = comp.getElevationMap( reader, core );\n    req.close();\n\n    // Make sure the boosts loaded properly\n    assertEquals( 3, map.size() );\n    assertEquals( 1, map.get( \"XXXX\" ).priority.size() );\n    assertEquals( 2, map.get( \"YYYY\" ).priority.size() );\n    assertEquals( 3, map.get( \"ZZZZ\" ).priority.size() );\n    assertEquals( null, map.get( \"xxxx\" ) );\n    assertEquals( null, map.get( \"yyyy\" ) );\n    assertEquals( null, map.get( \"zzzz\" ) );\n    \n    // Now test the same thing with a lowercase filter: 'lowerfilt'\n    args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"lowerfilt\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    map = comp.getElevationMap( reader, core );\n    assertEquals( 3, map.size() );\n    assertEquals( null, map.get( \"XXXX\" ) );\n    assertEquals( null, map.get( \"YYYY\" ) );\n    assertEquals( null, map.get( \"ZZZZ\" ) );\n    assertEquals( 1, map.get( \"xxxx\" ).priority.size() );\n    assertEquals( 2, map.get( \"yyyy\" ).priority.size() );\n    assertEquals( 3, map.get( \"zzzz\" ).priority.size() );\n    \n    assertEquals( \"xxxx\", comp.getAnalyzedQuery( \"XXXX\" ) );\n    assertEquals( \"xxxxyyyy\", comp.getAnalyzedQuery( \"XXXX YYYY\" ) );\n\n    assertQ(\"Make sure QEC handles null queries\", req(\"qt\",\"/elevate\", \"q.alt\",\"*:*\", \"defType\",\"dismax\"),\n        \"//*[@numFound='0']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66e339aeeefbb0f94800c9777e747a22e43c64cc","date":1323800559,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception\n  {\n    try {\n      init(\"schema12.xml\");\n      SolrCore core = h.getCore();\n\n      NamedList<String> args = new NamedList<String>();\n      args.add( QueryElevationComponent.FIELD_TYPE, \"string\" );\n      args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n\n      QueryElevationComponent comp = new QueryElevationComponent();\n      comp.init( args );\n      comp.inform( core );\n\n      SolrQueryRequest req = req();\n      IndexReader reader = req.getSearcher().getIndexReader();\n      Map<String, ElevationObj> map = comp.getElevationMap( reader, core );\n      req.close();\n\n      // Make sure the boosts loaded properly\n      assertEquals( 4, map.size() );\n      assertEquals( 1, map.get( \"XXXX\" ).priority.size() );\n      assertEquals( 2, map.get( \"YYYY\" ).priority.size() );\n      assertEquals( 3, map.get( \"ZZZZ\" ).priority.size() );\n      assertEquals( null, map.get( \"xxxx\" ) );\n      assertEquals( null, map.get( \"yyyy\" ) );\n      assertEquals( null, map.get( \"zzzz\" ) );\n\n      // Now test the same thing with a lowercase filter: 'lowerfilt'\n      args = new NamedList<String>();\n      args.add( QueryElevationComponent.FIELD_TYPE, \"lowerfilt\" );\n      args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n\n      comp = new QueryElevationComponent();\n      comp.init( args );\n      comp.inform( core );\n      map = comp.getElevationMap( reader, core );\n      assertEquals( 4, map.size() );\n      assertEquals( null, map.get( \"XXXX\" ) );\n      assertEquals( null, map.get( \"YYYY\" ) );\n      assertEquals( null, map.get( \"ZZZZ\" ) );\n      assertEquals( 1, map.get( \"xxxx\" ).priority.size() );\n      assertEquals( 2, map.get( \"yyyy\" ).priority.size() );\n      assertEquals( 3, map.get( \"zzzz\" ).priority.size() );\n\n      assertEquals( \"xxxx\", comp.getAnalyzedQuery( \"XXXX\" ) );\n      assertEquals( \"xxxxyyyy\", comp.getAnalyzedQuery( \"XXXX YYYY\" ) );\n\n      assertQ(\"Make sure QEC handles null queries\", req(\"qt\",\"/elevate\", \"q.alt\",\"*:*\", \"defType\",\"dismax\"),\n          \"//*[@numFound='0']\");\n    } finally {\n      delete();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    \n    NamedList<String> args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"string\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    QueryElevationComponent comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n\n    SolrQueryRequest req = req();\n    IndexReader reader = req.getSearcher().getIndexReader();\n    Map<String, ElevationObj> map = comp.getElevationMap( reader, core );\n    req.close();\n\n    // Make sure the boosts loaded properly\n    assertEquals( 3, map.size() );\n    assertEquals( 1, map.get( \"XXXX\" ).priority.size() );\n    assertEquals( 2, map.get( \"YYYY\" ).priority.size() );\n    assertEquals( 3, map.get( \"ZZZZ\" ).priority.size() );\n    assertEquals( null, map.get( \"xxxx\" ) );\n    assertEquals( null, map.get( \"yyyy\" ) );\n    assertEquals( null, map.get( \"zzzz\" ) );\n    \n    // Now test the same thing with a lowercase filter: 'lowerfilt'\n    args = new NamedList<String>();\n    args.add( QueryElevationComponent.FIELD_TYPE, \"lowerfilt\" );\n    args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n    \n    comp = new QueryElevationComponent();\n    comp.init( args );\n    comp.inform( core );\n    map = comp.getElevationMap( reader, core );\n    assertEquals( 3, map.size() );\n    assertEquals( null, map.get( \"XXXX\" ) );\n    assertEquals( null, map.get( \"YYYY\" ) );\n    assertEquals( null, map.get( \"ZZZZ\" ) );\n    assertEquals( 1, map.get( \"xxxx\" ).priority.size() );\n    assertEquals( 2, map.get( \"yyyy\" ).priority.size() );\n    assertEquals( 3, map.get( \"zzzz\" ).priority.size() );\n    \n    assertEquals( \"xxxx\", comp.getAnalyzedQuery( \"XXXX\" ) );\n    assertEquals( \"xxxxyyyy\", comp.getAnalyzedQuery( \"XXXX YYYY\" ) );\n\n    assertQ(\"Make sure QEC handles null queries\", req(\"qt\",\"/elevate\", \"q.alt\",\"*:*\", \"defType\",\"dismax\"),\n        \"//*[@numFound='0']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d0561cea94adff1867218e77bb763c7583be279","date":1324334341,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      SolrCore core = h.getCore();\n\n      NamedList<String> args = new NamedList<String>();\n      args.add(QueryElevationComponent.FIELD_TYPE, \"string\");\n      args.add(QueryElevationComponent.CONFIG_FILE, \"elevate.xml\");\n\n      QueryElevationComponent comp = new QueryElevationComponent();\n      comp.init(args);\n      comp.inform(core);\n\n      SolrQueryRequest req = req();\n      IndexReader reader = req.getSearcher().getIndexReader();\n      Map<String, ElevationObj> map = comp.getElevationMap(reader, core);\n      req.close();\n\n      // Make sure the boosts loaded properly\n      assertEquals(4, map.size());\n      assertEquals(1, map.get(\"XXXX\").priority.size());\n      assertEquals(2, map.get(\"YYYY\").priority.size());\n      assertEquals(3, map.get(\"ZZZZ\").priority.size());\n      assertEquals(null, map.get(\"xxxx\"));\n      assertEquals(null, map.get(\"yyyy\"));\n      assertEquals(null, map.get(\"zzzz\"));\n\n      // Now test the same thing with a lowercase filter: 'lowerfilt'\n      args = new NamedList<String>();\n      args.add(QueryElevationComponent.FIELD_TYPE, \"lowerfilt\");\n      args.add(QueryElevationComponent.CONFIG_FILE, \"elevate.xml\");\n\n      comp = new QueryElevationComponent();\n      comp.init(args);\n      comp.inform(core);\n      map = comp.getElevationMap(reader, core);\n      assertEquals(4, map.size());\n      assertEquals(null, map.get(\"XXXX\"));\n      assertEquals(null, map.get(\"YYYY\"));\n      assertEquals(null, map.get(\"ZZZZ\"));\n      assertEquals(1, map.get(\"xxxx\").priority.size());\n      assertEquals(2, map.get(\"yyyy\").priority.size());\n      assertEquals(3, map.get(\"zzzz\").priority.size());\n\n      assertEquals(\"xxxx\", comp.getAnalyzedQuery(\"XXXX\"));\n      assertEquals(\"xxxxyyyy\", comp.getAnalyzedQuery(\"XXXX YYYY\"));\n\n      assertQ(\"Make sure QEC handles null queries\", req(\"qt\", \"/elevate\", \"q.alt\", \"*:*\", \"defType\", \"dismax\"),\n          \"//*[@numFound='0']\");\n    } finally {\n      delete();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testInterface() throws Exception\n  {\n    try {\n      init(\"schema12.xml\");\n      SolrCore core = h.getCore();\n\n      NamedList<String> args = new NamedList<String>();\n      args.add( QueryElevationComponent.FIELD_TYPE, \"string\" );\n      args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n\n      QueryElevationComponent comp = new QueryElevationComponent();\n      comp.init( args );\n      comp.inform( core );\n\n      SolrQueryRequest req = req();\n      IndexReader reader = req.getSearcher().getIndexReader();\n      Map<String, ElevationObj> map = comp.getElevationMap( reader, core );\n      req.close();\n\n      // Make sure the boosts loaded properly\n      assertEquals( 4, map.size() );\n      assertEquals( 1, map.get( \"XXXX\" ).priority.size() );\n      assertEquals( 2, map.get( \"YYYY\" ).priority.size() );\n      assertEquals( 3, map.get( \"ZZZZ\" ).priority.size() );\n      assertEquals( null, map.get( \"xxxx\" ) );\n      assertEquals( null, map.get( \"yyyy\" ) );\n      assertEquals( null, map.get( \"zzzz\" ) );\n\n      // Now test the same thing with a lowercase filter: 'lowerfilt'\n      args = new NamedList<String>();\n      args.add( QueryElevationComponent.FIELD_TYPE, \"lowerfilt\" );\n      args.add( QueryElevationComponent.CONFIG_FILE, \"elevate.xml\" );\n\n      comp = new QueryElevationComponent();\n      comp.init( args );\n      comp.inform( core );\n      map = comp.getElevationMap( reader, core );\n      assertEquals( 4, map.size() );\n      assertEquals( null, map.get( \"XXXX\" ) );\n      assertEquals( null, map.get( \"YYYY\" ) );\n      assertEquals( null, map.get( \"ZZZZ\" ) );\n      assertEquals( 1, map.get( \"xxxx\" ).priority.size() );\n      assertEquals( 2, map.get( \"yyyy\" ).priority.size() );\n      assertEquals( 3, map.get( \"zzzz\" ).priority.size() );\n\n      assertEquals( \"xxxx\", comp.getAnalyzedQuery( \"XXXX\" ) );\n      assertEquals( \"xxxxyyyy\", comp.getAnalyzedQuery( \"XXXX YYYY\" ) );\n\n      assertQ(\"Make sure QEC handles null queries\", req(\"qt\",\"/elevate\", \"q.alt\",\"*:*\", \"defType\",\"dismax\"),\n          \"//*[@numFound='0']\");\n    } finally {\n      delete();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fb0c241e2a5e80dcaf41e354c7003520fcb777d","date":1324562351,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      SolrCore core = h.getCore();\n\n      NamedList<String> args = new NamedList<String>();\n      args.add(QueryElevationComponent.FIELD_TYPE, \"string\");\n      args.add(QueryElevationComponent.CONFIG_FILE, \"elevate.xml\");\n\n      QueryElevationComponent comp = new QueryElevationComponent();\n      comp.init(args);\n      comp.inform(core);\n\n      SolrQueryRequest req = req();\n      IndexReader reader = req.getSearcher().getIndexReader();\n      Map<String, ElevationObj> map = comp.getElevationMap(reader, core);\n      req.close();\n\n      // Make sure the boosts loaded properly\n      assertEquals(5, map.size());\n      assertEquals(1, map.get(\"XXXX\").priority.size());\n      assertEquals(2, map.get(\"YYYY\").priority.size());\n      assertEquals(3, map.get(\"ZZZZ\").priority.size());\n      assertEquals(null, map.get(\"xxxx\"));\n      assertEquals(null, map.get(\"yyyy\"));\n      assertEquals(null, map.get(\"zzzz\"));\n\n      // Now test the same thing with a lowercase filter: 'lowerfilt'\n      args = new NamedList<String>();\n      args.add(QueryElevationComponent.FIELD_TYPE, \"lowerfilt\");\n      args.add(QueryElevationComponent.CONFIG_FILE, \"elevate.xml\");\n\n      comp = new QueryElevationComponent();\n      comp.init(args);\n      comp.inform(core);\n      map = comp.getElevationMap(reader, core);\n      assertEquals(5, map.size());\n      assertEquals(null, map.get(\"XXXX\"));\n      assertEquals(null, map.get(\"YYYY\"));\n      assertEquals(null, map.get(\"ZZZZ\"));\n      assertEquals(1, map.get(\"xxxx\").priority.size());\n      assertEquals(2, map.get(\"yyyy\").priority.size());\n      assertEquals(3, map.get(\"zzzz\").priority.size());\n\n      assertEquals(\"xxxx\", comp.getAnalyzedQuery(\"XXXX\"));\n      assertEquals(\"xxxxyyyy\", comp.getAnalyzedQuery(\"XXXX YYYY\"));\n\n      assertQ(\"Make sure QEC handles null queries\", req(\"qt\", \"/elevate\", \"q.alt\", \"*:*\", \"defType\", \"dismax\"),\n          \"//*[@numFound='0']\");\n    } finally {\n      delete();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testInterface() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      SolrCore core = h.getCore();\n\n      NamedList<String> args = new NamedList<String>();\n      args.add(QueryElevationComponent.FIELD_TYPE, \"string\");\n      args.add(QueryElevationComponent.CONFIG_FILE, \"elevate.xml\");\n\n      QueryElevationComponent comp = new QueryElevationComponent();\n      comp.init(args);\n      comp.inform(core);\n\n      SolrQueryRequest req = req();\n      IndexReader reader = req.getSearcher().getIndexReader();\n      Map<String, ElevationObj> map = comp.getElevationMap(reader, core);\n      req.close();\n\n      // Make sure the boosts loaded properly\n      assertEquals(4, map.size());\n      assertEquals(1, map.get(\"XXXX\").priority.size());\n      assertEquals(2, map.get(\"YYYY\").priority.size());\n      assertEquals(3, map.get(\"ZZZZ\").priority.size());\n      assertEquals(null, map.get(\"xxxx\"));\n      assertEquals(null, map.get(\"yyyy\"));\n      assertEquals(null, map.get(\"zzzz\"));\n\n      // Now test the same thing with a lowercase filter: 'lowerfilt'\n      args = new NamedList<String>();\n      args.add(QueryElevationComponent.FIELD_TYPE, \"lowerfilt\");\n      args.add(QueryElevationComponent.CONFIG_FILE, \"elevate.xml\");\n\n      comp = new QueryElevationComponent();\n      comp.init(args);\n      comp.inform(core);\n      map = comp.getElevationMap(reader, core);\n      assertEquals(4, map.size());\n      assertEquals(null, map.get(\"XXXX\"));\n      assertEquals(null, map.get(\"YYYY\"));\n      assertEquals(null, map.get(\"ZZZZ\"));\n      assertEquals(1, map.get(\"xxxx\").priority.size());\n      assertEquals(2, map.get(\"yyyy\").priority.size());\n      assertEquals(3, map.get(\"zzzz\").priority.size());\n\n      assertEquals(\"xxxx\", comp.getAnalyzedQuery(\"XXXX\"));\n      assertEquals(\"xxxxyyyy\", comp.getAnalyzedQuery(\"XXXX YYYY\"));\n\n      assertQ(\"Make sure QEC handles null queries\", req(\"qt\", \"/elevate\", \"q.alt\", \"*:*\", \"defType\", \"dismax\"),\n          \"//*[@numFound='0']\");\n    } finally {\n      delete();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1a45617f98e5cd25b73e9ae4ea69e0a0edacebe","date":1332176888,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      SolrCore core = h.getCore();\n\n      NamedList<String> args = new NamedList<String>();\n      args.add(QueryElevationComponent.FIELD_TYPE, \"string\");\n      args.add(QueryElevationComponent.CONFIG_FILE, \"elevate.xml\");\n\n      QueryElevationComponent comp = new QueryElevationComponent();\n      comp.init(args);\n      comp.inform(core);\n\n      SolrQueryRequest req = req();\n      IndexReader reader = req.getSearcher().getIndexReader();\n      Map<String, ElevationObj> map = comp.getElevationMap(reader, core);\n      req.close();\n\n      // Make sure the boosts loaded properly\n      assertEquals(6, map.size());\n      assertEquals(1, map.get(\"XXXX\").priority.size());\n      assertEquals(2, map.get(\"YYYY\").priority.size());\n      assertEquals(3, map.get(\"ZZZZ\").priority.size());\n      assertEquals(null, map.get(\"xxxx\"));\n      assertEquals(null, map.get(\"yyyy\"));\n      assertEquals(null, map.get(\"zzzz\"));\n\n      // Now test the same thing with a lowercase filter: 'lowerfilt'\n      args = new NamedList<String>();\n      args.add(QueryElevationComponent.FIELD_TYPE, \"lowerfilt\");\n      args.add(QueryElevationComponent.CONFIG_FILE, \"elevate.xml\");\n\n      comp = new QueryElevationComponent();\n      comp.init(args);\n      comp.inform(core);\n      map = comp.getElevationMap(reader, core);\n      assertEquals(6, map.size());\n      assertEquals(null, map.get(\"XXXX\"));\n      assertEquals(null, map.get(\"YYYY\"));\n      assertEquals(null, map.get(\"ZZZZ\"));\n      assertEquals(1, map.get(\"xxxx\").priority.size());\n      assertEquals(2, map.get(\"yyyy\").priority.size());\n      assertEquals(3, map.get(\"zzzz\").priority.size());\n\n      assertEquals(\"xxxx\", comp.getAnalyzedQuery(\"XXXX\"));\n      assertEquals(\"xxxxyyyy\", comp.getAnalyzedQuery(\"XXXX YYYY\"));\n\n      assertQ(\"Make sure QEC handles null queries\", req(\"qt\", \"/elevate\", \"q.alt\", \"*:*\", \"defType\", \"dismax\"),\n          \"//*[@numFound='0']\");\n    } finally {\n      delete();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testInterface() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      SolrCore core = h.getCore();\n\n      NamedList<String> args = new NamedList<String>();\n      args.add(QueryElevationComponent.FIELD_TYPE, \"string\");\n      args.add(QueryElevationComponent.CONFIG_FILE, \"elevate.xml\");\n\n      QueryElevationComponent comp = new QueryElevationComponent();\n      comp.init(args);\n      comp.inform(core);\n\n      SolrQueryRequest req = req();\n      IndexReader reader = req.getSearcher().getIndexReader();\n      Map<String, ElevationObj> map = comp.getElevationMap(reader, core);\n      req.close();\n\n      // Make sure the boosts loaded properly\n      assertEquals(5, map.size());\n      assertEquals(1, map.get(\"XXXX\").priority.size());\n      assertEquals(2, map.get(\"YYYY\").priority.size());\n      assertEquals(3, map.get(\"ZZZZ\").priority.size());\n      assertEquals(null, map.get(\"xxxx\"));\n      assertEquals(null, map.get(\"yyyy\"));\n      assertEquals(null, map.get(\"zzzz\"));\n\n      // Now test the same thing with a lowercase filter: 'lowerfilt'\n      args = new NamedList<String>();\n      args.add(QueryElevationComponent.FIELD_TYPE, \"lowerfilt\");\n      args.add(QueryElevationComponent.CONFIG_FILE, \"elevate.xml\");\n\n      comp = new QueryElevationComponent();\n      comp.init(args);\n      comp.inform(core);\n      map = comp.getElevationMap(reader, core);\n      assertEquals(5, map.size());\n      assertEquals(null, map.get(\"XXXX\"));\n      assertEquals(null, map.get(\"YYYY\"));\n      assertEquals(null, map.get(\"ZZZZ\"));\n      assertEquals(1, map.get(\"xxxx\").priority.size());\n      assertEquals(2, map.get(\"yyyy\").priority.size());\n      assertEquals(3, map.get(\"zzzz\").priority.size());\n\n      assertEquals(\"xxxx\", comp.getAnalyzedQuery(\"XXXX\"));\n      assertEquals(\"xxxxyyyy\", comp.getAnalyzedQuery(\"XXXX YYYY\"));\n\n      assertQ(\"Make sure QEC handles null queries\", req(\"qt\", \"/elevate\", \"q.alt\", \"*:*\", \"defType\", \"dismax\"),\n          \"//*[@numFound='0']\");\n    } finally {\n      delete();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["44c12811987af7a5dc1a8fa7d3ddf54399fdeb2a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"44c12811987af7a5dc1a8fa7d3ddf54399fdeb2a","date":1347574644,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      SolrCore core = h.getCore();\n\n      NamedList<String> args = new NamedList<String>();\n      args.add(QueryElevationComponent.FIELD_TYPE, \"string\");\n      args.add(QueryElevationComponent.CONFIG_FILE, \"elevate.xml\");\n\n      QueryElevationComponent comp = new QueryElevationComponent();\n      comp.init(args);\n      comp.inform(core);\n\n      SolrQueryRequest req = req();\n      IndexReader reader = req.getSearcher().getIndexReader();\n      Map<String, ElevationObj> map = comp.getElevationMap(reader, core);\n      req.close();\n\n      // Make sure the boosts loaded properly\n      assertEquals(7, map.size());\n      assertEquals(1, map.get(\"XXXX\").priority.size());\n      assertEquals(2, map.get(\"YYYY\").priority.size());\n      assertEquals(3, map.get(\"ZZZZ\").priority.size());\n      assertEquals(null, map.get(\"xxxx\"));\n      assertEquals(null, map.get(\"yyyy\"));\n      assertEquals(null, map.get(\"zzzz\"));\n\n      // Now test the same thing with a lowercase filter: 'lowerfilt'\n      args = new NamedList<String>();\n      args.add(QueryElevationComponent.FIELD_TYPE, \"lowerfilt\");\n      args.add(QueryElevationComponent.CONFIG_FILE, \"elevate.xml\");\n\n      comp = new QueryElevationComponent();\n      comp.init(args);\n      comp.inform(core);\n      map = comp.getElevationMap(reader, core);\n      assertEquals(7, map.size());\n      assertEquals(null, map.get(\"XXXX\"));\n      assertEquals(null, map.get(\"YYYY\"));\n      assertEquals(null, map.get(\"ZZZZ\"));\n      assertEquals(1, map.get(\"xxxx\").priority.size());\n      assertEquals(2, map.get(\"yyyy\").priority.size());\n      assertEquals(3, map.get(\"zzzz\").priority.size());\n\n      assertEquals(\"xxxx\", comp.getAnalyzedQuery(\"XXXX\"));\n      assertEquals(\"xxxxyyyy\", comp.getAnalyzedQuery(\"XXXX YYYY\"));\n\n      assertQ(\"Make sure QEC handles null queries\", req(\"qt\", \"/elevate\", \"q.alt\", \"*:*\", \"defType\", \"dismax\"),\n          \"//*[@numFound='0']\");\n    } finally {\n      delete();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testInterface() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      SolrCore core = h.getCore();\n\n      NamedList<String> args = new NamedList<String>();\n      args.add(QueryElevationComponent.FIELD_TYPE, \"string\");\n      args.add(QueryElevationComponent.CONFIG_FILE, \"elevate.xml\");\n\n      QueryElevationComponent comp = new QueryElevationComponent();\n      comp.init(args);\n      comp.inform(core);\n\n      SolrQueryRequest req = req();\n      IndexReader reader = req.getSearcher().getIndexReader();\n      Map<String, ElevationObj> map = comp.getElevationMap(reader, core);\n      req.close();\n\n      // Make sure the boosts loaded properly\n      assertEquals(6, map.size());\n      assertEquals(1, map.get(\"XXXX\").priority.size());\n      assertEquals(2, map.get(\"YYYY\").priority.size());\n      assertEquals(3, map.get(\"ZZZZ\").priority.size());\n      assertEquals(null, map.get(\"xxxx\"));\n      assertEquals(null, map.get(\"yyyy\"));\n      assertEquals(null, map.get(\"zzzz\"));\n\n      // Now test the same thing with a lowercase filter: 'lowerfilt'\n      args = new NamedList<String>();\n      args.add(QueryElevationComponent.FIELD_TYPE, \"lowerfilt\");\n      args.add(QueryElevationComponent.CONFIG_FILE, \"elevate.xml\");\n\n      comp = new QueryElevationComponent();\n      comp.init(args);\n      comp.inform(core);\n      map = comp.getElevationMap(reader, core);\n      assertEquals(6, map.size());\n      assertEquals(null, map.get(\"XXXX\"));\n      assertEquals(null, map.get(\"YYYY\"));\n      assertEquals(null, map.get(\"ZZZZ\"));\n      assertEquals(1, map.get(\"xxxx\").priority.size());\n      assertEquals(2, map.get(\"yyyy\").priority.size());\n      assertEquals(3, map.get(\"zzzz\").priority.size());\n\n      assertEquals(\"xxxx\", comp.getAnalyzedQuery(\"XXXX\"));\n      assertEquals(\"xxxxyyyy\", comp.getAnalyzedQuery(\"XXXX YYYY\"));\n\n      assertQ(\"Make sure QEC handles null queries\", req(\"qt\", \"/elevate\", \"q.alt\", \"*:*\", \"defType\", \"dismax\"),\n          \"//*[@numFound='0']\");\n    } finally {\n      delete();\n    }\n\n  }\n\n","bugFix":["e1a45617f98e5cd25b73e9ae4ea69e0a0edacebe"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      SolrCore core = h.getCore();\n\n      NamedList<String> args = new NamedList<>();\n      args.add(QueryElevationComponent.FIELD_TYPE, \"string\");\n      args.add(QueryElevationComponent.CONFIG_FILE, \"elevate.xml\");\n\n      QueryElevationComponent comp = new QueryElevationComponent();\n      comp.init(args);\n      comp.inform(core);\n\n      SolrQueryRequest req = req();\n      IndexReader reader = req.getSearcher().getIndexReader();\n      Map<String, ElevationObj> map = comp.getElevationMap(reader, core);\n      req.close();\n\n      // Make sure the boosts loaded properly\n      assertEquals(7, map.size());\n      assertEquals(1, map.get(\"XXXX\").priority.size());\n      assertEquals(2, map.get(\"YYYY\").priority.size());\n      assertEquals(3, map.get(\"ZZZZ\").priority.size());\n      assertEquals(null, map.get(\"xxxx\"));\n      assertEquals(null, map.get(\"yyyy\"));\n      assertEquals(null, map.get(\"zzzz\"));\n\n      // Now test the same thing with a lowercase filter: 'lowerfilt'\n      args = new NamedList<>();\n      args.add(QueryElevationComponent.FIELD_TYPE, \"lowerfilt\");\n      args.add(QueryElevationComponent.CONFIG_FILE, \"elevate.xml\");\n\n      comp = new QueryElevationComponent();\n      comp.init(args);\n      comp.inform(core);\n      map = comp.getElevationMap(reader, core);\n      assertEquals(7, map.size());\n      assertEquals(null, map.get(\"XXXX\"));\n      assertEquals(null, map.get(\"YYYY\"));\n      assertEquals(null, map.get(\"ZZZZ\"));\n      assertEquals(1, map.get(\"xxxx\").priority.size());\n      assertEquals(2, map.get(\"yyyy\").priority.size());\n      assertEquals(3, map.get(\"zzzz\").priority.size());\n\n      assertEquals(\"xxxx\", comp.getAnalyzedQuery(\"XXXX\"));\n      assertEquals(\"xxxxyyyy\", comp.getAnalyzedQuery(\"XXXX YYYY\"));\n\n      assertQ(\"Make sure QEC handles null queries\", req(\"qt\", \"/elevate\", \"q.alt\", \"*:*\", \"defType\", \"dismax\"),\n          \"//*[@numFound='0']\");\n    } finally {\n      delete();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testInterface() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      SolrCore core = h.getCore();\n\n      NamedList<String> args = new NamedList<String>();\n      args.add(QueryElevationComponent.FIELD_TYPE, \"string\");\n      args.add(QueryElevationComponent.CONFIG_FILE, \"elevate.xml\");\n\n      QueryElevationComponent comp = new QueryElevationComponent();\n      comp.init(args);\n      comp.inform(core);\n\n      SolrQueryRequest req = req();\n      IndexReader reader = req.getSearcher().getIndexReader();\n      Map<String, ElevationObj> map = comp.getElevationMap(reader, core);\n      req.close();\n\n      // Make sure the boosts loaded properly\n      assertEquals(7, map.size());\n      assertEquals(1, map.get(\"XXXX\").priority.size());\n      assertEquals(2, map.get(\"YYYY\").priority.size());\n      assertEquals(3, map.get(\"ZZZZ\").priority.size());\n      assertEquals(null, map.get(\"xxxx\"));\n      assertEquals(null, map.get(\"yyyy\"));\n      assertEquals(null, map.get(\"zzzz\"));\n\n      // Now test the same thing with a lowercase filter: 'lowerfilt'\n      args = new NamedList<String>();\n      args.add(QueryElevationComponent.FIELD_TYPE, \"lowerfilt\");\n      args.add(QueryElevationComponent.CONFIG_FILE, \"elevate.xml\");\n\n      comp = new QueryElevationComponent();\n      comp.init(args);\n      comp.inform(core);\n      map = comp.getElevationMap(reader, core);\n      assertEquals(7, map.size());\n      assertEquals(null, map.get(\"XXXX\"));\n      assertEquals(null, map.get(\"YYYY\"));\n      assertEquals(null, map.get(\"ZZZZ\"));\n      assertEquals(1, map.get(\"xxxx\").priority.size());\n      assertEquals(2, map.get(\"yyyy\").priority.size());\n      assertEquals(3, map.get(\"zzzz\").priority.size());\n\n      assertEquals(\"xxxx\", comp.getAnalyzedQuery(\"XXXX\"));\n      assertEquals(\"xxxxyyyy\", comp.getAnalyzedQuery(\"XXXX YYYY\"));\n\n      assertQ(\"Make sure QEC handles null queries\", req(\"qt\", \"/elevate\", \"q.alt\", \"*:*\", \"defType\", \"dismax\"),\n          \"//*[@numFound='0']\");\n    } finally {\n      delete();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ad458affd82a1d762eb506003907d9363a333cb","date":1528558344,"type":3,"author":"broustant","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      SolrCore core = h.getCore();\n\n      NamedList<String> args = new NamedList<>();\n      args.add(QueryElevationComponent.FIELD_TYPE, \"string\");\n      args.add(QueryElevationComponent.CONFIG_FILE, \"elevate.xml\");\n\n      QueryElevationComponent comp = new QueryElevationComponent();\n      comp.init(args);\n      comp.inform(core);\n\n      SolrQueryRequest req = req();\n      IndexReader reader = req.getSearcher().getIndexReader();\n      QueryElevationComponent.ElevationProvider elevationProvider = comp.getElevationProvider(reader, core);\n      req.close();\n\n      // Make sure the boosts loaded properly\n      assertEquals(7, elevationProvider.size());\n      assertEquals(1, elevationProvider.getElevationForQuery(\"XXXX\").elevatedIds.size());\n      assertEquals(2, elevationProvider.getElevationForQuery(\"YYYY\").elevatedIds.size());\n      assertEquals(3, elevationProvider.getElevationForQuery(\"ZZZZ\").elevatedIds.size());\n      assertEquals(null, elevationProvider.getElevationForQuery(\"xxxx\"));\n      assertEquals(null, elevationProvider.getElevationForQuery(\"yyyy\"));\n      assertEquals(null, elevationProvider.getElevationForQuery(\"zzzz\"));\n\n      // Now test the same thing with a lowercase filter: 'lowerfilt'\n      args = new NamedList<>();\n      args.add(QueryElevationComponent.FIELD_TYPE, \"lowerfilt\");\n      args.add(QueryElevationComponent.CONFIG_FILE, \"elevate.xml\");\n\n      comp = new QueryElevationComponent();\n      comp.init(args);\n      comp.inform(core);\n      elevationProvider = comp.getElevationProvider(reader, core);\n      assertEquals(7, elevationProvider.size());\n      assertEquals(1, elevationProvider.getElevationForQuery(\"XXXX\").elevatedIds.size());\n      assertEquals(2, elevationProvider.getElevationForQuery(\"YYYY\").elevatedIds.size());\n      assertEquals(3, elevationProvider.getElevationForQuery(\"ZZZZ\").elevatedIds.size());\n      assertEquals(1, elevationProvider.getElevationForQuery(\"xxxx\").elevatedIds.size());\n      assertEquals(2, elevationProvider.getElevationForQuery(\"yyyy\").elevatedIds.size());\n      assertEquals(3, elevationProvider.getElevationForQuery(\"zzzz\").elevatedIds.size());\n\n      assertEquals(\"xxxx\", comp.analyzeQuery(\"XXXX\"));\n      assertEquals(\"xxxxyyyy\", comp.analyzeQuery(\"XXXX YYYY\"));\n\n      assertQ(\"Make sure QEC handles null queries\", req(\"qt\", \"/elevate\", \"q.alt\", \"*:*\", \"defType\", \"dismax\"),\n          \"//*[@numFound='0']\");\n    } finally {\n      delete();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testInterface() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      SolrCore core = h.getCore();\n\n      NamedList<String> args = new NamedList<>();\n      args.add(QueryElevationComponent.FIELD_TYPE, \"string\");\n      args.add(QueryElevationComponent.CONFIG_FILE, \"elevate.xml\");\n\n      QueryElevationComponent comp = new QueryElevationComponent();\n      comp.init(args);\n      comp.inform(core);\n\n      SolrQueryRequest req = req();\n      IndexReader reader = req.getSearcher().getIndexReader();\n      Map<String, ElevationObj> map = comp.getElevationMap(reader, core);\n      req.close();\n\n      // Make sure the boosts loaded properly\n      assertEquals(7, map.size());\n      assertEquals(1, map.get(\"XXXX\").priority.size());\n      assertEquals(2, map.get(\"YYYY\").priority.size());\n      assertEquals(3, map.get(\"ZZZZ\").priority.size());\n      assertEquals(null, map.get(\"xxxx\"));\n      assertEquals(null, map.get(\"yyyy\"));\n      assertEquals(null, map.get(\"zzzz\"));\n\n      // Now test the same thing with a lowercase filter: 'lowerfilt'\n      args = new NamedList<>();\n      args.add(QueryElevationComponent.FIELD_TYPE, \"lowerfilt\");\n      args.add(QueryElevationComponent.CONFIG_FILE, \"elevate.xml\");\n\n      comp = new QueryElevationComponent();\n      comp.init(args);\n      comp.inform(core);\n      map = comp.getElevationMap(reader, core);\n      assertEquals(7, map.size());\n      assertEquals(null, map.get(\"XXXX\"));\n      assertEquals(null, map.get(\"YYYY\"));\n      assertEquals(null, map.get(\"ZZZZ\"));\n      assertEquals(1, map.get(\"xxxx\").priority.size());\n      assertEquals(2, map.get(\"yyyy\").priority.size());\n      assertEquals(3, map.get(\"zzzz\").priority.size());\n\n      assertEquals(\"xxxx\", comp.getAnalyzedQuery(\"XXXX\"));\n      assertEquals(\"xxxxyyyy\", comp.getAnalyzedQuery(\"XXXX YYYY\"));\n\n      assertQ(\"Make sure QEC handles null queries\", req(\"qt\", \"/elevate\", \"q.alt\", \"*:*\", \"defType\", \"dismax\"),\n          \"//*[@numFound='0']\");\n    } finally {\n      delete();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      SolrCore core = h.getCore();\n\n      NamedList<String> args = new NamedList<>();\n      args.add(QueryElevationComponent.FIELD_TYPE, \"string\");\n      args.add(QueryElevationComponent.CONFIG_FILE, \"elevate.xml\");\n\n      QueryElevationComponent comp = new QueryElevationComponent();\n      comp.init(args);\n      comp.inform(core);\n\n      SolrQueryRequest req = req();\n      IndexReader reader = req.getSearcher().getIndexReader();\n      QueryElevationComponent.ElevationProvider elevationProvider = comp.getElevationProvider(reader, core);\n      req.close();\n\n      // Make sure the boosts loaded properly\n      assertEquals(7, elevationProvider.size());\n      assertEquals(1, elevationProvider.getElevationForQuery(\"XXXX\").elevatedIds.size());\n      assertEquals(2, elevationProvider.getElevationForQuery(\"YYYY\").elevatedIds.size());\n      assertEquals(3, elevationProvider.getElevationForQuery(\"ZZZZ\").elevatedIds.size());\n      assertEquals(null, elevationProvider.getElevationForQuery(\"xxxx\"));\n      assertEquals(null, elevationProvider.getElevationForQuery(\"yyyy\"));\n      assertEquals(null, elevationProvider.getElevationForQuery(\"zzzz\"));\n\n      // Now test the same thing with a lowercase filter: 'lowerfilt'\n      args = new NamedList<>();\n      args.add(QueryElevationComponent.FIELD_TYPE, \"lowerfilt\");\n      args.add(QueryElevationComponent.CONFIG_FILE, \"elevate.xml\");\n\n      comp = new QueryElevationComponent();\n      comp.init(args);\n      comp.inform(core);\n      elevationProvider = comp.getElevationProvider(reader, core);\n      assertEquals(7, elevationProvider.size());\n      assertEquals(1, elevationProvider.getElevationForQuery(\"XXXX\").elevatedIds.size());\n      assertEquals(2, elevationProvider.getElevationForQuery(\"YYYY\").elevatedIds.size());\n      assertEquals(3, elevationProvider.getElevationForQuery(\"ZZZZ\").elevatedIds.size());\n      assertEquals(1, elevationProvider.getElevationForQuery(\"xxxx\").elevatedIds.size());\n      assertEquals(2, elevationProvider.getElevationForQuery(\"yyyy\").elevatedIds.size());\n      assertEquals(3, elevationProvider.getElevationForQuery(\"zzzz\").elevatedIds.size());\n\n      assertEquals(\"xxxx\", comp.analyzeQuery(\"XXXX\"));\n      assertEquals(\"xxxxyyyy\", comp.analyzeQuery(\"XXXX YYYY\"));\n\n      assertQ(\"Make sure QEC handles null queries\", req(\"qt\", \"/elevate\", \"q.alt\", \"*:*\", \"defType\", \"dismax\"),\n          \"//*[@numFound='0']\");\n    } finally {\n      delete();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testInterface() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      SolrCore core = h.getCore();\n\n      NamedList<String> args = new NamedList<>();\n      args.add(QueryElevationComponent.FIELD_TYPE, \"string\");\n      args.add(QueryElevationComponent.CONFIG_FILE, \"elevate.xml\");\n\n      QueryElevationComponent comp = new QueryElevationComponent();\n      comp.init(args);\n      comp.inform(core);\n\n      SolrQueryRequest req = req();\n      IndexReader reader = req.getSearcher().getIndexReader();\n      Map<String, ElevationObj> map = comp.getElevationMap(reader, core);\n      req.close();\n\n      // Make sure the boosts loaded properly\n      assertEquals(7, map.size());\n      assertEquals(1, map.get(\"XXXX\").priority.size());\n      assertEquals(2, map.get(\"YYYY\").priority.size());\n      assertEquals(3, map.get(\"ZZZZ\").priority.size());\n      assertEquals(null, map.get(\"xxxx\"));\n      assertEquals(null, map.get(\"yyyy\"));\n      assertEquals(null, map.get(\"zzzz\"));\n\n      // Now test the same thing with a lowercase filter: 'lowerfilt'\n      args = new NamedList<>();\n      args.add(QueryElevationComponent.FIELD_TYPE, \"lowerfilt\");\n      args.add(QueryElevationComponent.CONFIG_FILE, \"elevate.xml\");\n\n      comp = new QueryElevationComponent();\n      comp.init(args);\n      comp.inform(core);\n      map = comp.getElevationMap(reader, core);\n      assertEquals(7, map.size());\n      assertEquals(null, map.get(\"XXXX\"));\n      assertEquals(null, map.get(\"YYYY\"));\n      assertEquals(null, map.get(\"ZZZZ\"));\n      assertEquals(1, map.get(\"xxxx\").priority.size());\n      assertEquals(2, map.get(\"yyyy\").priority.size());\n      assertEquals(3, map.get(\"zzzz\").priority.size());\n\n      assertEquals(\"xxxx\", comp.getAnalyzedQuery(\"XXXX\"));\n      assertEquals(\"xxxxyyyy\", comp.getAnalyzedQuery(\"XXXX YYYY\"));\n\n      assertQ(\"Make sure QEC handles null queries\", req(\"qt\", \"/elevate\", \"q.alt\", \"*:*\", \"defType\", \"dismax\"),\n          \"//*[@numFound='0']\");\n    } finally {\n      delete();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      SolrCore core = h.getCore();\n\n      NamedList<String> args = new NamedList<>();\n      args.add(QueryElevationComponent.FIELD_TYPE, \"string\");\n      args.add(QueryElevationComponent.CONFIG_FILE, \"elevate.xml\");\n\n      QueryElevationComponent comp = new QueryElevationComponent();\n      comp.init(args);\n      comp.inform(core);\n\n      SolrQueryRequest req = req();\n      IndexReader reader = req.getSearcher().getIndexReader();\n      QueryElevationComponent.ElevationProvider elevationProvider = comp.getElevationProvider(reader, core);\n      req.close();\n\n      // Make sure the boosts loaded properly\n      assertEquals(7, elevationProvider.size());\n      assertEquals(1, elevationProvider.getElevationForQuery(\"XXXX\").elevatedIds.size());\n      assertEquals(2, elevationProvider.getElevationForQuery(\"YYYY\").elevatedIds.size());\n      assertEquals(3, elevationProvider.getElevationForQuery(\"ZZZZ\").elevatedIds.size());\n      assertEquals(null, elevationProvider.getElevationForQuery(\"xxxx\"));\n      assertEquals(null, elevationProvider.getElevationForQuery(\"yyyy\"));\n      assertEquals(null, elevationProvider.getElevationForQuery(\"zzzz\"));\n\n      // Now test the same thing with a lowercase filter: 'lowerfilt'\n      args = new NamedList<>();\n      args.add(QueryElevationComponent.FIELD_TYPE, \"lowerfilt\");\n      args.add(QueryElevationComponent.CONFIG_FILE, \"elevate.xml\");\n\n      comp = new QueryElevationComponent();\n      comp.init(args);\n      comp.inform(core);\n      elevationProvider = comp.getElevationProvider(reader, core);\n      assertEquals(7, elevationProvider.size());\n      assertEquals(1, elevationProvider.getElevationForQuery(\"XXXX\").elevatedIds.size());\n      assertEquals(2, elevationProvider.getElevationForQuery(\"YYYY\").elevatedIds.size());\n      assertEquals(3, elevationProvider.getElevationForQuery(\"ZZZZ\").elevatedIds.size());\n      assertEquals(1, elevationProvider.getElevationForQuery(\"xxxx\").elevatedIds.size());\n      assertEquals(2, elevationProvider.getElevationForQuery(\"yyyy\").elevatedIds.size());\n      assertEquals(3, elevationProvider.getElevationForQuery(\"zzzz\").elevatedIds.size());\n\n      assertEquals(\"xxxx\", comp.analyzeQuery(\"XXXX\"));\n      assertEquals(\"xxxxyyyy\", comp.analyzeQuery(\"XXXX YYYY\"));\n\n      assertQ(\"Make sure QEC handles null queries\", req(\"qt\", \"/elevate\", \"q.alt\", \"*:*\", \"defType\", \"dismax\"),\n          \"//*[@numFound='0']\");\n    } finally {\n      delete();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testInterface() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      SolrCore core = h.getCore();\n\n      NamedList<String> args = new NamedList<>();\n      args.add(QueryElevationComponent.FIELD_TYPE, \"string\");\n      args.add(QueryElevationComponent.CONFIG_FILE, \"elevate.xml\");\n\n      QueryElevationComponent comp = new QueryElevationComponent();\n      comp.init(args);\n      comp.inform(core);\n\n      SolrQueryRequest req = req();\n      IndexReader reader = req.getSearcher().getIndexReader();\n      Map<String, ElevationObj> map = comp.getElevationMap(reader, core);\n      req.close();\n\n      // Make sure the boosts loaded properly\n      assertEquals(7, map.size());\n      assertEquals(1, map.get(\"XXXX\").priority.size());\n      assertEquals(2, map.get(\"YYYY\").priority.size());\n      assertEquals(3, map.get(\"ZZZZ\").priority.size());\n      assertEquals(null, map.get(\"xxxx\"));\n      assertEquals(null, map.get(\"yyyy\"));\n      assertEquals(null, map.get(\"zzzz\"));\n\n      // Now test the same thing with a lowercase filter: 'lowerfilt'\n      args = new NamedList<>();\n      args.add(QueryElevationComponent.FIELD_TYPE, \"lowerfilt\");\n      args.add(QueryElevationComponent.CONFIG_FILE, \"elevate.xml\");\n\n      comp = new QueryElevationComponent();\n      comp.init(args);\n      comp.inform(core);\n      map = comp.getElevationMap(reader, core);\n      assertEquals(7, map.size());\n      assertEquals(null, map.get(\"XXXX\"));\n      assertEquals(null, map.get(\"YYYY\"));\n      assertEquals(null, map.get(\"ZZZZ\"));\n      assertEquals(1, map.get(\"xxxx\").priority.size());\n      assertEquals(2, map.get(\"yyyy\").priority.size());\n      assertEquals(3, map.get(\"zzzz\").priority.size());\n\n      assertEquals(\"xxxx\", comp.getAnalyzedQuery(\"XXXX\"));\n      assertEquals(\"xxxxyyyy\", comp.getAnalyzedQuery(\"XXXX YYYY\"));\n\n      assertQ(\"Make sure QEC handles null queries\", req(\"qt\", \"/elevate\", \"q.alt\", \"*:*\", \"defType\", \"dismax\"),\n          \"//*[@numFound='0']\");\n    } finally {\n      delete();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6046c615b67e878b7c0ab9257d01dd759493f06","date":1564997027,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      SolrCore core = h.getCore();\n\n      NamedList<String> args = new NamedList<>();\n      args.add(QueryElevationComponent.FIELD_TYPE, \"string\");\n      args.add(QueryElevationComponent.CONFIG_FILE, \"elevate.xml\");\n\n      QueryElevationComponent comp = new QueryElevationComponent();\n      comp.init(args);\n      comp.inform(core);\n\n      SolrQueryRequest req = req();\n      IndexReader reader = req.getSearcher().getIndexReader();\n      QueryElevationComponent.ElevationProvider elevationProvider = comp.getElevationProvider(reader, core);\n      req.close();\n\n      // Make sure the boosts loaded properly\n      assertEquals(11, elevationProvider.size());\n      assertEquals(1, elevationProvider.getElevationForQuery(\"XXXX\").elevatedIds.size());\n      assertEquals(2, elevationProvider.getElevationForQuery(\"YYYY\").elevatedIds.size());\n      assertEquals(3, elevationProvider.getElevationForQuery(\"ZZZZ\").elevatedIds.size());\n      assertNull(elevationProvider.getElevationForQuery(\"xxxx\"));\n      assertNull(elevationProvider.getElevationForQuery(\"yyyy\"));\n      assertNull(elevationProvider.getElevationForQuery(\"zzzz\"));\n\n      // Now test the same thing with a lowercase filter: 'lowerfilt'\n      args = new NamedList<>();\n      args.add(QueryElevationComponent.FIELD_TYPE, \"lowerfilt\");\n      args.add(QueryElevationComponent.CONFIG_FILE, \"elevate.xml\");\n\n      comp = new QueryElevationComponent();\n      comp.init(args);\n      comp.inform(core);\n      elevationProvider = comp.getElevationProvider(reader, core);\n      assertEquals(11, elevationProvider.size());\n      assertEquals(1, elevationProvider.getElevationForQuery(\"XXXX\").elevatedIds.size());\n      assertEquals(2, elevationProvider.getElevationForQuery(\"YYYY\").elevatedIds.size());\n      assertEquals(3, elevationProvider.getElevationForQuery(\"ZZZZ\").elevatedIds.size());\n      assertEquals(1, elevationProvider.getElevationForQuery(\"xxxx\").elevatedIds.size());\n      assertEquals(2, elevationProvider.getElevationForQuery(\"yyyy\").elevatedIds.size());\n      assertEquals(3, elevationProvider.getElevationForQuery(\"zzzz\").elevatedIds.size());\n\n      assertEquals(\"xxxx\", comp.analyzeQuery(\"XXXX\"));\n      assertEquals(\"xxxxyyyy\", comp.analyzeQuery(\"XXXX YYYY\"));\n\n      assertQ(\"Make sure QEC handles null queries\", req(\"qt\", \"/elevate\", \"q.alt\", \"*:*\", \"defType\", \"dismax\"),\n          \"//*[@numFound='0']\");\n    } finally {\n      delete();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testInterface() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      SolrCore core = h.getCore();\n\n      NamedList<String> args = new NamedList<>();\n      args.add(QueryElevationComponent.FIELD_TYPE, \"string\");\n      args.add(QueryElevationComponent.CONFIG_FILE, \"elevate.xml\");\n\n      QueryElevationComponent comp = new QueryElevationComponent();\n      comp.init(args);\n      comp.inform(core);\n\n      SolrQueryRequest req = req();\n      IndexReader reader = req.getSearcher().getIndexReader();\n      QueryElevationComponent.ElevationProvider elevationProvider = comp.getElevationProvider(reader, core);\n      req.close();\n\n      // Make sure the boosts loaded properly\n      assertEquals(7, elevationProvider.size());\n      assertEquals(1, elevationProvider.getElevationForQuery(\"XXXX\").elevatedIds.size());\n      assertEquals(2, elevationProvider.getElevationForQuery(\"YYYY\").elevatedIds.size());\n      assertEquals(3, elevationProvider.getElevationForQuery(\"ZZZZ\").elevatedIds.size());\n      assertEquals(null, elevationProvider.getElevationForQuery(\"xxxx\"));\n      assertEquals(null, elevationProvider.getElevationForQuery(\"yyyy\"));\n      assertEquals(null, elevationProvider.getElevationForQuery(\"zzzz\"));\n\n      // Now test the same thing with a lowercase filter: 'lowerfilt'\n      args = new NamedList<>();\n      args.add(QueryElevationComponent.FIELD_TYPE, \"lowerfilt\");\n      args.add(QueryElevationComponent.CONFIG_FILE, \"elevate.xml\");\n\n      comp = new QueryElevationComponent();\n      comp.init(args);\n      comp.inform(core);\n      elevationProvider = comp.getElevationProvider(reader, core);\n      assertEquals(7, elevationProvider.size());\n      assertEquals(1, elevationProvider.getElevationForQuery(\"XXXX\").elevatedIds.size());\n      assertEquals(2, elevationProvider.getElevationForQuery(\"YYYY\").elevatedIds.size());\n      assertEquals(3, elevationProvider.getElevationForQuery(\"ZZZZ\").elevatedIds.size());\n      assertEquals(1, elevationProvider.getElevationForQuery(\"xxxx\").elevatedIds.size());\n      assertEquals(2, elevationProvider.getElevationForQuery(\"yyyy\").elevatedIds.size());\n      assertEquals(3, elevationProvider.getElevationForQuery(\"zzzz\").elevatedIds.size());\n\n      assertEquals(\"xxxx\", comp.analyzeQuery(\"XXXX\"));\n      assertEquals(\"xxxxyyyy\", comp.analyzeQuery(\"XXXX YYYY\"));\n\n      assertQ(\"Make sure QEC handles null queries\", req(\"qt\", \"/elevate\", \"q.alt\", \"*:*\", \"defType\", \"dismax\"),\n          \"//*[@numFound='0']\");\n    } finally {\n      delete();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      SolrCore core = h.getCore();\n\n      NamedList<String> args = new NamedList<>();\n      args.add(QueryElevationComponent.FIELD_TYPE, \"string\");\n      args.add(QueryElevationComponent.CONFIG_FILE, \"elevate.xml\");\n\n      QueryElevationComponent comp = new QueryElevationComponent();\n      comp.init(args);\n      comp.inform(core);\n\n      SolrQueryRequest req = req();\n      IndexReader reader = req.getSearcher().getIndexReader();\n      QueryElevationComponent.ElevationProvider elevationProvider = comp.getElevationProvider(reader, core);\n      req.close();\n\n      // Make sure the boosts loaded properly\n      assertEquals(11, elevationProvider.size());\n      assertEquals(1, elevationProvider.getElevationForQuery(\"XXXX\").elevatedIds.size());\n      assertEquals(2, elevationProvider.getElevationForQuery(\"YYYY\").elevatedIds.size());\n      assertEquals(3, elevationProvider.getElevationForQuery(\"ZZZZ\").elevatedIds.size());\n      assertNull(elevationProvider.getElevationForQuery(\"xxxx\"));\n      assertNull(elevationProvider.getElevationForQuery(\"yyyy\"));\n      assertNull(elevationProvider.getElevationForQuery(\"zzzz\"));\n\n      // Now test the same thing with a lowercase filter: 'lowerfilt'\n      args = new NamedList<>();\n      args.add(QueryElevationComponent.FIELD_TYPE, \"lowerfilt\");\n      args.add(QueryElevationComponent.CONFIG_FILE, \"elevate.xml\");\n\n      comp = new QueryElevationComponent();\n      comp.init(args);\n      comp.inform(core);\n      elevationProvider = comp.getElevationProvider(reader, core);\n      assertEquals(11, elevationProvider.size());\n      assertEquals(1, elevationProvider.getElevationForQuery(\"XXXX\").elevatedIds.size());\n      assertEquals(2, elevationProvider.getElevationForQuery(\"YYYY\").elevatedIds.size());\n      assertEquals(3, elevationProvider.getElevationForQuery(\"ZZZZ\").elevatedIds.size());\n      assertEquals(1, elevationProvider.getElevationForQuery(\"xxxx\").elevatedIds.size());\n      assertEquals(2, elevationProvider.getElevationForQuery(\"yyyy\").elevatedIds.size());\n      assertEquals(3, elevationProvider.getElevationForQuery(\"zzzz\").elevatedIds.size());\n\n      assertEquals(\"xxxx\", comp.analyzeQuery(\"XXXX\"));\n      assertEquals(\"xxxxyyyy\", comp.analyzeQuery(\"XXXX YYYY\"));\n\n      assertQ(\"Make sure QEC handles null queries\", req(\"qt\", \"/elevate\", \"q.alt\", \"*:*\", \"defType\", \"dismax\"),\n          \"//*[@numFound='0']\");\n    } finally {\n      delete();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testInterface() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      SolrCore core = h.getCore();\n\n      NamedList<String> args = new NamedList<>();\n      args.add(QueryElevationComponent.FIELD_TYPE, \"string\");\n      args.add(QueryElevationComponent.CONFIG_FILE, \"elevate.xml\");\n\n      QueryElevationComponent comp = new QueryElevationComponent();\n      comp.init(args);\n      comp.inform(core);\n\n      SolrQueryRequest req = req();\n      IndexReader reader = req.getSearcher().getIndexReader();\n      QueryElevationComponent.ElevationProvider elevationProvider = comp.getElevationProvider(reader, core);\n      req.close();\n\n      // Make sure the boosts loaded properly\n      assertEquals(7, elevationProvider.size());\n      assertEquals(1, elevationProvider.getElevationForQuery(\"XXXX\").elevatedIds.size());\n      assertEquals(2, elevationProvider.getElevationForQuery(\"YYYY\").elevatedIds.size());\n      assertEquals(3, elevationProvider.getElevationForQuery(\"ZZZZ\").elevatedIds.size());\n      assertEquals(null, elevationProvider.getElevationForQuery(\"xxxx\"));\n      assertEquals(null, elevationProvider.getElevationForQuery(\"yyyy\"));\n      assertEquals(null, elevationProvider.getElevationForQuery(\"zzzz\"));\n\n      // Now test the same thing with a lowercase filter: 'lowerfilt'\n      args = new NamedList<>();\n      args.add(QueryElevationComponent.FIELD_TYPE, \"lowerfilt\");\n      args.add(QueryElevationComponent.CONFIG_FILE, \"elevate.xml\");\n\n      comp = new QueryElevationComponent();\n      comp.init(args);\n      comp.inform(core);\n      elevationProvider = comp.getElevationProvider(reader, core);\n      assertEquals(7, elevationProvider.size());\n      assertEquals(1, elevationProvider.getElevationForQuery(\"XXXX\").elevatedIds.size());\n      assertEquals(2, elevationProvider.getElevationForQuery(\"YYYY\").elevatedIds.size());\n      assertEquals(3, elevationProvider.getElevationForQuery(\"ZZZZ\").elevatedIds.size());\n      assertEquals(1, elevationProvider.getElevationForQuery(\"xxxx\").elevatedIds.size());\n      assertEquals(2, elevationProvider.getElevationForQuery(\"yyyy\").elevatedIds.size());\n      assertEquals(3, elevationProvider.getElevationForQuery(\"zzzz\").elevatedIds.size());\n\n      assertEquals(\"xxxx\", comp.analyzeQuery(\"XXXX\"));\n      assertEquals(\"xxxxyyyy\", comp.analyzeQuery(\"XXXX YYYY\"));\n\n      assertQ(\"Make sure QEC handles null queries\", req(\"qt\", \"/elevate\", \"q.alt\", \"*:*\", \"defType\", \"dismax\"),\n          \"//*[@numFound='0']\");\n    } finally {\n      delete();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba055e19afc289adcb5bedaf68513793a7254012","date":1591268575,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      SolrCore core = h.getCore();\n\n      NamedList<String> args = new NamedList<>();\n      args.add(QueryElevationComponent.FIELD_TYPE, \"string\");\n      args.add(QueryElevationComponent.CONFIG_FILE, \"elevate.xml\");\n\n      IndexReader reader;\n      try (SolrQueryRequest req = req()) {\n        reader = req.getSearcher().getIndexReader();\n      }\n\n      try (QueryElevationComponent comp = new QueryElevationComponent()) {\n        comp.init(args);\n        comp.inform(core);\n\n        QueryElevationComponent.ElevationProvider elevationProvider = comp.getElevationProvider(reader, core);\n\n        // Make sure the boosts loaded properly\n        assertEquals(11, elevationProvider.size());\n        assertEquals(1, elevationProvider.getElevationForQuery(\"XXXX\").elevatedIds.size());\n        assertEquals(2, elevationProvider.getElevationForQuery(\"YYYY\").elevatedIds.size());\n        assertEquals(3, elevationProvider.getElevationForQuery(\"ZZZZ\").elevatedIds.size());\n        assertNull(elevationProvider.getElevationForQuery(\"xxxx\"));\n        assertNull(elevationProvider.getElevationForQuery(\"yyyy\"));\n        assertNull(elevationProvider.getElevationForQuery(\"zzzz\"));\n      }\n\n      // Now test the same thing with a lowercase filter: 'lowerfilt'\n      args = new NamedList<>();\n      args.add(QueryElevationComponent.FIELD_TYPE, \"lowerfilt\");\n      args.add(QueryElevationComponent.CONFIG_FILE, \"elevate.xml\");\n\n      try (QueryElevationComponent comp = new QueryElevationComponent()) {\n        comp.init(args);\n        comp.inform(core);\n        QueryElevationComponent.ElevationProvider elevationProvider = comp.getElevationProvider(reader, core);\n        assertEquals(11, elevationProvider.size());\n        assertEquals(1, elevationProvider.getElevationForQuery(\"XXXX\").elevatedIds.size());\n        assertEquals(2, elevationProvider.getElevationForQuery(\"YYYY\").elevatedIds.size());\n        assertEquals(3, elevationProvider.getElevationForQuery(\"ZZZZ\").elevatedIds.size());\n        assertEquals(1, elevationProvider.getElevationForQuery(\"xxxx\").elevatedIds.size());\n        assertEquals(2, elevationProvider.getElevationForQuery(\"yyyy\").elevatedIds.size());\n        assertEquals(3, elevationProvider.getElevationForQuery(\"zzzz\").elevatedIds.size());\n\n        assertEquals(\"xxxx\", comp.analyzeQuery(\"XXXX\"));\n        assertEquals(\"xxxxyyyy\", comp.analyzeQuery(\"XXXX YYYY\"));\n\n        assertQ(\"Make sure QEC handles null queries\", req(\"qt\", \"/elevate\", \"q.alt\", \"*:*\", \"defType\", \"dismax\"),\n            \"//*[@numFound='0']\");\n      }\n    } finally {\n      delete();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testInterface() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      SolrCore core = h.getCore();\n\n      NamedList<String> args = new NamedList<>();\n      args.add(QueryElevationComponent.FIELD_TYPE, \"string\");\n      args.add(QueryElevationComponent.CONFIG_FILE, \"elevate.xml\");\n\n      QueryElevationComponent comp = new QueryElevationComponent();\n      comp.init(args);\n      comp.inform(core);\n\n      SolrQueryRequest req = req();\n      IndexReader reader = req.getSearcher().getIndexReader();\n      QueryElevationComponent.ElevationProvider elevationProvider = comp.getElevationProvider(reader, core);\n      req.close();\n\n      // Make sure the boosts loaded properly\n      assertEquals(11, elevationProvider.size());\n      assertEquals(1, elevationProvider.getElevationForQuery(\"XXXX\").elevatedIds.size());\n      assertEquals(2, elevationProvider.getElevationForQuery(\"YYYY\").elevatedIds.size());\n      assertEquals(3, elevationProvider.getElevationForQuery(\"ZZZZ\").elevatedIds.size());\n      assertNull(elevationProvider.getElevationForQuery(\"xxxx\"));\n      assertNull(elevationProvider.getElevationForQuery(\"yyyy\"));\n      assertNull(elevationProvider.getElevationForQuery(\"zzzz\"));\n\n      // Now test the same thing with a lowercase filter: 'lowerfilt'\n      args = new NamedList<>();\n      args.add(QueryElevationComponent.FIELD_TYPE, \"lowerfilt\");\n      args.add(QueryElevationComponent.CONFIG_FILE, \"elevate.xml\");\n\n      comp = new QueryElevationComponent();\n      comp.init(args);\n      comp.inform(core);\n      elevationProvider = comp.getElevationProvider(reader, core);\n      assertEquals(11, elevationProvider.size());\n      assertEquals(1, elevationProvider.getElevationForQuery(\"XXXX\").elevatedIds.size());\n      assertEquals(2, elevationProvider.getElevationForQuery(\"YYYY\").elevatedIds.size());\n      assertEquals(3, elevationProvider.getElevationForQuery(\"ZZZZ\").elevatedIds.size());\n      assertEquals(1, elevationProvider.getElevationForQuery(\"xxxx\").elevatedIds.size());\n      assertEquals(2, elevationProvider.getElevationForQuery(\"yyyy\").elevatedIds.size());\n      assertEquals(3, elevationProvider.getElevationForQuery(\"zzzz\").elevatedIds.size());\n\n      assertEquals(\"xxxx\", comp.analyzeQuery(\"XXXX\"));\n      assertEquals(\"xxxxyyyy\", comp.analyzeQuery(\"XXXX YYYY\"));\n\n      assertQ(\"Make sure QEC handles null queries\", req(\"qt\", \"/elevate\", \"q.alt\", \"*:*\", \"defType\", \"dismax\"),\n          \"//*[@numFound='0']\");\n    } finally {\n      delete();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["44c12811987af7a5dc1a8fa7d3ddf54399fdeb2a"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"66e339aeeefbb0f94800c9777e747a22e43c64cc":["c26f00b574427b55127e869b935845554afde1fa"],"e1a45617f98e5cd25b73e9ae4ea69e0a0edacebe":["3fb0c241e2a5e80dcaf41e354c7003520fcb777d"],"1d0561cea94adff1867218e77bb763c7583be279":["66e339aeeefbb0f94800c9777e747a22e43c64cc"],"e6046c615b67e878b7c0ab9257d01dd759493f06":["2ad458affd82a1d762eb506003907d9363a333cb"],"44c12811987af7a5dc1a8fa7d3ddf54399fdeb2a":["e1a45617f98e5cd25b73e9ae4ea69e0a0edacebe"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","2ad458affd82a1d762eb506003907d9363a333cb"],"ba055e19afc289adcb5bedaf68513793a7254012":["e6046c615b67e878b7c0ab9257d01dd759493f06"],"3fb0c241e2a5e80dcaf41e354c7003520fcb777d":["1d0561cea94adff1867218e77bb763c7583be279"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2ad458affd82a1d762eb506003907d9363a333cb":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["2ad458affd82a1d762eb506003907d9363a333cb","e6046c615b67e878b7c0ab9257d01dd759493f06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba055e19afc289adcb5bedaf68513793a7254012"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","2ad458affd82a1d762eb506003907d9363a333cb"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","2ad458affd82a1d762eb506003907d9363a333cb","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"c26f00b574427b55127e869b935845554afde1fa":["66e339aeeefbb0f94800c9777e747a22e43c64cc"],"66e339aeeefbb0f94800c9777e747a22e43c64cc":["1d0561cea94adff1867218e77bb763c7583be279"],"e1a45617f98e5cd25b73e9ae4ea69e0a0edacebe":["44c12811987af7a5dc1a8fa7d3ddf54399fdeb2a"],"1d0561cea94adff1867218e77bb763c7583be279":["3fb0c241e2a5e80dcaf41e354c7003520fcb777d"],"e6046c615b67e878b7c0ab9257d01dd759493f06":["ba055e19afc289adcb5bedaf68513793a7254012","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693"],"44c12811987af7a5dc1a8fa7d3ddf54399fdeb2a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"3fb0c241e2a5e80dcaf41e354c7003520fcb777d":["e1a45617f98e5cd25b73e9ae4ea69e0a0edacebe"],"ba055e19afc289adcb5bedaf68513793a7254012":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"2ad458affd82a1d762eb506003907d9363a333cb":["e6046c615b67e878b7c0ab9257d01dd759493f06","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","a258fbb26824fd104ed795e5d9033d2d040049ee","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}