{"path":"lucene/src/java/org/apache/lucene/index/BufferedDeletes#addTerm(Term,int).mjava","commits":[{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletes#addTerm(Term,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentDeletes#addTerm(Term,int).mjava","sourceNew":"  public void addTerm(Term term, int docIDUpto) {\n    Integer current = terms.get(term);\n    if (current != null && docIDUpto < current) {\n      // Only record the new number if it's greater than the\n      // current one.  This is important because if multiple\n      // threads are replacing the same doc at nearly the\n      // same time, it's possible that one thread that got a\n      // higher docID is scheduled before the other\n      // threads.  If we blindly replace than we can\n      // incorrectly get both docs indexed.\n      return;\n    }\n\n    terms.put(term, Integer.valueOf(docIDUpto));\n    numTermDeletes.incrementAndGet();\n    if (current == null) {\n      bytesUsed.addAndGet(BYTES_PER_DEL_TERM + term.bytes.length);\n    }\n  }\n\n","sourceOld":"  public void addTerm(Term term, int docIDUpto) {\n    Integer current = terms.get(term);\n    if (current != null && docIDUpto < current) {\n      // Only record the new number if it's greater than the\n      // current one.  This is important because if multiple\n      // threads are replacing the same doc at nearly the\n      // same time, it's possible that one thread that got a\n      // higher docID is scheduled before the other\n      // threads.  If we blindly replace than we can get\n      // double-doc in the segment.\n      return;\n    }\n\n    terms.put(term, Integer.valueOf(docIDUpto));\n    numTermDeletes.incrementAndGet();\n    if (current == null) {\n      bytesUsed.addAndGet(BYTES_PER_DEL_TERM + term.bytes.length);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletes#addTerm(Term,int).mjava","pathOld":"/dev/null","sourceNew":"  public void addTerm(Term term, int docIDUpto) {\n    Integer current = terms.get(term);\n    if (current != null && docIDUpto < current) {\n      // Only record the new number if it's greater than the\n      // current one.  This is important because if multiple\n      // threads are replacing the same doc at nearly the\n      // same time, it's possible that one thread that got a\n      // higher docID is scheduled before the other\n      // threads.  If we blindly replace than we can\n      // incorrectly get both docs indexed.\n      return;\n    }\n\n    terms.put(term, Integer.valueOf(docIDUpto));\n    numTermDeletes.incrementAndGet();\n    if (current == null) {\n      bytesUsed.addAndGet(BYTES_PER_DEL_TERM + term.bytes.length);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletes#addTerm(Term,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentDeletes#addTerm(Term,int).mjava","sourceNew":"  public void addTerm(Term term, int docIDUpto) {\n    Integer current = terms.get(term);\n    if (current != null && docIDUpto < current) {\n      // Only record the new number if it's greater than the\n      // current one.  This is important because if multiple\n      // threads are replacing the same doc at nearly the\n      // same time, it's possible that one thread that got a\n      // higher docID is scheduled before the other\n      // threads.  If we blindly replace than we can\n      // incorrectly get both docs indexed.\n      return;\n    }\n\n    terms.put(term, Integer.valueOf(docIDUpto));\n    numTermDeletes.incrementAndGet();\n    if (current == null) {\n      bytesUsed.addAndGet(BYTES_PER_DEL_TERM + term.bytes.length);\n    }\n  }\n\n","sourceOld":"  public void addTerm(Term term, int docIDUpto) {\n    Integer current = terms.get(term);\n    if (current != null && docIDUpto < current) {\n      // Only record the new number if it's greater than the\n      // current one.  This is important because if multiple\n      // threads are replacing the same doc at nearly the\n      // same time, it's possible that one thread that got a\n      // higher docID is scheduled before the other\n      // threads.  If we blindly replace than we can get\n      // double-doc in the segment.\n      return;\n    }\n\n    terms.put(term, Integer.valueOf(docIDUpto));\n    numTermDeletes.incrementAndGet();\n    if (current == null) {\n      bytesUsed.addAndGet(BYTES_PER_DEL_TERM + term.bytes.length);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","date":1308670974,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletes#addTerm(Term,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletes#addTerm(Term,int).mjava","sourceNew":"  public void addTerm(Term term, int docIDUpto) {\n    Integer current = terms.get(term);\n    if (current != null && docIDUpto < current) {\n      // Only record the new number if it's greater than the\n      // current one.  This is important because if multiple\n      // threads are replacing the same doc at nearly the\n      // same time, it's possible that one thread that got a\n      // higher docID is scheduled before the other\n      // threads.  If we blindly replace than we can\n      // incorrectly get both docs indexed.\n      return;\n    }\n\n    terms.put(term, Integer.valueOf(docIDUpto));\n    numTermDeletes.incrementAndGet();\n    if (current == null) {\n      bytesUsed.addAndGet(BYTES_PER_DEL_TERM + term.bytes.length + (RamUsageEstimator.NUM_BYTES_CHAR * term.field().length()));\n    }\n  }\n\n","sourceOld":"  public void addTerm(Term term, int docIDUpto) {\n    Integer current = terms.get(term);\n    if (current != null && docIDUpto < current) {\n      // Only record the new number if it's greater than the\n      // current one.  This is important because if multiple\n      // threads are replacing the same doc at nearly the\n      // same time, it's possible that one thread that got a\n      // higher docID is scheduled before the other\n      // threads.  If we blindly replace than we can\n      // incorrectly get both docs indexed.\n      return;\n    }\n\n    terms.put(term, Integer.valueOf(docIDUpto));\n    numTermDeletes.incrementAndGet();\n    if (current == null) {\n      bytesUsed.addAndGet(BYTES_PER_DEL_TERM + term.bytes.length);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletes#addTerm(Term,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletes#addTerm(Term,int).mjava","sourceNew":"  public void addTerm(Term term, int docIDUpto) {\n    Integer current = terms.get(term);\n    if (current != null && docIDUpto < current) {\n      // Only record the new number if it's greater than the\n      // current one.  This is important because if multiple\n      // threads are replacing the same doc at nearly the\n      // same time, it's possible that one thread that got a\n      // higher docID is scheduled before the other\n      // threads.  If we blindly replace than we can\n      // incorrectly get both docs indexed.\n      return;\n    }\n\n    terms.put(term, Integer.valueOf(docIDUpto));\n    numTermDeletes.incrementAndGet();\n    if (current == null) {\n      bytesUsed.addAndGet(BYTES_PER_DEL_TERM + term.bytes.length + (RamUsageEstimator.NUM_BYTES_CHAR * term.field().length()));\n    }\n  }\n\n","sourceOld":"  public void addTerm(Term term, int docIDUpto) {\n    Integer current = terms.get(term);\n    if (current != null && docIDUpto < current) {\n      // Only record the new number if it's greater than the\n      // current one.  This is important because if multiple\n      // threads are replacing the same doc at nearly the\n      // same time, it's possible that one thread that got a\n      // higher docID is scheduled before the other\n      // threads.  If we blindly replace than we can\n      // incorrectly get both docs indexed.\n      return;\n    }\n\n    terms.put(term, Integer.valueOf(docIDUpto));\n    numTermDeletes.incrementAndGet();\n    if (current == null) {\n      bytesUsed.addAndGet(BYTES_PER_DEL_TERM + term.bytes.length);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletes#addTerm(Term,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletes#addTerm(Term,int).mjava","sourceNew":"  public void addTerm(Term term, int docIDUpto) {\n    Integer current = terms.get(term);\n    if (current != null && docIDUpto < current) {\n      // Only record the new number if it's greater than the\n      // current one.  This is important because if multiple\n      // threads are replacing the same doc at nearly the\n      // same time, it's possible that one thread that got a\n      // higher docID is scheduled before the other\n      // threads.  If we blindly replace than we can\n      // incorrectly get both docs indexed.\n      return;\n    }\n\n    terms.put(term, Integer.valueOf(docIDUpto));\n    numTermDeletes.incrementAndGet();\n    if (current == null) {\n      bytesUsed.addAndGet(BYTES_PER_DEL_TERM + term.bytes.length + (RamUsageEstimator.NUM_BYTES_CHAR * term.field().length()));\n    }\n  }\n\n","sourceOld":"  public void addTerm(Term term, int docIDUpto) {\n    Integer current = terms.get(term);\n    if (current != null && docIDUpto < current) {\n      // Only record the new number if it's greater than the\n      // current one.  This is important because if multiple\n      // threads are replacing the same doc at nearly the\n      // same time, it's possible that one thread that got a\n      // higher docID is scheduled before the other\n      // threads.  If we blindly replace than we can\n      // incorrectly get both docs indexed.\n      return;\n    }\n\n    terms.put(term, Integer.valueOf(docIDUpto));\n    numTermDeletes.incrementAndGet();\n    if (current == null) {\n      bytesUsed.addAndGet(BYTES_PER_DEL_TERM + term.bytes.length);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedDeletes#addTerm(Term,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletes#addTerm(Term,int).mjava","sourceNew":"  public void addTerm(Term term, int docIDUpto) {\n    Integer current = terms.get(term);\n    if (current != null && docIDUpto < current) {\n      // Only record the new number if it's greater than the\n      // current one.  This is important because if multiple\n      // threads are replacing the same doc at nearly the\n      // same time, it's possible that one thread that got a\n      // higher docID is scheduled before the other\n      // threads.  If we blindly replace than we can\n      // incorrectly get both docs indexed.\n      return;\n    }\n\n    terms.put(term, Integer.valueOf(docIDUpto));\n    numTermDeletes.incrementAndGet();\n    if (current == null) {\n      bytesUsed.addAndGet(BYTES_PER_DEL_TERM + term.bytes.length + (RamUsageEstimator.NUM_BYTES_CHAR * term.field().length()));\n    }\n  }\n\n","sourceOld":"  public void addTerm(Term term, int docIDUpto) {\n    Integer current = terms.get(term);\n    if (current != null && docIDUpto < current) {\n      // Only record the new number if it's greater than the\n      // current one.  This is important because if multiple\n      // threads are replacing the same doc at nearly the\n      // same time, it's possible that one thread that got a\n      // higher docID is scheduled before the other\n      // threads.  If we blindly replace than we can\n      // incorrectly get both docs indexed.\n      return;\n    }\n\n    terms.put(term, Integer.valueOf(docIDUpto));\n    numTermDeletes.incrementAndGet();\n    if (current == null) {\n      bytesUsed.addAndGet(BYTES_PER_DEL_TERM + term.bytes.length + (RamUsageEstimator.NUM_BYTES_CHAR * term.field().length()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["c19f985e36a65cc969e8e564fe337a0d41512075"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c19f985e36a65cc969e8e564fe337a0d41512075"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2553b00f699380c64959ccb27991289aae87be2e":["c19f985e36a65cc969e8e564fe337a0d41512075","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["c19f985e36a65cc969e8e564fe337a0d41512075","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"c19f985e36a65cc969e8e564fe337a0d41512075":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c19f985e36a65cc969e8e564fe337a0d41512075"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","c19f985e36a65cc969e8e564fe337a0d41512075","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"2553b00f699380c64959ccb27991289aae87be2e":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"c19f985e36a65cc969e8e564fe337a0d41512075":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","29ef99d61cda9641b6250bf9567329a6e65f901d","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}