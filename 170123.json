{"path":"lucene/src/java/org/apache/lucene/util/cache/DoubleBarrelLRUCache#put(K,V).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/cache/DoubleBarrelLRUCache#put(K,V).mjava","pathOld":"src/java/org/apache/lucene/util/cache/DoubleBarrelLRUCache#put(K,V).mjava","sourceNew":"  @Override\n  public void put(K key, V value) {\n    final Map<K,V> primary;\n    final Map<K,V> secondary;\n    if (swapped) {\n      primary = cache2;\n      secondary = cache1;\n    } else {\n      primary = cache1;\n      secondary = cache2;\n    }\n    primary.put(key, value);\n\n    if (countdown.decrementAndGet() == 0) {\n      // Time to swap\n\n      // NOTE: there is saturation risk here, that the\n      // thread that's doing the clear() takes too long to\n      // do so, while other threads continue to add to\n      // primary, but in practice this seems not to be an\n      // issue (see LUCENE-2075 for benchmark & details)\n\n      // First, clear secondary\n      secondary.clear();\n\n      // Second, swap\n      swapped = !swapped;\n\n      // Third, reset countdown\n      countdown.set(maxSize);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void put(K key, V value) {\n    final Map<K,V> primary;\n    final Map<K,V> secondary;\n    if (swapped) {\n      primary = cache2;\n      secondary = cache1;\n    } else {\n      primary = cache1;\n      secondary = cache2;\n    }\n    primary.put(key, value);\n\n    if (countdown.decrementAndGet() == 0) {\n      // Time to swap\n\n      // NOTE: there is saturation risk here, that the\n      // thread that's doing the clear() takes too long to\n      // do so, while other threads continue to add to\n      // primary, but in practice this seems not to be an\n      // issue (see LUCENE-2075 for benchmark & details)\n\n      // First, clear secondary\n      secondary.clear();\n\n      // Second, swap\n      swapped = !swapped;\n\n      // Third, reset countdown\n      countdown.set(maxSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a601ce5b08e2b880ebc2229ae1456a0f9d570df","date":1273256555,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/DoubleBarrelLRUCache#put(K,V).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/cache/DoubleBarrelLRUCache#put(K,V).mjava","sourceNew":"  public void put(K key, V value) {\n    final Map<K,V> primary;\n    final Map<K,V> secondary;\n    if (swapped) {\n      primary = cache2;\n      secondary = cache1;\n    } else {\n      primary = cache1;\n      secondary = cache2;\n    }\n    primary.put(key, value);\n\n    if (countdown.decrementAndGet() == 0) {\n      // Time to swap\n\n      // NOTE: there is saturation risk here, that the\n      // thread that's doing the clear() takes too long to\n      // do so, while other threads continue to add to\n      // primary, but in practice this seems not to be an\n      // issue (see LUCENE-2075 for benchmark & details)\n\n      // First, clear secondary\n      secondary.clear();\n\n      // Second, swap\n      swapped = !swapped;\n\n      // Third, reset countdown\n      countdown.set(maxSize);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void put(K key, V value) {\n    final Map<K,V> primary;\n    final Map<K,V> secondary;\n    if (swapped) {\n      primary = cache2;\n      secondary = cache1;\n    } else {\n      primary = cache1;\n      secondary = cache2;\n    }\n    primary.put(key, value);\n\n    if (countdown.decrementAndGet() == 0) {\n      // Time to swap\n\n      // NOTE: there is saturation risk here, that the\n      // thread that's doing the clear() takes too long to\n      // do so, while other threads continue to add to\n      // primary, but in practice this seems not to be an\n      // issue (see LUCENE-2075 for benchmark & details)\n\n      // First, clear secondary\n      secondary.clear();\n\n      // Second, swap\n      swapped = !swapped;\n\n      // Third, reset countdown\n      countdown.set(maxSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2a601ce5b08e2b880ebc2229ae1456a0f9d570df":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2a601ce5b08e2b880ebc2229ae1456a0f9d570df"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"2a601ce5b08e2b880ebc2229ae1456a0f9d570df":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["2a601ce5b08e2b880ebc2229ae1456a0f9d570df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}