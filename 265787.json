{"path":"modules/spatial/base/src/test/org/apache/lucene/spatial/base/shape/AbstractTestShapes#_assertIntersect(String,SpatialRelation,Shape,Shape).mjava","commits":[{"id":"4f1f1ac95d9e689fc66dc6bcc5c7ab19fe9fc37a","date":1330032413,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/base/src/test/org/apache/lucene/spatial/base/shape/AbstractTestShapes#_assertIntersect(String,SpatialRelation,Shape,Shape).mjava","pathOld":"modules/spatial/strategy/src/test/org/apache/lucene/spatial/base/shape/AbstractTestShapes#_assertIntersect(String,SpatialRelation,Shape,Shape).mjava","sourceNew":"  private void _assertIntersect(String msg, SpatialRelation expected, Shape a, Shape b) {\n    SpatialRelation sect = a.relate(b, ctx);\n    if (sect == expected)\n      return;\n    if (expected == WITHIN || expected == CONTAINS) {\n      if (a.getClass().equals(b.getClass())) // they are the same shape type\n        Assert.assertEquals(msg, a, b);\n      else {\n        //they are effectively points or lines that are the same location\n        Assert.assertTrue(msg, !a.hasArea());\n        Assert.assertTrue(msg, !b.hasArea());\n\n        Rectangle aBBox = a.getBoundingBox();\n        Rectangle bBBox = b.getBoundingBox();\n        if (aBBox.getHeight() == 0 && bBBox.getHeight() == 0\n            && (aBBox.getMaxY() == 90 && bBBox.getMaxY() == 90\n          || aBBox.getMinY() == -90 && bBBox.getMinY() == -90))\n          ;//== a point at the pole\n        else\n          Assert.assertEquals(msg, aBBox, bBBox);\n      }\n    } else {\n      Assert.assertEquals(msg, expected, sect);\n    }\n  }\n\n","sourceOld":"  private void _assertIntersect(String msg, SpatialRelation expected, Shape a, Shape b) {\n    SpatialRelation sect = a.relate(b, ctx);\n    if (sect == expected)\n      return;\n    if (expected == WITHIN || expected == CONTAINS) {\n      if (a.getClass().equals(b.getClass())) // they are the same shape type\n        assertEquals(msg,a,b);\n      else {\n        //they are effectively points or lines that are the same location\n        assertTrue(msg,!a.hasArea());\n        assertTrue(msg,!b.hasArea());\n\n        Rectangle aBBox = a.getBoundingBox();\n        Rectangle bBBox = b.getBoundingBox();\n        if (aBBox.getHeight() == 0 && bBBox.getHeight() == 0\n            && (aBBox.getMaxY() == 90 && bBBox.getMaxY() == 90\n          || aBBox.getMinY() == -90 && bBBox.getMinY() == -90))\n          ;//== a point at the pole\n        else\n          assertEquals(msg, aBBox, bBBox);\n      }\n    } else {\n      assertEquals(msg,expected,sect);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25738042b3fdefd34091f8a386e2ce94d892a505","date":1330492659,"type":4,"author":"Ryan McKinley","isMerge":false,"pathNew":"/dev/null","pathOld":"modules/spatial/base/src/test/org/apache/lucene/spatial/base/shape/AbstractTestShapes#_assertIntersect(String,SpatialRelation,Shape,Shape).mjava","sourceNew":null,"sourceOld":"  private void _assertIntersect(String msg, SpatialRelation expected, Shape a, Shape b) {\n    SpatialRelation sect = a.relate(b, ctx);\n    if (sect == expected)\n      return;\n    if (expected == WITHIN || expected == CONTAINS) {\n      if (a.getClass().equals(b.getClass())) // they are the same shape type\n        Assert.assertEquals(msg, a, b);\n      else {\n        //they are effectively points or lines that are the same location\n        Assert.assertTrue(msg, !a.hasArea());\n        Assert.assertTrue(msg, !b.hasArea());\n\n        Rectangle aBBox = a.getBoundingBox();\n        Rectangle bBBox = b.getBoundingBox();\n        if (aBBox.getHeight() == 0 && bBBox.getHeight() == 0\n            && (aBBox.getMaxY() == 90 && bBBox.getMaxY() == 90\n          || aBBox.getMinY() == -90 && bBBox.getMinY() == -90))\n          ;//== a point at the pole\n        else\n          Assert.assertEquals(msg, aBBox, bBBox);\n      }\n    } else {\n      Assert.assertEquals(msg, expected, sect);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4f1f1ac95d9e689fc66dc6bcc5c7ab19fe9fc37a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"25738042b3fdefd34091f8a386e2ce94d892a505":["4f1f1ac95d9e689fc66dc6bcc5c7ab19fe9fc37a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4f1f1ac95d9e689fc66dc6bcc5c7ab19fe9fc37a":["25738042b3fdefd34091f8a386e2ce94d892a505"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4f1f1ac95d9e689fc66dc6bcc5c7ab19fe9fc37a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"25738042b3fdefd34091f8a386e2ce94d892a505":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["25738042b3fdefd34091f8a386e2ce94d892a505","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}