{"path":"src/java/org/apache/lucene/index/DocumentWriter#addPosition(String,String,int).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentWriter#addPosition(String,String,int).mjava","pathOld":"/dev/null","sourceNew":"  private final void addPosition(String field, String text, int position) {\n    termBuffer.set(field, text);\n    Posting ti = (Posting)postingTable.get(termBuffer);\n    if (ti != null) {\t\t\t\t  // word seen before\n      int freq = ti.freq;\n      if (ti.positions.length == freq) {\t  // positions array is full\n\tint[] newPositions = new int[freq * 2];\t  // double size\n\tint[] positions = ti.positions;\n\tfor (int i = 0; i < freq; i++)\t\t  // copy old positions to new\n\t  newPositions[i] = positions[i];\n\tti.positions = newPositions;\n      }\n      ti.positions[freq] = position;\t\t  // add new position\n      ti.freq = freq + 1;\t\t\t  // update frequency\n    }\n    else {\t\t\t\t\t  // word not seen before\n      Term term = new Term(field, text, false);\n      postingTable.put(term, new Posting(term, position));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66f8ac981e8707cfae011613a8168a2edeb0b6e3","date":1064079760,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentWriter#addPosition(String,String,int).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentWriter#addPosition(String,String,int).mjava","sourceNew":"  private final void addPosition(String field, String text, int position) {\n    termBuffer.set(field, text);\n    Posting ti = (Posting) postingTable.get(termBuffer);\n    if (ti != null) {\t\t\t\t  // word seen before\n      int freq = ti.freq;\n      if (ti.positions.length == freq) {\t  // positions array is full\n        int[] newPositions = new int[freq * 2];\t  // double size\n        int[] positions = ti.positions;\n        for (int i = 0; i < freq; i++)\t\t  // copy old positions to new\n          newPositions[i] = positions[i];\n        ti.positions = newPositions;\n      }\n      ti.positions[freq] = position;\t\t  // add new position\n      ti.freq = freq + 1;\t\t\t  // update frequency\n    } else {\t\t\t\t\t  // word not seen before\n      Term term = new Term(field, text, false);\n      postingTable.put(term, new Posting(term, position));\n    }\n  }\n\n","sourceOld":"  private final void addPosition(String field, String text, int position) {\n    termBuffer.set(field, text);\n    Posting ti = (Posting)postingTable.get(termBuffer);\n    if (ti != null) {\t\t\t\t  // word seen before\n      int freq = ti.freq;\n      if (ti.positions.length == freq) {\t  // positions array is full\n\tint[] newPositions = new int[freq * 2];\t  // double size\n\tint[] positions = ti.positions;\n\tfor (int i = 0; i < freq; i++)\t\t  // copy old positions to new\n\t  newPositions[i] = positions[i];\n\tti.positions = newPositions;\n      }\n      ti.positions[freq] = position;\t\t  // add new position\n      ti.freq = freq + 1;\t\t\t  // update frequency\n    }\n    else {\t\t\t\t\t  // word not seen before\n      Term term = new Term(field, text, false);\n      postingTable.put(term, new Posting(term, position));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0","date":1096997448,"type":5,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentWriter#addPosition(String,String,int,TermVectorOffsetInfo).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentWriter#addPosition(String,String,int).mjava","sourceNew":"  private final void addPosition(String field, String text, int position, TermVectorOffsetInfo offset) {\n    termBuffer.set(field, text);\n    //System.out.println(\"Offset: \" + offset);\n    Posting ti = (Posting) postingTable.get(termBuffer);\n    if (ti != null) {\t\t\t\t  // word seen before\n      int freq = ti.freq;\n      if (ti.positions.length == freq) {\t  // positions array is full\n        int[] newPositions = new int[freq * 2];\t  // double size\n        int[] positions = ti.positions;\n        for (int i = 0; i < freq; i++)\t\t  // copy old positions to new\n          newPositions[i] = positions[i];\n        ti.positions = newPositions;\n      }\n      ti.positions[freq] = position;\t\t  // add new position\n\n      if (offset != null) {\n        if (ti.offsets.length == freq){\n          TermVectorOffsetInfo [] newOffsets = new TermVectorOffsetInfo[freq*2];\n          TermVectorOffsetInfo [] offsets = ti.offsets;\n          for (int i = 0; i < freq; i++)\n          {\n            newOffsets[i] = offsets[i];\n          }\n          ti.offsets = newOffsets;\n        }\n        ti.offsets[freq] = offset;\n      }\n      ti.freq = freq + 1;\t\t\t  // update frequency\n    } else {\t\t\t\t\t  // word not seen before\n      Term term = new Term(field, text, false);\n      postingTable.put(term, new Posting(term, position, offset));\n    }\n  }\n\n","sourceOld":"  private final void addPosition(String field, String text, int position) {\n    termBuffer.set(field, text);\n    Posting ti = (Posting) postingTable.get(termBuffer);\n    if (ti != null) {\t\t\t\t  // word seen before\n      int freq = ti.freq;\n      if (ti.positions.length == freq) {\t  // positions array is full\n        int[] newPositions = new int[freq * 2];\t  // double size\n        int[] positions = ti.positions;\n        for (int i = 0; i < freq; i++)\t\t  // copy old positions to new\n          newPositions[i] = positions[i];\n        ti.positions = newPositions;\n      }\n      ti.positions[freq] = position;\t\t  // add new position\n      ti.freq = freq + 1;\t\t\t  // update frequency\n    } else {\t\t\t\t\t  // word not seen before\n      Term term = new Term(field, text, false);\n      postingTable.put(term, new Posting(term, position));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0":["66f8ac981e8707cfae011613a8168a2edeb0b6e3"],"66f8ac981e8707cfae011613a8168a2edeb0b6e3":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6177f0f28ace66d1538b1e6ac5f1773e5449a0b0"]},"commit2Childs":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["66f8ac981e8707cfae011613a8168a2edeb0b6e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"66f8ac981e8707cfae011613a8168a2edeb0b6e3":["6177f0f28ace66d1538b1e6ac5f1773e5449a0b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}