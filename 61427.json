{"path":"src/test/org/apache/lucene/search/function/FunctionTestSetup#addDoc(IndexWriter,int).mjava","commits":[{"id":"3f74570911bfdb9f7b01948745dcd67c69676c0e","date":1181060975,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/FunctionTestSetup#addDoc(IndexWriter,int).mjava","pathOld":"/dev/null","sourceNew":"  private void addDoc(IndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Fieldable f;\n    int scoreAndID = i+1;\n    \n    f = new Field(ID_FIELD,id2String(scoreAndID),Field.Store.YES,Field.Index.UN_TOKENIZED); // for debug purposes\n    f.setOmitNorms(true);\n    d.add(f);\n    \n    f = new Field(TEXT_FIELD,\"text of doc\"+scoreAndID+textLine(i),Field.Store.NO,Field.Index.TOKENIZED); // for regular search\n    f.setOmitNorms(true);\n    d.add(f);\n    \n    f = new Field(INT_FIELD,\"\"+scoreAndID,Field.Store.NO,Field.Index.UN_TOKENIZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n    \n    f = new Field(FLOAT_FIELD,scoreAndID+\".000\",Field.Store.NO,Field.Index.UN_TOKENIZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \"+d);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/FunctionTestSetup#addDoc(IndexWriter,int).mjava","pathOld":"src/test/org/apache/lucene/search/function/FunctionTestSetup#addDoc(IndexWriter,int).mjava","sourceNew":"  private void addDoc(IndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Fieldable f;\n    int scoreAndID = i+1;\n    \n    f = new Field(ID_FIELD,id2String(scoreAndID),Field.Store.YES,Field.Index.NOT_ANALYZED); // for debug purposes\n    f.setOmitNorms(true);\n    d.add(f);\n    \n    f = new Field(TEXT_FIELD,\"text of doc\"+scoreAndID+textLine(i),Field.Store.NO,Field.Index.ANALYZED); // for regular search\n    f.setOmitNorms(true);\n    d.add(f);\n    \n    f = new Field(INT_FIELD,\"\"+scoreAndID,Field.Store.NO,Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n    \n    f = new Field(FLOAT_FIELD,scoreAndID+\".000\",Field.Store.NO,Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \"+d);\n  }\n\n","sourceOld":"  private void addDoc(IndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Fieldable f;\n    int scoreAndID = i+1;\n    \n    f = new Field(ID_FIELD,id2String(scoreAndID),Field.Store.YES,Field.Index.UN_TOKENIZED); // for debug purposes\n    f.setOmitNorms(true);\n    d.add(f);\n    \n    f = new Field(TEXT_FIELD,\"text of doc\"+scoreAndID+textLine(i),Field.Store.NO,Field.Index.TOKENIZED); // for regular search\n    f.setOmitNorms(true);\n    d.add(f);\n    \n    f = new Field(INT_FIELD,\"\"+scoreAndID,Field.Store.NO,Field.Index.UN_TOKENIZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n    \n    f = new Field(FLOAT_FIELD,scoreAndID+\".000\",Field.Store.NO,Field.Index.UN_TOKENIZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \"+d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"777b7ef341decfee8757f492d8a154637cd7a384","date":1260037647,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/FunctionTestSetup#addDoc(IndexWriter,int).mjava","pathOld":"src/test/org/apache/lucene/search/function/FunctionTestSetup#addDoc(IndexWriter,int).mjava","sourceNew":"  private void addDoc(IndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Fieldable f;\n    int scoreAndID = i + 1;\n\n    f = new Field(ID_FIELD, id2String(scoreAndID), Field.Store.YES, Field.Index.NOT_ANALYZED); // for debug purposes\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = new Field(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), Field.Store.NO, Field.Index.ANALYZED); // for regular search\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = new Field(INT_FIELD, \"\" + scoreAndID, Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = new Field(FLOAT_FIELD, scoreAndID + \".000\", Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","sourceOld":"  private void addDoc(IndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Fieldable f;\n    int scoreAndID = i+1;\n    \n    f = new Field(ID_FIELD,id2String(scoreAndID),Field.Store.YES,Field.Index.NOT_ANALYZED); // for debug purposes\n    f.setOmitNorms(true);\n    d.add(f);\n    \n    f = new Field(TEXT_FIELD,\"text of doc\"+scoreAndID+textLine(i),Field.Store.NO,Field.Index.ANALYZED); // for regular search\n    f.setOmitNorms(true);\n    d.add(f);\n    \n    f = new Field(INT_FIELD,\"\"+scoreAndID,Field.Store.NO,Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n    \n    f = new Field(FLOAT_FIELD,scoreAndID+\".000\",Field.Store.NO,Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \"+d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#addDoc(IndexWriter,int).mjava","pathOld":"src/test/org/apache/lucene/search/function/FunctionTestSetup#addDoc(IndexWriter,int).mjava","sourceNew":"  private void addDoc(IndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Fieldable f;\n    int scoreAndID = i + 1;\n\n    f = new Field(ID_FIELD, id2String(scoreAndID), Field.Store.YES, Field.Index.NOT_ANALYZED); // for debug purposes\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = new Field(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), Field.Store.NO, Field.Index.ANALYZED); // for regular search\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = new Field(INT_FIELD, \"\" + scoreAndID, Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = new Field(FLOAT_FIELD, scoreAndID + \".000\", Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","sourceOld":"  private void addDoc(IndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Fieldable f;\n    int scoreAndID = i + 1;\n\n    f = new Field(ID_FIELD, id2String(scoreAndID), Field.Store.YES, Field.Index.NOT_ANALYZED); // for debug purposes\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = new Field(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), Field.Store.NO, Field.Index.ANALYZED); // for regular search\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = new Field(INT_FIELD, \"\" + scoreAndID, Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = new Field(FLOAT_FIELD, scoreAndID + \".000\", Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["3f74570911bfdb9f7b01948745dcd67c69676c0e"],"3f74570911bfdb9f7b01948745dcd67c69676c0e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"777b7ef341decfee8757f492d8a154637cd7a384":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["777b7ef341decfee8757f492d8a154637cd7a384"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f74570911bfdb9f7b01948745dcd67c69676c0e"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["777b7ef341decfee8757f492d8a154637cd7a384"],"3f74570911bfdb9f7b01948745dcd67c69676c0e":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"777b7ef341decfee8757f492d8a154637cd7a384":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}