{"path":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery#SpanNotQuery(SpanQuery,SpanQuery).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery#SpanNotQuery(SpanQuery,SpanQuery).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanNotQuery#SpanNotQuery(SpanQuery,SpanQuery).mjava","sourceNew":"  /** Construct a SpanNotQuery matching spans from <code>include</code> which\n   * have no overlap with spans from <code>exclude</code>.*/\n  public SpanNotQuery(SpanQuery include, SpanQuery exclude) {\n    this.include = include;\n    this.exclude = exclude;\n\n    if (!include.getField().equals(exclude.getField()))\n      throw new IllegalArgumentException(\"Clauses must have same field.\");\n  }\n\n","sourceOld":"  /** Construct a SpanNotQuery matching spans from <code>include</code> which\n   * have no overlap with spans from <code>exclude</code>.*/\n  public SpanNotQuery(SpanQuery include, SpanQuery exclude) {\n    this.include = include;\n    this.exclude = exclude;\n\n    if (!include.getField().equals(exclude.getField()))\n      throw new IllegalArgumentException(\"Clauses must have same field.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2102da8a037e2ce5cb9f72256c58c8722b9cd706","date":1374864457,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery#SpanNotQuery(SpanQuery,SpanQuery).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery#SpanNotQuery(SpanQuery,SpanQuery).mjava","sourceNew":"  /** Construct a SpanNotQuery matching spans from <code>include</code> which\n   * have no overlap with spans from <code>exclude</code>.*/\n  public SpanNotQuery(SpanQuery include, SpanQuery exclude) {\n     this(include, exclude, 0, 0);\n  }\n\n","sourceOld":"  /** Construct a SpanNotQuery matching spans from <code>include</code> which\n   * have no overlap with spans from <code>exclude</code>.*/\n  public SpanNotQuery(SpanQuery include, SpanQuery exclude) {\n    this.include = include;\n    this.exclude = exclude;\n\n    if (!include.getField().equals(exclude.getField()))\n      throw new IllegalArgumentException(\"Clauses must have same field.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery#SpanNotQuery(SpanQuery,SpanQuery).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery#SpanNotQuery(SpanQuery,SpanQuery).mjava","sourceNew":"  /** Construct a SpanNotQuery matching spans from <code>include</code> which\n   * have no overlap with spans from <code>exclude</code>.*/\n  public SpanNotQuery(SpanQuery include, SpanQuery exclude) {\n     this(include, exclude, 0, 0);\n  }\n\n","sourceOld":"  /** Construct a SpanNotQuery matching spans from <code>include</code> which\n   * have no overlap with spans from <code>exclude</code>.*/\n  public SpanNotQuery(SpanQuery include, SpanQuery exclude) {\n    this.include = include;\n    this.exclude = exclude;\n\n    if (!include.getField().equals(exclude.getField()))\n      throw new IllegalArgumentException(\"Clauses must have same field.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2102da8a037e2ce5cb9f72256c58c8722b9cd706":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2102da8a037e2ce5cb9f72256c58c8722b9cd706"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","2102da8a037e2ce5cb9f72256c58c8722b9cd706"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"2102da8a037e2ce5cb9f72256c58c8722b9cd706":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}