{"path":"lucene/core/src/test/org/apache/lucene/search/TestBlockMaxConjunction#testRandom().mjava","commits":[{"id":"523cc6563c99a55527ef7993efc5413c6648852d","date":1518704038,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBlockMaxConjunction#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandom() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int numValues = random().nextInt(1 << random().nextInt(5));\n      int start = random().nextInt(10);\n      for (int j = 0; j < numValues; ++j) {\n        doc.add(new StringField(\"foo\", Integer.toString(start + j), Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int iter = 0; iter < 100; ++iter) {\n      int start = random().nextInt(10);\n      int numClauses = random().nextInt(1 << random().nextInt(5));\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      for (int i = 0; i < numClauses; ++i) {\n        builder.add(maybeWrap(new TermQuery(new Term(\"foo\", Integer.toString(start + i)))), Occur.MUST);\n      }\n      Query query = builder.build();\n\n      CheckHits.checkTopScores(random(), query, searcher);\n\n      int filterTerm = random().nextInt(30);\n      Query filteredQuery = new BooleanQuery.Builder()\n          .add(query, Occur.MUST)\n          .add(new TermQuery(new Term(\"foo\", Integer.toString(filterTerm))), Occur.FILTER)\n          .build();\n\n      CheckHits.checkTopScores(random(), filteredQuery, searcher);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"edc1c8fc0262c6b5526c8e0e23f9b72ddcff6aac","date":1558431344,"type":3,"author":"jimczi","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBlockMaxConjunction#testRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBlockMaxConjunction#testRandom().mjava","sourceNew":"  public void testRandom() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int numValues = random().nextInt(1 << random().nextInt(5));\n      int start = random().nextInt(10);\n      for (int j = 0; j < numValues; ++j) {\n        doc.add(new StringField(\"foo\", Integer.toString(start + j), Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int iter = 0; iter < 100; ++iter) {\n      int start = random().nextInt(10);\n      int numClauses = random().nextInt(1 << random().nextInt(5));\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      for (int i = 0; i < numClauses; ++i) {\n        builder.add(maybeWrap(new TermQuery(new Term(\"foo\", Integer.toString(start + i)))), Occur.MUST);\n      }\n      Query query = builder.build();\n\n      CheckHits.checkTopScores(random(), query, searcher);\n\n      int filterTerm = random().nextInt(30);\n      Query filteredQuery = new BooleanQuery.Builder()\n          .add(query, Occur.MUST)\n          .add(new TermQuery(new Term(\"foo\", Integer.toString(filterTerm))), Occur.FILTER)\n          .build();\n\n      CheckHits.checkTopScores(random(), filteredQuery, searcher);\n\n      builder = new BooleanQuery.Builder();\n      for (int i = 0; i < numClauses; ++i) {\n        builder.add(maybeWrapTwoPhase(new TermQuery(new Term(\"foo\", Integer.toString(start + i)))), Occur.MUST);\n      }\n\n      Query twoPhaseQuery = new BooleanQuery.Builder()\n          .add(query, Occur.MUST)\n          .add(new TermQuery(new Term(\"foo\", Integer.toString(filterTerm))), Occur.FILTER)\n          .build();\n\n      CheckHits.checkTopScores(random(), twoPhaseQuery, searcher);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandom() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int numValues = random().nextInt(1 << random().nextInt(5));\n      int start = random().nextInt(10);\n      for (int j = 0; j < numValues; ++j) {\n        doc.add(new StringField(\"foo\", Integer.toString(start + j), Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int iter = 0; iter < 100; ++iter) {\n      int start = random().nextInt(10);\n      int numClauses = random().nextInt(1 << random().nextInt(5));\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      for (int i = 0; i < numClauses; ++i) {\n        builder.add(maybeWrap(new TermQuery(new Term(\"foo\", Integer.toString(start + i)))), Occur.MUST);\n      }\n      Query query = builder.build();\n\n      CheckHits.checkTopScores(random(), query, searcher);\n\n      int filterTerm = random().nextInt(30);\n      Query filteredQuery = new BooleanQuery.Builder()\n          .add(query, Occur.MUST)\n          .add(new TermQuery(new Term(\"foo\", Integer.toString(filterTerm))), Occur.FILTER)\n          .build();\n\n      CheckHits.checkTopScores(random(), filteredQuery, searcher);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"edc1c8fc0262c6b5526c8e0e23f9b72ddcff6aac":["523cc6563c99a55527ef7993efc5413c6648852d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"523cc6563c99a55527ef7993efc5413c6648852d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["edc1c8fc0262c6b5526c8e0e23f9b72ddcff6aac"]},"commit2Childs":{"edc1c8fc0262c6b5526c8e0e23f9b72ddcff6aac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["523cc6563c99a55527ef7993efc5413c6648852d"],"523cc6563c99a55527ef7993efc5413c6648852d":["edc1c8fc0262c6b5526c8e0e23f9b72ddcff6aac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}