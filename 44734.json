{"path":"lucene/src/java/org/apache/lucene/index/SegmentReader#doCommit(Map[String,String]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#doCommit(Map[String,String]).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doCommit(Map[String,String]).mjava","sourceNew":"  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    if (hasChanges) {\n      if (deletedDocsDirty) {               // re-write deleted\n        si.advanceDelGen();\n\n        // We can write directly to the actual name (vs to a\n        // .tmp & renaming it) because the file is not live\n        // until segments file is written:\n        deletedDocs.write(directory(), si.getDelFileName());\n\n        si.setDelCount(si.getDelCount()+pendingDeleteCount);\n        pendingDeleteCount = 0;\n        assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n      } else {\n        assert pendingDeleteCount == 0;\n      }\n\n      if (normsDirty) {               // re-write norms\n        si.setNumFields(core.fieldInfos.size());\n        for (final Norm norm : norms.values()) {\n          if (norm.dirty) {\n            norm.reWrite(si);\n          }\n        }\n      }\n      deletedDocsDirty = false;\n      normsDirty = false;\n      hasChanges = false;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    if (hasChanges) {\n      if (deletedDocsDirty) {               // re-write deleted\n        si.advanceDelGen();\n\n        // We can write directly to the actual name (vs to a\n        // .tmp & renaming it) because the file is not live\n        // until segments file is written:\n        deletedDocs.write(directory(), si.getDelFileName());\n\n        si.setDelCount(si.getDelCount()+pendingDeleteCount);\n        pendingDeleteCount = 0;\n        assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n      } else {\n        assert pendingDeleteCount == 0;\n      }\n\n      if (normsDirty) {               // re-write norms\n        si.setNumFields(core.fieldInfos.size());\n        for (final Norm norm : norms.values()) {\n          if (norm.dirty) {\n            norm.reWrite(si);\n          }\n        }\n      }\n      deletedDocsDirty = false;\n      normsDirty = false;\n      hasChanges = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6267e1ce56c2eec111425690cd04e251b6f14952","date":1275222352,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#doCommit(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#doCommit(Map[String,String]).mjava","sourceNew":"  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    if (hasChanges) {\n      if (deletedDocsDirty) {               // re-write deleted\n        si.advanceDelGen();\n\n        // We can write directly to the actual name (vs to a\n        // .tmp & renaming it) because the file is not live\n        // until segments file is written:\n        deletedDocs.write(directory(), si.getDelFileName());\n\n        si.setDelCount(si.getDelCount()+pendingDeleteCount);\n        pendingDeleteCount = 0;\n        assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n      } else {\n        assert pendingDeleteCount == 0;\n      }\n\n      if (normsDirty) {               // re-write norms\n        si.initNormGen(core.fieldInfos.size());\n        for (final Norm norm : norms.values()) {\n          if (norm.dirty) {\n            norm.reWrite(si);\n          }\n        }\n      }\n      deletedDocsDirty = false;\n      normsDirty = false;\n      hasChanges = false;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    if (hasChanges) {\n      if (deletedDocsDirty) {               // re-write deleted\n        si.advanceDelGen();\n\n        // We can write directly to the actual name (vs to a\n        // .tmp & renaming it) because the file is not live\n        // until segments file is written:\n        deletedDocs.write(directory(), si.getDelFileName());\n\n        si.setDelCount(si.getDelCount()+pendingDeleteCount);\n        pendingDeleteCount = 0;\n        assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n      } else {\n        assert pendingDeleteCount == 0;\n      }\n\n      if (normsDirty) {               // re-write norms\n        si.setNumFields(core.fieldInfos.size());\n        for (final Norm norm : norms.values()) {\n          if (norm.dirty) {\n            norm.reWrite(si);\n          }\n        }\n      }\n      deletedDocsDirty = false;\n      normsDirty = false;\n      hasChanges = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":["1085ea837da8f1e96697e17cf73e1d08e7329261"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1085ea837da8f1e96697e17cf73e1d08e7329261","date":1281469548,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#doCommit(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#doCommit(Map[String,String]).mjava","sourceNew":"  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    if (hasChanges) {\n      startCommit();\n      boolean success = false;\n      try {\n        commitChanges(commitUserData);\n        success = true;\n      } finally {\n        if (!success) {\n          rollbackCommit();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    if (hasChanges) {\n      if (deletedDocsDirty) {               // re-write deleted\n        si.advanceDelGen();\n\n        // We can write directly to the actual name (vs to a\n        // .tmp & renaming it) because the file is not live\n        // until segments file is written:\n        deletedDocs.write(directory(), si.getDelFileName());\n\n        si.setDelCount(si.getDelCount()+pendingDeleteCount);\n        pendingDeleteCount = 0;\n        assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n      } else {\n        assert pendingDeleteCount == 0;\n      }\n\n      if (normsDirty) {               // re-write norms\n        si.initNormGen(core.fieldInfos.size());\n        for (final Norm norm : norms.values()) {\n          if (norm.dirty) {\n            norm.reWrite(si);\n          }\n        }\n      }\n      deletedDocsDirty = false;\n      normsDirty = false;\n      hasChanges = false;\n    }\n  }\n\n","bugFix":["6267e1ce56c2eec111425690cd04e251b6f14952","0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","fa27b750ee9a51ec4bed93ef328aef9ca1e2153d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#doCommit(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#doCommit(Map[String,String]).mjava","sourceNew":"  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    if (hasChanges) {\n      startCommit();\n      boolean success = false;\n      try {\n        commitChanges(commitUserData);\n        success = true;\n      } finally {\n        if (!success) {\n          rollbackCommit();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    if (hasChanges) {\n      if (deletedDocsDirty) {               // re-write deleted\n        si.advanceDelGen();\n\n        // We can write directly to the actual name (vs to a\n        // .tmp & renaming it) because the file is not live\n        // until segments file is written:\n        deletedDocs.write(directory(), si.getDelFileName());\n\n        si.setDelCount(si.getDelCount()+pendingDeleteCount);\n        pendingDeleteCount = 0;\n        assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n      } else {\n        assert pendingDeleteCount == 0;\n      }\n\n      if (normsDirty) {               // re-write norms\n        si.initNormGen(core.fieldInfos.size());\n        for (final Norm norm : norms.values()) {\n          if (norm.dirty) {\n            norm.reWrite(si);\n          }\n        }\n      }\n      deletedDocsDirty = false;\n      normsDirty = false;\n      hasChanges = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1f693ce507c40f77e3a92acd16c6b79cdd730e4","date":1323036169,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#doCommit(Map[String,String]).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    if (hasChanges) {\n      startCommit();\n      boolean success = false;\n      try {\n        commitChanges(commitUserData);\n        success = true;\n      } finally {\n        if (!success) {\n          rollbackCommit();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#doCommit(Map[String,String]).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    if (hasChanges) {\n      startCommit();\n      boolean success = false;\n      try {\n        commitChanges(commitUserData);\n        success = true;\n      } finally {\n        if (!success) {\n          rollbackCommit();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#doCommit(Map[String,String]).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    if (hasChanges) {\n      startCommit();\n      boolean success = false;\n      try {\n        commitChanges(commitUserData);\n        success = true;\n      } finally {\n        if (!success) {\n          rollbackCommit();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6267e1ce56c2eec111425690cd04e251b6f14952":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1085ea837da8f1e96697e17cf73e1d08e7329261":["6267e1ce56c2eec111425690cd04e251b6f14952"],"e1f693ce507c40f77e3a92acd16c6b79cdd730e4":["1085ea837da8f1e96697e17cf73e1d08e7329261"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["1085ea837da8f1e96697e17cf73e1d08e7329261","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["1085ea837da8f1e96697e17cf73e1d08e7329261","e1f693ce507c40f77e3a92acd16c6b79cdd730e4"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["6267e1ce56c2eec111425690cd04e251b6f14952","1085ea837da8f1e96697e17cf73e1d08e7329261"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6267e1ce56c2eec111425690cd04e251b6f14952":["1085ea837da8f1e96697e17cf73e1d08e7329261","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"1085ea837da8f1e96697e17cf73e1d08e7329261":["e1f693ce507c40f77e3a92acd16c6b79cdd730e4","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"e1f693ce507c40f77e3a92acd16c6b79cdd730e4":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["6267e1ce56c2eec111425690cd04e251b6f14952"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}