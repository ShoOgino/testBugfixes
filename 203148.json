{"path":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#insertPackageInfo(Object,SolrQueryRequest).mjava","commits":[{"id":"b2ed9b72e5fa27a7bd4857f222ca815341979d4a","date":1594879524,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#insertPackageInfo(Object,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * If a plugin is loaded from a package, the version of the package being used should be added\n   * to the response\n   */\n  @SuppressWarnings(\"rawtypes\")\n  private void insertPackageInfo(Object o, SolrQueryRequest req) {\n    if (!req.getParams().getBool(\"meta\", false)) return;\n    if (o instanceof List) {\n      List l = (List) o;\n      for (Object o1 : l) {\n        if (o1 instanceof NamedList || o1 instanceof List) insertPackageInfo(o1, req);\n      }\n\n    } else if (o instanceof NamedList) {\n      NamedList nl = (NamedList) o;\n      nl.forEach((BiConsumer) (n, v) -> {\n        if (v instanceof NamedList || v instanceof List) insertPackageInfo(v, req);\n      });\n      Object v = nl.get(\"class\");\n      if (v instanceof String) {\n        String klas = (String) v;\n        PluginInfo.ClassName parsedClassName = new PluginInfo.ClassName(klas);\n        if (parsedClassName.pkg != null) {\n          MapWriter mw = req.getCore().getSchemaPluginsLoader().getPackageVersion(parsedClassName);\n          if (mw != null) nl.add(\"_packageinfo_\", mw);\n        }\n      }\n\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fc1087854af39c9b439f47d913fd3ac1d85ac5c","date":1599523122,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#insertPackageInfo(Object,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#insertPackageInfo(Object,SolrQueryRequest).mjava","sourceNew":"  /**\n   * If a plugin is loaded from a package, the version of the package being used should be added\n   * to the response\n   */\n  @SuppressWarnings(\"rawtypes\")\n  private void insertPackageInfo(Object o, SolrQueryRequest req) {\n    if (!req.getParams().getBool(\"meta\", false)) return;\n    if (o instanceof List) {\n      List l = (List) o;\n      for (Object o1 : l) {\n        if (o1 instanceof NamedList || o1 instanceof List) insertPackageInfo(o1, req);\n      }\n\n    } else if (o instanceof NamedList) {\n      NamedList nl = (NamedList) o;\n      nl.forEach((BiConsumer) (n, v) -> {\n        if (v instanceof NamedList || v instanceof List) insertPackageInfo(v, req);\n      });\n      Object v = nl.get(\"class\");\n      if (v instanceof String) {\n        String klas = (String) v;\n        PluginInfo.ClassName parsedClassName = new PluginInfo.ClassName(klas);\n        if (parsedClassName.pkg != null) {\n          SolrClassLoader solrClassLoader = req.getCore().getLatestSchema().getSolrClassLoader();\n          MapWriter mw = solrClassLoader instanceof PackageListeningClassLoader ?\n              ((PackageListeningClassLoader) solrClassLoader).getPackageVersion(parsedClassName) : null;\n          if (mw != null) nl.add(\"_packageinfo_\", mw);\n        }\n      }\n\n    }\n\n  }\n\n","sourceOld":"  /**\n   * If a plugin is loaded from a package, the version of the package being used should be added\n   * to the response\n   */\n  @SuppressWarnings(\"rawtypes\")\n  private void insertPackageInfo(Object o, SolrQueryRequest req) {\n    if (!req.getParams().getBool(\"meta\", false)) return;\n    if (o instanceof List) {\n      List l = (List) o;\n      for (Object o1 : l) {\n        if (o1 instanceof NamedList || o1 instanceof List) insertPackageInfo(o1, req);\n      }\n\n    } else if (o instanceof NamedList) {\n      NamedList nl = (NamedList) o;\n      nl.forEach((BiConsumer) (n, v) -> {\n        if (v instanceof NamedList || v instanceof List) insertPackageInfo(v, req);\n      });\n      Object v = nl.get(\"class\");\n      if (v instanceof String) {\n        String klas = (String) v;\n        PluginInfo.ClassName parsedClassName = new PluginInfo.ClassName(klas);\n        if (parsedClassName.pkg != null) {\n          MapWriter mw = req.getCore().getSchemaPluginsLoader().getPackageVersion(parsedClassName);\n          if (mw != null) nl.add(\"_packageinfo_\", mw);\n        }\n      }\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"938fe8fd4d30ae70161827366f67c2382985e446","date":1600050178,"type":3,"author":"noblepaul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#insertPackageInfo(Object,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#insertPackageInfo(Object,SolrQueryRequest).mjava","sourceNew":"  /**\n   * If a plugin is loaded from a package, the version of the package being used should be added\n   * to the response\n   */\n  @SuppressWarnings(\"rawtypes\")\n  private void insertPackageInfo(Object o, SolrQueryRequest req) {\n    if (!req.getParams().getBool(\"meta\", false)) return;\n    if (o instanceof List) {\n      List l = (List) o;\n      for (Object o1 : l) {\n        if (o1 instanceof NamedList || o1 instanceof List) insertPackageInfo(o1, req);\n      }\n\n    } else if (o instanceof NamedList) {\n      NamedList nl = (NamedList) o;\n      nl.forEach((BiConsumer) (n, v) -> {\n        if (v instanceof NamedList || v instanceof List) insertPackageInfo(v, req);\n      });\n      Object v = nl.get(\"class\");\n      if (v instanceof String) {\n        String klas = (String) v;\n        PluginInfo.ClassName parsedClassName = new PluginInfo.ClassName(klas);\n        if (parsedClassName.pkg != null) {\n          MapWriter mw = req.getCore().getSchemaPluginsLoader().getPackageVersion(parsedClassName);\n          if (mw != null) nl.add(\"_packageinfo_\", mw);\n        }\n      }\n\n    }\n\n  }\n\n","sourceOld":"  /**\n   * If a plugin is loaded from a package, the version of the package being used should be added\n   * to the response\n   */\n  @SuppressWarnings(\"rawtypes\")\n  private void insertPackageInfo(Object o, SolrQueryRequest req) {\n    if (!req.getParams().getBool(\"meta\", false)) return;\n    if (o instanceof List) {\n      List l = (List) o;\n      for (Object o1 : l) {\n        if (o1 instanceof NamedList || o1 instanceof List) insertPackageInfo(o1, req);\n      }\n\n    } else if (o instanceof NamedList) {\n      NamedList nl = (NamedList) o;\n      nl.forEach((BiConsumer) (n, v) -> {\n        if (v instanceof NamedList || v instanceof List) insertPackageInfo(v, req);\n      });\n      Object v = nl.get(\"class\");\n      if (v instanceof String) {\n        String klas = (String) v;\n        PluginInfo.ClassName parsedClassName = new PluginInfo.ClassName(klas);\n        if (parsedClassName.pkg != null) {\n          SolrClassLoader solrClassLoader = req.getCore().getLatestSchema().getSolrClassLoader();\n          MapWriter mw = solrClassLoader instanceof PackageListeningClassLoader ?\n              ((PackageListeningClassLoader) solrClassLoader).getPackageVersion(parsedClassName) : null;\n          if (mw != null) nl.add(\"_packageinfo_\", mw);\n        }\n      }\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e451e492cce54699988e2ce0aea55e3ff170cb0","date":1600305561,"type":3,"author":"noblepaul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#insertPackageInfo(Object,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#insertPackageInfo(Object,SolrQueryRequest).mjava","sourceNew":"  /**\n   * If a plugin is loaded from a package, the version of the package being used should be added\n   * to the response\n   */\n  @SuppressWarnings(\"rawtypes\")\n  private void insertPackageInfo(Object o, SolrQueryRequest req) {\n    if (!req.getParams().getBool(\"meta\", false)) return;\n    if (o instanceof List) {\n      List l = (List) o;\n      for (Object o1 : l) {\n        if (o1 instanceof NamedList || o1 instanceof List) insertPackageInfo(o1, req);\n      }\n\n    } else if (o instanceof NamedList) {\n      NamedList nl = (NamedList) o;\n      nl.forEach((BiConsumer) (n, v) -> {\n        if (v instanceof NamedList || v instanceof List) insertPackageInfo(v, req);\n      });\n      Object v = nl.get(\"class\");\n      if (v instanceof String) {\n        String klas = (String) v;\n        PluginInfo.ClassName parsedClassName = new PluginInfo.ClassName(klas);\n        if (parsedClassName.pkg != null) {\n          SolrClassLoader solrClassLoader = req.getCore().getLatestSchema().getSolrClassLoader();\n          MapWriter mw = solrClassLoader instanceof PackageListeningClassLoader ?\n              ((PackageListeningClassLoader) solrClassLoader).getPackageVersion(parsedClassName) : null;\n          if (mw != null) nl.add(\"_packageinfo_\", mw);\n        }\n      }\n\n    }\n\n  }\n\n","sourceOld":"  /**\n   * If a plugin is loaded from a package, the version of the package being used should be added\n   * to the response\n   */\n  @SuppressWarnings(\"rawtypes\")\n  private void insertPackageInfo(Object o, SolrQueryRequest req) {\n    if (!req.getParams().getBool(\"meta\", false)) return;\n    if (o instanceof List) {\n      List l = (List) o;\n      for (Object o1 : l) {\n        if (o1 instanceof NamedList || o1 instanceof List) insertPackageInfo(o1, req);\n      }\n\n    } else if (o instanceof NamedList) {\n      NamedList nl = (NamedList) o;\n      nl.forEach((BiConsumer) (n, v) -> {\n        if (v instanceof NamedList || v instanceof List) insertPackageInfo(v, req);\n      });\n      Object v = nl.get(\"class\");\n      if (v instanceof String) {\n        String klas = (String) v;\n        PluginInfo.ClassName parsedClassName = new PluginInfo.ClassName(klas);\n        if (parsedClassName.pkg != null) {\n          MapWriter mw = req.getCore().getSchemaPluginsLoader().getPackageVersion(parsedClassName);\n          if (mw != null) nl.add(\"_packageinfo_\", mw);\n        }\n      }\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b2ed9b72e5fa27a7bd4857f222ca815341979d4a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1fc1087854af39c9b439f47d913fd3ac1d85ac5c":["b2ed9b72e5fa27a7bd4857f222ca815341979d4a"],"938fe8fd4d30ae70161827366f67c2382985e446":["1fc1087854af39c9b439f47d913fd3ac1d85ac5c"],"0e451e492cce54699988e2ce0aea55e3ff170cb0":["938fe8fd4d30ae70161827366f67c2382985e446"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e451e492cce54699988e2ce0aea55e3ff170cb0"]},"commit2Childs":{"b2ed9b72e5fa27a7bd4857f222ca815341979d4a":["1fc1087854af39c9b439f47d913fd3ac1d85ac5c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b2ed9b72e5fa27a7bd4857f222ca815341979d4a"],"1fc1087854af39c9b439f47d913fd3ac1d85ac5c":["938fe8fd4d30ae70161827366f67c2382985e446"],"938fe8fd4d30ae70161827366f67c2382985e446":["0e451e492cce54699988e2ce0aea55e3ff170cb0"],"0e451e492cce54699988e2ce0aea55e3ff170cb0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}