{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderInitiatedRecoveryState(String,String,String).mjava","commits":[{"id":"14d5815ecbef89580f5c48990bcd433f04f8563a","date":1399564106,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderInitiatedRecoveryState(String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  public String getLeaderInitiatedRecoveryState(String collection, String shardId, String coreName) {\n    \n    if (collection == null || shardId == null || coreName == null)\n      return null; // if we don't have complete data about a core in cloud mode, return null\n    \n    String znodePath = getLeaderInitiatedRecoveryZnodePath(collection, shardId, coreName);    \n    String state = null;\n    try {\n      byte[] data = zkClient.getData(znodePath, null, new Stat(), false);\n      if (data != null && data.length > 0)\n        state = new String(data, \"UTF-8\");\n    } catch (NoNodeException ignoreMe) {\n      // safe to ignore as this znode will only exist if the leader initiated recovery\n    } catch (ConnectionLossException cle) {\n      // sort of safe to ignore ??? Usually these are seen when the core is going down\n      // or there are bigger issues to deal with than reading this znode\n      log.warn(\"Unable to read \"+znodePath+\" due to: \"+cle);\n    } catch (SessionExpiredException see) {\n      // sort of safe to ignore ??? Usually these are seen when the core is going down\n      // or there are bigger issues to deal with than reading this znode\n      log.warn(\"Unable to read \"+znodePath+\" due to: \"+see);\n    } catch (UnsupportedEncodingException e) {\n      throw new Error(\"JVM Does not seem to support UTF-8\", e);\n    } catch (Exception exc) {\n      log.error(\"Failed to read data from znode \"+znodePath+\" due to: \"+exc);\n      if (exc instanceof SolrException) {\n        throw (SolrException)exc;\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Failed to read data from znodePath: \"+znodePath, exc);\n      }\n    }\n    return state;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07c824e7f6927860d366e4888be45e4db8c9e03b","date":1405193679,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderInitiatedRecoveryState(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderInitiatedRecoveryState(String,String,String).mjava","sourceNew":"  public String getLeaderInitiatedRecoveryState(String collection, String shardId, String coreNodeName) {\n    \n    if (collection == null || shardId == null || coreNodeName == null)\n      return null; // if we don't have complete data about a core in cloud mode, return null\n    \n    String znodePath = getLeaderInitiatedRecoveryZnodePath(collection, shardId, coreNodeName);\n    String state = null;\n    try {\n      byte[] data = zkClient.getData(znodePath, null, new Stat(), false);\n      if (data != null && data.length > 0)\n        state = new String(data, \"UTF-8\");\n    } catch (NoNodeException ignoreMe) {\n      // safe to ignore as this znode will only exist if the leader initiated recovery\n    } catch (ConnectionLossException cle) {\n      // sort of safe to ignore ??? Usually these are seen when the core is going down\n      // or there are bigger issues to deal with than reading this znode\n      log.warn(\"Unable to read \"+znodePath+\" due to: \"+cle);\n    } catch (SessionExpiredException see) {\n      // sort of safe to ignore ??? Usually these are seen when the core is going down\n      // or there are bigger issues to deal with than reading this znode\n      log.warn(\"Unable to read \"+znodePath+\" due to: \"+see);\n    } catch (UnsupportedEncodingException e) {\n      throw new Error(\"JVM Does not seem to support UTF-8\", e);\n    } catch (Exception exc) {\n      log.error(\"Failed to read data from znode \"+znodePath+\" due to: \"+exc);\n      if (exc instanceof SolrException) {\n        throw (SolrException)exc;\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Failed to read data from znodePath: \"+znodePath, exc);\n      }\n    }\n    return state;\n  }\n\n","sourceOld":"  public String getLeaderInitiatedRecoveryState(String collection, String shardId, String coreName) {\n    \n    if (collection == null || shardId == null || coreName == null)\n      return null; // if we don't have complete data about a core in cloud mode, return null\n    \n    String znodePath = getLeaderInitiatedRecoveryZnodePath(collection, shardId, coreName);    \n    String state = null;\n    try {\n      byte[] data = zkClient.getData(znodePath, null, new Stat(), false);\n      if (data != null && data.length > 0)\n        state = new String(data, \"UTF-8\");\n    } catch (NoNodeException ignoreMe) {\n      // safe to ignore as this znode will only exist if the leader initiated recovery\n    } catch (ConnectionLossException cle) {\n      // sort of safe to ignore ??? Usually these are seen when the core is going down\n      // or there are bigger issues to deal with than reading this znode\n      log.warn(\"Unable to read \"+znodePath+\" due to: \"+cle);\n    } catch (SessionExpiredException see) {\n      // sort of safe to ignore ??? Usually these are seen when the core is going down\n      // or there are bigger issues to deal with than reading this znode\n      log.warn(\"Unable to read \"+znodePath+\" due to: \"+see);\n    } catch (UnsupportedEncodingException e) {\n      throw new Error(\"JVM Does not seem to support UTF-8\", e);\n    } catch (Exception exc) {\n      log.error(\"Failed to read data from znode \"+znodePath+\" due to: \"+exc);\n      if (exc instanceof SolrException) {\n        throw (SolrException)exc;\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Failed to read data from znodePath: \"+znodePath, exc);\n      }\n    }\n    return state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e758245b4acfbc0eae618c8f5d49f799d3b33157","date":1412710512,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderInitiatedRecoveryState(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderInitiatedRecoveryState(String,String,String).mjava","sourceNew":"  public String getLeaderInitiatedRecoveryState(String collection, String shardId, String coreNodeName) {\n    Map<String,Object> stateObj = getLeaderInitiatedRecoveryStateObject(collection, shardId, coreNodeName);\n    return (stateObj != null) ? (String)stateObj.get(\"state\") : null;\n  }\n\n","sourceOld":"  public String getLeaderInitiatedRecoveryState(String collection, String shardId, String coreNodeName) {\n    \n    if (collection == null || shardId == null || coreNodeName == null)\n      return null; // if we don't have complete data about a core in cloud mode, return null\n    \n    String znodePath = getLeaderInitiatedRecoveryZnodePath(collection, shardId, coreNodeName);\n    String state = null;\n    try {\n      byte[] data = zkClient.getData(znodePath, null, new Stat(), false);\n      if (data != null && data.length > 0)\n        state = new String(data, \"UTF-8\");\n    } catch (NoNodeException ignoreMe) {\n      // safe to ignore as this znode will only exist if the leader initiated recovery\n    } catch (ConnectionLossException cle) {\n      // sort of safe to ignore ??? Usually these are seen when the core is going down\n      // or there are bigger issues to deal with than reading this znode\n      log.warn(\"Unable to read \"+znodePath+\" due to: \"+cle);\n    } catch (SessionExpiredException see) {\n      // sort of safe to ignore ??? Usually these are seen when the core is going down\n      // or there are bigger issues to deal with than reading this znode\n      log.warn(\"Unable to read \"+znodePath+\" due to: \"+see);\n    } catch (UnsupportedEncodingException e) {\n      throw new Error(\"JVM Does not seem to support UTF-8\", e);\n    } catch (Exception exc) {\n      log.error(\"Failed to read data from znode \"+znodePath+\" due to: \"+exc);\n      if (exc instanceof SolrException) {\n        throw (SolrException)exc;\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Failed to read data from znodePath: \"+znodePath, exc);\n      }\n    }\n    return state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderInitiatedRecoveryState(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderInitiatedRecoveryState(String,String,String).mjava","sourceNew":"  public String getLeaderInitiatedRecoveryState(String collection, String shardId, String coreNodeName) {\n    Map<String,Object> stateObj = getLeaderInitiatedRecoveryStateObject(collection, shardId, coreNodeName);\n    return (stateObj != null) ? (String)stateObj.get(\"state\") : null;\n  }\n\n","sourceOld":"  public String getLeaderInitiatedRecoveryState(String collection, String shardId, String coreNodeName) {\n    \n    if (collection == null || shardId == null || coreNodeName == null)\n      return null; // if we don't have complete data about a core in cloud mode, return null\n    \n    String znodePath = getLeaderInitiatedRecoveryZnodePath(collection, shardId, coreNodeName);\n    String state = null;\n    try {\n      byte[] data = zkClient.getData(znodePath, null, new Stat(), false);\n      if (data != null && data.length > 0)\n        state = new String(data, \"UTF-8\");\n    } catch (NoNodeException ignoreMe) {\n      // safe to ignore as this znode will only exist if the leader initiated recovery\n    } catch (ConnectionLossException cle) {\n      // sort of safe to ignore ??? Usually these are seen when the core is going down\n      // or there are bigger issues to deal with than reading this znode\n      log.warn(\"Unable to read \"+znodePath+\" due to: \"+cle);\n    } catch (SessionExpiredException see) {\n      // sort of safe to ignore ??? Usually these are seen when the core is going down\n      // or there are bigger issues to deal with than reading this znode\n      log.warn(\"Unable to read \"+znodePath+\" due to: \"+see);\n    } catch (UnsupportedEncodingException e) {\n      throw new Error(\"JVM Does not seem to support UTF-8\", e);\n    } catch (Exception exc) {\n      log.error(\"Failed to read data from znode \"+znodePath+\" due to: \"+exc);\n      if (exc instanceof SolrException) {\n        throw (SolrException)exc;\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Failed to read data from znodePath: \"+znodePath, exc);\n      }\n    }\n    return state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbcfc050b9f253136eaa5950b57248b2109eac11","date":1427308993,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderInitiatedRecoveryState(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderInitiatedRecoveryState(String,String,String).mjava","sourceNew":"  public String getLeaderInitiatedRecoveryState(String collection, String shardId, String coreNodeName) {\n    Map<String, Object> stateObj = getLeaderInitiatedRecoveryStateObject(collection, shardId, coreNodeName);\n    return (stateObj != null) ? (String) stateObj.get(\"state\") : null;\n  }\n\n","sourceOld":"  public String getLeaderInitiatedRecoveryState(String collection, String shardId, String coreNodeName) {\n    Map<String,Object> stateObj = getLeaderInitiatedRecoveryStateObject(collection, shardId, coreNodeName);\n    return (stateObj != null) ? (String)stateObj.get(\"state\") : null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderInitiatedRecoveryState(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderInitiatedRecoveryState(String,String,String).mjava","sourceNew":"  public String getLeaderInitiatedRecoveryState(String collection, String shardId, String coreNodeName) {\n    Map<String, Object> stateObj = getLeaderInitiatedRecoveryStateObject(collection, shardId, coreNodeName);\n    return (stateObj != null) ? (String) stateObj.get(\"state\") : null;\n  }\n\n","sourceOld":"  public String getLeaderInitiatedRecoveryState(String collection, String shardId, String coreNodeName) {\n    Map<String,Object> stateObj = getLeaderInitiatedRecoveryStateObject(collection, shardId, coreNodeName);\n    return (stateObj != null) ? (String)stateObj.get(\"state\") : null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderInitiatedRecoveryState(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderInitiatedRecoveryState(String,String,String).mjava","sourceNew":"  public Replica.State getLeaderInitiatedRecoveryState(String collection, String shardId, String coreNodeName) {\n    final Map<String, Object> stateObj = getLeaderInitiatedRecoveryStateObject(collection, shardId, coreNodeName);\n    if (stateObj == null) {\n      return null;\n    }\n    final String stateStr = (String) stateObj.get(ZkStateReader.STATE_PROP);\n    return stateStr == null ? null : Replica.State.getState(stateStr);\n  }\n\n","sourceOld":"  public String getLeaderInitiatedRecoveryState(String collection, String shardId, String coreNodeName) {\n    Map<String, Object> stateObj = getLeaderInitiatedRecoveryStateObject(collection, shardId, coreNodeName);\n    return (stateObj != null) ? (String) stateObj.get(\"state\") : null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84f20f331d8001864545c7021812d8c6509c7593","date":1517216128,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderInitiatedRecoveryState(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderInitiatedRecoveryState(String,String,String).mjava","sourceNew":"  @Deprecated\n  public Replica.State getLeaderInitiatedRecoveryState(String collection, String shardId, String coreNodeName) {\n    final Map<String, Object> stateObj = getLeaderInitiatedRecoveryStateObject(collection, shardId, coreNodeName);\n    if (stateObj == null) {\n      return null;\n    }\n    final String stateStr = (String) stateObj.get(ZkStateReader.STATE_PROP);\n    return stateStr == null ? null : Replica.State.getState(stateStr);\n  }\n\n","sourceOld":"  public Replica.State getLeaderInitiatedRecoveryState(String collection, String shardId, String coreNodeName) {\n    final Map<String, Object> stateObj = getLeaderInitiatedRecoveryStateObject(collection, shardId, coreNodeName);\n    if (stateObj == null) {\n      return null;\n    }\n    final String stateStr = (String) stateObj.get(ZkStateReader.STATE_PROP);\n    return stateStr == null ? null : Replica.State.getState(stateStr);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180","date":1539076849,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderInitiatedRecoveryState(String,String,String).mjava","sourceNew":null,"sourceOld":"  @Deprecated\n  public Replica.State getLeaderInitiatedRecoveryState(String collection, String shardId, String coreNodeName) {\n    final Map<String, Object> stateObj = getLeaderInitiatedRecoveryStateObject(collection, shardId, coreNodeName);\n    if (stateObj == null) {\n      return null;\n    }\n    final String stateStr = (String) stateObj.get(ZkStateReader.STATE_PROP);\n    return stateStr == null ? null : Replica.State.getState(stateStr);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["fbcfc050b9f253136eaa5950b57248b2109eac11"],"e758245b4acfbc0eae618c8f5d49f799d3b33157":["07c824e7f6927860d366e4888be45e4db8c9e03b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["e758245b4acfbc0eae618c8f5d49f799d3b33157","fbcfc050b9f253136eaa5950b57248b2109eac11"],"55980207f1977bd1463465de1659b821347e2fa8":["07c824e7f6927860d366e4888be45e4db8c9e03b","e758245b4acfbc0eae618c8f5d49f799d3b33157"],"07c824e7f6927860d366e4888be45e4db8c9e03b":["14d5815ecbef89580f5c48990bcd433f04f8563a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"84f20f331d8001864545c7021812d8c6509c7593":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"14d5815ecbef89580f5c48990bcd433f04f8563a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180":["84f20f331d8001864545c7021812d8c6509c7593"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["e758245b4acfbc0eae618c8f5d49f799d3b33157"]},"commit2Childs":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["84f20f331d8001864545c7021812d8c6509c7593"],"e758245b4acfbc0eae618c8f5d49f799d3b33157":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","55980207f1977bd1463465de1659b821347e2fa8","fbcfc050b9f253136eaa5950b57248b2109eac11"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"55980207f1977bd1463465de1659b821347e2fa8":[],"07c824e7f6927860d366e4888be45e4db8c9e03b":["e758245b4acfbc0eae618c8f5d49f799d3b33157","55980207f1977bd1463465de1659b821347e2fa8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["14d5815ecbef89580f5c48990bcd433f04f8563a"],"14d5815ecbef89580f5c48990bcd433f04f8563a":["07c824e7f6927860d366e4888be45e4db8c9e03b"],"84f20f331d8001864545c7021812d8c6509c7593":["b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180"],"b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["a219f1dcad1700e84807666bdbd2b573e8de7021","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}