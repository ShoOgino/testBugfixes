{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/Benchmark#main(String[]).mjava","commits":[{"id":"b2e70b697d9f5a6130848741a4f0cdc08a1fe258","date":1168661303,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/Benchmark#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\r\n   * Run the benchmark algorithm.\r\n   * @param args benchmark config and algorithm files\r\n   */\r\n  public static void main(String[] args) {\r\n    // verify command line args\r\n    if (args.length < 1) {\r\n      System.err.println(\"Usage: java Benchmark <algorithm file>\");\r\n      System.exit(1);\r\n    }\r\n    \r\n    // verify input files \r\n    File algFile = new File(args[0]);\r\n    if (!algFile.exists() || !algFile.isFile() || !algFile.canRead()) {\r\n      System.err.println(\"cannot find/read algorithm file: \"+algFile.getAbsolutePath()); \r\n      System.exit(1);\r\n    }\r\n    \r\n    // last preparations\r\n    PerfRunData runData = null;\r\n    try {\r\n      runData = new PerfRunData(new Config(algFile));\r\n    } catch (Exception e) {\r\n      System.err.println(\"Error: cannot init PerfRunData: \"+e.getMessage());\r\n      e.printStackTrace();\r\n      System.exit(1);\r\n    }\r\n    \r\n    // parse algorithm\r\n    Algorithm algorithm = null;\r\n    try {\r\n      algorithm = new Algorithm(runData);\r\n    } catch (Exception e) {\r\n      System.err.println(\"Error: cannot understand algorithm from file: \"+algFile.getAbsolutePath());\r\n      e.printStackTrace();\r\n      System.exit(1);\r\n    }\r\n\r\n    System.out.println(\"------------> algorithm:\");\r\n    System.out.println(algorithm.toString());\r\n\r\n    // execute\r\n    try {\r\n      algorithm.execute();\r\n    } catch (Exception e) {\r\n      System.err.println(\"Error: cannot execute the algorithm! \"+e.getMessage());\r\n      e.printStackTrace();\r\n    }\r\n\r\n    System.out.println(\"####################\");\r\n    System.out.println(\"###  D O N E !!! ###\");\r\n    System.out.println(\"####################\");\r\n\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"975cb787e66d548dba4f63c22c08d692c7235f73","date":1174605228,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/Benchmark#main(String[]).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/Benchmark#main(String[]).mjava","sourceNew":"  /**\r\n   * Run the benchmark algorithm.\r\n   * @param args benchmark config and algorithm files\r\n   */\r\n  public static void main(String[] args) {\r\n    // verify command line args\r\n    if (args.length < 1) {\r\n      System.err.println(\"Usage: java Benchmark <algorithm file>\");\r\n      System.exit(1);\r\n    }\r\n    \r\n    // verify input files \r\n    File algFile = new File(args[0]);\r\n    if (!algFile.exists() || !algFile.isFile() || !algFile.canRead()) {\r\n      System.err.println(\"cannot find/read algorithm file: \"+algFile.getAbsolutePath()); \r\n      System.exit(1);\r\n    }\r\n    \r\n    System.out.println(\"Running algorithm from: \"+algFile.getAbsolutePath());\r\n    \r\n    Benchmark benchmark = null;\r\n    try {\r\n      benchmark = new Benchmark(new FileReader(algFile));\r\n    } catch (Exception e) {\r\n      e.printStackTrace();\r\n      System.exit(1);\r\n    }\r\n\r\n    System.out.println(\"------------> algorithm:\");\r\n    System.out.println(benchmark.getAlgorithm().toString());\r\n\r\n    // execute\r\n    try {\r\n      benchmark.execute();\r\n    } catch (Exception e) {\r\n      System.err.println(\"Error: cannot execute the algorithm! \"+e.getMessage());\r\n      e.printStackTrace();\r\n    }\r\n\r\n    System.out.println(\"####################\");\r\n    System.out.println(\"###  D O N E !!! ###\");\r\n    System.out.println(\"####################\");\r\n\r\n  }\r\n\n","sourceOld":"  /**\r\n   * Run the benchmark algorithm.\r\n   * @param args benchmark config and algorithm files\r\n   */\r\n  public static void main(String[] args) {\r\n    // verify command line args\r\n    if (args.length < 1) {\r\n      System.err.println(\"Usage: java Benchmark <algorithm file>\");\r\n      System.exit(1);\r\n    }\r\n    \r\n    // verify input files \r\n    File algFile = new File(args[0]);\r\n    if (!algFile.exists() || !algFile.isFile() || !algFile.canRead()) {\r\n      System.err.println(\"cannot find/read algorithm file: \"+algFile.getAbsolutePath()); \r\n      System.exit(1);\r\n    }\r\n    \r\n    // last preparations\r\n    PerfRunData runData = null;\r\n    try {\r\n      runData = new PerfRunData(new Config(algFile));\r\n    } catch (Exception e) {\r\n      System.err.println(\"Error: cannot init PerfRunData: \"+e.getMessage());\r\n      e.printStackTrace();\r\n      System.exit(1);\r\n    }\r\n    \r\n    // parse algorithm\r\n    Algorithm algorithm = null;\r\n    try {\r\n      algorithm = new Algorithm(runData);\r\n    } catch (Exception e) {\r\n      System.err.println(\"Error: cannot understand algorithm from file: \"+algFile.getAbsolutePath());\r\n      e.printStackTrace();\r\n      System.exit(1);\r\n    }\r\n\r\n    System.out.println(\"------------> algorithm:\");\r\n    System.out.println(algorithm.toString());\r\n\r\n    // execute\r\n    try {\r\n      algorithm.execute();\r\n    } catch (Exception e) {\r\n      System.err.println(\"Error: cannot execute the algorithm! \"+e.getMessage());\r\n      e.printStackTrace();\r\n    }\r\n\r\n    System.out.println(\"####################\");\r\n    System.out.println(\"###  D O N E !!! ###\");\r\n    System.out.println(\"####################\");\r\n\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3738fa43eaa87dc7b393fe98b04cde1019e20bac","date":1175557034,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/Benchmark#main(String[]).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/Benchmark#main(String[]).mjava","sourceNew":"  /**\n   * Run the benchmark algorithm.\n   * @param args benchmark config and algorithm files\n   */\n  public static void main(String[] args) {\n    // verify command line args\n    if (args.length < 1) {\n      System.err.println(\"Usage: java Benchmark <algorithm file>\");\n      System.exit(1);\n    }\n    \n    // verify input files \n    File algFile = new File(args[0]);\n    if (!algFile.exists() || !algFile.isFile() || !algFile.canRead()) {\n      System.err.println(\"cannot find/read algorithm file: \"+algFile.getAbsolutePath()); \n      System.exit(1);\n    }\n    \n    System.out.println(\"Running algorithm from: \"+algFile.getAbsolutePath());\n    \n    Benchmark benchmark = null;\n    try {\n      benchmark = new Benchmark(new FileReader(algFile));\n    } catch (Exception e) {\n      e.printStackTrace();\n      System.exit(1);\n    }\n\n    System.out.println(\"------------> algorithm:\");\n    System.out.println(benchmark.getAlgorithm().toString());\n\n    // execute\n    try {\n      benchmark.execute();\n    } catch (Exception e) {\n      System.err.println(\"Error: cannot execute the algorithm! \"+e.getMessage());\n      e.printStackTrace();\n    }\n\n    System.out.println(\"####################\");\n    System.out.println(\"###  D O N E !!! ###\");\n    System.out.println(\"####################\");\n\n  }\n\n","sourceOld":"  /**\r\n   * Run the benchmark algorithm.\r\n   * @param args benchmark config and algorithm files\r\n   */\r\n  public static void main(String[] args) {\r\n    // verify command line args\r\n    if (args.length < 1) {\r\n      System.err.println(\"Usage: java Benchmark <algorithm file>\");\r\n      System.exit(1);\r\n    }\r\n    \r\n    // verify input files \r\n    File algFile = new File(args[0]);\r\n    if (!algFile.exists() || !algFile.isFile() || !algFile.canRead()) {\r\n      System.err.println(\"cannot find/read algorithm file: \"+algFile.getAbsolutePath()); \r\n      System.exit(1);\r\n    }\r\n    \r\n    System.out.println(\"Running algorithm from: \"+algFile.getAbsolutePath());\r\n    \r\n    Benchmark benchmark = null;\r\n    try {\r\n      benchmark = new Benchmark(new FileReader(algFile));\r\n    } catch (Exception e) {\r\n      e.printStackTrace();\r\n      System.exit(1);\r\n    }\r\n\r\n    System.out.println(\"------------> algorithm:\");\r\n    System.out.println(benchmark.getAlgorithm().toString());\r\n\r\n    // execute\r\n    try {\r\n      benchmark.execute();\r\n    } catch (Exception e) {\r\n      System.err.println(\"Error: cannot execute the algorithm! \"+e.getMessage());\r\n      e.printStackTrace();\r\n    }\r\n\r\n    System.out.println(\"####################\");\r\n    System.out.println(\"###  D O N E !!! ###\");\r\n    System.out.println(\"####################\");\r\n\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/Benchmark#main(String[]).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/Benchmark#main(String[]).mjava","sourceNew":"  /**\n   * Run the benchmark algorithm.\n   * @param args benchmark config and algorithm files\n   */\n  public static void main(String[] args) {\n    // verify command line args\n    if (args.length < 1) {\n      System.err.println(\"Usage: java Benchmark <algorithm file>\");\n      System.exit(1);\n    }\n    \n    // verify input files \n    File algFile = new File(args[0]);\n    if (!algFile.exists() || !algFile.isFile() || !algFile.canRead()) {\n      System.err.println(\"cannot find/read algorithm file: \"+algFile.getAbsolutePath()); \n      System.exit(1);\n    }\n    \n    System.out.println(\"Running algorithm from: \"+algFile.getAbsolutePath());\n    \n    Benchmark benchmark = null;\n    try {\n      benchmark = new Benchmark(new FileReader(algFile));\n    } catch (Exception e) {\n      e.printStackTrace();\n      System.exit(1);\n    }\n\n    System.out.println(\"------------> algorithm:\");\n    System.out.println(benchmark.getAlgorithm().toString());\n\n    // execute\n    try {\n      benchmark.execute();\n    } catch (Exception e) {\n      System.err.println(\"Error: cannot execute the algorithm! \"+e.getMessage());\n      e.printStackTrace();\n    }\n\n    System.out.println(\"####################\");\n    System.out.println(\"###  D O N E !!! ###\");\n    System.out.println(\"####################\");\n\n  }\n\n","sourceOld":"  /**\n   * Run the benchmark algorithm.\n   * @param args benchmark config and algorithm files\n   */\n  public static void main(String[] args) {\n    // verify command line args\n    if (args.length < 1) {\n      System.err.println(\"Usage: java Benchmark <algorithm file>\");\n      System.exit(1);\n    }\n    \n    // verify input files \n    File algFile = new File(args[0]);\n    if (!algFile.exists() || !algFile.isFile() || !algFile.canRead()) {\n      System.err.println(\"cannot find/read algorithm file: \"+algFile.getAbsolutePath()); \n      System.exit(1);\n    }\n    \n    System.out.println(\"Running algorithm from: \"+algFile.getAbsolutePath());\n    \n    Benchmark benchmark = null;\n    try {\n      benchmark = new Benchmark(new FileReader(algFile));\n    } catch (Exception e) {\n      e.printStackTrace();\n      System.exit(1);\n    }\n\n    System.out.println(\"------------> algorithm:\");\n    System.out.println(benchmark.getAlgorithm().toString());\n\n    // execute\n    try {\n      benchmark.execute();\n    } catch (Exception e) {\n      System.err.println(\"Error: cannot execute the algorithm! \"+e.getMessage());\n      e.printStackTrace();\n    }\n\n    System.out.println(\"####################\");\n    System.out.println(\"###  D O N E !!! ###\");\n    System.out.println(\"####################\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"975cb787e66d548dba4f63c22c08d692c7235f73":["b2e70b697d9f5a6130848741a4f0cdc08a1fe258"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["975cb787e66d548dba4f63c22c08d692c7235f73"],"b2e70b697d9f5a6130848741a4f0cdc08a1fe258":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"]},"commit2Childs":{"975cb787e66d548dba4f63c22c08d692c7235f73":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b2e70b697d9f5a6130848741a4f0cdc08a1fe258"],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b2e70b697d9f5a6130848741a4f0cdc08a1fe258":["975cb787e66d548dba4f63c22c08d692c7235f73"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}