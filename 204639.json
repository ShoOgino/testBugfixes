{"path":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#sortKey(int).mjava","commits":[{"id":"d210c7f333402b4828c1d10dfd5457c9fe312c7d","date":1457987131,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#sortKey(int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#distance(int).mjava","sourceNew":"  // TODO: optimize for single-valued case?\n  // TODO: do all kinds of other optimizations!\n  double sortKey(int doc) {\n    currentDocs.setDocument(doc);\n\n    int numValues = currentDocs.count();\n    if (numValues == 0) {\n      return missingValue;\n    }\n\n    double minValue = Double.POSITIVE_INFINITY;\n    for (int i = 0; i < numValues; i++) {\n      long encoded = currentDocs.valueAt(i);\n      double docLatitude = LatLonPoint.decodeLatitude((int)(encoded >> 32));\n      double docLongitude = LatLonPoint.decodeLongitude((int)(encoded & 0xFFFFFFFF));\n      minValue = Math.min(minValue, haversin1(latitude, longitude, docLatitude, docLongitude));\n    }\n    return minValue;\n  }\n\n","sourceOld":"  // TODO: optimize for single-valued case?\n  // TODO: do all kinds of other optimizations!\n  double distance(int doc) {\n    currentDocs.setDocument(doc);\n\n    int numValues = currentDocs.count();\n    if (numValues == 0) {\n      return missingValue;\n    }\n\n    double minValue = Double.POSITIVE_INFINITY;\n    for (int i = 0; i < numValues; i++) {\n      long encoded = currentDocs.valueAt(i);\n      double docLatitude = LatLonPoint.decodeLatitude((int)(encoded >> 32));\n      double docLongitude = LatLonPoint.decodeLongitude((int)(encoded & 0xFFFFFFFF));\n      minValue = Math.min(minValue, GeoDistanceUtils.haversin(latitude, longitude, docLatitude, docLongitude));\n    }\n    return minValue;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98e0f1aa9ab98b9d47cc76e3d38926353c75b571","date":1457996850,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#sortKey(int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#sortKey(int).mjava","sourceNew":"  // TODO: optimize for single-valued case?\n  // TODO: do all kinds of other optimizations!\n  double sortKey(int doc) {\n    currentDocs.setDocument(doc);\n\n    double minValue = Double.POSITIVE_INFINITY;\n    int numValues = currentDocs.count();\n    for (int i = 0; i < numValues; i++) {\n      long encoded = currentDocs.valueAt(i);\n      double docLatitude = LatLonPoint.decodeLatitude((int)(encoded >> 32));\n      double docLongitude = LatLonPoint.decodeLongitude((int)(encoded & 0xFFFFFFFF));\n      minValue = Math.min(minValue, haversin1(latitude, longitude, docLatitude, docLongitude));\n    }\n    return minValue;\n  }\n\n","sourceOld":"  // TODO: optimize for single-valued case?\n  // TODO: do all kinds of other optimizations!\n  double sortKey(int doc) {\n    currentDocs.setDocument(doc);\n\n    int numValues = currentDocs.count();\n    if (numValues == 0) {\n      return missingValue;\n    }\n\n    double minValue = Double.POSITIVE_INFINITY;\n    for (int i = 0; i < numValues; i++) {\n      long encoded = currentDocs.valueAt(i);\n      double docLatitude = LatLonPoint.decodeLatitude((int)(encoded >> 32));\n      double docLongitude = LatLonPoint.decodeLongitude((int)(encoded & 0xFFFFFFFF));\n      minValue = Math.min(minValue, haversin1(latitude, longitude, docLatitude, docLongitude));\n    }\n    return minValue;\n  }\n\n","bugFix":["54f531dff997ea7763360cb59f5ccadc6811b519"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ec60431d008a694828dacb4bc3cda775b6c44a9f","date":1458570843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#sortKey(int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#sortKey(int).mjava","sourceNew":"  // TODO: optimize for single-valued case?\n  // TODO: do all kinds of other optimizations!\n  double sortKey(int doc) {\n    currentDocs.setDocument(doc);\n\n    double minValue = Double.POSITIVE_INFINITY;\n    int numValues = currentDocs.count();\n    for (int i = 0; i < numValues; i++) {\n      long encoded = currentDocs.valueAt(i);\n      double docLatitude = LatLonPoint.decodeLatitude((int)(encoded >> 32));\n      double docLongitude = LatLonPoint.decodeLongitude((int)(encoded & 0xFFFFFFFF));\n      minValue = Math.min(minValue, SloppyMath.haversinSortKey(latitude, longitude, docLatitude, docLongitude));\n    }\n    return minValue;\n  }\n\n","sourceOld":"  // TODO: optimize for single-valued case?\n  // TODO: do all kinds of other optimizations!\n  double sortKey(int doc) {\n    currentDocs.setDocument(doc);\n\n    double minValue = Double.POSITIVE_INFINITY;\n    int numValues = currentDocs.count();\n    for (int i = 0; i < numValues; i++) {\n      long encoded = currentDocs.valueAt(i);\n      double docLatitude = LatLonPoint.decodeLatitude((int)(encoded >> 32));\n      double docLongitude = LatLonPoint.decodeLongitude((int)(encoded & 0xFFFFFFFF));\n      minValue = Math.min(minValue, haversin1(latitude, longitude, docLatitude, docLongitude));\n    }\n    return minValue;\n  }\n\n","bugFix":["d210c7f333402b4828c1d10dfd5457c9fe312c7d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed48f9723ad1b29c351ea43b5a2c8f90c3a45737","date":1460056040,"type":3,"author":"nknize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#sortKey(int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#sortKey(int).mjava","sourceNew":"  // TODO: optimize for single-valued case?\n  // TODO: do all kinds of other optimizations!\n  double sortKey(int doc) {\n    currentDocs.setDocument(doc);\n\n    double minValue = Double.POSITIVE_INFINITY;\n    int numValues = currentDocs.count();\n    for (int i = 0; i < numValues; i++) {\n      long encoded = currentDocs.valueAt(i);\n      double docLatitude = decodeLatitude((int)(encoded >> 32));\n      double docLongitude = decodeLongitude((int)(encoded & 0xFFFFFFFF));\n      minValue = Math.min(minValue, SloppyMath.haversinSortKey(latitude, longitude, docLatitude, docLongitude));\n    }\n    return minValue;\n  }\n\n","sourceOld":"  // TODO: optimize for single-valued case?\n  // TODO: do all kinds of other optimizations!\n  double sortKey(int doc) {\n    currentDocs.setDocument(doc);\n\n    double minValue = Double.POSITIVE_INFINITY;\n    int numValues = currentDocs.count();\n    for (int i = 0; i < numValues; i++) {\n      long encoded = currentDocs.valueAt(i);\n      double docLatitude = LatLonPoint.decodeLatitude((int)(encoded >> 32));\n      double docLongitude = LatLonPoint.decodeLongitude((int)(encoded & 0xFFFFFFFF));\n      minValue = Math.min(minValue, SloppyMath.haversinSortKey(latitude, longitude, docLatitude, docLongitude));\n    }\n    return minValue;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09f15823cf5eb6e807005579e875e117d8598f95","date":1460066385,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#sortKey(int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#sortKey(int).mjava","sourceNew":"  // TODO: optimize for single-valued case?\n  // TODO: do all kinds of other optimizations!\n  double sortKey(int doc) {\n    currentDocs.setDocument(doc);\n\n    double minValue = Double.POSITIVE_INFINITY;\n    int numValues = currentDocs.count();\n    for (int i = 0; i < numValues; i++) {\n      long encoded = currentDocs.valueAt(i);\n      double docLatitude = decodeLatitude((int)(encoded >> 32));\n      double docLongitude = decodeLongitude((int)(encoded & 0xFFFFFFFF));\n      minValue = Math.min(minValue, SloppyMath.haversinSortKey(latitude, longitude, docLatitude, docLongitude));\n    }\n    return minValue;\n  }\n\n","sourceOld":"  // TODO: optimize for single-valued case?\n  // TODO: do all kinds of other optimizations!\n  double sortKey(int doc) {\n    currentDocs.setDocument(doc);\n\n    double minValue = Double.POSITIVE_INFINITY;\n    int numValues = currentDocs.count();\n    for (int i = 0; i < numValues; i++) {\n      long encoded = currentDocs.valueAt(i);\n      double docLatitude = LatLonPoint.decodeLatitude((int)(encoded >> 32));\n      double docLongitude = LatLonPoint.decodeLongitude((int)(encoded & 0xFFFFFFFF));\n      minValue = Math.min(minValue, SloppyMath.haversinSortKey(latitude, longitude, docLatitude, docLongitude));\n    }\n    return minValue;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#sortKey(int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#sortKey(int).mjava","sourceNew":"  // TODO: optimize for single-valued case?\n  // TODO: do all kinds of other optimizations!\n  double sortKey(int doc) throws IOException {\n    if (doc > currentDocs.docID()) {\n      currentDocs.advance(doc);\n    }\n    double minValue = Double.POSITIVE_INFINITY;\n    if (doc == currentDocs.docID()) {\n      setValues();\n      int numValues = currentDocs.docValueCount();\n      for (int i = 0; i < numValues; i++) {\n        long encoded = currentValues[i];\n        double docLatitude = decodeLatitude((int)(encoded >> 32));\n        double docLongitude = decodeLongitude((int)(encoded & 0xFFFFFFFF));\n        minValue = Math.min(minValue, SloppyMath.haversinSortKey(latitude, longitude, docLatitude, docLongitude));\n      }\n    }\n    return minValue;\n  }\n\n","sourceOld":"  // TODO: optimize for single-valued case?\n  // TODO: do all kinds of other optimizations!\n  double sortKey(int doc) {\n    currentDocs.setDocument(doc);\n\n    double minValue = Double.POSITIVE_INFINITY;\n    int numValues = currentDocs.count();\n    for (int i = 0; i < numValues; i++) {\n      long encoded = currentDocs.valueAt(i);\n      double docLatitude = decodeLatitude((int)(encoded >> 32));\n      double docLongitude = decodeLongitude((int)(encoded & 0xFFFFFFFF));\n      minValue = Math.min(minValue, SloppyMath.haversinSortKey(latitude, longitude, docLatitude, docLongitude));\n    }\n    return minValue;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#sortKey(int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#sortKey(int).mjava","sourceNew":"  // TODO: optimize for single-valued case?\n  // TODO: do all kinds of other optimizations!\n  double sortKey(int doc) throws IOException {\n    if (doc > currentDocs.docID()) {\n      currentDocs.advance(doc);\n    }\n    double minValue = Double.POSITIVE_INFINITY;\n    if (doc == currentDocs.docID()) {\n      setValues();\n      int numValues = currentDocs.docValueCount();\n      for (int i = 0; i < numValues; i++) {\n        long encoded = currentValues[i];\n        double docLatitude = decodeLatitude((int)(encoded >> 32));\n        double docLongitude = decodeLongitude((int)(encoded & 0xFFFFFFFF));\n        minValue = Math.min(minValue, SloppyMath.haversinSortKey(latitude, longitude, docLatitude, docLongitude));\n      }\n    }\n    return minValue;\n  }\n\n","sourceOld":"  // TODO: optimize for single-valued case?\n  // TODO: do all kinds of other optimizations!\n  double sortKey(int doc) {\n    currentDocs.setDocument(doc);\n\n    double minValue = Double.POSITIVE_INFINITY;\n    int numValues = currentDocs.count();\n    for (int i = 0; i < numValues; i++) {\n      long encoded = currentDocs.valueAt(i);\n      double docLatitude = decodeLatitude((int)(encoded >> 32));\n      double docLongitude = decodeLongitude((int)(encoded & 0xFFFFFFFF));\n      minValue = Math.min(minValue, SloppyMath.haversinSortKey(latitude, longitude, docLatitude, docLongitude));\n    }\n    return minValue;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#sortKey(int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#sortKey(int).mjava","sourceNew":"  // TODO: optimize for single-valued case?\n  // TODO: do all kinds of other optimizations!\n  double sortKey(int doc) throws IOException {\n    if (doc > currentDocs.docID()) {\n      currentDocs.advance(doc);\n    }\n    double minValue = Double.POSITIVE_INFINITY;\n    if (doc == currentDocs.docID()) {\n      setValues();\n      int numValues = currentDocs.docValueCount();\n      for (int i = 0; i < numValues; i++) {\n        long encoded = currentValues[i];\n        double docLatitude = decodeLatitude((int)(encoded >> 32));\n        double docLongitude = decodeLongitude((int)(encoded & 0xFFFFFFFF));\n        minValue = Math.min(minValue, SloppyMath.haversinSortKey(latitude, longitude, docLatitude, docLongitude));\n      }\n    }\n    return minValue;\n  }\n\n","sourceOld":"  // TODO: optimize for single-valued case?\n  // TODO: do all kinds of other optimizations!\n  double sortKey(int doc) {\n    currentDocs.setDocument(doc);\n\n    double minValue = Double.POSITIVE_INFINITY;\n    int numValues = currentDocs.count();\n    for (int i = 0; i < numValues; i++) {\n      long encoded = currentDocs.valueAt(i);\n      double docLatitude = decodeLatitude((int)(encoded >> 32));\n      double docLongitude = decodeLongitude((int)(encoded & 0xFFFFFFFF));\n      minValue = Math.min(minValue, SloppyMath.haversinSortKey(latitude, longitude, docLatitude, docLongitude));\n    }\n    return minValue;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"88b0212386fe531136816706dc37dc49b9dbf7dc","date":1532560226,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#sortKey(int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#sortKey(int).mjava","sourceNew":"  // TODO: optimize for single-valued case?\n  // TODO: do all kinds of other optimizations!\n  double sortKey(int doc) throws IOException {\n    if (doc > currentDocs.docID()) {\n      currentDocs.advance(doc);\n    }\n    double minValue = Double.POSITIVE_INFINITY;\n    if (doc == currentDocs.docID()) {\n      setValues();\n      int numValues = currentDocs.docValueCount();\n      for (int i = 0; i < numValues; i++) {\n        long encoded = currentValues[i];\n        double docLatitude = decodeLatitude((int)(encoded >> 32));\n        double docLongitude = decodeLongitude((int)(encoded & 0xFFFFFFFF));\n        minValue = Math.min(minValue, SloppyMath.haversinSortKey(latitude, longitude, docLatitude, docLongitude));\n      }\n    }\n    return minValue;\n  }\n\n","sourceOld":"  // TODO: optimize for single-valued case?\n  // TODO: do all kinds of other optimizations!\n  double sortKey(int doc) throws IOException {\n    if (doc > currentDocs.docID()) {\n      currentDocs.advance(doc);\n    }\n    double minValue = Double.POSITIVE_INFINITY;\n    if (doc == currentDocs.docID()) {\n      setValues();\n      int numValues = currentDocs.docValueCount();\n      for (int i = 0; i < numValues; i++) {\n        long encoded = currentValues[i];\n        double docLatitude = decodeLatitude((int)(encoded >> 32));\n        double docLongitude = decodeLongitude((int)(encoded & 0xFFFFFFFF));\n        minValue = Math.min(minValue, SloppyMath.haversinSortKey(latitude, longitude, docLatitude, docLongitude));\n      }\n    }\n    return minValue;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d210c7f333402b4828c1d10dfd5457c9fe312c7d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ec60431d008a694828dacb4bc3cda775b6c44a9f":["98e0f1aa9ab98b9d47cc76e3d38926353c75b571"],"88b0212386fe531136816706dc37dc49b9dbf7dc":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["09f15823cf5eb6e807005579e875e117d8598f95","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["09f15823cf5eb6e807005579e875e117d8598f95"],"ed48f9723ad1b29c351ea43b5a2c8f90c3a45737":["ec60431d008a694828dacb4bc3cda775b6c44a9f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["09f15823cf5eb6e807005579e875e117d8598f95","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["88b0212386fe531136816706dc37dc49b9dbf7dc"],"98e0f1aa9ab98b9d47cc76e3d38926353c75b571":["d210c7f333402b4828c1d10dfd5457c9fe312c7d"],"09f15823cf5eb6e807005579e875e117d8598f95":["ec60431d008a694828dacb4bc3cda775b6c44a9f","ed48f9723ad1b29c351ea43b5a2c8f90c3a45737"]},"commit2Childs":{"d210c7f333402b4828c1d10dfd5457c9fe312c7d":["98e0f1aa9ab98b9d47cc76e3d38926353c75b571"],"ec60431d008a694828dacb4bc3cda775b6c44a9f":["ed48f9723ad1b29c351ea43b5a2c8f90c3a45737","09f15823cf5eb6e807005579e875e117d8598f95"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d210c7f333402b4828c1d10dfd5457c9fe312c7d"],"88b0212386fe531136816706dc37dc49b9dbf7dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["88b0212386fe531136816706dc37dc49b9dbf7dc","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"ed48f9723ad1b29c351ea43b5a2c8f90c3a45737":["09f15823cf5eb6e807005579e875e117d8598f95"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"98e0f1aa9ab98b9d47cc76e3d38926353c75b571":["ec60431d008a694828dacb4bc3cda775b6c44a9f"],"09f15823cf5eb6e807005579e875e117d8598f95":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}