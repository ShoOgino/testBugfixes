{"path":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = newDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field1\", English.intToEnglish(i), TextField.TYPE_STORED));\n      doc.add(newField(\"field2\", English.intToEnglish(i + 1), TextField.TYPE_STORED)); // + word thousand\n      doc.add(newField(\"field3\", \"fvei\" + (i % 2 == 0 ? \" five\" : \"\"), TextField.TYPE_STORED)); // + word thousand\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc.add(newField(\"field1\", \"eight\", TextField.TYPE_STORED)); // \"eight\" in\n                                                                   // the index\n                                                                   // twice\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc\n          .add(newField(\"field1\", \"twenty-one twenty-one\",\n              TextField.TYPE_STORED)); // \"twenty-one\" in the index thrice\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc.add(newField(\"field1\", \"twenty\", TextField.TYPE_STORED)); // \"twenty\"\n                                                                    // in the\n                                                                    // index\n                                                                    // twice\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    searchers = Collections.synchronizedList(new ArrayList<IndexSearcher>());\n    // create the spellChecker\n    spellindex = newDirectory();\n    spellChecker = new SpellCheckerMock(spellindex);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = newDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field1\", English.intToEnglish(i), TextField.TYPE_STORED));\n      doc.add(newField(\"field2\", English.intToEnglish(i + 1), TextField.TYPE_STORED)); // + word thousand\n      doc.add(newField(\"field3\", \"fvei\" + (i % 2 == 0 ? \" five\" : \"\"), TextField.TYPE_STORED)); // + word thousand\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc.add(newField(\"field1\", \"eight\", TextField.TYPE_STORED)); // \"eight\" in\n                                                                   // the index\n                                                                   // twice\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc\n          .add(newField(\"field1\", \"twenty-one twenty-one\",\n              TextField.TYPE_STORED)); // \"twenty-one\" in the index thrice\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc.add(newField(\"field1\", \"twenty\", TextField.TYPE_STORED)); // \"twenty\"\n                                                                    // in the\n                                                                    // index\n                                                                    // twice\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    searchers = Collections.synchronizedList(new ArrayList<IndexSearcher>());\n    // create the spellChecker\n    spellindex = newDirectory();\n    spellChecker = new SpellCheckerMock(spellindex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = newDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newTextField(\"field1\", English.intToEnglish(i), Field.Store.YES));\n      doc.add(newTextField(\"field2\", English.intToEnglish(i + 1), Field.Store.YES)); // + word thousand\n      doc.add(newTextField(\"field3\", \"fvei\" + (i % 2 == 0 ? \" five\" : \"\"), Field.Store.YES)); // + word thousand\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc.add(newTextField(\"field1\", \"eight\", Field.Store.YES)); // \"eight\" in\n                                                                   // the index\n                                                                   // twice\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc\n          .add(newTextField(\"field1\", \"twenty-one twenty-one\", Field.Store.YES)); // \"twenty-one\" in the index thrice\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc.add(newTextField(\"field1\", \"twenty\", Field.Store.YES)); // \"twenty\"\n                                                                    // in the\n                                                                    // index\n                                                                    // twice\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    searchers = Collections.synchronizedList(new ArrayList<IndexSearcher>());\n    // create the spellChecker\n    spellindex = newDirectory();\n    spellChecker = new SpellCheckerMock(spellindex);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = newDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"field1\", English.intToEnglish(i), TextField.TYPE_STORED));\n      doc.add(newField(\"field2\", English.intToEnglish(i + 1), TextField.TYPE_STORED)); // + word thousand\n      doc.add(newField(\"field3\", \"fvei\" + (i % 2 == 0 ? \" five\" : \"\"), TextField.TYPE_STORED)); // + word thousand\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc.add(newField(\"field1\", \"eight\", TextField.TYPE_STORED)); // \"eight\" in\n                                                                   // the index\n                                                                   // twice\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc\n          .add(newField(\"field1\", \"twenty-one twenty-one\",\n              TextField.TYPE_STORED)); // \"twenty-one\" in the index thrice\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc.add(newField(\"field1\", \"twenty\", TextField.TYPE_STORED)); // \"twenty\"\n                                                                    // in the\n                                                                    // index\n                                                                    // twice\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    searchers = Collections.synchronizedList(new ArrayList<IndexSearcher>());\n    // create the spellChecker\n    spellindex = newDirectory();\n    spellChecker = new SpellCheckerMock(spellindex);\n  }\n\n","bugFix":["b0f2476332da483dc2ea1fdd80b5968380653166","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = newDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newTextField(\"field1\", English.intToEnglish(i), Field.Store.YES));\n      doc.add(newTextField(\"field2\", English.intToEnglish(i + 1), Field.Store.YES)); // + word thousand\n      doc.add(newTextField(\"field3\", \"fvei\" + (i % 2 == 0 ? \" five\" : \"\"), Field.Store.YES)); // + word thousand\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc.add(newTextField(\"field1\", \"eight\", Field.Store.YES)); // \"eight\" in\n                                                                   // the index\n                                                                   // twice\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc\n          .add(newTextField(\"field1\", \"twenty-one twenty-one\", Field.Store.YES)); // \"twenty-one\" in the index thrice\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc.add(newTextField(\"field1\", \"twenty\", Field.Store.YES)); // \"twenty\"\n                                                                    // in the\n                                                                    // index\n                                                                    // twice\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    searchers = Collections.synchronizedList(new ArrayList<IndexSearcher>());\n    // create the spellChecker\n    spellindex = newDirectory();\n    spellChecker = new SpellCheckerMock(spellindex);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = newDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newTextField(\"field1\", English.intToEnglish(i), Field.Store.YES));\n      doc.add(newTextField(\"field2\", English.intToEnglish(i + 1), Field.Store.YES)); // + word thousand\n      doc.add(newTextField(\"field3\", \"fvei\" + (i % 2 == 0 ? \" five\" : \"\"), Field.Store.YES)); // + word thousand\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc.add(newTextField(\"field1\", \"eight\", Field.Store.YES)); // \"eight\" in\n                                                                   // the index\n                                                                   // twice\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc\n          .add(newTextField(\"field1\", \"twenty-one twenty-one\", Field.Store.YES)); // \"twenty-one\" in the index thrice\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc.add(newTextField(\"field1\", \"twenty\", Field.Store.YES)); // \"twenty\"\n                                                                    // in the\n                                                                    // index\n                                                                    // twice\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    searchers = Collections.synchronizedList(new ArrayList<IndexSearcher>());\n    // create the spellChecker\n    spellindex = newDirectory();\n    spellChecker = new SpellCheckerMock(spellindex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = newDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newTextField(\"field1\", English.intToEnglish(i), Field.Store.YES));\n      doc.add(newTextField(\"field2\", English.intToEnglish(i + 1), Field.Store.YES)); // + word thousand\n      doc.add(newTextField(\"field3\", \"fvei\" + (i % 2 == 0 ? \" five\" : \"\"), Field.Store.YES)); // + word thousand\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc.add(newTextField(\"field1\", \"eight\", Field.Store.YES)); // \"eight\" in\n                                                                   // the index\n                                                                   // twice\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc\n          .add(newTextField(\"field1\", \"twenty-one twenty-one\", Field.Store.YES)); // \"twenty-one\" in the index thrice\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc.add(newTextField(\"field1\", \"twenty\", Field.Store.YES)); // \"twenty\"\n                                                                    // in the\n                                                                    // index\n                                                                    // twice\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    searchers = Collections.synchronizedList(new ArrayList<IndexSearcher>());\n    // create the spellChecker\n    spellindex = newDirectory();\n    spellChecker = new SpellCheckerMock(spellindex);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = newDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newTextField(\"field1\", English.intToEnglish(i), Field.Store.YES));\n      doc.add(newTextField(\"field2\", English.intToEnglish(i + 1), Field.Store.YES)); // + word thousand\n      doc.add(newTextField(\"field3\", \"fvei\" + (i % 2 == 0 ? \" five\" : \"\"), Field.Store.YES)); // + word thousand\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc.add(newTextField(\"field1\", \"eight\", Field.Store.YES)); // \"eight\" in\n                                                                   // the index\n                                                                   // twice\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc\n          .add(newTextField(\"field1\", \"twenty-one twenty-one\", Field.Store.YES)); // \"twenty-one\" in the index thrice\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc.add(newTextField(\"field1\", \"twenty\", Field.Store.YES)); // \"twenty\"\n                                                                    // in the\n                                                                    // index\n                                                                    // twice\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    searchers = Collections.synchronizedList(new ArrayList<IndexSearcher>());\n    // create the spellChecker\n    spellindex = newDirectory();\n    spellChecker = new SpellCheckerMock(spellindex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = newDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newTextField(\"field1\", English.intToEnglish(i), Field.Store.YES));\n      doc.add(newTextField(\"field2\", English.intToEnglish(i + 1), Field.Store.YES)); // + word thousand\n      doc.add(newTextField(\"field3\", \"fvei\" + (i % 2 == 0 ? \" five\" : \"\"), Field.Store.YES)); // + word thousand\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc.add(newTextField(\"field1\", \"eight\", Field.Store.YES)); // \"eight\" in\n                                                                   // the index\n                                                                   // twice\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc\n          .add(newTextField(\"field1\", \"twenty-one twenty-one\", Field.Store.YES)); // \"twenty-one\" in the index thrice\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc.add(newTextField(\"field1\", \"twenty\", Field.Store.YES)); // \"twenty\"\n                                                                    // in the\n                                                                    // index\n                                                                    // twice\n      writer.addDocument(doc);\n    }\n    \n    writer.shutdown();\n    searchers = Collections.synchronizedList(new ArrayList<IndexSearcher>());\n    // create the spellChecker\n    spellindex = newDirectory();\n    spellChecker = new SpellCheckerMock(spellindex);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = newDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newTextField(\"field1\", English.intToEnglish(i), Field.Store.YES));\n      doc.add(newTextField(\"field2\", English.intToEnglish(i + 1), Field.Store.YES)); // + word thousand\n      doc.add(newTextField(\"field3\", \"fvei\" + (i % 2 == 0 ? \" five\" : \"\"), Field.Store.YES)); // + word thousand\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc.add(newTextField(\"field1\", \"eight\", Field.Store.YES)); // \"eight\" in\n                                                                   // the index\n                                                                   // twice\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc\n          .add(newTextField(\"field1\", \"twenty-one twenty-one\", Field.Store.YES)); // \"twenty-one\" in the index thrice\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc.add(newTextField(\"field1\", \"twenty\", Field.Store.YES)); // \"twenty\"\n                                                                    // in the\n                                                                    // index\n                                                                    // twice\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    searchers = Collections.synchronizedList(new ArrayList<IndexSearcher>());\n    // create the spellChecker\n    spellindex = newDirectory();\n    spellChecker = new SpellCheckerMock(spellindex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = newDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new IndexWriterConfig(new MockAnalyzer(random())));\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newTextField(\"field1\", English.intToEnglish(i), Field.Store.YES));\n      doc.add(newTextField(\"field2\", English.intToEnglish(i + 1), Field.Store.YES)); // + word thousand\n      doc.add(newTextField(\"field3\", \"fvei\" + (i % 2 == 0 ? \" five\" : \"\"), Field.Store.YES)); // + word thousand\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc.add(newTextField(\"field1\", \"eight\", Field.Store.YES)); // \"eight\" in\n                                                                   // the index\n                                                                   // twice\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc\n          .add(newTextField(\"field1\", \"twenty-one twenty-one\", Field.Store.YES)); // \"twenty-one\" in the index thrice\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc.add(newTextField(\"field1\", \"twenty\", Field.Store.YES)); // \"twenty\"\n                                                                    // in the\n                                                                    // index\n                                                                    // twice\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    searchers = Collections.synchronizedList(new ArrayList<IndexSearcher>());\n    // create the spellChecker\n    spellindex = newDirectory();\n    spellChecker = new SpellCheckerMock(spellindex);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = newDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newTextField(\"field1\", English.intToEnglish(i), Field.Store.YES));\n      doc.add(newTextField(\"field2\", English.intToEnglish(i + 1), Field.Store.YES)); // + word thousand\n      doc.add(newTextField(\"field3\", \"fvei\" + (i % 2 == 0 ? \" five\" : \"\"), Field.Store.YES)); // + word thousand\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc.add(newTextField(\"field1\", \"eight\", Field.Store.YES)); // \"eight\" in\n                                                                   // the index\n                                                                   // twice\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc\n          .add(newTextField(\"field1\", \"twenty-one twenty-one\", Field.Store.YES)); // \"twenty-one\" in the index thrice\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc.add(newTextField(\"field1\", \"twenty\", Field.Store.YES)); // \"twenty\"\n                                                                    // in the\n                                                                    // index\n                                                                    // twice\n      writer.addDocument(doc);\n    }\n    \n    writer.shutdown();\n    searchers = Collections.synchronizedList(new ArrayList<IndexSearcher>());\n    // create the spellChecker\n    spellindex = newDirectory();\n    spellChecker = new SpellCheckerMock(spellindex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = newDirectory();\n    analyzer = new MockAnalyzer(random());\n    IndexWriter writer = new IndexWriter(userindex, new IndexWriterConfig(analyzer));\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newTextField(\"field1\", English.intToEnglish(i), Field.Store.YES));\n      doc.add(newTextField(\"field2\", English.intToEnglish(i + 1), Field.Store.YES)); // + word thousand\n      doc.add(newTextField(\"field3\", \"fvei\" + (i % 2 == 0 ? \" five\" : \"\"), Field.Store.YES)); // + word thousand\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc.add(newTextField(\"field1\", \"eight\", Field.Store.YES)); // \"eight\" in\n                                                                   // the index\n                                                                   // twice\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc\n          .add(newTextField(\"field1\", \"twenty-one twenty-one\", Field.Store.YES)); // \"twenty-one\" in the index thrice\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc.add(newTextField(\"field1\", \"twenty\", Field.Store.YES)); // \"twenty\"\n                                                                    // in the\n                                                                    // index\n                                                                    // twice\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    searchers = Collections.synchronizedList(new ArrayList<IndexSearcher>());\n    // create the spellChecker\n    spellindex = newDirectory();\n    spellChecker = new SpellCheckerMock(spellindex);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = newDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new IndexWriterConfig(new MockAnalyzer(random())));\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newTextField(\"field1\", English.intToEnglish(i), Field.Store.YES));\n      doc.add(newTextField(\"field2\", English.intToEnglish(i + 1), Field.Store.YES)); // + word thousand\n      doc.add(newTextField(\"field3\", \"fvei\" + (i % 2 == 0 ? \" five\" : \"\"), Field.Store.YES)); // + word thousand\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc.add(newTextField(\"field1\", \"eight\", Field.Store.YES)); // \"eight\" in\n                                                                   // the index\n                                                                   // twice\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc\n          .add(newTextField(\"field1\", \"twenty-one twenty-one\", Field.Store.YES)); // \"twenty-one\" in the index thrice\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc.add(newTextField(\"field1\", \"twenty\", Field.Store.YES)); // \"twenty\"\n                                                                    // in the\n                                                                    // index\n                                                                    // twice\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    searchers = Collections.synchronizedList(new ArrayList<IndexSearcher>());\n    // create the spellChecker\n    spellindex = newDirectory();\n    spellChecker = new SpellCheckerMock(spellindex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = newDirectory();\n    analyzer = new MockAnalyzer(random());\n    IndexWriter writer = new IndexWriter(userindex, new IndexWriterConfig(analyzer));\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newTextField(\"field1\", English.intToEnglish(i), Field.Store.YES));\n      doc.add(newTextField(\"field2\", English.intToEnglish(i + 1), Field.Store.YES)); // + word thousand\n      doc.add(newTextField(\"field3\", \"fvei\" + (i % 2 == 0 ? \" five\" : \"\"), Field.Store.YES)); // + word thousand\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc.add(newTextField(\"field1\", \"eight\", Field.Store.YES)); // \"eight\" in\n                                                                   // the index\n                                                                   // twice\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc\n          .add(newTextField(\"field1\", \"twenty-one twenty-one\", Field.Store.YES)); // \"twenty-one\" in the index thrice\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc.add(newTextField(\"field1\", \"twenty\", Field.Store.YES)); // \"twenty\"\n                                                                    // in the\n                                                                    // index\n                                                                    // twice\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    searchers = Collections.synchronizedList(new ArrayList<IndexSearcher>());\n    // create the spellChecker\n    spellindex = newDirectory();\n    spellChecker = new SpellCheckerMock(spellindex);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    //create a user index\n    userindex = newDirectory();\n    IndexWriter writer = new IndexWriter(userindex, new IndexWriterConfig(new MockAnalyzer(random())));\n\n    for (int i = 0; i < 1000; i++) {\n      Document doc = new Document();\n      doc.add(newTextField(\"field1\", English.intToEnglish(i), Field.Store.YES));\n      doc.add(newTextField(\"field2\", English.intToEnglish(i + 1), Field.Store.YES)); // + word thousand\n      doc.add(newTextField(\"field3\", \"fvei\" + (i % 2 == 0 ? \" five\" : \"\"), Field.Store.YES)); // + word thousand\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc.add(newTextField(\"field1\", \"eight\", Field.Store.YES)); // \"eight\" in\n                                                                   // the index\n                                                                   // twice\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc\n          .add(newTextField(\"field1\", \"twenty-one twenty-one\", Field.Store.YES)); // \"twenty-one\" in the index thrice\n      writer.addDocument(doc);\n    }\n    {\n      Document doc = new Document();\n      doc.add(newTextField(\"field1\", \"twenty\", Field.Store.YES)); // \"twenty\"\n                                                                    // in the\n                                                                    // index\n                                                                    // twice\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    searchers = Collections.synchronizedList(new ArrayList<IndexSearcher>());\n    // create the spellChecker\n    spellindex = newDirectory();\n    spellChecker = new SpellCheckerMock(spellindex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["d0ef034a4f10871667ae75181537775ddcf8ade4","a56958d7f71a28824f20031ffbb2e13502a0274e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56958d7f71a28824f20031ffbb2e13502a0274e"]},"commit2Childs":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}