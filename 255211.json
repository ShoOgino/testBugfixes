{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownTest#testDefaultField().mjava","commits":[{"id":"6c2cd18c7da6f499a33f06fc89c07a463ec074c0","date":1358329431,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownTest#testDefaultField().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownTest#testTermDefault().mjava","sourceNew":"  @Test\n  public void testDefaultField() {\n    String defaultField = CategoryListParams.DEFAULT_FIELD;\n    \n    Term termA = DrillDown.term(defaultParams, new CategoryPath(\"a\"));\n    assertEquals(new Term(defaultField, \"a\"), termA);\n    \n    Term termB = DrillDown.term(defaultParams, new CategoryPath(\"b\"));\n    assertEquals(new Term(defaultField, \"b\"), termB);\n  }\n\n","sourceOld":"  @Test\n  public void testTermDefault() {\n    String defaultField = CategoryListParams.DEFAULT_TERM.field();\n    \n    Term termA = DrillDown.term(defaultParams, new CategoryPath(\"a\"));\n    assertEquals(new Term(defaultField, \"a\"), termA);\n    \n    Term termB = DrillDown.term(defaultParams, new CategoryPath(\"b\"));\n    assertEquals(new Term(defaultField, \"b\"), termB);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownTest#testDefaultField().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownTest#testTermDefault().mjava","sourceNew":"  @Test\n  public void testDefaultField() {\n    String defaultField = CategoryListParams.DEFAULT_FIELD;\n    \n    Term termA = DrillDown.term(defaultParams, new CategoryPath(\"a\"));\n    assertEquals(new Term(defaultField, \"a\"), termA);\n    \n    Term termB = DrillDown.term(defaultParams, new CategoryPath(\"b\"));\n    assertEquals(new Term(defaultField, \"b\"), termB);\n  }\n\n","sourceOld":"  @Test\n  public void testTermDefault() {\n    String defaultField = CategoryListParams.DEFAULT_TERM.field();\n    \n    Term termA = DrillDown.term(defaultParams, new CategoryPath(\"a\"));\n    assertEquals(new Term(defaultField, \"a\"), termA);\n    \n    Term termB = DrillDown.term(defaultParams, new CategoryPath(\"b\"));\n    assertEquals(new Term(defaultField, \"b\"), termB);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f793470bad5ce8422502e33eaae65fc6a3271bd2","date":1360479442,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownQueryTest#testDefaultField().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownTest#testDefaultField().mjava","sourceNew":"  @Test\n  public void testDefaultField() {\n    String defaultField = CategoryListParams.DEFAULT_FIELD;\n    \n    Term termA = DrillDownQuery.term(defaultParams, new CategoryPath(\"a\"));\n    assertEquals(new Term(defaultField, \"a\"), termA);\n    \n    Term termB = DrillDownQuery.term(defaultParams, new CategoryPath(\"b\"));\n    assertEquals(new Term(defaultField, \"b\"), termB);\n  }\n\n","sourceOld":"  @Test\n  public void testDefaultField() {\n    String defaultField = CategoryListParams.DEFAULT_FIELD;\n    \n    Term termA = DrillDown.term(defaultParams, new CategoryPath(\"a\"));\n    assertEquals(new Term(defaultField, \"a\"), termA);\n    \n    Term termB = DrillDown.term(defaultParams, new CategoryPath(\"b\"));\n    assertEquals(new Term(defaultField, \"b\"), termB);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c4015cd39dff8d4dec562d909f9766debac53aa6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f793470bad5ce8422502e33eaae65fc6a3271bd2":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f793470bad5ce8422502e33eaae65fc6a3271bd2"]},"commit2Childs":{"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c4015cd39dff8d4dec562d909f9766debac53aa6","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["c4015cd39dff8d4dec562d909f9766debac53aa6","f793470bad5ce8422502e33eaae65fc6a3271bd2"],"f793470bad5ce8422502e33eaae65fc6a3271bd2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}