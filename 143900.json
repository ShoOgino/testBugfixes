{"path":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#createConjunctionTermScorer(AtomicReaderContext,Bits).mjava","commits":[{"id":"3fc1f3f78b299e125f7e60f43b5d457392bea23f","date":1317431015,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#createConjunctionTermScorer(AtomicReaderContext,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#createConjunctionTermScorer(AtomicReaderContext).mjava","sourceNew":"    private Scorer createConjunctionTermScorer(AtomicReaderContext context, Bits acceptDocs)\n        throws IOException {\n      final DocsAndFreqs[] docsAndFreqs = new DocsAndFreqs[weights.size()];\n      for (int i = 0; i < docsAndFreqs.length; i++) {\n        final TermWeight weight = (TermWeight) weights.get(i);\n        final TermsEnum termsEnum = weight.getTermsEnum(context);\n        if (termsEnum == null) {\n          return null;\n        }\n        final ExactDocScorer docScorer = weight.createDocScorer(context);\n        docsAndFreqs[i] = new DocsAndFreqs(termsEnum.docs(\n            acceptDocs, null), termsEnum.docFreq(), docScorer);\n      }\n      return new ConjunctionTermScorer(this, disableCoord ? 1.0f : coord(\n          docsAndFreqs.length, docsAndFreqs.length), docsAndFreqs);\n    }\n\n","sourceOld":"    private Scorer createConjunctionTermScorer(AtomicReaderContext context)\n        throws IOException {\n      final DocsAndFreqs[] docsAndFreqs = new DocsAndFreqs[weights.size()];\n      for (int i = 0; i < docsAndFreqs.length; i++) {\n        final TermWeight weight = (TermWeight) weights.get(i);\n        final TermsEnum termsEnum = weight.getTermsEnum(context);\n        if (termsEnum == null) {\n          return null;\n        }\n        final ExactDocScorer docScorer = weight.createDocScorer(context);\n        docsAndFreqs[i] = new DocsAndFreqs(termsEnum.docs(\n            context.reader.getLiveDocs(), null), termsEnum.docFreq(), docScorer);\n      }\n      return new ConjunctionTermScorer(this, disableCoord ? 1.0f : coord(\n          docsAndFreqs.length, docsAndFreqs.length), docsAndFreqs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"872cff1d3a554e0cd64014cd97f88d3002b0f491","date":1323024658,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#createConjunctionTermScorer(AtomicReaderContext,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#createConjunctionTermScorer(AtomicReaderContext,Bits).mjava","sourceNew":"    private Scorer createConjunctionTermScorer(AtomicReaderContext context, Bits acceptDocs)\n        throws IOException {\n\n      // TODO: fix scorer API to specify \"needsScores\" up\n      // front, so we can do match-only if caller doesn't\n      // needs scores\n\n      final DocsAndFreqs[] docsAndFreqs = new DocsAndFreqs[weights.size()];\n      for (int i = 0; i < docsAndFreqs.length; i++) {\n        final TermWeight weight = (TermWeight) weights.get(i);\n        final TermsEnum termsEnum = weight.getTermsEnum(context);\n        if (termsEnum == null) {\n          return null;\n        }\n        final ExactDocScorer docScorer = weight.createDocScorer(context);\n        final DocsEnum docsAndFreqsEnum = termsEnum.docs(acceptDocs, null, true);\n        if (docsAndFreqsEnum == null) {\n          // TODO: we could carry over TermState from the\n          // terms we already seek'd to, to save re-seeking\n          // to make the match-only scorer, but it's likely\n          // rare that BQ mixes terms from omitTf and\n          // non-omitTF fields:\n\n          // At least one sub cannot provide freqs; abort\n          // and fallback to full match-only scorer:\n          return createMatchOnlyConjunctionTermScorer(context, acceptDocs);\n        }\n\n        docsAndFreqs[i] = new DocsAndFreqs(docsAndFreqsEnum,\n                                           docsAndFreqsEnum,\n                                           termsEnum.docFreq(), docScorer);\n      }\n      return new ConjunctionTermScorer(this, disableCoord ? 1.0f : coord(\n          docsAndFreqs.length, docsAndFreqs.length), docsAndFreqs);\n    }\n\n","sourceOld":"    private Scorer createConjunctionTermScorer(AtomicReaderContext context, Bits acceptDocs)\n        throws IOException {\n      final DocsAndFreqs[] docsAndFreqs = new DocsAndFreqs[weights.size()];\n      for (int i = 0; i < docsAndFreqs.length; i++) {\n        final TermWeight weight = (TermWeight) weights.get(i);\n        final TermsEnum termsEnum = weight.getTermsEnum(context);\n        if (termsEnum == null) {\n          return null;\n        }\n        final ExactDocScorer docScorer = weight.createDocScorer(context);\n        docsAndFreqs[i] = new DocsAndFreqs(termsEnum.docs(\n            acceptDocs, null), termsEnum.docFreq(), docScorer);\n      }\n      return new ConjunctionTermScorer(this, disableCoord ? 1.0f : coord(\n          docsAndFreqs.length, docsAndFreqs.length), docsAndFreqs);\n    }\n\n","bugFix":null,"bugIntro":["ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b65b350ca9588f9fc76ce7d6804160d06c45ff42","date":1323026297,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#createConjunctionTermScorer(AtomicReaderContext,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#createConjunctionTermScorer(AtomicReaderContext,Bits).mjava","sourceNew":"    private Scorer createConjunctionTermScorer(AtomicReaderContext context, Bits acceptDocs)\n        throws IOException {\n\n      // TODO: fix scorer API to specify \"needsScores\" up\n      // front, so we can do match-only if caller doesn't\n      // needs scores\n\n      final DocsAndFreqs[] docsAndFreqs = new DocsAndFreqs[weights.size()];\n      for (int i = 0; i < docsAndFreqs.length; i++) {\n        final TermWeight weight = (TermWeight) weights.get(i);\n        final TermsEnum termsEnum = weight.getTermsEnum(context);\n        if (termsEnum == null) {\n          return null;\n        }\n        final ExactDocScorer docScorer = weight.createDocScorer(context);\n        final DocsEnum docsAndFreqsEnum = termsEnum.docs(acceptDocs, null, true);\n        if (docsAndFreqsEnum == null) {\n          // TODO: we could carry over TermState from the\n          // terms we already seek'd to, to save re-seeking\n          // to make the match-only scorer, but it's likely\n          // rare that BQ mixes terms from omitTf and\n          // non-omitTF fields:\n\n          // At least one sub cannot provide freqs; abort\n          // and fallback to full match-only scorer:\n          return createMatchOnlyConjunctionTermScorer(context, acceptDocs);\n        }\n\n        docsAndFreqs[i] = new DocsAndFreqs(docsAndFreqsEnum,\n                                           docsAndFreqsEnum,\n                                           termsEnum.docFreq(), docScorer);\n      }\n      return new ConjunctionTermScorer(this, disableCoord ? 1.0f : coord(\n          docsAndFreqs.length, docsAndFreqs.length), docsAndFreqs);\n    }\n\n","sourceOld":"    private Scorer createConjunctionTermScorer(AtomicReaderContext context, Bits acceptDocs)\n        throws IOException {\n      final DocsAndFreqs[] docsAndFreqs = new DocsAndFreqs[weights.size()];\n      for (int i = 0; i < docsAndFreqs.length; i++) {\n        final TermWeight weight = (TermWeight) weights.get(i);\n        final TermsEnum termsEnum = weight.getTermsEnum(context);\n        if (termsEnum == null) {\n          return null;\n        }\n        final ExactDocScorer docScorer = weight.createDocScorer(context);\n        docsAndFreqs[i] = new DocsAndFreqs(termsEnum.docs(\n            acceptDocs, null), termsEnum.docFreq(), docScorer);\n      }\n      return new ConjunctionTermScorer(this, disableCoord ? 1.0f : coord(\n          docsAndFreqs.length, docsAndFreqs.length), docsAndFreqs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"660345363f16c7d4c38aa11a35bf59aa99466cf1","date":1328227279,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#createConjunctionTermScorer(AtomicReaderContext,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#createConjunctionTermScorer(AtomicReaderContext,Bits).mjava","sourceNew":"    private Scorer createConjunctionTermScorer(AtomicReaderContext context, Bits acceptDocs)\n        throws IOException {\n\n      // TODO: fix scorer API to specify \"needsScores\" up\n      // front, so we can do match-only if caller doesn't\n      // needs scores\n\n      final DocsAndFreqs[] docsAndFreqs = new DocsAndFreqs[weights.size()];\n      for (int i = 0; i < docsAndFreqs.length; i++) {\n        final TermWeight weight = (TermWeight) weights.get(i);\n        final TermsEnum termsEnum = weight.getTermsEnum(context);\n        if (termsEnum == null) {\n          return null;\n        }\n        final ExactSimScorer docScorer = weight.createDocScorer(context);\n        final DocsEnum docsAndFreqsEnum = termsEnum.docs(acceptDocs, null, true);\n        if (docsAndFreqsEnum == null) {\n          // TODO: we could carry over TermState from the\n          // terms we already seek'd to, to save re-seeking\n          // to make the match-only scorer, but it's likely\n          // rare that BQ mixes terms from omitTf and\n          // non-omitTF fields:\n\n          // At least one sub cannot provide freqs; abort\n          // and fallback to full match-only scorer:\n          return createMatchOnlyConjunctionTermScorer(context, acceptDocs);\n        }\n\n        docsAndFreqs[i] = new DocsAndFreqs(docsAndFreqsEnum,\n                                           docsAndFreqsEnum,\n                                           termsEnum.docFreq(), docScorer);\n      }\n      return new ConjunctionTermScorer(this, disableCoord ? 1.0f : coord(\n          docsAndFreqs.length, docsAndFreqs.length), docsAndFreqs);\n    }\n\n","sourceOld":"    private Scorer createConjunctionTermScorer(AtomicReaderContext context, Bits acceptDocs)\n        throws IOException {\n\n      // TODO: fix scorer API to specify \"needsScores\" up\n      // front, so we can do match-only if caller doesn't\n      // needs scores\n\n      final DocsAndFreqs[] docsAndFreqs = new DocsAndFreqs[weights.size()];\n      for (int i = 0; i < docsAndFreqs.length; i++) {\n        final TermWeight weight = (TermWeight) weights.get(i);\n        final TermsEnum termsEnum = weight.getTermsEnum(context);\n        if (termsEnum == null) {\n          return null;\n        }\n        final ExactDocScorer docScorer = weight.createDocScorer(context);\n        final DocsEnum docsAndFreqsEnum = termsEnum.docs(acceptDocs, null, true);\n        if (docsAndFreqsEnum == null) {\n          // TODO: we could carry over TermState from the\n          // terms we already seek'd to, to save re-seeking\n          // to make the match-only scorer, but it's likely\n          // rare that BQ mixes terms from omitTf and\n          // non-omitTF fields:\n\n          // At least one sub cannot provide freqs; abort\n          // and fallback to full match-only scorer:\n          return createMatchOnlyConjunctionTermScorer(context, acceptDocs);\n        }\n\n        docsAndFreqs[i] = new DocsAndFreqs(docsAndFreqsEnum,\n                                           docsAndFreqsEnum,\n                                           termsEnum.docFreq(), docScorer);\n      }\n      return new ConjunctionTermScorer(this, disableCoord ? 1.0f : coord(\n          docsAndFreqs.length, docsAndFreqs.length), docsAndFreqs);\n    }\n\n","bugFix":null,"bugIntro":["ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#createConjunctionTermScorer(AtomicReaderContext,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#createConjunctionTermScorer(AtomicReaderContext,Bits).mjava","sourceNew":"    private Scorer createConjunctionTermScorer(AtomicReaderContext context, Bits acceptDocs)\n        throws IOException {\n\n      // TODO: fix scorer API to specify \"needsScores\" up\n      // front, so we can do match-only if caller doesn't\n      // needs scores\n\n      final DocsAndFreqs[] docsAndFreqs = new DocsAndFreqs[weights.size()];\n      for (int i = 0; i < docsAndFreqs.length; i++) {\n        final TermWeight weight = (TermWeight) weights.get(i);\n        final TermsEnum termsEnum = weight.getTermsEnum(context);\n        if (termsEnum == null) {\n          return null;\n        }\n        final ExactSimScorer docScorer = weight.createDocScorer(context);\n        final DocsEnum docsAndFreqsEnum = termsEnum.docs(acceptDocs, null, true);\n        if (docsAndFreqsEnum == null) {\n          // TODO: we could carry over TermState from the\n          // terms we already seek'd to, to save re-seeking\n          // to make the match-only scorer, but it's likely\n          // rare that BQ mixes terms from omitTf and\n          // non-omitTF fields:\n\n          // At least one sub cannot provide freqs; abort\n          // and fallback to full match-only scorer:\n          return createMatchOnlyConjunctionTermScorer(context, acceptDocs);\n        }\n\n        docsAndFreqs[i] = new DocsAndFreqs(docsAndFreqsEnum,\n                                           docsAndFreqsEnum,\n                                           termsEnum.docFreq(), docScorer);\n      }\n      return new ConjunctionTermScorer(this, disableCoord ? 1.0f : coord(\n          docsAndFreqs.length, docsAndFreqs.length), docsAndFreqs);\n    }\n\n","sourceOld":"    private Scorer createConjunctionTermScorer(AtomicReaderContext context, Bits acceptDocs)\n        throws IOException {\n\n      // TODO: fix scorer API to specify \"needsScores\" up\n      // front, so we can do match-only if caller doesn't\n      // needs scores\n\n      final DocsAndFreqs[] docsAndFreqs = new DocsAndFreqs[weights.size()];\n      for (int i = 0; i < docsAndFreqs.length; i++) {\n        final TermWeight weight = (TermWeight) weights.get(i);\n        final TermsEnum termsEnum = weight.getTermsEnum(context);\n        if (termsEnum == null) {\n          return null;\n        }\n        final ExactSimScorer docScorer = weight.createDocScorer(context);\n        final DocsEnum docsAndFreqsEnum = termsEnum.docs(acceptDocs, null, true);\n        if (docsAndFreqsEnum == null) {\n          // TODO: we could carry over TermState from the\n          // terms we already seek'd to, to save re-seeking\n          // to make the match-only scorer, but it's likely\n          // rare that BQ mixes terms from omitTf and\n          // non-omitTF fields:\n\n          // At least one sub cannot provide freqs; abort\n          // and fallback to full match-only scorer:\n          return createMatchOnlyConjunctionTermScorer(context, acceptDocs);\n        }\n\n        docsAndFreqs[i] = new DocsAndFreqs(docsAndFreqsEnum,\n                                           docsAndFreqsEnum,\n                                           termsEnum.docFreq(), docScorer);\n      }\n      return new ConjunctionTermScorer(this, disableCoord ? 1.0f : coord(\n          docsAndFreqs.length, docsAndFreqs.length), docsAndFreqs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"660345363f16c7d4c38aa11a35bf59aa99466cf1":["872cff1d3a554e0cd64014cd97f88d3002b0f491"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["3fc1f3f78b299e125f7e60f43b5d457392bea23f","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["660345363f16c7d4c38aa11a35bf59aa99466cf1"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"660345363f16c7d4c38aa11a35bf59aa99466cf1":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":[],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["660345363f16c7d4c38aa11a35bf59aa99466cf1","b65b350ca9588f9fc76ce7d6804160d06c45ff42"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}