{"path":"src/java/org/apache/lucene/search/spans/NearSpans#skipTo(int).mjava","commits":[{"id":"0bcbf4ed0baed877c8b36d024e17a99bedfdd904","date":1075500600,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/NearSpans#skipTo(int).mjava","pathOld":"/dev/null","sourceNew":"  public boolean skipTo(int target) throws IOException {\n    if (firstTime) {\n      initList(false);\n      firstTime = false;\n    }\n\n    for (SpansCell cell = first; more && cell!=null; cell=cell.next) {\n      more = cell.skipTo(target);\n    }\n\n    if (more) {\n      listToQueue();\n      listStale = true;\n\n      if (min().doc() == max.doc()) {             // at a match?\n        int matchLength = max.end() - min().start();\n        if ((matchLength - totalLength) <= slop) {\n          return true;\n        }\n      }\n      return next();                              // no, scan\n    }\n    \n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af54d2e9e95d08aae526fa69cdd34b66a49b763","date":1075728472,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/NearSpans#skipTo(int).mjava","pathOld":"src/java/org/apache/lucene/search/spans/NearSpans#skipTo(int).mjava","sourceNew":"  public boolean skipTo(int target) throws IOException {\n    if (firstTime) {\n      initList(false);\n      firstTime = false;\n    }\n\n    for (SpansCell cell = first; more && cell!=null; cell=cell.next) {\n      more = cell.skipTo(target);\n    }\n\n    if (more) {\n      listToQueue();\n      listStale = true;\n\n      if (min().doc() == max.doc()) {             // at a match?\n        int matchLength = max.end() - min().start();\n        if ((matchLength - totalLength) <= slop) {\n          return true;\n        }\n      }\n      return next();                              // no, scan\n    }\n\n    return false;\n  }\n\n","sourceOld":"  public boolean skipTo(int target) throws IOException {\n    if (firstTime) {\n      initList(false);\n      firstTime = false;\n    }\n\n    for (SpansCell cell = first; more && cell!=null; cell=cell.next) {\n      more = cell.skipTo(target);\n    }\n\n    if (more) {\n      listToQueue();\n      listStale = true;\n\n      if (min().doc() == max.doc()) {             // at a match?\n        int matchLength = max.end() - min().start();\n        if ((matchLength - totalLength) <= slop) {\n          return true;\n        }\n      }\n      return next();                              // no, scan\n    }\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"442d84b5daa55f6e5e0ae5bc96d5fb9a1d3718c5","date":1076364222,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/NearSpans#skipTo(int).mjava","pathOld":"src/java/org/apache/lucene/search/spans/NearSpans#skipTo(int).mjava","sourceNew":"  public boolean skipTo(int target) throws IOException {\n    if (firstTime) {\n      initList(false);\n      firstTime = false;\n    }\n\n    for (SpansCell cell = first; more && cell!=null; cell=cell.next) {\n      more = cell.skipTo(target);\n    }\n\n    if (more) {\n      listToQueue();\n\n      if (min().doc() == max.doc()) {             // at a match?\n        int matchLength = max.end() - min().start();\n        if ((matchLength - totalLength) <= slop) {\n          return true;\n        }\n      }\n\n      return next();                              // no, scan\n    }\n\n    return false;\n  }\n\n","sourceOld":"  public boolean skipTo(int target) throws IOException {\n    if (firstTime) {\n      initList(false);\n      firstTime = false;\n    }\n\n    for (SpansCell cell = first; more && cell!=null; cell=cell.next) {\n      more = cell.skipTo(target);\n    }\n\n    if (more) {\n      listToQueue();\n      listStale = true;\n\n      if (min().doc() == max.doc()) {             // at a match?\n        int matchLength = max.end() - min().start();\n        if ((matchLength - totalLength) <= slop) {\n          return true;\n        }\n      }\n      return next();                              // no, scan\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e3f7c6f227c99761a334d89dab830930117876b","date":1076365551,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/NearSpans#skipTo(int).mjava","pathOld":"src/java/org/apache/lucene/search/spans/NearSpans#skipTo(int).mjava","sourceNew":"  public boolean skipTo(int target) throws IOException {\n    if (firstTime) {                              // initialize\n      initList(false);\n      for (SpansCell cell = first; more && cell!=null; cell=cell.next) {\n        more = cell.skipTo(target);               // skip all\n      }\n      if (more) {\n        listToQueue();\n      }\n      firstTime = false;\n    } else {                                      // normal case\n      while (more && min().doc() < target) {      // skip as needed\n        more = min().skipTo(target);\n        if (more)\n          queue.adjustTop();\n      }\n    }\n    if (more) {\n\n      if (atMatch())                              // at a match?\n        return true;\n\n      return next();                              // no, scan\n    }\n\n    return false;\n  }\n\n","sourceOld":"  public boolean skipTo(int target) throws IOException {\n    if (firstTime) {\n      initList(false);\n      firstTime = false;\n    }\n\n    for (SpansCell cell = first; more && cell!=null; cell=cell.next) {\n      more = cell.skipTo(target);\n    }\n\n    if (more) {\n      listToQueue();\n\n      if (min().doc() == max.doc()) {             // at a match?\n        int matchLength = max.end() - min().start();\n        if ((matchLength - totalLength) <= slop) {\n          return true;\n        }\n      }\n\n      return next();                              // no, scan\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98bc22650ab0fe51f9c00513397bfa42a64fc663","date":1161986633,"type":5,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/NearSpansUnordered#skipTo(int).mjava","pathOld":"src/java/org/apache/lucene/search/spans/NearSpans#skipTo(int).mjava","sourceNew":"  public boolean skipTo(int target) throws IOException {\n    if (firstTime) {                              // initialize\n      initList(false);\n      for (SpansCell cell = first; more && cell!=null; cell=cell.next) {\n        more = cell.skipTo(target);               // skip all\n      }\n      if (more) {\n        listToQueue();\n      }\n      firstTime = false;\n    } else {                                      // normal case\n      while (more && min().doc() < target) {      // skip as needed\n        if (min().skipTo(target)) {\n          queue.adjustTop();\n        } else {\n          more = false;\n        }\n      }\n    }\n    return more && (atMatch() ||  next());\n  }\n\n","sourceOld":"  public boolean skipTo(int target) throws IOException {\n    if (firstTime) {                              // initialize\n      initList(false);\n      for (SpansCell cell = first; more && cell!=null; cell=cell.next) {\n        more = cell.skipTo(target);               // skip all\n      }\n      if (more) {\n        listToQueue();\n      }\n      firstTime = false;\n    } else {                                      // normal case\n      while (more && min().doc() < target) {      // skip as needed\n        more = min().skipTo(target);\n        if (more)\n          queue.adjustTop();\n      }\n    }\n    if (more) {\n\n      if (atMatch())                              // at a match?\n        return true;\n\n      return next();                              // no, scan\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"98bc22650ab0fe51f9c00513397bfa42a64fc663":["0e3f7c6f227c99761a334d89dab830930117876b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0bcbf4ed0baed877c8b36d024e17a99bedfdd904":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["98bc22650ab0fe51f9c00513397bfa42a64fc663"],"0e3f7c6f227c99761a334d89dab830930117876b":["442d84b5daa55f6e5e0ae5bc96d5fb9a1d3718c5"],"442d84b5daa55f6e5e0ae5bc96d5fb9a1d3718c5":["5af54d2e9e95d08aae526fa69cdd34b66a49b763"],"5af54d2e9e95d08aae526fa69cdd34b66a49b763":["0bcbf4ed0baed877c8b36d024e17a99bedfdd904"]},"commit2Childs":{"98bc22650ab0fe51f9c00513397bfa42a64fc663":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0bcbf4ed0baed877c8b36d024e17a99bedfdd904"],"0bcbf4ed0baed877c8b36d024e17a99bedfdd904":["5af54d2e9e95d08aae526fa69cdd34b66a49b763"],"0e3f7c6f227c99761a334d89dab830930117876b":["98bc22650ab0fe51f9c00513397bfa42a64fc663"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"442d84b5daa55f6e5e0ae5bc96d5fb9a1d3718c5":["0e3f7c6f227c99761a334d89dab830930117876b"],"5af54d2e9e95d08aae526fa69cdd34b66a49b763":["442d84b5daa55f6e5e0ae5bc96d5fb9a1d3718c5"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}