{"path":"lucene/sandbox/src/java/org/apache/lucene/geo/Rectangle2D#edgeIntersectsBox(int,int,int,int,int,int,int,int).mjava","commits":[{"id":"9feee35369998c08f5168e0808e67e09857d5bac","date":1544618795,"type":1,"author":"iverase","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Rectangle2D#edgeIntersectsBox(int,int,int,int,int,int,int,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#edgeIntersectsBox(int,int,int,int,int,int,int,int).mjava","sourceNew":"  /** returns true if the edge (defined by (ax, ay) (bx, by)) intersects the query */\n  private static boolean edgeIntersectsBox(int ax, int ay, int bx, int by,\n                                           int minX, int maxX, int minY, int maxY) {\n    // shortcut: if edge is a point (occurs w/ Line shapes); simply check bbox w/ point\n    if (ax == bx && ay == by) {\n      return Rectangle.containsPoint(ay, ax, minY, maxY, minX, maxX);\n    }\n\n    // shortcut: check if either of the end points fall inside the box\n    if (bboxContainsPoint(ax, ay, minX, maxX, minY, maxY)\n        || bboxContainsPoint(bx, by, minX, maxX, minY, maxY)) {\n      return true;\n    }\n\n    // shortcut: check bboxes of edges are disjoint\n    if (boxesAreDisjoint(Math.min(ax, bx), Math.max(ax, bx), Math.min(ay, by), Math.max(ay, by),\n        minX, maxX, minY, maxY)) {\n      return false;\n    }\n\n    // shortcut: edge is a point\n    if (ax == bx && ay == by) {\n      return false;\n    }\n\n    // top\n    if (orient(ax, ay, bx, by, minX, maxY) * orient(ax, ay, bx, by, maxX, maxY) <= 0 &&\n        orient(minX, maxY, maxX, maxY, ax, ay) * orient(minX, maxY, maxX, maxY, bx, by) <= 0) {\n      return true;\n    }\n\n    // right\n    if (orient(ax, ay, bx, by, maxX, maxY) * orient(ax, ay, bx, by, maxX, minY) <= 0 &&\n        orient(maxX, maxY, maxX, minY, ax, ay) * orient(maxX, maxY, maxX, minY, bx, by) <= 0) {\n      return true;\n    }\n\n    // bottom\n    if (orient(ax, ay, bx, by, maxX, minY) * orient(ax, ay, bx, by, minX, minY) <= 0 &&\n        orient(maxX, minY, minX, minY, ax, ay) * orient(maxX, minY, minX, minY, bx, by) <= 0) {\n      return true;\n    }\n\n    // left\n    if (orient(ax, ay, bx, by, minX, minY) * orient(ax, ay, bx, by, minX, maxY) <= 0 &&\n        orient(minX, minY, minX, maxY, ax, ay) * orient(minX, minY, minX, maxY, bx, by) <= 0) {\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /** returns true if the edge (defined by (ax, ay) (bx, by)) intersects the query */\n  private static boolean edgeIntersectsBox(int ax, int ay, int bx, int by,\n                                           int minX, int maxX, int minY, int maxY) {\n    // shortcut: if edge is a point (occurs w/ Line shapes); simply check bbox w/ point\n    if (ax == bx && ay == by) {\n      return Rectangle.containsPoint(ay, ax, minY, maxY, minX, maxX);\n    }\n\n    // shortcut: check if either of the end points fall inside the box\n    if (bboxContainsPoint(ax, ay, minX, maxX, minY, maxY)\n        || bboxContainsPoint(bx, by, minX, maxX, minY, maxY)) {\n      return true;\n    }\n\n    // shortcut: check bboxes of edges are disjoint\n    if (boxesAreDisjoint(Math.min(ax, bx), Math.max(ax, bx), Math.min(ay, by), Math.max(ay, by),\n        minX, maxX, minY, maxY)) {\n      return false;\n    }\n\n    // shortcut: edge is a point\n    if (ax == bx && ay == by) {\n      return false;\n    }\n\n    // top\n    if (orient(ax, ay, bx, by, minX, maxY) * orient(ax, ay, bx, by, maxX, maxY) <= 0 &&\n        orient(minX, maxY, maxX, maxY, ax, ay) * orient(minX, maxY, maxX, maxY, bx, by) <= 0) {\n      return true;\n    }\n\n    // right\n    if (orient(ax, ay, bx, by, maxX, maxY) * orient(ax, ay, bx, by, maxX, minY) <= 0 &&\n        orient(maxX, maxY, maxX, minY, ax, ay) * orient(maxX, maxY, maxX, minY, bx, by) <= 0) {\n      return true;\n    }\n\n    // bottom\n    if (orient(ax, ay, bx, by, maxX, minY) * orient(ax, ay, bx, by, minX, minY) <= 0 &&\n        orient(maxX, minY, minX, minY, ax, ay) * orient(maxX, minY, minX, minY, bx, by) <= 0) {\n      return true;\n    }\n\n    // left\n    if (orient(ax, ay, bx, by, minX, minY) * orient(ax, ay, bx, by, minX, maxY) <= 0 &&\n        orient(minX, minY, minX, maxY, ax, ay) * orient(minX, minY, minX, maxY, bx, by) <= 0) {\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc005279ab64cbf458ccef2ada610bc1a04b6139","date":1554992856,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Rectangle2D#edgeIntersectsBox(int,int,int,int,int,int,int,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Rectangle2D#edgeIntersectsBox(int,int,int,int,int,int,int,int).mjava","sourceNew":"  /** returns true if the edge (defined by (ax, ay) (bx, by)) intersects the query */\n  private static boolean edgeIntersectsBox(int ax, int ay, int bx, int by,\n                                           int minX, int maxX, int minY, int maxY) {\n    // shortcut: if edge is a point (occurs w/ Line shapes); simply check bbox w/ point\n    if (ax == bx && ay == by) {\n      return Rectangle.containsPoint(ay, ax, minY, maxY, minX, maxX);\n    }\n\n    // shortcut: check if either of the end points fall inside the box\n    if (bboxContainsPoint(ax, ay, minX, maxX, minY, maxY) ||\n        bboxContainsPoint(bx, by, minX, maxX, minY, maxY)) {\n      return true;\n    }\n\n    // shortcut: check bboxes of edges are disjoint\n    if (boxesAreDisjoint(Math.min(ax, bx), Math.max(ax, bx), Math.min(ay, by), Math.max(ay, by),\n        minX, maxX, minY, maxY)) {\n      return false;\n    }\n\n    // top\n    if (orient(ax, ay, bx, by, minX, maxY) * orient(ax, ay, bx, by, maxX, maxY) <= 0 &&\n        orient(minX, maxY, maxX, maxY, ax, ay) * orient(minX, maxY, maxX, maxY, bx, by) <= 0) {\n      return true;\n    }\n\n    // right\n    if (orient(ax, ay, bx, by, maxX, maxY) * orient(ax, ay, bx, by, maxX, minY) <= 0 &&\n        orient(maxX, maxY, maxX, minY, ax, ay) * orient(maxX, maxY, maxX, minY, bx, by) <= 0) {\n      return true;\n    }\n\n    // bottom\n    if (orient(ax, ay, bx, by, maxX, minY) * orient(ax, ay, bx, by, minX, minY) <= 0 &&\n        orient(maxX, minY, minX, minY, ax, ay) * orient(maxX, minY, minX, minY, bx, by) <= 0) {\n      return true;\n    }\n\n    // left\n    if (orient(ax, ay, bx, by, minX, minY) * orient(ax, ay, bx, by, minX, maxY) <= 0 &&\n        orient(minX, minY, minX, maxY, ax, ay) * orient(minX, minY, minX, maxY, bx, by) <= 0) {\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /** returns true if the edge (defined by (ax, ay) (bx, by)) intersects the query */\n  private static boolean edgeIntersectsBox(int ax, int ay, int bx, int by,\n                                           int minX, int maxX, int minY, int maxY) {\n    // shortcut: if edge is a point (occurs w/ Line shapes); simply check bbox w/ point\n    if (ax == bx && ay == by) {\n      return Rectangle.containsPoint(ay, ax, minY, maxY, minX, maxX);\n    }\n\n    // shortcut: check if either of the end points fall inside the box\n    if (bboxContainsPoint(ax, ay, minX, maxX, minY, maxY)\n        || bboxContainsPoint(bx, by, minX, maxX, minY, maxY)) {\n      return true;\n    }\n\n    // shortcut: check bboxes of edges are disjoint\n    if (boxesAreDisjoint(Math.min(ax, bx), Math.max(ax, bx), Math.min(ay, by), Math.max(ay, by),\n        minX, maxX, minY, maxY)) {\n      return false;\n    }\n\n    // shortcut: edge is a point\n    if (ax == bx && ay == by) {\n      return false;\n    }\n\n    // top\n    if (orient(ax, ay, bx, by, minX, maxY) * orient(ax, ay, bx, by, maxX, maxY) <= 0 &&\n        orient(minX, maxY, maxX, maxY, ax, ay) * orient(minX, maxY, maxX, maxY, bx, by) <= 0) {\n      return true;\n    }\n\n    // right\n    if (orient(ax, ay, bx, by, maxX, maxY) * orient(ax, ay, bx, by, maxX, minY) <= 0 &&\n        orient(maxX, maxY, maxX, minY, ax, ay) * orient(maxX, maxY, maxX, minY, bx, by) <= 0) {\n      return true;\n    }\n\n    // bottom\n    if (orient(ax, ay, bx, by, maxX, minY) * orient(ax, ay, bx, by, minX, minY) <= 0 &&\n        orient(maxX, minY, minX, minY, ax, ay) * orient(maxX, minY, minX, minY, bx, by) <= 0) {\n      return true;\n    }\n\n    // left\n    if (orient(ax, ay, bx, by, minX, minY) * orient(ax, ay, bx, by, minX, maxY) <= 0 &&\n        orient(minX, minY, minX, maxY, ax, ay) * orient(minX, minY, minX, maxY, bx, by) <= 0) {\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Rectangle2D#edgeIntersectsBox(int,int,int,int,int,int,int,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Rectangle2D#edgeIntersectsBox(int,int,int,int,int,int,int,int).mjava","sourceNew":"  /** returns true if the edge (defined by (ax, ay) (bx, by)) intersects the query */\n  private static boolean edgeIntersectsBox(int ax, int ay, int bx, int by,\n                                           int minX, int maxX, int minY, int maxY) {\n    // shortcut: if edge is a point (occurs w/ Line shapes); simply check bbox w/ point\n    if (ax == bx && ay == by) {\n      return Rectangle.containsPoint(ay, ax, minY, maxY, minX, maxX);\n    }\n\n    // shortcut: check if either of the end points fall inside the box\n    if (bboxContainsPoint(ax, ay, minX, maxX, minY, maxY) ||\n        bboxContainsPoint(bx, by, minX, maxX, minY, maxY)) {\n      return true;\n    }\n\n    // shortcut: check bboxes of edges are disjoint\n    if (boxesAreDisjoint(Math.min(ax, bx), Math.max(ax, bx), Math.min(ay, by), Math.max(ay, by),\n        minX, maxX, minY, maxY)) {\n      return false;\n    }\n\n    // top\n    if (orient(ax, ay, bx, by, minX, maxY) * orient(ax, ay, bx, by, maxX, maxY) <= 0 &&\n        orient(minX, maxY, maxX, maxY, ax, ay) * orient(minX, maxY, maxX, maxY, bx, by) <= 0) {\n      return true;\n    }\n\n    // right\n    if (orient(ax, ay, bx, by, maxX, maxY) * orient(ax, ay, bx, by, maxX, minY) <= 0 &&\n        orient(maxX, maxY, maxX, minY, ax, ay) * orient(maxX, maxY, maxX, minY, bx, by) <= 0) {\n      return true;\n    }\n\n    // bottom\n    if (orient(ax, ay, bx, by, maxX, minY) * orient(ax, ay, bx, by, minX, minY) <= 0 &&\n        orient(maxX, minY, minX, minY, ax, ay) * orient(maxX, minY, minX, minY, bx, by) <= 0) {\n      return true;\n    }\n\n    // left\n    if (orient(ax, ay, bx, by, minX, minY) * orient(ax, ay, bx, by, minX, maxY) <= 0 &&\n        orient(minX, minY, minX, maxY, ax, ay) * orient(minX, minY, minX, maxY, bx, by) <= 0) {\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /** returns true if the edge (defined by (ax, ay) (bx, by)) intersects the query */\n  private static boolean edgeIntersectsBox(int ax, int ay, int bx, int by,\n                                           int minX, int maxX, int minY, int maxY) {\n    // shortcut: if edge is a point (occurs w/ Line shapes); simply check bbox w/ point\n    if (ax == bx && ay == by) {\n      return Rectangle.containsPoint(ay, ax, minY, maxY, minX, maxX);\n    }\n\n    // shortcut: check if either of the end points fall inside the box\n    if (bboxContainsPoint(ax, ay, minX, maxX, minY, maxY) ||\n        bboxContainsPoint(bx, by, minX, maxX, minY, maxY)) {\n      return true;\n    }\n\n    // shortcut: check bboxes of edges are disjoint\n    if (boxesAreDisjoint(Math.min(ax, bx), Math.max(ax, bx), Math.min(ay, by), Math.max(ay, by),\n        minX, maxX, minY, maxY)) {\n      return false;\n    }\n\n    // top\n    if (orient(ax, ay, bx, by, minX, maxY) * orient(ax, ay, bx, by, maxX, maxY) <= 0 &&\n        orient(minX, maxY, maxX, maxY, ax, ay) * orient(minX, maxY, maxX, maxY, bx, by) <= 0) {\n      return true;\n    }\n\n    // right\n    if (orient(ax, ay, bx, by, maxX, maxY) * orient(ax, ay, bx, by, maxX, minY) <= 0 &&\n        orient(maxX, maxY, maxX, minY, ax, ay) * orient(maxX, maxY, maxX, minY, bx, by) <= 0) {\n      return true;\n    }\n\n    // bottom\n    if (orient(ax, ay, bx, by, maxX, minY) * orient(ax, ay, bx, by, minX, minY) <= 0 &&\n        orient(maxX, minY, minX, minY, ax, ay) * orient(maxX, minY, minX, minY, bx, by) <= 0) {\n      return true;\n    }\n\n    // left\n    if (orient(ax, ay, bx, by, minX, minY) * orient(ax, ay, bx, by, minX, maxY) <= 0 &&\n        orient(minX, minY, minX, maxY, ax, ay) * orient(minX, minY, minX, maxY, bx, by) <= 0) {\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9feee35369998c08f5168e0808e67e09857d5bac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["fc005279ab64cbf458ccef2ada610bc1a04b6139"],"fc005279ab64cbf458ccef2ada610bc1a04b6139":["9feee35369998c08f5168e0808e67e09857d5bac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"9feee35369998c08f5168e0808e67e09857d5bac":["fc005279ab64cbf458ccef2ada610bc1a04b6139"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9feee35369998c08f5168e0808e67e09857d5bac"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fc005279ab64cbf458ccef2ada610bc1a04b6139":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}