{"path":"lucene/core/src/java/org/apache/lucene/util/RecyclingIntBlockAllocator#recycleIntBlocks(int[][],int,int).mjava","commits":[{"id":"30fd30bfbfa6b9e036bcd99c8339712e965d4a63","date":1351859294,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/RecyclingIntBlockAllocator#recycleIntBlocks(int[][],int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void recycleIntBlocks(int[][] blocks, int start, int end) {\n    final int numBlocks = Math.min(maxBufferedBlocks - freeBlocks, end - start);\n    final int size = freeBlocks + numBlocks;\n    if (size >= freeByteBlocks.length) {\n      final int[][] newBlocks = new int[ArrayUtil.oversize(size,\n          RamUsageEstimator.NUM_BYTES_OBJECT_REF)][];\n      System.arraycopy(freeByteBlocks, 0, newBlocks, 0, freeBlocks);\n      freeByteBlocks = newBlocks;\n    }\n    final int stop = start + numBlocks;\n    for (int i = start; i < stop; i++) {\n      freeByteBlocks[freeBlocks++] = blocks[i];\n      blocks[i] = null;\n    }\n    for (int i = stop; i < end; i++) {\n      blocks[i] = null;\n    }\n    bytesUsed.addAndGet(-(end - stop) * (blockSize * RamUsageEstimator.NUM_BYTES_INT));\n    assert bytesUsed.get() >= 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f226a8b088dd9c8f6ab287a77237c4aa00a238e5","date":1456187572,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/RecyclingIntBlockAllocator#recycleIntBlocks(int[][],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/RecyclingIntBlockAllocator#recycleIntBlocks(int[][],int,int).mjava","sourceNew":"  @Override\n  public void recycleIntBlocks(int[][] blocks, int start, int end) {\n    final int numBlocks = Math.min(maxBufferedBlocks - freeBlocks, end - start);\n    final int size = freeBlocks + numBlocks;\n    if (size >= freeByteBlocks.length) {\n      final int[][] newBlocks = new int[ArrayUtil.oversize(size,\n          RamUsageEstimator.NUM_BYTES_OBJECT_REF)][];\n      System.arraycopy(freeByteBlocks, 0, newBlocks, 0, freeBlocks);\n      freeByteBlocks = newBlocks;\n    }\n    final int stop = start + numBlocks;\n    for (int i = start; i < stop; i++) {\n      freeByteBlocks[freeBlocks++] = blocks[i];\n      blocks[i] = null;\n    }\n    for (int i = stop; i < end; i++) {\n      blocks[i] = null;\n    }\n    bytesUsed.addAndGet(-(end - stop) * (blockSize * Integer.BYTES));\n    assert bytesUsed.get() >= 0;\n  }\n\n","sourceOld":"  @Override\n  public void recycleIntBlocks(int[][] blocks, int start, int end) {\n    final int numBlocks = Math.min(maxBufferedBlocks - freeBlocks, end - start);\n    final int size = freeBlocks + numBlocks;\n    if (size >= freeByteBlocks.length) {\n      final int[][] newBlocks = new int[ArrayUtil.oversize(size,\n          RamUsageEstimator.NUM_BYTES_OBJECT_REF)][];\n      System.arraycopy(freeByteBlocks, 0, newBlocks, 0, freeBlocks);\n      freeByteBlocks = newBlocks;\n    }\n    final int stop = start + numBlocks;\n    for (int i = start; i < stop; i++) {\n      freeByteBlocks[freeBlocks++] = blocks[i];\n      blocks[i] = null;\n    }\n    for (int i = stop; i < end; i++) {\n      blocks[i] = null;\n    }\n    bytesUsed.addAndGet(-(end - stop) * (blockSize * RamUsageEstimator.NUM_BYTES_INT));\n    assert bytesUsed.get() >= 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"419a8f52c6635419beb951255cacbbb281044c57","date":1456189353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/RecyclingIntBlockAllocator#recycleIntBlocks(int[][],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/RecyclingIntBlockAllocator#recycleIntBlocks(int[][],int,int).mjava","sourceNew":"  @Override\n  public void recycleIntBlocks(int[][] blocks, int start, int end) {\n    final int numBlocks = Math.min(maxBufferedBlocks - freeBlocks, end - start);\n    final int size = freeBlocks + numBlocks;\n    if (size >= freeByteBlocks.length) {\n      final int[][] newBlocks = new int[ArrayUtil.oversize(size,\n          RamUsageEstimator.NUM_BYTES_OBJECT_REF)][];\n      System.arraycopy(freeByteBlocks, 0, newBlocks, 0, freeBlocks);\n      freeByteBlocks = newBlocks;\n    }\n    final int stop = start + numBlocks;\n    for (int i = start; i < stop; i++) {\n      freeByteBlocks[freeBlocks++] = blocks[i];\n      blocks[i] = null;\n    }\n    for (int i = stop; i < end; i++) {\n      blocks[i] = null;\n    }\n    bytesUsed.addAndGet(-(end - stop) * (blockSize * Integer.BYTES));\n    assert bytesUsed.get() >= 0;\n  }\n\n","sourceOld":"  @Override\n  public void recycleIntBlocks(int[][] blocks, int start, int end) {\n    final int numBlocks = Math.min(maxBufferedBlocks - freeBlocks, end - start);\n    final int size = freeBlocks + numBlocks;\n    if (size >= freeByteBlocks.length) {\n      final int[][] newBlocks = new int[ArrayUtil.oversize(size,\n          RamUsageEstimator.NUM_BYTES_OBJECT_REF)][];\n      System.arraycopy(freeByteBlocks, 0, newBlocks, 0, freeBlocks);\n      freeByteBlocks = newBlocks;\n    }\n    final int stop = start + numBlocks;\n    for (int i = start; i < stop; i++) {\n      freeByteBlocks[freeBlocks++] = blocks[i];\n      blocks[i] = null;\n    }\n    for (int i = stop; i < end; i++) {\n      blocks[i] = null;\n    }\n    bytesUsed.addAndGet(-(end - stop) * (blockSize * RamUsageEstimator.NUM_BYTES_INT));\n    assert bytesUsed.get() >= 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"419a8f52c6635419beb951255cacbbb281044c57":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63","f226a8b088dd9c8f6ab287a77237c4aa00a238e5"],"f226a8b088dd9c8f6ab287a77237c4aa00a238e5":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["419a8f52c6635419beb951255cacbbb281044c57"]},"commit2Childs":{"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["419a8f52c6635419beb951255cacbbb281044c57","f226a8b088dd9c8f6ab287a77237c4aa00a238e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"419a8f52c6635419beb951255cacbbb281044c57":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f226a8b088dd9c8f6ab287a77237c4aa00a238e5":["419a8f52c6635419beb951255cacbbb281044c57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}