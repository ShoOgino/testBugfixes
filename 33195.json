{"path":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#checkReplicationTracker(UpdateCommand).mjava","commits":[{"id":"615bf5b56d95ed8c9bf06a402db6c817d6bff21a","date":1509492118,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#checkReplicationTracker(UpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"  // helper method, processAdd was getting a bit large.\n  // Sets replicationTracker = null if we aren't the leader or don't care abeout minRf\n  // We have three possibilities here:\n  //\n  // 1> there is no min_rf specified: Just return\n  // 2> we are a leader: Allocate a LeaderTracker and, if we're getting the original request, a RollupTracker\n  // 3> we're a follower: allocat a RollupTracker\n  //\n  private void checkReplicationTracker(UpdateCommand cmd) {\n    String repFact = req.getParams().get(UpdateRequest.MIN_REPFACT);\n\n    if (zkEnabled == false || repFact == null) {\n      rollupReplicationTracker = null; // never need one of these in stand-alone\n      leaderReplicationTracker = null;\n      return;\n    }\n\n    int requestedReplicationFactor;\n\n    try {\n      requestedReplicationFactor = Integer.parseInt(repFact);\n    } catch (NumberFormatException nfe) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"MinRF must be an integer, was \" + repFact);\n    }\n\n    SolrParams rp = cmd.getReq().getParams();\n    String distribUpdate = rp.get(DISTRIB_UPDATE_PARAM);\n    // Ok,we're receiving the original request, we need a rollup tracker, but only one so we accumulate over the\n    // course of a batch.\n    if ((distribUpdate == null || DistribPhase.NONE.toString().equals(distribUpdate)) &&\n        rollupReplicationTracker == null) {\n      rollupReplicationTracker = new RollupRequestReplicationTracker(repFact);\n    }\n    // If we're a leader, we need a leader replication tracker, so let's do that. If there are multiple docs in\n    // a batch we need to use the _same_ leader replication tracker.\n    if (isLeader && leaderReplicationTracker == null) {\n      leaderReplicationTracker = new LeaderRequestReplicationTracker(\n          req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId(), requestedReplicationFactor);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43f5f8344e80b4bfb2069917069430266753d2f0","date":1538584815,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#checkReplicationTracker(UpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#checkReplicationTracker(UpdateCommand).mjava","sourceNew":"  // helper method, processAdd was getting a bit large.\n  // Sets replicationTracker = null if we aren't the leader\n  // We have two possibilities here:\n  //\n  // 1> we are a leader: Allocate a LeaderTracker and, if we're getting the original request, a RollupTracker\n  // 2> we're a follower: allocat a RollupTracker\n  //\n  private void checkReplicationTracker(UpdateCommand cmd) {\n    if (zkEnabled == false) {\n      rollupReplicationTracker = null; // never need one of these in stand-alone\n      leaderReplicationTracker = null;\n      return;\n    }\n\n    SolrParams rp = cmd.getReq().getParams();\n    String distribUpdate = rp.get(DISTRIB_UPDATE_PARAM);\n    // Ok,we're receiving the original request, we need a rollup tracker, but only one so we accumulate over the\n    // course of a batch.\n    if ((distribUpdate == null || DistribPhase.NONE.toString().equals(distribUpdate)) &&\n        rollupReplicationTracker == null) {\n      rollupReplicationTracker = new RollupRequestReplicationTracker();\n    }\n    // If we're a leader, we need a leader replication tracker, so let's do that. If there are multiple docs in\n    // a batch we need to use the _same_ leader replication tracker.\n    if (isLeader && leaderReplicationTracker == null) {\n      leaderReplicationTracker = new LeaderRequestReplicationTracker(\n          req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId());\n    }\n  }\n\n","sourceOld":"  // helper method, processAdd was getting a bit large.\n  // Sets replicationTracker = null if we aren't the leader or don't care abeout minRf\n  // We have three possibilities here:\n  //\n  // 1> there is no min_rf specified: Just return\n  // 2> we are a leader: Allocate a LeaderTracker and, if we're getting the original request, a RollupTracker\n  // 3> we're a follower: allocat a RollupTracker\n  //\n  private void checkReplicationTracker(UpdateCommand cmd) {\n    String repFact = req.getParams().get(UpdateRequest.MIN_REPFACT);\n\n    if (zkEnabled == false || repFact == null) {\n      rollupReplicationTracker = null; // never need one of these in stand-alone\n      leaderReplicationTracker = null;\n      return;\n    }\n\n    int requestedReplicationFactor;\n\n    try {\n      requestedReplicationFactor = Integer.parseInt(repFact);\n    } catch (NumberFormatException nfe) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"MinRF must be an integer, was \" + repFact);\n    }\n\n    SolrParams rp = cmd.getReq().getParams();\n    String distribUpdate = rp.get(DISTRIB_UPDATE_PARAM);\n    // Ok,we're receiving the original request, we need a rollup tracker, but only one so we accumulate over the\n    // course of a batch.\n    if ((distribUpdate == null || DistribPhase.NONE.toString().equals(distribUpdate)) &&\n        rollupReplicationTracker == null) {\n      rollupReplicationTracker = new RollupRequestReplicationTracker(repFact);\n    }\n    // If we're a leader, we need a leader replication tracker, so let's do that. If there are multiple docs in\n    // a batch we need to use the _same_ leader replication tracker.\n    if (isLeader && leaderReplicationTracker == null) {\n      leaderReplicationTracker = new LeaderRequestReplicationTracker(\n          req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId(), requestedReplicationFactor);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d70e774cb25c8a8d2c3e5e84200f235f9168d87","date":1553016391,"type":5,"author":"Bar Rotstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#checkReplicationTracker(UpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#checkReplicationTracker(UpdateCommand).mjava","sourceNew":"  // helper method, processAdd was getting a bit large.\n  // Sets replicationTracker = null if we aren't the leader\n  // We have two possibilities here:\n  //\n  // 1> we are a leader: Allocate a LeaderTracker and, if we're getting the original request, a RollupTracker\n  // 2> we're a follower: allocat a RollupTracker\n  //\n  private void checkReplicationTracker(UpdateCommand cmd) {\n\n    SolrParams rp = cmd.getReq().getParams();\n    String distribUpdate = rp.get(DISTRIB_UPDATE_PARAM);\n    // Ok,we're receiving the original request, we need a rollup tracker, but only one so we accumulate over the\n    // course of a batch.\n    if ((distribUpdate == null || DistribPhase.NONE.toString().equals(distribUpdate)) &&\n        rollupReplicationTracker == null) {\n      rollupReplicationTracker = new RollupRequestReplicationTracker();\n    }\n    // If we're a leader, we need a leader replication tracker, so let's do that. If there are multiple docs in\n    // a batch we need to use the _same_ leader replication tracker.\n    if (isLeader && leaderReplicationTracker == null) {\n      leaderReplicationTracker = new LeaderRequestReplicationTracker(\n          req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId());\n    }\n  }\n\n","sourceOld":"  // helper method, processAdd was getting a bit large.\n  // Sets replicationTracker = null if we aren't the leader\n  // We have two possibilities here:\n  //\n  // 1> we are a leader: Allocate a LeaderTracker and, if we're getting the original request, a RollupTracker\n  // 2> we're a follower: allocat a RollupTracker\n  //\n  private void checkReplicationTracker(UpdateCommand cmd) {\n    if (zkEnabled == false) {\n      rollupReplicationTracker = null; // never need one of these in stand-alone\n      leaderReplicationTracker = null;\n      return;\n    }\n\n    SolrParams rp = cmd.getReq().getParams();\n    String distribUpdate = rp.get(DISTRIB_UPDATE_PARAM);\n    // Ok,we're receiving the original request, we need a rollup tracker, but only one so we accumulate over the\n    // course of a batch.\n    if ((distribUpdate == null || DistribPhase.NONE.toString().equals(distribUpdate)) &&\n        rollupReplicationTracker == null) {\n      rollupReplicationTracker = new RollupRequestReplicationTracker();\n    }\n    // If we're a leader, we need a leader replication tracker, so let's do that. If there are multiple docs in\n    // a batch we need to use the _same_ leader replication tracker.\n    if (isLeader && leaderReplicationTracker == null) {\n      leaderReplicationTracker = new LeaderRequestReplicationTracker(\n          req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"43f5f8344e80b4bfb2069917069430266753d2f0":["615bf5b56d95ed8c9bf06a402db6c817d6bff21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"615bf5b56d95ed8c9bf06a402db6c817d6bff21a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9d70e774cb25c8a8d2c3e5e84200f235f9168d87":["43f5f8344e80b4bfb2069917069430266753d2f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9d70e774cb25c8a8d2c3e5e84200f235f9168d87"]},"commit2Childs":{"43f5f8344e80b4bfb2069917069430266753d2f0":["9d70e774cb25c8a8d2c3e5e84200f235f9168d87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["615bf5b56d95ed8c9bf06a402db6c817d6bff21a"],"615bf5b56d95ed8c9bf06a402db6c817d6bff21a":["43f5f8344e80b4bfb2069917069430266753d2f0"],"9d70e774cb25c8a8d2c3e5e84200f235f9168d87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}