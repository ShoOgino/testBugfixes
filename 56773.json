{"path":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#newFieldQuery(Analyzer,String,String,boolean).mjava","commits":[{"id":"c7e79e31f55cbb444e3023d430a340658755aa31","date":1357666399,"type":1,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#newFieldQuery(Analyzer,String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#newFieldQuery(Analyzer,String,String,boolean).mjava","sourceNew":"    @Override\n    protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, boolean quoted) throws SyntaxError {\n      Analyzer actualAnalyzer;\n      if (removeStopFilter) {\n        if (nonStopFilterAnalyzerPerField == null) {\n          nonStopFilterAnalyzerPerField = new HashMap<String, Analyzer>();\n        }\n        actualAnalyzer = nonStopFilterAnalyzerPerField.get(field);\n        if (actualAnalyzer == null) {\n          actualAnalyzer = noStopwordFilterAnalyzer(field);\n        }\n      } else {\n        actualAnalyzer = parser.getReq().getSchema().getFieldType(field).getQueryAnalyzer();\n      }\n      return super.newFieldQuery(actualAnalyzer, field, queryText, quoted);\n    }\n\n","sourceOld":"    @Override\n    protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, boolean quoted) throws SyntaxError {\n      Analyzer actualAnalyzer;\n      if (removeStopFilter) {\n        if (nonStopFilterAnalyzerPerField == null) {\n          nonStopFilterAnalyzerPerField = new HashMap<String, Analyzer>();\n        }\n        actualAnalyzer = nonStopFilterAnalyzerPerField.get(field);\n        if (actualAnalyzer == null) {\n          actualAnalyzer = noStopwordFilterAnalyzer(field);\n        }\n      } else {\n        actualAnalyzer = parser.getReq().getSchema().getFieldType(field).getQueryAnalyzer();\n      }\n      return super.newFieldQuery(actualAnalyzer, field, queryText, quoted);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#newFieldQuery(Analyzer,String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#newFieldQuery(Analyzer,String,String,boolean).mjava","sourceNew":"    @Override\n    protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, boolean quoted) throws SyntaxError {\n      Analyzer actualAnalyzer;\n      if (removeStopFilter) {\n        if (nonStopFilterAnalyzerPerField == null) {\n          nonStopFilterAnalyzerPerField = new HashMap<String, Analyzer>();\n        }\n        actualAnalyzer = nonStopFilterAnalyzerPerField.get(field);\n        if (actualAnalyzer == null) {\n          actualAnalyzer = noStopwordFilterAnalyzer(field);\n        }\n      } else {\n        actualAnalyzer = parser.getReq().getSchema().getFieldType(field).getQueryAnalyzer();\n      }\n      return super.newFieldQuery(actualAnalyzer, field, queryText, quoted);\n    }\n\n","sourceOld":"    @Override\n    protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, boolean quoted) throws SyntaxError {\n      Analyzer actualAnalyzer;\n      if (removeStopFilter) {\n        if (nonStopFilterAnalyzerPerField == null) {\n          nonStopFilterAnalyzerPerField = new HashMap<String, Analyzer>();\n        }\n        actualAnalyzer = nonStopFilterAnalyzerPerField.get(field);\n        if (actualAnalyzer == null) {\n          actualAnalyzer = noStopwordFilterAnalyzer(field);\n        }\n      } else {\n        actualAnalyzer = parser.getReq().getSchema().getFieldType(field).getQueryAnalyzer();\n      }\n      return super.newFieldQuery(actualAnalyzer, field, queryText, quoted);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#newFieldQuery(Analyzer,String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#newFieldQuery(Analyzer,String,String,boolean).mjava","sourceNew":"    @Override\n    protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, boolean quoted) throws SyntaxError {\n      Analyzer actualAnalyzer;\n      if (removeStopFilter) {\n        if (nonStopFilterAnalyzerPerField == null) {\n          nonStopFilterAnalyzerPerField = new HashMap<>();\n        }\n        actualAnalyzer = nonStopFilterAnalyzerPerField.get(field);\n        if (actualAnalyzer == null) {\n          actualAnalyzer = noStopwordFilterAnalyzer(field);\n        }\n      } else {\n        actualAnalyzer = parser.getReq().getSchema().getFieldType(field).getQueryAnalyzer();\n      }\n      return super.newFieldQuery(actualAnalyzer, field, queryText, quoted);\n    }\n\n","sourceOld":"    @Override\n    protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, boolean quoted) throws SyntaxError {\n      Analyzer actualAnalyzer;\n      if (removeStopFilter) {\n        if (nonStopFilterAnalyzerPerField == null) {\n          nonStopFilterAnalyzerPerField = new HashMap<String, Analyzer>();\n        }\n        actualAnalyzer = nonStopFilterAnalyzerPerField.get(field);\n        if (actualAnalyzer == null) {\n          actualAnalyzer = noStopwordFilterAnalyzer(field);\n        }\n      } else {\n        actualAnalyzer = parser.getReq().getSchema().getFieldType(field).getQueryAnalyzer();\n      }\n      return super.newFieldQuery(actualAnalyzer, field, queryText, quoted);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e55782fb51a6e9789542818eb2161a3247f39ace","date":1489707707,"type":5,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#newFieldQuery(Analyzer,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#newFieldQuery(Analyzer,String,String,boolean).mjava","sourceNew":"    @Override\n    protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, \n                                  boolean quoted, boolean fieldAutoGenPhraseQueries) throws SyntaxError {\n      if ((getAutoGeneratePhraseQueries() || fieldAutoGenPhraseQueries) && getSplitOnWhitespace() == false) {\n        throw new QueryParserConfigurationException\n            (\"Field '\" + field + \"': autoGeneratePhraseQueries == true is disallowed when sow/splitOnWhitespace == false\");\n      }\n      Analyzer actualAnalyzer;\n      if (removeStopFilter) {\n        if (nonStopFilterAnalyzerPerField == null) {\n          nonStopFilterAnalyzerPerField = new HashMap<>();\n        }\n        actualAnalyzer = nonStopFilterAnalyzerPerField.get(field);\n        if (actualAnalyzer == null) {\n          actualAnalyzer = noStopwordFilterAnalyzer(field);\n        }\n      } else {\n        actualAnalyzer = parser.getReq().getSchema().getFieldType(field).getQueryAnalyzer();\n      }\n      return super.newFieldQuery(actualAnalyzer, field, queryText, quoted, fieldAutoGenPhraseQueries);\n    }\n\n","sourceOld":"    @Override\n    protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, boolean quoted) throws SyntaxError {\n      Analyzer actualAnalyzer;\n      if (removeStopFilter) {\n        if (nonStopFilterAnalyzerPerField == null) {\n          nonStopFilterAnalyzerPerField = new HashMap<>();\n        }\n        actualAnalyzer = nonStopFilterAnalyzerPerField.get(field);\n        if (actualAnalyzer == null) {\n          actualAnalyzer = noStopwordFilterAnalyzer(field);\n        }\n      } else {\n        actualAnalyzer = parser.getReq().getSchema().getFieldType(field).getQueryAnalyzer();\n      }\n      return super.newFieldQuery(actualAnalyzer, field, queryText, quoted);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c03778630c4604270d88c148afb8c7de35b51d3c","date":1490280010,"type":5,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#newFieldQuery(Analyzer,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#newFieldQuery(Analyzer,String,String,boolean).mjava","sourceNew":"    @Override\n    protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, \n                                  boolean quoted, boolean fieldAutoGenPhraseQueries) throws SyntaxError {\n      if ((getAutoGeneratePhraseQueries() || fieldAutoGenPhraseQueries) && getSplitOnWhitespace() == false) {\n        throw new QueryParserConfigurationException\n            (\"Field '\" + field + \"': autoGeneratePhraseQueries == true is disallowed when sow/splitOnWhitespace == false\");\n      }\n      Analyzer actualAnalyzer;\n      if (removeStopFilter) {\n        if (nonStopFilterAnalyzerPerField == null) {\n          nonStopFilterAnalyzerPerField = new HashMap<>();\n        }\n        actualAnalyzer = nonStopFilterAnalyzerPerField.get(field);\n        if (actualAnalyzer == null) {\n          actualAnalyzer = noStopwordFilterAnalyzer(field);\n        }\n      } else {\n        actualAnalyzer = parser.getReq().getSchema().getFieldType(field).getQueryAnalyzer();\n      }\n      return super.newFieldQuery(actualAnalyzer, field, queryText, quoted, fieldAutoGenPhraseQueries);\n    }\n\n","sourceOld":"    @Override\n    protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, boolean quoted) throws SyntaxError {\n      Analyzer actualAnalyzer;\n      if (removeStopFilter) {\n        if (nonStopFilterAnalyzerPerField == null) {\n          nonStopFilterAnalyzerPerField = new HashMap<>();\n        }\n        actualAnalyzer = nonStopFilterAnalyzerPerField.get(field);\n        if (actualAnalyzer == null) {\n          actualAnalyzer = noStopwordFilterAnalyzer(field);\n        }\n      } else {\n        actualAnalyzer = parser.getReq().getSchema().getFieldType(field).getQueryAnalyzer();\n      }\n      return super.newFieldQuery(actualAnalyzer, field, queryText, quoted);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c7e79e31f55cbb444e3023d430a340658755aa31"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c7e79e31f55cbb444e3023d430a340658755aa31":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c03778630c4604270d88c148afb8c7de35b51d3c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"e55782fb51a6e9789542818eb2161a3247f39ace":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7e79e31f55cbb444e3023d430a340658755aa31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e55782fb51a6e9789542818eb2161a3247f39ace"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c03778630c4604270d88c148afb8c7de35b51d3c","e55782fb51a6e9789542818eb2161a3247f39ace"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7e79e31f55cbb444e3023d430a340658755aa31","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"c7e79e31f55cbb444e3023d430a340658755aa31":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"c03778630c4604270d88c148afb8c7de35b51d3c":[],"e55782fb51a6e9789542818eb2161a3247f39ace":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c03778630c4604270d88c148afb8c7de35b51d3c","4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}