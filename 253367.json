{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/SqlEntityProcessor#getDeltaImportQuery(String).mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/SqlEntityProcessor#getDeltaImportQuery(String).mjava","pathOld":"/dev/null","sourceNew":"  public String getDeltaImportQuery(String queryString) {\n    StringBuffer sb = new StringBuffer(queryString);\n    if (SELECT_WHERE_PATTERN.matcher(queryString).find()) {\n      sb.append(\" and \");\n    } else {\n      sb.append(\" where \");\n    }\n    boolean first = true;\n    String[] primaryKeys = context.getEntityAttribute(\"pk\").split(\",\");\n    for (String primaryKey : primaryKeys) {\n      if (!first) {\n        sb.append(\" and \");\n      }\n      first = false;\n      Object val = resolver.resolve(\"dataimporter.delta.\" + primaryKey);\n      if (val == null) {\n        Matcher m = DOT_PATTERN.matcher(primaryKey);\n        if (m.find()) {\n          val = resolver.resolve(\"dataimporter.delta.\" + m.group(1));\n        }\n      }\n      sb.append(primaryKey).append(\" = \");\n      if (val instanceof Number) {\n        sb.append(val.toString());\n      } else {\n        sb.append(\"'\").append(val.toString()).append(\"'\");\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"340b3ce725d5a7611bd793211a06f60e6592a37e","date":1224590276,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/SqlEntityProcessor#getDeltaImportQuery(String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/SqlEntityProcessor#getDeltaImportQuery(String).mjava","sourceNew":"  public String getDeltaImportQuery(String queryString) {\n    String deltaImportQuery = context.getEntityAttribute(DELTA_IMPORT_QUERY);\n    if(deltaImportQuery != null){\n      return resolver.replaceTokens(deltaImportQuery);\n    }\n    StringBuffer sb = new StringBuffer(queryString);\n    if (SELECT_WHERE_PATTERN.matcher(queryString).find()) {\n      sb.append(\" and \");\n    } else {\n      sb.append(\" where \");\n    }\n    boolean first = true;\n    String[] primaryKeys = context.getEntityAttribute(\"pk\").split(\",\");\n    for (String primaryKey : primaryKeys) {\n      if (!first) {\n        sb.append(\" and \");\n      }\n      first = false;\n      Object val = resolver.resolve(\"dataimporter.delta.\" + primaryKey);\n      if (val == null) {\n        Matcher m = DOT_PATTERN.matcher(primaryKey);\n        if (m.find()) {\n          val = resolver.resolve(\"dataimporter.delta.\" + m.group(1));\n        }\n      }\n      sb.append(primaryKey).append(\" = \");\n      if (val instanceof Number) {\n        sb.append(val.toString());\n      } else {\n        sb.append(\"'\").append(val.toString()).append(\"'\");\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  public String getDeltaImportQuery(String queryString) {\n    StringBuffer sb = new StringBuffer(queryString);\n    if (SELECT_WHERE_PATTERN.matcher(queryString).find()) {\n      sb.append(\" and \");\n    } else {\n      sb.append(\" where \");\n    }\n    boolean first = true;\n    String[] primaryKeys = context.getEntityAttribute(\"pk\").split(\",\");\n    for (String primaryKey : primaryKeys) {\n      if (!first) {\n        sb.append(\" and \");\n      }\n      first = false;\n      Object val = resolver.resolve(\"dataimporter.delta.\" + primaryKey);\n      if (val == null) {\n        Matcher m = DOT_PATTERN.matcher(primaryKey);\n        if (m.find()) {\n          val = resolver.resolve(\"dataimporter.delta.\" + m.group(1));\n        }\n      }\n      sb.append(primaryKey).append(\" = \");\n      if (val instanceof Number) {\n        sb.append(val.toString());\n      } else {\n        sb.append(\"'\").append(val.toString()).append(\"'\");\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2e5bfa22b27d858fb940b70befda09798b82dd2","date":1233862915,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/SqlEntityProcessor#getDeltaImportQuery(String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/SqlEntityProcessor#getDeltaImportQuery(String).mjava","sourceNew":"  public String getDeltaImportQuery(String queryString) {\n    String deltaImportQuery = context.getEntityAttribute(DELTA_IMPORT_QUERY);\n    if(deltaImportQuery != null){\n      return resolver.replaceTokens(deltaImportQuery);\n    }\n    StringBuilder sb = new StringBuilder(queryString);\n    if (SELECT_WHERE_PATTERN.matcher(queryString).find()) {\n      sb.append(\" and \");\n    } else {\n      sb.append(\" where \");\n    }\n    boolean first = true;\n    String[] primaryKeys = context.getEntityAttribute(\"pk\").split(\",\");\n    for (String primaryKey : primaryKeys) {\n      if (!first) {\n        sb.append(\" and \");\n      }\n      first = false;\n      Object val = resolver.resolve(\"dataimporter.delta.\" + primaryKey);\n      if (val == null) {\n        Matcher m = DOT_PATTERN.matcher(primaryKey);\n        if (m.find()) {\n          val = resolver.resolve(\"dataimporter.delta.\" + m.group(1));\n        }\n      }\n      sb.append(primaryKey).append(\" = \");\n      if (val instanceof Number) {\n        sb.append(val.toString());\n      } else {\n        sb.append(\"'\").append(val.toString()).append(\"'\");\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  public String getDeltaImportQuery(String queryString) {\n    String deltaImportQuery = context.getEntityAttribute(DELTA_IMPORT_QUERY);\n    if(deltaImportQuery != null){\n      return resolver.replaceTokens(deltaImportQuery);\n    }\n    StringBuffer sb = new StringBuffer(queryString);\n    if (SELECT_WHERE_PATTERN.matcher(queryString).find()) {\n      sb.append(\" and \");\n    } else {\n      sb.append(\" where \");\n    }\n    boolean first = true;\n    String[] primaryKeys = context.getEntityAttribute(\"pk\").split(\",\");\n    for (String primaryKey : primaryKeys) {\n      if (!first) {\n        sb.append(\" and \");\n      }\n      first = false;\n      Object val = resolver.resolve(\"dataimporter.delta.\" + primaryKey);\n      if (val == null) {\n        Matcher m = DOT_PATTERN.matcher(primaryKey);\n        if (m.find()) {\n          val = resolver.resolve(\"dataimporter.delta.\" + m.group(1));\n        }\n      }\n      sb.append(primaryKey).append(\" = \");\n      if (val instanceof Number) {\n        sb.append(val.toString());\n      } else {\n        sb.append(\"'\").append(val.toString()).append(\"'\");\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"873c7b66ed2924f82c45f41de5e31e3f721289b9","date":1242885168,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/SqlEntityProcessor#getDeltaImportQuery(String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/SqlEntityProcessor#getDeltaImportQuery(String).mjava","sourceNew":"  public String getDeltaImportQuery(String queryString) {    \n    StringBuilder sb = new StringBuilder(queryString);\n    if (SELECT_WHERE_PATTERN.matcher(queryString).find()) {\n      sb.append(\" and \");\n    } else {\n      sb.append(\" where \");\n    }\n    boolean first = true;\n    String[] primaryKeys = context.getEntityAttribute(\"pk\").split(\",\");\n    for (String primaryKey : primaryKeys) {\n      if (!first) {\n        sb.append(\" and \");\n      }\n      first = false;\n      Object val = resolver.resolve(\"dataimporter.delta.\" + primaryKey);\n      if (val == null) {\n        Matcher m = DOT_PATTERN.matcher(primaryKey);\n        if (m.find()) {\n          val = resolver.resolve(\"dataimporter.delta.\" + m.group(1));\n        }\n      }\n      sb.append(primaryKey).append(\" = \");\n      if (val instanceof Number) {\n        sb.append(val.toString());\n      } else {\n        sb.append(\"'\").append(val.toString()).append(\"'\");\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  public String getDeltaImportQuery(String queryString) {\n    String deltaImportQuery = context.getEntityAttribute(DELTA_IMPORT_QUERY);\n    if(deltaImportQuery != null){\n      return resolver.replaceTokens(deltaImportQuery);\n    }\n    StringBuilder sb = new StringBuilder(queryString);\n    if (SELECT_WHERE_PATTERN.matcher(queryString).find()) {\n      sb.append(\" and \");\n    } else {\n      sb.append(\" where \");\n    }\n    boolean first = true;\n    String[] primaryKeys = context.getEntityAttribute(\"pk\").split(\",\");\n    for (String primaryKey : primaryKeys) {\n      if (!first) {\n        sb.append(\" and \");\n      }\n      first = false;\n      Object val = resolver.resolve(\"dataimporter.delta.\" + primaryKey);\n      if (val == null) {\n        Matcher m = DOT_PATTERN.matcher(primaryKey);\n        if (m.find()) {\n          val = resolver.resolve(\"dataimporter.delta.\" + m.group(1));\n        }\n      }\n      sb.append(primaryKey).append(\" = \");\n      if (val instanceof Number) {\n        sb.append(val.toString());\n      } else {\n        sb.append(\"'\").append(val.toString()).append(\"'\");\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"153cc06382fdc94d0ea3db127eab860ae4310525","date":1260181667,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/SqlEntityProcessor#getDeltaImportQuery(String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/SqlEntityProcessor#getDeltaImportQuery(String).mjava","sourceNew":"  public String getDeltaImportQuery(String queryString) {    \n    StringBuilder sb = new StringBuilder(queryString);\n    if (SELECT_WHERE_PATTERN.matcher(queryString).find()) {\n      sb.append(\" and \");\n    } else {\n      sb.append(\" where \");\n    }\n    boolean first = true;\n    String[] primaryKeys = context.getEntityAttribute(\"pk\").split(\",\");\n    for (String primaryKey : primaryKeys) {\n      if (!first) {\n        sb.append(\" and \");\n      }\n      first = false;\n      Object val = context.resolve(\"dataimporter.delta.\" + primaryKey);\n      if (val == null) {\n        Matcher m = DOT_PATTERN.matcher(primaryKey);\n        if (m.find()) {\n          val = context.resolve(\"dataimporter.delta.\" + m.group(1));\n        }\n      }\n      sb.append(primaryKey).append(\" = \");\n      if (val instanceof Number) {\n        sb.append(val.toString());\n      } else {\n        sb.append(\"'\").append(val.toString()).append(\"'\");\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  public String getDeltaImportQuery(String queryString) {    \n    StringBuilder sb = new StringBuilder(queryString);\n    if (SELECT_WHERE_PATTERN.matcher(queryString).find()) {\n      sb.append(\" and \");\n    } else {\n      sb.append(\" where \");\n    }\n    boolean first = true;\n    String[] primaryKeys = context.getEntityAttribute(\"pk\").split(\",\");\n    for (String primaryKey : primaryKeys) {\n      if (!first) {\n        sb.append(\" and \");\n      }\n      first = false;\n      Object val = resolver.resolve(\"dataimporter.delta.\" + primaryKey);\n      if (val == null) {\n        Matcher m = DOT_PATTERN.matcher(primaryKey);\n        if (m.find()) {\n          val = resolver.resolve(\"dataimporter.delta.\" + m.group(1));\n        }\n      }\n      sb.append(primaryKey).append(\" = \");\n      if (val instanceof Number) {\n        sb.append(val.toString());\n      } else {\n        sb.append(\"'\").append(val.toString()).append(\"'\");\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/SqlEntityProcessor#getDeltaImportQuery(String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/SqlEntityProcessor#getDeltaImportQuery(String).mjava","sourceNew":"  public String getDeltaImportQuery(String queryString) {    \n    StringBuilder sb = new StringBuilder(queryString);\n    if (SELECT_WHERE_PATTERN.matcher(queryString).find()) {\n      sb.append(\" and \");\n    } else {\n      sb.append(\" where \");\n    }\n    boolean first = true;\n    String[] primaryKeys = context.getEntityAttribute(\"pk\").split(\",\");\n    for (String primaryKey : primaryKeys) {\n      if (!first) {\n        sb.append(\" and \");\n      }\n      first = false;\n      Object val = context.resolve(\"dataimporter.delta.\" + primaryKey);\n      if (val == null) {\n        Matcher m = DOT_PATTERN.matcher(primaryKey);\n        if (m.find()) {\n          val = context.resolve(\"dataimporter.delta.\" + m.group(1));\n        }\n      }\n      sb.append(primaryKey).append(\" = \");\n      if (val instanceof Number) {\n        sb.append(val.toString());\n      } else {\n        sb.append(\"'\").append(val.toString()).append(\"'\");\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  public String getDeltaImportQuery(String queryString) {    \n    StringBuilder sb = new StringBuilder(queryString);\n    if (SELECT_WHERE_PATTERN.matcher(queryString).find()) {\n      sb.append(\" and \");\n    } else {\n      sb.append(\" where \");\n    }\n    boolean first = true;\n    String[] primaryKeys = context.getEntityAttribute(\"pk\").split(\",\");\n    for (String primaryKey : primaryKeys) {\n      if (!first) {\n        sb.append(\" and \");\n      }\n      first = false;\n      Object val = context.resolve(\"dataimporter.delta.\" + primaryKey);\n      if (val == null) {\n        Matcher m = DOT_PATTERN.matcher(primaryKey);\n        if (m.find()) {\n          val = context.resolve(\"dataimporter.delta.\" + m.group(1));\n        }\n      }\n      sb.append(primaryKey).append(\" = \");\n      if (val instanceof Number) {\n        sb.append(val.toString());\n      } else {\n        sb.append(\"'\").append(val.toString()).append(\"'\");\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"873c7b66ed2924f82c45f41de5e31e3f721289b9":["c2e5bfa22b27d858fb940b70befda09798b82dd2"],"340b3ce725d5a7611bd793211a06f60e6592a37e":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["153cc06382fdc94d0ea3db127eab860ae4310525"],"153cc06382fdc94d0ea3db127eab860ae4310525":["873c7b66ed2924f82c45f41de5e31e3f721289b9"],"c2e5bfa22b27d858fb940b70befda09798b82dd2":["340b3ce725d5a7611bd793211a06f60e6592a37e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"873c7b66ed2924f82c45f41de5e31e3f721289b9":["153cc06382fdc94d0ea3db127eab860ae4310525"],"340b3ce725d5a7611bd793211a06f60e6592a37e":["c2e5bfa22b27d858fb940b70befda09798b82dd2"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["340b3ce725d5a7611bd793211a06f60e6592a37e"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"c2e5bfa22b27d858fb940b70befda09798b82dd2":["873c7b66ed2924f82c45f41de5e31e3f721289b9"],"153cc06382fdc94d0ea3db127eab860ae4310525":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}