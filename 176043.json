{"path":"lucene/src/java/org/apache/lucene/index/IndexFileNames#matchesExtension(String,String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileNames#matchesExtension(String,String).mjava","pathOld":"src/java/org/apache/lucene/index/IndexFileNames#matchesExtension(String,String).mjava","sourceNew":"  /**\n   * Returns true if the given filename ends with the given extension. One\n   * should provide a <i>pure</i> extension, withouth '.'.\n   */\n  public static final boolean matchesExtension(String filename, String ext) {\n    // It doesn't make a difference whether we allocate a StringBuilder ourself\n    // or not, since there's only 1 '+' operator.\n    return filename.endsWith(\".\" + ext);\n  }\n\n","sourceOld":"  /**\n   * Returns true if the given filename ends with the given extension. One\n   * should provide a <i>pure</i> extension, withouth '.'.\n   */\n  public static final boolean matchesExtension(String filename, String ext) {\n    // It doesn't make a difference whether we allocate a StringBuilder ourself\n    // or not, since there's only 1 '+' operator.\n    return filename.endsWith(\".\" + ext);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6267e1ce56c2eec111425690cd04e251b6f14952","date":1275222352,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileNames#matchesExtension(String,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileNames#matchesExtension(String,String).mjava","sourceNew":"  /**\n   * Returns true if the given filename ends with the given extension. One\n   * should provide a <i>pure</i> extension, withouth '.'.\n   */\n  public static boolean matchesExtension(String filename, String ext) {\n    // It doesn't make a difference whether we allocate a StringBuilder ourself\n    // or not, since there's only 1 '+' operator.\n    return filename.endsWith(\".\" + ext);\n  }\n\n","sourceOld":"  /**\n   * Returns true if the given filename ends with the given extension. One\n   * should provide a <i>pure</i> extension, withouth '.'.\n   */\n  public static final boolean matchesExtension(String filename, String ext) {\n    // It doesn't make a difference whether we allocate a StringBuilder ourself\n    // or not, since there's only 1 '+' operator.\n    return filename.endsWith(\".\" + ext);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7235f072992928845d8cfd2dfc1c90362360e1e","date":1296426876,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileNames#matchesExtension(String,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileNames#matchesExtension(String,String).mjava","sourceNew":"  /**\n   * Returns true if the given filename ends with the given extension. One\n   * should provide a <i>pure</i> extension, without '.'.\n   */\n  public static boolean matchesExtension(String filename, String ext) {\n    // It doesn't make a difference whether we allocate a StringBuilder ourself\n    // or not, since there's only 1 '+' operator.\n    return filename.endsWith(\".\" + ext);\n  }\n\n","sourceOld":"  /**\n   * Returns true if the given filename ends with the given extension. One\n   * should provide a <i>pure</i> extension, withouth '.'.\n   */\n  public static boolean matchesExtension(String filename, String ext) {\n    // It doesn't make a difference whether we allocate a StringBuilder ourself\n    // or not, since there's only 1 '+' operator.\n    return filename.endsWith(\".\" + ext);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileNames#matchesExtension(String,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileNames#matchesExtension(String,String).mjava","sourceNew":"  /**\n   * Returns true if the given filename ends with the given extension. One\n   * should provide a <i>pure</i> extension, without '.'.\n   */\n  public static boolean matchesExtension(String filename, String ext) {\n    // It doesn't make a difference whether we allocate a StringBuilder ourself\n    // or not, since there's only 1 '+' operator.\n    return filename.endsWith(\".\" + ext);\n  }\n\n","sourceOld":"  /**\n   * Returns true if the given filename ends with the given extension. One\n   * should provide a <i>pure</i> extension, withouth '.'.\n   */\n  public static boolean matchesExtension(String filename, String ext) {\n    // It doesn't make a difference whether we allocate a StringBuilder ourself\n    // or not, since there's only 1 '+' operator.\n    return filename.endsWith(\".\" + ext);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexFileNames#matchesExtension(String,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileNames#matchesExtension(String,String).mjava","sourceNew":"  /**\n   * Returns true if the given filename ends with the given extension. One\n   * should provide a <i>pure</i> extension, without '.'.\n   */\n  public static boolean matchesExtension(String filename, String ext) {\n    // It doesn't make a difference whether we allocate a StringBuilder ourself\n    // or not, since there's only 1 '+' operator.\n    return filename.endsWith(\".\" + ext);\n  }\n\n","sourceOld":"  /**\n   * Returns true if the given filename ends with the given extension. One\n   * should provide a <i>pure</i> extension, withouth '.'.\n   */\n  public static boolean matchesExtension(String filename, String ext) {\n    // It doesn't make a difference whether we allocate a StringBuilder ourself\n    // or not, since there's only 1 '+' operator.\n    return filename.endsWith(\".\" + ext);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileNames#matchesExtension(String,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileNames#matchesExtension(String,String).mjava","sourceNew":"  /**\n   * Returns true if the given filename ends with the given extension. One\n   * should provide a <i>pure</i> extension, without '.'.\n   */\n  public static boolean matchesExtension(String filename, String ext) {\n    // It doesn't make a difference whether we allocate a StringBuilder ourself\n    // or not, since there's only 1 '+' operator.\n    return filename.endsWith(\".\" + ext);\n  }\n\n","sourceOld":"  /**\n   * Returns true if the given filename ends with the given extension. One\n   * should provide a <i>pure</i> extension, without '.'.\n   */\n  public static boolean matchesExtension(String filename, String ext) {\n    // It doesn't make a difference whether we allocate a StringBuilder ourself\n    // or not, since there's only 1 '+' operator.\n    return filename.endsWith(\".\" + ext);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6267e1ce56c2eec111425690cd04e251b6f14952":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c7235f072992928845d8cfd2dfc1c90362360e1e"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["6267e1ce56c2eec111425690cd04e251b6f14952","c7235f072992928845d8cfd2dfc1c90362360e1e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c7235f072992928845d8cfd2dfc1c90362360e1e":["6267e1ce56c2eec111425690cd04e251b6f14952"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["6267e1ce56c2eec111425690cd04e251b6f14952","c7235f072992928845d8cfd2dfc1c90362360e1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6267e1ce56c2eec111425690cd04e251b6f14952":["29ef99d61cda9641b6250bf9567329a6e65f901d","c7235f072992928845d8cfd2dfc1c90362360e1e","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c7235f072992928845d8cfd2dfc1c90362360e1e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["6267e1ce56c2eec111425690cd04e251b6f14952"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}