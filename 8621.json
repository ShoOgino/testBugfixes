{"path":"lucene/facet/src/test/org/apache/lucene/facet/index/OrdinalMappingReaderTest#buildIndexWithFacets(Directory,Directory,boolean).mjava","commits":[{"id":"f69a077aa0edfe2a493dbd264bccf9b44af3d17c","date":1356330270,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/OrdinalMappingReaderTest#buildIndexWithFacets(Directory,Directory,boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/FacetsPayloadProcessorProviderTest#buildIndexWithFacets(Directory,Directory,boolean).mjava","sourceNew":"  private void buildIndexWithFacets(Directory dir, Directory taxDir, boolean asc) throws IOException {\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    \n    DirectoryTaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxDir);\n    for (int i = 1; i <= NUM_DOCS; i++) {\n      Document doc = new Document();\n      List<CategoryPath> categoryPaths = new ArrayList<CategoryPath>(i + 1);\n      for (int j = i; j <= NUM_DOCS; j++) {\n        int facetValue = asc? j: NUM_DOCS - j;\n        categoryPaths.add(new CategoryPath(\"tag\", Integer.toString(facetValue)));\n      }\n      CategoryDocumentBuilder catBuilder = new CategoryDocumentBuilder(taxonomyWriter);\n      catBuilder.setCategoryPaths(categoryPaths);\n      catBuilder.build(doc);\n      writer.addDocument(doc);\n    }    \n    taxonomyWriter.close();\n    writer.close();\n  }  \n\n","sourceOld":"  private void buildIndexWithFacets(Directory dir, Directory taxDir, boolean asc) throws IOException {\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    \n    DirectoryTaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxDir);\n    for (int i = 1; i <= NUM_DOCS; i++) {\n      Document doc = new Document();\n      List<CategoryPath> categoryPaths = new ArrayList<CategoryPath>(i + 1);\n      for (int j = i; j <= NUM_DOCS; j++) {\n        int facetValue = asc? j: NUM_DOCS - j;\n        categoryPaths.add(new CategoryPath(\"tag\", Integer.toString(facetValue)));\n      }\n      CategoryDocumentBuilder catBuilder = new CategoryDocumentBuilder(taxonomyWriter);\n      catBuilder.setCategoryPaths(categoryPaths);\n      catBuilder.build(doc);\n      writer.addDocument(doc);\n    }    \n    taxonomyWriter.close();\n    writer.close();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a1037d9031f9702ee6912f8751ef1d5320da6d9","date":1357217787,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/OrdinalMappingReaderTest#buildIndexWithFacets(Directory,Directory,boolean).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/OrdinalMappingReaderTest#buildIndexWithFacets(Directory,Directory,boolean).mjava","sourceNew":"  private void buildIndexWithFacets(Directory dir, Directory taxDir, boolean asc) throws IOException {\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    \n    DirectoryTaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxDir);\n    for (int i = 1; i <= NUM_DOCS; i++) {\n      Document doc = new Document();\n      List<CategoryPath> categoryPaths = new ArrayList<CategoryPath>(i + 1);\n      for (int j = i; j <= NUM_DOCS; j++) {\n        int facetValue = asc? j: NUM_DOCS - j;\n        categoryPaths.add(new CategoryPath(\"tag\", Integer.toString(facetValue)));\n      }\n      FacetFields facetFields = new FacetFields(taxonomyWriter);\n      facetFields.addFields(doc, categoryPaths);\n      writer.addDocument(doc);\n    }    \n    taxonomyWriter.close();\n    writer.close();\n  }  \n\n","sourceOld":"  private void buildIndexWithFacets(Directory dir, Directory taxDir, boolean asc) throws IOException {\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    \n    DirectoryTaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxDir);\n    for (int i = 1; i <= NUM_DOCS; i++) {\n      Document doc = new Document();\n      List<CategoryPath> categoryPaths = new ArrayList<CategoryPath>(i + 1);\n      for (int j = i; j <= NUM_DOCS; j++) {\n        int facetValue = asc? j: NUM_DOCS - j;\n        categoryPaths.add(new CategoryPath(\"tag\", Integer.toString(facetValue)));\n      }\n      CategoryDocumentBuilder catBuilder = new CategoryDocumentBuilder(taxonomyWriter);\n      catBuilder.setCategoryPaths(categoryPaths);\n      catBuilder.build(doc);\n      writer.addDocument(doc);\n    }    \n    taxonomyWriter.close();\n    writer.close();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/OrdinalMappingReaderTest#buildIndexWithFacets(Directory,Directory,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void buildIndexWithFacets(Directory dir, Directory taxDir, boolean asc) throws IOException {\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    \n    DirectoryTaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxDir);\n    for (int i = 1; i <= NUM_DOCS; i++) {\n      Document doc = new Document();\n      List<CategoryPath> categoryPaths = new ArrayList<CategoryPath>(i + 1);\n      for (int j = i; j <= NUM_DOCS; j++) {\n        int facetValue = asc? j: NUM_DOCS - j;\n        categoryPaths.add(new CategoryPath(\"tag\", Integer.toString(facetValue)));\n      }\n      FacetFields facetFields = new FacetFields(taxonomyWriter);\n      facetFields.addFields(doc, categoryPaths);\n      writer.addDocument(doc);\n    }    \n    taxonomyWriter.close();\n    writer.close();\n  }  \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90213788e5007cc5e2b3d88200a8265de9d4e6d4","date":1359060940,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/OrdinalMappingReaderTest#buildIndexWithFacets(Directory,Directory,boolean,FacetIndexingParams).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/OrdinalMappingReaderTest#buildIndexWithFacets(Directory,Directory,boolean).mjava","sourceNew":"  private void buildIndexWithFacets(Directory dir, Directory taxDir, boolean asc, FacetIndexingParams fip) throws IOException {\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    \n    DirectoryTaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxDir);\n    for (int i = 1; i <= NUM_DOCS; i++) {\n      Document doc = new Document();\n      List<CategoryPath> categoryPaths = new ArrayList<CategoryPath>(i + 1);\n      for (int j = i; j <= NUM_DOCS; j++) {\n        int facetValue = asc? j: NUM_DOCS - j;\n        categoryPaths.add(new CategoryPath(\"tag\", Integer.toString(facetValue)));\n      }\n      FacetFields facetFields = new FacetFields(taxonomyWriter, fip);\n      facetFields.addFields(doc, categoryPaths);\n      writer.addDocument(doc);\n    }    \n    taxonomyWriter.close();\n    writer.close();\n  }  \n\n","sourceOld":"  private void buildIndexWithFacets(Directory dir, Directory taxDir, boolean asc) throws IOException {\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    \n    DirectoryTaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxDir);\n    for (int i = 1; i <= NUM_DOCS; i++) {\n      Document doc = new Document();\n      List<CategoryPath> categoryPaths = new ArrayList<CategoryPath>(i + 1);\n      for (int j = i; j <= NUM_DOCS; j++) {\n        int facetValue = asc? j: NUM_DOCS - j;\n        categoryPaths.add(new CategoryPath(\"tag\", Integer.toString(facetValue)));\n      }\n      FacetFields facetFields = new FacetFields(taxonomyWriter);\n      facetFields.addFields(doc, categoryPaths);\n      writer.addDocument(doc);\n    }    \n    taxonomyWriter.close();\n    writer.close();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd45d4a2ee01a1932d33eec42f5272c2402da679","date":1359316912,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/OrdinalMappingReaderTest#buildIndexWithFacets(Directory,Directory,boolean,FacetIndexingParams).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/OrdinalMappingReaderTest#buildIndexWithFacets(Directory,Directory,boolean).mjava","sourceNew":"  private void buildIndexWithFacets(Directory dir, Directory taxDir, boolean asc, FacetIndexingParams fip) throws IOException {\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    \n    DirectoryTaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxDir);\n    for (int i = 1; i <= NUM_DOCS; i++) {\n      Document doc = new Document();\n      List<CategoryPath> categoryPaths = new ArrayList<CategoryPath>(i + 1);\n      for (int j = i; j <= NUM_DOCS; j++) {\n        int facetValue = asc? j: NUM_DOCS - j;\n        categoryPaths.add(new CategoryPath(\"tag\", Integer.toString(facetValue)));\n      }\n      FacetFields facetFields = new FacetFields(taxonomyWriter, fip);\n      facetFields.addFields(doc, categoryPaths);\n      writer.addDocument(doc);\n    }    \n    taxonomyWriter.close();\n    writer.close();\n  }  \n\n","sourceOld":"  private void buildIndexWithFacets(Directory dir, Directory taxDir, boolean asc) throws IOException {\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    \n    DirectoryTaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxDir);\n    for (int i = 1; i <= NUM_DOCS; i++) {\n      Document doc = new Document();\n      List<CategoryPath> categoryPaths = new ArrayList<CategoryPath>(i + 1);\n      for (int j = i; j <= NUM_DOCS; j++) {\n        int facetValue = asc? j: NUM_DOCS - j;\n        categoryPaths.add(new CategoryPath(\"tag\", Integer.toString(facetValue)));\n      }\n      FacetFields facetFields = new FacetFields(taxonomyWriter);\n      facetFields.addFields(doc, categoryPaths);\n      writer.addDocument(doc);\n    }    \n    taxonomyWriter.close();\n    writer.close();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"90213788e5007cc5e2b3d88200a8265de9d4e6d4":["7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["f69a077aa0edfe2a493dbd264bccf9b44af3d17c"],"f69a077aa0edfe2a493dbd264bccf9b44af3d17c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd45d4a2ee01a1932d33eec42f5272c2402da679":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","90213788e5007cc5e2b3d88200a8265de9d4e6d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90213788e5007cc5e2b3d88200a8265de9d4e6d4"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["dd45d4a2ee01a1932d33eec42f5272c2402da679"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","90213788e5007cc5e2b3d88200a8265de9d4e6d4"],"90213788e5007cc5e2b3d88200a8265de9d4e6d4":["dd45d4a2ee01a1932d33eec42f5272c2402da679","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f69a077aa0edfe2a493dbd264bccf9b44af3d17c":["7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","f69a077aa0edfe2a493dbd264bccf9b44af3d17c"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dd45d4a2ee01a1932d33eec42f5272c2402da679","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}