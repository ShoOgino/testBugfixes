{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionApiMapping.Meta#getParamSubstitute(String).mjava","commits":[{"id":"2d21112928e2aedcec0c17025bc0e91f8fcfcf30","date":1494423367,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionApiMapping.Meta#getParamSubstitute(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionHandlerApi.Cmd#getParamSubstitute(String).mjava","sourceNew":"    @Override\n    public String getParamSubstitute(String param) {\n      String s = paramstoAttr.containsKey(param) ? paramstoAttr.get(param) : param;\n      if (prefixSubstitutes != null) {\n        for (Map.Entry<String, String> e : prefixSubstitutes.entrySet()) {\n          if (s.startsWith(e.getValue())) return s.replace(e.getValue(), e.getKey());\n        }\n      }\n      return s;\n    }\n\n","sourceOld":"    @Override\n    public String getParamSubstitute(String param) {\n      String s = paramstoAttr.containsKey(param) ? paramstoAttr.get(param) : param;\n      if (prefixSubstitutes != null) {\n        for (Map.Entry<String, String> e : prefixSubstitutes.entrySet()) {\n          if (s.startsWith(e.getValue())) return s.replace(e.getValue(), e.getKey());\n        }\n      }\n      return s;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionApiMapping.Meta#getParamSubstitute(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionHandlerApi.Cmd#getParamSubstitute(String).mjava","sourceNew":"    @Override\n    public String getParamSubstitute(String param) {\n      String s = paramstoAttr.containsKey(param) ? paramstoAttr.get(param) : param;\n      if (prefixSubstitutes != null) {\n        for (Map.Entry<String, String> e : prefixSubstitutes.entrySet()) {\n          if (s.startsWith(e.getValue())) return s.replace(e.getValue(), e.getKey());\n        }\n      }\n      return s;\n    }\n\n","sourceOld":"    @Override\n    public String getParamSubstitute(String param) {\n      String s = paramstoAttr.containsKey(param) ? paramstoAttr.get(param) : param;\n      if (prefixSubstitutes != null) {\n        for (Map.Entry<String, String> e : prefixSubstitutes.entrySet()) {\n          if (s.startsWith(e.getValue())) return s.replace(e.getValue(), e.getKey());\n        }\n      }\n      return s;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"26de7f978abe868807e55377d3e5837c0a7883d3","date":1516908224,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionApiMapping.Meta#getParamSubstitute(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionApiMapping.Meta#getParamSubstitute(String).mjava","sourceNew":"    // returns params (v1) from an underlying v2, with param (v1) input\n    @Override\n    public String getParamSubstitute(String param) {//input is v1\n      for (Map.Entry<String, String> e : prefixParamsToAttrs.entrySet()) {\n        final String prefixV1 = e.getKey();\n        final String prefixV2 = e.getValue();\n        if (param.startsWith(prefixV1)) {\n          return prefixV2 + param.substring(prefixV1.length()); // replace\n        }\n      }\n      return paramsToAttrs.getOrDefault(param, param);\n    }\n\n","sourceOld":"    @Override\n    public String getParamSubstitute(String param) {\n      String s = paramstoAttr.containsKey(param) ? paramstoAttr.get(param) : param;\n      if (prefixSubstitutes != null) {\n        for (Map.Entry<String, String> e : prefixSubstitutes.entrySet()) {\n          if (s.startsWith(e.getValue())) return s.replace(e.getValue(), e.getKey());\n        }\n      }\n      return s;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2d21112928e2aedcec0c17025bc0e91f8fcfcf30":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2d21112928e2aedcec0c17025bc0e91f8fcfcf30"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"26de7f978abe868807e55377d3e5837c0a7883d3":["2d21112928e2aedcec0c17025bc0e91f8fcfcf30"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["26de7f978abe868807e55377d3e5837c0a7883d3"]},"commit2Childs":{"2d21112928e2aedcec0c17025bc0e91f8fcfcf30":["e9017cf144952056066919f1ebc7897ff9bd71b1","26de7f978abe868807e55377d3e5837c0a7883d3"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2d21112928e2aedcec0c17025bc0e91f8fcfcf30","e9017cf144952056066919f1ebc7897ff9bd71b1"],"26de7f978abe868807e55377d3e5837c0a7883d3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}