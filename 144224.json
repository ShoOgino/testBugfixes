{"path":"backwards/src/java/org/apache/lucene/index/FieldsReader.LazyField#stringValue().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/index/FieldsReader.LazyField#stringValue().mjava","pathOld":"/dev/null","sourceNew":"    /** The value of the field as a String, or null.  If null, the Reader value,\n     * binary value, or TokenStream value is used.  Exactly one of stringValue(), \n     * readerValue(), getBinaryValue(), and tokenStreamValue() must be set. */\n    public String stringValue() {\n      ensureOpen();\n      if (isBinary)\n        return null;\n      else {\n        if (fieldsData == null) {\n          IndexInput localFieldsStream = getFieldStream();\n          try {\n            localFieldsStream.seek(pointer);\n            if (isCompressed) {\n              final byte[] b = new byte[toRead];\n              localFieldsStream.readBytes(b, 0, b.length);\n              fieldsData = new String(uncompress(b), \"UTF-8\");\n            } else {\n              if (format >= FieldsWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES) {\n                byte[] bytes = new byte[toRead];\n                localFieldsStream.readBytes(bytes, 0, toRead);\n                fieldsData = new String(bytes, \"UTF-8\");\n              } else {\n                //read in chars b/c we already know the length we need to read\n                char[] chars = new char[toRead];\n                localFieldsStream.readChars(chars, 0, toRead);\n                fieldsData = new String(chars);\n              }\n            }\n          } catch (IOException e) {\n            throw new FieldReaderException(e);\n          }\n        }\n        return (String) fieldsData;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/FieldsReader.LazyField#stringValue().mjava","pathOld":"backwards/src/java/org/apache/lucene/index/FieldsReader.LazyField#stringValue().mjava","sourceNew":"    /** The value of the field as a String, or null.  If null, the Reader value,\n     * binary value, or TokenStream value is used.  Exactly one of stringValue(), \n     * readerValue(), getBinaryValue(), and tokenStreamValue() must be set. */\n    public String stringValue() {\n      ensureOpen();\n      if (isBinary)\n        return null;\n      else {\n        if (fieldsData == null) {\n          IndexInput localFieldsStream = getFieldStream();\n          try {\n            localFieldsStream.seek(pointer);\n            if (isCompressed) {\n              final byte[] b = new byte[toRead];\n              localFieldsStream.readBytes(b, 0, b.length);\n              fieldsData = new String(uncompress(b), \"UTF-8\");\n            } else {\n              if (format >= FieldsWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES) {\n                byte[] bytes = new byte[toRead];\n                localFieldsStream.readBytes(bytes, 0, toRead);\n                fieldsData = new String(bytes, \"UTF-8\");\n              } else {\n                //read in chars b/c we already know the length we need to read\n                char[] chars = new char[toRead];\n                localFieldsStream.readChars(chars, 0, toRead);\n                fieldsData = new String(chars);\n              }\n            }\n          } catch (IOException e) {\n            throw new FieldReaderException(e);\n          }\n        }\n        return (String) fieldsData;\n      }\n    }\n\n","sourceOld":"    /** The value of the field as a String, or null.  If null, the Reader value,\n     * binary value, or TokenStream value is used.  Exactly one of stringValue(), \n     * readerValue(), getBinaryValue(), and tokenStreamValue() must be set. */\n    public String stringValue() {\n      ensureOpen();\n      if (isBinary)\n        return null;\n      else {\n        if (fieldsData == null) {\n          IndexInput localFieldsStream = getFieldStream();\n          try {\n            localFieldsStream.seek(pointer);\n            if (isCompressed) {\n              final byte[] b = new byte[toRead];\n              localFieldsStream.readBytes(b, 0, b.length);\n              fieldsData = new String(uncompress(b), \"UTF-8\");\n            } else {\n              if (format >= FieldsWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES) {\n                byte[] bytes = new byte[toRead];\n                localFieldsStream.readBytes(bytes, 0, toRead);\n                fieldsData = new String(bytes, \"UTF-8\");\n              } else {\n                //read in chars b/c we already know the length we need to read\n                char[] chars = new char[toRead];\n                localFieldsStream.readChars(chars, 0, toRead);\n                fieldsData = new String(chars);\n              }\n            }\n          } catch (IOException e) {\n            throw new FieldReaderException(e);\n          }\n        }\n        return (String) fieldsData;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}