{"path":"solr/core/src/java/org/apache/solr/response/SortingResponseWriter.PriorityQueue#PriorityQueue(int,boolean).mjava","commits":[{"id":"901b27c7f633ab98e138aafb0b9c3ba22aac6b28","date":1408052893,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/SortingResponseWriter.PriorityQueue#PriorityQueue(int,boolean).mjava","pathOld":"/dev/null","sourceNew":"    public PriorityQueue(int maxSize, boolean prepopulate) {\n      final int heapSize;\n      if (0 == maxSize) {\n        // We allocate 1 extra to avoid if statement in top()\n        heapSize = 2;\n      } else {\n        if (maxSize > ArrayUtil.MAX_ARRAY_LENGTH) {\n          // Don't wrap heapSize to -1, in this case, which\n          // causes a confusing NegativeArraySizeException.\n          // Note that very likely this will simply then hit\n          // an OOME, but at least that's more indicative to\n          // caller that this values is too big.  We don't +1\n          // in this case, but it's very unlikely in practice\n          // one will actually insert this many objects into\n          // the PQ:\n          // Throw exception to prevent confusing OOME:\n          throw new IllegalArgumentException(\"maxSize must be <= \" + ArrayUtil.MAX_ARRAY_LENGTH + \"; got: \" + maxSize);\n        } else {\n          // NOTE: we add +1 because all access to heap is\n          // 1-based not 0-based.  heap[0] is unused.\n          heapSize = maxSize + 1;\n        }\n      }\n      // T is unbounded type, so this unchecked cast works always:\n      @SuppressWarnings(\"unchecked\") final T[] h = (T[]) new Object[heapSize];\n      this.heap = h;\n      this.maxSize = maxSize;\n\n      if (prepopulate) {\n        // If sentinel objects are supported, populate the queue with them\n        T sentinel = getSentinelObject();\n        if (sentinel != null) {\n          heap[1] = sentinel;\n          for (int i = 2; i < heap.length; i++) {\n            heap[i] = getSentinelObject();\n          }\n          size = maxSize;\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50f05d6b69cfaabd51b5d26cba4e3122f51fff83","date":1478603228,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SortingResponseWriter[ExportWriter].PriorityQueue#PriorityQueue(int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/SortingResponseWriter.PriorityQueue#PriorityQueue(int,boolean).mjava","sourceNew":"    public PriorityQueue(int maxSize, boolean prepopulate) {\n      final int heapSize;\n      if (0 == maxSize) {\n        // We allocate 1 extra to avoid if statement in top()\n        heapSize = 2;\n      } else {\n        if (maxSize > ArrayUtil.MAX_ARRAY_LENGTH) {\n          // Don't wrap heapSize to -1, in this case, which\n          // causes a confusing NegativeArraySizeException.\n          // Note that very likely this will simply then hit\n          // an OOME, but at least that's more indicative to\n          // caller that this values is too big.  We don't +1\n          // in this case, but it's very unlikely in practice\n          // one will actually insert this many objects into\n          // the PQ:\n          // Throw exception to prevent confusing OOME:\n          throw new IllegalArgumentException(\"maxSize must be <= \" + ArrayUtil.MAX_ARRAY_LENGTH + \"; got: \" + maxSize);\n        } else {\n          // NOTE: we add +1 because all access to heap is\n          // 1-based not 0-based.  heap[0] is unused.\n          heapSize = maxSize + 1;\n        }\n      }\n      // T is unbounded type, so this unchecked cast works always:\n      @SuppressWarnings(\"unchecked\") final T[] h = (T[]) new Object[heapSize];\n      this.heap = h;\n      this.maxSize = maxSize;\n\n      if (prepopulate) {\n        // If sentinel objects are supported, populate the queue with them\n        T sentinel = getSentinelObject();\n        if (sentinel != null) {\n          heap[1] = sentinel;\n          for (int i = 2; i < heap.length; i++) {\n            heap[i] = getSentinelObject();\n          }\n          size = maxSize;\n        }\n      }\n    }\n\n","sourceOld":"    public PriorityQueue(int maxSize, boolean prepopulate) {\n      final int heapSize;\n      if (0 == maxSize) {\n        // We allocate 1 extra to avoid if statement in top()\n        heapSize = 2;\n      } else {\n        if (maxSize > ArrayUtil.MAX_ARRAY_LENGTH) {\n          // Don't wrap heapSize to -1, in this case, which\n          // causes a confusing NegativeArraySizeException.\n          // Note that very likely this will simply then hit\n          // an OOME, but at least that's more indicative to\n          // caller that this values is too big.  We don't +1\n          // in this case, but it's very unlikely in practice\n          // one will actually insert this many objects into\n          // the PQ:\n          // Throw exception to prevent confusing OOME:\n          throw new IllegalArgumentException(\"maxSize must be <= \" + ArrayUtil.MAX_ARRAY_LENGTH + \"; got: \" + maxSize);\n        } else {\n          // NOTE: we add +1 because all access to heap is\n          // 1-based not 0-based.  heap[0] is unused.\n          heapSize = maxSize + 1;\n        }\n      }\n      // T is unbounded type, so this unchecked cast works always:\n      @SuppressWarnings(\"unchecked\") final T[] h = (T[]) new Object[heapSize];\n      this.heap = h;\n      this.maxSize = maxSize;\n\n      if (prepopulate) {\n        // If sentinel objects are supported, populate the queue with them\n        T sentinel = getSentinelObject();\n        if (sentinel != null) {\n          heap[1] = sentinel;\n          for (int i = 2; i < heap.length; i++) {\n            heap[i] = getSentinelObject();\n          }\n          size = maxSize;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ExportWriter.PriorityQueue#PriorityQueue(int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/SortingResponseWriter.PriorityQueue#PriorityQueue(int,boolean).mjava","sourceNew":"    public PriorityQueue(int maxSize, boolean prepopulate) {\n      final int heapSize;\n      if (0 == maxSize) {\n        // We allocate 1 extra to avoid if statement in top()\n        heapSize = 2;\n      } else {\n        if (maxSize > ArrayUtil.MAX_ARRAY_LENGTH) {\n          // Don't wrap heapSize to -1, in this case, which\n          // causes a confusing NegativeArraySizeException.\n          // Note that very likely this will simply then hit\n          // an OOME, but at least that's more indicative to\n          // caller that this values is too big.  We don't +1\n          // in this case, but it's very unlikely in practice\n          // one will actually insert this many objects into\n          // the PQ:\n          // Throw exception to prevent confusing OOME:\n          throw new IllegalArgumentException(\"maxSize must be <= \" + ArrayUtil.MAX_ARRAY_LENGTH + \"; got: \" + maxSize);\n        } else {\n          // NOTE: we add +1 because all access to heap is\n          // 1-based not 0-based.  heap[0] is unused.\n          heapSize = maxSize + 1;\n        }\n      }\n      // T is unbounded type, so this unchecked cast works always:\n      @SuppressWarnings(\"unchecked\") final T[] h = (T[]) new Object[heapSize];\n      this.heap = h;\n      this.maxSize = maxSize;\n\n      if (prepopulate) {\n        // If sentinel objects are supported, populate the queue with them\n        T sentinel = getSentinelObject();\n        if (sentinel != null) {\n          heap[1] = sentinel;\n          for (int i = 2; i < heap.length; i++) {\n            heap[i] = getSentinelObject();\n          }\n          size = maxSize;\n        }\n      }\n    }\n\n","sourceOld":"    public PriorityQueue(int maxSize, boolean prepopulate) {\n      final int heapSize;\n      if (0 == maxSize) {\n        // We allocate 1 extra to avoid if statement in top()\n        heapSize = 2;\n      } else {\n        if (maxSize > ArrayUtil.MAX_ARRAY_LENGTH) {\n          // Don't wrap heapSize to -1, in this case, which\n          // causes a confusing NegativeArraySizeException.\n          // Note that very likely this will simply then hit\n          // an OOME, but at least that's more indicative to\n          // caller that this values is too big.  We don't +1\n          // in this case, but it's very unlikely in practice\n          // one will actually insert this many objects into\n          // the PQ:\n          // Throw exception to prevent confusing OOME:\n          throw new IllegalArgumentException(\"maxSize must be <= \" + ArrayUtil.MAX_ARRAY_LENGTH + \"; got: \" + maxSize);\n        } else {\n          // NOTE: we add +1 because all access to heap is\n          // 1-based not 0-based.  heap[0] is unused.\n          heapSize = maxSize + 1;\n        }\n      }\n      // T is unbounded type, so this unchecked cast works always:\n      @SuppressWarnings(\"unchecked\") final T[] h = (T[]) new Object[heapSize];\n      this.heap = h;\n      this.maxSize = maxSize;\n\n      if (prepopulate) {\n        // If sentinel objects are supported, populate the queue with them\n        T sentinel = getSentinelObject();\n        if (sentinel != null) {\n          heap[1] = sentinel;\n          for (int i = 2; i < heap.length; i++) {\n            heap[i] = getSentinelObject();\n          }\n          size = maxSize;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"50f05d6b69cfaabd51b5d26cba4e3122f51fff83":["901b27c7f633ab98e138aafb0b9c3ba22aac6b28"],"901b27c7f633ab98e138aafb0b9c3ba22aac6b28":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["901b27c7f633ab98e138aafb0b9c3ba22aac6b28","50f05d6b69cfaabd51b5d26cba4e3122f51fff83"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["50f05d6b69cfaabd51b5d26cba4e3122f51fff83"]},"commit2Childs":{"50f05d6b69cfaabd51b5d26cba4e3122f51fff83":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"901b27c7f633ab98e138aafb0b9c3ba22aac6b28":["50f05d6b69cfaabd51b5d26cba4e3122f51fff83","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["901b27c7f633ab98e138aafb0b9c3ba22aac6b28"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}