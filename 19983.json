{"path":"src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactory().mjava","commits":[{"id":"f118a5ec962b5e2658d313e6f4e6f28faa3bcb39","date":1161023282,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactory().mjava","pathOld":"/dev/null","sourceNew":"    // Verify: NativeFSLockFactory works correctly\n    public void testNativeFSLockFactory() throws IOException {\n\n      // Make sure we get identical instances:\n      NativeFSLockFactory f = NativeFSLockFactory.getLockFactory();\n      NativeFSLockFactory f2 = NativeFSLockFactory.getLockFactory();\n      assertTrue(\"got different NativeFSLockFactory instances for same directory\",\n                 f == f2);\n\n      // Make sure we get identical locks:\n      f.setLockPrefix(\"test\");\n      Lock l = f.makeLock(\"commit\");\n      Lock l2 = f.makeLock(\"commit\");\n      assertTrue(\"got different Lock instances for same lock name\",\n                 l == l2);\n\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      assertTrue(\"succeeded in obtaining lock twice\", !l.obtain());\n      l.release();\n\n      // Make sure we can obtain it again:\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      l.release();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0fcdcf196523675146a4df3193e91413533857ab"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"282779d3160a8f7f09d2a07b06add736f93ac50b","date":1161291802,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactory().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactory().mjava","sourceNew":"    // Verify: NativeFSLockFactory works correctly\n    public void testNativeFSLockFactory() throws IOException {\n\n      NativeFSLockFactory f = new NativeFSLockFactory();\n\n      NativeFSLockFactory f2 = new NativeFSLockFactory();\n\n      f.setLockPrefix(\"test\");\n      Lock l = f.makeLock(\"commit\");\n      Lock l2 = f.makeLock(\"commit\");\n\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      assertTrue(\"succeeded in obtaining lock twice\", !l2.obtain());\n      l.release();\n\n      assertTrue(\"failed to obtain 2nd lock after first one was freed\", l2.obtain());\n      l2.release();\n\n      // Make sure we can obtain first one again:\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      l.release();\n    }\n\n","sourceOld":"    // Verify: NativeFSLockFactory works correctly\n    public void testNativeFSLockFactory() throws IOException {\n\n      // Make sure we get identical instances:\n      NativeFSLockFactory f = NativeFSLockFactory.getLockFactory();\n      NativeFSLockFactory f2 = NativeFSLockFactory.getLockFactory();\n      assertTrue(\"got different NativeFSLockFactory instances for same directory\",\n                 f == f2);\n\n      // Make sure we get identical locks:\n      f.setLockPrefix(\"test\");\n      Lock l = f.makeLock(\"commit\");\n      Lock l2 = f.makeLock(\"commit\");\n      assertTrue(\"got different Lock instances for same lock name\",\n                 l == l2);\n\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      assertTrue(\"succeeded in obtaining lock twice\", !l.obtain());\n      l.release();\n\n      // Make sure we can obtain it again:\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      l.release();\n    }\n\n","bugFix":null,"bugIntro":["245fee3e499fae1fc0c33a80a6dd979f9c5f49e2","f18c35aec8cd0e819e1904c0147e05f7aea15bc4","0fcdcf196523675146a4df3193e91413533857ab"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93a838d8ba57e85e9db126e862958dafc7da4d5b","date":1168639785,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactory().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactory().mjava","sourceNew":"    // Verify: NativeFSLockFactory works correctly\n    public void testNativeFSLockFactory() throws IOException {\n\n      NativeFSLockFactory f = new NativeFSLockFactory(System.getProperty(\"tempDir\"));\n\n      NativeFSLockFactory f2 = new NativeFSLockFactory(System.getProperty(\"tempDir\"));\n\n      f.setLockPrefix(\"test\");\n      Lock l = f.makeLock(\"commit\");\n      Lock l2 = f.makeLock(\"commit\");\n\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      assertTrue(\"succeeded in obtaining lock twice\", !l2.obtain());\n      l.release();\n\n      assertTrue(\"failed to obtain 2nd lock after first one was freed\", l2.obtain());\n      l2.release();\n\n      // Make sure we can obtain first one again:\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      l.release();\n    }\n\n","sourceOld":"    // Verify: NativeFSLockFactory works correctly\n    public void testNativeFSLockFactory() throws IOException {\n\n      NativeFSLockFactory f = new NativeFSLockFactory();\n\n      NativeFSLockFactory f2 = new NativeFSLockFactory();\n\n      f.setLockPrefix(\"test\");\n      Lock l = f.makeLock(\"commit\");\n      Lock l2 = f.makeLock(\"commit\");\n\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      assertTrue(\"succeeded in obtaining lock twice\", !l2.obtain());\n      l.release();\n\n      assertTrue(\"failed to obtain 2nd lock after first one was freed\", l2.obtain());\n      l2.release();\n\n      // Make sure we can obtain first one again:\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      l.release();\n    }\n\n","bugFix":null,"bugIntro":["f18c35aec8cd0e819e1904c0147e05f7aea15bc4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f18c35aec8cd0e819e1904c0147e05f7aea15bc4","date":1227961014,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactory().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactory().mjava","sourceNew":"    // Verify: NativeFSLockFactory works correctly\n    public void testNativeFSLockFactory() throws IOException {\n\n      NativeFSLockFactory f = new NativeFSLockFactory(System.getProperty(\"tempDir\"));\n\n      f.setLockPrefix(\"test\");\n      Lock l = f.makeLock(\"commit\");\n      Lock l2 = f.makeLock(\"commit\");\n\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      assertTrue(\"succeeded in obtaining lock twice\", !l2.obtain());\n      l.release();\n\n      assertTrue(\"failed to obtain 2nd lock after first one was freed\", l2.obtain());\n      l2.release();\n\n      // Make sure we can obtain first one again:\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      l.release();\n    }\n\n","sourceOld":"    // Verify: NativeFSLockFactory works correctly\n    public void testNativeFSLockFactory() throws IOException {\n\n      NativeFSLockFactory f = new NativeFSLockFactory(System.getProperty(\"tempDir\"));\n\n      NativeFSLockFactory f2 = new NativeFSLockFactory(System.getProperty(\"tempDir\"));\n\n      f.setLockPrefix(\"test\");\n      Lock l = f.makeLock(\"commit\");\n      Lock l2 = f.makeLock(\"commit\");\n\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      assertTrue(\"succeeded in obtaining lock twice\", !l2.obtain());\n      l.release();\n\n      assertTrue(\"failed to obtain 2nd lock after first one was freed\", l2.obtain());\n      l2.release();\n\n      // Make sure we can obtain first one again:\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      l.release();\n    }\n\n","bugFix":["282779d3160a8f7f09d2a07b06add736f93ac50b","93a838d8ba57e85e9db126e862958dafc7da4d5b"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"245fee3e499fae1fc0c33a80a6dd979f9c5f49e2","date":1252016251,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactory().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactory().mjava","sourceNew":"    // Verify: NativeFSLockFactory works correctly\n    public void testNativeFSLockFactory() throws IOException {\n\n      NativeFSLockFactory f = new NativeFSLockFactory(System.getProperty(\"tempDir\"));\n\n      f.setLockPrefix(\"test\");\n      Lock l = f.makeLock(\"commit\");\n      Lock l2 = f.makeLock(\"commit\");\n\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      assertTrue(\"succeeded in obtaining lock twice\", !l2.obtain());\n      l.release();\n\n      assertTrue(\"failed to obtain 2nd lock after first one was freed\", l2.obtain());\n      l2.release();\n\n      // Make sure we can obtain first one again, test isLocked():\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      assertTrue(l.isLocked());\n      assertTrue(l2.isLocked());\n      l.release();\n      assertFalse(l.isLocked());\n      assertFalse(l2.isLocked());\n    }\n\n","sourceOld":"    // Verify: NativeFSLockFactory works correctly\n    public void testNativeFSLockFactory() throws IOException {\n\n      NativeFSLockFactory f = new NativeFSLockFactory(System.getProperty(\"tempDir\"));\n\n      f.setLockPrefix(\"test\");\n      Lock l = f.makeLock(\"commit\");\n      Lock l2 = f.makeLock(\"commit\");\n\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      assertTrue(\"succeeded in obtaining lock twice\", !l2.obtain());\n      l.release();\n\n      assertTrue(\"failed to obtain 2nd lock after first one was freed\", l2.obtain());\n      l2.release();\n\n      // Make sure we can obtain first one again:\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      l.release();\n    }\n\n","bugFix":["282779d3160a8f7f09d2a07b06add736f93ac50b"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d16275d75dfe0b780ed62df4c811d083187c71a","date":1268583591,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactory().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactory().mjava","sourceNew":"    // Verify: NativeFSLockFactory works correctly\n    public void testNativeFSLockFactory() throws IOException {\n\n      NativeFSLockFactory f = new NativeFSLockFactory(TEMP_DIR);\n\n      f.setLockPrefix(\"test\");\n      Lock l = f.makeLock(\"commit\");\n      Lock l2 = f.makeLock(\"commit\");\n\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      assertTrue(\"succeeded in obtaining lock twice\", !l2.obtain());\n      l.release();\n\n      assertTrue(\"failed to obtain 2nd lock after first one was freed\", l2.obtain());\n      l2.release();\n\n      // Make sure we can obtain first one again, test isLocked():\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      assertTrue(l.isLocked());\n      assertTrue(l2.isLocked());\n      l.release();\n      assertFalse(l.isLocked());\n      assertFalse(l2.isLocked());\n    }\n\n","sourceOld":"    // Verify: NativeFSLockFactory works correctly\n    public void testNativeFSLockFactory() throws IOException {\n\n      NativeFSLockFactory f = new NativeFSLockFactory(System.getProperty(\"tempDir\"));\n\n      f.setLockPrefix(\"test\");\n      Lock l = f.makeLock(\"commit\");\n      Lock l2 = f.makeLock(\"commit\");\n\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      assertTrue(\"succeeded in obtaining lock twice\", !l2.obtain());\n      l.release();\n\n      assertTrue(\"failed to obtain 2nd lock after first one was freed\", l2.obtain());\n      l2.release();\n\n      // Make sure we can obtain first one again, test isLocked():\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      assertTrue(l.isLocked());\n      assertTrue(l2.isLocked());\n      l.release();\n      assertFalse(l.isLocked());\n      assertFalse(l2.isLocked());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactory().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactory().mjava","sourceNew":"    // Verify: NativeFSLockFactory works correctly\n    public void testNativeFSLockFactory() throws IOException {\n\n      NativeFSLockFactory f = new NativeFSLockFactory(TEMP_DIR);\n\n      f.setLockPrefix(\"test\");\n      Lock l = f.makeLock(\"commit\");\n      Lock l2 = f.makeLock(\"commit\");\n\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      assertTrue(\"succeeded in obtaining lock twice\", !l2.obtain());\n      l.release();\n\n      assertTrue(\"failed to obtain 2nd lock after first one was freed\", l2.obtain());\n      l2.release();\n\n      // Make sure we can obtain first one again, test isLocked():\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      assertTrue(l.isLocked());\n      assertTrue(l2.isLocked());\n      l.release();\n      assertFalse(l.isLocked());\n      assertFalse(l2.isLocked());\n    }\n\n","sourceOld":"    // Verify: NativeFSLockFactory works correctly\n    public void testNativeFSLockFactory() throws IOException {\n\n      NativeFSLockFactory f = new NativeFSLockFactory(TEMP_DIR);\n\n      f.setLockPrefix(\"test\");\n      Lock l = f.makeLock(\"commit\");\n      Lock l2 = f.makeLock(\"commit\");\n\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      assertTrue(\"succeeded in obtaining lock twice\", !l2.obtain());\n      l.release();\n\n      assertTrue(\"failed to obtain 2nd lock after first one was freed\", l2.obtain());\n      l2.release();\n\n      // Make sure we can obtain first one again, test isLocked():\n      assertTrue(\"failed to obtain lock\", l.obtain());\n      assertTrue(l.isLocked());\n      assertTrue(l2.isLocked());\n      l.release();\n      assertFalse(l.isLocked());\n      assertFalse(l2.isLocked());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"245fee3e499fae1fc0c33a80a6dd979f9c5f49e2":["f18c35aec8cd0e819e1904c0147e05f7aea15bc4"],"93a838d8ba57e85e9db126e862958dafc7da4d5b":["282779d3160a8f7f09d2a07b06add736f93ac50b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f118a5ec962b5e2658d313e6f4e6f28faa3bcb39":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1d16275d75dfe0b780ed62df4c811d083187c71a":["245fee3e499fae1fc0c33a80a6dd979f9c5f49e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1d16275d75dfe0b780ed62df4c811d083187c71a"],"f18c35aec8cd0e819e1904c0147e05f7aea15bc4":["93a838d8ba57e85e9db126e862958dafc7da4d5b"],"282779d3160a8f7f09d2a07b06add736f93ac50b":["f118a5ec962b5e2658d313e6f4e6f28faa3bcb39"]},"commit2Childs":{"245fee3e499fae1fc0c33a80a6dd979f9c5f49e2":["1d16275d75dfe0b780ed62df4c811d083187c71a"],"93a838d8ba57e85e9db126e862958dafc7da4d5b":["f18c35aec8cd0e819e1904c0147e05f7aea15bc4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f118a5ec962b5e2658d313e6f4e6f28faa3bcb39"],"f118a5ec962b5e2658d313e6f4e6f28faa3bcb39":["282779d3160a8f7f09d2a07b06add736f93ac50b"],"1d16275d75dfe0b780ed62df4c811d083187c71a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"f18c35aec8cd0e819e1904c0147e05f7aea15bc4":["245fee3e499fae1fc0c33a80a6dd979f9c5f49e2"],"282779d3160a8f7f09d2a07b06add736f93ac50b":["93a838d8ba57e85e9db126e862958dafc7da4d5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}