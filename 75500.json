{"path":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort#readPartition(ByteSequencesReader).mjava","commits":[{"id":"7bf07f4ebadc7539de83a531e64678350d78ca26","date":1322776167,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort#readPartition(ByteSequencesReader).mjava","pathOld":"/dev/null","sourceNew":"  /** Read in a single partition of data */\n  int readPartition(ByteSequencesReader reader) throws IOException {\n    long start = System.currentTimeMillis();\n\n    // We will be reallocating from scratch.\n    Arrays.fill(this.buffer, null);\n\n    int bytesLimit = this.ramBufferSize.bytes;\n    byte [][] data = this.buffer;\n    byte[] line;\n    int linesRead = 0;\n    while ((line = reader.read()) != null) {\n      if (linesRead + 1 >= data.length) {\n        data = Arrays.copyOf(data,\n            ArrayUtil.oversize(linesRead + MIN_EXPECTED_GROWTH, \n                RamUsageEstimator.NUM_BYTES_OBJECT_REF));\n      }\n      data[linesRead++] = line;\n\n      // Account for the created objects.\n      // (buffer slots do not account to buffer size.) \n      bytesLimit -= line.length + RamUsageEstimator.NUM_BYTES_ARRAY_HEADER;\n      if (bytesLimit < 0) {\n        break;\n      }\n    }\n    this.buffer = data;\n\n    sortInfo.readTime += (System.currentTimeMillis() - start);\n    return linesRead;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc3c850c5222a1ce7d619563f67bf047a11b32b6","date":1330703995,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort#readPartition(ByteSequencesReader).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort#readPartition(ByteSequencesReader).mjava","sourceNew":"  /** Read in a single partition of data */\n  int readPartition(ByteSequencesReader reader) throws IOException {\n    long start = System.currentTimeMillis();\n    final BytesRef scratch = new BytesRef();\n    while ((scratch.bytes = reader.read()) != null) {\n      scratch.length = scratch.bytes.length; \n      buffer.append(scratch);\n      // Account for the created objects.\n      // (buffer slots do not account to buffer size.) \n      if (ramBufferSize.bytes < buffer.bytesUsed()) {\n        break;\n      }\n    }\n    sortInfo.readTime += (System.currentTimeMillis() - start);\n    return buffer.size();\n  }\n\n","sourceOld":"  /** Read in a single partition of data */\n  int readPartition(ByteSequencesReader reader) throws IOException {\n    long start = System.currentTimeMillis();\n\n    // We will be reallocating from scratch.\n    Arrays.fill(this.buffer, null);\n\n    int bytesLimit = this.ramBufferSize.bytes;\n    byte [][] data = this.buffer;\n    byte[] line;\n    int linesRead = 0;\n    while ((line = reader.read()) != null) {\n      if (linesRead + 1 >= data.length) {\n        data = Arrays.copyOf(data,\n            ArrayUtil.oversize(linesRead + MIN_EXPECTED_GROWTH, \n                RamUsageEstimator.NUM_BYTES_OBJECT_REF));\n      }\n      data[linesRead++] = line;\n\n      // Account for the created objects.\n      // (buffer slots do not account to buffer size.) \n      bytesLimit -= line.length + RamUsageEstimator.NUM_BYTES_ARRAY_HEADER;\n      if (bytesLimit < 0) {\n        break;\n      }\n    }\n    this.buffer = data;\n\n    sortInfo.readTime += (System.currentTimeMillis() - start);\n    return linesRead;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort#readPartition(ByteSequencesReader).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort#readPartition(ByteSequencesReader).mjava","sourceNew":"  /** Read in a single partition of data */\n  int readPartition(ByteSequencesReader reader) throws IOException {\n    long start = System.currentTimeMillis();\n    final BytesRef scratch = new BytesRef();\n    while ((scratch.bytes = reader.read()) != null) {\n      scratch.length = scratch.bytes.length; \n      buffer.append(scratch);\n      // Account for the created objects.\n      // (buffer slots do not account to buffer size.) \n      if (ramBufferSize.bytes < buffer.bytesUsed()) {\n        break;\n      }\n    }\n    sortInfo.readTime += (System.currentTimeMillis() - start);\n    return buffer.size();\n  }\n\n","sourceOld":"  /** Read in a single partition of data */\n  int readPartition(ByteSequencesReader reader) throws IOException {\n    long start = System.currentTimeMillis();\n\n    // We will be reallocating from scratch.\n    Arrays.fill(this.buffer, null);\n\n    int bytesLimit = this.ramBufferSize.bytes;\n    byte [][] data = this.buffer;\n    byte[] line;\n    int linesRead = 0;\n    while ((line = reader.read()) != null) {\n      if (linesRead + 1 >= data.length) {\n        data = Arrays.copyOf(data,\n            ArrayUtil.oversize(linesRead + MIN_EXPECTED_GROWTH, \n                RamUsageEstimator.NUM_BYTES_OBJECT_REF));\n      }\n      data[linesRead++] = line;\n\n      // Account for the created objects.\n      // (buffer slots do not account to buffer size.) \n      bytesLimit -= line.length + RamUsageEstimator.NUM_BYTES_ARRAY_HEADER;\n      if (bytesLimit < 0) {\n        break;\n      }\n    }\n    this.buffer = data;\n\n    sortInfo.readTime += (System.currentTimeMillis() - start);\n    return linesRead;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort#readPartition(ByteSequencesReader).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort#readPartition(ByteSequencesReader).mjava","sourceNew":"  /** Read in a single partition of data */\n  int readPartition(ByteSequencesReader reader) throws IOException {\n    long start = System.currentTimeMillis();\n    final BytesRef scratch = new BytesRef();\n    while ((scratch.bytes = reader.read()) != null) {\n      scratch.length = scratch.bytes.length; \n      buffer.append(scratch);\n      // Account for the created objects.\n      // (buffer slots do not account to buffer size.) \n      if (ramBufferSize.bytes < buffer.bytesUsed()) {\n        break;\n      }\n    }\n    sortInfo.readTime += (System.currentTimeMillis() - start);\n    return buffer.size();\n  }\n\n","sourceOld":"  /** Read in a single partition of data */\n  int readPartition(ByteSequencesReader reader) throws IOException {\n    long start = System.currentTimeMillis();\n    final BytesRef scratch = new BytesRef();\n    while ((scratch.bytes = reader.read()) != null) {\n      scratch.length = scratch.bytes.length; \n      buffer.append(scratch);\n      // Account for the created objects.\n      // (buffer slots do not account to buffer size.) \n      if (ramBufferSize.bytes < buffer.bytesUsed()) {\n        break;\n      }\n    }\n    sortInfo.readTime += (System.currentTimeMillis() - start);\n    return buffer.size();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"7bf07f4ebadc7539de83a531e64678350d78ca26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["7bf07f4ebadc7539de83a531e64678350d78ca26","dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dc3c850c5222a1ce7d619563f67bf047a11b32b6":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7bf07f4ebadc7539de83a531e64678350d78ca26":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"dc3c850c5222a1ce7d619563f67bf047a11b32b6":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}