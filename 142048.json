{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/TopFeaturesEvaluator#getMaxIndexes(double[],int).mjava","commits":[{"id":"5f0ec25ba9bff9e87e402c4fe0afe87f877bccd6","date":1516045834,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/TopFeaturesEvaluator#getMaxIndexes(double[],int).mjava","pathOld":"/dev/null","sourceNew":"  private List<Integer> getMaxIndexes(double[] values, int k) {\n    TreeSet<Pair> set = new TreeSet();\n    for(int i=0; i<values.length; i++) {\n      set.add(new Pair(i, values[i]));\n      if(set.size() > k) {\n        set.pollFirst();\n      }\n    }\n\n    List<Integer> top = new ArrayList(k);\n    while(set.size() > 0) {\n      top.add(set.pollLast().getIndex());\n    }\n\n    return top;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/TopFeaturesEvaluator#getMaxIndexes(double[],int).mjava","pathOld":"/dev/null","sourceNew":"  private List<Integer> getMaxIndexes(double[] values, int k) {\n    TreeSet<Pair> set = new TreeSet();\n    for(int i=0; i<values.length; i++) {\n      set.add(new Pair(i, values[i]));\n      if(set.size() > k) {\n        set.pollFirst();\n      }\n    }\n\n    List<Integer> top = new ArrayList(k);\n    while(set.size() > 0) {\n      top.add(set.pollLast().getIndex());\n    }\n\n    return top;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6331fb5344e3d737be63af3a7bd470ee133004a","date":1569798100,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/TopFeaturesEvaluator#getMaxIndexes(double[],int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/TopFeaturesEvaluator#getMaxIndexes(double[],int).mjava","sourceNew":"  private List<Integer> getMaxIndexes(double[] values, int k) {\n    TreeSet<Pair> set = new TreeSet();\n    for(int i=0; i<values.length; i++) {\n      if(values[i] > 0){\n        set.add(new Pair(i, values[i]));\n        if (set.size() > k) {\n          set.pollFirst();\n        }\n      }\n    }\n\n    List<Integer> top = new ArrayList(k);\n    while(set.size() > 0) {\n      top.add(set.pollLast().getIndex());\n    }\n\n    return top;\n  }\n\n","sourceOld":"  private List<Integer> getMaxIndexes(double[] values, int k) {\n    TreeSet<Pair> set = new TreeSet();\n    for(int i=0; i<values.length; i++) {\n      set.add(new Pair(i, values[i]));\n      if(set.size() > k) {\n        set.pollFirst();\n      }\n    }\n\n    List<Integer> top = new ArrayList(k);\n    while(set.size() > 0) {\n      top.add(set.pollLast().getIndex());\n    }\n\n    return top;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b9f74021389e2b32ee750fa5a24281c87951ec3","date":1569845983,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/TopFeaturesEvaluator#getMaxIndexes(double[],int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/TopFeaturesEvaluator#getMaxIndexes(double[],int).mjava","sourceNew":"  private List<Integer> getMaxIndexes(double[] values, int k) {\n    TreeSet<Pair> set = new TreeSet();\n    for(int i=0; i<values.length; i++) {\n      if(values[i] > 0){\n        set.add(new Pair(i, values[i]));\n        if (set.size() > k) {\n          set.pollFirst();\n        }\n      }\n    }\n\n    List<Integer> top = new ArrayList(k);\n    while(set.size() > 0) {\n      top.add(set.pollLast().getIndex());\n    }\n\n    return top;\n  }\n\n","sourceOld":"  private List<Integer> getMaxIndexes(double[] values, int k) {\n    TreeSet<Pair> set = new TreeSet();\n    for(int i=0; i<values.length; i++) {\n      set.add(new Pair(i, values[i]));\n      if(set.size() > k) {\n        set.pollFirst();\n      }\n    }\n\n    List<Integer> top = new ArrayList(k);\n    while(set.size() > 0) {\n      top.add(set.pollLast().getIndex());\n    }\n\n    return top;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","date":1591579911,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/TopFeaturesEvaluator#getMaxIndexes(double[],int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/TopFeaturesEvaluator#getMaxIndexes(double[],int).mjava","sourceNew":"  private List<Integer> getMaxIndexes(double[] values, int k) {\n    TreeSet<Pair> set = new TreeSet<>();\n    for(int i=0; i<values.length; i++) {\n      if(values[i] > 0){\n        set.add(new Pair(i, values[i]));\n        if (set.size() > k) {\n          set.pollFirst();\n        }\n      }\n    }\n\n    List<Integer> top = new ArrayList<>(k);\n    while(set.size() > 0) {\n      top.add(set.pollLast().getIndex());\n    }\n\n    return top;\n  }\n\n","sourceOld":"  private List<Integer> getMaxIndexes(double[] values, int k) {\n    TreeSet<Pair> set = new TreeSet();\n    for(int i=0; i<values.length; i++) {\n      if(values[i] > 0){\n        set.add(new Pair(i, values[i]));\n        if (set.size() > k) {\n          set.pollFirst();\n        }\n      }\n    }\n\n    List<Integer> top = new ArrayList(k);\n    while(set.size() > 0) {\n      top.add(set.pollLast().getIndex());\n    }\n\n    return top;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5f0ec25ba9bff9e87e402c4fe0afe87f877bccd6"],"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["b6331fb5344e3d737be63af3a7bd470ee133004a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f0ec25ba9bff9e87e402c4fe0afe87f877bccd6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b6331fb5344e3d737be63af3a7bd470ee133004a":["b94236357aaa22b76c10629851fe4e376e0cea82"],"4b9f74021389e2b32ee750fa5a24281c87951ec3":["b94236357aaa22b76c10629851fe4e376e0cea82","b6331fb5344e3d737be63af3a7bd470ee133004a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["b6331fb5344e3d737be63af3a7bd470ee133004a","4b9f74021389e2b32ee750fa5a24281c87951ec3"],"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","5f0ec25ba9bff9e87e402c4fe0afe87f877bccd6"],"5f0ec25ba9bff9e87e402c4fe0afe87f877bccd6":["b94236357aaa22b76c10629851fe4e376e0cea82"],"b6331fb5344e3d737be63af3a7bd470ee133004a":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","4b9f74021389e2b32ee750fa5a24281c87951ec3"],"4b9f74021389e2b32ee750fa5a24281c87951ec3":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4b9f74021389e2b32ee750fa5a24281c87951ec3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}