{"path":"lucene/core/src/java/org/apache/lucene/util/RadixSelector#getFallbackSelector(int).mjava","commits":[{"id":"d561885e9bb6238af1ff8afe8630dcfe49b66ac7","date":1469780634,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/RadixSelector#getFallbackSelector(int).mjava","pathOld":"/dev/null","sourceNew":"  /** Get a fall-back selector which may assume that the first {@code d} bytes\n   *  of all compared strings are equal. This fallback selector is used when\n   *  the range becomes narrow or when the maximum level of recursion has\n   *  been exceeded. */\n  protected Selector getFallbackSelector(int d) {\n    return new IntroSelector() {\n      @Override\n      protected void swap(int i, int j) {\n        RadixSelector.this.swap(i, j);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        for (int o = d; o < maxLength; ++o) {\n          final int b1 = byteAt(i, o);\n          final int b2 = byteAt(j, o);\n          if (b1 != b2) {\n            return b1 - b2;\n          } else if (b1 == -1) {\n            break;\n          }\n        }\n        return 0;\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        pivot.setLength(0);\n        for (int o = d; o < maxLength; ++o) {\n          final int b = byteAt(i, o);\n          if (b == -1) {\n            break;\n          }\n          pivot.append((byte) b);\n        }\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        for (int o = 0; o < pivot.length(); ++o) {\n          final int b1 = pivot.byteAt(o) & 0xff;\n          final int b2 = byteAt(j, d + o);\n          if (b1 != b2) {\n            return b1 - b2;\n          }\n        }\n        if (d + pivot.length() == maxLength) {\n          return 0;\n        }\n        return -1 - byteAt(j, d + pivot.length());\n      }\n\n      private final BytesRefBuilder pivot = new BytesRefBuilder();\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/RadixSelector#getFallbackSelector(int).mjava","pathOld":"/dev/null","sourceNew":"  /** Get a fall-back selector which may assume that the first {@code d} bytes\n   *  of all compared strings are equal. This fallback selector is used when\n   *  the range becomes narrow or when the maximum level of recursion has\n   *  been exceeded. */\n  protected Selector getFallbackSelector(int d) {\n    return new IntroSelector() {\n      @Override\n      protected void swap(int i, int j) {\n        RadixSelector.this.swap(i, j);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        for (int o = d; o < maxLength; ++o) {\n          final int b1 = byteAt(i, o);\n          final int b2 = byteAt(j, o);\n          if (b1 != b2) {\n            return b1 - b2;\n          } else if (b1 == -1) {\n            break;\n          }\n        }\n        return 0;\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        pivot.setLength(0);\n        for (int o = d; o < maxLength; ++o) {\n          final int b = byteAt(i, o);\n          if (b == -1) {\n            break;\n          }\n          pivot.append((byte) b);\n        }\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        for (int o = 0; o < pivot.length(); ++o) {\n          final int b1 = pivot.byteAt(o) & 0xff;\n          final int b2 = byteAt(j, d + o);\n          if (b1 != b2) {\n            return b1 - b2;\n          }\n        }\n        if (d + pivot.length() == maxLength) {\n          return 0;\n        }\n        return -1 - byteAt(j, d + pivot.length());\n      }\n\n      private final BytesRefBuilder pivot = new BytesRefBuilder();\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/RadixSelector#getFallbackSelector(int).mjava","pathOld":"/dev/null","sourceNew":"  /** Get a fall-back selector which may assume that the first {@code d} bytes\n   *  of all compared strings are equal. This fallback selector is used when\n   *  the range becomes narrow or when the maximum level of recursion has\n   *  been exceeded. */\n  protected Selector getFallbackSelector(int d) {\n    return new IntroSelector() {\n      @Override\n      protected void swap(int i, int j) {\n        RadixSelector.this.swap(i, j);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        for (int o = d; o < maxLength; ++o) {\n          final int b1 = byteAt(i, o);\n          final int b2 = byteAt(j, o);\n          if (b1 != b2) {\n            return b1 - b2;\n          } else if (b1 == -1) {\n            break;\n          }\n        }\n        return 0;\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        pivot.setLength(0);\n        for (int o = d; o < maxLength; ++o) {\n          final int b = byteAt(i, o);\n          if (b == -1) {\n            break;\n          }\n          pivot.append((byte) b);\n        }\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        for (int o = 0; o < pivot.length(); ++o) {\n          final int b1 = pivot.byteAt(o) & 0xff;\n          final int b2 = byteAt(j, d + o);\n          if (b1 != b2) {\n            return b1 - b2;\n          }\n        }\n        if (d + pivot.length() == maxLength) {\n          return 0;\n        }\n        return -1 - byteAt(j, d + pivot.length());\n      }\n\n      private final BytesRefBuilder pivot = new BytesRefBuilder();\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}