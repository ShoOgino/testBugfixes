{"path":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#sameDocs(DocSet,DocSet).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#sameDocs(DocSet,DocSet).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestRangeQuery#sameDocs(DocSet,DocSet).mjava","sourceNew":"  static boolean sameDocs(DocSet a, DocSet b) {\n    DocIterator i = a.iterator();\n    // System.out.println(\"SIZES=\"+a.size() + \",\" + b.size());\n    assertEquals(a.size(), b.size());\n    while (i.hasNext()) {\n      int doc = i.nextDoc();\n      assertTrue(b.exists(doc));\n      // System.out.println(\"MATCH! \" + doc);\n    }\n    return true;\n  }\n\n","sourceOld":"  static boolean sameDocs(DocSet a, DocSet b) {\n    DocIterator i = a.iterator();\n    // System.out.println(\"SIZES=\"+a.size() + \",\" + b.size());\n    assertEquals(a.size(), b.size());\n    while (i.hasNext()) {\n      int doc = i.nextDoc();\n      assertTrue(b.exists(doc));\n      // System.out.println(\"MATCH! \" + doc);\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#sameDocs(DocSet,DocSet).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestRangeQuery#sameDocs(DocSet,DocSet).mjava","sourceNew":"  static boolean sameDocs(DocSet a, DocSet b) {\n    DocIterator i = a.iterator();\n    // System.out.println(\"SIZES=\"+a.size() + \",\" + b.size());\n    assertEquals(a.size(), b.size());\n    while (i.hasNext()) {\n      int doc = i.nextDoc();\n      assertTrue(b.exists(doc));\n      // System.out.println(\"MATCH! \" + doc);\n    }\n    return true;\n  }\n\n","sourceOld":"  static boolean sameDocs(DocSet a, DocSet b) {\n    DocIterator i = a.iterator();\n    // System.out.println(\"SIZES=\"+a.size() + \",\" + b.size());\n    assertEquals(a.size(), b.size());\n    while (i.hasNext()) {\n      int doc = i.nextDoc();\n      assertTrue(b.exists(doc));\n      // System.out.println(\"MATCH! \" + doc);\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#sameDocs(DocSet,DocSet).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestRangeQuery#sameDocs(DocSet,DocSet).mjava","sourceNew":"  static boolean sameDocs(DocSet a, DocSet b) {\n    DocIterator i = a.iterator();\n    // System.out.println(\"SIZES=\"+a.size() + \",\" + b.size());\n    assertEquals(a.size(), b.size());\n    while (i.hasNext()) {\n      int doc = i.nextDoc();\n      assertTrue(b.exists(doc));\n      // System.out.println(\"MATCH! \" + doc);\n    }\n    return true;\n  }\n\n","sourceOld":"  static boolean sameDocs(DocSet a, DocSet b) {\n    DocIterator i = a.iterator();\n    // System.out.println(\"SIZES=\"+a.size() + \",\" + b.size());\n    assertEquals(a.size(), b.size());\n    while (i.hasNext()) {\n      int doc = i.nextDoc();\n      assertTrue(b.exists(doc));\n      // System.out.println(\"MATCH! \" + doc);\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cb157886ecc78f33fafd9d403e96a4a495503b3","date":1467753535,"type":5,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#sameDocs(String,DocSet,DocSet).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#sameDocs(DocSet,DocSet).mjava","sourceNew":"  static boolean sameDocs(String msg, DocSet a, DocSet b) {\n    DocIterator i = a.iterator();\n    // System.out.println(\"SIZES=\"+a.size() + \",\" + b.size());\n    assertEquals(msg, a.size(), b.size());\n    while (i.hasNext()) {\n      int doc = i.nextDoc();\n      assertTrue(msg, b.exists(doc));\n      // System.out.println(\"MATCH! \" + doc);\n    }\n    return true;\n  }\n\n","sourceOld":"  static boolean sameDocs(DocSet a, DocSet b) {\n    DocIterator i = a.iterator();\n    // System.out.println(\"SIZES=\"+a.size() + \",\" + b.size());\n    assertEquals(a.size(), b.size());\n    while (i.hasNext()) {\n      int doc = i.nextDoc();\n      assertTrue(b.exists(doc));\n      // System.out.println(\"MATCH! \" + doc);\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#sameDocs(DocSet,DocSet).mjava","sourceNew":null,"sourceOld":"  static boolean sameDocs(DocSet a, DocSet b) {\n    DocIterator i = a.iterator();\n    // System.out.println(\"SIZES=\"+a.size() + \",\" + b.size());\n    assertEquals(a.size(), b.size());\n    while (i.hasNext()) {\n      int doc = i.nextDoc();\n      assertTrue(b.exists(doc));\n      // System.out.println(\"MATCH! \" + doc);\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"5cb157886ecc78f33fafd9d403e96a4a495503b3":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c26f00b574427b55127e869b935845554afde1fa","5cb157886ecc78f33fafd9d403e96a4a495503b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5cb157886ecc78f33fafd9d403e96a4a495503b3"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["5cb157886ecc78f33fafd9d403e96a4a495503b3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"5cb157886ecc78f33fafd9d403e96a4a495503b3":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}