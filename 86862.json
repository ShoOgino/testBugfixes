{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexWriter#indexedTermPrefixLength(BytesRef,BytesRef).mjava","commits":[{"id":"038e2a9b07e2f8ae58336613cea227bf8b973484","date":1346850972,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexWriter#indexedTermPrefixLength(BytesRef,BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/VariableGapTermsIndexWriter#indexedTermPrefixLength(BytesRef,BytesRef).mjava","sourceNew":"  /** NOTE: if your codec does not sort in unicode code\n   *  point order, you must override this method, to simply\n   *  return indexedTerm.length. */\n  protected int indexedTermPrefixLength(final BytesRef priorTerm, final BytesRef indexedTerm) {\n    // As long as codec sorts terms in unicode codepoint\n    // order, we can safely strip off the non-distinguishing\n    // suffix to save RAM in the loaded terms index.\n    final int idxTermOffset = indexedTerm.offset;\n    final int priorTermOffset = priorTerm.offset;\n    final int limit = Math.min(priorTerm.length, indexedTerm.length);\n    for(int byteIdx=0;byteIdx<limit;byteIdx++) {\n      if (priorTerm.bytes[priorTermOffset+byteIdx] != indexedTerm.bytes[idxTermOffset+byteIdx]) {\n        return byteIdx+1;\n      }\n    }\n    return Math.min(1+priorTerm.length, indexedTerm.length);\n  }\n\n","sourceOld":"  /** NOTE: if your codec does not sort in unicode code\n   *  point order, you must override this method, to simply\n   *  return indexedTerm.length. */\n  protected int indexedTermPrefixLength(final BytesRef priorTerm, final BytesRef indexedTerm) {\n    // As long as codec sorts terms in unicode codepoint\n    // order, we can safely strip off the non-distinguishing\n    // suffix to save RAM in the loaded terms index.\n    final int idxTermOffset = indexedTerm.offset;\n    final int priorTermOffset = priorTerm.offset;\n    final int limit = Math.min(priorTerm.length, indexedTerm.length);\n    for(int byteIdx=0;byteIdx<limit;byteIdx++) {\n      if (priorTerm.bytes[priorTermOffset+byteIdx] != indexedTerm.bytes[idxTermOffset+byteIdx]) {\n        return byteIdx+1;\n      }\n    }\n    return Math.min(1+priorTerm.length, indexedTerm.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["038e2a9b07e2f8ae58336613cea227bf8b973484"],"038e2a9b07e2f8ae58336613cea227bf8b973484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["038e2a9b07e2f8ae58336613cea227bf8b973484"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"038e2a9b07e2f8ae58336613cea227bf8b973484":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}