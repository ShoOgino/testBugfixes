{"path":"solr/core/src/java/org/apache/solr/update/UpdateLog#getEntryFromTLog(long,long,List[TransactionLog]).mjava","commits":[{"id":"415bbbe7da8065dd3c477bdc3c703c6425622998","date":1485393793,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#getEntryFromTLog(long,long,List[TransactionLog]).mjava","pathOld":"/dev/null","sourceNew":"  /***\n   * Get the entry that has the given lookupVersion in the given lookupLogs at the lookupPointer position.\n   *\n   * @return The entry if found, otherwise null\n   */\n  private synchronized List getEntryFromTLog(long lookupPointer, long lookupVersion, List<TransactionLog> lookupLogs) {\n    for (TransactionLog lookupLog : lookupLogs) {\n      if (lookupLog != null && lookupLog.getLogSize() > lookupPointer) {\n        lookupLog.incref();\n        try {\n          Object obj = null;\n\n          try {\n            obj = lookupLog.lookup(lookupPointer);\n          } catch (Exception | Error ex) {\n            // This can happen when trying to deserialize the entry at position lookupPointer,\n            // but from a different tlog than the one containing the desired entry.\n            // Just ignore the exception, so as to proceed to the next tlog.\n            log.debug(\"Exception reading the log (this is expected, don't worry)=\" + lookupLog + \", for version=\" + lookupVersion +\n                \". This can be ignored.\");\n          }\n\n          if (obj != null && obj instanceof List) {\n            List tmpEntry = (List) obj;\n            if (tmpEntry.size() >= 2 && \n                (tmpEntry.get(UpdateLog.VERSION_IDX) instanceof Long) &&\n                ((Long) tmpEntry.get(UpdateLog.VERSION_IDX)).equals(lookupVersion)) {\n              return tmpEntry;\n            }\n          }\n        } finally {\n          lookupLog.decref();\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#getEntryFromTLog(long,long,List[TransactionLog]).mjava","pathOld":"/dev/null","sourceNew":"  /***\n   * Get the entry that has the given lookupVersion in the given lookupLogs at the lookupPointer position.\n   *\n   * @return The entry if found, otherwise null\n   */\n  private synchronized List getEntryFromTLog(long lookupPointer, long lookupVersion, List<TransactionLog> lookupLogs) {\n    for (TransactionLog lookupLog : lookupLogs) {\n      if (lookupLog != null && lookupLog.getLogSize() > lookupPointer) {\n        lookupLog.incref();\n        try {\n          Object obj = null;\n\n          try {\n            obj = lookupLog.lookup(lookupPointer);\n          } catch (Exception | Error ex) {\n            // This can happen when trying to deserialize the entry at position lookupPointer,\n            // but from a different tlog than the one containing the desired entry.\n            // Just ignore the exception, so as to proceed to the next tlog.\n            log.debug(\"Exception reading the log (this is expected, don't worry)=\" + lookupLog + \", for version=\" + lookupVersion +\n                \". This can be ignored.\");\n          }\n\n          if (obj != null && obj instanceof List) {\n            List tmpEntry = (List) obj;\n            if (tmpEntry.size() >= 2 && \n                (tmpEntry.get(UpdateLog.VERSION_IDX) instanceof Long) &&\n                ((Long) tmpEntry.get(UpdateLog.VERSION_IDX)).equals(lookupVersion)) {\n              return tmpEntry;\n            }\n          }\n        } finally {\n          lookupLog.decref();\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"740d649f013f07efbeb73ca854f106c60166e7c0","date":1587431295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#getEntryFromTLog(long,long,List[TransactionLog]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#getEntryFromTLog(long,long,List[TransactionLog]).mjava","sourceNew":"  /***\n   * Get the entry that has the given lookupVersion in the given lookupLogs at the lookupPointer position.\n   *\n   * @return The entry if found, otherwise null\n   */\n  private synchronized List getEntryFromTLog(long lookupPointer, long lookupVersion, List<TransactionLog> lookupLogs) {\n    for (TransactionLog lookupLog : lookupLogs) {\n      if (lookupLog != null && lookupLog.getLogSize() > lookupPointer) {\n        lookupLog.incref();\n        try {\n          Object obj = null;\n\n          try {\n            obj = lookupLog.lookup(lookupPointer);\n          } catch (Exception | Error ex) {\n            // This can happen when trying to deserialize the entry at position lookupPointer,\n            // but from a different tlog than the one containing the desired entry.\n            // Just ignore the exception, so as to proceed to the next tlog.\n            log.debug(\"Exception reading the log (this is expected, don't worry)={}, for version={}. This can be ignored\"\n                , lookupLog, lookupVersion);\n          }\n\n          if (obj != null && obj instanceof List) {\n            List tmpEntry = (List) obj;\n            if (tmpEntry.size() >= 2 && \n                (tmpEntry.get(UpdateLog.VERSION_IDX) instanceof Long) &&\n                ((Long) tmpEntry.get(UpdateLog.VERSION_IDX)).equals(lookupVersion)) {\n              return tmpEntry;\n            }\n          }\n        } finally {\n          lookupLog.decref();\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /***\n   * Get the entry that has the given lookupVersion in the given lookupLogs at the lookupPointer position.\n   *\n   * @return The entry if found, otherwise null\n   */\n  private synchronized List getEntryFromTLog(long lookupPointer, long lookupVersion, List<TransactionLog> lookupLogs) {\n    for (TransactionLog lookupLog : lookupLogs) {\n      if (lookupLog != null && lookupLog.getLogSize() > lookupPointer) {\n        lookupLog.incref();\n        try {\n          Object obj = null;\n\n          try {\n            obj = lookupLog.lookup(lookupPointer);\n          } catch (Exception | Error ex) {\n            // This can happen when trying to deserialize the entry at position lookupPointer,\n            // but from a different tlog than the one containing the desired entry.\n            // Just ignore the exception, so as to proceed to the next tlog.\n            log.debug(\"Exception reading the log (this is expected, don't worry)=\" + lookupLog + \", for version=\" + lookupVersion +\n                \". This can be ignored.\");\n          }\n\n          if (obj != null && obj instanceof List) {\n            List tmpEntry = (List) obj;\n            if (tmpEntry.size() >= 2 && \n                (tmpEntry.get(UpdateLog.VERSION_IDX) instanceof Long) &&\n                ((Long) tmpEntry.get(UpdateLog.VERSION_IDX)).equals(lookupVersion)) {\n              return tmpEntry;\n            }\n          }\n        } finally {\n          lookupLog.decref();\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"018a36ff4088cb91ab12cbe44f696d81d1fadd77","date":1591657414,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#getEntryFromTLog(long,long,List[TransactionLog]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#getEntryFromTLog(long,long,List[TransactionLog]).mjava","sourceNew":"  /***\n   * Get the entry that has the given lookupVersion in the given lookupLogs at the lookupPointer position.\n   *\n   * @return The entry if found, otherwise null\n   */\n  @SuppressWarnings({\"rawtypes\"})\n  private synchronized List getEntryFromTLog(long lookupPointer, long lookupVersion, List<TransactionLog> lookupLogs) {\n    for (TransactionLog lookupLog : lookupLogs) {\n      if (lookupLog != null && lookupLog.getLogSize() > lookupPointer) {\n        lookupLog.incref();\n        try {\n          Object obj = null;\n\n          try {\n            obj = lookupLog.lookup(lookupPointer);\n          } catch (Exception | Error ex) {\n            // This can happen when trying to deserialize the entry at position lookupPointer,\n            // but from a different tlog than the one containing the desired entry.\n            // Just ignore the exception, so as to proceed to the next tlog.\n            log.debug(\"Exception reading the log (this is expected, don't worry)={}, for version={}. This can be ignored\"\n                , lookupLog, lookupVersion);\n          }\n\n          if (obj != null && obj instanceof List) {\n            List tmpEntry = (List) obj;\n            if (tmpEntry.size() >= 2 && \n                (tmpEntry.get(UpdateLog.VERSION_IDX) instanceof Long) &&\n                ((Long) tmpEntry.get(UpdateLog.VERSION_IDX)).equals(lookupVersion)) {\n              return tmpEntry;\n            }\n          }\n        } finally {\n          lookupLog.decref();\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /***\n   * Get the entry that has the given lookupVersion in the given lookupLogs at the lookupPointer position.\n   *\n   * @return The entry if found, otherwise null\n   */\n  private synchronized List getEntryFromTLog(long lookupPointer, long lookupVersion, List<TransactionLog> lookupLogs) {\n    for (TransactionLog lookupLog : lookupLogs) {\n      if (lookupLog != null && lookupLog.getLogSize() > lookupPointer) {\n        lookupLog.incref();\n        try {\n          Object obj = null;\n\n          try {\n            obj = lookupLog.lookup(lookupPointer);\n          } catch (Exception | Error ex) {\n            // This can happen when trying to deserialize the entry at position lookupPointer,\n            // but from a different tlog than the one containing the desired entry.\n            // Just ignore the exception, so as to proceed to the next tlog.\n            log.debug(\"Exception reading the log (this is expected, don't worry)={}, for version={}. This can be ignored\"\n                , lookupLog, lookupVersion);\n          }\n\n          if (obj != null && obj instanceof List) {\n            List tmpEntry = (List) obj;\n            if (tmpEntry.size() >= 2 && \n                (tmpEntry.get(UpdateLog.VERSION_IDX) instanceof Long) &&\n                ((Long) tmpEntry.get(UpdateLog.VERSION_IDX)).equals(lookupVersion)) {\n              return tmpEntry;\n            }\n          }\n        } finally {\n          lookupLog.decref();\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"598b5d23aa7c9732bf473c21a9cd309c44599394":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","415bbbe7da8065dd3c477bdc3c703c6425622998"],"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["740d649f013f07efbeb73ca854f106c60166e7c0"],"740d649f013f07efbeb73ca854f106c60166e7c0":["415bbbe7da8065dd3c477bdc3c703c6425622998"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"]},"commit2Childs":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["598b5d23aa7c9732bf473c21a9cd309c44599394","740d649f013f07efbeb73ca854f106c60166e7c0"],"598b5d23aa7c9732bf473c21a9cd309c44599394":[],"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"740d649f013f07efbeb73ca854f106c60166e7c0":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["415bbbe7da8065dd3c477bdc3c703c6425622998","598b5d23aa7c9732bf473c21a9cd309c44599394"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["598b5d23aa7c9732bf473c21a9cd309c44599394","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}