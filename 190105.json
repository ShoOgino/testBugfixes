{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#verify(int).mjava","commits":[{"id":"1786be6a11f9cf5e48ce84869d1bb71e9c02f966","date":1448381196,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#verify(int).mjava","pathOld":"/dev/null","sourceNew":"  /** Only used for debugging, to make sure all values in each leaf block fall within the range expected by the index */\n  // TODO: maybe we can get this into CheckIndex?\n  public void verify(int maxDoc) throws IOException {\n    //System.out.println(\"BKDR.verify this=\" + this);\n    // Visits every doc in every leaf block and confirms that\n    // their values agree with the index:\n    byte[] rootMinPacked = new byte[packedBytesLength];\n    byte[] rootMaxPacked = new byte[packedBytesLength];\n    Arrays.fill(rootMaxPacked, (byte) 0xff);\n\n    IntersectState state = new IntersectState(in.clone(), numDims, packedBytesLength,\n                                              maxPointsInLeafNode,\n                                              new VerifyVisitor(numDims, bytesPerDim, maxDoc));\n\n    verify(state, 1, rootMinPacked, rootMaxPacked);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b01431682e11036a1a7d757a3fa7c1f903fb2c45","date":1460646145,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#verify(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#verify(int).mjava","sourceNew":"  /** Only used for debugging, to make sure all values in each leaf block fall within the range expected by the index */\n  // TODO: maybe we can get this into CheckIndex?\n  public void verify(int maxDoc) throws IOException {\n    //System.out.println(\"BKDR.verify this=\" + this);\n    // Visits every doc in every leaf block and confirms that\n    // their values agree with the index:\n    byte[] rootMinPacked = new byte[packedBytesLength];\n    byte[] rootMaxPacked = new byte[packedBytesLength];\n    Arrays.fill(rootMaxPacked, (byte) 0xff);\n    verify(getIntersectState(new VerifyVisitor(numDims, bytesPerDim, maxDoc)), 1, rootMinPacked, rootMaxPacked);\n  }\n\n","sourceOld":"  /** Only used for debugging, to make sure all values in each leaf block fall within the range expected by the index */\n  // TODO: maybe we can get this into CheckIndex?\n  public void verify(int maxDoc) throws IOException {\n    //System.out.println(\"BKDR.verify this=\" + this);\n    // Visits every doc in every leaf block and confirms that\n    // their values agree with the index:\n    byte[] rootMinPacked = new byte[packedBytesLength];\n    byte[] rootMaxPacked = new byte[packedBytesLength];\n    Arrays.fill(rootMaxPacked, (byte) 0xff);\n\n    IntersectState state = new IntersectState(in.clone(), numDims, packedBytesLength,\n                                              maxPointsInLeafNode,\n                                              new VerifyVisitor(numDims, bytesPerDim, maxDoc));\n\n    verify(state, 1, rootMinPacked, rootMaxPacked);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc0d60683b47b5d922124c31f57c8b34734f9e6","date":1480846684,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#verify(int).mjava","sourceNew":null,"sourceOld":"  /** Only used for debugging, to make sure all values in each leaf block fall within the range expected by the index */\n  // TODO: maybe we can get this into CheckIndex?\n  public void verify(int maxDoc) throws IOException {\n    //System.out.println(\"BKDR.verify this=\" + this);\n    // Visits every doc in every leaf block and confirms that\n    // their values agree with the index:\n    byte[] rootMinPacked = new byte[packedBytesLength];\n    byte[] rootMaxPacked = new byte[packedBytesLength];\n    Arrays.fill(rootMaxPacked, (byte) 0xff);\n    verify(getIntersectState(new VerifyVisitor(numDims, bytesPerDim, maxDoc)), 1, rootMinPacked, rootMaxPacked);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#verify(int).mjava","sourceNew":null,"sourceOld":"  /** Only used for debugging, to make sure all values in each leaf block fall within the range expected by the index */\n  // TODO: maybe we can get this into CheckIndex?\n  public void verify(int maxDoc) throws IOException {\n    //System.out.println(\"BKDR.verify this=\" + this);\n    // Visits every doc in every leaf block and confirms that\n    // their values agree with the index:\n    byte[] rootMinPacked = new byte[packedBytesLength];\n    byte[] rootMaxPacked = new byte[packedBytesLength];\n    Arrays.fill(rootMaxPacked, (byte) 0xff);\n    verify(getIntersectState(new VerifyVisitor(numDims, bytesPerDim, maxDoc)), 1, rootMinPacked, rootMaxPacked);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["b01431682e11036a1a7d757a3fa7c1f903fb2c45"],"1786be6a11f9cf5e48ce84869d1bb71e9c02f966":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b01431682e11036a1a7d757a3fa7c1f903fb2c45":["1786be6a11f9cf5e48ce84869d1bb71e9c02f966"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["b01431682e11036a1a7d757a3fa7c1f903fb2c45","9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9fc0d60683b47b5d922124c31f57c8b34734f9e6"]},"commit2Childs":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1786be6a11f9cf5e48ce84869d1bb71e9c02f966":["b01431682e11036a1a7d757a3fa7c1f903fb2c45"],"b01431682e11036a1a7d757a3fa7c1f903fb2c45":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","9856095f7afb5a607bf5e65077615ed91273508c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1786be6a11f9cf5e48ce84869d1bb71e9c02f966"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}