{"path":"solr/core/src/java/org/apache/solr/handler/BinaryUpdateRequestHandler#delete(SolrQueryRequest,UpdateRequest,UpdateRequestProcessor).mjava","commits":[{"id":"818d704eaaf0fba0561d0d2752832e1015053482","date":1327419676,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/BinaryUpdateRequestHandler#delete(SolrQueryRequest,UpdateRequest,UpdateRequestProcessor).mjava","pathOld":"/dev/null","sourceNew":"  private void delete(SolrQueryRequest req, UpdateRequest update, UpdateRequestProcessor processor) throws IOException {\n    SolrParams params = update.getParams();\n    DeleteUpdateCommand delcmd = new DeleteUpdateCommand(req);\n    if(params != null) {\n      delcmd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n    }\n    \n    if(update.getDeleteById() != null) {\n      for (String s : update.getDeleteById()) {\n        delcmd.id = s;\n        processor.processDelete(delcmd);\n      }\n      delcmd.id = null;\n    }\n    \n    if(update.getDeleteQuery() != null) {\n      for (String s : update.getDeleteQuery()) {\n        delcmd.query = s;\n        processor.processDelete(delcmd);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c8f628082d9af75235881d7a98cbf3eda663dd62"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/BinaryUpdateRequestHandler#delete(SolrQueryRequest,UpdateRequest,UpdateRequestProcessor).mjava","pathOld":"/dev/null","sourceNew":"  private void delete(SolrQueryRequest req, UpdateRequest update, UpdateRequestProcessor processor) throws IOException {\n    SolrParams params = update.getParams();\n    DeleteUpdateCommand delcmd = new DeleteUpdateCommand(req);\n    if(params != null) {\n      delcmd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n    }\n    \n    if(update.getDeleteById() != null) {\n      for (String s : update.getDeleteById()) {\n        delcmd.id = s;\n        processor.processDelete(delcmd);\n      }\n      delcmd.id = null;\n    }\n    \n    if(update.getDeleteQuery() != null) {\n      for (String s : update.getDeleteQuery()) {\n        delcmd.query = s;\n        processor.processDelete(delcmd);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/BinaryUpdateRequestHandler#delete(SolrQueryRequest,UpdateRequest,UpdateRequestProcessor).mjava","pathOld":"/dev/null","sourceNew":"  private void delete(SolrQueryRequest req, UpdateRequest update, UpdateRequestProcessor processor) throws IOException {\n    SolrParams params = update.getParams();\n    DeleteUpdateCommand delcmd = new DeleteUpdateCommand(req);\n    if(params != null) {\n      delcmd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n    }\n    \n    if(update.getDeleteById() != null) {\n      for (String s : update.getDeleteById()) {\n        delcmd.id = s;\n        processor.processDelete(delcmd);\n      }\n      delcmd.id = null;\n    }\n    \n    if(update.getDeleteQuery() != null) {\n      for (String s : update.getDeleteQuery()) {\n        delcmd.query = s;\n        processor.processDelete(delcmd);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"042e4d934397657ba04c82b46cc5665076bc5c58","date":1336511170,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JavabinLoader#delete(SolrQueryRequest,UpdateRequest,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/BinaryUpdateRequestHandler#delete(SolrQueryRequest,UpdateRequest,UpdateRequestProcessor).mjava","sourceNew":"  private void delete(SolrQueryRequest req, UpdateRequest update, UpdateRequestProcessor processor) throws IOException {\n    SolrParams params = update.getParams();\n    DeleteUpdateCommand delcmd = new DeleteUpdateCommand(req);\n    if(params != null) {\n      delcmd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n    }\n    \n    if(update.getDeleteById() != null) {\n      for (String s : update.getDeleteById()) {\n        delcmd.id = s;\n        processor.processDelete(delcmd);\n      }\n      delcmd.id = null;\n    }\n    \n    if(update.getDeleteQuery() != null) {\n      for (String s : update.getDeleteQuery()) {\n        delcmd.query = s;\n        processor.processDelete(delcmd);\n      }\n    }\n  }\n\n","sourceOld":"  private void delete(SolrQueryRequest req, UpdateRequest update, UpdateRequestProcessor processor) throws IOException {\n    SolrParams params = update.getParams();\n    DeleteUpdateCommand delcmd = new DeleteUpdateCommand(req);\n    if(params != null) {\n      delcmd.commitWithin = params.getInt(UpdateParams.COMMIT_WITHIN, -1);\n    }\n    \n    if(update.getDeleteById() != null) {\n      for (String s : update.getDeleteById()) {\n        delcmd.id = s;\n        processor.processDelete(delcmd);\n      }\n      delcmd.id = null;\n    }\n    \n    if(update.getDeleteQuery() != null) {\n      for (String s : update.getDeleteQuery()) {\n        delcmd.query = s;\n        processor.processDelete(delcmd);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","818d704eaaf0fba0561d0d2752832e1015053482"],"042e4d934397657ba04c82b46cc5665076bc5c58":["818d704eaaf0fba0561d0d2752832e1015053482"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","818d704eaaf0fba0561d0d2752832e1015053482"],"818d704eaaf0fba0561d0d2752832e1015053482":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["042e4d934397657ba04c82b46cc5665076bc5c58"]},"commit2Childs":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"042e4d934397657ba04c82b46cc5665076bc5c58":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","818d704eaaf0fba0561d0d2752832e1015053482"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"818d704eaaf0fba0561d0d2752832e1015053482":["0d22ac6a4146774c1bc8400160fc0b6150294e92","042e4d934397657ba04c82b46cc5665076bc5c58","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}