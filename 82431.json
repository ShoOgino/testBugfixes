{"path":"solr/core/src/test/org/apache/solr/core/CoreSorterTest#getMockContainer().mjava","commits":[{"id":"e22a92d60a5a6320f9653856966fcd77c60953b3","date":1468676579,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreSorterTest#getMockContainer().mjava","pathOld":"/dev/null","sourceNew":"  private CoreContainer getMockContainer() {\n    CoreContainer mockCC = createMock(CoreContainer.class);\n    ZkController mockZKC = createMock(ZkController.class);\n    ClusterState mockClusterState = createMock(ClusterState.class);\n    reset(mockCC, mockZKC, mockClusterState);\n    mockCC.isZooKeeperAware();\n    expectLastCall().andAnswer(() -> Boolean.TRUE).anyTimes();\n    mockCC.getZkController();\n    expectLastCall().andAnswer(() -> mockZKC).anyTimes();\n    mockClusterState.getLiveNodes();\n    expectLastCall().andAnswer(() -> liveNodes).anyTimes();\n    mockZKC.getClusterState();\n    expectLastCall().andAnswer(() -> mockClusterState).anyTimes();\n    replay(mockCC, mockZKC, mockClusterState);\n    return mockCC;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f3783d6f4d080f4f0116769e0e1b0f0f440565c4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f3783d6f4d080f4f0116769e0e1b0f0f440565c4","date":1468932683,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreSorterTest#getMockContainer().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CoreSorterTest#getMockContainer().mjava","sourceNew":"  private CoreContainer getMockContainer() {\n    CoreContainer mockCC = createMock(CoreContainer.class);\n    ZkController mockZKC = createMock(ZkController.class);\n    ClusterState mockClusterState = createMock(ClusterState.class);\n    reset(mockCC, mockZKC, mockClusterState);\n    expect(mockCC.isZooKeeperAware()).andReturn(Boolean.TRUE).anyTimes();\n    expect(mockCC.getZkController()).andReturn(mockZKC).anyTimes();\n    expect(mockClusterState.getLiveNodes()).andReturn(liveNodes).anyTimes();\n    expect(mockZKC.getClusterState()).andReturn(mockClusterState).anyTimes();\n    replay(mockCC, mockZKC, mockClusterState);\n    return mockCC;\n  }\n\n","sourceOld":"  private CoreContainer getMockContainer() {\n    CoreContainer mockCC = createMock(CoreContainer.class);\n    ZkController mockZKC = createMock(ZkController.class);\n    ClusterState mockClusterState = createMock(ClusterState.class);\n    reset(mockCC, mockZKC, mockClusterState);\n    mockCC.isZooKeeperAware();\n    expectLastCall().andAnswer(() -> Boolean.TRUE).anyTimes();\n    mockCC.getZkController();\n    expectLastCall().andAnswer(() -> mockZKC).anyTimes();\n    mockClusterState.getLiveNodes();\n    expectLastCall().andAnswer(() -> liveNodes).anyTimes();\n    mockZKC.getClusterState();\n    expectLastCall().andAnswer(() -> mockClusterState).anyTimes();\n    replay(mockCC, mockZKC, mockClusterState);\n    return mockCC;\n  }\n\n","bugFix":["e22a92d60a5a6320f9653856966fcd77c60953b3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreSorterTest#getMockContainer().mjava","pathOld":"/dev/null","sourceNew":"  private CoreContainer getMockContainer() {\n    CoreContainer mockCC = createMock(CoreContainer.class);\n    ZkController mockZKC = createMock(ZkController.class);\n    ClusterState mockClusterState = createMock(ClusterState.class);\n    reset(mockCC, mockZKC, mockClusterState);\n    expect(mockCC.isZooKeeperAware()).andReturn(Boolean.TRUE).anyTimes();\n    expect(mockCC.getZkController()).andReturn(mockZKC).anyTimes();\n    expect(mockClusterState.getLiveNodes()).andReturn(liveNodes).anyTimes();\n    expect(mockZKC.getClusterState()).andReturn(mockClusterState).anyTimes();\n    replay(mockCC, mockZKC, mockClusterState);\n    return mockCC;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e","date":1487462440,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreSorterTest#getMockContainer().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CoreSorterTest#getMockContainer().mjava","sourceNew":"  private CoreContainer getMockContainer() {\n    CoreContainer mockCC = mock(CoreContainer.class);\n    ZkController mockZKC = mock(ZkController.class);\n    ClusterState mockClusterState = mock(ClusterState.class);\n    when(mockCC.isZooKeeperAware()).thenReturn(true);\n    when(mockCC.getZkController()).thenReturn(mockZKC);\n    when(mockClusterState.getLiveNodes()).thenReturn(liveNodes);\n    when(mockZKC.getClusterState()).thenReturn(mockClusterState);\n    return mockCC;\n  }\n\n","sourceOld":"  private CoreContainer getMockContainer() {\n    CoreContainer mockCC = createMock(CoreContainer.class);\n    ZkController mockZKC = createMock(ZkController.class);\n    ClusterState mockClusterState = createMock(ClusterState.class);\n    reset(mockCC, mockZKC, mockClusterState);\n    expect(mockCC.isZooKeeperAware()).andReturn(Boolean.TRUE).anyTimes();\n    expect(mockCC.getZkController()).andReturn(mockZKC).anyTimes();\n    expect(mockClusterState.getLiveNodes()).andReturn(liveNodes).anyTimes();\n    expect(mockZKC.getClusterState()).andReturn(mockClusterState).anyTimes();\n    replay(mockCC, mockZKC, mockClusterState);\n    return mockCC;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3d6c69b0bba4aa872a1507ecd96c7887646e9b9","date":1509820648,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreSorterTest#getMockContainer().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CoreSorterTest#getMockContainer().mjava","sourceNew":"  private CoreContainer getMockContainer() {\n    assumeWorkingMockito();\n    \n    CoreContainer mockCC = mock(CoreContainer.class);\n    ZkController mockZKC = mock(ZkController.class);\n    ClusterState mockClusterState = mock(ClusterState.class);\n    when(mockCC.isZooKeeperAware()).thenReturn(true);\n    when(mockCC.getZkController()).thenReturn(mockZKC);\n    when(mockClusterState.getLiveNodes()).thenReturn(liveNodes);\n    when(mockZKC.getClusterState()).thenReturn(mockClusterState);\n    return mockCC;\n  }\n\n","sourceOld":"  private CoreContainer getMockContainer() {\n    CoreContainer mockCC = mock(CoreContainer.class);\n    ZkController mockZKC = mock(ZkController.class);\n    ClusterState mockClusterState = mock(ClusterState.class);\n    when(mockCC.isZooKeeperAware()).thenReturn(true);\n    when(mockCC.getZkController()).thenReturn(mockZKC);\n    when(mockClusterState.getLiveNodes()).thenReturn(liveNodes);\n    when(mockZKC.getClusterState()).thenReturn(mockClusterState);\n    return mockCC;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreSorterTest#getMockContainer().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CoreSorterTest#getMockContainer().mjava","sourceNew":"  private CoreContainer getMockContainer() {\n    assumeWorkingMockito();\n    \n    CoreContainer mockCC = mock(CoreContainer.class);\n    ZkController mockZKC = mock(ZkController.class);\n    ClusterState mockClusterState = mock(ClusterState.class);\n    when(mockCC.isZooKeeperAware()).thenReturn(true);\n    when(mockCC.getZkController()).thenReturn(mockZKC);\n    when(mockClusterState.getLiveNodes()).thenReturn(liveNodes);\n    when(mockZKC.getClusterState()).thenReturn(mockClusterState);\n    return mockCC;\n  }\n\n","sourceOld":"  private CoreContainer getMockContainer() {\n    CoreContainer mockCC = mock(CoreContainer.class);\n    ZkController mockZKC = mock(ZkController.class);\n    ClusterState mockClusterState = mock(ClusterState.class);\n    when(mockCC.isZooKeeperAware()).thenReturn(true);\n    when(mockCC.getZkController()).thenReturn(mockZKC);\n    when(mockClusterState.getLiveNodes()).thenReturn(liveNodes);\n    when(mockZKC.getClusterState()).thenReturn(mockClusterState);\n    return mockCC;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"919b9b89b8d44ea491f18a92e6d52efcf5f7a065","date":1585280660,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/core/CoreSorterTest#getMockContainer().mjava","sourceNew":null,"sourceOld":"  private CoreContainer getMockContainer() {\n    assumeWorkingMockito();\n    \n    CoreContainer mockCC = mock(CoreContainer.class);\n    ZkController mockZKC = mock(ZkController.class);\n    ClusterState mockClusterState = mock(ClusterState.class);\n    when(mockCC.isZooKeeperAware()).thenReturn(true);\n    when(mockCC.getZkController()).thenReturn(mockZKC);\n    when(mockClusterState.getLiveNodes()).thenReturn(liveNodes);\n    when(mockZKC.getClusterState()).thenReturn(mockClusterState);\n    return mockCC;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"919b9b89b8d44ea491f18a92e6d52efcf5f7a065":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"e22a92d60a5a6320f9653856966fcd77c60953b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e","f3d6c69b0bba4aa872a1507ecd96c7887646e9b9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f3783d6f4d080f4f0116769e0e1b0f0f440565c4":["e22a92d60a5a6320f9653856966fcd77c60953b3"],"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e":["f3783d6f4d080f4f0116769e0e1b0f0f440565c4"],"f3d6c69b0bba4aa872a1507ecd96c7887646e9b9":["f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f3783d6f4d080f4f0116769e0e1b0f0f440565c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["919b9b89b8d44ea491f18a92e6d52efcf5f7a065"]},"commit2Childs":{"919b9b89b8d44ea491f18a92e6d52efcf5f7a065":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["919b9b89b8d44ea491f18a92e6d52efcf5f7a065"],"e22a92d60a5a6320f9653856966fcd77c60953b3":["f3783d6f4d080f4f0116769e0e1b0f0f440565c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e22a92d60a5a6320f9653856966fcd77c60953b3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"f3783d6f4d080f4f0116769e0e1b0f0f440565c4":["f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e":["d523b8189b211dd1630166aa77b8c88bb48b3fcc","f3d6c69b0bba4aa872a1507ecd96c7887646e9b9"],"f3d6c69b0bba4aa872a1507ecd96c7887646e9b9":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}