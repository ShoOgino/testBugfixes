{"path":"lucene/codecs/src/test/org/apache/lucene/codecs/blocktreeords/TestOrdsBlockTree#testBasic().mjava","commits":[{"id":"0cdf9cc6702d60334a616bd7db3ae91501d1dce7","date":1405858112,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/blocktreeords/TestOrdsBlockTree#testBasic().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    TermsEnum te = MultiFields.getTerms(r, \"field\").iterator(null);\n\n    // Test next()\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(0L, te.ord());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(1L, te.ord());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertEquals(2L, te.ord());\n    assertNull(te.next());\n\n    // Test seekExact by term\n    assertTrue(te.seekExact(new BytesRef(\"b\")));\n    assertEquals(1, te.ord());\n    assertTrue(te.seekExact(new BytesRef(\"a\")));\n    assertEquals(0, te.ord());\n    assertTrue(te.seekExact(new BytesRef(\"c\")));\n    assertEquals(2, te.ord());\n\n    // Test seekExact by ord\n    te.seekExact(1);\n    assertEquals(new BytesRef(\"b\"), te.term());\n    te.seekExact(0);\n    assertEquals(new BytesRef(\"a\"), te.term());\n    te.seekExact(2);\n    assertEquals(new BytesRef(\"c\"), te.term());\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/blocktreeords/TestOrdsBlockTree#testBasic().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/blocktreeords/TestOrdsBlockTree#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    TermsEnum te = MultiFields.getTerms(r, \"field\").iterator();\n\n    // Test next()\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(0L, te.ord());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(1L, te.ord());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertEquals(2L, te.ord());\n    assertNull(te.next());\n\n    // Test seekExact by term\n    assertTrue(te.seekExact(new BytesRef(\"b\")));\n    assertEquals(1, te.ord());\n    assertTrue(te.seekExact(new BytesRef(\"a\")));\n    assertEquals(0, te.ord());\n    assertTrue(te.seekExact(new BytesRef(\"c\")));\n    assertEquals(2, te.ord());\n\n    // Test seekExact by ord\n    te.seekExact(1);\n    assertEquals(new BytesRef(\"b\"), te.term());\n    te.seekExact(0);\n    assertEquals(new BytesRef(\"a\"), te.term());\n    te.seekExact(2);\n    assertEquals(new BytesRef(\"c\"), te.term());\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    TermsEnum te = MultiFields.getTerms(r, \"field\").iterator(null);\n\n    // Test next()\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(0L, te.ord());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(1L, te.ord());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertEquals(2L, te.ord());\n    assertNull(te.next());\n\n    // Test seekExact by term\n    assertTrue(te.seekExact(new BytesRef(\"b\")));\n    assertEquals(1, te.ord());\n    assertTrue(te.seekExact(new BytesRef(\"a\")));\n    assertEquals(0, te.ord());\n    assertTrue(te.seekExact(new BytesRef(\"c\")));\n    assertEquals(2, te.ord());\n\n    // Test seekExact by ord\n    te.seekExact(1);\n    assertEquals(new BytesRef(\"b\"), te.term());\n    te.seekExact(0);\n    assertEquals(new BytesRef(\"a\"), te.term());\n    te.seekExact(2);\n    assertEquals(new BytesRef(\"c\"), te.term());\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/blocktreeords/TestOrdsBlockTree#testBasic().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/blocktreeords/TestOrdsBlockTree#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    TermsEnum te = MultiTerms.getTerms(r, \"field\").iterator();\n\n    // Test next()\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(0L, te.ord());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(1L, te.ord());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertEquals(2L, te.ord());\n    assertNull(te.next());\n\n    // Test seekExact by term\n    assertTrue(te.seekExact(new BytesRef(\"b\")));\n    assertEquals(1, te.ord());\n    assertTrue(te.seekExact(new BytesRef(\"a\")));\n    assertEquals(0, te.ord());\n    assertTrue(te.seekExact(new BytesRef(\"c\")));\n    assertEquals(2, te.ord());\n\n    // Test seekExact by ord\n    te.seekExact(1);\n    assertEquals(new BytesRef(\"b\"), te.term());\n    te.seekExact(0);\n    assertEquals(new BytesRef(\"a\"), te.term());\n    te.seekExact(2);\n    assertEquals(new BytesRef(\"c\"), te.term());\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    TermsEnum te = MultiFields.getTerms(r, \"field\").iterator();\n\n    // Test next()\n    assertEquals(new BytesRef(\"a\"), te.next());\n    assertEquals(0L, te.ord());\n    assertEquals(new BytesRef(\"b\"), te.next());\n    assertEquals(1L, te.ord());\n    assertEquals(new BytesRef(\"c\"), te.next());\n    assertEquals(2L, te.ord());\n    assertNull(te.next());\n\n    // Test seekExact by term\n    assertTrue(te.seekExact(new BytesRef(\"b\")));\n    assertEquals(1, te.ord());\n    assertTrue(te.seekExact(new BytesRef(\"a\")));\n    assertEquals(0, te.ord());\n    assertTrue(te.seekExact(new BytesRef(\"c\")));\n    assertEquals(2, te.ord());\n\n    // Test seekExact by ord\n    te.seekExact(1);\n    assertEquals(new BytesRef(\"b\"), te.term());\n    te.seekExact(0);\n    assertEquals(new BytesRef(\"a\"), te.term());\n    te.seekExact(2);\n    assertEquals(new BytesRef(\"c\"), te.term());\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"04e775de416dd2d8067b10db1c8af975a1d5017e":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}