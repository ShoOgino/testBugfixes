{"path":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/response/BinaryResponseWriter#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * TODO -- there may be a way to do this without marshal at all...\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return a response object equivalent to what you get from the XML/JSON/javabin parser. Documents become\n   *         SolrDocuments, DocList becomes SolrDocumentList etc.\n   *\n   * @since solr 1.4\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static NamedList<Object> getParsedResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      Resolver resolver = new Resolver(req, rsp.getReturnFields());\n\n      ByteArrayOutputStream out = new ByteArrayOutputStream();\n      new JavaBinCodec(resolver).marshal(rsp.getValues(), out);\n\n      InputStream in = new ByteArrayInputStream(out.toByteArray());\n      return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n    }\n    catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * TODO -- there may be a way to do this without marshal at all...\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return a response object equivalent to what you get from the XML/JSON/javabin parser. Documents become\n   *         SolrDocuments, DocList becomes SolrDocumentList etc.\n   *\n   * @since solr 1.4\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static NamedList<Object> getParsedResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      Resolver resolver = new Resolver(req, rsp.getReturnFields());\n\n      ByteArrayOutputStream out = new ByteArrayOutputStream();\n      new JavaBinCodec(resolver).marshal(rsp.getValues(), out);\n\n      InputStream in = new ByteArrayInputStream(out.toByteArray());\n      return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n    }\n    catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/response/BinaryResponseWriter#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * TODO -- there may be a way to do this without marshal at all...\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return a response object equivalent to what you get from the XML/JSON/javabin parser. Documents become\n   *         SolrDocuments, DocList becomes SolrDocumentList etc.\n   *\n   * @since solr 1.4\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static NamedList<Object> getParsedResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      Resolver resolver = new Resolver(req, rsp.getReturnFields());\n\n      ByteArrayOutputStream out = new ByteArrayOutputStream();\n      new JavaBinCodec(resolver).marshal(rsp.getValues(), out);\n\n      InputStream in = new ByteArrayInputStream(out.toByteArray());\n      return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n    }\n    catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * TODO -- there may be a way to do this without marshal at all...\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return a response object equivalent to what you get from the XML/JSON/javabin parser. Documents become\n   *         SolrDocuments, DocList becomes SolrDocumentList etc.\n   *\n   * @since solr 1.4\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static NamedList<Object> getParsedResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      Resolver resolver = new Resolver(req, rsp.getReturnFields());\n\n      ByteArrayOutputStream out = new ByteArrayOutputStream();\n      new JavaBinCodec(resolver).marshal(rsp.getValues(), out);\n\n      InputStream in = new ByteArrayInputStream(out.toByteArray());\n      return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n    }\n    catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/response/BinaryResponseWriter#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * TODO -- there may be a way to do this without marshal at all...\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return a response object equivalent to what you get from the XML/JSON/javabin parser. Documents become\n   *         SolrDocuments, DocList becomes SolrDocumentList etc.\n   *\n   * @since solr 1.4\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static NamedList<Object> getParsedResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      Resolver resolver = new Resolver(req, rsp.getReturnFields());\n\n      ByteArrayOutputStream out = new ByteArrayOutputStream();\n      new JavaBinCodec(resolver).marshal(rsp.getValues(), out);\n\n      InputStream in = new ByteArrayInputStream(out.toByteArray());\n      return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n    }\n    catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * TODO -- there may be a way to do this without marshal at all...\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return a response object equivalent to what you get from the XML/JSON/javabin parser. Documents become\n   *         SolrDocuments, DocList becomes SolrDocumentList etc.\n   *\n   * @since solr 1.4\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static NamedList<Object> getParsedResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      Resolver resolver = new Resolver(req, rsp.getReturnFields());\n\n      ByteArrayOutputStream out = new ByteArrayOutputStream();\n      new JavaBinCodec(resolver).marshal(rsp.getValues(), out);\n\n      InputStream in = new ByteArrayInputStream(out.toByteArray());\n      return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n    }\n    catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * TODO -- there may be a way to do this without marshal at all...\n   *\n   * @return a response object equivalent to what you get from the XML/JSON/javabin parser. Documents become\n   *         SolrDocuments, DocList becomes SolrDocumentList etc.\n   *\n   * @since solr 1.4\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static NamedList<Object> getParsedResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      Resolver resolver = new Resolver(req, rsp.getReturnFields());\n\n      ByteArrayOutputStream out = new ByteArrayOutputStream();\n      new JavaBinCodec(resolver).marshal(rsp.getValues(), out);\n\n      InputStream in = new ByteArrayInputStream(out.toByteArray());\n      return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n    }\n    catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * TODO -- there may be a way to do this without marshal at all...\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return a response object equivalent to what you get from the XML/JSON/javabin parser. Documents become\n   *         SolrDocuments, DocList becomes SolrDocumentList etc.\n   *\n   * @since solr 1.4\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static NamedList<Object> getParsedResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      Resolver resolver = new Resolver(req, rsp.getReturnFields());\n\n      ByteArrayOutputStream out = new ByteArrayOutputStream();\n      new JavaBinCodec(resolver).marshal(rsp.getValues(), out);\n\n      InputStream in = new ByteArrayInputStream(out.toByteArray());\n      return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n    }\n    catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * TODO -- there may be a way to do this without marshal at all...\n   *\n   * @return a response object equivalent to what you get from the XML/JSON/javabin parser. Documents become\n   *         SolrDocuments, DocList becomes SolrDocumentList etc.\n   *\n   * @since solr 1.4\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static NamedList<Object> getParsedResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      Resolver resolver = new Resolver(req, rsp.getReturnFields());\n\n      ByteArrayOutputStream out = new ByteArrayOutputStream();\n      new JavaBinCodec(resolver).marshal(rsp.getValues(), out);\n\n      InputStream in = new ByteArrayInputStream(out.toByteArray());\n      return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n    }\n    catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * TODO -- there may be a way to do this without marshal at all...\n   *\n   * @return a response object equivalent to what you get from the XML/JSON/javabin parser. Documents become\n   *         SolrDocuments, DocList becomes SolrDocumentList etc.\n   *\n   * @since solr 1.4\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static NamedList<Object> getParsedResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      Resolver resolver = new Resolver(req, rsp.getReturnFields());\n\n      ByteArrayOutputStream out = new ByteArrayOutputStream();\n      new JavaBinCodec(resolver).marshal(rsp.getValues(), out);\n\n      InputStream in = new ByteArrayInputStream(out.toByteArray());\n      return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n    }\n    catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * TODO -- there may be a way to do this without marshal at all...\n   *\n   * @return a response object equivalent to what you get from the XML/JSON/javabin parser. Documents become\n   *         SolrDocuments, DocList becomes SolrDocumentList etc.\n   *\n   * @since solr 1.4\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static NamedList<Object> getParsedResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      Resolver resolver = new Resolver(req, rsp.getReturnFields());\n\n      ByteArrayOutputStream out = new ByteArrayOutputStream();\n      new JavaBinCodec(resolver).marshal(rsp.getValues(), out);\n\n      InputStream in = new ByteArrayInputStream(out.toByteArray());\n      return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n    }\n    catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * TODO -- there may be a way to do this without marshal at all...\n   *\n   * @return a response object equivalent to what you get from the XML/JSON/javabin parser. Documents become\n   *         SolrDocuments, DocList becomes SolrDocumentList etc.\n   *\n   * @since solr 1.4\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static NamedList<Object> getParsedResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      Resolver resolver = new Resolver(req, rsp.getReturnFields());\n\n      ByteArrayOutputStream out = new ByteArrayOutputStream();\n      new JavaBinCodec(resolver).marshal(rsp.getValues(), out);\n\n      InputStream in = new ByteArrayInputStream(out.toByteArray());\n      return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n    }\n    catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9","date":1434467834,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * TODO -- there may be a way to do this without marshal at all...\n   *\n   * @return a response object equivalent to what you get from the XML/JSON/javabin parser. Documents become\n   *         SolrDocuments, DocList becomes SolrDocumentList etc.\n   *\n   * @since solr 1.4\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static NamedList<Object> getParsedResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      Resolver resolver = new Resolver(req, rsp.getReturnFields());\n\n      ByteArrayOutputStream out = new ByteArrayOutputStream();\n      new JavaBinCodec(resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n      InputStream in = new ByteArrayInputStream(out.toByteArray());\n      return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n    }\n    catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * TODO -- there may be a way to do this without marshal at all...\n   *\n   * @return a response object equivalent to what you get from the XML/JSON/javabin parser. Documents become\n   *         SolrDocuments, DocList becomes SolrDocumentList etc.\n   *\n   * @since solr 1.4\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static NamedList<Object> getParsedResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      Resolver resolver = new Resolver(req, rsp.getReturnFields());\n\n      ByteArrayOutputStream out = new ByteArrayOutputStream();\n      new JavaBinCodec(resolver).marshal(rsp.getValues(), out);\n\n      InputStream in = new ByteArrayInputStream(out.toByteArray());\n      return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n    }\n    catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1dd4c767080690e6ad6aa46d1722fd11ca163b0","date":1463951417,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * TODO -- there may be a way to do this without marshal at all...\n   *\n   * @return a response object equivalent to what you get from the XML/JSON/javabin parser. Documents become\n   *         SolrDocuments, DocList becomes SolrDocumentList etc.\n   *\n   * @since solr 1.4\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static NamedList<Object> getParsedResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      Resolver resolver = new Resolver(req, rsp.getReturnFields());\n\n      ByteArrayOutputStream out = new ByteArrayOutputStream();\n      new JavaBinCodec(resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n      InputStream in = out.toInputStream();\n      return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n    }\n    catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * TODO -- there may be a way to do this without marshal at all...\n   *\n   * @return a response object equivalent to what you get from the XML/JSON/javabin parser. Documents become\n   *         SolrDocuments, DocList becomes SolrDocumentList etc.\n   *\n   * @since solr 1.4\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static NamedList<Object> getParsedResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      Resolver resolver = new Resolver(req, rsp.getReturnFields());\n\n      ByteArrayOutputStream out = new ByteArrayOutputStream();\n      new JavaBinCodec(resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n      InputStream in = new ByteArrayInputStream(out.toByteArray());\n      return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n    }\n    catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * TODO -- there may be a way to do this without marshal at all...\n   *\n   * @return a response object equivalent to what you get from the XML/JSON/javabin parser. Documents become\n   *         SolrDocuments, DocList becomes SolrDocumentList etc.\n   *\n   * @since solr 1.4\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static NamedList<Object> getParsedResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      Resolver resolver = new Resolver(req, rsp.getReturnFields());\n\n      ByteArrayOutputStream out = new ByteArrayOutputStream();\n      new JavaBinCodec(resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n      InputStream in = out.toInputStream();\n      return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n    }\n    catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * TODO -- there may be a way to do this without marshal at all...\n   *\n   * @return a response object equivalent to what you get from the XML/JSON/javabin parser. Documents become\n   *         SolrDocuments, DocList becomes SolrDocumentList etc.\n   *\n   * @since solr 1.4\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static NamedList<Object> getParsedResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      Resolver resolver = new Resolver(req, rsp.getReturnFields());\n\n      ByteArrayOutputStream out = new ByteArrayOutputStream();\n      new JavaBinCodec(resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n      InputStream in = new ByteArrayInputStream(out.toByteArray());\n      return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n    }\n    catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * TODO -- there may be a way to do this without marshal at all...\n   *\n   * @return a response object equivalent to what you get from the XML/JSON/javabin parser. Documents become\n   *         SolrDocuments, DocList becomes SolrDocumentList etc.\n   *\n   * @since solr 1.4\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static NamedList<Object> getParsedResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      Resolver resolver = new Resolver(req, rsp.getReturnFields());\n\n      ByteArrayOutputStream out = new ByteArrayOutputStream();\n      new JavaBinCodec(resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n      InputStream in = out.toInputStream();\n      return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n    }\n    catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * TODO -- there may be a way to do this without marshal at all...\n   *\n   * @return a response object equivalent to what you get from the XML/JSON/javabin parser. Documents become\n   *         SolrDocuments, DocList becomes SolrDocumentList etc.\n   *\n   * @since solr 1.4\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static NamedList<Object> getParsedResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      Resolver resolver = new Resolver(req, rsp.getReturnFields());\n\n      ByteArrayOutputStream out = new ByteArrayOutputStream();\n      new JavaBinCodec(resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n      InputStream in = new ByteArrayInputStream(out.toByteArray());\n      return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n    }\n    catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2","date":1497850557,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * TODO -- there may be a way to do this without marshal at all...\n   *\n   * @return a response object equivalent to what you get from the XML/JSON/javabin parser. Documents become\n   *         SolrDocuments, DocList becomes SolrDocumentList etc.\n   *\n   * @since solr 1.4\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static NamedList<Object> getParsedResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      Resolver resolver = new Resolver(req, rsp.getReturnFields());\n\n      ByteArrayOutputStream out = new ByteArrayOutputStream();\n      try (JavaBinCodec jbc = new JavaBinCodec(resolver)) {\n        jbc.setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n      }\n\n      InputStream in = out.toInputStream();\n      try (JavaBinCodec jbc = new JavaBinCodec(resolver)) {\n        return (NamedList<Object>) jbc.unmarshal(in);\n      }\n    }\n    catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * TODO -- there may be a way to do this without marshal at all...\n   *\n   * @return a response object equivalent to what you get from the XML/JSON/javabin parser. Documents become\n   *         SolrDocuments, DocList becomes SolrDocumentList etc.\n   *\n   * @since solr 1.4\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static NamedList<Object> getParsedResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      Resolver resolver = new Resolver(req, rsp.getReturnFields());\n\n      ByteArrayOutputStream out = new ByteArrayOutputStream();\n      new JavaBinCodec(resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n      InputStream in = out.toInputStream();\n      return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n    }\n    catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * TODO -- there may be a way to do this without marshal at all...\n   *\n   * @return a response object equivalent to what you get from the XML/JSON/javabin parser. Documents become\n   *         SolrDocuments, DocList becomes SolrDocumentList etc.\n   *\n   * @since solr 1.4\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static NamedList<Object> getParsedResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      Resolver resolver = new Resolver(req, rsp.getReturnFields());\n\n      ByteArrayOutputStream out = new ByteArrayOutputStream();\n      try (JavaBinCodec jbc = new JavaBinCodec(resolver)) {\n        jbc.setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n      }\n\n      InputStream in = out.toInputStream();\n      try (JavaBinCodec jbc = new JavaBinCodec(resolver)) {\n        return (NamedList<Object>) jbc.unmarshal(in);\n      }\n    }\n    catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * TODO -- there may be a way to do this without marshal at all...\n   *\n   * @return a response object equivalent to what you get from the XML/JSON/javabin parser. Documents become\n   *         SolrDocuments, DocList becomes SolrDocumentList etc.\n   *\n   * @since solr 1.4\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static NamedList<Object> getParsedResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      Resolver resolver = new Resolver(req, rsp.getReturnFields());\n\n      ByteArrayOutputStream out = new ByteArrayOutputStream();\n      new JavaBinCodec(resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n      InputStream in = out.toInputStream();\n      return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n    }\n    catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * TODO -- there may be a way to do this without marshal at all...\n   *\n   * @return a response object equivalent to what you get from the XML/JSON/javabin parser. Documents become\n   *         SolrDocuments, DocList becomes SolrDocumentList etc.\n   *\n   * @since solr 1.4\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static NamedList<Object> getParsedResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      Resolver resolver = new Resolver(req, rsp.getReturnFields());\n\n      ByteArrayOutputStream out = new ByteArrayOutputStream();\n      try (JavaBinCodec jbc = new JavaBinCodec(resolver)) {\n        jbc.setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n      }\n\n      InputStream in = out.toInputStream();\n      try (JavaBinCodec jbc = new JavaBinCodec(resolver)) {\n        return (NamedList<Object>) jbc.unmarshal(in);\n      }\n    }\n    catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * TODO -- there may be a way to do this without marshal at all...\n   *\n   * @return a response object equivalent to what you get from the XML/JSON/javabin parser. Documents become\n   *         SolrDocuments, DocList becomes SolrDocumentList etc.\n   *\n   * @since solr 1.4\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static NamedList<Object> getParsedResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      Resolver resolver = new Resolver(req, rsp.getReturnFields());\n\n      ByteArrayOutputStream out = new ByteArrayOutputStream();\n      new JavaBinCodec(resolver).setWritableDocFields(resolver).marshal(rsp.getValues(), out);\n\n      InputStream in = out.toInputStream();\n      return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n    }\n    catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["c26f00b574427b55127e869b935845554afde1fa"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"28288370235ed02234a64753cdbf0c6ec096304a":["d470c8182e92b264680e34081b75e70a9f2b3c89","97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9","a1dd4c767080690e6ad6aa46d1722fd11ca163b0"],"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"a1dd4c767080690e6ad6aa46d1722fd11ca163b0":["b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["d470c8182e92b264680e34081b75e70a9f2b3c89","97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c26f00b574427b55127e869b935845554afde1fa":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["28288370235ed02234a64753cdbf0c6ec096304a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a1dd4c767080690e6ad6aa46d1722fd11ca163b0":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","a1dd4c767080690e6ad6aa46d1722fd11ca163b0"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a258fbb26824fd104ed795e5d9033d2d040049ee","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}