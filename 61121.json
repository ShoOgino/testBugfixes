{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toShape(Calendar).mjava","commits":[{"id":"8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093","date":1401932592,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toShape(Calendar).mjava","pathOld":"/dev/null","sourceNew":"  /** Converts the Calendar into a Shape.\n   * The isSet() state of the Calendar is re-instated when done. */\n  public Shape toShape(Calendar cal) {\n    // Convert a Calendar into a stack of cell numbers\n    final int calPrecField = getCalPrecisionField(cal);//must call first; getters set all fields\n    try {\n      int[] valStack = new int[maxLevels];//starts at level 1, not 0\n      int len = 0;\n      if (calPrecField >= Calendar.YEAR) {//year or better precision\n        int year = cal.get(Calendar.YEAR);\n        int yearAdj = cal.get(Calendar.ERA) == 0 ? AD_YEAR_BASE - (year - 1) : AD_YEAR_BASE + year;\n\n        valStack[len++] = yearAdj / 1000_000;\n        yearAdj -= valStack[len-1] * 1000_000;\n        valStack[len++] = yearAdj / 1000;\n        yearAdj -= valStack[len-1] * 1000;\n        valStack[len++] = yearAdj;\n        for (int level = yearLevel+1; level < FIELD_BY_LEVEL.length; level++) {\n          int field = FIELD_BY_LEVEL[level];\n          if (field > calPrecField)\n            break;\n          valStack[len++] = cal.get(field) - cal.getActualMinimum(field);\n        }\n      }\n\n      return toShape(valStack, len);\n    } finally {\n      clearFieldsAfter(cal, calPrecField);//restore precision state modified by get()\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb53c8e9da2afe33252ee698dda412264252cfa7","date":1418531581,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toShape(Calendar).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toShape(Calendar).mjava","sourceNew":"  /** Converts the Calendar into a Shape.\n   * The isSet() state of the Calendar is re-instated when done. */\n  public UnitNRShape toShape(Calendar cal) {\n    // Convert a Calendar into a stack of cell numbers\n    final int calPrecField = getCalPrecisionField(cal);//must call first; getters set all fields\n    try {\n      int[] valStack = new int[maxLevels];//starts at level 1, not 0\n      int len = 0;\n      if (calPrecField >= Calendar.YEAR) {//year or better precision\n        int year = cal.get(Calendar.YEAR);\n        int yearAdj = cal.get(Calendar.ERA) == 0 ? AD_YEAR_BASE - (year - 1) : AD_YEAR_BASE + year;\n\n        valStack[len++] = yearAdj / 1000_000;\n        yearAdj -= valStack[len-1] * 1000_000;\n        valStack[len++] = yearAdj / 1000;\n        yearAdj -= valStack[len-1] * 1000;\n        valStack[len++] = yearAdj;\n        for (int level = yearLevel+1; level < FIELD_BY_LEVEL.length; level++) {\n          int field = FIELD_BY_LEVEL[level];\n          if (field > calPrecField)\n            break;\n          valStack[len++] = cal.get(field) - cal.getActualMinimum(field);\n        }\n      }\n\n      return toShape(valStack, len);\n    } finally {\n      clearFieldsAfter(cal, calPrecField);//restore precision state modified by get()\n    }\n  }\n\n","sourceOld":"  /** Converts the Calendar into a Shape.\n   * The isSet() state of the Calendar is re-instated when done. */\n  public Shape toShape(Calendar cal) {\n    // Convert a Calendar into a stack of cell numbers\n    final int calPrecField = getCalPrecisionField(cal);//must call first; getters set all fields\n    try {\n      int[] valStack = new int[maxLevels];//starts at level 1, not 0\n      int len = 0;\n      if (calPrecField >= Calendar.YEAR) {//year or better precision\n        int year = cal.get(Calendar.YEAR);\n        int yearAdj = cal.get(Calendar.ERA) == 0 ? AD_YEAR_BASE - (year - 1) : AD_YEAR_BASE + year;\n\n        valStack[len++] = yearAdj / 1000_000;\n        yearAdj -= valStack[len-1] * 1000_000;\n        valStack[len++] = yearAdj / 1000;\n        yearAdj -= valStack[len-1] * 1000;\n        valStack[len++] = yearAdj;\n        for (int level = yearLevel+1; level < FIELD_BY_LEVEL.length; level++) {\n          int field = FIELD_BY_LEVEL[level];\n          if (field > calPrecField)\n            break;\n          valStack[len++] = cal.get(field) - cal.getActualMinimum(field);\n        }\n      }\n\n      return toShape(valStack, len);\n    } finally {\n      clearFieldsAfter(cal, calPrecField);//restore precision state modified by get()\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toShape(Calendar).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toShape(Calendar).mjava","sourceNew":"  /** Converts the Calendar into a Shape.\n   * The isSet() state of the Calendar is re-instated when done. */\n  public UnitNRShape toShape(Calendar cal) {\n    // Convert a Calendar into a stack of cell numbers\n    final int calPrecField = getCalPrecisionField(cal);//must call first; getters set all fields\n    try {\n      int[] valStack = new int[maxLevels];//starts at level 1, not 0\n      int len = 0;\n      if (calPrecField >= Calendar.YEAR) {//year or better precision\n        int year = cal.get(Calendar.YEAR);\n        int yearAdj = cal.get(Calendar.ERA) == 0 ? AD_YEAR_BASE - (year - 1) : AD_YEAR_BASE + year;\n\n        valStack[len++] = yearAdj / 1000_000;\n        yearAdj -= valStack[len-1] * 1000_000;\n        valStack[len++] = yearAdj / 1000;\n        yearAdj -= valStack[len-1] * 1000;\n        valStack[len++] = yearAdj;\n        for (int level = yearLevel+1; level < FIELD_BY_LEVEL.length; level++) {\n          int field = FIELD_BY_LEVEL[level];\n          if (field > calPrecField)\n            break;\n          valStack[len++] = cal.get(field) - cal.getActualMinimum(field);\n        }\n      }\n\n      return toShape(valStack, len);\n    } finally {\n      clearFieldsAfter(cal, calPrecField);//restore precision state modified by get()\n    }\n  }\n\n","sourceOld":"  /** Converts the Calendar into a Shape.\n   * The isSet() state of the Calendar is re-instated when done. */\n  public UnitNRShape toShape(Calendar cal) {\n    // Convert a Calendar into a stack of cell numbers\n    final int calPrecField = getCalPrecisionField(cal);//must call first; getters set all fields\n    try {\n      int[] valStack = new int[maxLevels];//starts at level 1, not 0\n      int len = 0;\n      if (calPrecField >= Calendar.YEAR) {//year or better precision\n        int year = cal.get(Calendar.YEAR);\n        int yearAdj = cal.get(Calendar.ERA) == 0 ? AD_YEAR_BASE - (year - 1) : AD_YEAR_BASE + year;\n\n        valStack[len++] = yearAdj / 1000_000;\n        yearAdj -= valStack[len-1] * 1000_000;\n        valStack[len++] = yearAdj / 1000;\n        yearAdj -= valStack[len-1] * 1000;\n        valStack[len++] = yearAdj;\n        for (int level = yearLevel+1; level < FIELD_BY_LEVEL.length; level++) {\n          int field = FIELD_BY_LEVEL[level];\n          if (field > calPrecField)\n            break;\n          valStack[len++] = cal.get(field) - cal.getActualMinimum(field);\n        }\n      }\n\n      return toShape(valStack, len);\n    } finally {\n      clearFieldsAfter(cal, calPrecField);//restore precision state modified by get()\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toShape(Calendar).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toShape(Calendar).mjava","sourceNew":"  /** Converts the Calendar into a Shape.\n   * The isSet() state of the Calendar is re-instated when done. */\n  public UnitNRShape toShape(Calendar cal) {\n    // Convert a Calendar into a stack of cell numbers\n    final int calPrecField = getCalPrecisionField(cal);//must call first; getters set all fields\n    try {\n      int[] valStack = new int[maxLevels];//starts at level 1, not 0\n      int len = 0;\n      if (calPrecField >= Calendar.YEAR) {//year or better precision\n        int year = cal.get(Calendar.YEAR);\n        int yearAdj = cal.get(Calendar.ERA) == 0 ? AD_YEAR_BASE - (year - 1) : AD_YEAR_BASE + year;\n\n        valStack[len++] = yearAdj / 1000_000;\n        yearAdj -= valStack[len-1] * 1000_000;\n        valStack[len++] = yearAdj / 1000;\n        yearAdj -= valStack[len-1] * 1000;\n        valStack[len++] = yearAdj;\n        for (int level = yearLevel+1; level < FIELD_BY_LEVEL.length; level++) {\n          int field = FIELD_BY_LEVEL[level];\n          if (field > calPrecField)\n            break;\n          valStack[len++] = cal.get(field) - cal.getActualMinimum(field);\n        }\n      }\n\n      return toShape(valStack, len);\n    } finally {\n      clearFieldsAfter(cal, calPrecField);//restore precision state modified by get()\n    }\n  }\n\n","sourceOld":"  /** Converts the Calendar into a Shape.\n   * The isSet() state of the Calendar is re-instated when done. */\n  public UnitNRShape toShape(Calendar cal) {\n    // Convert a Calendar into a stack of cell numbers\n    final int calPrecField = getCalPrecisionField(cal);//must call first; getters set all fields\n    try {\n      int[] valStack = new int[maxLevels];//starts at level 1, not 0\n      int len = 0;\n      if (calPrecField >= Calendar.YEAR) {//year or better precision\n        int year = cal.get(Calendar.YEAR);\n        int yearAdj = cal.get(Calendar.ERA) == 0 ? AD_YEAR_BASE - (year - 1) : AD_YEAR_BASE + year;\n\n        valStack[len++] = yearAdj / 1000_000;\n        yearAdj -= valStack[len-1] * 1000_000;\n        valStack[len++] = yearAdj / 1000;\n        yearAdj -= valStack[len-1] * 1000;\n        valStack[len++] = yearAdj;\n        for (int level = yearLevel+1; level < FIELD_BY_LEVEL.length; level++) {\n          int field = FIELD_BY_LEVEL[level];\n          if (field > calPrecField)\n            break;\n          valStack[len++] = cal.get(field) - cal.getActualMinimum(field);\n        }\n      }\n\n      return toShape(valStack, len);\n    } finally {\n      clearFieldsAfter(cal, calPrecField);//restore precision state modified by get()\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["cb53c8e9da2afe33252ee698dda412264252cfa7","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["cb53c8e9da2afe33252ee698dda412264252cfa7"],"8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"],"cb53c8e9da2afe33252ee698dda412264252cfa7":["8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093":["cb53c8e9da2afe33252ee698dda412264252cfa7"],"cb53c8e9da2afe33252ee698dda412264252cfa7":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}