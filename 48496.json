{"path":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testAppend().mjava","commits":[{"id":"0aab6e810b4b0d3743d6a048be0602801f4b3920","date":1308671625,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testAppend().mjava","pathOld":"/dev/null","sourceNew":"  public void testAppend() throws IOException {\n    Directory newDir = newDirectory();\n    CompoundFileDirectory csw = newDir.createCompoundOutput(\"d.cfs\");\n    int size = 5 + random.nextInt(128);\n    for (int j = 0; j < 2; j++) {\n      IndexOutput os = csw.createOutput(\"seg\" + j + \"_foo.txt\");\n      for (int i = 0; i < size; i++) {\n        os.writeInt(i);\n      }\n      os.close();\n      String[] listAll = newDir.listAll();\n      assertEquals(1, listAll.length);\n      assertEquals(\"d.cfs\", listAll[0]);\n    }\n    createSequenceFile(dir, \"d1\", (byte) 0, 15);\n    dir.copy(csw, \"d1\", \"d1\");\n    String[] listAll = newDir.listAll();\n    assertEquals(1, listAll.length);\n    assertEquals(\"d.cfs\", listAll[0]);\n    csw.close();\n    CompoundFileDirectory csr = newDir.openCompoundInput(\"d.cfs\", 1024);\n    for (int j = 0; j < 2; j++) {\n      IndexInput openInput = csr.openInput(\"seg\" + j + \"_foo.txt\");\n      assertEquals(size * 4, openInput.length());\n      for (int i = 0; i < size; i++) {\n        assertEquals(i, openInput.readInt());\n      }\n\n      openInput.close();\n\n    }\n    IndexInput expected = dir.openInput(\"d1\");\n    IndexInput actual = csr.openInput(\"d1\");\n    assertSameStreams(\"d1\", expected, actual);\n    assertSameSeekBehavior(\"d1\", expected, actual);\n    expected.close();\n    actual.close();\n    csr.close();\n    newDir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testAppend().mjava","pathOld":"/dev/null","sourceNew":"  public void testAppend() throws IOException {\n    Directory newDir = newDirectory();\n    CompoundFileDirectory csw = newDir.createCompoundOutput(\"d.cfs\");\n    int size = 5 + random.nextInt(128);\n    for (int j = 0; j < 2; j++) {\n      IndexOutput os = csw.createOutput(\"seg\" + j + \"_foo.txt\");\n      for (int i = 0; i < size; i++) {\n        os.writeInt(i);\n      }\n      os.close();\n      String[] listAll = newDir.listAll();\n      assertEquals(1, listAll.length);\n      assertEquals(\"d.cfs\", listAll[0]);\n    }\n    createSequenceFile(dir, \"d1\", (byte) 0, 15);\n    dir.copy(csw, \"d1\", \"d1\");\n    String[] listAll = newDir.listAll();\n    assertEquals(1, listAll.length);\n    assertEquals(\"d.cfs\", listAll[0]);\n    csw.close();\n    CompoundFileDirectory csr = newDir.openCompoundInput(\"d.cfs\", 1024);\n    for (int j = 0; j < 2; j++) {\n      IndexInput openInput = csr.openInput(\"seg\" + j + \"_foo.txt\");\n      assertEquals(size * 4, openInput.length());\n      for (int i = 0; i < size; i++) {\n        assertEquals(i, openInput.readInt());\n      }\n\n      openInput.close();\n\n    }\n    IndexInput expected = dir.openInput(\"d1\");\n    IndexInput actual = csr.openInput(\"d1\");\n    assertSameStreams(\"d1\", expected, actual);\n    assertSameSeekBehavior(\"d1\", expected, actual);\n    expected.close();\n    actual.close();\n    csr.close();\n    newDir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testAppend().mjava","pathOld":"/dev/null","sourceNew":"  public void testAppend() throws IOException {\n    Directory newDir = newDirectory();\n    CompoundFileDirectory csw = newDir.createCompoundOutput(\"d.cfs\", newIOContext(random));\n    int size = 5 + random.nextInt(128);\n    for (int j = 0; j < 2; j++) {\n      IndexOutput os = csw.createOutput(\"seg\" + j + \"_foo.txt\", newIOContext(random));\n      for (int i = 0; i < size; i++) {\n        os.writeInt(i);\n      }\n      os.close();\n      String[] listAll = newDir.listAll();\n      assertEquals(1, listAll.length);\n      assertEquals(\"d.cfs\", listAll[0]);\n    }\n    createSequenceFile(dir, \"d1\", (byte) 0, 15);\n    dir.copy(csw, \"d1\", \"d1\", newIOContext(random));\n    String[] listAll = newDir.listAll();\n    assertEquals(1, listAll.length);\n    assertEquals(\"d.cfs\", listAll[0]);\n    csw.close();\n    CompoundFileDirectory csr = newDir.openCompoundInput(\"d.cfs\", newIOContext(random));\n    for (int j = 0; j < 2; j++) {\n      IndexInput openInput = csr.openInput(\"seg\" + j + \"_foo.txt\", newIOContext(random));\n      assertEquals(size * 4, openInput.length());\n      for (int i = 0; i < size; i++) {\n        assertEquals(i, openInput.readInt());\n      }\n\n      openInput.close();\n\n    }\n    IndexInput expected = dir.openInput(\"d1\", newIOContext(random));\n    IndexInput actual = csr.openInput(\"d1\", newIOContext(random));\n    assertSameStreams(\"d1\", expected, actual);\n    assertSameSeekBehavior(\"d1\", expected, actual);\n    expected.close();\n    actual.close();\n    csr.close();\n    newDir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testAppend().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testAppend().mjava","sourceNew":"  public void testAppend() throws IOException {\n    Directory newDir = newDirectory();\n    CompoundFileDirectory csw = newDir.createCompoundOutput(\"d.cfs\", newIOContext(random));\n    int size = 5 + random.nextInt(128);\n    for (int j = 0; j < 2; j++) {\n      IndexOutput os = csw.createOutput(\"seg\" + j + \"_foo.txt\", newIOContext(random));\n      for (int i = 0; i < size; i++) {\n        os.writeInt(i);\n      }\n      os.close();\n      String[] listAll = newDir.listAll();\n      assertEquals(1, listAll.length);\n      assertEquals(\"d.cfs\", listAll[0]);\n    }\n    createSequenceFile(dir, \"d1\", (byte) 0, 15);\n    dir.copy(csw, \"d1\", \"d1\", newIOContext(random));\n    String[] listAll = newDir.listAll();\n    assertEquals(1, listAll.length);\n    assertEquals(\"d.cfs\", listAll[0]);\n    csw.close();\n    CompoundFileDirectory csr = newDir.openCompoundInput(\"d.cfs\", newIOContext(random));\n    for (int j = 0; j < 2; j++) {\n      IndexInput openInput = csr.openInput(\"seg\" + j + \"_foo.txt\", newIOContext(random));\n      assertEquals(size * 4, openInput.length());\n      for (int i = 0; i < size; i++) {\n        assertEquals(i, openInput.readInt());\n      }\n\n      openInput.close();\n\n    }\n    IndexInput expected = dir.openInput(\"d1\", newIOContext(random));\n    IndexInput actual = csr.openInput(\"d1\", newIOContext(random));\n    assertSameStreams(\"d1\", expected, actual);\n    assertSameSeekBehavior(\"d1\", expected, actual);\n    expected.close();\n    actual.close();\n    csr.close();\n    newDir.close();\n  }\n\n","sourceOld":"  public void testAppend() throws IOException {\n    Directory newDir = newDirectory();\n    CompoundFileDirectory csw = newDir.createCompoundOutput(\"d.cfs\");\n    int size = 5 + random.nextInt(128);\n    for (int j = 0; j < 2; j++) {\n      IndexOutput os = csw.createOutput(\"seg\" + j + \"_foo.txt\");\n      for (int i = 0; i < size; i++) {\n        os.writeInt(i);\n      }\n      os.close();\n      String[] listAll = newDir.listAll();\n      assertEquals(1, listAll.length);\n      assertEquals(\"d.cfs\", listAll[0]);\n    }\n    createSequenceFile(dir, \"d1\", (byte) 0, 15);\n    dir.copy(csw, \"d1\", \"d1\");\n    String[] listAll = newDir.listAll();\n    assertEquals(1, listAll.length);\n    assertEquals(\"d.cfs\", listAll[0]);\n    csw.close();\n    CompoundFileDirectory csr = newDir.openCompoundInput(\"d.cfs\", 1024);\n    for (int j = 0; j < 2; j++) {\n      IndexInput openInput = csr.openInput(\"seg\" + j + \"_foo.txt\");\n      assertEquals(size * 4, openInput.length());\n      for (int i = 0; i < size; i++) {\n        assertEquals(i, openInput.readInt());\n      }\n\n      openInput.close();\n\n    }\n    IndexInput expected = dir.openInput(\"d1\");\n    IndexInput actual = csr.openInput(\"d1\");\n    assertSameStreams(\"d1\", expected, actual);\n    assertSameSeekBehavior(\"d1\", expected, actual);\n    expected.close();\n    actual.close();\n    csr.close();\n    newDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testAppend().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testAppend().mjava","sourceNew":"  public void testAppend() throws IOException {\n    Directory newDir = newDirectory();\n    CompoundFileDirectory csw = newDir.createCompoundOutput(\"d.cfs\", newIOContext(random));\n    int size = 5 + random.nextInt(128);\n    for (int j = 0; j < 2; j++) {\n      IndexOutput os = csw.createOutput(\"seg\" + j + \"_foo.txt\", newIOContext(random));\n      for (int i = 0; i < size; i++) {\n        os.writeInt(i);\n      }\n      os.close();\n      String[] listAll = newDir.listAll();\n      assertEquals(1, listAll.length);\n      assertEquals(\"d.cfs\", listAll[0]);\n    }\n    createSequenceFile(dir, \"d1\", (byte) 0, 15);\n    dir.copy(csw, \"d1\", \"d1\", newIOContext(random));\n    String[] listAll = newDir.listAll();\n    assertEquals(1, listAll.length);\n    assertEquals(\"d.cfs\", listAll[0]);\n    csw.close();\n    CompoundFileDirectory csr = newDir.openCompoundInput(\"d.cfs\", newIOContext(random));\n    for (int j = 0; j < 2; j++) {\n      IndexInput openInput = csr.openInput(\"seg\" + j + \"_foo.txt\", newIOContext(random));\n      assertEquals(size * 4, openInput.length());\n      for (int i = 0; i < size; i++) {\n        assertEquals(i, openInput.readInt());\n      }\n\n      openInput.close();\n\n    }\n    IndexInput expected = dir.openInput(\"d1\", newIOContext(random));\n    IndexInput actual = csr.openInput(\"d1\", newIOContext(random));\n    assertSameStreams(\"d1\", expected, actual);\n    assertSameSeekBehavior(\"d1\", expected, actual);\n    expected.close();\n    actual.close();\n    csr.close();\n    newDir.close();\n  }\n\n","sourceOld":"  public void testAppend() throws IOException {\n    Directory newDir = newDirectory();\n    CompoundFileDirectory csw = newDir.createCompoundOutput(\"d.cfs\");\n    int size = 5 + random.nextInt(128);\n    for (int j = 0; j < 2; j++) {\n      IndexOutput os = csw.createOutput(\"seg\" + j + \"_foo.txt\");\n      for (int i = 0; i < size; i++) {\n        os.writeInt(i);\n      }\n      os.close();\n      String[] listAll = newDir.listAll();\n      assertEquals(1, listAll.length);\n      assertEquals(\"d.cfs\", listAll[0]);\n    }\n    createSequenceFile(dir, \"d1\", (byte) 0, 15);\n    dir.copy(csw, \"d1\", \"d1\");\n    String[] listAll = newDir.listAll();\n    assertEquals(1, listAll.length);\n    assertEquals(\"d.cfs\", listAll[0]);\n    csw.close();\n    CompoundFileDirectory csr = newDir.openCompoundInput(\"d.cfs\", 1024);\n    for (int j = 0; j < 2; j++) {\n      IndexInput openInput = csr.openInput(\"seg\" + j + \"_foo.txt\");\n      assertEquals(size * 4, openInput.length());\n      for (int i = 0; i < size; i++) {\n        assertEquals(i, openInput.readInt());\n      }\n\n      openInput.close();\n\n    }\n    IndexInput expected = dir.openInput(\"d1\");\n    IndexInput actual = csr.openInput(\"d1\");\n    assertSameStreams(\"d1\", expected, actual);\n    assertSameSeekBehavior(\"d1\", expected, actual);\n    expected.close();\n    actual.close();\n    csr.close();\n    newDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67aadace85f701c87a4e0721eedcda25d8415a70","date":1314201925,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testAppend().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testAppend().mjava","sourceNew":"  public void testAppend() throws IOException {\n    Directory newDir = newDirectory();\n    CompoundFileDirectory csw = new CompoundFileDirectory(newDir, \"d.cfs\", newIOContext(random), true);\n    int size = 5 + random.nextInt(128);\n    for (int j = 0; j < 2; j++) {\n      IndexOutput os = csw.createOutput(\"seg\" + j + \"_foo.txt\", newIOContext(random));\n      for (int i = 0; i < size; i++) {\n        os.writeInt(i);\n      }\n      os.close();\n      String[] listAll = newDir.listAll();\n      assertEquals(1, listAll.length);\n      assertEquals(\"d.cfs\", listAll[0]);\n    }\n    createSequenceFile(dir, \"d1\", (byte) 0, 15);\n    dir.copy(csw, \"d1\", \"d1\", newIOContext(random));\n    String[] listAll = newDir.listAll();\n    assertEquals(1, listAll.length);\n    assertEquals(\"d.cfs\", listAll[0]);\n    csw.close();\n    CompoundFileDirectory csr = new CompoundFileDirectory(newDir, \"d.cfs\", newIOContext(random), false);\n    for (int j = 0; j < 2; j++) {\n      IndexInput openInput = csr.openInput(\"seg\" + j + \"_foo.txt\", newIOContext(random));\n      assertEquals(size * 4, openInput.length());\n      for (int i = 0; i < size; i++) {\n        assertEquals(i, openInput.readInt());\n      }\n\n      openInput.close();\n\n    }\n    IndexInput expected = dir.openInput(\"d1\", newIOContext(random));\n    IndexInput actual = csr.openInput(\"d1\", newIOContext(random));\n    assertSameStreams(\"d1\", expected, actual);\n    assertSameSeekBehavior(\"d1\", expected, actual);\n    expected.close();\n    actual.close();\n    csr.close();\n    newDir.close();\n  }\n\n","sourceOld":"  public void testAppend() throws IOException {\n    Directory newDir = newDirectory();\n    CompoundFileDirectory csw = newDir.createCompoundOutput(\"d.cfs\", newIOContext(random));\n    int size = 5 + random.nextInt(128);\n    for (int j = 0; j < 2; j++) {\n      IndexOutput os = csw.createOutput(\"seg\" + j + \"_foo.txt\", newIOContext(random));\n      for (int i = 0; i < size; i++) {\n        os.writeInt(i);\n      }\n      os.close();\n      String[] listAll = newDir.listAll();\n      assertEquals(1, listAll.length);\n      assertEquals(\"d.cfs\", listAll[0]);\n    }\n    createSequenceFile(dir, \"d1\", (byte) 0, 15);\n    dir.copy(csw, \"d1\", \"d1\", newIOContext(random));\n    String[] listAll = newDir.listAll();\n    assertEquals(1, listAll.length);\n    assertEquals(\"d.cfs\", listAll[0]);\n    csw.close();\n    CompoundFileDirectory csr = newDir.openCompoundInput(\"d.cfs\", newIOContext(random));\n    for (int j = 0; j < 2; j++) {\n      IndexInput openInput = csr.openInput(\"seg\" + j + \"_foo.txt\", newIOContext(random));\n      assertEquals(size * 4, openInput.length());\n      for (int i = 0; i < size; i++) {\n        assertEquals(i, openInput.readInt());\n      }\n\n      openInput.close();\n\n    }\n    IndexInput expected = dir.openInput(\"d1\", newIOContext(random));\n    IndexInput actual = csr.openInput(\"d1\", newIOContext(random));\n    assertSameStreams(\"d1\", expected, actual);\n    assertSameSeekBehavior(\"d1\", expected, actual);\n    expected.close();\n    actual.close();\n    csr.close();\n    newDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testAppend().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testAppend().mjava","sourceNew":"  public void testAppend() throws IOException {\n    Directory newDir = newDirectory();\n    CompoundFileDirectory csw = new CompoundFileDirectory(newDir, \"d.cfs\", newIOContext(random), true);\n    int size = 5 + random.nextInt(128);\n    for (int j = 0; j < 2; j++) {\n      IndexOutput os = csw.createOutput(\"seg_\" + j + \"_foo.txt\", newIOContext(random));\n      for (int i = 0; i < size; i++) {\n        os.writeInt(i*j);\n      }\n      os.close();\n      String[] listAll = newDir.listAll();\n      assertEquals(1, listAll.length);\n      assertEquals(\"d.cfs\", listAll[0]);\n    }\n    createSequenceFile(dir, \"d1\", (byte) 0, 15);\n    dir.copy(csw, \"d1\", \"d1\", newIOContext(random));\n    String[] listAll = newDir.listAll();\n    assertEquals(1, listAll.length);\n    assertEquals(\"d.cfs\", listAll[0]);\n    csw.close();\n    CompoundFileDirectory csr = new CompoundFileDirectory(newDir, \"d.cfs\", newIOContext(random), false);\n    for (int j = 0; j < 2; j++) {\n      IndexInput openInput = csr.openInput(\"seg_\" + j + \"_foo.txt\", newIOContext(random));\n      assertEquals(size * 4, openInput.length());\n      for (int i = 0; i < size; i++) {\n        assertEquals(i*j, openInput.readInt());\n      }\n\n      openInput.close();\n\n    }\n    IndexInput expected = dir.openInput(\"d1\", newIOContext(random));\n    IndexInput actual = csr.openInput(\"d1\", newIOContext(random));\n    assertSameStreams(\"d1\", expected, actual);\n    assertSameSeekBehavior(\"d1\", expected, actual);\n    expected.close();\n    actual.close();\n    csr.close();\n    newDir.close();\n  }\n\n","sourceOld":"  public void testAppend() throws IOException {\n    Directory newDir = newDirectory();\n    CompoundFileDirectory csw = new CompoundFileDirectory(newDir, \"d.cfs\", newIOContext(random), true);\n    int size = 5 + random.nextInt(128);\n    for (int j = 0; j < 2; j++) {\n      IndexOutput os = csw.createOutput(\"seg\" + j + \"_foo.txt\", newIOContext(random));\n      for (int i = 0; i < size; i++) {\n        os.writeInt(i);\n      }\n      os.close();\n      String[] listAll = newDir.listAll();\n      assertEquals(1, listAll.length);\n      assertEquals(\"d.cfs\", listAll[0]);\n    }\n    createSequenceFile(dir, \"d1\", (byte) 0, 15);\n    dir.copy(csw, \"d1\", \"d1\", newIOContext(random));\n    String[] listAll = newDir.listAll();\n    assertEquals(1, listAll.length);\n    assertEquals(\"d.cfs\", listAll[0]);\n    csw.close();\n    CompoundFileDirectory csr = new CompoundFileDirectory(newDir, \"d.cfs\", newIOContext(random), false);\n    for (int j = 0; j < 2; j++) {\n      IndexInput openInput = csr.openInput(\"seg\" + j + \"_foo.txt\", newIOContext(random));\n      assertEquals(size * 4, openInput.length());\n      for (int i = 0; i < size; i++) {\n        assertEquals(i, openInput.readInt());\n      }\n\n      openInput.close();\n\n    }\n    IndexInput expected = dir.openInput(\"d1\", newIOContext(random));\n    IndexInput actual = csr.openInput(\"d1\", newIOContext(random));\n    assertSameStreams(\"d1\", expected, actual);\n    assertSameSeekBehavior(\"d1\", expected, actual);\n    expected.close();\n    actual.close();\n    csr.close();\n    newDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testAppend().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testAppend().mjava","sourceNew":"  public void testAppend() throws IOException {\n    Directory newDir = newDirectory();\n    CompoundFileDirectory csw = new CompoundFileDirectory(newDir, \"d.cfs\", newIOContext(random), true);\n    int size = 5 + random.nextInt(128);\n    for (int j = 0; j < 2; j++) {\n      IndexOutput os = csw.createOutput(\"seg_\" + j + \"_foo.txt\", newIOContext(random));\n      for (int i = 0; i < size; i++) {\n        os.writeInt(i*j);\n      }\n      os.close();\n      String[] listAll = newDir.listAll();\n      assertEquals(1, listAll.length);\n      assertEquals(\"d.cfs\", listAll[0]);\n    }\n    createSequenceFile(dir, \"d1\", (byte) 0, 15);\n    dir.copy(csw, \"d1\", \"d1\", newIOContext(random));\n    String[] listAll = newDir.listAll();\n    assertEquals(1, listAll.length);\n    assertEquals(\"d.cfs\", listAll[0]);\n    csw.close();\n    CompoundFileDirectory csr = new CompoundFileDirectory(newDir, \"d.cfs\", newIOContext(random), false);\n    for (int j = 0; j < 2; j++) {\n      IndexInput openInput = csr.openInput(\"seg_\" + j + \"_foo.txt\", newIOContext(random));\n      assertEquals(size * 4, openInput.length());\n      for (int i = 0; i < size; i++) {\n        assertEquals(i*j, openInput.readInt());\n      }\n\n      openInput.close();\n\n    }\n    IndexInput expected = dir.openInput(\"d1\", newIOContext(random));\n    IndexInput actual = csr.openInput(\"d1\", newIOContext(random));\n    assertSameStreams(\"d1\", expected, actual);\n    assertSameSeekBehavior(\"d1\", expected, actual);\n    expected.close();\n    actual.close();\n    csr.close();\n    newDir.close();\n  }\n\n","sourceOld":"  public void testAppend() throws IOException {\n    Directory newDir = newDirectory();\n    CompoundFileDirectory csw = new CompoundFileDirectory(newDir, \"d.cfs\", newIOContext(random), true);\n    int size = 5 + random.nextInt(128);\n    for (int j = 0; j < 2; j++) {\n      IndexOutput os = csw.createOutput(\"seg_\" + j + \"_foo.txt\", newIOContext(random));\n      for (int i = 0; i < size; i++) {\n        os.writeInt(i*j);\n      }\n      os.close();\n      String[] listAll = newDir.listAll();\n      assertEquals(1, listAll.length);\n      assertEquals(\"d.cfs\", listAll[0]);\n    }\n    createSequenceFile(dir, \"d1\", (byte) 0, 15);\n    dir.copy(csw, \"d1\", \"d1\", newIOContext(random));\n    String[] listAll = newDir.listAll();\n    assertEquals(1, listAll.length);\n    assertEquals(\"d.cfs\", listAll[0]);\n    csw.close();\n    CompoundFileDirectory csr = new CompoundFileDirectory(newDir, \"d.cfs\", newIOContext(random), false);\n    for (int j = 0; j < 2; j++) {\n      IndexInput openInput = csr.openInput(\"seg_\" + j + \"_foo.txt\", newIOContext(random));\n      assertEquals(size * 4, openInput.length());\n      for (int i = 0; i < size; i++) {\n        assertEquals(i*j, openInput.readInt());\n      }\n\n      openInput.close();\n\n    }\n    IndexInput expected = dir.openInput(\"d1\", newIOContext(random));\n    IndexInput actual = csr.openInput(\"d1\", newIOContext(random));\n    assertSameStreams(\"d1\", expected, actual);\n    assertSameSeekBehavior(\"d1\", expected, actual);\n    expected.close();\n    actual.close();\n    csr.close();\n    newDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["67aadace85f701c87a4e0721eedcda25d8415a70"],"67aadace85f701c87a4e0721eedcda25d8415a70":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7b91922b55d15444d554721b352861d028eb8278"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0aab6e810b4b0d3743d6a048be0602801f4b3920":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["2553b00f699380c64959ccb27991289aae87be2e","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["0aab6e810b4b0d3743d6a048be0602801f4b3920","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"2553b00f699380c64959ccb27991289aae87be2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0aab6e810b4b0d3743d6a048be0602801f4b3920"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0aab6e810b4b0d3743d6a048be0602801f4b3920"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"67aadace85f701c87a4e0721eedcda25d8415a70":["7b91922b55d15444d554721b352861d028eb8278"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0aab6e810b4b0d3743d6a048be0602801f4b3920","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"0aab6e810b4b0d3743d6a048be0602801f4b3920":["ddc4c914be86e34b54f70023f45a60fa7f04e929","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["67aadace85f701c87a4e0721eedcda25d8415a70","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"2553b00f699380c64959ccb27991289aae87be2e":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}