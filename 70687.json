{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","sourceNew":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n    \n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      assertTrue(\"optimized used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (2*startDiskUsage) + \" (= 2X starting usage)\",\n                 maxDiskUsage <= 2*startDiskUsage);\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n    \n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      assertTrue(\"optimized used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (2*startDiskUsage) + \" (= 2X starting usage)\",\n                 maxDiskUsage <= 2*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","sourceNew":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n    \n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      assertTrue(\"optimized used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (2*startDiskUsage) + \" (= 2X starting usage)\",\n                 maxDiskUsage <= 2*startDiskUsage);\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n    \n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      assertTrue(\"optimized used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (2*startDiskUsage) + \" (= 2X starting usage)\",\n                 maxDiskUsage <= 2*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","sourceNew":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n    \n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      assertTrue(\"optimized used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (3*startDiskUsage) + \" (= 3X starting usage)\",\n                 maxDiskUsage <= 3*startDiskUsage);\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n    \n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      assertTrue(\"optimized used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (2*startDiskUsage) + \" (= 2X starting usage)\",\n                 maxDiskUsage <= 2*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":["8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","sourceNew":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n    \n      MockRAMDirectory dir = newDirectory(random);\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      assertTrue(\"optimized used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (3*startDiskUsage) + \" (= 3X starting usage)\",\n                 maxDiskUsage <= 3*startDiskUsage);\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n    \n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      assertTrue(\"optimized used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (3*startDiskUsage) + \" (= 3X starting usage)\",\n                 maxDiskUsage <= 3*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","sourceNew":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n    \n      MockDirectoryWrapper dir = newDirectory(random);\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      assertTrue(\"optimized used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (3*startDiskUsage) + \" (= 3X starting usage)\",\n                 maxDiskUsage <= 3*startDiskUsage);\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n    \n      MockRAMDirectory dir = newDirectory(random);\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      assertTrue(\"optimized used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (3*startDiskUsage) + \" (= 3X starting usage)\",\n                 maxDiskUsage <= 3*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3eaa8ca351aa7eefa5bd5bf249e9dd9bb0830c54","date":1282658201,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","sourceNew":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n    \n      MockDirectoryWrapper dir = newDirectory(random);\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      dir.setTrackDiskUsage(true);\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      assertTrue(\"optimized used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (3*startDiskUsage) + \" (= 3X starting usage)\",\n                 maxDiskUsage <= 3*startDiskUsage);\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n    \n      MockDirectoryWrapper dir = newDirectory(random);\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      assertTrue(\"optimized used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (3*startDiskUsage) + \" (= 3X starting usage)\",\n                 maxDiskUsage <= 3*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","sourceNew":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n    \n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      dir.setTrackDiskUsage(true);\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      assertTrue(\"optimized used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (3*startDiskUsage) + \" (= 3X starting usage)\",\n                 maxDiskUsage <= 3*startDiskUsage);\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n    \n      MockDirectoryWrapper dir = newDirectory(random);\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      dir.setTrackDiskUsage(true);\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      assertTrue(\"optimized used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (3*startDiskUsage) + \" (= 3X starting usage)\",\n                 maxDiskUsage <= 3*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":["8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5","date":1290247889,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","sourceNew":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n      if (VERBOSE) {\n        System.out.println(\"TEST: config1=\" + writer.getConfig());\n      }\n      \n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      final int termIndexInterval = writer.getConfig().getTermIndexInterval();\n      // force one extra segment w/ different doc store so\n      // we see the doc stores get merged\n      writer.commit();\n      addDocWithIndex(writer, 500);\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: start disk usage\");\n      }\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n        if (VERBOSE) {\n          System.out.println(files[i] + \": \" + dir.fileLength(files[i]));\n        }\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      dir.setTrackDiskUsage(true);\n\n      // Import to use same term index interval else a\n      // smaller one here could increase the disk usage and\n      // cause a false failure:\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setTermIndexInterval(termIndexInterval));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n      assertTrue(\"optimize used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (4*startDiskUsage) + \" (= 4X starting usage)\",\n                 maxDiskUsage <= 4*startDiskUsage);\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n    \n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      dir.setTrackDiskUsage(true);\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      assertTrue(\"optimized used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (3*startDiskUsage) + \" (= 3X starting usage)\",\n                 maxDiskUsage <= 3*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":["eeefd99c477417e5c7c574228461ebafe92469d4","1f653cfcf159baeaafe5d01682a911e95bba4012","b21422ff1d1d56499dec481f193b402e5e8def5b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","sourceNew":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n      if (VERBOSE) {\n        System.out.println(\"TEST: config1=\" + writer.getConfig());\n      }\n      \n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      final int termIndexInterval = writer.getConfig().getTermIndexInterval();\n      // force one extra segment w/ different doc store so\n      // we see the doc stores get merged\n      writer.commit();\n      addDocWithIndex(writer, 500);\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: start disk usage\");\n      }\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n        if (VERBOSE) {\n          System.out.println(files[i] + \": \" + dir.fileLength(files[i]));\n        }\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      dir.setTrackDiskUsage(true);\n\n      // Import to use same term index interval else a\n      // smaller one here could increase the disk usage and\n      // cause a false failure:\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setTermIndexInterval(termIndexInterval));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n      assertTrue(\"optimize used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (4*startDiskUsage) + \" (= 4X starting usage)\",\n                 maxDiskUsage <= 4*startDiskUsage);\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n    \n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      dir.setTrackDiskUsage(true);\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      assertTrue(\"optimized used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (3*startDiskUsage) + \" (= 3X starting usage)\",\n                 maxDiskUsage <= 3*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","sourceNew":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n      if (VERBOSE) {\n        System.out.println(\"TEST: config1=\" + writer.getConfig());\n      }\n\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      final int termIndexInterval = writer.getConfig().getTermIndexInterval();\n      // force one extra segment w/ different doc store so\n      // we see the doc stores get merged\n      writer.commit();\n      addDocWithIndex(writer, 500);\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: start disk usage\");\n      }\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n        if (VERBOSE) {\n          System.out.println(files[i] + \": \" + dir.fileLength(files[i]));\n        }\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      dir.setTrackDiskUsage(true);\n\n      // Import to use same term index interval else a\n      // smaller one here could increase the disk usage and\n      // cause a false failure:\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setTermIndexInterval(termIndexInterval));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n      assertTrue(\"optimize used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (4*startDiskUsage) + \" (= 4X starting usage)\",\n                 maxDiskUsage <= 4*startDiskUsage);\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n    \n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      assertTrue(\"optimized used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (2*startDiskUsage) + \" (= 2X starting usage)\",\n                 maxDiskUsage <= 2*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","sourceNew":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10).setMergePolicy(newLogMergePolicy()));\n      if (VERBOSE) {\n        System.out.println(\"TEST: config1=\" + writer.getConfig());\n      }\n      \n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      final int termIndexInterval = writer.getConfig().getTermIndexInterval();\n      // force one extra segment w/ different doc store so\n      // we see the doc stores get merged\n      writer.commit();\n      addDocWithIndex(writer, 500);\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: start disk usage\");\n      }\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n        if (VERBOSE) {\n          System.out.println(files[i] + \": \" + dir.fileLength(files[i]));\n        }\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      dir.setTrackDiskUsage(true);\n\n      // Import to use same term index interval else a\n      // smaller one here could increase the disk usage and\n      // cause a false failure:\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setTermIndexInterval(termIndexInterval));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n      assertTrue(\"optimize used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (4*startDiskUsage) + \" (= 4X starting usage)\",\n                 maxDiskUsage <= 4*startDiskUsage);\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n      if (VERBOSE) {\n        System.out.println(\"TEST: config1=\" + writer.getConfig());\n      }\n      \n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      final int termIndexInterval = writer.getConfig().getTermIndexInterval();\n      // force one extra segment w/ different doc store so\n      // we see the doc stores get merged\n      writer.commit();\n      addDocWithIndex(writer, 500);\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: start disk usage\");\n      }\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n        if (VERBOSE) {\n          System.out.println(files[i] + \": \" + dir.fileLength(files[i]));\n        }\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      dir.setTrackDiskUsage(true);\n\n      // Import to use same term index interval else a\n      // smaller one here could increase the disk usage and\n      // cause a false failure:\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setTermIndexInterval(termIndexInterval));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n      assertTrue(\"optimize used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (4*startDiskUsage) + \" (= 4X starting usage)\",\n                 maxDiskUsage <= 4*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","sourceNew":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10).setMergePolicy(newLogMergePolicy()));\n      if (VERBOSE) {\n        System.out.println(\"TEST: config1=\" + writer.getConfig());\n      }\n      \n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      final int termIndexInterval = writer.getConfig().getTermIndexInterval();\n      // force one extra segment w/ different doc store so\n      // we see the doc stores get merged\n      writer.commit();\n      addDocWithIndex(writer, 500);\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: start disk usage\");\n      }\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n        if (VERBOSE) {\n          System.out.println(files[i] + \": \" + dir.fileLength(files[i]));\n        }\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      dir.setTrackDiskUsage(true);\n\n      // Import to use same term index interval else a\n      // smaller one here could increase the disk usage and\n      // cause a false failure:\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setTermIndexInterval(termIndexInterval));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n      assertTrue(\"optimize used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (4*startDiskUsage) + \" (= 4X starting usage)\",\n                 maxDiskUsage <= 4*startDiskUsage);\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n      if (VERBOSE) {\n        System.out.println(\"TEST: config1=\" + writer.getConfig());\n      }\n      \n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      final int termIndexInterval = writer.getConfig().getTermIndexInterval();\n      // force one extra segment w/ different doc store so\n      // we see the doc stores get merged\n      writer.commit();\n      addDocWithIndex(writer, 500);\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: start disk usage\");\n      }\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n        if (VERBOSE) {\n          System.out.println(files[i] + \": \" + dir.fileLength(files[i]));\n        }\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      dir.setTrackDiskUsage(true);\n\n      // Import to use same term index interval else a\n      // smaller one here could increase the disk usage and\n      // cause a false failure:\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setTermIndexInterval(termIndexInterval));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n      assertTrue(\"optimize used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (4*startDiskUsage) + \" (= 4X starting usage)\",\n                 maxDiskUsage <= 4*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7082d10b2dbfa63b6d32f8a8291a6e65386e67d9","date":1297423949,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","sourceNew":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10).setMergePolicy(newLogMergePolicy()));\n      if (VERBOSE) {\n        System.out.println(\"TEST: config1=\" + writer.getConfig());\n      }\n      \n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      final int termIndexInterval = writer.getConfig().getTermIndexInterval();\n      // force one extra segment w/ different doc store so\n      // we see the doc stores get merged\n      writer.commit();\n      addDocWithIndex(writer, 500);\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: start disk usage\");\n      }\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n        if (VERBOSE) {\n          System.out.println(files[i] + \": \" + dir.fileLength(files[i]));\n        }\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      dir.setTrackDiskUsage(true);\n\n      // Import to use same term index interval else a\n      // smaller one here could increase the disk usage and\n      // cause a false failure:\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setTermIndexInterval(termIndexInterval).setMergePolicy(newLogMergePolicy()));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n      assertTrue(\"optimize used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (4*startDiskUsage) + \" (= 4X starting usage)\",\n                 maxDiskUsage <= 4*startDiskUsage);\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10).setMergePolicy(newLogMergePolicy()));\n      if (VERBOSE) {\n        System.out.println(\"TEST: config1=\" + writer.getConfig());\n      }\n      \n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      final int termIndexInterval = writer.getConfig().getTermIndexInterval();\n      // force one extra segment w/ different doc store so\n      // we see the doc stores get merged\n      writer.commit();\n      addDocWithIndex(writer, 500);\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: start disk usage\");\n      }\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n        if (VERBOSE) {\n          System.out.println(files[i] + \": \" + dir.fileLength(files[i]));\n        }\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      dir.setTrackDiskUsage(true);\n\n      // Import to use same term index interval else a\n      // smaller one here could increase the disk usage and\n      // cause a false failure:\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setTermIndexInterval(termIndexInterval));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n      assertTrue(\"optimize used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (4*startDiskUsage) + \" (= 4X starting usage)\",\n                 maxDiskUsage <= 4*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","sourceNew":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10).setMergePolicy(newLogMergePolicy()));\n      if (VERBOSE) {\n        System.out.println(\"TEST: config1=\" + writer.getConfig());\n      }\n      \n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      final int termIndexInterval = writer.getConfig().getTermIndexInterval();\n      // force one extra segment w/ different doc store so\n      // we see the doc stores get merged\n      writer.commit();\n      addDocWithIndex(writer, 500);\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: start disk usage\");\n      }\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n        if (VERBOSE) {\n          System.out.println(files[i] + \": \" + dir.fileLength(files[i]));\n        }\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      dir.setTrackDiskUsage(true);\n\n      // Import to use same term index interval else a\n      // smaller one here could increase the disk usage and\n      // cause a false failure:\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setTermIndexInterval(termIndexInterval).setMergePolicy(newLogMergePolicy()));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n      assertTrue(\"optimize used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (4*startDiskUsage) + \" (= 4X starting usage)\",\n                 maxDiskUsage <= 4*startDiskUsage);\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10).setMergePolicy(newLogMergePolicy()));\n      if (VERBOSE) {\n        System.out.println(\"TEST: config1=\" + writer.getConfig());\n      }\n      \n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      final int termIndexInterval = writer.getConfig().getTermIndexInterval();\n      // force one extra segment w/ different doc store so\n      // we see the doc stores get merged\n      writer.commit();\n      addDocWithIndex(writer, 500);\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: start disk usage\");\n      }\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n        if (VERBOSE) {\n          System.out.println(files[i] + \": \" + dir.fileLength(files[i]));\n        }\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      dir.setTrackDiskUsage(true);\n\n      // Import to use same term index interval else a\n      // smaller one here could increase the disk usage and\n      // cause a false failure:\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setTermIndexInterval(termIndexInterval));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n      assertTrue(\"optimize used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (4*startDiskUsage) + \" (= 4X starting usage)\",\n                 maxDiskUsage <= 4*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","sourceNew":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10).setMergePolicy(newLogMergePolicy()));\n      if (VERBOSE) {\n        System.out.println(\"TEST: config1=\" + writer.getConfig());\n      }\n\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      final int termIndexInterval = writer.getConfig().getTermIndexInterval();\n      // force one extra segment w/ different doc store so\n      // we see the doc stores get merged\n      writer.commit();\n      addDocWithIndex(writer, 500);\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: start disk usage\");\n      }\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n        if (VERBOSE) {\n          System.out.println(files[i] + \": \" + dir.fileLength(files[i]));\n        }\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      dir.setTrackDiskUsage(true);\n\n      // Import to use same term index interval else a\n      // smaller one here could increase the disk usage and\n      // cause a false failure:\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setTermIndexInterval(termIndexInterval).setMergePolicy(newLogMergePolicy()));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n      assertTrue(\"optimize used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (4*startDiskUsage) + \" (= 4X starting usage)\",\n                 maxDiskUsage <= 4*startDiskUsage);\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n      if (VERBOSE) {\n        System.out.println(\"TEST: config1=\" + writer.getConfig());\n      }\n\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      final int termIndexInterval = writer.getConfig().getTermIndexInterval();\n      // force one extra segment w/ different doc store so\n      // we see the doc stores get merged\n      writer.commit();\n      addDocWithIndex(writer, 500);\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: start disk usage\");\n      }\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n        if (VERBOSE) {\n          System.out.println(files[i] + \": \" + dir.fileLength(files[i]));\n        }\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      dir.setTrackDiskUsage(true);\n\n      // Import to use same term index interval else a\n      // smaller one here could increase the disk usage and\n      // cause a false failure:\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setTermIndexInterval(termIndexInterval));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n      assertTrue(\"optimize used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (4*startDiskUsage) + \" (= 4X starting usage)\",\n                 maxDiskUsage <= 4*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","sourceNew":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(10).setMergePolicy(newLogMergePolicy()));\n      if (VERBOSE) {\n        System.out.println(\"TEST: config1=\" + writer.getConfig());\n      }\n      \n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      final int termIndexInterval = writer.getConfig().getTermIndexInterval();\n      // force one extra segment w/ different doc store so\n      // we see the doc stores get merged\n      writer.commit();\n      addDocWithIndex(writer, 500);\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: start disk usage\");\n      }\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n        if (VERBOSE) {\n          System.out.println(files[i] + \": \" + dir.fileLength(files[i]));\n        }\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      dir.setTrackDiskUsage(true);\n\n      // Import to use same term index interval else a\n      // smaller one here could increase the disk usage and\n      // cause a false failure:\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setTermIndexInterval(termIndexInterval).setMergePolicy(newLogMergePolicy()));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n      assertTrue(\"optimize used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (4*startDiskUsage) + \" (= 4X starting usage)\",\n                 maxDiskUsage <= 4*startDiskUsage);\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10).setMergePolicy(newLogMergePolicy()));\n      if (VERBOSE) {\n        System.out.println(\"TEST: config1=\" + writer.getConfig());\n      }\n      \n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      final int termIndexInterval = writer.getConfig().getTermIndexInterval();\n      // force one extra segment w/ different doc store so\n      // we see the doc stores get merged\n      writer.commit();\n      addDocWithIndex(writer, 500);\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: start disk usage\");\n      }\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n        if (VERBOSE) {\n          System.out.println(files[i] + \": \" + dir.fileLength(files[i]));\n        }\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      dir.setTrackDiskUsage(true);\n\n      // Import to use same term index interval else a\n      // smaller one here could increase the disk usage and\n      // cause a false failure:\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setTermIndexInterval(termIndexInterval).setMergePolicy(newLogMergePolicy()));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n      assertTrue(\"optimize used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (4*startDiskUsage) + \" (= 4X starting usage)\",\n                 maxDiskUsage <= 4*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","sourceNew":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(10).setMergePolicy(newLogMergePolicy()));\n      if (VERBOSE) {\n        System.out.println(\"TEST: config1=\" + writer.getConfig());\n      }\n\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      final int termIndexInterval = writer.getConfig().getTermIndexInterval();\n      // force one extra segment w/ different doc store so\n      // we see the doc stores get merged\n      writer.commit();\n      addDocWithIndex(writer, 500);\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: start disk usage\");\n      }\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n        if (VERBOSE) {\n          System.out.println(files[i] + \": \" + dir.fileLength(files[i]));\n        }\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      dir.setTrackDiskUsage(true);\n\n      // Import to use same term index interval else a\n      // smaller one here could increase the disk usage and\n      // cause a false failure:\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setTermIndexInterval(termIndexInterval).setMergePolicy(newLogMergePolicy()));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n      assertTrue(\"optimize used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (4*startDiskUsage) + \" (= 4X starting usage)\",\n                 maxDiskUsage <= 4*startDiskUsage);\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10).setMergePolicy(newLogMergePolicy()));\n      if (VERBOSE) {\n        System.out.println(\"TEST: config1=\" + writer.getConfig());\n      }\n\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      final int termIndexInterval = writer.getConfig().getTermIndexInterval();\n      // force one extra segment w/ different doc store so\n      // we see the doc stores get merged\n      writer.commit();\n      addDocWithIndex(writer, 500);\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: start disk usage\");\n      }\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n        if (VERBOSE) {\n          System.out.println(files[i] + \": \" + dir.fileLength(files[i]));\n        }\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      dir.setTrackDiskUsage(true);\n\n      // Import to use same term index interval else a\n      // smaller one here could increase the disk usage and\n      // cause a false failure:\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setTermIndexInterval(termIndexInterval).setMergePolicy(newLogMergePolicy()));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n      assertTrue(\"optimize used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (4*startDiskUsage) + \" (= 4X starting usage)\",\n                 maxDiskUsage <= 4*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","sourceNew":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(10).setMergePolicy(newLogMergePolicy()));\n      if (VERBOSE) {\n        System.out.println(\"TEST: config1=\" + writer.getConfig());\n      }\n\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      final int termIndexInterval = writer.getConfig().getTermIndexInterval();\n      // force one extra segment w/ different doc store so\n      // we see the doc stores get merged\n      writer.commit();\n      addDocWithIndex(writer, 500);\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: start disk usage\");\n      }\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n        if (VERBOSE) {\n          System.out.println(files[i] + \": \" + dir.fileLength(files[i]));\n        }\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      dir.setTrackDiskUsage(true);\n\n      // Import to use same term index interval else a\n      // smaller one here could increase the disk usage and\n      // cause a false failure:\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setTermIndexInterval(termIndexInterval).setMergePolicy(newLogMergePolicy()));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n      assertTrue(\"optimize used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (4*startDiskUsage) + \" (= 4X starting usage)\",\n                 maxDiskUsage <= 4*startDiskUsage);\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(10).setMergePolicy(newLogMergePolicy()));\n      if (VERBOSE) {\n        System.out.println(\"TEST: config1=\" + writer.getConfig());\n      }\n      \n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      final int termIndexInterval = writer.getConfig().getTermIndexInterval();\n      // force one extra segment w/ different doc store so\n      // we see the doc stores get merged\n      writer.commit();\n      addDocWithIndex(writer, 500);\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: start disk usage\");\n      }\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n        if (VERBOSE) {\n          System.out.println(files[i] + \": \" + dir.fileLength(files[i]));\n        }\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      dir.setTrackDiskUsage(true);\n\n      // Import to use same term index interval else a\n      // smaller one here could increase the disk usage and\n      // cause a false failure:\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setTermIndexInterval(termIndexInterval).setMergePolicy(newLogMergePolicy()));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n      assertTrue(\"optimize used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (4*startDiskUsage) + \" (= 4X starting usage)\",\n                 maxDiskUsage <= 4*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","sourceNew":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(10).setMergePolicy(newLogMergePolicy()));\n      if (VERBOSE) {\n        System.out.println(\"TEST: config1=\" + writer.getConfig());\n      }\n\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      final int termIndexInterval = writer.getConfig().getTermIndexInterval();\n      // force one extra segment w/ different doc store so\n      // we see the doc stores get merged\n      writer.commit();\n      addDocWithIndex(writer, 500);\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: start disk usage\");\n      }\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n        if (VERBOSE) {\n          System.out.println(files[i] + \": \" + dir.fileLength(files[i]));\n        }\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      dir.setTrackDiskUsage(true);\n\n      // Import to use same term index interval else a\n      // smaller one here could increase the disk usage and\n      // cause a false failure:\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setTermIndexInterval(termIndexInterval).setMergePolicy(newLogMergePolicy()));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n      assertTrue(\"optimize used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (4*startDiskUsage) + \" (= 4X starting usage)\",\n                 maxDiskUsage <= 4*startDiskUsage);\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10).setMergePolicy(newLogMergePolicy()));\n      if (VERBOSE) {\n        System.out.println(\"TEST: config1=\" + writer.getConfig());\n      }\n      \n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      final int termIndexInterval = writer.getConfig().getTermIndexInterval();\n      // force one extra segment w/ different doc store so\n      // we see the doc stores get merged\n      writer.commit();\n      addDocWithIndex(writer, 500);\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: start disk usage\");\n      }\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n        if (VERBOSE) {\n          System.out.println(files[i] + \": \" + dir.fileLength(files[i]));\n        }\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      dir.setTrackDiskUsage(true);\n\n      // Import to use same term index interval else a\n      // smaller one here could increase the disk usage and\n      // cause a false failure:\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setTermIndexInterval(termIndexInterval).setMergePolicy(newLogMergePolicy()));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n      assertTrue(\"optimize used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (4*startDiskUsage) + \" (= 4X starting usage)\",\n                 maxDiskUsage <= 4*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","sourceNew":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(10).setMergePolicy(newLogMergePolicy()));\n      if (VERBOSE) {\n        System.out.println(\"TEST: config1=\" + writer.getConfig());\n      }\n\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      final int termIndexInterval = writer.getConfig().getTermIndexInterval();\n      // force one extra segment w/ different doc store so\n      // we see the doc stores get merged\n      writer.commit();\n      addDocWithIndex(writer, 500);\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: start disk usage\");\n      }\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n        if (VERBOSE) {\n          System.out.println(files[i] + \": \" + dir.fileLength(files[i]));\n        }\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      dir.setTrackDiskUsage(true);\n\n      // Import to use same term index interval else a\n      // smaller one here could increase the disk usage and\n      // cause a false failure:\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setTermIndexInterval(termIndexInterval).setMergePolicy(newLogMergePolicy()));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n      assertTrue(\"optimize used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (4*startDiskUsage) + \" (= 4X starting usage)\",\n                 maxDiskUsage <= 4*startDiskUsage);\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10).setMergePolicy(newLogMergePolicy()));\n      if (VERBOSE) {\n        System.out.println(\"TEST: config1=\" + writer.getConfig());\n      }\n      \n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      final int termIndexInterval = writer.getConfig().getTermIndexInterval();\n      // force one extra segment w/ different doc store so\n      // we see the doc stores get merged\n      writer.commit();\n      addDocWithIndex(writer, 500);\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: start disk usage\");\n      }\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n        if (VERBOSE) {\n          System.out.println(files[i] + \": \" + dir.fileLength(files[i]));\n        }\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      dir.setTrackDiskUsage(true);\n\n      // Import to use same term index interval else a\n      // smaller one here could increase the disk usage and\n      // cause a false failure:\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND).setTermIndexInterval(termIndexInterval).setMergePolicy(newLogMergePolicy()));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n      assertTrue(\"optimize used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (4*startDiskUsage) + \" (= 4X starting usage)\",\n                 maxDiskUsage <= 4*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","sourceNew":null,"sourceOld":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(10).setMergePolicy(newLogMergePolicy()));\n      if (VERBOSE) {\n        System.out.println(\"TEST: config1=\" + writer.getConfig());\n      }\n\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      final int termIndexInterval = writer.getConfig().getTermIndexInterval();\n      // force one extra segment w/ different doc store so\n      // we see the doc stores get merged\n      writer.commit();\n      addDocWithIndex(writer, 500);\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: start disk usage\");\n      }\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n        if (VERBOSE) {\n          System.out.println(files[i] + \": \" + dir.fileLength(files[i]));\n        }\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      dir.setTrackDiskUsage(true);\n\n      // Import to use same term index interval else a\n      // smaller one here could increase the disk usage and\n      // cause a false failure:\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setTermIndexInterval(termIndexInterval).setMergePolicy(newLogMergePolicy()));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n      assertTrue(\"optimize used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (4*startDiskUsage) + \" (= 4X starting usage)\",\n                 maxDiskUsage <= 4*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","sourceNew":null,"sourceOld":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(10).setMergePolicy(newLogMergePolicy()));\n      if (VERBOSE) {\n        System.out.println(\"TEST: config1=\" + writer.getConfig());\n      }\n\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      final int termIndexInterval = writer.getConfig().getTermIndexInterval();\n      // force one extra segment w/ different doc store so\n      // we see the doc stores get merged\n      writer.commit();\n      addDocWithIndex(writer, 500);\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: start disk usage\");\n      }\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n        if (VERBOSE) {\n          System.out.println(files[i] + \": \" + dir.fileLength(files[i]));\n        }\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      dir.setTrackDiskUsage(true);\n\n      // Import to use same term index interval else a\n      // smaller one here could increase the disk usage and\n      // cause a false failure:\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setTermIndexInterval(termIndexInterval).setMergePolicy(newLogMergePolicy()));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n      assertTrue(\"optimize used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (4*startDiskUsage) + \" (= 4X starting usage)\",\n                 maxDiskUsage <= 4*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","sourceNew":null,"sourceOld":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(10).setMergePolicy(newLogMergePolicy()));\n      if (VERBOSE) {\n        System.out.println(\"TEST: config1=\" + writer.getConfig());\n      }\n\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      final int termIndexInterval = writer.getConfig().getTermIndexInterval();\n      // force one extra segment w/ different doc store so\n      // we see the doc stores get merged\n      writer.commit();\n      addDocWithIndex(writer, 500);\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: start disk usage\");\n      }\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n        if (VERBOSE) {\n          System.out.println(files[i] + \": \" + dir.fileLength(files[i]));\n        }\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      dir.setTrackDiskUsage(true);\n\n      // Import to use same term index interval else a\n      // smaller one here could increase the disk usage and\n      // cause a false failure:\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setTermIndexInterval(termIndexInterval).setMergePolicy(newLogMergePolicy()));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n      assertTrue(\"optimize used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (4*startDiskUsage) + \" (= 4X starting usage)\",\n                 maxDiskUsage <= 4*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":["29ef99d61cda9641b6250bf9567329a6e65f901d","7082d10b2dbfa63b6d32f8a8291a6e65386e67d9"],"8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5"],"c19f985e36a65cc969e8e564fe337a0d41512075":["8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["7082d10b2dbfa63b6d32f8a8291a6e65386e67d9"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a3776dccca01c11e7046323cfad46a3b4a471233","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["3eaa8ca351aa7eefa5bd5bf249e9dd9bb0830c54"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","c19f985e36a65cc969e8e564fe337a0d41512075"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"7082d10b2dbfa63b6d32f8a8291a6e65386e67d9":["c19f985e36a65cc969e8e564fe337a0d41512075"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","7082d10b2dbfa63b6d32f8a8291a6e65386e67d9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["f1bdbf92da222965b46c0a942c3857ba56e5c638","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["f2c5f0cb44df114db4228c8f77861714b5cabaea","962d04139994fce5193143ef35615499a9a96d78"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a3776dccca01c11e7046323cfad46a3b4a471233":["7082d10b2dbfa63b6d32f8a8291a6e65386e67d9","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"3eaa8ca351aa7eefa5bd5bf249e9dd9bb0830c54":["a05409176bd65129d67a785ee70e881e238a9aef"],"3bb13258feba31ab676502787ab2e1779f129b7a":["1f653cfcf159baeaafe5d01682a911e95bba4012","8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"]},"commit2Childs":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075","3bb13258feba31ab676502787ab2e1779f129b7a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c19f985e36a65cc969e8e564fe337a0d41512075":["29ef99d61cda9641b6250bf9567329a6e65f901d","7082d10b2dbfa63b6d32f8a8291a6e65386e67d9"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","962d04139994fce5193143ef35615499a9a96d78"],"79c2cb24929f2649a8875fb629086171f914d5ce":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5","3bb13258feba31ab676502787ab2e1779f129b7a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["3eaa8ca351aa7eefa5bd5bf249e9dd9bb0830c54"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"7082d10b2dbfa63b6d32f8a8291a6e65386e67d9":["f1bdbf92da222965b46c0a942c3857ba56e5c638","f2c5f0cb44df114db4228c8f77861714b5cabaea","bde51b089eb7f86171eb3406e38a274743f9b7ac","a3776dccca01c11e7046323cfad46a3b4a471233"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233"],"962d04139994fce5193143ef35615499a9a96d78":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["79c2cb24929f2649a8875fb629086171f914d5ce"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"3eaa8ca351aa7eefa5bd5bf249e9dd9bb0830c54":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}