{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getSortedNumeric(FieldInfo).mjava","commits":[{"id":"084884d4602f4d1c7411eab29e897e349ce62675","date":1475571034,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedSetEntry ss = sortedNumerics.get(field.name);\n    if (ss.format == SORTED_SINGLE_VALUED) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      if (numericEntry.format == SPARSE_COMPRESSED) {\n        SparseNumericDocValues sparseValues = ((SparseNumericDocValuesRandomAccessWrapper) values).values;\n        return new SortedNumericDocValues() {\n\n          @Override\n          public long nextValue() throws IOException {\n            return sparseValues.longValue();\n          }\n\n          @Override\n          public int docValueCount() {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return sparseValues.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return sparseValues.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return sparseValues.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            return sparseValues.cost();\n          }\n\n        };\n      }\n      final DocIdSetIterator docsWithField = getDocsWithField(numericEntry.missingOffset, maxDoc);\n      \n      return new SortedNumericDocValues() {\n\n        @Override\n        public int docID() {\n          return docsWithField.docID();\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          return docsWithField.nextDoc();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          return docsWithField.advance(target);\n        }\n\n        @Override\n        public long cost() {\n          return docsWithField.cost();\n        }\n\n        @Override\n        public int docValueCount() {\n          return 1;\n        }\n\n        @Override\n        public long nextValue() {\n          return values.get(docsWithField.docID());\n        }\n      };\n    } else if (ss.format == SORTED_WITH_ADDRESSES) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final LongValues ordIndex = getOrdIndexInstance(field, ordIndexes.get(field.name));\n\n      return new SortedNumericDocValues() {\n        long startOffset;\n        long endOffset;\n        int docID = -1;\n        long upto;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            startOffset = ordIndex.get(docID);\n            endOffset = ordIndex.get(docID+1L);\n            if (endOffset > startOffset) {\n              break;\n            }\n          }\n          upto = startOffset;\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n        \n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n        \n        @Override\n        public int docValueCount() {\n          return (int) (endOffset - startOffset);\n        }\n        \n        @Override\n        public long nextValue() {\n          return values.get(upto++);\n        }\n      };\n    } else if (ss.format == SORTED_SET_TABLE) {\n      NumericEntry entry = ords.get(field.name);\n      final LongValues ordinals = getNumeric(entry);\n\n      final long[] table = ss.table;\n      final int[] offsets = ss.tableOffsets;\n      return new SortedNumericDocValues() {\n        int startOffset;\n        int endOffset;\n        int docID = -1;\n        int upto;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            int ord = (int) ordinals.get(docID);\n            startOffset = offsets[ord];\n            endOffset = offsets[ord+1];\n            if (endOffset > startOffset) {\n              break;\n            }\n          }\n          upto = startOffset;\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n        \n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n\n        @Override\n        public int docValueCount() {\n          return endOffset - startOffset;\n        }\n        \n        @Override\n        public long nextValue() {\n          return table[upto++];\n        }\n      };\n    } else {\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1967bed916cc89da82a1c2085f27976da6d08cbd","date":1475588750,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedSetEntry ss = sortedNumerics.get(field.name);\n    if (ss.format == SORTED_SINGLE_VALUED) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      if (numericEntry.format == SPARSE_COMPRESSED) {\n        SparseNumericDocValues sparseValues = ((SparseNumericDocValuesRandomAccessWrapper) values).values;\n        return new SortedNumericDocValues() {\n\n          @Override\n          public long nextValue() throws IOException {\n            return sparseValues.longValue();\n          }\n\n          @Override\n          public int docValueCount() {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return sparseValues.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return sparseValues.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return sparseValues.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            return sparseValues.cost();\n          }\n\n        };\n      }\n      final DocIdSetIterator docsWithField = getDocsWithField(numericEntry.missingOffset, maxDoc);\n      \n      return new SortedNumericDocValues() {\n\n        @Override\n        public int docID() {\n          return docsWithField.docID();\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          return docsWithField.nextDoc();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          return docsWithField.advance(target);\n        }\n\n        @Override\n        public long cost() {\n          return docsWithField.cost();\n        }\n\n        @Override\n        public int docValueCount() {\n          return 1;\n        }\n\n        @Override\n        public long nextValue() {\n          return values.get(docsWithField.docID());\n        }\n      };\n    } else if (ss.format == SORTED_WITH_ADDRESSES) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final LongValues ordIndex = getOrdIndexInstance(field, ordIndexes.get(field.name));\n\n      return new SortedNumericDocValues() {\n        long startOffset;\n        long endOffset;\n        int docID = -1;\n        long upto;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            startOffset = ordIndex.get(docID);\n            endOffset = ordIndex.get(docID+1L);\n            if (endOffset > startOffset) {\n              break;\n            }\n          }\n          upto = startOffset;\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n        \n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n        \n        @Override\n        public int docValueCount() {\n          return (int) (endOffset - startOffset);\n        }\n        \n        @Override\n        public long nextValue() {\n          return values.get(upto++);\n        }\n      };\n    } else if (ss.format == SORTED_SET_TABLE) {\n      NumericEntry entry = ords.get(field.name);\n      final LongValues ordinals = getNumeric(entry);\n\n      final long[] table = ss.table;\n      final int[] offsets = ss.tableOffsets;\n      return new SortedNumericDocValues() {\n        int startOffset;\n        int endOffset;\n        int docID = -1;\n        int upto;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            int ord = (int) ordinals.get(docID);\n            startOffset = offsets[ord];\n            endOffset = offsets[ord+1];\n            if (endOffset > startOffset) {\n              break;\n            }\n          }\n          upto = startOffset;\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n        \n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n\n        @Override\n        public int docValueCount() {\n          return endOffset - startOffset;\n        }\n        \n        @Override\n        public long nextValue() {\n          return table[upto++];\n        }\n      };\n    } else {\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23e44daeaa8b89694d10df5999956c8e14a7dd09","date":1476689300,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (entry.numValues == entry.numDocsWithField) {\n      return DocValues.singleton(getNumeric(entry));\n    }\n\n    final RandomAccessInput addressesInput = data.randomAccessSlice(entry.addressesOffset, entry.addressesLength);\n    final LongValues addresses = DirectMonotonicReader.getInstance(entry.addressesMeta, addressesInput);\n\n    final LongValues values = getNumericValues(entry);\n\n    if (entry.docsWithFieldOffset == -1) {\n      // dense\n      return new SortedNumericDocValues() {\n\n        int doc = -1;\n        long start, end;\n        int count;\n\n        @Override\n        public int nextDoc() throws IOException {\n          return advance(doc + 1);\n        }\n\n        @Override\n        public int docID() {\n          return doc;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          if (target >= maxDoc) {\n            return doc = NO_MORE_DOCS;\n          }\n          start = addresses.get(target);\n          end = addresses.get(target + 1L);\n          count = (int) (end - start);\n          return doc = target;\n        }\n\n        @Override\n        public long nextValue() throws IOException {\n          return values.get(start++);\n        }\n\n        @Override\n        public int docValueCount() {\n          return count;\n        }\n      };\n    } else {\n      // sparse\n      final IndexedDISI disi = new IndexedDISI(data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numDocsWithField);\n      return new SortedNumericDocValues() {\n\n        boolean set;\n        long start, end;\n        int count;\n\n        @Override\n        public int nextDoc() throws IOException {\n          set = false;\n          return disi.nextDoc();\n        }\n\n        @Override\n        public int docID() {\n          return disi.docID();\n        }\n\n        @Override\n        public long cost() {\n          return disi.cost();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          set = false;\n          return disi.advance(target);\n        }\n\n        @Override\n        public long nextValue() throws IOException {\n          set();\n          return values.get(start++);\n        }\n\n        @Override\n        public int docValueCount() {\n          set();\n          return count;\n        }\n\n        private void set() {\n          if (set == false) {\n            final int index = disi.index();\n            start = addresses.get(index);\n            end = addresses.get(index + 1L);\n            count = (int) (end - start);\n            set = true;\n          }\n        }\n\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedSetEntry ss = sortedNumerics.get(field.name);\n    if (ss.format == SORTED_SINGLE_VALUED) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      if (numericEntry.format == SPARSE_COMPRESSED) {\n        SparseNumericDocValues sparseValues = ((SparseNumericDocValuesRandomAccessWrapper) values).values;\n        return new SortedNumericDocValues() {\n\n          @Override\n          public long nextValue() throws IOException {\n            return sparseValues.longValue();\n          }\n\n          @Override\n          public int docValueCount() {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return sparseValues.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return sparseValues.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return sparseValues.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            return sparseValues.cost();\n          }\n\n        };\n      }\n      final DocIdSetIterator docsWithField = getDocsWithField(numericEntry.missingOffset, maxDoc);\n      \n      return new SortedNumericDocValues() {\n\n        @Override\n        public int docID() {\n          return docsWithField.docID();\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          return docsWithField.nextDoc();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          return docsWithField.advance(target);\n        }\n\n        @Override\n        public long cost() {\n          return docsWithField.cost();\n        }\n\n        @Override\n        public int docValueCount() {\n          return 1;\n        }\n\n        @Override\n        public long nextValue() {\n          return values.get(docsWithField.docID());\n        }\n      };\n    } else if (ss.format == SORTED_WITH_ADDRESSES) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final LongValues ordIndex = getOrdIndexInstance(field, ordIndexes.get(field.name));\n\n      return new SortedNumericDocValues() {\n        long startOffset;\n        long endOffset;\n        int docID = -1;\n        long upto;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            startOffset = ordIndex.get(docID);\n            endOffset = ordIndex.get(docID+1L);\n            if (endOffset > startOffset) {\n              break;\n            }\n          }\n          upto = startOffset;\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n        \n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n        \n        @Override\n        public int docValueCount() {\n          return (int) (endOffset - startOffset);\n        }\n        \n        @Override\n        public long nextValue() {\n          return values.get(upto++);\n        }\n      };\n    } else if (ss.format == SORTED_SET_TABLE) {\n      NumericEntry entry = ords.get(field.name);\n      final LongValues ordinals = getNumeric(entry);\n\n      final long[] table = ss.table;\n      final int[] offsets = ss.tableOffsets;\n      return new SortedNumericDocValues() {\n        int startOffset;\n        int endOffset;\n        int docID = -1;\n        int upto;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            int ord = (int) ordinals.get(docID);\n            startOffset = offsets[ord];\n            endOffset = offsets[ord+1];\n            if (endOffset > startOffset) {\n              break;\n            }\n          }\n          upto = startOffset;\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n        \n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n\n        @Override\n        public int docValueCount() {\n          return endOffset - startOffset;\n        }\n        \n        @Override\n        public long nextValue() {\n          return table[upto++];\n        }\n      };\n    } else {\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (entry.numValues == entry.numDocsWithField) {\n      return DocValues.singleton(getNumeric(entry));\n    }\n\n    final RandomAccessInput addressesInput = data.randomAccessSlice(entry.addressesOffset, entry.addressesLength);\n    final LongValues addresses = DirectMonotonicReader.getInstance(entry.addressesMeta, addressesInput);\n\n    final LongValues values = getNumericValues(entry);\n\n    if (entry.docsWithFieldOffset == -1) {\n      // dense\n      return new SortedNumericDocValues() {\n\n        int doc = -1;\n        long start, end;\n        int count;\n\n        @Override\n        public int nextDoc() throws IOException {\n          return advance(doc + 1);\n        }\n\n        @Override\n        public int docID() {\n          return doc;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          if (target >= maxDoc) {\n            return doc = NO_MORE_DOCS;\n          }\n          start = addresses.get(target);\n          end = addresses.get(target + 1L);\n          count = (int) (end - start);\n          return doc = target;\n        }\n\n        @Override\n        public long nextValue() throws IOException {\n          return values.get(start++);\n        }\n\n        @Override\n        public int docValueCount() {\n          return count;\n        }\n      };\n    } else {\n      // sparse\n      final IndexedDISI disi = new IndexedDISI(data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numDocsWithField);\n      return new SortedNumericDocValues() {\n\n        boolean set;\n        long start, end;\n        int count;\n\n        @Override\n        public int nextDoc() throws IOException {\n          set = false;\n          return disi.nextDoc();\n        }\n\n        @Override\n        public int docID() {\n          return disi.docID();\n        }\n\n        @Override\n        public long cost() {\n          return disi.cost();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          set = false;\n          return disi.advance(target);\n        }\n\n        @Override\n        public long nextValue() throws IOException {\n          set();\n          return values.get(start++);\n        }\n\n        @Override\n        public int docValueCount() {\n          set();\n          return count;\n        }\n\n        private void set() {\n          if (set == false) {\n            final int index = disi.index();\n            start = addresses.get(index);\n            end = addresses.get(index + 1L);\n            count = (int) (end - start);\n            set = true;\n          }\n        }\n\n      };\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11134e449dabe11d6d0ff6a564d84b82cbe93722","date":1477299083,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (entry.numValues == entry.numDocsWithField) {\n      return DocValues.singleton(getNumeric(entry));\n    }\n\n    final RandomAccessInput addressesInput = data.randomAccessSlice(entry.addressesOffset, entry.addressesLength);\n    final LongValues addresses = DirectMonotonicReader.getInstance(entry.addressesMeta, addressesInput);\n\n    final LongValues values = getNumericValues(entry);\n\n    if (entry.docsWithFieldOffset == -1) {\n      // dense\n      return new SortedNumericDocValues() {\n\n        int doc = -1;\n        long start, end;\n        int count;\n\n        @Override\n        public int nextDoc() throws IOException {\n          return advance(doc + 1);\n        }\n\n        @Override\n        public int docID() {\n          return doc;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          if (target >= maxDoc) {\n            return doc = NO_MORE_DOCS;\n          }\n          start = addresses.get(target);\n          end = addresses.get(target + 1L);\n          count = (int) (end - start);\n          return doc = target;\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          start = addresses.get(target);\n          end = addresses.get(target + 1L);\n          count = (int) (end - start);\n          doc = target;\n          return true;\n        }\n\n        @Override\n        public long nextValue() throws IOException {\n          return values.get(start++);\n        }\n\n        @Override\n        public int docValueCount() {\n          return count;\n        }\n      };\n    } else {\n      // sparse\n      final IndexedDISI disi = new IndexedDISI(data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numDocsWithField);\n      return new SortedNumericDocValues() {\n\n        boolean set;\n        long start, end;\n        int count;\n\n        @Override\n        public int nextDoc() throws IOException {\n          set = false;\n          return disi.nextDoc();\n        }\n\n        @Override\n        public int docID() {\n          return disi.docID();\n        }\n\n        @Override\n        public long cost() {\n          return disi.cost();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          set = false;\n          return disi.advance(target);\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          set = false;\n          return disi.advanceExact(target);\n        }\n\n        @Override\n        public long nextValue() throws IOException {\n          set();\n          return values.get(start++);\n        }\n\n        @Override\n        public int docValueCount() {\n          set();\n          return count;\n        }\n\n        private void set() {\n          if (set == false) {\n            final int index = disi.index();\n            start = addresses.get(index);\n            end = addresses.get(index + 1L);\n            count = (int) (end - start);\n            set = true;\n          }\n        }\n\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (entry.numValues == entry.numDocsWithField) {\n      return DocValues.singleton(getNumeric(entry));\n    }\n\n    final RandomAccessInput addressesInput = data.randomAccessSlice(entry.addressesOffset, entry.addressesLength);\n    final LongValues addresses = DirectMonotonicReader.getInstance(entry.addressesMeta, addressesInput);\n\n    final LongValues values = getNumericValues(entry);\n\n    if (entry.docsWithFieldOffset == -1) {\n      // dense\n      return new SortedNumericDocValues() {\n\n        int doc = -1;\n        long start, end;\n        int count;\n\n        @Override\n        public int nextDoc() throws IOException {\n          return advance(doc + 1);\n        }\n\n        @Override\n        public int docID() {\n          return doc;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          if (target >= maxDoc) {\n            return doc = NO_MORE_DOCS;\n          }\n          start = addresses.get(target);\n          end = addresses.get(target + 1L);\n          count = (int) (end - start);\n          return doc = target;\n        }\n\n        @Override\n        public long nextValue() throws IOException {\n          return values.get(start++);\n        }\n\n        @Override\n        public int docValueCount() {\n          return count;\n        }\n      };\n    } else {\n      // sparse\n      final IndexedDISI disi = new IndexedDISI(data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numDocsWithField);\n      return new SortedNumericDocValues() {\n\n        boolean set;\n        long start, end;\n        int count;\n\n        @Override\n        public int nextDoc() throws IOException {\n          set = false;\n          return disi.nextDoc();\n        }\n\n        @Override\n        public int docID() {\n          return disi.docID();\n        }\n\n        @Override\n        public long cost() {\n          return disi.cost();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          set = false;\n          return disi.advance(target);\n        }\n\n        @Override\n        public long nextValue() throws IOException {\n          set();\n          return values.get(start++);\n        }\n\n        @Override\n        public int docValueCount() {\n          set();\n          return count;\n        }\n\n        private void set() {\n          if (set == false) {\n            final int index = disi.index();\n            start = addresses.get(index);\n            end = addresses.get(index + 1L);\n            count = (int) (end - start);\n            set = true;\n          }\n        }\n\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2714c85633b642b29871cf5ff8d17d3ba7bfd76","date":1477307753,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (entry.numValues == entry.numDocsWithField) {\n      return DocValues.singleton(getNumeric(entry));\n    }\n\n    final RandomAccessInput addressesInput = data.randomAccessSlice(entry.addressesOffset, entry.addressesLength);\n    final LongValues addresses = DirectMonotonicReader.getInstance(entry.addressesMeta, addressesInput);\n\n    final LongValues values = getNumericValues(entry);\n\n    if (entry.docsWithFieldOffset == -1) {\n      // dense\n      return new SortedNumericDocValues() {\n\n        int doc = -1;\n        long start, end;\n        int count;\n\n        @Override\n        public int nextDoc() throws IOException {\n          return advance(doc + 1);\n        }\n\n        @Override\n        public int docID() {\n          return doc;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          if (target >= maxDoc) {\n            return doc = NO_MORE_DOCS;\n          }\n          start = addresses.get(target);\n          end = addresses.get(target + 1L);\n          count = (int) (end - start);\n          return doc = target;\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          start = addresses.get(target);\n          end = addresses.get(target + 1L);\n          count = (int) (end - start);\n          doc = target;\n          return true;\n        }\n\n        @Override\n        public long nextValue() throws IOException {\n          return values.get(start++);\n        }\n\n        @Override\n        public int docValueCount() {\n          return count;\n        }\n      };\n    } else {\n      // sparse\n      final IndexedDISI disi = new IndexedDISI(data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numDocsWithField);\n      return new SortedNumericDocValues() {\n\n        boolean set;\n        long start, end;\n        int count;\n\n        @Override\n        public int nextDoc() throws IOException {\n          set = false;\n          return disi.nextDoc();\n        }\n\n        @Override\n        public int docID() {\n          return disi.docID();\n        }\n\n        @Override\n        public long cost() {\n          return disi.cost();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          set = false;\n          return disi.advance(target);\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          set = false;\n          return disi.advanceExact(target);\n        }\n\n        @Override\n        public long nextValue() throws IOException {\n          set();\n          return values.get(start++);\n        }\n\n        @Override\n        public int docValueCount() {\n          set();\n          return count;\n        }\n\n        private void set() {\n          if (set == false) {\n            final int index = disi.index();\n            start = addresses.get(index);\n            end = addresses.get(index + 1L);\n            count = (int) (end - start);\n            set = true;\n          }\n        }\n\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (entry.numValues == entry.numDocsWithField) {\n      return DocValues.singleton(getNumeric(entry));\n    }\n\n    final RandomAccessInput addressesInput = data.randomAccessSlice(entry.addressesOffset, entry.addressesLength);\n    final LongValues addresses = DirectMonotonicReader.getInstance(entry.addressesMeta, addressesInput);\n\n    final LongValues values = getNumericValues(entry);\n\n    if (entry.docsWithFieldOffset == -1) {\n      // dense\n      return new SortedNumericDocValues() {\n\n        int doc = -1;\n        long start, end;\n        int count;\n\n        @Override\n        public int nextDoc() throws IOException {\n          return advance(doc + 1);\n        }\n\n        @Override\n        public int docID() {\n          return doc;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          if (target >= maxDoc) {\n            return doc = NO_MORE_DOCS;\n          }\n          start = addresses.get(target);\n          end = addresses.get(target + 1L);\n          count = (int) (end - start);\n          return doc = target;\n        }\n\n        @Override\n        public long nextValue() throws IOException {\n          return values.get(start++);\n        }\n\n        @Override\n        public int docValueCount() {\n          return count;\n        }\n      };\n    } else {\n      // sparse\n      final IndexedDISI disi = new IndexedDISI(data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numDocsWithField);\n      return new SortedNumericDocValues() {\n\n        boolean set;\n        long start, end;\n        int count;\n\n        @Override\n        public int nextDoc() throws IOException {\n          set = false;\n          return disi.nextDoc();\n        }\n\n        @Override\n        public int docID() {\n          return disi.docID();\n        }\n\n        @Override\n        public long cost() {\n          return disi.cost();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          set = false;\n          return disi.advance(target);\n        }\n\n        @Override\n        public long nextValue() throws IOException {\n          set();\n          return values.get(start++);\n        }\n\n        @Override\n        public int docValueCount() {\n          set();\n          return count;\n        }\n\n        private void set() {\n          if (set == false) {\n            final int index = disi.index();\n            start = addresses.get(index);\n            end = addresses.get(index + 1L);\n            count = (int) (end - start);\n            set = true;\n          }\n        }\n\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (entry.numValues == entry.numDocsWithField) {\n      return DocValues.singleton(getNumeric(entry));\n    }\n\n    final RandomAccessInput addressesInput = data.randomAccessSlice(entry.addressesOffset, entry.addressesLength);\n    final LongValues addresses = DirectMonotonicReader.getInstance(entry.addressesMeta, addressesInput);\n\n    final LongValues values = getNumericValues(entry);\n\n    if (entry.docsWithFieldOffset == -1) {\n      // dense\n      return new SortedNumericDocValues() {\n\n        int doc = -1;\n        long start, end;\n        int count;\n\n        @Override\n        public int nextDoc() throws IOException {\n          return advance(doc + 1);\n        }\n\n        @Override\n        public int docID() {\n          return doc;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          if (target >= maxDoc) {\n            return doc = NO_MORE_DOCS;\n          }\n          start = addresses.get(target);\n          end = addresses.get(target + 1L);\n          count = (int) (end - start);\n          return doc = target;\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          start = addresses.get(target);\n          end = addresses.get(target + 1L);\n          count = (int) (end - start);\n          doc = target;\n          return true;\n        }\n\n        @Override\n        public long nextValue() throws IOException {\n          return values.get(start++);\n        }\n\n        @Override\n        public int docValueCount() {\n          return count;\n        }\n      };\n    } else {\n      // sparse\n      final IndexedDISI disi = new IndexedDISI(data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numDocsWithField);\n      return new SortedNumericDocValues() {\n\n        boolean set;\n        long start, end;\n        int count;\n\n        @Override\n        public int nextDoc() throws IOException {\n          set = false;\n          return disi.nextDoc();\n        }\n\n        @Override\n        public int docID() {\n          return disi.docID();\n        }\n\n        @Override\n        public long cost() {\n          return disi.cost();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          set = false;\n          return disi.advance(target);\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          set = false;\n          return disi.advanceExact(target);\n        }\n\n        @Override\n        public long nextValue() throws IOException {\n          set();\n          return values.get(start++);\n        }\n\n        @Override\n        public int docValueCount() {\n          set();\n          return count;\n        }\n\n        private void set() {\n          if (set == false) {\n            final int index = disi.index();\n            start = addresses.get(index);\n            end = addresses.get(index + 1L);\n            count = (int) (end - start);\n            set = true;\n          }\n        }\n\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (entry.numValues == entry.numDocsWithField) {\n      return DocValues.singleton(getNumeric(entry));\n    }\n\n    final RandomAccessInput addressesInput = data.randomAccessSlice(entry.addressesOffset, entry.addressesLength);\n    final LongValues addresses = DirectMonotonicReader.getInstance(entry.addressesMeta, addressesInput);\n\n    final LongValues values = getNumericValues(entry);\n\n    if (entry.docsWithFieldOffset == -1) {\n      // dense\n      return new SortedNumericDocValues() {\n\n        int doc = -1;\n        long start, end;\n        int count;\n\n        @Override\n        public int nextDoc() throws IOException {\n          return advance(doc + 1);\n        }\n\n        @Override\n        public int docID() {\n          return doc;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          if (target >= maxDoc) {\n            return doc = NO_MORE_DOCS;\n          }\n          start = addresses.get(target);\n          end = addresses.get(target + 1L);\n          count = (int) (end - start);\n          return doc = target;\n        }\n\n        @Override\n        public long nextValue() throws IOException {\n          return values.get(start++);\n        }\n\n        @Override\n        public int docValueCount() {\n          return count;\n        }\n      };\n    } else {\n      // sparse\n      final IndexedDISI disi = new IndexedDISI(data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numDocsWithField);\n      return new SortedNumericDocValues() {\n\n        boolean set;\n        long start, end;\n        int count;\n\n        @Override\n        public int nextDoc() throws IOException {\n          set = false;\n          return disi.nextDoc();\n        }\n\n        @Override\n        public int docID() {\n          return disi.docID();\n        }\n\n        @Override\n        public long cost() {\n          return disi.cost();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          set = false;\n          return disi.advance(target);\n        }\n\n        @Override\n        public long nextValue() throws IOException {\n          set();\n          return values.get(start++);\n        }\n\n        @Override\n        public int docValueCount() {\n          set();\n          return count;\n        }\n\n        private void set() {\n          if (set == false) {\n            final int index = disi.index();\n            start = addresses.get(index);\n            end = addresses.get(index + 1L);\n            count = (int) (end - start);\n            set = true;\n          }\n        }\n\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb9d1512598fc72005b830d5e2b88e61a0f4b374","date":1543843391,"type":3,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (entry.numValues == entry.numDocsWithField) {\n      return DocValues.singleton(getNumeric(entry));\n    }\n\n    final RandomAccessInput addressesInput = data.randomAccessSlice(entry.addressesOffset, entry.addressesLength);\n    final LongValues addresses = DirectMonotonicReader.getInstance(entry.addressesMeta, addressesInput);\n\n    final LongValues values = getNumericValues(entry);\n\n    if (entry.docsWithFieldOffset == -1) {\n      // dense\n      return new SortedNumericDocValues() {\n\n        int doc = -1;\n        long start, end;\n        int count;\n\n        @Override\n        public int nextDoc() throws IOException {\n          return advance(doc + 1);\n        }\n\n        @Override\n        public int docID() {\n          return doc;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          if (target >= maxDoc) {\n            return doc = NO_MORE_DOCS;\n          }\n          start = addresses.get(target);\n          end = addresses.get(target + 1L);\n          count = (int) (end - start);\n          return doc = target;\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          start = addresses.get(target);\n          end = addresses.get(target + 1L);\n          count = (int) (end - start);\n          doc = target;\n          return true;\n        }\n\n        @Override\n        public long nextValue() throws IOException {\n          return values.get(start++);\n        }\n\n        @Override\n        public int docValueCount() {\n          return count;\n        }\n      };\n    } else {\n      // sparse\n      final IndexedDISI disi = disiCacheFactory.createCachedIndexedDISI(\n          data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numDocsWithField, entry.name);\n      return new SortedNumericDocValues() {\n\n        boolean set;\n        long start, end;\n        int count;\n\n        @Override\n        public int nextDoc() throws IOException {\n          set = false;\n          return disi.nextDoc();\n        }\n\n        @Override\n        public int docID() {\n          return disi.docID();\n        }\n\n        @Override\n        public long cost() {\n          return disi.cost();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          set = false;\n          return disi.advance(target);\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          set = false;\n          return disi.advanceExact(target);\n        }\n\n        @Override\n        public long nextValue() throws IOException {\n          set();\n          return values.get(start++);\n        }\n\n        @Override\n        public int docValueCount() {\n          set();\n          return count;\n        }\n\n        private void set() {\n          if (set == false) {\n            final int index = disi.index();\n            start = addresses.get(index);\n            end = addresses.get(index + 1L);\n            count = (int) (end - start);\n            set = true;\n          }\n        }\n\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (entry.numValues == entry.numDocsWithField) {\n      return DocValues.singleton(getNumeric(entry));\n    }\n\n    final RandomAccessInput addressesInput = data.randomAccessSlice(entry.addressesOffset, entry.addressesLength);\n    final LongValues addresses = DirectMonotonicReader.getInstance(entry.addressesMeta, addressesInput);\n\n    final LongValues values = getNumericValues(entry);\n\n    if (entry.docsWithFieldOffset == -1) {\n      // dense\n      return new SortedNumericDocValues() {\n\n        int doc = -1;\n        long start, end;\n        int count;\n\n        @Override\n        public int nextDoc() throws IOException {\n          return advance(doc + 1);\n        }\n\n        @Override\n        public int docID() {\n          return doc;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          if (target >= maxDoc) {\n            return doc = NO_MORE_DOCS;\n          }\n          start = addresses.get(target);\n          end = addresses.get(target + 1L);\n          count = (int) (end - start);\n          return doc = target;\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          start = addresses.get(target);\n          end = addresses.get(target + 1L);\n          count = (int) (end - start);\n          doc = target;\n          return true;\n        }\n\n        @Override\n        public long nextValue() throws IOException {\n          return values.get(start++);\n        }\n\n        @Override\n        public int docValueCount() {\n          return count;\n        }\n      };\n    } else {\n      // sparse\n      final IndexedDISI disi = new IndexedDISI(data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numDocsWithField);\n      return new SortedNumericDocValues() {\n\n        boolean set;\n        long start, end;\n        int count;\n\n        @Override\n        public int nextDoc() throws IOException {\n          set = false;\n          return disi.nextDoc();\n        }\n\n        @Override\n        public int docID() {\n          return disi.docID();\n        }\n\n        @Override\n        public long cost() {\n          return disi.cost();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          set = false;\n          return disi.advance(target);\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          set = false;\n          return disi.advanceExact(target);\n        }\n\n        @Override\n        public long nextValue() throws IOException {\n          set();\n          return values.get(start++);\n        }\n\n        @Override\n        public int docValueCount() {\n          set();\n          return count;\n        }\n\n        private void set() {\n          if (set == false) {\n            final int index = disi.index();\n            start = addresses.get(index);\n            end = addresses.get(index + 1L);\n            count = (int) (end - start);\n            set = true;\n          }\n        }\n\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c74cb19c6e988ccfef4286a1f3f0e5930f0863e","date":1544534277,"type":3,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (entry.numValues == entry.numDocsWithField) {\n      return DocValues.singleton(getNumeric(entry));\n    }\n\n    final RandomAccessInput addressesInput = data.randomAccessSlice(entry.addressesOffset, entry.addressesLength);\n    final LongValues addresses = DirectMonotonicReader.getInstance(entry.addressesMeta, addressesInput);\n\n    final LongValues values = getNumericValues(entry);\n\n    if (entry.docsWithFieldOffset == -1) {\n      // dense\n      return new SortedNumericDocValues() {\n\n        int doc = -1;\n        long start, end;\n        int count;\n\n        @Override\n        public int nextDoc() throws IOException {\n          return advance(doc + 1);\n        }\n\n        @Override\n        public int docID() {\n          return doc;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          if (target >= maxDoc) {\n            return doc = NO_MORE_DOCS;\n          }\n          start = addresses.get(target);\n          end = addresses.get(target + 1L);\n          count = (int) (end - start);\n          return doc = target;\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          start = addresses.get(target);\n          end = addresses.get(target + 1L);\n          count = (int) (end - start);\n          doc = target;\n          return true;\n        }\n\n        @Override\n        public long nextValue() throws IOException {\n          return values.get(start++);\n        }\n\n        @Override\n        public int docValueCount() {\n          return count;\n        }\n      };\n    } else {\n      // sparse\n      final IndexedDISI disi = new IndexedDISI(data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numDocsWithField);\n      return new SortedNumericDocValues() {\n\n        boolean set;\n        long start, end;\n        int count;\n\n        @Override\n        public int nextDoc() throws IOException {\n          set = false;\n          return disi.nextDoc();\n        }\n\n        @Override\n        public int docID() {\n          return disi.docID();\n        }\n\n        @Override\n        public long cost() {\n          return disi.cost();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          set = false;\n          return disi.advance(target);\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          set = false;\n          return disi.advanceExact(target);\n        }\n\n        @Override\n        public long nextValue() throws IOException {\n          set();\n          return values.get(start++);\n        }\n\n        @Override\n        public int docValueCount() {\n          set();\n          return count;\n        }\n\n        private void set() {\n          if (set == false) {\n            final int index = disi.index();\n            start = addresses.get(index);\n            end = addresses.get(index + 1L);\n            count = (int) (end - start);\n            set = true;\n          }\n        }\n\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (entry.numValues == entry.numDocsWithField) {\n      return DocValues.singleton(getNumeric(entry));\n    }\n\n    final RandomAccessInput addressesInput = data.randomAccessSlice(entry.addressesOffset, entry.addressesLength);\n    final LongValues addresses = DirectMonotonicReader.getInstance(entry.addressesMeta, addressesInput);\n\n    final LongValues values = getNumericValues(entry);\n\n    if (entry.docsWithFieldOffset == -1) {\n      // dense\n      return new SortedNumericDocValues() {\n\n        int doc = -1;\n        long start, end;\n        int count;\n\n        @Override\n        public int nextDoc() throws IOException {\n          return advance(doc + 1);\n        }\n\n        @Override\n        public int docID() {\n          return doc;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          if (target >= maxDoc) {\n            return doc = NO_MORE_DOCS;\n          }\n          start = addresses.get(target);\n          end = addresses.get(target + 1L);\n          count = (int) (end - start);\n          return doc = target;\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          start = addresses.get(target);\n          end = addresses.get(target + 1L);\n          count = (int) (end - start);\n          doc = target;\n          return true;\n        }\n\n        @Override\n        public long nextValue() throws IOException {\n          return values.get(start++);\n        }\n\n        @Override\n        public int docValueCount() {\n          return count;\n        }\n      };\n    } else {\n      // sparse\n      final IndexedDISI disi = disiCacheFactory.createCachedIndexedDISI(\n          data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numDocsWithField, entry.name);\n      return new SortedNumericDocValues() {\n\n        boolean set;\n        long start, end;\n        int count;\n\n        @Override\n        public int nextDoc() throws IOException {\n          set = false;\n          return disi.nextDoc();\n        }\n\n        @Override\n        public int docID() {\n          return disi.docID();\n        }\n\n        @Override\n        public long cost() {\n          return disi.cost();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          set = false;\n          return disi.advance(target);\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          set = false;\n          return disi.advanceExact(target);\n        }\n\n        @Override\n        public long nextValue() throws IOException {\n          set();\n          return values.get(start++);\n        }\n\n        @Override\n        public int docValueCount() {\n          set();\n          return count;\n        }\n\n        private void set() {\n          if (set == false) {\n            final int index = disi.index();\n            start = addresses.get(index);\n            end = addresses.get(index + 1L);\n            count = (int) (end - start);\n            set = true;\n          }\n        }\n\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd70c9571310639a77f0123aea0db41077d9bb6","date":1544538617,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (entry.numValues == entry.numDocsWithField) {\n      return DocValues.singleton(getNumeric(entry));\n    }\n\n    final RandomAccessInput addressesInput = data.randomAccessSlice(entry.addressesOffset, entry.addressesLength);\n    final LongValues addresses = DirectMonotonicReader.getInstance(entry.addressesMeta, addressesInput);\n\n    final LongValues values = getNumericValues(entry);\n\n    if (entry.docsWithFieldOffset == -1) {\n      // dense\n      return new SortedNumericDocValues() {\n\n        int doc = -1;\n        long start, end;\n        int count;\n\n        @Override\n        public int nextDoc() throws IOException {\n          return advance(doc + 1);\n        }\n\n        @Override\n        public int docID() {\n          return doc;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          if (target >= maxDoc) {\n            return doc = NO_MORE_DOCS;\n          }\n          start = addresses.get(target);\n          end = addresses.get(target + 1L);\n          count = (int) (end - start);\n          return doc = target;\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          start = addresses.get(target);\n          end = addresses.get(target + 1L);\n          count = (int) (end - start);\n          doc = target;\n          return true;\n        }\n\n        @Override\n        public long nextValue() throws IOException {\n          return values.get(start++);\n        }\n\n        @Override\n        public int docValueCount() {\n          return count;\n        }\n      };\n    } else {\n      // sparse\n      final IndexedDISI disi = new IndexedDISI(data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numDocsWithField);\n      return new SortedNumericDocValues() {\n\n        boolean set;\n        long start, end;\n        int count;\n\n        @Override\n        public int nextDoc() throws IOException {\n          set = false;\n          return disi.nextDoc();\n        }\n\n        @Override\n        public int docID() {\n          return disi.docID();\n        }\n\n        @Override\n        public long cost() {\n          return disi.cost();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          set = false;\n          return disi.advance(target);\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          set = false;\n          return disi.advanceExact(target);\n        }\n\n        @Override\n        public long nextValue() throws IOException {\n          set();\n          return values.get(start++);\n        }\n\n        @Override\n        public int docValueCount() {\n          set();\n          return count;\n        }\n\n        private void set() {\n          if (set == false) {\n            final int index = disi.index();\n            start = addresses.get(index);\n            end = addresses.get(index + 1L);\n            count = (int) (end - start);\n            set = true;\n          }\n        }\n\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (entry.numValues == entry.numDocsWithField) {\n      return DocValues.singleton(getNumeric(entry));\n    }\n\n    final RandomAccessInput addressesInput = data.randomAccessSlice(entry.addressesOffset, entry.addressesLength);\n    final LongValues addresses = DirectMonotonicReader.getInstance(entry.addressesMeta, addressesInput);\n\n    final LongValues values = getNumericValues(entry);\n\n    if (entry.docsWithFieldOffset == -1) {\n      // dense\n      return new SortedNumericDocValues() {\n\n        int doc = -1;\n        long start, end;\n        int count;\n\n        @Override\n        public int nextDoc() throws IOException {\n          return advance(doc + 1);\n        }\n\n        @Override\n        public int docID() {\n          return doc;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          if (target >= maxDoc) {\n            return doc = NO_MORE_DOCS;\n          }\n          start = addresses.get(target);\n          end = addresses.get(target + 1L);\n          count = (int) (end - start);\n          return doc = target;\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          start = addresses.get(target);\n          end = addresses.get(target + 1L);\n          count = (int) (end - start);\n          doc = target;\n          return true;\n        }\n\n        @Override\n        public long nextValue() throws IOException {\n          return values.get(start++);\n        }\n\n        @Override\n        public int docValueCount() {\n          return count;\n        }\n      };\n    } else {\n      // sparse\n      final IndexedDISI disi = disiCacheFactory.createCachedIndexedDISI(\n          data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numDocsWithField, entry.name);\n      return new SortedNumericDocValues() {\n\n        boolean set;\n        long start, end;\n        int count;\n\n        @Override\n        public int nextDoc() throws IOException {\n          set = false;\n          return disi.nextDoc();\n        }\n\n        @Override\n        public int docID() {\n          return disi.docID();\n        }\n\n        @Override\n        public long cost() {\n          return disi.cost();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          set = false;\n          return disi.advance(target);\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          set = false;\n          return disi.advanceExact(target);\n        }\n\n        @Override\n        public long nextValue() throws IOException {\n          set();\n          return values.get(start++);\n        }\n\n        @Override\n        public int docValueCount() {\n          set();\n          return count;\n        }\n\n        private void set() {\n          if (set == false) {\n            final int index = disi.index();\n            start = addresses.get(index);\n            end = addresses.get(index + 1L);\n            count = (int) (end - start);\n            set = true;\n          }\n        }\n\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":5,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (entry.numValues == entry.numDocsWithField) {\n      return DocValues.singleton(getNumeric(entry));\n    }\n\n    final RandomAccessInput addressesInput = data.randomAccessSlice(entry.addressesOffset, entry.addressesLength);\n    final LongValues addresses = DirectMonotonicReader.getInstance(entry.addressesMeta, addressesInput);\n\n    final LongValues values = getNumericValues(entry);\n\n    if (entry.docsWithFieldOffset == -1) {\n      // dense\n      return new SortedNumericDocValues() {\n\n        int doc = -1;\n        long start, end;\n        int count;\n\n        @Override\n        public int nextDoc() throws IOException {\n          return advance(doc + 1);\n        }\n\n        @Override\n        public int docID() {\n          return doc;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          if (target >= maxDoc) {\n            return doc = NO_MORE_DOCS;\n          }\n          start = addresses.get(target);\n          end = addresses.get(target + 1L);\n          count = (int) (end - start);\n          return doc = target;\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          start = addresses.get(target);\n          end = addresses.get(target + 1L);\n          count = (int) (end - start);\n          doc = target;\n          return true;\n        }\n\n        @Override\n        public long nextValue() throws IOException {\n          return values.get(start++);\n        }\n\n        @Override\n        public int docValueCount() {\n          return count;\n        }\n      };\n    } else {\n      // sparse\n      final IndexedDISI disi = new IndexedDISI(data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numDocsWithField);\n      return new SortedNumericDocValues() {\n\n        boolean set;\n        long start, end;\n        int count;\n\n        @Override\n        public int nextDoc() throws IOException {\n          set = false;\n          return disi.nextDoc();\n        }\n\n        @Override\n        public int docID() {\n          return disi.docID();\n        }\n\n        @Override\n        public long cost() {\n          return disi.cost();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          set = false;\n          return disi.advance(target);\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          set = false;\n          return disi.advanceExact(target);\n        }\n\n        @Override\n        public long nextValue() throws IOException {\n          set();\n          return values.get(start++);\n        }\n\n        @Override\n        public int docValueCount() {\n          set();\n          return count;\n        }\n\n        private void set() {\n          if (set == false) {\n            final int index = disi.index();\n            start = addresses.get(index);\n            end = addresses.get(index + 1L);\n            count = (int) (end - start);\n            set = true;\n          }\n        }\n\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (entry.numValues == entry.numDocsWithField) {\n      return DocValues.singleton(getNumeric(entry));\n    }\n\n    final RandomAccessInput addressesInput = data.randomAccessSlice(entry.addressesOffset, entry.addressesLength);\n    final LongValues addresses = DirectMonotonicReader.getInstance(entry.addressesMeta, addressesInput);\n\n    final LongValues values = getNumericValues(entry);\n\n    if (entry.docsWithFieldOffset == -1) {\n      // dense\n      return new SortedNumericDocValues() {\n\n        int doc = -1;\n        long start, end;\n        int count;\n\n        @Override\n        public int nextDoc() throws IOException {\n          return advance(doc + 1);\n        }\n\n        @Override\n        public int docID() {\n          return doc;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          if (target >= maxDoc) {\n            return doc = NO_MORE_DOCS;\n          }\n          start = addresses.get(target);\n          end = addresses.get(target + 1L);\n          count = (int) (end - start);\n          return doc = target;\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          start = addresses.get(target);\n          end = addresses.get(target + 1L);\n          count = (int) (end - start);\n          doc = target;\n          return true;\n        }\n\n        @Override\n        public long nextValue() throws IOException {\n          return values.get(start++);\n        }\n\n        @Override\n        public int docValueCount() {\n          return count;\n        }\n      };\n    } else {\n      // sparse\n      final IndexedDISI disi = new IndexedDISI(data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numDocsWithField);\n      return new SortedNumericDocValues() {\n\n        boolean set;\n        long start, end;\n        int count;\n\n        @Override\n        public int nextDoc() throws IOException {\n          set = false;\n          return disi.nextDoc();\n        }\n\n        @Override\n        public int docID() {\n          return disi.docID();\n        }\n\n        @Override\n        public long cost() {\n          return disi.cost();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          set = false;\n          return disi.advance(target);\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          set = false;\n          return disi.advanceExact(target);\n        }\n\n        @Override\n        public long nextValue() throws IOException {\n          set();\n          return values.get(start++);\n        }\n\n        @Override\n        public int docValueCount() {\n          set();\n          return count;\n        }\n\n        private void set() {\n          if (set == false) {\n            final int index = disi.index();\n            start = addresses.get(index);\n            end = addresses.get(index + 1L);\n            count = (int) (end - start);\n            set = true;\n          }\n        }\n\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":5,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (entry.numValues == entry.numDocsWithField) {\n      return DocValues.singleton(getNumeric(entry));\n    }\n\n    final RandomAccessInput addressesInput = data.randomAccessSlice(entry.addressesOffset, entry.addressesLength);\n    final LongValues addresses = DirectMonotonicReader.getInstance(entry.addressesMeta, addressesInput);\n\n    final LongValues values = getNumericValues(entry);\n\n    if (entry.docsWithFieldOffset == -1) {\n      // dense\n      return new SortedNumericDocValues() {\n\n        int doc = -1;\n        long start, end;\n        int count;\n\n        @Override\n        public int nextDoc() throws IOException {\n          return advance(doc + 1);\n        }\n\n        @Override\n        public int docID() {\n          return doc;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          if (target >= maxDoc) {\n            return doc = NO_MORE_DOCS;\n          }\n          start = addresses.get(target);\n          end = addresses.get(target + 1L);\n          count = (int) (end - start);\n          return doc = target;\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          start = addresses.get(target);\n          end = addresses.get(target + 1L);\n          count = (int) (end - start);\n          doc = target;\n          return true;\n        }\n\n        @Override\n        public long nextValue() throws IOException {\n          return values.get(start++);\n        }\n\n        @Override\n        public int docValueCount() {\n          return count;\n        }\n      };\n    } else {\n      // sparse\n      final IndexedDISI disi = new IndexedDISI(data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numDocsWithField);\n      return new SortedNumericDocValues() {\n\n        boolean set;\n        long start, end;\n        int count;\n\n        @Override\n        public int nextDoc() throws IOException {\n          set = false;\n          return disi.nextDoc();\n        }\n\n        @Override\n        public int docID() {\n          return disi.docID();\n        }\n\n        @Override\n        public long cost() {\n          return disi.cost();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          set = false;\n          return disi.advance(target);\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          set = false;\n          return disi.advanceExact(target);\n        }\n\n        @Override\n        public long nextValue() throws IOException {\n          set();\n          return values.get(start++);\n        }\n\n        @Override\n        public int docValueCount() {\n          set();\n          return count;\n        }\n\n        private void set() {\n          if (set == false) {\n            final int index = disi.index();\n            start = addresses.get(index);\n            end = addresses.get(index + 1L);\n            count = (int) (end - start);\n            set = true;\n          }\n        }\n\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedNumericEntry entry = sortedNumerics.get(field.name);\n    if (entry.numValues == entry.numDocsWithField) {\n      return DocValues.singleton(getNumeric(entry));\n    }\n\n    final RandomAccessInput addressesInput = data.randomAccessSlice(entry.addressesOffset, entry.addressesLength);\n    final LongValues addresses = DirectMonotonicReader.getInstance(entry.addressesMeta, addressesInput);\n\n    final LongValues values = getNumericValues(entry);\n\n    if (entry.docsWithFieldOffset == -1) {\n      // dense\n      return new SortedNumericDocValues() {\n\n        int doc = -1;\n        long start, end;\n        int count;\n\n        @Override\n        public int nextDoc() throws IOException {\n          return advance(doc + 1);\n        }\n\n        @Override\n        public int docID() {\n          return doc;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          if (target >= maxDoc) {\n            return doc = NO_MORE_DOCS;\n          }\n          start = addresses.get(target);\n          end = addresses.get(target + 1L);\n          count = (int) (end - start);\n          return doc = target;\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          start = addresses.get(target);\n          end = addresses.get(target + 1L);\n          count = (int) (end - start);\n          doc = target;\n          return true;\n        }\n\n        @Override\n        public long nextValue() throws IOException {\n          return values.get(start++);\n        }\n\n        @Override\n        public int docValueCount() {\n          return count;\n        }\n      };\n    } else {\n      // sparse\n      final IndexedDISI disi = new IndexedDISI(data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numDocsWithField);\n      return new SortedNumericDocValues() {\n\n        boolean set;\n        long start, end;\n        int count;\n\n        @Override\n        public int nextDoc() throws IOException {\n          set = false;\n          return disi.nextDoc();\n        }\n\n        @Override\n        public int docID() {\n          return disi.docID();\n        }\n\n        @Override\n        public long cost() {\n          return disi.cost();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          set = false;\n          return disi.advance(target);\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          set = false;\n          return disi.advanceExact(target);\n        }\n\n        @Override\n        public long nextValue() throws IOException {\n          set();\n          return values.get(start++);\n        }\n\n        @Override\n        public int docValueCount() {\n          set();\n          return count;\n        }\n\n        private void set() {\n          if (set == false) {\n            final int index = disi.index();\n            start = addresses.get(index);\n            end = addresses.get(index + 1L);\n            count = (int) (end - start);\n            set = true;\n          }\n        }\n\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["cfd70c9571310639a77f0123aea0db41077d9bb6"],"23e44daeaa8b89694d10df5999956c8e14a7dd09":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","084884d4602f4d1c7411eab29e897e349ce62675"],"cfd70c9571310639a77f0123aea0db41077d9bb6":["fb9d1512598fc72005b830d5e2b88e61a0f4b374","5c74cb19c6e988ccfef4286a1f3f0e5930f0863e"],"fb9d1512598fc72005b830d5e2b88e61a0f4b374":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"5c74cb19c6e988ccfef4286a1f3f0e5930f0863e":["fb9d1512598fc72005b830d5e2b88e61a0f4b374"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","23e44daeaa8b89694d10df5999956c8e14a7dd09"],"084884d4602f4d1c7411eab29e897e349ce62675":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["cfd70c9571310639a77f0123aea0db41077d9bb6","03e17b020972a0d6e8d6823f545571a66646a167"],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["23e44daeaa8b89694d10df5999956c8e14a7dd09"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["23e44daeaa8b89694d10df5999956c8e14a7dd09","11134e449dabe11d6d0ff6a564d84b82cbe93722"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03e17b020972a0d6e8d6823f545571a66646a167"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"23e44daeaa8b89694d10df5999956c8e14a7dd09":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","11134e449dabe11d6d0ff6a564d84b82cbe93722","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["23e44daeaa8b89694d10df5999956c8e14a7dd09"],"cfd70c9571310639a77f0123aea0db41077d9bb6":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836"],"fb9d1512598fc72005b830d5e2b88e61a0f4b374":["cfd70c9571310639a77f0123aea0db41077d9bb6","5c74cb19c6e988ccfef4286a1f3f0e5930f0863e"],"5c74cb19c6e988ccfef4286a1f3f0e5930f0863e":["cfd70c9571310639a77f0123aea0db41077d9bb6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"084884d4602f4d1c7411eab29e897e349ce62675":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1967bed916cc89da82a1c2085f27976da6d08cbd","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","084884d4602f4d1c7411eab29e897e349ce62675"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["fb9d1512598fc72005b830d5e2b88e61a0f4b374","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}