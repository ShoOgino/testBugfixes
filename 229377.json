{"path":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieUtils#testDoubles(TrieUtils).mjava","commits":[{"id":"29191e6ce86bfcd231cd069834a87833fa4079c1","date":1228333111,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieUtils#testDoubles(TrieUtils).mjava","pathOld":"/dev/null","sourceNew":"\tprivate void testDoubles(TrieUtils variant) throws Exception {\n\t\tdouble[] vals=new double[]{\n\t\t\tDouble.NEGATIVE_INFINITY, -2.3E25, -1.0E15, -1.0, -1.0E-1, -1.0E-2, -0.0, \n\t\t\t+0.0, 1.0E-2, 1.0E-1, 1.0, 1.0E15, 2.3E25, Double.POSITIVE_INFINITY\n\t\t};\n\t\tString[] trieVals=new String[vals.length];\n\t\t\n\t\t// check back and forth conversion\n\t\tfor (int i=0; i<vals.length; i++) {\n\t\t\ttrieVals[i]=variant.doubleToTrieCoded(vals[i]);\n\t\t\tassertTrue( \"Back and forth conversion should return same value\", vals[i]==variant.trieCodedToDouble(trieVals[i]) );\n\t\t}\n\t\t\n\t\t// check sort order (trieVals should be ascending)\n\t\tfor (int i=1; i<vals.length; i++) {\n\t\t\tassertTrue( trieVals[i-1].compareTo( trieVals[i] ) < 0 );\n\t\t}\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50964af5d3d71f4b40f52d357369fb108884d906","date":1228388819,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieUtils#testDoubles(TrieUtils).mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieUtils#testDoubles(TrieUtils).mjava","sourceNew":"\tprivate void testDoubles(TrieUtils variant) throws Exception {\n\t\tdouble[] vals=new double[]{\n\t\t\tDouble.NEGATIVE_INFINITY, -2.3E25, -1.0E15, -1.0, -1.0E-1, -1.0E-2, -0.0, \n\t\t\t+0.0, 1.0E-2, 1.0E-1, 1.0, 1.0E15, 2.3E25, Double.POSITIVE_INFINITY\n\t\t};\n\t\tString[] trieVals=new String[vals.length];\n\t\t\n\t\t// check back and forth conversion\n\t\tfor (int i=0; i<vals.length; i++) {\n\t\t\ttrieVals[i]=variant.doubleToTrieCoded(vals[i]);\n\t\t\tassertTrue( \"Back and forth conversion should return same value\", vals[i]==variant.trieCodedToDouble(trieVals[i]) );\n\t\t\tassertTrue( \"Automatic back conversion with encoding detection should return same value\", vals[i]==TrieUtils.trieCodedToDoubleAuto(trieVals[i]) );\n\t\t}\n\t\t\n\t\t// check sort order (trieVals should be ascending)\n\t\tfor (int i=1; i<vals.length; i++) {\n\t\t\tassertTrue( trieVals[i-1].compareTo( trieVals[i] ) < 0 );\n\t\t}\n\t}\n\n","sourceOld":"\tprivate void testDoubles(TrieUtils variant) throws Exception {\n\t\tdouble[] vals=new double[]{\n\t\t\tDouble.NEGATIVE_INFINITY, -2.3E25, -1.0E15, -1.0, -1.0E-1, -1.0E-2, -0.0, \n\t\t\t+0.0, 1.0E-2, 1.0E-1, 1.0, 1.0E15, 2.3E25, Double.POSITIVE_INFINITY\n\t\t};\n\t\tString[] trieVals=new String[vals.length];\n\t\t\n\t\t// check back and forth conversion\n\t\tfor (int i=0; i<vals.length; i++) {\n\t\t\ttrieVals[i]=variant.doubleToTrieCoded(vals[i]);\n\t\t\tassertTrue( \"Back and forth conversion should return same value\", vals[i]==variant.trieCodedToDouble(trieVals[i]) );\n\t\t}\n\t\t\n\t\t// check sort order (trieVals should be ascending)\n\t\tfor (int i=1; i<vals.length; i++) {\n\t\t\tassertTrue( trieVals[i-1].compareTo( trieVals[i] ) < 0 );\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ef14ec05032a847f9ce1820055c6c29f72d771a","date":1231669514,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieUtils#testDoubles(TrieUtils).mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieUtils#testDoubles(TrieUtils).mjava","sourceNew":"  private void testDoubles(TrieUtils variant) throws Exception {\n    double[] vals=new double[]{\n      Double.NEGATIVE_INFINITY, -2.3E25, -1.0E15, -1.0, -1.0E-1, -1.0E-2, -0.0, \n      +0.0, 1.0E-2, 1.0E-1, 1.0, 1.0E15, 2.3E25, Double.POSITIVE_INFINITY\n    };\n    String[] trieVals=new String[vals.length];\n    \n    // check back and forth conversion\n    for (int i=0; i<vals.length; i++) {\n      trieVals[i]=variant.doubleToTrieCoded(vals[i]);\n      assertTrue( \"Back and forth conversion should return same value\", vals[i]==variant.trieCodedToDouble(trieVals[i]) );\n      assertTrue( \"Automatic back conversion with encoding detection should return same value\", vals[i]==TrieUtils.trieCodedToDoubleAuto(trieVals[i]) );\n    }\n    \n    // check sort order (trieVals should be ascending)\n    for (int i=1; i<vals.length; i++) {\n      assertTrue( trieVals[i-1].compareTo( trieVals[i] ) < 0 );\n    }\n  }\n\n","sourceOld":"\tprivate void testDoubles(TrieUtils variant) throws Exception {\n\t\tdouble[] vals=new double[]{\n\t\t\tDouble.NEGATIVE_INFINITY, -2.3E25, -1.0E15, -1.0, -1.0E-1, -1.0E-2, -0.0, \n\t\t\t+0.0, 1.0E-2, 1.0E-1, 1.0, 1.0E15, 2.3E25, Double.POSITIVE_INFINITY\n\t\t};\n\t\tString[] trieVals=new String[vals.length];\n\t\t\n\t\t// check back and forth conversion\n\t\tfor (int i=0; i<vals.length; i++) {\n\t\t\ttrieVals[i]=variant.doubleToTrieCoded(vals[i]);\n\t\t\tassertTrue( \"Back and forth conversion should return same value\", vals[i]==variant.trieCodedToDouble(trieVals[i]) );\n\t\t\tassertTrue( \"Automatic back conversion with encoding detection should return same value\", vals[i]==TrieUtils.trieCodedToDoubleAuto(trieVals[i]) );\n\t\t}\n\t\t\n\t\t// check sort order (trieVals should be ascending)\n\t\tfor (int i=1; i<vals.length; i++) {\n\t\t\tassertTrue( trieVals[i-1].compareTo( trieVals[i] ) < 0 );\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0","date":1234549621,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieUtils#testDoubles(TrieUtils).mjava","sourceNew":null,"sourceOld":"  private void testDoubles(TrieUtils variant) throws Exception {\n    double[] vals=new double[]{\n      Double.NEGATIVE_INFINITY, -2.3E25, -1.0E15, -1.0, -1.0E-1, -1.0E-2, -0.0, \n      +0.0, 1.0E-2, 1.0E-1, 1.0, 1.0E15, 2.3E25, Double.POSITIVE_INFINITY\n    };\n    String[] trieVals=new String[vals.length];\n    \n    // check back and forth conversion\n    for (int i=0; i<vals.length; i++) {\n      trieVals[i]=variant.doubleToTrieCoded(vals[i]);\n      assertTrue( \"Back and forth conversion should return same value\", vals[i]==variant.trieCodedToDouble(trieVals[i]) );\n      assertTrue( \"Automatic back conversion with encoding detection should return same value\", vals[i]==TrieUtils.trieCodedToDoubleAuto(trieVals[i]) );\n    }\n    \n    // check sort order (trieVals should be ascending)\n    for (int i=1; i<vals.length; i++) {\n      assertTrue( trieVals[i-1].compareTo( trieVals[i] ) < 0 );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["8ef14ec05032a847f9ce1820055c6c29f72d771a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"29191e6ce86bfcd231cd069834a87833fa4079c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8ef14ec05032a847f9ce1820055c6c29f72d771a":["50964af5d3d71f4b40f52d357369fb108884d906"],"50964af5d3d71f4b40f52d357369fb108884d906":["29191e6ce86bfcd231cd069834a87833fa4079c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"]},"commit2Childs":{"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29191e6ce86bfcd231cd069834a87833fa4079c1"],"29191e6ce86bfcd231cd069834a87833fa4079c1":["50964af5d3d71f4b40f52d357369fb108884d906"],"8ef14ec05032a847f9ce1820055c6c29f72d771a":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"50964af5d3d71f4b40f52d357369fb108884d906":["8ef14ec05032a847f9ce1820055c6c29f72d771a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}