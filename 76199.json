{"path":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#lookupShardLeaderOfCollection(String).mjava","commits":[{"id":"5613a70439d5d429f0689c2c5a21615e58deff97","date":1512102314,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#lookupShardLeaderOfCollection(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/TimePartitionedUpdateProcessor#lookupShardLeaderOfCollection(String).mjava","sourceNew":"  private SolrCmdDistributor.Node lookupShardLeaderOfCollection(String collection) {\n    //TODO consider router to get the right slice.  Refactor common code in CloudSolrClient & DistributedUrp\n    final Collection<Slice> activeSlices = zkController.getClusterState().getCollection(collection).getActiveSlices();\n    if (activeSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Cannot route to collection \" + collection);\n    }\n    final Slice slice = activeSlices.iterator().next();\n    //TODO when should we do StdNode vs RetryNode?\n    final Replica leader = slice.getLeader();\n    if (leader == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,\n          \"No 'leader' replica available for shard \" + slice.getName() + \" of collection \" + collection);\n    }\n    return new SolrCmdDistributor.RetryNode(new ZkCoreNodeProps(leader), zkController.getZkStateReader(),\n        collection, null);\n  }\n\n","sourceOld":"  private SolrCmdDistributor.Node lookupShardLeaderOfCollection(String collection) {\n    //TODO consider router to get the right slice.  Refactor common code in CloudSolrClient & DistributedUrp\n    final Collection<Slice> activeSlices = zkController.getClusterState().getCollection(collection).getActiveSlices();\n    if (activeSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Cannot route to collection \" + collection);\n    }\n    final Slice slice = activeSlices.iterator().next();\n    //TODO when should we do StdNode vs RetryNode?\n    final Replica leader = slice.getLeader();\n    if (leader == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,\n          \"No 'leader' replica available for shard \" + slice.getName() + \" of collection \" + collection);\n    }\n    return new SolrCmdDistributor.RetryNode(new ZkCoreNodeProps(leader), zkController.getZkStateReader(),\n        collection, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60b45f127b5537b5bf62181784ef28b52f4b6a08","date":1529595959,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#lookupShardLeaderOfCollection(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#lookupShardLeaderOfCollection(String).mjava","sourceNew":"  private SolrCmdDistributor.Node lookupShardLeaderOfCollection(String collection) {\n    final Collection<Slice> activeSlices = zkController.getClusterState().getCollection(collection).getActiveSlices();\n    if (activeSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Cannot route to collection \" + collection);\n    }\n    final Slice slice = activeSlices.iterator().next();\n    return getLeaderNode(collection, slice);\n  }\n\n","sourceOld":"  private SolrCmdDistributor.Node lookupShardLeaderOfCollection(String collection) {\n    //TODO consider router to get the right slice.  Refactor common code in CloudSolrClient & DistributedUrp\n    final Collection<Slice> activeSlices = zkController.getClusterState().getCollection(collection).getActiveSlices();\n    if (activeSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Cannot route to collection \" + collection);\n    }\n    final Slice slice = activeSlices.iterator().next();\n    //TODO when should we do StdNode vs RetryNode?\n    final Replica leader = slice.getLeader();\n    if (leader == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,\n          \"No 'leader' replica available for shard \" + slice.getName() + \" of collection \" + collection);\n    }\n    return new SolrCmdDistributor.RetryNode(new ZkCoreNodeProps(leader), zkController.getZkStateReader(),\n        collection, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#lookupShardLeaderOfCollection(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#lookupShardLeaderOfCollection(String).mjava","sourceNew":"  private SolrCmdDistributor.Node lookupShardLeaderOfCollection(String collection) {\n    final Collection<Slice> activeSlices = zkController.getClusterState().getCollection(collection).getActiveSlices();\n    if (activeSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Cannot route to collection \" + collection);\n    }\n    final Slice slice = activeSlices.iterator().next();\n    return getLeaderNode(collection, slice);\n  }\n\n","sourceOld":"  private SolrCmdDistributor.Node lookupShardLeaderOfCollection(String collection) {\n    //TODO consider router to get the right slice.  Refactor common code in CloudSolrClient & DistributedUrp\n    final Collection<Slice> activeSlices = zkController.getClusterState().getCollection(collection).getActiveSlices();\n    if (activeSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Cannot route to collection \" + collection);\n    }\n    final Slice slice = activeSlices.iterator().next();\n    //TODO when should we do StdNode vs RetryNode?\n    final Replica leader = slice.getLeader();\n    if (leader == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,\n          \"No 'leader' replica available for shard \" + slice.getName() + \" of collection \" + collection);\n    }\n    return new SolrCmdDistributor.RetryNode(new ZkCoreNodeProps(leader), zkController.getZkStateReader(),\n        collection, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#lookupShardLeaderOfCollection(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#lookupShardLeaderOfCollection(String).mjava","sourceNew":"  private SolrCmdDistributor.Node lookupShardLeaderOfCollection(String collection) {\n    final Collection<Slice> activeSlices = zkController.getClusterState().getCollection(collection).getActiveSlices();\n    if (activeSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Cannot route to collection \" + collection);\n    }\n    final Slice slice = activeSlices.iterator().next();\n    return getLeaderNode(collection, slice);\n  }\n\n","sourceOld":"  private SolrCmdDistributor.Node lookupShardLeaderOfCollection(String collection) {\n    //TODO consider router to get the right slice.  Refactor common code in CloudSolrClient & DistributedUrp\n    final Collection<Slice> activeSlices = zkController.getClusterState().getCollection(collection).getActiveSlices();\n    if (activeSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Cannot route to collection \" + collection);\n    }\n    final Slice slice = activeSlices.iterator().next();\n    //TODO when should we do StdNode vs RetryNode?\n    final Replica leader = slice.getLeader();\n    if (leader == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,\n          \"No 'leader' replica available for shard \" + slice.getName() + \" of collection \" + collection);\n    }\n    return new SolrCmdDistributor.RetryNode(new ZkCoreNodeProps(leader), zkController.getZkStateReader(),\n        collection, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c84df91ca6a2e8d6f26f185663112546a27f6b45","date":1536077760,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#lookupShardLeaderOfCollection(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#lookupShardLeaderOfCollection(String).mjava","sourceNew":"  private SolrCmdDistributor.Node lookupShardLeaderOfCollection(String collection) {\n    final Slice[] activeSlices = zkController.getClusterState().getCollection(collection).getActiveSlicesArr();\n    if (activeSlices.length == 0) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Cannot route to collection \" + collection);\n    }\n    final Slice slice = activeSlices[0];\n    return getLeaderNode(collection, slice);\n  }\n\n","sourceOld":"  private SolrCmdDistributor.Node lookupShardLeaderOfCollection(String collection) {\n    final Collection<Slice> activeSlices = zkController.getClusterState().getCollection(collection).getActiveSlices();\n    if (activeSlices.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Cannot route to collection \" + collection);\n    }\n    final Slice slice = activeSlices.iterator().next();\n    return getLeaderNode(collection, slice);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b627755385655c7cd3fb296f17593658805cf4d5","date":1552455143,"type":5,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/RoutedAliasUpdateProcessor#lookupShardLeaderOfCollection(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#lookupShardLeaderOfCollection(String).mjava","sourceNew":"  private SolrCmdDistributor.Node lookupShardLeaderOfCollection(String collection) {\n    final Slice[] activeSlices = zkController.getClusterState().getCollection(collection).getActiveSlicesArr();\n    if (activeSlices.length == 0) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Cannot route to collection \" + collection);\n    }\n    final Slice slice = activeSlices[0];\n    return getLeaderNode(collection, slice);\n  }\n\n","sourceOld":"  private SolrCmdDistributor.Node lookupShardLeaderOfCollection(String collection) {\n    final Slice[] activeSlices = zkController.getClusterState().getCollection(collection).getActiveSlicesArr();\n    if (activeSlices.length == 0) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Cannot route to collection \" + collection);\n    }\n    final Slice slice = activeSlices[0];\n    return getLeaderNode(collection, slice);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c84df91ca6a2e8d6f26f185663112546a27f6b45":["60b45f127b5537b5bf62181784ef28b52f4b6a08"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["5613a70439d5d429f0689c2c5a21615e58deff97","60b45f127b5537b5bf62181784ef28b52f4b6a08"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b627755385655c7cd3fb296f17593658805cf4d5":["c84df91ca6a2e8d6f26f185663112546a27f6b45"],"5613a70439d5d429f0689c2c5a21615e58deff97":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"60b45f127b5537b5bf62181784ef28b52f4b6a08":["5613a70439d5d429f0689c2c5a21615e58deff97"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b627755385655c7cd3fb296f17593658805cf4d5"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["5613a70439d5d429f0689c2c5a21615e58deff97","60b45f127b5537b5bf62181784ef28b52f4b6a08"]},"commit2Childs":{"c84df91ca6a2e8d6f26f185663112546a27f6b45":["b627755385655c7cd3fb296f17593658805cf4d5"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5613a70439d5d429f0689c2c5a21615e58deff97"],"5613a70439d5d429f0689c2c5a21615e58deff97":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","60b45f127b5537b5bf62181784ef28b52f4b6a08","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"b627755385655c7cd3fb296f17593658805cf4d5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"60b45f127b5537b5bf62181784ef28b52f4b6a08":["c84df91ca6a2e8d6f26f185663112546a27f6b45","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}