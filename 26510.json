{"path":"lucene/analysis/icu/src/test/org/apache/lucene/collation/TestICUCollationDocValuesField#doTestRanges(IndexSearcher,String,String,BytesRef,BytesRef,Collator).mjava","commits":[{"id":"9fb0efe75e5c6021561f115dfe334b74786364ba","date":1434366074,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/icu/src/test/org/apache/lucene/collation/TestICUCollationDocValuesField#doTestRanges(IndexSearcher,String,String,BytesRef,BytesRef,Collator).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestRanges(IndexSearcher is, String startPoint, String endPoint, BytesRef startBR, BytesRef endBR, Collator collator) throws Exception { \n    SortedDocValues dvs = MultiDocValues.getSortedValues(is.getIndexReader(), \"collated\");\n    for(int docID=0;docID<is.getIndexReader().maxDoc();docID++) {\n      StoredDocument doc = is.doc(docID);\n      String s = doc.getField(\"field\").stringValue();\n      boolean collatorAccepts = collator.compare(s, startPoint) >= 0 && collator.compare(s, endPoint) <= 0;\n      BytesRef br = dvs.get(docID);\n      boolean luceneAccepts = br.compareTo(startBR) >= 0 && br.compareTo(endBR) <= 0;\n      assertEquals(collatorAccepts, luceneAccepts);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/icu/src/test/org/apache/lucene/collation/TestICUCollationDocValuesField#doTestRanges(IndexSearcher,String,String,BytesRef,BytesRef,Collator).mjava","pathOld":"lucene/analysis/icu/src/test/org/apache/lucene/collation/TestICUCollationDocValuesField#doTestRanges(IndexSearcher,String,String,BytesRef,BytesRef,Collator).mjava","sourceNew":"  private void doTestRanges(IndexSearcher is, String startPoint, String endPoint, BytesRef startBR, BytesRef endBR, Collator collator) throws Exception { \n    SortedDocValues dvs = MultiDocValues.getSortedValues(is.getIndexReader(), \"collated\");\n    for(int docID=0;docID<is.getIndexReader().maxDoc();docID++) {\n      Document doc = is.doc(docID);\n      String s = doc.getField(\"field\").stringValue();\n      boolean collatorAccepts = collator.compare(s, startPoint) >= 0 && collator.compare(s, endPoint) <= 0;\n      BytesRef br = dvs.get(docID);\n      boolean luceneAccepts = br.compareTo(startBR) >= 0 && br.compareTo(endBR) <= 0;\n      assertEquals(collatorAccepts, luceneAccepts);\n    }\n  }\n\n","sourceOld":"  private void doTestRanges(IndexSearcher is, String startPoint, String endPoint, BytesRef startBR, BytesRef endBR, Collator collator) throws Exception { \n    SortedDocValues dvs = MultiDocValues.getSortedValues(is.getIndexReader(), \"collated\");\n    for(int docID=0;docID<is.getIndexReader().maxDoc();docID++) {\n      StoredDocument doc = is.doc(docID);\n      String s = doc.getField(\"field\").stringValue();\n      boolean collatorAccepts = collator.compare(s, startPoint) >= 0 && collator.compare(s, endPoint) <= 0;\n      BytesRef br = dvs.get(docID);\n      boolean luceneAccepts = br.compareTo(startBR) >= 0 && br.compareTo(endBR) <= 0;\n      assertEquals(collatorAccepts, luceneAccepts);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/analysis/icu/src/test/org/apache/lucene/collation/TestICUCollationDocValuesField#doTestRanges(IndexSearcher,String,String,BytesRef,BytesRef,Collator).mjava","pathOld":"lucene/analysis/icu/src/test/org/apache/lucene/collation/TestICUCollationDocValuesField#doTestRanges(IndexSearcher,String,String,BytesRef,BytesRef,Collator).mjava","sourceNew":"  private void doTestRanges(IndexSearcher is, String startPoint, String endPoint, BytesRef startBR, BytesRef endBR, Collator collator) throws Exception { \n    SortedDocValues dvs = MultiDocValues.getSortedValues(is.getIndexReader(), \"collated\");\n    for(int docID=0;docID<is.getIndexReader().maxDoc();docID++) {\n      Document doc = is.doc(docID);\n      String s = doc.getField(\"field\").stringValue();\n      boolean collatorAccepts = collator.compare(s, startPoint) >= 0 && collator.compare(s, endPoint) <= 0;\n      assertEquals(docID, dvs.nextDoc());\n      BytesRef br = dvs.binaryValue();\n      boolean luceneAccepts = br.compareTo(startBR) >= 0 && br.compareTo(endBR) <= 0;\n      assertEquals(collatorAccepts, luceneAccepts);\n    }\n  }\n\n","sourceOld":"  private void doTestRanges(IndexSearcher is, String startPoint, String endPoint, BytesRef startBR, BytesRef endBR, Collator collator) throws Exception { \n    SortedDocValues dvs = MultiDocValues.getSortedValues(is.getIndexReader(), \"collated\");\n    for(int docID=0;docID<is.getIndexReader().maxDoc();docID++) {\n      Document doc = is.doc(docID);\n      String s = doc.getField(\"field\").stringValue();\n      boolean collatorAccepts = collator.compare(s, startPoint) >= 0 && collator.compare(s, endPoint) <= 0;\n      BytesRef br = dvs.get(docID);\n      boolean luceneAccepts = br.compareTo(startBR) >= 0 && br.compareTo(endBR) <= 0;\n      assertEquals(collatorAccepts, luceneAccepts);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/analysis/icu/src/test/org/apache/lucene/collation/TestICUCollationDocValuesField#doTestRanges(IndexSearcher,String,String,BytesRef,BytesRef,Collator).mjava","pathOld":"lucene/analysis/icu/src/test/org/apache/lucene/collation/TestICUCollationDocValuesField#doTestRanges(IndexSearcher,String,String,BytesRef,BytesRef,Collator).mjava","sourceNew":"  private void doTestRanges(IndexSearcher is, String startPoint, String endPoint, BytesRef startBR, BytesRef endBR, Collator collator) throws Exception { \n    SortedDocValues dvs = MultiDocValues.getSortedValues(is.getIndexReader(), \"collated\");\n    for(int docID=0;docID<is.getIndexReader().maxDoc();docID++) {\n      Document doc = is.doc(docID);\n      String s = doc.getField(\"field\").stringValue();\n      boolean collatorAccepts = collator.compare(s, startPoint) >= 0 && collator.compare(s, endPoint) <= 0;\n      assertEquals(docID, dvs.nextDoc());\n      BytesRef br = dvs.binaryValue();\n      boolean luceneAccepts = br.compareTo(startBR) >= 0 && br.compareTo(endBR) <= 0;\n      assertEquals(collatorAccepts, luceneAccepts);\n    }\n  }\n\n","sourceOld":"  private void doTestRanges(IndexSearcher is, String startPoint, String endPoint, BytesRef startBR, BytesRef endBR, Collator collator) throws Exception { \n    SortedDocValues dvs = MultiDocValues.getSortedValues(is.getIndexReader(), \"collated\");\n    for(int docID=0;docID<is.getIndexReader().maxDoc();docID++) {\n      Document doc = is.doc(docID);\n      String s = doc.getField(\"field\").stringValue();\n      boolean collatorAccepts = collator.compare(s, startPoint) >= 0 && collator.compare(s, endPoint) <= 0;\n      BytesRef br = dvs.get(docID);\n      boolean luceneAccepts = br.compareTo(startBR) >= 0 && br.compareTo(endBR) <= 0;\n      assertEquals(collatorAccepts, luceneAccepts);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/icu/src/test/org/apache/lucene/collation/TestICUCollationDocValuesField#doTestRanges(IndexSearcher,String,String,BytesRef,BytesRef,Collator).mjava","pathOld":"lucene/analysis/icu/src/test/org/apache/lucene/collation/TestICUCollationDocValuesField#doTestRanges(IndexSearcher,String,String,BytesRef,BytesRef,Collator).mjava","sourceNew":"  private void doTestRanges(IndexSearcher is, String startPoint, String endPoint, BytesRef startBR, BytesRef endBR, Collator collator) throws Exception { \n    SortedDocValues dvs = MultiDocValues.getSortedValues(is.getIndexReader(), \"collated\");\n    for(int docID=0;docID<is.getIndexReader().maxDoc();docID++) {\n      Document doc = is.doc(docID);\n      String s = doc.getField(\"field\").stringValue();\n      boolean collatorAccepts = collator.compare(s, startPoint) >= 0 && collator.compare(s, endPoint) <= 0;\n      assertEquals(docID, dvs.nextDoc());\n      BytesRef br = dvs.binaryValue();\n      boolean luceneAccepts = br.compareTo(startBR) >= 0 && br.compareTo(endBR) <= 0;\n      assertEquals(collatorAccepts, luceneAccepts);\n    }\n  }\n\n","sourceOld":"  private void doTestRanges(IndexSearcher is, String startPoint, String endPoint, BytesRef startBR, BytesRef endBR, Collator collator) throws Exception { \n    SortedDocValues dvs = MultiDocValues.getSortedValues(is.getIndexReader(), \"collated\");\n    for(int docID=0;docID<is.getIndexReader().maxDoc();docID++) {\n      Document doc = is.doc(docID);\n      String s = doc.getField(\"field\").stringValue();\n      boolean collatorAccepts = collator.compare(s, startPoint) >= 0 && collator.compare(s, endPoint) <= 0;\n      BytesRef br = dvs.get(docID);\n      boolean luceneAccepts = br.compareTo(startBR) >= 0 && br.compareTo(endBR) <= 0;\n      assertEquals(collatorAccepts, luceneAccepts);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7222ccbf51c085332eb28ee772f8dfb65e4d2b01","date":1601887943,"type":5,"author":"Tomoko Uchida","isMerge":false,"pathNew":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/TestICUCollationDocValuesField#doTestRanges(IndexSearcher,String,String,BytesRef,BytesRef,Collator).mjava","pathOld":"lucene/analysis/icu/src/test/org/apache/lucene/collation/TestICUCollationDocValuesField#doTestRanges(IndexSearcher,String,String,BytesRef,BytesRef,Collator).mjava","sourceNew":"  private void doTestRanges(IndexSearcher is, String startPoint, String endPoint, BytesRef startBR, BytesRef endBR, Collator collator) throws Exception { \n    SortedDocValues dvs = MultiDocValues.getSortedValues(is.getIndexReader(), \"collated\");\n    for(int docID=0;docID<is.getIndexReader().maxDoc();docID++) {\n      Document doc = is.doc(docID);\n      String s = doc.getField(\"field\").stringValue();\n      boolean collatorAccepts = collator.compare(s, startPoint) >= 0 && collator.compare(s, endPoint) <= 0;\n      assertEquals(docID, dvs.nextDoc());\n      BytesRef br = dvs.binaryValue();\n      boolean luceneAccepts = br.compareTo(startBR) >= 0 && br.compareTo(endBR) <= 0;\n      assertEquals(collatorAccepts, luceneAccepts);\n    }\n  }\n\n","sourceOld":"  private void doTestRanges(IndexSearcher is, String startPoint, String endPoint, BytesRef startBR, BytesRef endBR, Collator collator) throws Exception { \n    SortedDocValues dvs = MultiDocValues.getSortedValues(is.getIndexReader(), \"collated\");\n    for(int docID=0;docID<is.getIndexReader().maxDoc();docID++) {\n      Document doc = is.doc(docID);\n      String s = doc.getField(\"field\").stringValue();\n      boolean collatorAccepts = collator.compare(s, startPoint) >= 0 && collator.compare(s, endPoint) <= 0;\n      assertEquals(docID, dvs.nextDoc());\n      BytesRef br = dvs.binaryValue();\n      boolean luceneAccepts = br.compareTo(startBR) >= 0 && br.compareTo(endBR) <= 0;\n      assertEquals(collatorAccepts, luceneAccepts);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"9fb0efe75e5c6021561f115dfe334b74786364ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7222ccbf51c085332eb28ee772f8dfb65e4d2b01":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7222ccbf51c085332eb28ee772f8dfb65e4d2b01"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["9fb0efe75e5c6021561f115dfe334b74786364ba"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fb0efe75e5c6021561f115dfe334b74786364ba"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["7222ccbf51c085332eb28ee772f8dfb65e4d2b01","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"9fb0efe75e5c6021561f115dfe334b74786364ba":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"7222ccbf51c085332eb28ee772f8dfb65e4d2b01":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}