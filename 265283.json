{"path":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#buildSortedSet().mjava","commits":[{"id":"1fa60a501961bce2ff07ee1cde7c78699025547e","date":1307054117,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#buildSortedSet().mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/FirstPassGroupingCollector#buildSortedSet().mjava","sourceNew":"  private void buildSortedSet() {\n    final Comparator<CollectedSearchGroup> comparator = new Comparator<CollectedSearchGroup>() {\n      public int compare(CollectedSearchGroup o1, CollectedSearchGroup o2) {\n        for (int compIDX = 0;; compIDX++) {\n          FieldComparator fc = comparators[compIDX];\n          final int c = reversed[compIDX] * fc.compare(o1.comparatorSlot, o2.comparatorSlot);\n          if (c != 0) {\n            return c;\n          } else if (compIDX == compIDXEnd) {\n            return o1.topDoc - o2.topDoc;\n          }\n        }\n      }\n    };\n\n    orderedGroups = new TreeSet<CollectedSearchGroup<GROUP_VALUE_TYPE>>(comparator);\n    orderedGroups.addAll(groupMap.values());\n    assert orderedGroups.size() > 0;\n\n    for (FieldComparator fc : comparators) {\n      fc.setBottom(orderedGroups.last().comparatorSlot);\n    }\n  }\n\n","sourceOld":"  private void buildSortedSet() {\n    final Comparator<CollectedSearchGroup> comparator = new Comparator<CollectedSearchGroup>() {\n      public int compare(CollectedSearchGroup o1, CollectedSearchGroup o2) {\n        for (int compIDX = 0;; compIDX++) {\n          FieldComparator fc = comparators[compIDX];\n          final int c = reversed[compIDX] * fc.compare(o1.comparatorSlot, o2.comparatorSlot);\n          if (c != 0) {\n            return c;\n          } else if (compIDX == compIDXEnd) {\n            return o1.topDoc - o2.topDoc;\n          }\n        }\n      }\n    };\n\n    orderedGroups = new TreeSet<CollectedSearchGroup>(comparator);\n    orderedGroups.addAll(groupMap.values());\n    assert orderedGroups.size() > 0;\n\n    for (FieldComparator fc : comparators) {\n      fc.setBottom(orderedGroups.last().comparatorSlot);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c715a0f99152be7566591f323c6c5a25725a1bcb","date":1307118449,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#buildSortedSet().mjava","pathOld":"/dev/null","sourceNew":"  private void buildSortedSet() {\n    final Comparator<CollectedSearchGroup> comparator = new Comparator<CollectedSearchGroup>() {\n      public int compare(CollectedSearchGroup o1, CollectedSearchGroup o2) {\n        for (int compIDX = 0;; compIDX++) {\n          FieldComparator fc = comparators[compIDX];\n          final int c = reversed[compIDX] * fc.compare(o1.comparatorSlot, o2.comparatorSlot);\n          if (c != 0) {\n            return c;\n          } else if (compIDX == compIDXEnd) {\n            return o1.topDoc - o2.topDoc;\n          }\n        }\n      }\n    };\n\n    orderedGroups = new TreeSet<CollectedSearchGroup<GROUP_VALUE_TYPE>>(comparator);\n    orderedGroups.addAll(groupMap.values());\n    assert orderedGroups.size() > 0;\n\n    for (FieldComparator fc : comparators) {\n      fc.setBottom(orderedGroups.last().comparatorSlot);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e7c99bd45fa88a3d93a03fdd773053bef72268e","date":1307218088,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#buildSortedSet().mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/FirstPassGroupingCollector#buildSortedSet().mjava","sourceNew":"  private void buildSortedSet() {\n    final Comparator<CollectedSearchGroup> comparator = new Comparator<CollectedSearchGroup>() {\n      public int compare(CollectedSearchGroup o1, CollectedSearchGroup o2) {\n        for (int compIDX = 0;; compIDX++) {\n          FieldComparator fc = comparators[compIDX];\n          final int c = reversed[compIDX] * fc.compare(o1.comparatorSlot, o2.comparatorSlot);\n          if (c != 0) {\n            return c;\n          } else if (compIDX == compIDXEnd) {\n            return o1.topDoc - o2.topDoc;\n          }\n        }\n      }\n    };\n\n    orderedGroups = new TreeSet<CollectedSearchGroup<GROUP_VALUE_TYPE>>(comparator);\n    orderedGroups.addAll(groupMap.values());\n    assert orderedGroups.size() > 0;\n\n    for (FieldComparator fc : comparators) {\n      fc.setBottom(orderedGroups.last().comparatorSlot);\n    }\n  }\n\n","sourceOld":"  private void buildSortedSet() {\n    final Comparator<CollectedSearchGroup> comparator = new Comparator<CollectedSearchGroup>() {\n      public int compare(CollectedSearchGroup o1, CollectedSearchGroup o2) {\n        for (int compIDX = 0;; compIDX++) {\n          FieldComparator fc = comparators[compIDX];\n          final int c = reversed[compIDX] * fc.compare(o1.comparatorSlot, o2.comparatorSlot);\n          if (c != 0) {\n            return c;\n          } else if (compIDX == compIDXEnd) {\n            return o1.topDoc - o2.topDoc;\n          }\n        }\n      }\n    };\n\n    orderedGroups = new TreeSet<CollectedSearchGroup>(comparator);\n    orderedGroups.addAll(groupMap.values());\n    assert orderedGroups.size() > 0;\n\n    for (FieldComparator fc : comparators) {\n      fc.setBottom(orderedGroups.last().comparatorSlot);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bfa39296944e5fddc334aa89243d91f9cbb8367","date":1330973284,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#buildSortedSet().mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#buildSortedSet().mjava","sourceNew":"  private void buildSortedSet() {\n    final Comparator<CollectedSearchGroup> comparator = new Comparator<CollectedSearchGroup>() {\n      public int compare(CollectedSearchGroup o1, CollectedSearchGroup o2) {\n        for (int compIDX = 0;; compIDX++) {\n          FieldComparator<?> fc = comparators[compIDX];\n          final int c = reversed[compIDX] * fc.compare(o1.comparatorSlot, o2.comparatorSlot);\n          if (c != 0) {\n            return c;\n          } else if (compIDX == compIDXEnd) {\n            return o1.topDoc - o2.topDoc;\n          }\n        }\n      }\n    };\n\n    orderedGroups = new TreeSet<CollectedSearchGroup<GROUP_VALUE_TYPE>>(comparator);\n    orderedGroups.addAll(groupMap.values());\n    assert orderedGroups.size() > 0;\n\n    for (FieldComparator<?> fc : comparators) {\n      fc.setBottom(orderedGroups.last().comparatorSlot);\n    }\n  }\n\n","sourceOld":"  private void buildSortedSet() {\n    final Comparator<CollectedSearchGroup> comparator = new Comparator<CollectedSearchGroup>() {\n      public int compare(CollectedSearchGroup o1, CollectedSearchGroup o2) {\n        for (int compIDX = 0;; compIDX++) {\n          FieldComparator fc = comparators[compIDX];\n          final int c = reversed[compIDX] * fc.compare(o1.comparatorSlot, o2.comparatorSlot);\n          if (c != 0) {\n            return c;\n          } else if (compIDX == compIDXEnd) {\n            return o1.topDoc - o2.topDoc;\n          }\n        }\n      }\n    };\n\n    orderedGroups = new TreeSet<CollectedSearchGroup<GROUP_VALUE_TYPE>>(comparator);\n    orderedGroups.addAll(groupMap.values());\n    assert orderedGroups.size() > 0;\n\n    for (FieldComparator fc : comparators) {\n      fc.setBottom(orderedGroups.last().comparatorSlot);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#buildSortedSet().mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#buildSortedSet().mjava","sourceNew":"  private void buildSortedSet() {\n    final Comparator<CollectedSearchGroup> comparator = new Comparator<CollectedSearchGroup>() {\n      public int compare(CollectedSearchGroup o1, CollectedSearchGroup o2) {\n        for (int compIDX = 0;; compIDX++) {\n          FieldComparator<?> fc = comparators[compIDX];\n          final int c = reversed[compIDX] * fc.compare(o1.comparatorSlot, o2.comparatorSlot);\n          if (c != 0) {\n            return c;\n          } else if (compIDX == compIDXEnd) {\n            return o1.topDoc - o2.topDoc;\n          }\n        }\n      }\n    };\n\n    orderedGroups = new TreeSet<CollectedSearchGroup<GROUP_VALUE_TYPE>>(comparator);\n    orderedGroups.addAll(groupMap.values());\n    assert orderedGroups.size() > 0;\n\n    for (FieldComparator<?> fc : comparators) {\n      fc.setBottom(orderedGroups.last().comparatorSlot);\n    }\n  }\n\n","sourceOld":"  private void buildSortedSet() {\n    final Comparator<CollectedSearchGroup> comparator = new Comparator<CollectedSearchGroup>() {\n      public int compare(CollectedSearchGroup o1, CollectedSearchGroup o2) {\n        for (int compIDX = 0;; compIDX++) {\n          FieldComparator fc = comparators[compIDX];\n          final int c = reversed[compIDX] * fc.compare(o1.comparatorSlot, o2.comparatorSlot);\n          if (c != 0) {\n            return c;\n          } else if (compIDX == compIDXEnd) {\n            return o1.topDoc - o2.topDoc;\n          }\n        }\n      }\n    };\n\n    orderedGroups = new TreeSet<CollectedSearchGroup<GROUP_VALUE_TYPE>>(comparator);\n    orderedGroups.addAll(groupMap.values());\n    assert orderedGroups.size() > 0;\n\n    for (FieldComparator fc : comparators) {\n      fc.setBottom(orderedGroups.last().comparatorSlot);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb008c8f8fc29e5deccfa43d8a054268ba1c5e48","date":1331199997,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#buildSortedSet().mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#buildSortedSet().mjava","sourceNew":"  private void buildSortedSet() {\n    final Comparator<CollectedSearchGroup<?>> comparator = new Comparator<CollectedSearchGroup<?>>() {\n      public int compare(CollectedSearchGroup<?> o1, CollectedSearchGroup<?> o2) {\n        for (int compIDX = 0;; compIDX++) {\n          FieldComparator<?> fc = comparators[compIDX];\n          final int c = reversed[compIDX] * fc.compare(o1.comparatorSlot, o2.comparatorSlot);\n          if (c != 0) {\n            return c;\n          } else if (compIDX == compIDXEnd) {\n            return o1.topDoc - o2.topDoc;\n          }\n        }\n      }\n    };\n\n    orderedGroups = new TreeSet<CollectedSearchGroup<GROUP_VALUE_TYPE>>(comparator);\n    orderedGroups.addAll(groupMap.values());\n    assert orderedGroups.size() > 0;\n\n    for (FieldComparator<?> fc : comparators) {\n      fc.setBottom(orderedGroups.last().comparatorSlot);\n    }\n  }\n\n","sourceOld":"  private void buildSortedSet() {\n    final Comparator<CollectedSearchGroup> comparator = new Comparator<CollectedSearchGroup>() {\n      public int compare(CollectedSearchGroup o1, CollectedSearchGroup o2) {\n        for (int compIDX = 0;; compIDX++) {\n          FieldComparator<?> fc = comparators[compIDX];\n          final int c = reversed[compIDX] * fc.compare(o1.comparatorSlot, o2.comparatorSlot);\n          if (c != 0) {\n            return c;\n          } else if (compIDX == compIDXEnd) {\n            return o1.topDoc - o2.topDoc;\n          }\n        }\n      }\n    };\n\n    orderedGroups = new TreeSet<CollectedSearchGroup<GROUP_VALUE_TYPE>>(comparator);\n    orderedGroups.addAll(groupMap.values());\n    assert orderedGroups.size() > 0;\n\n    for (FieldComparator<?> fc : comparators) {\n      fc.setBottom(orderedGroups.last().comparatorSlot);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#buildSortedSet().mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#buildSortedSet().mjava","sourceNew":"  private void buildSortedSet() {\n    final Comparator<CollectedSearchGroup<?>> comparator = new Comparator<CollectedSearchGroup<?>>() {\n      public int compare(CollectedSearchGroup<?> o1, CollectedSearchGroup<?> o2) {\n        for (int compIDX = 0;; compIDX++) {\n          FieldComparator<?> fc = comparators[compIDX];\n          final int c = reversed[compIDX] * fc.compare(o1.comparatorSlot, o2.comparatorSlot);\n          if (c != 0) {\n            return c;\n          } else if (compIDX == compIDXEnd) {\n            return o1.topDoc - o2.topDoc;\n          }\n        }\n      }\n    };\n\n    orderedGroups = new TreeSet<CollectedSearchGroup<GROUP_VALUE_TYPE>>(comparator);\n    orderedGroups.addAll(groupMap.values());\n    assert orderedGroups.size() > 0;\n\n    for (FieldComparator<?> fc : comparators) {\n      fc.setBottom(orderedGroups.last().comparatorSlot);\n    }\n  }\n\n","sourceOld":"  private void buildSortedSet() {\n    final Comparator<CollectedSearchGroup> comparator = new Comparator<CollectedSearchGroup>() {\n      public int compare(CollectedSearchGroup o1, CollectedSearchGroup o2) {\n        for (int compIDX = 0;; compIDX++) {\n          FieldComparator<?> fc = comparators[compIDX];\n          final int c = reversed[compIDX] * fc.compare(o1.comparatorSlot, o2.comparatorSlot);\n          if (c != 0) {\n            return c;\n          } else if (compIDX == compIDXEnd) {\n            return o1.topDoc - o2.topDoc;\n          }\n        }\n      }\n    };\n\n    orderedGroups = new TreeSet<CollectedSearchGroup<GROUP_VALUE_TYPE>>(comparator);\n    orderedGroups.addAll(groupMap.values());\n    assert orderedGroups.size() > 0;\n\n    for (FieldComparator<?> fc : comparators) {\n      fc.setBottom(orderedGroups.last().comparatorSlot);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#buildSortedSet().mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#buildSortedSet().mjava","sourceNew":"  private void buildSortedSet() {\n    final Comparator<CollectedSearchGroup<?>> comparator = new Comparator<CollectedSearchGroup<?>>() {\n      public int compare(CollectedSearchGroup<?> o1, CollectedSearchGroup<?> o2) {\n        for (int compIDX = 0;; compIDX++) {\n          FieldComparator<?> fc = comparators[compIDX];\n          final int c = reversed[compIDX] * fc.compare(o1.comparatorSlot, o2.comparatorSlot);\n          if (c != 0) {\n            return c;\n          } else if (compIDX == compIDXEnd) {\n            return o1.topDoc - o2.topDoc;\n          }\n        }\n      }\n    };\n\n    orderedGroups = new TreeSet<CollectedSearchGroup<GROUP_VALUE_TYPE>>(comparator);\n    orderedGroups.addAll(groupMap.values());\n    assert orderedGroups.size() > 0;\n\n    for (FieldComparator<?> fc : comparators) {\n      fc.setBottom(orderedGroups.last().comparatorSlot);\n    }\n  }\n\n","sourceOld":"  private void buildSortedSet() {\n    final Comparator<CollectedSearchGroup<?>> comparator = new Comparator<CollectedSearchGroup<?>>() {\n      public int compare(CollectedSearchGroup<?> o1, CollectedSearchGroup<?> o2) {\n        for (int compIDX = 0;; compIDX++) {\n          FieldComparator<?> fc = comparators[compIDX];\n          final int c = reversed[compIDX] * fc.compare(o1.comparatorSlot, o2.comparatorSlot);\n          if (c != 0) {\n            return c;\n          } else if (compIDX == compIDXEnd) {\n            return o1.topDoc - o2.topDoc;\n          }\n        }\n      }\n    };\n\n    orderedGroups = new TreeSet<CollectedSearchGroup<GROUP_VALUE_TYPE>>(comparator);\n    orderedGroups.addAll(groupMap.values());\n    assert orderedGroups.size() > 0;\n\n    for (FieldComparator<?> fc : comparators) {\n      fc.setBottom(orderedGroups.last().comparatorSlot);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","eb008c8f8fc29e5deccfa43d8a054268ba1c5e48"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["eb008c8f8fc29e5deccfa43d8a054268ba1c5e48"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["1fa60a501961bce2ff07ee1cde7c78699025547e","8bfa39296944e5fddc334aa89243d91f9cbb8367"],"eb008c8f8fc29e5deccfa43d8a054268ba1c5e48":["8bfa39296944e5fddc334aa89243d91f9cbb8367"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c715a0f99152be7566591f323c6c5a25725a1bcb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1fa60a501961bce2ff07ee1cde7c78699025547e"],"8bfa39296944e5fddc334aa89243d91f9cbb8367":["1fa60a501961bce2ff07ee1cde7c78699025547e"],"1fa60a501961bce2ff07ee1cde7c78699025547e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1e7c99bd45fa88a3d93a03fdd773053bef72268e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1fa60a501961bce2ff07ee1cde7c78699025547e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["38e3b736c7ca086d61b7dbb841c905ee115490da"],"eb008c8f8fc29e5deccfa43d8a054268ba1c5e48":["38e3b736c7ca086d61b7dbb841c905ee115490da","b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c715a0f99152be7566591f323c6c5a25725a1bcb","1fa60a501961bce2ff07ee1cde7c78699025547e","1e7c99bd45fa88a3d93a03fdd773053bef72268e"],"c715a0f99152be7566591f323c6c5a25725a1bcb":[],"8bfa39296944e5fddc334aa89243d91f9cbb8367":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","eb008c8f8fc29e5deccfa43d8a054268ba1c5e48"],"1fa60a501961bce2ff07ee1cde7c78699025547e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","c715a0f99152be7566591f323c6c5a25725a1bcb","8bfa39296944e5fddc334aa89243d91f9cbb8367","1e7c99bd45fa88a3d93a03fdd773053bef72268e"],"1e7c99bd45fa88a3d93a03fdd773053bef72268e":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","c715a0f99152be7566591f323c6c5a25725a1bcb","1e7c99bd45fa88a3d93a03fdd773053bef72268e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}