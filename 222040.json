{"path":"lucene/core/src/test/org/apache/lucene/search/TestSort#testReverseSort().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testReverseSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testReverseSort().mjava","sourceNew":"  // test sorts in reverse\n  public void testReverseSort() throws Exception {\n    sort.setSort (new SortField (null, SortField.Type.SCORE, true), SortField.FIELD_DOC );\n    assertMatches (full, queryX, sort, \"IEGCA\");\n    assertMatches (full, queryY, sort, \"JFHDB\");\n\n    sort.setSort (new SortField (null, SortField.Type.DOC, true));\n    assertMatches (full, queryX, sort, \"IGECA\");\n    assertMatches (full, queryY, sort, \"JHFDB\");\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT, true) );\n    assertMatches (full, queryX, sort, \"CAEGI\");\n    assertMatches (full, queryY, sort, \"BJFHD\");\n\n    sort.setSort (new SortField (\"float\", SortField.Type.FLOAT, true) );\n    assertMatches (full, queryX, sort, \"AECIG\");\n    assertMatches (full, queryY, sort, \"BFJHD\");\n    \n    sort.setSort (new SortField (\"string\", SortField.Type.STRING, true) );\n    assertMatches (full, queryX, sort, \"CEGIA\");\n    assertMatches (full, queryY, sort, \"BFHJD\");\n    \n    if (supportsDocValues) {\n      sort.setSort (useDocValues(new SortField (\"int\", SortField.Type.INT, true)) );\n      assertMatches (full, queryX, sort, \"CAEGI\");\n      assertMatches (full, queryY, sort, \"BJFHD\");\n    \n      sort.setSort (useDocValues(new SortField (\"float\", SortField.Type.FLOAT, true)) );\n      assertMatches (full, queryX, sort, \"AECIG\");\n      assertMatches (full, queryY, sort, \"BFJHD\");\n\n      sort.setSort (useDocValues(new SortField (\"string\", getDVStringSortType(), true)) );\n      assertMatches (full, queryX, sort, \"CEGIA\");\n      assertMatches (full, queryY, sort, \"BFHJD\");\n    }\n  }\n\n","sourceOld":"  // test sorts in reverse\n  public void testReverseSort() throws Exception {\n    sort.setSort (new SortField (null, SortField.Type.SCORE, true), SortField.FIELD_DOC );\n    assertMatches (full, queryX, sort, \"IEGCA\");\n    assertMatches (full, queryY, sort, \"JFHDB\");\n\n    sort.setSort (new SortField (null, SortField.Type.DOC, true));\n    assertMatches (full, queryX, sort, \"IGECA\");\n    assertMatches (full, queryY, sort, \"JHFDB\");\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT, true) );\n    assertMatches (full, queryX, sort, \"CAEGI\");\n    assertMatches (full, queryY, sort, \"BJFHD\");\n\n    sort.setSort (new SortField (\"float\", SortField.Type.FLOAT, true) );\n    assertMatches (full, queryX, sort, \"AECIG\");\n    assertMatches (full, queryY, sort, \"BFJHD\");\n    \n    sort.setSort (new SortField (\"string\", SortField.Type.STRING, true) );\n    assertMatches (full, queryX, sort, \"CEGIA\");\n    assertMatches (full, queryY, sort, \"BFHJD\");\n    \n    if (supportsDocValues) {\n      sort.setSort (useDocValues(new SortField (\"int\", SortField.Type.INT, true)) );\n      assertMatches (full, queryX, sort, \"CAEGI\");\n      assertMatches (full, queryY, sort, \"BJFHD\");\n    \n      sort.setSort (useDocValues(new SortField (\"float\", SortField.Type.FLOAT, true)) );\n      assertMatches (full, queryX, sort, \"AECIG\");\n      assertMatches (full, queryY, sort, \"BFJHD\");\n\n      sort.setSort (useDocValues(new SortField (\"string\", getDVStringSortType(), true)) );\n      assertMatches (full, queryX, sort, \"CEGIA\");\n      assertMatches (full, queryY, sort, \"BFHJD\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57ae3024996ccdb3c36c42cb890e1efb37df4ce8","date":1338343651,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testReverseSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testReverseSort().mjava","sourceNew":"  // test sorts in reverse\n  public void testReverseSort() throws Exception {\n    sort.setSort (new SortField (null, SortField.Type.SCORE, true), SortField.FIELD_DOC );\n    assertMatches (full, queryX, sort, \"IEGCA\");\n    assertMatches (full, queryY, sort, \"JFHDB\");\n\n    sort.setSort (new SortField (null, SortField.Type.DOC, true));\n    assertMatches (full, queryX, sort, \"IGECA\");\n    assertMatches (full, queryY, sort, \"JHFDB\");\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT, true) );\n    assertMatches (full, queryX, sort, \"CAEGI\");\n    assertMatches (full, queryY, sort, \"BJFHD\");\n\n    sort.setSort (new SortField (\"float\", SortField.Type.FLOAT, true) );\n    assertMatches (full, queryX, sort, \"AECIG\");\n    assertMatches (full, queryY, sort, \"BFJHD\");\n    \n    sort.setSort (new SortField (\"string\", SortField.Type.STRING, true) );\n    assertMatches (full, queryX, sort, \"CEGIA\");\n    assertMatches (full, queryY, sort, \"BFHJD\");\n    \n    sort.setSort (useDocValues(new SortField (\"int\", SortField.Type.INT, true)) );\n    assertMatches (full, queryX, sort, \"CAEGI\");\n    assertMatches (full, queryY, sort, \"BJFHD\");\n    \n    sort.setSort (useDocValues(new SortField (\"float\", SortField.Type.FLOAT, true)) );\n    assertMatches (full, queryX, sort, \"AECIG\");\n    assertMatches (full, queryY, sort, \"BFJHD\");\n\n    sort.setSort (useDocValues(new SortField (\"string\", getDVStringSortType(), true)) );\n    assertMatches (full, queryX, sort, \"CEGIA\");\n    assertMatches (full, queryY, sort, \"BFHJD\");\n  }\n\n","sourceOld":"  // test sorts in reverse\n  public void testReverseSort() throws Exception {\n    sort.setSort (new SortField (null, SortField.Type.SCORE, true), SortField.FIELD_DOC );\n    assertMatches (full, queryX, sort, \"IEGCA\");\n    assertMatches (full, queryY, sort, \"JFHDB\");\n\n    sort.setSort (new SortField (null, SortField.Type.DOC, true));\n    assertMatches (full, queryX, sort, \"IGECA\");\n    assertMatches (full, queryY, sort, \"JHFDB\");\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT, true) );\n    assertMatches (full, queryX, sort, \"CAEGI\");\n    assertMatches (full, queryY, sort, \"BJFHD\");\n\n    sort.setSort (new SortField (\"float\", SortField.Type.FLOAT, true) );\n    assertMatches (full, queryX, sort, \"AECIG\");\n    assertMatches (full, queryY, sort, \"BFJHD\");\n    \n    sort.setSort (new SortField (\"string\", SortField.Type.STRING, true) );\n    assertMatches (full, queryX, sort, \"CEGIA\");\n    assertMatches (full, queryY, sort, \"BFHJD\");\n    \n    if (supportsDocValues) {\n      sort.setSort (useDocValues(new SortField (\"int\", SortField.Type.INT, true)) );\n      assertMatches (full, queryX, sort, \"CAEGI\");\n      assertMatches (full, queryY, sort, \"BJFHD\");\n    \n      sort.setSort (useDocValues(new SortField (\"float\", SortField.Type.FLOAT, true)) );\n      assertMatches (full, queryX, sort, \"AECIG\");\n      assertMatches (full, queryY, sort, \"BFJHD\");\n\n      sort.setSort (useDocValues(new SortField (\"string\", getDVStringSortType(), true)) );\n      assertMatches (full, queryX, sort, \"CEGIA\");\n      assertMatches (full, queryY, sort, \"BFHJD\");\n    }\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3e29774db46ad98ca4a8d7fcbfab633ebc01f358","date":1355170812,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testReverseSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testReverseSort().mjava","sourceNew":"  // test sorts in reverse\n  public void testReverseSort() throws Exception {\n    sort.setSort(new SortField(null, SortField.Type.SCORE, true), SortField.FIELD_DOC);\n    assertMatches(full, queryX, sort, \"IEGCA\");\n    assertMatches(full, queryY, sort, \"JFHDB\");\n\n    sort.setSort(new SortField(null, SortField.Type.DOC, true));\n    assertMatches(full, queryX, sort, \"IGECA\");\n    assertMatches(full, queryY, sort, \"JHFDB\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT, true));\n    assertMatches(full, queryX, sort, \"CAEGI\");\n    assertMatches(full, queryY, sort, \"BJFHD\");\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT, true));\n    assertMatches(full, queryX, sort, \"AECIG\");\n    assertMatches(full, queryY, sort, \"BFJHD\");\n    \n    sort.setSort(new SortField(\"string\", SortField.Type.STRING, true));\n    assertMatches(full, queryX, sort, \"CEGIA\");\n    assertMatches(full, queryY, sort, \"BFHJD\");\n    \n    sort.setSort(new SortField(\"int_dv\", SortField.Type.INT, true));\n    assertMatches(full, queryX, sort, \"CAEGI\");\n    assertMatches(full, queryY, sort, \"BJFHD\");\n    \n    sort.setSort(new SortField(\"float_dv\", SortField.Type.FLOAT, true));\n    assertMatches(full, queryX, sort, \"AECIG\");\n    assertMatches(full, queryY, sort, \"BFJHD\");\n\n    sort.setSort(new SortField(\"string_dv\", getDVStringSortType(), true));\n    assertMatches(full, queryX, sort, \"CEGIA\");\n    assertMatches(full, queryY, sort, \"BFHJD\");\n  }\n\n","sourceOld":"  // test sorts in reverse\n  public void testReverseSort() throws Exception {\n    sort.setSort (new SortField (null, SortField.Type.SCORE, true), SortField.FIELD_DOC );\n    assertMatches (full, queryX, sort, \"IEGCA\");\n    assertMatches (full, queryY, sort, \"JFHDB\");\n\n    sort.setSort (new SortField (null, SortField.Type.DOC, true));\n    assertMatches (full, queryX, sort, \"IGECA\");\n    assertMatches (full, queryY, sort, \"JHFDB\");\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT, true) );\n    assertMatches (full, queryX, sort, \"CAEGI\");\n    assertMatches (full, queryY, sort, \"BJFHD\");\n\n    sort.setSort (new SortField (\"float\", SortField.Type.FLOAT, true) );\n    assertMatches (full, queryX, sort, \"AECIG\");\n    assertMatches (full, queryY, sort, \"BFJHD\");\n    \n    sort.setSort (new SortField (\"string\", SortField.Type.STRING, true) );\n    assertMatches (full, queryX, sort, \"CEGIA\");\n    assertMatches (full, queryY, sort, \"BFHJD\");\n    \n    sort.setSort (useDocValues(new SortField (\"int\", SortField.Type.INT, true)) );\n    assertMatches (full, queryX, sort, \"CAEGI\");\n    assertMatches (full, queryY, sort, \"BJFHD\");\n    \n    sort.setSort (useDocValues(new SortField (\"float\", SortField.Type.FLOAT, true)) );\n    assertMatches (full, queryX, sort, \"AECIG\");\n    assertMatches (full, queryY, sort, \"BFJHD\");\n\n    sort.setSort (useDocValues(new SortField (\"string\", getDVStringSortType(), true)) );\n    assertMatches (full, queryX, sort, \"CEGIA\");\n    assertMatches (full, queryY, sort, \"BFHJD\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testReverseSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testReverseSort().mjava","sourceNew":"  // test sorts in reverse\n  public void testReverseSort() throws Exception {\n    sort.setSort(new SortField(null, SortField.Type.SCORE, true), SortField.FIELD_DOC);\n    assertMatches(full, queryX, sort, \"IEGCA\");\n    assertMatches(full, queryY, sort, \"JFHDB\");\n\n    sort.setSort(new SortField(null, SortField.Type.DOC, true));\n    assertMatches(full, queryX, sort, \"IGECA\");\n    assertMatches(full, queryY, sort, \"JHFDB\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT, true));\n    assertMatches(full, queryX, sort, \"CAEGI\");\n    assertMatches(full, queryY, sort, \"BJFHD\");\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT, true));\n    assertMatches(full, queryX, sort, \"AECIG\");\n    assertMatches(full, queryY, sort, \"BFJHD\");\n    \n    sort.setSort(new SortField(\"string\", SortField.Type.STRING, true));\n    assertMatches(full, queryX, sort, \"CEGIA\");\n    assertMatches(full, queryY, sort, \"BFHJD\");\n    \n    sort.setSort(new SortField(\"int_dv\", SortField.Type.INT, true));\n    assertMatches(full, queryX, sort, \"CAEGI\");\n    assertMatches(full, queryY, sort, \"BJFHD\");\n    \n    sort.setSort(new SortField(\"float_dv\", SortField.Type.FLOAT, true));\n    assertMatches(full, queryX, sort, \"AECIG\");\n    assertMatches(full, queryY, sort, \"BFJHD\");\n\n    sort.setSort(new SortField(\"string_dv\", getDVStringSortType(), true));\n    assertMatches(full, queryX, sort, \"CEGIA\");\n    assertMatches(full, queryY, sort, \"BFHJD\");\n  }\n\n","sourceOld":"  // test sorts in reverse\n  public void testReverseSort() throws Exception {\n    sort.setSort (new SortField (null, SortField.Type.SCORE, true), SortField.FIELD_DOC );\n    assertMatches (full, queryX, sort, \"IEGCA\");\n    assertMatches (full, queryY, sort, \"JFHDB\");\n\n    sort.setSort (new SortField (null, SortField.Type.DOC, true));\n    assertMatches (full, queryX, sort, \"IGECA\");\n    assertMatches (full, queryY, sort, \"JHFDB\");\n\n    sort.setSort (new SortField (\"int\", SortField.Type.INT, true) );\n    assertMatches (full, queryX, sort, \"CAEGI\");\n    assertMatches (full, queryY, sort, \"BJFHD\");\n\n    sort.setSort (new SortField (\"float\", SortField.Type.FLOAT, true) );\n    assertMatches (full, queryX, sort, \"AECIG\");\n    assertMatches (full, queryY, sort, \"BFJHD\");\n    \n    sort.setSort (new SortField (\"string\", SortField.Type.STRING, true) );\n    assertMatches (full, queryX, sort, \"CEGIA\");\n    assertMatches (full, queryY, sort, \"BFHJD\");\n    \n    sort.setSort (useDocValues(new SortField (\"int\", SortField.Type.INT, true)) );\n    assertMatches (full, queryX, sort, \"CAEGI\");\n    assertMatches (full, queryY, sort, \"BJFHD\");\n    \n    sort.setSort (useDocValues(new SortField (\"float\", SortField.Type.FLOAT, true)) );\n    assertMatches (full, queryX, sort, \"AECIG\");\n    assertMatches (full, queryY, sort, \"BFJHD\");\n\n    sort.setSort (useDocValues(new SortField (\"string\", getDVStringSortType(), true)) );\n    assertMatches (full, queryX, sort, \"CEGIA\");\n    assertMatches (full, queryY, sort, \"BFHJD\");\n  }\n\n","bugFix":["090a0320e4de4a3674376aef96b9701f47564f86","63bc3238545c6012bd44f5d294077997f236bc4e","57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4a811009dda62552371fb4b6c76035677d3e3ee","date":1360899022,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testReverseSort().mjava","sourceNew":null,"sourceOld":"  // test sorts in reverse\n  public void testReverseSort() throws Exception {\n    sort.setSort(new SortField(null, SortField.Type.SCORE, true), SortField.FIELD_DOC);\n    assertMatches(full, queryX, sort, \"IEGCA\");\n    assertMatches(full, queryY, sort, \"JFHDB\");\n\n    sort.setSort(new SortField(null, SortField.Type.DOC, true));\n    assertMatches(full, queryX, sort, \"IGECA\");\n    assertMatches(full, queryY, sort, \"JHFDB\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT, true));\n    assertMatches(full, queryX, sort, \"CAEGI\");\n    assertMatches(full, queryY, sort, \"BJFHD\");\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT, true));\n    assertMatches(full, queryX, sort, \"AECIG\");\n    assertMatches(full, queryY, sort, \"BFJHD\");\n    \n    sort.setSort(new SortField(\"string\", SortField.Type.STRING, true));\n    assertMatches(full, queryX, sort, \"CEGIA\");\n    assertMatches(full, queryY, sort, \"BFHJD\");\n    \n    sort.setSort(new SortField(\"int_dv\", SortField.Type.INT, true));\n    assertMatches(full, queryX, sort, \"CAEGI\");\n    assertMatches(full, queryY, sort, \"BJFHD\");\n    \n    sort.setSort(new SortField(\"float_dv\", SortField.Type.FLOAT, true));\n    assertMatches(full, queryX, sort, \"AECIG\");\n    assertMatches(full, queryY, sort, \"BFJHD\");\n\n    sort.setSort(new SortField(\"string_dv\", getDVStringSortType(), true));\n    assertMatches(full, queryX, sort, \"CEGIA\");\n    assertMatches(full, queryY, sort, \"BFHJD\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b41f996b22bd5518650f897d050088ff808ec03","date":1360969107,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testReverseSort().mjava","sourceNew":null,"sourceOld":"  // test sorts in reverse\n  public void testReverseSort() throws Exception {\n    sort.setSort(new SortField(null, SortField.Type.SCORE, true), SortField.FIELD_DOC);\n    assertMatches(full, queryX, sort, \"IEGCA\");\n    assertMatches(full, queryY, sort, \"JFHDB\");\n\n    sort.setSort(new SortField(null, SortField.Type.DOC, true));\n    assertMatches(full, queryX, sort, \"IGECA\");\n    assertMatches(full, queryY, sort, \"JHFDB\");\n\n    sort.setSort(new SortField(\"int\", SortField.Type.INT, true));\n    assertMatches(full, queryX, sort, \"CAEGI\");\n    assertMatches(full, queryY, sort, \"BJFHD\");\n\n    sort.setSort(new SortField(\"float\", SortField.Type.FLOAT, true));\n    assertMatches(full, queryX, sort, \"AECIG\");\n    assertMatches(full, queryY, sort, \"BFJHD\");\n    \n    sort.setSort(new SortField(\"string\", SortField.Type.STRING, true));\n    assertMatches(full, queryX, sort, \"CEGIA\");\n    assertMatches(full, queryY, sort, \"BFHJD\");\n    \n    sort.setSort(new SortField(\"int_dv\", SortField.Type.INT, true));\n    assertMatches(full, queryX, sort, \"CAEGI\");\n    assertMatches(full, queryY, sort, \"BJFHD\");\n    \n    sort.setSort(new SortField(\"float_dv\", SortField.Type.FLOAT, true));\n    assertMatches(full, queryX, sort, \"AECIG\");\n    assertMatches(full, queryY, sort, \"BFJHD\");\n\n    sort.setSort(new SortField(\"string_dv\", getDVStringSortType(), true));\n    assertMatches(full, queryX, sort, \"CEGIA\");\n    assertMatches(full, queryY, sort, \"BFHJD\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b4a811009dda62552371fb4b6c76035677d3e3ee":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8","3e29774db46ad98ca4a8d7fcbfab633ebc01f358"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3b41f996b22bd5518650f897d050088ff808ec03":["d4d69c535930b5cce125cff868d40f6373dc27d4","b4a811009dda62552371fb4b6c76035677d3e3ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3e29774db46ad98ca4a8d7fcbfab633ebc01f358":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4a811009dda62552371fb4b6c76035677d3e3ee"]},"commit2Childs":{"b4a811009dda62552371fb4b6c76035677d3e3ee":["3b41f996b22bd5518650f897d050088ff808ec03","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["d4d69c535930b5cce125cff868d40f6373dc27d4","3e29774db46ad98ca4a8d7fcbfab633ebc01f358"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["b4a811009dda62552371fb4b6c76035677d3e3ee","3b41f996b22bd5518650f897d050088ff808ec03"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"3b41f996b22bd5518650f897d050088ff808ec03":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3e29774db46ad98ca4a8d7fcbfab633ebc01f358":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3b41f996b22bd5518650f897d050088ff808ec03","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}