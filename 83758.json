{"path":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#amISubShardLeader(DocCollection,Slice,String,SolrInputDocument).mjava","commits":[{"id":"96adbab674ae121f8b6b3e10474070b4bd97a219","date":1373614333,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#amISubShardLeader(DocCollection,Slice,String,SolrInputDocument).mjava","pathOld":"/dev/null","sourceNew":"  private boolean amISubShardLeader(DocCollection coll, Slice parentSlice, String id, SolrInputDocument doc) throws InterruptedException {\n    // Am I the leader of a shard in \"construction\" state?\n    String myShardId = req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId();\n    Slice mySlice = coll.getSlice(myShardId);\n    if (Slice.CONSTRUCTION.equals(mySlice.getState())) {\n      Replica myLeader = zkController.getZkStateReader().getLeaderRetry(collection, myShardId);\n      boolean amILeader = myLeader.getName().equals(\n          req.getCore().getCoreDescriptor().getCloudDescriptor()\n              .getCoreNodeName());\n      if (amILeader) {\n        // Does the document belong to my hash range as well?\n        DocRouter.Range myRange = mySlice.getRange();\n        if (myRange == null) myRange = new DocRouter.Range(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        if (parentSlice != null)  {\n          boolean isSubset = parentSlice.getRange() != null && myRange.isSubsetOf(parentSlice.getRange());\n          return isSubset && coll.getRouter().isTargetSlice(id, doc, req.getParams(), myShardId, coll);\n        } else  {\n          // delete by query case -- as long as I am a sub shard leader we're fine\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7b4c4001c33d7e459f31c8810ea8fd129c7b6ea7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#amISubShardLeader(DocCollection,Slice,String,SolrInputDocument).mjava","pathOld":"/dev/null","sourceNew":"  private boolean amISubShardLeader(DocCollection coll, Slice parentSlice, String id, SolrInputDocument doc) throws InterruptedException {\n    // Am I the leader of a shard in \"construction\" state?\n    String myShardId = req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId();\n    Slice mySlice = coll.getSlice(myShardId);\n    if (Slice.CONSTRUCTION.equals(mySlice.getState())) {\n      Replica myLeader = zkController.getZkStateReader().getLeaderRetry(collection, myShardId);\n      boolean amILeader = myLeader.getName().equals(\n          req.getCore().getCoreDescriptor().getCloudDescriptor()\n              .getCoreNodeName());\n      if (amILeader) {\n        // Does the document belong to my hash range as well?\n        DocRouter.Range myRange = mySlice.getRange();\n        if (myRange == null) myRange = new DocRouter.Range(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        if (parentSlice != null)  {\n          boolean isSubset = parentSlice.getRange() != null && myRange.isSubsetOf(parentSlice.getRange());\n          return isSubset && coll.getRouter().isTargetSlice(id, doc, req.getParams(), myShardId, coll);\n        } else  {\n          // delete by query case -- as long as I am a sub shard leader we're fine\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc841231667f1f315bae6799c068f9aad6543967","date":1381415189,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#amISubShardLeader(DocCollection,Slice,String,SolrInputDocument).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#amISubShardLeader(DocCollection,Slice,String,SolrInputDocument).mjava","sourceNew":"  private boolean amISubShardLeader(DocCollection coll, Slice parentSlice, String id, SolrInputDocument doc) throws InterruptedException {\n    // Am I the leader of a shard in \"construction\" state?\n    String myShardId = req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId();\n    Slice mySlice = coll.getSlice(myShardId);\n    if (Slice.CONSTRUCTION.equals(mySlice.getState()) || Slice.RECOVERY.equals(mySlice.getState())) {\n      Replica myLeader = zkController.getZkStateReader().getLeaderRetry(collection, myShardId);\n      boolean amILeader = myLeader.getName().equals(\n          req.getCore().getCoreDescriptor().getCloudDescriptor()\n              .getCoreNodeName());\n      if (amILeader) {\n        // Does the document belong to my hash range as well?\n        DocRouter.Range myRange = mySlice.getRange();\n        if (myRange == null) myRange = new DocRouter.Range(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        if (parentSlice != null)  {\n          boolean isSubset = parentSlice.getRange() != null && myRange.isSubsetOf(parentSlice.getRange());\n          return isSubset && coll.getRouter().isTargetSlice(id, doc, req.getParams(), myShardId, coll);\n        } else  {\n          // delete by query case -- as long as I am a sub shard leader we're fine\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  private boolean amISubShardLeader(DocCollection coll, Slice parentSlice, String id, SolrInputDocument doc) throws InterruptedException {\n    // Am I the leader of a shard in \"construction\" state?\n    String myShardId = req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId();\n    Slice mySlice = coll.getSlice(myShardId);\n    if (Slice.CONSTRUCTION.equals(mySlice.getState())) {\n      Replica myLeader = zkController.getZkStateReader().getLeaderRetry(collection, myShardId);\n      boolean amILeader = myLeader.getName().equals(\n          req.getCore().getCoreDescriptor().getCloudDescriptor()\n              .getCoreNodeName());\n      if (amILeader) {\n        // Does the document belong to my hash range as well?\n        DocRouter.Range myRange = mySlice.getRange();\n        if (myRange == null) myRange = new DocRouter.Range(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        if (parentSlice != null)  {\n          boolean isSubset = parentSlice.getRange() != null && myRange.isSubsetOf(parentSlice.getRange());\n          return isSubset && coll.getRouter().isTargetSlice(id, doc, req.getParams(), myShardId, coll);\n        } else  {\n          // delete by query case -- as long as I am a sub shard leader we're fine\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":["7b4c4001c33d7e459f31c8810ea8fd129c7b6ea7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b4c4001c33d7e459f31c8810ea8fd129c7b6ea7","date":1391654280,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#amISubShardLeader(DocCollection,Slice,String,SolrInputDocument).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#amISubShardLeader(DocCollection,Slice,String,SolrInputDocument).mjava","sourceNew":"  private boolean amISubShardLeader(DocCollection coll, Slice parentSlice, String id, SolrInputDocument doc) throws InterruptedException {\n    // Am I the leader of a shard in \"construction/recovery\" state?\n    String myShardId = req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId();\n    Slice mySlice = coll.getSlice(myShardId);\n    String state = mySlice.getState();\n    if (Slice.CONSTRUCTION.equals(state) || Slice.RECOVERY.equals(state)) {\n      Replica myLeader = zkController.getZkStateReader().getLeaderRetry(collection, myShardId);\n      boolean amILeader = myLeader.getName().equals(\n          req.getCore().getCoreDescriptor().getCloudDescriptor()\n              .getCoreNodeName());\n      if (amILeader) {\n        // Does the document belong to my hash range as well?\n        DocRouter.Range myRange = mySlice.getRange();\n        if (myRange == null) myRange = new DocRouter.Range(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        if (parentSlice != null)  {\n          boolean isSubset = parentSlice.getRange() != null && myRange.isSubsetOf(parentSlice.getRange());\n          return isSubset && coll.getRouter().isTargetSlice(id, doc, req.getParams(), myShardId, coll);\n        } else  {\n          // delete by query case -- as long as I am a sub shard leader we're fine\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  private boolean amISubShardLeader(DocCollection coll, Slice parentSlice, String id, SolrInputDocument doc) throws InterruptedException {\n    // Am I the leader of a shard in \"construction\" state?\n    String myShardId = req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId();\n    Slice mySlice = coll.getSlice(myShardId);\n    if (Slice.CONSTRUCTION.equals(mySlice.getState()) || Slice.RECOVERY.equals(mySlice.getState())) {\n      Replica myLeader = zkController.getZkStateReader().getLeaderRetry(collection, myShardId);\n      boolean amILeader = myLeader.getName().equals(\n          req.getCore().getCoreDescriptor().getCloudDescriptor()\n              .getCoreNodeName());\n      if (amILeader) {\n        // Does the document belong to my hash range as well?\n        DocRouter.Range myRange = mySlice.getRange();\n        if (myRange == null) myRange = new DocRouter.Range(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        if (parentSlice != null)  {\n          boolean isSubset = parentSlice.getRange() != null && myRange.isSubsetOf(parentSlice.getRange());\n          return isSubset && coll.getRouter().isTargetSlice(id, doc, req.getParams(), myShardId, coll);\n        } else  {\n          // delete by query case -- as long as I am a sub shard leader we're fine\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n","bugFix":["96adbab674ae121f8b6b3e10474070b4bd97a219","bc841231667f1f315bae6799c068f9aad6543967"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296","date":1427866967,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#amISubShardLeader(DocCollection,Slice,String,SolrInputDocument).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#amISubShardLeader(DocCollection,Slice,String,SolrInputDocument).mjava","sourceNew":"  private boolean amISubShardLeader(DocCollection coll, Slice parentSlice, String id, SolrInputDocument doc) throws InterruptedException {\n    // Am I the leader of a shard in \"construction/recovery\" state?\n    String myShardId = req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId();\n    Slice mySlice = coll.getSlice(myShardId);\n    final State state = mySlice.getState();\n    if (state == Slice.State.CONSTRUCTION || state == Slice.State.RECOVERY) {\n      Replica myLeader = zkController.getZkStateReader().getLeaderRetry(collection, myShardId);\n      boolean amILeader = myLeader.getName().equals(\n          req.getCore().getCoreDescriptor().getCloudDescriptor()\n              .getCoreNodeName());\n      if (amILeader) {\n        // Does the document belong to my hash range as well?\n        DocRouter.Range myRange = mySlice.getRange();\n        if (myRange == null) myRange = new DocRouter.Range(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        if (parentSlice != null)  {\n          boolean isSubset = parentSlice.getRange() != null && myRange.isSubsetOf(parentSlice.getRange());\n          return isSubset && coll.getRouter().isTargetSlice(id, doc, req.getParams(), myShardId, coll);\n        } else  {\n          // delete by query case -- as long as I am a sub shard leader we're fine\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  private boolean amISubShardLeader(DocCollection coll, Slice parentSlice, String id, SolrInputDocument doc) throws InterruptedException {\n    // Am I the leader of a shard in \"construction/recovery\" state?\n    String myShardId = req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId();\n    Slice mySlice = coll.getSlice(myShardId);\n    String state = mySlice.getState();\n    if (Slice.CONSTRUCTION.equals(state) || Slice.RECOVERY.equals(state)) {\n      Replica myLeader = zkController.getZkStateReader().getLeaderRetry(collection, myShardId);\n      boolean amILeader = myLeader.getName().equals(\n          req.getCore().getCoreDescriptor().getCloudDescriptor()\n              .getCoreNodeName());\n      if (amILeader) {\n        // Does the document belong to my hash range as well?\n        DocRouter.Range myRange = mySlice.getRange();\n        if (myRange == null) myRange = new DocRouter.Range(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        if (parentSlice != null)  {\n          boolean isSubset = parentSlice.getRange() != null && myRange.isSubsetOf(parentSlice.getRange());\n          return isSubset && coll.getRouter().isTargetSlice(id, doc, req.getParams(), myShardId, coll);\n        } else  {\n          // delete by query case -- as long as I am a sub shard leader we're fine\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c924d4069ef5a5bc479a493befe0121aada6896","date":1427901860,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#amISubShardLeader(DocCollection,Slice,String,SolrInputDocument).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#amISubShardLeader(DocCollection,Slice,String,SolrInputDocument).mjava","sourceNew":"  private boolean amISubShardLeader(DocCollection coll, Slice parentSlice, String id, SolrInputDocument doc) throws InterruptedException {\n    // Am I the leader of a shard in \"construction/recovery\" state?\n    String myShardId = req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId();\n    Slice mySlice = coll.getSlice(myShardId);\n    final State state = mySlice.getState();\n    if (state == Slice.State.CONSTRUCTION || state == Slice.State.RECOVERY) {\n      Replica myLeader = zkController.getZkStateReader().getLeaderRetry(collection, myShardId);\n      boolean amILeader = myLeader.getName().equals(\n          req.getCore().getCoreDescriptor().getCloudDescriptor()\n              .getCoreNodeName());\n      if (amILeader) {\n        // Does the document belong to my hash range as well?\n        DocRouter.Range myRange = mySlice.getRange();\n        if (myRange == null) myRange = new DocRouter.Range(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        if (parentSlice != null)  {\n          boolean isSubset = parentSlice.getRange() != null && myRange.isSubsetOf(parentSlice.getRange());\n          return isSubset && coll.getRouter().isTargetSlice(id, doc, req.getParams(), myShardId, coll);\n        } else  {\n          // delete by query case -- as long as I am a sub shard leader we're fine\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  private boolean amISubShardLeader(DocCollection coll, Slice parentSlice, String id, SolrInputDocument doc) throws InterruptedException {\n    // Am I the leader of a shard in \"construction/recovery\" state?\n    String myShardId = req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId();\n    Slice mySlice = coll.getSlice(myShardId);\n    String state = mySlice.getState();\n    if (Slice.CONSTRUCTION.equals(state) || Slice.RECOVERY.equals(state)) {\n      Replica myLeader = zkController.getZkStateReader().getLeaderRetry(collection, myShardId);\n      boolean amILeader = myLeader.getName().equals(\n          req.getCore().getCoreDescriptor().getCloudDescriptor()\n              .getCoreNodeName());\n      if (amILeader) {\n        // Does the document belong to my hash range as well?\n        DocRouter.Range myRange = mySlice.getRange();\n        if (myRange == null) myRange = new DocRouter.Range(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        if (parentSlice != null)  {\n          boolean isSubset = parentSlice.getRange() != null && myRange.isSubsetOf(parentSlice.getRange());\n          return isSubset && coll.getRouter().isTargetSlice(id, doc, req.getParams(), myShardId, coll);\n        } else  {\n          // delete by query case -- as long as I am a sub shard leader we're fine\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"601f914e4448cab7640fecfb5d15f8f2e2af0bf6","date":1508947828,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#amISubShardLeader(DocCollection,Slice,String,SolrInputDocument).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#amISubShardLeader(DocCollection,Slice,String,SolrInputDocument).mjava","sourceNew":"  private boolean amISubShardLeader(DocCollection coll, Slice parentSlice, String id, SolrInputDocument doc) throws InterruptedException {\n    // Am I the leader of a shard in \"construction/recovery\" state?\n    String myShardId = cloudDesc.getShardId();\n    Slice mySlice = coll.getSlice(myShardId);\n    final State state = mySlice.getState();\n    if (state == Slice.State.CONSTRUCTION || state == Slice.State.RECOVERY) {\n      Replica myLeader = zkController.getZkStateReader().getLeaderRetry(collection, myShardId);\n      boolean amILeader = myLeader.getName().equals(cloudDesc.getCoreNodeName());\n      if (amILeader) {\n        // Does the document belong to my hash range as well?\n        DocRouter.Range myRange = mySlice.getRange();\n        if (myRange == null) myRange = new DocRouter.Range(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        if (parentSlice != null)  {\n          boolean isSubset = parentSlice.getRange() != null && myRange.isSubsetOf(parentSlice.getRange());\n          return isSubset && coll.getRouter().isTargetSlice(id, doc, req.getParams(), myShardId, coll);\n        } else  {\n          // delete by query case -- as long as I am a sub shard leader we're fine\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  private boolean amISubShardLeader(DocCollection coll, Slice parentSlice, String id, SolrInputDocument doc) throws InterruptedException {\n    // Am I the leader of a shard in \"construction/recovery\" state?\n    String myShardId = req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId();\n    Slice mySlice = coll.getSlice(myShardId);\n    final State state = mySlice.getState();\n    if (state == Slice.State.CONSTRUCTION || state == Slice.State.RECOVERY) {\n      Replica myLeader = zkController.getZkStateReader().getLeaderRetry(collection, myShardId);\n      boolean amILeader = myLeader.getName().equals(\n          req.getCore().getCoreDescriptor().getCloudDescriptor()\n              .getCoreNodeName());\n      if (amILeader) {\n        // Does the document belong to my hash range as well?\n        DocRouter.Range myRange = mySlice.getRange();\n        if (myRange == null) myRange = new DocRouter.Range(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        if (parentSlice != null)  {\n          boolean isSubset = parentSlice.getRange() != null && myRange.isSubsetOf(parentSlice.getRange());\n          return isSubset && coll.getRouter().isTargetSlice(id, doc, req.getParams(), myShardId, coll);\n        } else  {\n          // delete by query case -- as long as I am a sub shard leader we're fine\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad55ff45b3a5483090d87a63019d0e6a8d4b5a65","date":1509551229,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#amISubShardLeader(DocCollection,Slice,String,SolrInputDocument).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#amISubShardLeader(DocCollection,Slice,String,SolrInputDocument).mjava","sourceNew":"  /** For {@link CollectionParams.CollectionAction#SPLITSHARD} */\n  private boolean amISubShardLeader(DocCollection coll, Slice parentSlice, String id, SolrInputDocument doc) throws InterruptedException {\n    // Am I the leader of a shard in \"construction/recovery\" state?\n    String myShardId = cloudDesc.getShardId();\n    Slice mySlice = coll.getSlice(myShardId);\n    final State state = mySlice.getState();\n    if (state == Slice.State.CONSTRUCTION || state == Slice.State.RECOVERY) {\n      Replica myLeader = zkController.getZkStateReader().getLeaderRetry(collection, myShardId);\n      boolean amILeader = myLeader.getName().equals(cloudDesc.getCoreNodeName());\n      if (amILeader) {\n        // Does the document belong to my hash range as well?\n        DocRouter.Range myRange = mySlice.getRange();\n        if (myRange == null) myRange = new DocRouter.Range(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        if (parentSlice != null)  {\n          boolean isSubset = parentSlice.getRange() != null && myRange.isSubsetOf(parentSlice.getRange());\n          return isSubset && coll.getRouter().isTargetSlice(id, doc, req.getParams(), myShardId, coll);\n        } else  {\n          // delete by query case -- as long as I am a sub shard leader we're fine\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  private boolean amISubShardLeader(DocCollection coll, Slice parentSlice, String id, SolrInputDocument doc) throws InterruptedException {\n    // Am I the leader of a shard in \"construction/recovery\" state?\n    String myShardId = cloudDesc.getShardId();\n    Slice mySlice = coll.getSlice(myShardId);\n    final State state = mySlice.getState();\n    if (state == Slice.State.CONSTRUCTION || state == Slice.State.RECOVERY) {\n      Replica myLeader = zkController.getZkStateReader().getLeaderRetry(collection, myShardId);\n      boolean amILeader = myLeader.getName().equals(cloudDesc.getCoreNodeName());\n      if (amILeader) {\n        // Does the document belong to my hash range as well?\n        DocRouter.Range myRange = mySlice.getRange();\n        if (myRange == null) myRange = new DocRouter.Range(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        if (parentSlice != null)  {\n          boolean isSubset = parentSlice.getRange() != null && myRange.isSubsetOf(parentSlice.getRange());\n          return isSubset && coll.getRouter().isTargetSlice(id, doc, req.getParams(), myShardId, coll);\n        } else  {\n          // delete by query case -- as long as I am a sub shard leader we're fine\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3f27bd66feacd34399839572de1b2e927d4f367","date":1509582546,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#amISubShardLeader(DocCollection,Slice,String,SolrInputDocument).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#amISubShardLeader(DocCollection,Slice,String,SolrInputDocument).mjava","sourceNew":"  /** For {@link org.apache.solr.common.params.CollectionParams.CollectionAction#SPLITSHARD} */\n  private boolean amISubShardLeader(DocCollection coll, Slice parentSlice, String id, SolrInputDocument doc) throws InterruptedException {\n    // Am I the leader of a shard in \"construction/recovery\" state?\n    String myShardId = cloudDesc.getShardId();\n    Slice mySlice = coll.getSlice(myShardId);\n    final State state = mySlice.getState();\n    if (state == Slice.State.CONSTRUCTION || state == Slice.State.RECOVERY) {\n      Replica myLeader = zkController.getZkStateReader().getLeaderRetry(collection, myShardId);\n      boolean amILeader = myLeader.getName().equals(cloudDesc.getCoreNodeName());\n      if (amILeader) {\n        // Does the document belong to my hash range as well?\n        DocRouter.Range myRange = mySlice.getRange();\n        if (myRange == null) myRange = new DocRouter.Range(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        if (parentSlice != null)  {\n          boolean isSubset = parentSlice.getRange() != null && myRange.isSubsetOf(parentSlice.getRange());\n          return isSubset && coll.getRouter().isTargetSlice(id, doc, req.getParams(), myShardId, coll);\n        } else  {\n          // delete by query case -- as long as I am a sub shard leader we're fine\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /** For {@link CollectionParams.CollectionAction#SPLITSHARD} */\n  private boolean amISubShardLeader(DocCollection coll, Slice parentSlice, String id, SolrInputDocument doc) throws InterruptedException {\n    // Am I the leader of a shard in \"construction/recovery\" state?\n    String myShardId = cloudDesc.getShardId();\n    Slice mySlice = coll.getSlice(myShardId);\n    final State state = mySlice.getState();\n    if (state == Slice.State.CONSTRUCTION || state == Slice.State.RECOVERY) {\n      Replica myLeader = zkController.getZkStateReader().getLeaderRetry(collection, myShardId);\n      boolean amILeader = myLeader.getName().equals(cloudDesc.getCoreNodeName());\n      if (amILeader) {\n        // Does the document belong to my hash range as well?\n        DocRouter.Range myRange = mySlice.getRange();\n        if (myRange == null) myRange = new DocRouter.Range(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        if (parentSlice != null)  {\n          boolean isSubset = parentSlice.getRange() != null && myRange.isSubsetOf(parentSlice.getRange());\n          return isSubset && coll.getRouter().isTargetSlice(id, doc, req.getParams(), myShardId, coll);\n        } else  {\n          // delete by query case -- as long as I am a sub shard leader we're fine\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d70e774cb25c8a8d2c3e5e84200f235f9168d87","date":1553016391,"type":5,"author":"Bar Rotstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#amISubShardLeader(DocCollection,Slice,String,SolrInputDocument).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#amISubShardLeader(DocCollection,Slice,String,SolrInputDocument).mjava","sourceNew":"  /** For {@link org.apache.solr.common.params.CollectionParams.CollectionAction#SPLITSHARD} */\n  protected boolean amISubShardLeader(DocCollection coll, Slice parentSlice, String id, SolrInputDocument doc) throws InterruptedException {\n    // Am I the leader of a shard in \"construction/recovery\" state?\n    String myShardId = cloudDesc.getShardId();\n    Slice mySlice = coll.getSlice(myShardId);\n    final Slice.State state = mySlice.getState();\n    if (state == Slice.State.CONSTRUCTION || state == Slice.State.RECOVERY) {\n      Replica myLeader = zkController.getZkStateReader().getLeaderRetry(collection, myShardId);\n      boolean amILeader = myLeader.getName().equals(cloudDesc.getCoreNodeName());\n      if (amILeader) {\n        // Does the document belong to my hash range as well?\n        DocRouter.Range myRange = mySlice.getRange();\n        if (myRange == null) myRange = new DocRouter.Range(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        if (parentSlice != null)  {\n          boolean isSubset = parentSlice.getRange() != null && myRange.isSubsetOf(parentSlice.getRange());\n          return isSubset && coll.getRouter().isTargetSlice(id, doc, req.getParams(), myShardId, coll);\n        } else  {\n          // delete by query case -- as long as I am a sub shard leader we're fine\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /** For {@link org.apache.solr.common.params.CollectionParams.CollectionAction#SPLITSHARD} */\n  private boolean amISubShardLeader(DocCollection coll, Slice parentSlice, String id, SolrInputDocument doc) throws InterruptedException {\n    // Am I the leader of a shard in \"construction/recovery\" state?\n    String myShardId = cloudDesc.getShardId();\n    Slice mySlice = coll.getSlice(myShardId);\n    final State state = mySlice.getState();\n    if (state == Slice.State.CONSTRUCTION || state == Slice.State.RECOVERY) {\n      Replica myLeader = zkController.getZkStateReader().getLeaderRetry(collection, myShardId);\n      boolean amILeader = myLeader.getName().equals(cloudDesc.getCoreNodeName());\n      if (amILeader) {\n        // Does the document belong to my hash range as well?\n        DocRouter.Range myRange = mySlice.getRange();\n        if (myRange == null) myRange = new DocRouter.Range(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        if (parentSlice != null)  {\n          boolean isSubset = parentSlice.getRange() != null && myRange.isSubsetOf(parentSlice.getRange());\n          return isSubset && coll.getRouter().isTargetSlice(id, doc, req.getParams(), myShardId, coll);\n        } else  {\n          // delete by query case -- as long as I am a sub shard leader we're fine\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"601f914e4448cab7640fecfb5d15f8f2e2af0bf6":["d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","96adbab674ae121f8b6b3e10474070b4bd97a219"],"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296":["7b4c4001c33d7e459f31c8810ea8fd129c7b6ea7"],"7b4c4001c33d7e459f31c8810ea8fd129c7b6ea7":["bc841231667f1f315bae6799c068f9aad6543967"],"ad55ff45b3a5483090d87a63019d0e6a8d4b5a65":["601f914e4448cab7640fecfb5d15f8f2e2af0bf6"],"bc841231667f1f315bae6799c068f9aad6543967":["96adbab674ae121f8b6b3e10474070b4bd97a219"],"96adbab674ae121f8b6b3e10474070b4bd97a219":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c3f27bd66feacd34399839572de1b2e927d4f367":["ad55ff45b3a5483090d87a63019d0e6a8d4b5a65"],"9d70e774cb25c8a8d2c3e5e84200f235f9168d87":["c3f27bd66feacd34399839572de1b2e927d4f367"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9d70e774cb25c8a8d2c3e5e84200f235f9168d87"],"0c924d4069ef5a5bc479a493befe0121aada6896":["7b4c4001c33d7e459f31c8810ea8fd129c7b6ea7","d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296"]},"commit2Childs":{"601f914e4448cab7640fecfb5d15f8f2e2af0bf6":["ad55ff45b3a5483090d87a63019d0e6a8d4b5a65"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296":["601f914e4448cab7640fecfb5d15f8f2e2af0bf6","0c924d4069ef5a5bc479a493befe0121aada6896"],"7b4c4001c33d7e459f31c8810ea8fd129c7b6ea7":["d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296","0c924d4069ef5a5bc479a493befe0121aada6896"],"96adbab674ae121f8b6b3e10474070b4bd97a219":["37a0f60745e53927c4c876cfe5b5a58170f0646c","bc841231667f1f315bae6799c068f9aad6543967"],"bc841231667f1f315bae6799c068f9aad6543967":["7b4c4001c33d7e459f31c8810ea8fd129c7b6ea7"],"ad55ff45b3a5483090d87a63019d0e6a8d4b5a65":["c3f27bd66feacd34399839572de1b2e927d4f367"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","96adbab674ae121f8b6b3e10474070b4bd97a219"],"c3f27bd66feacd34399839572de1b2e927d4f367":["9d70e774cb25c8a8d2c3e5e84200f235f9168d87"],"9d70e774cb25c8a8d2c3e5e84200f235f9168d87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0c924d4069ef5a5bc479a493befe0121aada6896":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817","0c924d4069ef5a5bc479a493befe0121aada6896"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}