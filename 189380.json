{"path":"src/test/org/apache/solr/BasicFunctionalityTest#doFacetPrefix(String,String...).mjava","commits":[{"id":"090a3d6e41dac3d2e4ba2efd822d75846a41eca8","date":1179509667,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/BasicFunctionalityTest#doFacetPrefix(String,String...).mjava","pathOld":"src/test/org/apache/solr/BasicFunctionalityTest#doFacetPrefix(String).mjava","sourceNew":"  public void doFacetPrefix(String f, String... params) {\n    String indent=\"on\";\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String notc = \"id:[* TO *] -\"+f+\":C\";\n\n    assertU(adoc(\"id\", \"1\",  f, \"AAA\"));\n    assertU(adoc(\"id\", \"2\",  f, \"B\"));\n    assertU(adoc(\"id\", \"3\",  f, \"BB\"));\n    assertU(adoc(\"id\", \"4\",  f, \"BB\"));\n    assertU(adoc(\"id\", \"5\",  f, \"BBB\"));\n    assertU(adoc(\"id\", \"6\",  f, \"BBB\"));\n    assertU(adoc(\"id\", \"7\",  f, \"BBB\"));\n    assertU(adoc(\"id\", \"8\",  f, \"CC\"));\n    assertU(adoc(\"id\", \"9\",  f, \"CC\"));\n    assertU(adoc(\"id\", \"10\", f, \"CCC\"));\n    assertU(adoc(\"id\", \"11\", f, \"CCC\"));\n    assertU(adoc(\"id\", \"12\", f, \"CCC\"));\n    assertU(commit());\n\n    assertQ(\"test facet.prefix middle, exact match first term\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='BBB'][.='3']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"false\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n     assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"false\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n            ,pre+\"/int[2][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"C\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"CC\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"-1\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix at start, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"AAA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );    \n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"2\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n  }\n\n","sourceOld":"  public void doFacetPrefix(String f) {\n    String indent=\"on\";\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String notc = \"id:[* TO *] -\"+f+\":C\";\n\n    assertU(adoc(\"id\", \"1\",  f, \"AAA\"));\n    assertU(adoc(\"id\", \"2\",  f, \"B\"));\n    assertU(adoc(\"id\", \"3\",  f, \"BB\"));\n    assertU(adoc(\"id\", \"4\",  f, \"BB\"));\n    assertU(adoc(\"id\", \"5\",  f, \"BBB\"));\n    assertU(adoc(\"id\", \"6\",  f, \"BBB\"));\n    assertU(adoc(\"id\", \"7\",  f, \"BBB\"));\n    assertU(adoc(\"id\", \"8\",  f, \"CC\"));\n    assertU(adoc(\"id\", \"9\",  f, \"CC\"));\n    assertU(adoc(\"id\", \"10\", f, \"CCC\"));\n    assertU(adoc(\"id\", \"11\", f, \"CCC\"));\n    assertU(adoc(\"id\", \"12\", f, \"CCC\"));\n    assertU(commit());\n\n    assertQ(\"test facet.prefix middle, exact match first term\",\n            req(\"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='BBB'][.='3']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(\"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"false\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n     assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(\"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"false\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(\"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n            ,pre+\"/int[2][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(\"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(\"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, not exact match\",\n            req(\"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"C\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, exact match\",\n            req(\"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"CC\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(\"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(\"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"-1\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix at start, exact match\",\n            req(\"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"AAA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(\"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(\"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );    \n    assertQ(\"test facet.prefix before start\",\n            req(\"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix before start\",\n            req(\"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"2\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17f9c12074f42db9f3cff34b42f9c4a60368a97d","date":1216926137,"type":5,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/solr/request/SimpleFacetsTest#doFacetPrefix(String,String...).mjava","pathOld":"src/test/org/apache/solr/BasicFunctionalityTest#doFacetPrefix(String,String...).mjava","sourceNew":"  public void doFacetPrefix(String f, String... params) {\n    String indent=\"on\";\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String notc = \"id:[* TO *] -\"+f+\":C\";\n\n    assertU(adoc(\"id\", \"1\",  f, \"AAA\"));\n    assertU(adoc(\"id\", \"2\",  f, \"B\"));\n    assertU(adoc(\"id\", \"3\",  f, \"BB\"));\n    assertU(adoc(\"id\", \"4\",  f, \"BB\"));\n    assertU(adoc(\"id\", \"5\",  f, \"BBB\"));\n    assertU(adoc(\"id\", \"6\",  f, \"BBB\"));\n    assertU(adoc(\"id\", \"7\",  f, \"BBB\"));\n    assertU(adoc(\"id\", \"8\",  f, \"CC\"));\n    assertU(adoc(\"id\", \"9\",  f, \"CC\"));\n    assertU(adoc(\"id\", \"10\", f, \"CCC\"));\n    assertU(adoc(\"id\", \"11\", f, \"CCC\"));\n    assertU(adoc(\"id\", \"12\", f, \"CCC\"));\n    assertU(commit());\n\n    assertQ(\"test facet.prefix middle, exact match first term\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='BBB'][.='3']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"false\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n     assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"false\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n            ,pre+\"/int[2][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"C\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"CC\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"-1\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix at start, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"AAA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );    \n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"2\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n  }\n\n","sourceOld":"  public void doFacetPrefix(String f, String... params) {\n    String indent=\"on\";\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String notc = \"id:[* TO *] -\"+f+\":C\";\n\n    assertU(adoc(\"id\", \"1\",  f, \"AAA\"));\n    assertU(adoc(\"id\", \"2\",  f, \"B\"));\n    assertU(adoc(\"id\", \"3\",  f, \"BB\"));\n    assertU(adoc(\"id\", \"4\",  f, \"BB\"));\n    assertU(adoc(\"id\", \"5\",  f, \"BBB\"));\n    assertU(adoc(\"id\", \"6\",  f, \"BBB\"));\n    assertU(adoc(\"id\", \"7\",  f, \"BBB\"));\n    assertU(adoc(\"id\", \"8\",  f, \"CC\"));\n    assertU(adoc(\"id\", \"9\",  f, \"CC\"));\n    assertU(adoc(\"id\", \"10\", f, \"CCC\"));\n    assertU(adoc(\"id\", \"11\", f, \"CCC\"));\n    assertU(adoc(\"id\", \"12\", f, \"CCC\"));\n    assertU(commit());\n\n    assertQ(\"test facet.prefix middle, exact match first term\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='BBB'][.='3']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"false\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n     assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"false\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n            ,pre+\"/int[2][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"C\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"CC\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"-1\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix at start, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"AAA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );    \n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"2\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"true\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"17f9c12074f42db9f3cff34b42f9c4a60368a97d":["090a3d6e41dac3d2e4ba2efd822d75846a41eca8"],"090a3d6e41dac3d2e4ba2efd822d75846a41eca8":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["090a3d6e41dac3d2e4ba2efd822d75846a41eca8"],"17f9c12074f42db9f3cff34b42f9c4a60368a97d":[],"090a3d6e41dac3d2e4ba2efd822d75846a41eca8":["17f9c12074f42db9f3cff34b42f9c4a60368a97d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["17f9c12074f42db9f3cff34b42f9c4a60368a97d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}