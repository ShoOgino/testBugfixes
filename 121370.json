{"path":"solr/core/src/java/org/apache/solr/core/PluginBag#put(String,PluginHolder[T]).mjava","commits":[{"id":"69cad0546debf9ce9d44e309ecfa26760fecd5d8","date":1425846082,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#put(String,PluginHolder[T]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginRegistry#put(String,PluginHolder[T]).mjava","sourceNew":"  PluginHolder<T> put(String name, PluginHolder<T> plugin) {\n    PluginHolder<T> old = registry.put(name, plugin);\n    if (plugin.pluginInfo != null && plugin.pluginInfo.isDefault()) {\n      setDefault(name);\n    }\n    if (plugin.isLoaded()) registerMBean(plugin.get(), core, name);\n    return old;\n  }\n\n","sourceOld":"  PluginHolder<T> put(String name, PluginHolder<T> plugin) {\n    PluginHolder<T> old = registry.put(name, plugin);\n    if (plugin.pluginInfo != null && plugin.pluginInfo.isDefault()) {\n      setDefault(name);\n    }\n    if (plugin.isLoaded()) registerMBean(plugin.get(), core, name);\n    return old;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#put(String,PluginHolder[T]).mjava","pathOld":"/dev/null","sourceNew":"  PluginHolder<T> put(String name, PluginHolder<T> plugin) {\n    PluginHolder<T> old = registry.put(name, plugin);\n    if (plugin.pluginInfo != null && plugin.pluginInfo.isDefault()) {\n      setDefault(name);\n    }\n    if (plugin.isLoaded()) registerMBean(plugin.get(), core, name);\n    return old;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#put(String,PluginHolder[T]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag#put(String,PluginHolder[T]).mjava","sourceNew":"  PluginHolder<T> put(String name, PluginHolder<T> plugin) {\n    Boolean registerApi = null;\n    Boolean disableHandler = null;\n    if (plugin.pluginInfo != null) {\n      String registerAt = plugin.pluginInfo.attributes.get(\"registerPath\");\n      if (registerAt != null) {\n        List<String> strs = StrUtils.splitSmart(registerAt, ',');\n        disableHandler = !strs.contains(\"/\");\n        registerApi = strs.contains(\"/v2\");\n      }\n    }\n\n    if (apiBag != null) {\n      if (plugin.isLoaded()) {\n        T inst = plugin.get();\n        if (inst instanceof ApiSupport) {\n          ApiSupport apiSupport = (ApiSupport) inst;\n          if (registerApi == null) registerApi = apiSupport.registerV2();\n          if (disableHandler == null) disableHandler = !apiSupport.registerV1();\n\n          if(registerApi) {\n            Collection<Api> apis = apiSupport.getApis();\n            if (apis != null) {\n              Map<String, String> nameSubstitutes = singletonMap(HANDLER_NAME, name);\n              for (Api api : apis) {\n                apiBag.register(api, nameSubstitutes);\n              }\n            }\n          }\n\n        }\n      } else {\n        if (registerApi != null && registerApi)\n          apiBag.registerLazy((PluginHolder<SolrRequestHandler>) plugin, plugin.pluginInfo);\n      }\n    }\n    if(disableHandler == null) disableHandler = Boolean.FALSE;\n    PluginHolder<T> old = null;\n    if(!disableHandler) old = registry.put(name, plugin);\n    if (plugin.pluginInfo != null && plugin.pluginInfo.isDefault()) setDefault(name);\n    if (plugin.isLoaded()) registerMBean(plugin.get(), core, name);\n    return old;\n  }\n\n","sourceOld":"  PluginHolder<T> put(String name, PluginHolder<T> plugin) {\n    PluginHolder<T> old = registry.put(name, plugin);\n    if (plugin.pluginInfo != null && plugin.pluginInfo.isDefault()) {\n      setDefault(name);\n    }\n    if (plugin.isLoaded()) registerMBean(plugin.get(), core, name);\n    return old;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#put(String,PluginHolder[T]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag#put(String,PluginHolder[T]).mjava","sourceNew":"  PluginHolder<T> put(String name, PluginHolder<T> plugin) {\n    Boolean registerApi = null;\n    Boolean disableHandler = null;\n    if (plugin.pluginInfo != null) {\n      String registerAt = plugin.pluginInfo.attributes.get(\"registerPath\");\n      if (registerAt != null) {\n        List<String> strs = StrUtils.splitSmart(registerAt, ',');\n        disableHandler = !strs.contains(\"/\");\n        registerApi = strs.contains(\"/v2\");\n      }\n    }\n\n    if (apiBag != null) {\n      if (plugin.isLoaded()) {\n        T inst = plugin.get();\n        if (inst instanceof ApiSupport) {\n          ApiSupport apiSupport = (ApiSupport) inst;\n          if (registerApi == null) registerApi = apiSupport.registerV2();\n          if (disableHandler == null) disableHandler = !apiSupport.registerV1();\n\n          if(registerApi) {\n            Collection<Api> apis = apiSupport.getApis();\n            if (apis != null) {\n              Map<String, String> nameSubstitutes = singletonMap(HANDLER_NAME, name);\n              for (Api api : apis) {\n                apiBag.register(api, nameSubstitutes);\n              }\n            }\n          }\n\n        }\n      } else {\n        if (registerApi != null && registerApi)\n          apiBag.registerLazy((PluginHolder<SolrRequestHandler>) plugin, plugin.pluginInfo);\n      }\n    }\n    if(disableHandler == null) disableHandler = Boolean.FALSE;\n    PluginHolder<T> old = null;\n    if(!disableHandler) old = registry.put(name, plugin);\n    if (plugin.pluginInfo != null && plugin.pluginInfo.isDefault()) setDefault(name);\n    if (plugin.isLoaded()) registerMBean(plugin.get(), core, name);\n    return old;\n  }\n\n","sourceOld":"  PluginHolder<T> put(String name, PluginHolder<T> plugin) {\n    PluginHolder<T> old = registry.put(name, plugin);\n    if (plugin.pluginInfo != null && plugin.pluginInfo.isDefault()) {\n      setDefault(name);\n    }\n    if (plugin.isLoaded()) registerMBean(plugin.get(), core, name);\n    return old;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ab788212d72a7c436e5ef349ca99fe3c8fc78b","date":1489203052,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#put(String,PluginHolder[T]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag#put(String,PluginHolder[T]).mjava","sourceNew":"  PluginHolder<T> put(String name, PluginHolder<T> plugin) {\n    Boolean registerApi = null;\n    Boolean disableHandler = null;\n    if (plugin.pluginInfo != null) {\n      String registerAt = plugin.pluginInfo.attributes.get(\"registerPath\");\n      if (registerAt != null) {\n        List<String> strs = StrUtils.splitSmart(registerAt, ',');\n        disableHandler = !strs.contains(\"/solr\");\n        registerApi = strs.contains(\"/v2\");\n      }\n    }\n\n    if (apiBag != null) {\n      if (plugin.isLoaded()) {\n        T inst = plugin.get();\n        if (inst instanceof ApiSupport) {\n          ApiSupport apiSupport = (ApiSupport) inst;\n          if (registerApi == null) registerApi = apiSupport.registerV2();\n          if (disableHandler == null) disableHandler = !apiSupport.registerV1();\n\n          if(registerApi) {\n            Collection<Api> apis = apiSupport.getApis();\n            if (apis != null) {\n              Map<String, String> nameSubstitutes = singletonMap(HANDLER_NAME, name);\n              for (Api api : apis) {\n                apiBag.register(api, nameSubstitutes);\n              }\n            }\n          }\n\n        }\n      } else {\n        if (registerApi != null && registerApi)\n          apiBag.registerLazy((PluginHolder<SolrRequestHandler>) plugin, plugin.pluginInfo);\n      }\n    }\n    if(disableHandler == null) disableHandler = Boolean.FALSE;\n    PluginHolder<T> old = null;\n    if(!disableHandler) old = registry.put(name, plugin);\n    if (plugin.pluginInfo != null && plugin.pluginInfo.isDefault()) setDefault(name);\n    if (plugin.isLoaded()) registerMBean(plugin.get(), core, name);\n    return old;\n  }\n\n","sourceOld":"  PluginHolder<T> put(String name, PluginHolder<T> plugin) {\n    Boolean registerApi = null;\n    Boolean disableHandler = null;\n    if (plugin.pluginInfo != null) {\n      String registerAt = plugin.pluginInfo.attributes.get(\"registerPath\");\n      if (registerAt != null) {\n        List<String> strs = StrUtils.splitSmart(registerAt, ',');\n        disableHandler = !strs.contains(\"/\");\n        registerApi = strs.contains(\"/v2\");\n      }\n    }\n\n    if (apiBag != null) {\n      if (plugin.isLoaded()) {\n        T inst = plugin.get();\n        if (inst instanceof ApiSupport) {\n          ApiSupport apiSupport = (ApiSupport) inst;\n          if (registerApi == null) registerApi = apiSupport.registerV2();\n          if (disableHandler == null) disableHandler = !apiSupport.registerV1();\n\n          if(registerApi) {\n            Collection<Api> apis = apiSupport.getApis();\n            if (apis != null) {\n              Map<String, String> nameSubstitutes = singletonMap(HANDLER_NAME, name);\n              for (Api api : apis) {\n                apiBag.register(api, nameSubstitutes);\n              }\n            }\n          }\n\n        }\n      } else {\n        if (registerApi != null && registerApi)\n          apiBag.registerLazy((PluginHolder<SolrRequestHandler>) plugin, plugin.pluginInfo);\n      }\n    }\n    if(disableHandler == null) disableHandler = Boolean.FALSE;\n    PluginHolder<T> old = null;\n    if(!disableHandler) old = registry.put(name, plugin);\n    if (plugin.pluginInfo != null && plugin.pluginInfo.isDefault()) setDefault(name);\n    if (plugin.isLoaded()) registerMBean(plugin.get(), core, name);\n    return old;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a117d95183986014a31f25bb04e5464ca06d6068","date":1566208086,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#put(String,PluginHolder[T]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag#put(String,PluginHolder[T]).mjava","sourceNew":"  public PluginHolder<T> put(String name, PluginHolder<T> plugin) {\n    Boolean registerApi = null;\n    Boolean disableHandler = null;\n    if (plugin.pluginInfo != null) {\n      String registerAt = plugin.pluginInfo.attributes.get(\"registerPath\");\n      if (registerAt != null) {\n        List<String> strs = StrUtils.splitSmart(registerAt, ',');\n        disableHandler = !strs.contains(\"/solr\");\n        registerApi = strs.contains(\"/v2\");\n      }\n    }\n\n    if (apiBag != null) {\n      if (plugin.isLoaded()) {\n        T inst = plugin.get();\n        if (inst instanceof ApiSupport) {\n          ApiSupport apiSupport = (ApiSupport) inst;\n          if (registerApi == null) registerApi = apiSupport.registerV2();\n          if (disableHandler == null) disableHandler = !apiSupport.registerV1();\n\n          if(registerApi) {\n            Collection<Api> apis = apiSupport.getApis();\n            if (apis != null) {\n              Map<String, String> nameSubstitutes = singletonMap(HANDLER_NAME, name);\n              for (Api api : apis) {\n                apiBag.register(api, nameSubstitutes);\n              }\n            }\n          }\n\n        }\n      } else {\n        if (registerApi != null && registerApi)\n          apiBag.registerLazy((PluginHolder<SolrRequestHandler>) plugin, plugin.pluginInfo);\n      }\n    }\n    if(disableHandler == null) disableHandler = Boolean.FALSE;\n    PluginHolder<T> old = null;\n    if(!disableHandler) old = registry.put(name, plugin);\n    if (plugin.pluginInfo != null && plugin.pluginInfo.isDefault()) setDefault(name);\n    if (plugin.isLoaded()) registerMBean(plugin.get(), core, name);\n    return old;\n  }\n\n","sourceOld":"  PluginHolder<T> put(String name, PluginHolder<T> plugin) {\n    Boolean registerApi = null;\n    Boolean disableHandler = null;\n    if (plugin.pluginInfo != null) {\n      String registerAt = plugin.pluginInfo.attributes.get(\"registerPath\");\n      if (registerAt != null) {\n        List<String> strs = StrUtils.splitSmart(registerAt, ',');\n        disableHandler = !strs.contains(\"/solr\");\n        registerApi = strs.contains(\"/v2\");\n      }\n    }\n\n    if (apiBag != null) {\n      if (plugin.isLoaded()) {\n        T inst = plugin.get();\n        if (inst instanceof ApiSupport) {\n          ApiSupport apiSupport = (ApiSupport) inst;\n          if (registerApi == null) registerApi = apiSupport.registerV2();\n          if (disableHandler == null) disableHandler = !apiSupport.registerV1();\n\n          if(registerApi) {\n            Collection<Api> apis = apiSupport.getApis();\n            if (apis != null) {\n              Map<String, String> nameSubstitutes = singletonMap(HANDLER_NAME, name);\n              for (Api api : apis) {\n                apiBag.register(api, nameSubstitutes);\n              }\n            }\n          }\n\n        }\n      } else {\n        if (registerApi != null && registerApi)\n          apiBag.registerLazy((PluginHolder<SolrRequestHandler>) plugin, plugin.pluginInfo);\n      }\n    }\n    if(disableHandler == null) disableHandler = Boolean.FALSE;\n    PluginHolder<T> old = null;\n    if(!disableHandler) old = registry.put(name, plugin);\n    if (plugin.pluginInfo != null && plugin.pluginInfo.isDefault()) setDefault(name);\n    if (plugin.isLoaded()) registerMBean(plugin.get(), core, name);\n    return old;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#put(String,PluginHolder[T]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag#put(String,PluginHolder[T]).mjava","sourceNew":"  PluginHolder<T> put(String name, PluginHolder<T> plugin) {\n    Boolean registerApi = null;\n    Boolean disableHandler = null;\n    if (plugin.pluginInfo != null) {\n      String registerAt = plugin.pluginInfo.attributes.get(\"registerPath\");\n      if (registerAt != null) {\n        List<String> strs = StrUtils.splitSmart(registerAt, ',');\n        disableHandler = !strs.contains(\"/solr\");\n        registerApi = strs.contains(\"/v2\");\n      }\n    }\n\n    if (apiBag != null) {\n      if (plugin.isLoaded()) {\n        T inst = plugin.get();\n        if (inst instanceof ApiSupport) {\n          ApiSupport apiSupport = (ApiSupport) inst;\n          if (registerApi == null) registerApi = apiSupport.registerV2();\n          if (disableHandler == null) disableHandler = !apiSupport.registerV1();\n\n          if(registerApi) {\n            Collection<Api> apis = apiSupport.getApis();\n            if (apis != null) {\n              Map<String, String> nameSubstitutes = singletonMap(HANDLER_NAME, name);\n              for (Api api : apis) {\n                apiBag.register(api, nameSubstitutes);\n              }\n            }\n          }\n\n        }\n      } else {\n        if (registerApi != null && registerApi)\n          apiBag.registerLazy((PluginHolder<SolrRequestHandler>) plugin, plugin.pluginInfo);\n      }\n    }\n    if(disableHandler == null) disableHandler = Boolean.FALSE;\n    PluginHolder<T> old = null;\n    if(!disableHandler) old = registry.put(name, plugin);\n    if (plugin.pluginInfo != null && plugin.pluginInfo.isDefault()) setDefault(name);\n    if (plugin.isLoaded()) registerMBean(plugin.get(), core, name);\n    return old;\n  }\n\n","sourceOld":"  public PluginHolder<T> put(String name, PluginHolder<T> plugin) {\n    Boolean registerApi = null;\n    Boolean disableHandler = null;\n    if (plugin.pluginInfo != null) {\n      String registerAt = plugin.pluginInfo.attributes.get(\"registerPath\");\n      if (registerAt != null) {\n        List<String> strs = StrUtils.splitSmart(registerAt, ',');\n        disableHandler = !strs.contains(\"/solr\");\n        registerApi = strs.contains(\"/v2\");\n      }\n    }\n\n    if (apiBag != null) {\n      if (plugin.isLoaded()) {\n        T inst = plugin.get();\n        if (inst instanceof ApiSupport) {\n          ApiSupport apiSupport = (ApiSupport) inst;\n          if (registerApi == null) registerApi = apiSupport.registerV2();\n          if (disableHandler == null) disableHandler = !apiSupport.registerV1();\n\n          if(registerApi) {\n            Collection<Api> apis = apiSupport.getApis();\n            if (apis != null) {\n              Map<String, String> nameSubstitutes = singletonMap(HANDLER_NAME, name);\n              for (Api api : apis) {\n                apiBag.register(api, nameSubstitutes);\n              }\n            }\n          }\n\n        }\n      } else {\n        if (registerApi != null && registerApi)\n          apiBag.registerLazy((PluginHolder<SolrRequestHandler>) plugin, plugin.pluginInfo);\n      }\n    }\n    if(disableHandler == null) disableHandler = Boolean.FALSE;\n    PluginHolder<T> old = null;\n    if(!disableHandler) old = registry.put(name, plugin);\n    if (plugin.pluginInfo != null && plugin.pluginInfo.isDefault()) setDefault(name);\n    if (plugin.isLoaded()) registerMBean(plugin.get(), core, name);\n    return old;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#put(String,PluginHolder[T]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag#put(String,PluginHolder[T]).mjava","sourceNew":"  PluginHolder<T> put(String name, PluginHolder<T> plugin) {\n    Boolean registerApi = null;\n    Boolean disableHandler = null;\n    if (plugin.pluginInfo != null) {\n      String registerAt = plugin.pluginInfo.attributes.get(\"registerPath\");\n      if (registerAt != null) {\n        List<String> strs = StrUtils.splitSmart(registerAt, ',');\n        disableHandler = !strs.contains(\"/solr\");\n        registerApi = strs.contains(\"/v2\");\n      }\n    }\n\n    if (apiBag != null) {\n      if (plugin.isLoaded()) {\n        T inst = plugin.get();\n        if (inst instanceof ApiSupport) {\n          ApiSupport apiSupport = (ApiSupport) inst;\n          if (registerApi == null) registerApi = apiSupport.registerV2();\n          if (disableHandler == null) disableHandler = !apiSupport.registerV1();\n\n          if(registerApi) {\n            Collection<Api> apis = apiSupport.getApis();\n            if (apis != null) {\n              Map<String, String> nameSubstitutes = singletonMap(HANDLER_NAME, name);\n              for (Api api : apis) {\n                apiBag.register(api, nameSubstitutes);\n              }\n            }\n          }\n\n        }\n      } else {\n        if (registerApi != null && registerApi)\n          apiBag.registerLazy((PluginHolder<SolrRequestHandler>) plugin, plugin.pluginInfo);\n      }\n    }\n    if(disableHandler == null) disableHandler = Boolean.FALSE;\n    PluginHolder<T> old = null;\n    if(!disableHandler) old = registry.put(name, plugin);\n    if (plugin.pluginInfo != null && plugin.pluginInfo.isDefault()) setDefault(name);\n    if (plugin.isLoaded()) registerMBean(plugin.get(), core, name);\n    return old;\n  }\n\n","sourceOld":"  public PluginHolder<T> put(String name, PluginHolder<T> plugin) {\n    Boolean registerApi = null;\n    Boolean disableHandler = null;\n    if (plugin.pluginInfo != null) {\n      String registerAt = plugin.pluginInfo.attributes.get(\"registerPath\");\n      if (registerAt != null) {\n        List<String> strs = StrUtils.splitSmart(registerAt, ',');\n        disableHandler = !strs.contains(\"/solr\");\n        registerApi = strs.contains(\"/v2\");\n      }\n    }\n\n    if (apiBag != null) {\n      if (plugin.isLoaded()) {\n        T inst = plugin.get();\n        if (inst instanceof ApiSupport) {\n          ApiSupport apiSupport = (ApiSupport) inst;\n          if (registerApi == null) registerApi = apiSupport.registerV2();\n          if (disableHandler == null) disableHandler = !apiSupport.registerV1();\n\n          if(registerApi) {\n            Collection<Api> apis = apiSupport.getApis();\n            if (apis != null) {\n              Map<String, String> nameSubstitutes = singletonMap(HANDLER_NAME, name);\n              for (Api api : apis) {\n                apiBag.register(api, nameSubstitutes);\n              }\n            }\n          }\n\n        }\n      } else {\n        if (registerApi != null && registerApi)\n          apiBag.registerLazy((PluginHolder<SolrRequestHandler>) plugin, plugin.pluginInfo);\n      }\n    }\n    if(disableHandler == null) disableHandler = Boolean.FALSE;\n    PluginHolder<T> old = null;\n    if(!disableHandler) old = registry.put(name, plugin);\n    if (plugin.pluginInfo != null && plugin.pluginInfo.isDefault()) setDefault(name);\n    if (plugin.isLoaded()) registerMBean(plugin.get(), core, name);\n    return old;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","date":1571411704,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#put(String,PluginHolder[T]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag#put(String,PluginHolder[T]).mjava","sourceNew":"  public PluginHolder<T> put(String name, PluginHolder<T> plugin) {\n    Boolean registerApi = null;\n    Boolean disableHandler = null;\n    if (plugin.pluginInfo != null) {\n      String registerAt = plugin.pluginInfo.attributes.get(\"registerPath\");\n      if (registerAt != null) {\n        List<String> strs = StrUtils.splitSmart(registerAt, ',');\n        disableHandler = !strs.contains(\"/solr\");\n        registerApi = strs.contains(\"/v2\");\n      }\n    }\n\n    if (apiBag != null) {\n      if (plugin.isLoaded()) {\n        T inst = plugin.get();\n        if (inst instanceof ApiSupport) {\n          ApiSupport apiSupport = (ApiSupport) inst;\n          if (registerApi == null) registerApi = apiSupport.registerV2();\n          if (disableHandler == null) disableHandler = !apiSupport.registerV1();\n\n          if(registerApi) {\n            Collection<Api> apis = apiSupport.getApis();\n            if (apis != null) {\n              Map<String, String> nameSubstitutes = singletonMap(HANDLER_NAME, name);\n              for (Api api : apis) {\n                apiBag.register(api, nameSubstitutes);\n              }\n            }\n          }\n\n        }\n      } else {\n        if (registerApi != null && registerApi)\n          apiBag.registerLazy((PluginHolder<SolrRequestHandler>) plugin, plugin.pluginInfo);\n      }\n    }\n    if (disableHandler == null) disableHandler = Boolean.FALSE;\n    PluginHolder<T> old = null;\n    if (!disableHandler) old = registry.put(name, plugin);\n    if (plugin.pluginInfo != null && plugin.pluginInfo.isDefault()) setDefault(name);\n    if (plugin.isLoaded()) registerMBean(plugin.get(), core, name);\n    // old instance has been replaced - close it to prevent mem leaks\n    if (old != null && old != plugin) {\n      closeQuietly(old);\n    }\n    return old;\n  }\n\n","sourceOld":"  PluginHolder<T> put(String name, PluginHolder<T> plugin) {\n    Boolean registerApi = null;\n    Boolean disableHandler = null;\n    if (plugin.pluginInfo != null) {\n      String registerAt = plugin.pluginInfo.attributes.get(\"registerPath\");\n      if (registerAt != null) {\n        List<String> strs = StrUtils.splitSmart(registerAt, ',');\n        disableHandler = !strs.contains(\"/solr\");\n        registerApi = strs.contains(\"/v2\");\n      }\n    }\n\n    if (apiBag != null) {\n      if (plugin.isLoaded()) {\n        T inst = plugin.get();\n        if (inst instanceof ApiSupport) {\n          ApiSupport apiSupport = (ApiSupport) inst;\n          if (registerApi == null) registerApi = apiSupport.registerV2();\n          if (disableHandler == null) disableHandler = !apiSupport.registerV1();\n\n          if(registerApi) {\n            Collection<Api> apis = apiSupport.getApis();\n            if (apis != null) {\n              Map<String, String> nameSubstitutes = singletonMap(HANDLER_NAME, name);\n              for (Api api : apis) {\n                apiBag.register(api, nameSubstitutes);\n              }\n            }\n          }\n\n        }\n      } else {\n        if (registerApi != null && registerApi)\n          apiBag.registerLazy((PluginHolder<SolrRequestHandler>) plugin, plugin.pluginInfo);\n      }\n    }\n    if(disableHandler == null) disableHandler = Boolean.FALSE;\n    PluginHolder<T> old = null;\n    if(!disableHandler) old = registry.put(name, plugin);\n    if (plugin.pluginInfo != null && plugin.pluginInfo.isDefault()) setDefault(name);\n    if (plugin.isLoaded()) registerMBean(plugin.get(), core, name);\n    return old;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75237075d8425856bf4bbf52a6be4f9162b8187d","date":1591103291,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#put(String,PluginHolder[T]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag#put(String,PluginHolder[T]).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public PluginHolder<T> put(String name, PluginHolder<T> plugin) {\n    Boolean registerApi = null;\n    Boolean disableHandler = null;\n    if (plugin.pluginInfo != null) {\n      String registerAt = plugin.pluginInfo.attributes.get(\"registerPath\");\n      if (registerAt != null) {\n        List<String> strs = StrUtils.splitSmart(registerAt, ',');\n        disableHandler = !strs.contains(\"/solr\");\n        registerApi = strs.contains(\"/v2\");\n      }\n    }\n\n    if (apiBag != null) {\n      if (plugin.isLoaded()) {\n        T inst = plugin.get();\n        if (inst instanceof ApiSupport) {\n          ApiSupport apiSupport = (ApiSupport) inst;\n          if (registerApi == null) registerApi = apiSupport.registerV2();\n          if (disableHandler == null) disableHandler = !apiSupport.registerV1();\n\n          if(registerApi) {\n            Collection<Api> apis = apiSupport.getApis();\n            if (apis != null) {\n              Map<String, String> nameSubstitutes = singletonMap(HANDLER_NAME, name);\n              for (Api api : apis) {\n                apiBag.register(api, nameSubstitutes);\n              }\n            }\n          }\n\n        }\n      } else {\n        if (registerApi != null && registerApi)\n          apiBag.registerLazy((PluginHolder<SolrRequestHandler>) plugin, plugin.pluginInfo);\n      }\n    }\n    if (disableHandler == null) disableHandler = Boolean.FALSE;\n    PluginHolder<T> old = null;\n    if (!disableHandler) old = registry.put(name, plugin);\n    if (plugin.pluginInfo != null && plugin.pluginInfo.isDefault()) setDefault(name);\n    if (plugin.isLoaded()) registerMBean(plugin.get(), core, name);\n    // old instance has been replaced - close it to prevent mem leaks\n    if (old != null && old != plugin) {\n      closeQuietly(old);\n    }\n    return old;\n  }\n\n","sourceOld":"  public PluginHolder<T> put(String name, PluginHolder<T> plugin) {\n    Boolean registerApi = null;\n    Boolean disableHandler = null;\n    if (plugin.pluginInfo != null) {\n      String registerAt = plugin.pluginInfo.attributes.get(\"registerPath\");\n      if (registerAt != null) {\n        List<String> strs = StrUtils.splitSmart(registerAt, ',');\n        disableHandler = !strs.contains(\"/solr\");\n        registerApi = strs.contains(\"/v2\");\n      }\n    }\n\n    if (apiBag != null) {\n      if (plugin.isLoaded()) {\n        T inst = plugin.get();\n        if (inst instanceof ApiSupport) {\n          ApiSupport apiSupport = (ApiSupport) inst;\n          if (registerApi == null) registerApi = apiSupport.registerV2();\n          if (disableHandler == null) disableHandler = !apiSupport.registerV1();\n\n          if(registerApi) {\n            Collection<Api> apis = apiSupport.getApis();\n            if (apis != null) {\n              Map<String, String> nameSubstitutes = singletonMap(HANDLER_NAME, name);\n              for (Api api : apis) {\n                apiBag.register(api, nameSubstitutes);\n              }\n            }\n          }\n\n        }\n      } else {\n        if (registerApi != null && registerApi)\n          apiBag.registerLazy((PluginHolder<SolrRequestHandler>) plugin, plugin.pluginInfo);\n      }\n    }\n    if (disableHandler == null) disableHandler = Boolean.FALSE;\n    PluginHolder<T> old = null;\n    if (!disableHandler) old = registry.put(name, plugin);\n    if (plugin.pluginInfo != null && plugin.pluginInfo.isDefault()) setDefault(name);\n    if (plugin.isLoaded()) registerMBean(plugin.get(), core, name);\n    // old instance has been replaced - close it to prevent mem leaks\n    if (old != null && old != plugin) {\n      closeQuietly(old);\n    }\n    return old;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","69cad0546debf9ce9d44e309ecfa26760fecd5d8"],"75237075d8425856bf4bbf52a6be4f9162b8187d":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["c44cc06c26e456fe9c215072b79fce30babe3975"],"a8ab788212d72a7c436e5ef349ca99fe3c8fc78b":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["69cad0546debf9ce9d44e309ecfa26760fecd5d8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["69cad0546debf9ce9d44e309ecfa26760fecd5d8","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"69cad0546debf9ce9d44e309ecfa26760fecd5d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c44cc06c26e456fe9c215072b79fce30babe3975":["a117d95183986014a31f25bb04e5464ca06d6068"],"a117d95183986014a31f25bb04e5464ca06d6068":["a8ab788212d72a7c436e5ef349ca99fe3c8fc78b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["75237075d8425856bf4bbf52a6be4f9162b8187d"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a117d95183986014a31f25bb04e5464ca06d6068","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"75237075d8425856bf4bbf52a6be4f9162b8187d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["75237075d8425856bf4bbf52a6be4f9162b8187d"],"a8ab788212d72a7c436e5ef349ca99fe3c8fc78b":["a117d95183986014a31f25bb04e5464ca06d6068"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","69cad0546debf9ce9d44e309ecfa26760fecd5d8"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["a8ab788212d72a7c436e5ef349ca99fe3c8fc78b","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"69cad0546debf9ce9d44e309ecfa26760fecd5d8":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fcf710a8fcd590cf55c855d422c7a10fce3e6117","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"c44cc06c26e456fe9c215072b79fce30babe3975":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","b0b597c65628ca9e73913a07e81691f8229bae35"],"a117d95183986014a31f25bb04e5464ca06d6068":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}