{"path":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getTerms(Query,float,HashSet[WeightedTerm],boolean,String).mjava","commits":[{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getTerms(Query,float,HashSet[WeightedTerm],boolean,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getTerms(Query,HashSet[WeightedTerm],boolean,String).mjava","sourceNew":"  private static final void getTerms(Query query, float boost, HashSet<WeightedTerm> terms, boolean prohibited, String fieldName) {\n    try {\n      if (query instanceof BoostQuery) {\n        BoostQuery boostQuery = (BoostQuery) query;\n        getTerms(boostQuery.getQuery(), boost * boostQuery.getBoost(), terms, prohibited, fieldName);\n      } else if (query instanceof BooleanQuery)\n        getTermsFromBooleanQuery((BooleanQuery) query, boost, terms, prohibited, fieldName);\n      else {\n        HashSet<Term> nonWeightedTerms = new HashSet<>();\n        try {\n          EMPTY_INDEXSEARCHER.createNormalizedWeight(query, false).extractTerms(nonWeightedTerms);\n        } catch (IOException bogus) {\n          throw new RuntimeException(\"Should not happen on an empty index\", bogus);\n        }\n        for (Iterator<Term> iter = nonWeightedTerms.iterator(); iter.hasNext(); ) {\n          Term term = iter.next();\n          if ((fieldName == null) || (term.field().equals(fieldName))) {\n            terms.add(new WeightedTerm(boost, term.text()));\n          }\n        }\n      }\n    } catch (UnsupportedOperationException ignore) {\n      //this is non-fatal for our purposes\n    }\n  }\n\n","sourceOld":"  private static final void getTerms(Query query, HashSet<WeightedTerm> terms, boolean prohibited, String fieldName) {\n    try {\n      if (query instanceof BooleanQuery)\n        getTermsFromBooleanQuery((BooleanQuery) query, terms, prohibited, fieldName);\n      else {\n        HashSet<Term> nonWeightedTerms = new HashSet<>();\n        try {\n          EMPTY_INDEXSEARCHER.createNormalizedWeight(query, false).extractTerms(nonWeightedTerms);\n        } catch (IOException bogus) {\n          throw new RuntimeException(\"Should not happen on an empty index\", bogus);\n        }\n        for (Iterator<Term> iter = nonWeightedTerms.iterator(); iter.hasNext(); ) {\n          Term term = iter.next();\n          if ((fieldName == null) || (term.field().equals(fieldName))) {\n            terms.add(new WeightedTerm(query.getBoost(), term.text()));\n          }\n        }\n      }\n    } catch (UnsupportedOperationException ignore) {\n      //this is non-fatal for our purposes\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getTerms(Query,float,HashSet[WeightedTerm],boolean,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getTerms(Query,float,HashSet[WeightedTerm],boolean,String).mjava","sourceNew":"  private static final void getTerms(Query query, float boost, HashSet<WeightedTerm> terms, boolean prohibited, String fieldName) {\n    try {\n      if (query instanceof BoostQuery) {\n        BoostQuery boostQuery = (BoostQuery) query;\n        getTerms(boostQuery.getQuery(), boost * boostQuery.getBoost(), terms, prohibited, fieldName);\n      } else if (query instanceof BooleanQuery)\n        getTermsFromBooleanQuery((BooleanQuery) query, boost, terms, prohibited, fieldName);\n      else {\n        HashSet<Term> nonWeightedTerms = new HashSet<>();\n        try {\n          EMPTY_INDEXSEARCHER.createNormalizedWeight(query, ScoreMode.COMPLETE_NO_SCORES).extractTerms(nonWeightedTerms);\n        } catch (IOException bogus) {\n          throw new RuntimeException(\"Should not happen on an empty index\", bogus);\n        }\n        for (Iterator<Term> iter = nonWeightedTerms.iterator(); iter.hasNext(); ) {\n          Term term = iter.next();\n          if ((fieldName == null) || (term.field().equals(fieldName))) {\n            terms.add(new WeightedTerm(boost, term.text()));\n          }\n        }\n      }\n    } catch (UnsupportedOperationException ignore) {\n      //this is non-fatal for our purposes\n    }\n  }\n\n","sourceOld":"  private static final void getTerms(Query query, float boost, HashSet<WeightedTerm> terms, boolean prohibited, String fieldName) {\n    try {\n      if (query instanceof BoostQuery) {\n        BoostQuery boostQuery = (BoostQuery) query;\n        getTerms(boostQuery.getQuery(), boost * boostQuery.getBoost(), terms, prohibited, fieldName);\n      } else if (query instanceof BooleanQuery)\n        getTermsFromBooleanQuery((BooleanQuery) query, boost, terms, prohibited, fieldName);\n      else {\n        HashSet<Term> nonWeightedTerms = new HashSet<>();\n        try {\n          EMPTY_INDEXSEARCHER.createNormalizedWeight(query, false).extractTerms(nonWeightedTerms);\n        } catch (IOException bogus) {\n          throw new RuntimeException(\"Should not happen on an empty index\", bogus);\n        }\n        for (Iterator<Term> iter = nonWeightedTerms.iterator(); iter.hasNext(); ) {\n          Term term = iter.next();\n          if ((fieldName == null) || (term.field().equals(fieldName))) {\n            terms.add(new WeightedTerm(boost, term.text()));\n          }\n        }\n      }\n    } catch (UnsupportedOperationException ignore) {\n      //this is non-fatal for our purposes\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getTerms(Query,float,HashSet[WeightedTerm],boolean,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getTerms(Query,float,HashSet[WeightedTerm],boolean,String).mjava","sourceNew":"  private static final void getTerms(Query query, float boost, HashSet<WeightedTerm> terms, boolean prohibited, String fieldName) {\n    try {\n      if (query instanceof BoostQuery) {\n        BoostQuery boostQuery = (BoostQuery) query;\n        getTerms(boostQuery.getQuery(), boost * boostQuery.getBoost(), terms, prohibited, fieldName);\n      } else if (query instanceof BooleanQuery)\n        getTermsFromBooleanQuery((BooleanQuery) query, boost, terms, prohibited, fieldName);\n      else {\n        HashSet<Term> nonWeightedTerms = new HashSet<>();\n        try {\n          EMPTY_INDEXSEARCHER.createNormalizedWeight(query, ScoreMode.COMPLETE_NO_SCORES).extractTerms(nonWeightedTerms);\n        } catch (IOException bogus) {\n          throw new RuntimeException(\"Should not happen on an empty index\", bogus);\n        }\n        for (Iterator<Term> iter = nonWeightedTerms.iterator(); iter.hasNext(); ) {\n          Term term = iter.next();\n          if ((fieldName == null) || (term.field().equals(fieldName))) {\n            terms.add(new WeightedTerm(boost, term.text()));\n          }\n        }\n      }\n    } catch (UnsupportedOperationException ignore) {\n      //this is non-fatal for our purposes\n    }\n  }\n\n","sourceOld":"  private static final void getTerms(Query query, float boost, HashSet<WeightedTerm> terms, boolean prohibited, String fieldName) {\n    try {\n      if (query instanceof BoostQuery) {\n        BoostQuery boostQuery = (BoostQuery) query;\n        getTerms(boostQuery.getQuery(), boost * boostQuery.getBoost(), terms, prohibited, fieldName);\n      } else if (query instanceof BooleanQuery)\n        getTermsFromBooleanQuery((BooleanQuery) query, boost, terms, prohibited, fieldName);\n      else {\n        HashSet<Term> nonWeightedTerms = new HashSet<>();\n        try {\n          EMPTY_INDEXSEARCHER.createNormalizedWeight(query, false).extractTerms(nonWeightedTerms);\n        } catch (IOException bogus) {\n          throw new RuntimeException(\"Should not happen on an empty index\", bogus);\n        }\n        for (Iterator<Term> iter = nonWeightedTerms.iterator(); iter.hasNext(); ) {\n          Term term = iter.next();\n          if ((fieldName == null) || (term.field().equals(fieldName))) {\n            terms.add(new WeightedTerm(boost, term.text()));\n          }\n        }\n      }\n    } catch (UnsupportedOperationException ignore) {\n      //this is non-fatal for our purposes\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"475584d5e08a22ad3fc7babefe006d77bc744567","date":1523282824,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getTerms(Query,float,HashSet[WeightedTerm],boolean,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getTerms(Query,float,HashSet[WeightedTerm],boolean,String).mjava","sourceNew":"  private static final void getTerms(Query query, float boost, HashSet<WeightedTerm> terms, boolean prohibited, String fieldName) {\n    try {\n      if (query instanceof BoostQuery) {\n        BoostQuery boostQuery = (BoostQuery) query;\n        getTerms(boostQuery.getQuery(), boost * boostQuery.getBoost(), terms, prohibited, fieldName);\n      } else if (query instanceof BooleanQuery)\n        getTermsFromBooleanQuery((BooleanQuery) query, boost, terms, prohibited, fieldName);\n      else {\n        HashSet<Term> nonWeightedTerms = new HashSet<>();\n        try {\n          EMPTY_INDEXSEARCHER.createWeight(EMPTY_INDEXSEARCHER.rewrite(query), ScoreMode.COMPLETE_NO_SCORES, 1).extractTerms(nonWeightedTerms);\n        } catch (IOException bogus) {\n          throw new RuntimeException(\"Should not happen on an empty index\", bogus);\n        }\n        for (Iterator<Term> iter = nonWeightedTerms.iterator(); iter.hasNext(); ) {\n          Term term = iter.next();\n          if ((fieldName == null) || (term.field().equals(fieldName))) {\n            terms.add(new WeightedTerm(boost, term.text()));\n          }\n        }\n      }\n    } catch (UnsupportedOperationException ignore) {\n      //this is non-fatal for our purposes\n    }\n  }\n\n","sourceOld":"  private static final void getTerms(Query query, float boost, HashSet<WeightedTerm> terms, boolean prohibited, String fieldName) {\n    try {\n      if (query instanceof BoostQuery) {\n        BoostQuery boostQuery = (BoostQuery) query;\n        getTerms(boostQuery.getQuery(), boost * boostQuery.getBoost(), terms, prohibited, fieldName);\n      } else if (query instanceof BooleanQuery)\n        getTermsFromBooleanQuery((BooleanQuery) query, boost, terms, prohibited, fieldName);\n      else {\n        HashSet<Term> nonWeightedTerms = new HashSet<>();\n        try {\n          EMPTY_INDEXSEARCHER.createNormalizedWeight(query, ScoreMode.COMPLETE_NO_SCORES).extractTerms(nonWeightedTerms);\n        } catch (IOException bogus) {\n          throw new RuntimeException(\"Should not happen on an empty index\", bogus);\n        }\n        for (Iterator<Term> iter = nonWeightedTerms.iterator(); iter.hasNext(); ) {\n          Term term = iter.next();\n          if ((fieldName == null) || (term.field().equals(fieldName))) {\n            terms.add(new WeightedTerm(boost, term.text()));\n          }\n        }\n      }\n    } catch (UnsupportedOperationException ignore) {\n      //this is non-fatal for our purposes\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58e44159788900f4a2113b84463dc3fbbf80f20","date":1523319203,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getTerms(Query,float,HashSet[WeightedTerm],boolean,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getTerms(Query,float,HashSet[WeightedTerm],boolean,String).mjava","sourceNew":"  private static final void getTerms(Query query, float boost, HashSet<WeightedTerm> terms, boolean prohibited, String fieldName) {\n    try {\n      if (query instanceof BoostQuery) {\n        BoostQuery boostQuery = (BoostQuery) query;\n        getTerms(boostQuery.getQuery(), boost * boostQuery.getBoost(), terms, prohibited, fieldName);\n      } else if (query instanceof BooleanQuery)\n        getTermsFromBooleanQuery((BooleanQuery) query, boost, terms, prohibited, fieldName);\n      else {\n        HashSet<Term> nonWeightedTerms = new HashSet<>();\n        try {\n          EMPTY_INDEXSEARCHER.createWeight(EMPTY_INDEXSEARCHER.rewrite(query), ScoreMode.COMPLETE_NO_SCORES, 1).extractTerms(nonWeightedTerms);\n        } catch (IOException bogus) {\n          throw new RuntimeException(\"Should not happen on an empty index\", bogus);\n        }\n        for (Iterator<Term> iter = nonWeightedTerms.iterator(); iter.hasNext(); ) {\n          Term term = iter.next();\n          if ((fieldName == null) || (term.field().equals(fieldName))) {\n            terms.add(new WeightedTerm(boost, term.text()));\n          }\n        }\n      }\n    } catch (UnsupportedOperationException ignore) {\n      //this is non-fatal for our purposes\n    }\n  }\n\n","sourceOld":"  private static final void getTerms(Query query, float boost, HashSet<WeightedTerm> terms, boolean prohibited, String fieldName) {\n    try {\n      if (query instanceof BoostQuery) {\n        BoostQuery boostQuery = (BoostQuery) query;\n        getTerms(boostQuery.getQuery(), boost * boostQuery.getBoost(), terms, prohibited, fieldName);\n      } else if (query instanceof BooleanQuery)\n        getTermsFromBooleanQuery((BooleanQuery) query, boost, terms, prohibited, fieldName);\n      else {\n        HashSet<Term> nonWeightedTerms = new HashSet<>();\n        try {\n          EMPTY_INDEXSEARCHER.createNormalizedWeight(query, ScoreMode.COMPLETE_NO_SCORES).extractTerms(nonWeightedTerms);\n        } catch (IOException bogus) {\n          throw new RuntimeException(\"Should not happen on an empty index\", bogus);\n        }\n        for (Iterator<Term> iter = nonWeightedTerms.iterator(); iter.hasNext(); ) {\n          Term term = iter.next();\n          if ((fieldName == null) || (term.field().equals(fieldName))) {\n            terms.add(new WeightedTerm(boost, term.text()));\n          }\n        }\n      }\n    } catch (UnsupportedOperationException ignore) {\n      //this is non-fatal for our purposes\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7","date":1552575873,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getTerms(Query,float,HashSet[WeightedTerm],boolean,String).mjava","sourceNew":null,"sourceOld":"  private static final void getTerms(Query query, float boost, HashSet<WeightedTerm> terms, boolean prohibited, String fieldName) {\n    try {\n      if (query instanceof BoostQuery) {\n        BoostQuery boostQuery = (BoostQuery) query;\n        getTerms(boostQuery.getQuery(), boost * boostQuery.getBoost(), terms, prohibited, fieldName);\n      } else if (query instanceof BooleanQuery)\n        getTermsFromBooleanQuery((BooleanQuery) query, boost, terms, prohibited, fieldName);\n      else {\n        HashSet<Term> nonWeightedTerms = new HashSet<>();\n        try {\n          EMPTY_INDEXSEARCHER.createWeight(EMPTY_INDEXSEARCHER.rewrite(query), ScoreMode.COMPLETE_NO_SCORES, 1).extractTerms(nonWeightedTerms);\n        } catch (IOException bogus) {\n          throw new RuntimeException(\"Should not happen on an empty index\", bogus);\n        }\n        for (Iterator<Term> iter = nonWeightedTerms.iterator(); iter.hasNext(); ) {\n          Term term = iter.next();\n          if ((fieldName == null) || (term.field().equals(fieldName))) {\n            terms.add(new WeightedTerm(boost, term.text()));\n          }\n        }\n      }\n    } catch (UnsupportedOperationException ignore) {\n      //this is non-fatal for our purposes\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["417142ff08fda9cf0b72d5133e63097a166c6458","475584d5e08a22ad3fc7babefe006d77bc744567"],"475584d5e08a22ad3fc7babefe006d77bc744567":["417142ff08fda9cf0b72d5133e63097a166c6458"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"417142ff08fda9cf0b72d5133e63097a166c6458":["2dfdf766e55e943d942055d7de53c7ad6bc45283","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"475584d5e08a22ad3fc7babefe006d77bc744567":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["d58e44159788900f4a2113b84463dc3fbbf80f20","475584d5e08a22ad3fc7babefe006d77bc744567"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}