{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCountsCache#load(File,IndexReader,TaxonomyReader,FacetIndexingParams).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCountsCache#load(File,IndexReader,TaxonomyReader,FacetIndexingParams).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/TotalFacetCountsCache#load(File,IndexReader,TaxonomyReader,FacetIndexingParams).mjava","sourceNew":"  /**\n   * Load {@link TotalFacetCounts} matching input parameters from the provided outputFile \n   * and add them into the cache for the provided indexReader, taxonomy, and facetIndexingParams.\n   * If a {@link TotalFacetCounts} for these parameters already exists in the cache, it will be\n   * replaced by the loaded one.\n   * @param inputFile file from which to read the data \n   * @param indexReader the documents index\n   * @param taxonomy the taxonomy index\n   * @param facetIndexingParams the facet indexing parameters\n   * @throws IOException on error\n   * @see #store(File, IndexReader, TaxonomyReader, FacetIndexingParams, CategoryListCache)\n   */\n  public synchronized void load(File inputFile, IndexReader indexReader, TaxonomyReader taxonomy,\n      FacetIndexingParams facetIndexingParams) throws IOException {\n    if (!inputFile.isFile() || !inputFile.exists() || !inputFile.canRead()) {\n      throw new IllegalArgumentException(\"Exepecting an existing readable file: \"+inputFile);\n    }\n    TFCKey key = new TFCKey(indexReader, taxonomy, facetIndexingParams);\n    TotalFacetCounts tfc = TotalFacetCounts.loadFromFile(inputFile, taxonomy, facetIndexingParams);\n    cache.put(key,tfc);\n    trimCache();\n    markRecentlyUsed(key);\n  }\n\n","sourceOld":"  /**\n   * Load {@link TotalFacetCounts} matching input parameters from the provided outputFile \n   * and add them into the cache for the provided indexReader, taxonomy, and facetIndexingParams.\n   * If a {@link TotalFacetCounts} for these parameters already exists in the cache, it will be\n   * replaced by the loaded one.\n   * @param inputFile file from which to read the data \n   * @param indexReader the documents index\n   * @param taxonomy the taxonomy index\n   * @param facetIndexingParams the facet indexing parameters\n   * @throws IOException on error\n   * @see #store(File, IndexReader, TaxonomyReader, FacetIndexingParams, CategoryListCache)\n   */\n  public synchronized void load(File inputFile, IndexReader indexReader, TaxonomyReader taxonomy,\n      FacetIndexingParams facetIndexingParams) throws IOException {\n    if (!inputFile.isFile() || !inputFile.exists() || !inputFile.canRead()) {\n      throw new IllegalArgumentException(\"Exepecting an existing readable file: \"+inputFile);\n    }\n    TFCKey key = new TFCKey(indexReader, taxonomy, facetIndexingParams);\n    TotalFacetCounts tfc = TotalFacetCounts.loadFromFile(inputFile, taxonomy, facetIndexingParams);\n    cache.put(key,tfc);\n    trimCache();\n    markRecentlyUsed(key);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c2cd18c7da6f499a33f06fc89c07a463ec074c0","date":1358329431,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCountsCache#load(File,IndexReader,TaxonomyReader,FacetIndexingParams).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCountsCache#load(File,IndexReader,TaxonomyReader,FacetIndexingParams).mjava","sourceNew":"  /**\n   * Load {@link TotalFacetCounts} matching input parameters from the provided\n   * outputFile and add them into the cache for the provided indexReader,\n   * taxonomy, and facetIndexingParams. If a {@link TotalFacetCounts} for these\n   * parameters already exists in the cache, it will be replaced by the loaded\n   * one.\n   * \n   * @param inputFile\n   *          file from which to read the data\n   * @param indexReader\n   *          the documents index\n   * @param taxonomy\n   *          the taxonomy index\n   * @param facetIndexingParams\n   *          the facet indexing parameters\n   * @throws IOException\n   *           on error\n   */\n  public synchronized void load(File inputFile, IndexReader indexReader, TaxonomyReader taxonomy,\n      FacetIndexingParams facetIndexingParams) throws IOException {\n    if (!inputFile.isFile() || !inputFile.exists() || !inputFile.canRead()) {\n      throw new IllegalArgumentException(\"Exepecting an existing readable file: \"+inputFile);\n    }\n    TFCKey key = new TFCKey(indexReader, taxonomy, facetIndexingParams);\n    TotalFacetCounts tfc = TotalFacetCounts.loadFromFile(inputFile, taxonomy, facetIndexingParams);\n    cache.put(key,tfc);\n    trimCache();\n    markRecentlyUsed(key);\n  }\n\n","sourceOld":"  /**\n   * Load {@link TotalFacetCounts} matching input parameters from the provided outputFile \n   * and add them into the cache for the provided indexReader, taxonomy, and facetIndexingParams.\n   * If a {@link TotalFacetCounts} for these parameters already exists in the cache, it will be\n   * replaced by the loaded one.\n   * @param inputFile file from which to read the data \n   * @param indexReader the documents index\n   * @param taxonomy the taxonomy index\n   * @param facetIndexingParams the facet indexing parameters\n   * @throws IOException on error\n   * @see #store(File, IndexReader, TaxonomyReader, FacetIndexingParams, CategoryListCache)\n   */\n  public synchronized void load(File inputFile, IndexReader indexReader, TaxonomyReader taxonomy,\n      FacetIndexingParams facetIndexingParams) throws IOException {\n    if (!inputFile.isFile() || !inputFile.exists() || !inputFile.canRead()) {\n      throw new IllegalArgumentException(\"Exepecting an existing readable file: \"+inputFile);\n    }\n    TFCKey key = new TFCKey(indexReader, taxonomy, facetIndexingParams);\n    TotalFacetCounts tfc = TotalFacetCounts.loadFromFile(inputFile, taxonomy, facetIndexingParams);\n    cache.put(key,tfc);\n    trimCache();\n    markRecentlyUsed(key);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCountsCache#load(File,IndexReader,TaxonomyReader,FacetIndexingParams).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCountsCache#load(File,IndexReader,TaxonomyReader,FacetIndexingParams).mjava","sourceNew":"  /**\n   * Load {@link TotalFacetCounts} matching input parameters from the provided\n   * outputFile and add them into the cache for the provided indexReader,\n   * taxonomy, and facetIndexingParams. If a {@link TotalFacetCounts} for these\n   * parameters already exists in the cache, it will be replaced by the loaded\n   * one.\n   * \n   * @param inputFile\n   *          file from which to read the data\n   * @param indexReader\n   *          the documents index\n   * @param taxonomy\n   *          the taxonomy index\n   * @param facetIndexingParams\n   *          the facet indexing parameters\n   * @throws IOException\n   *           on error\n   */\n  public synchronized void load(File inputFile, IndexReader indexReader, TaxonomyReader taxonomy,\n      FacetIndexingParams facetIndexingParams) throws IOException {\n    if (!inputFile.isFile() || !inputFile.exists() || !inputFile.canRead()) {\n      throw new IllegalArgumentException(\"Exepecting an existing readable file: \"+inputFile);\n    }\n    TFCKey key = new TFCKey(indexReader, taxonomy, facetIndexingParams);\n    TotalFacetCounts tfc = TotalFacetCounts.loadFromFile(inputFile, taxonomy, facetIndexingParams);\n    cache.put(key,tfc);\n    trimCache();\n    markRecentlyUsed(key);\n  }\n\n","sourceOld":"  /**\n   * Load {@link TotalFacetCounts} matching input parameters from the provided outputFile \n   * and add them into the cache for the provided indexReader, taxonomy, and facetIndexingParams.\n   * If a {@link TotalFacetCounts} for these parameters already exists in the cache, it will be\n   * replaced by the loaded one.\n   * @param inputFile file from which to read the data \n   * @param indexReader the documents index\n   * @param taxonomy the taxonomy index\n   * @param facetIndexingParams the facet indexing parameters\n   * @throws IOException on error\n   * @see #store(File, IndexReader, TaxonomyReader, FacetIndexingParams, CategoryListCache)\n   */\n  public synchronized void load(File inputFile, IndexReader indexReader, TaxonomyReader taxonomy,\n      FacetIndexingParams facetIndexingParams) throws IOException {\n    if (!inputFile.isFile() || !inputFile.exists() || !inputFile.canRead()) {\n      throw new IllegalArgumentException(\"Exepecting an existing readable file: \"+inputFile);\n    }\n    TFCKey key = new TFCKey(indexReader, taxonomy, facetIndexingParams);\n    TotalFacetCounts tfc = TotalFacetCounts.loadFromFile(inputFile, taxonomy, facetIndexingParams);\n    cache.put(key,tfc);\n    trimCache();\n    markRecentlyUsed(key);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/complements/TotalFacetCountsCache#load(File,IndexReader,TaxonomyReader,FacetIndexingParams).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCountsCache#load(File,IndexReader,TaxonomyReader,FacetIndexingParams).mjava","sourceNew":"  /**\n   * Load {@link TotalFacetCounts} matching input parameters from the provided\n   * outputFile and add them into the cache for the provided indexReader,\n   * taxonomy, and facetIndexingParams. If a {@link TotalFacetCounts} for these\n   * parameters already exists in the cache, it will be replaced by the loaded\n   * one.\n   * \n   * @param inputFile\n   *          file from which to read the data\n   * @param indexReader\n   *          the documents index\n   * @param taxonomy\n   *          the taxonomy index\n   * @param facetIndexingParams\n   *          the facet indexing parameters\n   * @throws IOException\n   *           on error\n   */\n  public synchronized void load(File inputFile, IndexReader indexReader, TaxonomyReader taxonomy,\n      FacetIndexingParams facetIndexingParams) throws IOException {\n    if (!inputFile.isFile() || !inputFile.exists() || !inputFile.canRead()) {\n      throw new IllegalArgumentException(\"Exepecting an existing readable file: \"+inputFile);\n    }\n    TFCKey key = new TFCKey(indexReader, taxonomy, facetIndexingParams);\n    TotalFacetCounts tfc = TotalFacetCounts.loadFromFile(inputFile, taxonomy, facetIndexingParams);\n    cache.put(key,tfc);\n    trimCache();\n    markRecentlyUsed(key);\n  }\n\n","sourceOld":"  /**\n   * Load {@link TotalFacetCounts} matching input parameters from the provided\n   * outputFile and add them into the cache for the provided indexReader,\n   * taxonomy, and facetIndexingParams. If a {@link TotalFacetCounts} for these\n   * parameters already exists in the cache, it will be replaced by the loaded\n   * one.\n   * \n   * @param inputFile\n   *          file from which to read the data\n   * @param indexReader\n   *          the documents index\n   * @param taxonomy\n   *          the taxonomy index\n   * @param facetIndexingParams\n   *          the facet indexing parameters\n   * @throws IOException\n   *           on error\n   */\n  public synchronized void load(File inputFile, IndexReader indexReader, TaxonomyReader taxonomy,\n      FacetIndexingParams facetIndexingParams) throws IOException {\n    if (!inputFile.isFile() || !inputFile.exists() || !inputFile.canRead()) {\n      throw new IllegalArgumentException(\"Exepecting an existing readable file: \"+inputFile);\n    }\n    TFCKey key = new TFCKey(indexReader, taxonomy, facetIndexingParams);\n    TotalFacetCounts tfc = TotalFacetCounts.loadFromFile(inputFile, taxonomy, facetIndexingParams);\n    cache.put(key,tfc);\n    trimCache();\n    markRecentlyUsed(key);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["b89678825b68eccaf09e6ab71675fc0b0af1e099","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["c4015cd39dff8d4dec562d909f9766debac53aa6","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["607428da722dcb3e86bbd11c63de8986e6275c36","c4015cd39dff8d4dec562d909f9766debac53aa6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}