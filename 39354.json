{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/Automata#makeString(String).mjava","commits":[{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automata#makeString(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicAutomata#makeStringLight(String).mjava","sourceNew":"  /**\n   * Returns a new (deterministic) automaton that accepts the single given\n   * string.\n   */\n  public static Automaton makeString(String s) {\n    Automaton a = new Automaton();\n    int lastState = a.createState();\n    for (int i = 0, cp = 0; i < s.length(); i += Character.charCount(cp)) {\n      int state = a.createState();\n      cp = s.codePointAt(i);\n      a.addTransition(lastState, state, cp, cp);\n      lastState = state;\n    }\n\n    a.setAccept(lastState, true);\n    a.finishState();\n\n    assert a.isDeterministic();\n    assert Operations.hasDeadStates(a) == false;\n\n    return a;\n  }\n\n","sourceOld":"  /**\n   * Returns a new (deterministic) automaton that accepts the single given\n   * string.\n   */\n  public static LightAutomaton makeStringLight(String s) {\n    LightAutomaton a = new LightAutomaton();\n    int lastState = a.createState();\n    for (int i = 0, cp = 0; i < s.length(); i += Character.charCount(cp)) {\n      int state = a.createState();\n      cp = s.codePointAt(i);\n      a.addTransition(lastState, state, cp, cp);\n      lastState = state;\n    }\n\n    a.setAccept(lastState, true);\n    a.finishState();\n\n    assert a.isDeterministic();\n    assert BasicOperations.hasDeadStates(a) == false;\n\n    return a;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automata#makeString(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicAutomata#makeString(String).mjava","sourceNew":"  /**\n   * Returns a new (deterministic) automaton that accepts the single given\n   * string.\n   */\n  public static Automaton makeString(String s) {\n    Automaton a = new Automaton();\n    int lastState = a.createState();\n    for (int i = 0, cp = 0; i < s.length(); i += Character.charCount(cp)) {\n      int state = a.createState();\n      cp = s.codePointAt(i);\n      a.addTransition(lastState, state, cp, cp);\n      lastState = state;\n    }\n\n    a.setAccept(lastState, true);\n    a.finishState();\n\n    assert a.isDeterministic();\n    assert Operations.hasDeadStates(a) == false;\n\n    return a;\n  }\n\n","sourceOld":"  /**\n   * Returns a new (deterministic) automaton that accepts the single given\n   * string.\n   */\n  public static Automaton makeString(String s) {\n    Automaton a = new Automaton();\n    a.singleton = s;\n    a.deterministic = true;\n    return a;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automata#makeString(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automata#makeString(String).mjava","sourceNew":"  /**\n   * Returns a new (deterministic) automaton that accepts the single given\n   * string.\n   */\n  public static Automaton makeString(String s) {\n    Automaton a = new Automaton();\n    int lastState = a.createState();\n    for (int i = 0, cp = 0; i < s.length(); i += Character.charCount(cp)) {\n      int state = a.createState();\n      cp = s.codePointAt(i);\n      a.addTransition(lastState, state, cp);\n      lastState = state;\n    }\n\n    a.setAccept(lastState, true);\n    a.finishState();\n\n    assert a.isDeterministic();\n    assert Operations.hasDeadStates(a) == false;\n\n    return a;\n  }\n\n","sourceOld":"  /**\n   * Returns a new (deterministic) automaton that accepts the single given\n   * string.\n   */\n  public static Automaton makeString(String s) {\n    Automaton a = new Automaton();\n    int lastState = a.createState();\n    for (int i = 0, cp = 0; i < s.length(); i += Character.charCount(cp)) {\n      int state = a.createState();\n      cp = s.codePointAt(i);\n      a.addTransition(lastState, state, cp, cp);\n      lastState = state;\n    }\n\n    a.setAccept(lastState, true);\n    a.finishState();\n\n    assert a.isDeterministic();\n    assert Operations.hasDeadStates(a) == false;\n\n    return a;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automata#makeString(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automata#makeString(String).mjava","sourceNew":"  /**\n   * Returns a new (deterministic) automaton that accepts the single given\n   * string.\n   */\n  public static Automaton makeString(String s) {\n    Automaton a = new Automaton();\n    int lastState = a.createState();\n    for (int i = 0, cp = 0; i < s.length(); i += Character.charCount(cp)) {\n      int state = a.createState();\n      cp = s.codePointAt(i);\n      a.addTransition(lastState, state, cp);\n      lastState = state;\n    }\n\n    a.setAccept(lastState, true);\n    a.finishState();\n\n    assert a.isDeterministic();\n    assert Operations.hasDeadStates(a) == false;\n\n    return a;\n  }\n\n","sourceOld":"  /**\n   * Returns a new (deterministic) automaton that accepts the single given\n   * string.\n   */\n  public static Automaton makeString(String s) {\n    Automaton a = new Automaton();\n    int lastState = a.createState();\n    for (int i = 0, cp = 0; i < s.length(); i += Character.charCount(cp)) {\n      int state = a.createState();\n      cp = s.codePointAt(i);\n      a.addTransition(lastState, state, cp, cp);\n      lastState = state;\n    }\n\n    a.setAccept(lastState, true);\n    a.finishState();\n\n    assert a.isDeterministic();\n    assert Operations.hasDeadStates(a) == false;\n\n    return a;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d2638f781be724518ff6c2263d14a48cf6e68017":["5c84485629d80d203608e8975a1139de9933cc38","3e8715d826e588419327562287d5d6a8040d63d6"],"3e8715d826e588419327562287d5d6a8040d63d6":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e8715d826e588419327562287d5d6a8040d63d6"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","5c84485629d80d203608e8975a1139de9933cc38"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"5c84485629d80d203608e8975a1139de9933cc38":["d2638f781be724518ff6c2263d14a48cf6e68017","3e8715d826e588419327562287d5d6a8040d63d6"],"3e8715d826e588419327562287d5d6a8040d63d6":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}