{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#checkHits(Point,double,int,int[]).mjava","commits":[{"id":"d960f1bec0365fa24a5d945b09511e4448ff2c6c","date":1340258737,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#checkHits(Point,double,int,int[]).mjava","pathOld":"/dev/null","sourceNew":"  //TODO can we use super.runTestQueries() ?\n  private void checkHits(Point pt, double dist, int assertNumFound, int[] assertIds) {\n    Shape shape = ctx.makeCircle(pt,dist);\n    SpatialArgs args = new SpatialArgs(SpatialOperation.Intersects,shape);\n    args.setDistPrecision(0.0);\n    SearchResults got = executeQuery(strategy.makeQuery(args, fieldInfo), 100);\n    assertEquals(\"\"+shape,assertNumFound,got.numFound);\n    if (assertIds != null) {\n      Set<Integer> gotIds = new HashSet<Integer>();\n      for (SearchResult result : got.results) {\n        gotIds.add(Integer.valueOf(result.document.get(\"id\")));\n      }\n      for (int assertId : assertIds) {\n        assertTrue(\"has \"+assertId,gotIds.contains(assertId));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0415a016b37e58a017fed0a91234f733ab359971","date":1341458183,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#checkHits(Point,double,int,int[]).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#checkHits(Point,double,int,int[]).mjava","sourceNew":"  //TODO can we use super.runTestQueries() ?\n  private void checkHits(Point pt, double dist, int assertNumFound, int[] assertIds) {\n    Shape shape = ctx.makeCircle(pt,dist);\n    SpatialArgs args = new SpatialArgs(SpatialOperation.Intersects,shape);\n    args.setDistPrecision(0.0);\n    SearchResults got = executeQuery(strategy.makeQuery(args), 100);\n    assertEquals(\"\"+shape,assertNumFound,got.numFound);\n    if (assertIds != null) {\n      Set<Integer> gotIds = new HashSet<Integer>();\n      for (SearchResult result : got.results) {\n        gotIds.add(Integer.valueOf(result.document.get(\"id\")));\n      }\n      for (int assertId : assertIds) {\n        assertTrue(\"has \"+assertId,gotIds.contains(assertId));\n      }\n    }\n  }\n\n","sourceOld":"  //TODO can we use super.runTestQueries() ?\n  private void checkHits(Point pt, double dist, int assertNumFound, int[] assertIds) {\n    Shape shape = ctx.makeCircle(pt,dist);\n    SpatialArgs args = new SpatialArgs(SpatialOperation.Intersects,shape);\n    args.setDistPrecision(0.0);\n    SearchResults got = executeQuery(strategy.makeQuery(args, fieldInfo), 100);\n    assertEquals(\"\"+shape,assertNumFound,got.numFound);\n    if (assertIds != null) {\n      Set<Integer> gotIds = new HashSet<Integer>();\n      for (SearchResult result : got.results) {\n        gotIds.add(Integer.valueOf(result.document.get(\"id\")));\n      }\n      for (int assertId : assertIds) {\n        assertTrue(\"has \"+assertId,gotIds.contains(assertId));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#checkHits(Point,double,int,int[]).mjava","pathOld":"/dev/null","sourceNew":"  //TODO can we use super.runTestQueries() ?\n  private void checkHits(Point pt, double dist, int assertNumFound, int[] assertIds) {\n    Shape shape = ctx.makeCircle(pt,dist);\n    SpatialArgs args = new SpatialArgs(SpatialOperation.Intersects,shape);\n    args.setDistPrecision(0.0);\n    SearchResults got = executeQuery(strategy.makeQuery(args), 100);\n    assertEquals(\"\"+shape,assertNumFound,got.numFound);\n    if (assertIds != null) {\n      Set<Integer> gotIds = new HashSet<Integer>();\n      for (SearchResult result : got.results) {\n        gotIds.add(Integer.valueOf(result.document.get(\"id\")));\n      }\n      for (int assertId : assertIds) {\n        assertTrue(\"has \"+assertId,gotIds.contains(assertId));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85ac3534293008a0b7704f8ba54592d51fd29fa5","date":1346435585,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#checkHits(SpatialArgs,int,int[]).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#checkHits(Point,double,int,int[]).mjava","sourceNew":"  private void checkHits(SpatialArgs args, int assertNumFound, int[] assertIds) {\n    SearchResults got = executeQuery(strategy.makeQuery(args), 100);\n    assertEquals(\"\" + args, assertNumFound, got.numFound);\n    if (assertIds != null) {\n      Set<Integer> gotIds = new HashSet<Integer>();\n      for (SearchResult result : got.results) {\n        gotIds.add(Integer.valueOf(result.document.get(\"id\")));\n      }\n      for (int assertId : assertIds) {\n        assertTrue(\"has \"+assertId,gotIds.contains(assertId));\n      }\n    }\n  }\n\n","sourceOld":"  //TODO can we use super.runTestQueries() ?\n  private void checkHits(Point pt, double dist, int assertNumFound, int[] assertIds) {\n    Shape shape = ctx.makeCircle(pt,dist);\n    SpatialArgs args = new SpatialArgs(SpatialOperation.Intersects,shape);\n    args.setDistPrecision(0.0);\n    SearchResults got = executeQuery(strategy.makeQuery(args), 100);\n    assertEquals(\"\"+shape,assertNumFound,got.numFound);\n    if (assertIds != null) {\n      Set<Integer> gotIds = new HashSet<Integer>();\n      for (SearchResult result : got.results) {\n        gotIds.add(Integer.valueOf(result.document.get(\"id\")));\n      }\n      for (int assertId : assertIds) {\n        assertTrue(\"has \"+assertId,gotIds.contains(assertId));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d1f90e969803cc84174589b5e4a39b7935fecd","date":1346584861,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#checkHits(SpatialArgs,int,int[]).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/TestRecursivePrefixTreeStrategy#checkHits(Point,double,int,int[]).mjava","sourceNew":"  private void checkHits(SpatialArgs args, int assertNumFound, int[] assertIds) {\n    SearchResults got = executeQuery(strategy.makeQuery(args), 100);\n    assertEquals(\"\" + args, assertNumFound, got.numFound);\n    if (assertIds != null) {\n      Set<Integer> gotIds = new HashSet<Integer>();\n      for (SearchResult result : got.results) {\n        gotIds.add(Integer.valueOf(result.document.get(\"id\")));\n      }\n      for (int assertId : assertIds) {\n        assertTrue(\"has \"+assertId,gotIds.contains(assertId));\n      }\n    }\n  }\n\n","sourceOld":"  //TODO can we use super.runTestQueries() ?\n  private void checkHits(Point pt, double dist, int assertNumFound, int[] assertIds) {\n    Shape shape = ctx.makeCircle(pt,dist);\n    SpatialArgs args = new SpatialArgs(SpatialOperation.Intersects,shape);\n    args.setDistPrecision(0.0);\n    SearchResults got = executeQuery(strategy.makeQuery(args), 100);\n    assertEquals(\"\"+shape,assertNumFound,got.numFound);\n    if (assertIds != null) {\n      Set<Integer> gotIds = new HashSet<Integer>();\n      for (SearchResult result : got.results) {\n        gotIds.add(Integer.valueOf(result.document.get(\"id\")));\n      }\n      for (int assertId : assertIds) {\n        assertTrue(\"has \"+assertId,gotIds.contains(assertId));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0415a016b37e58a017fed0a91234f733ab359971":["d960f1bec0365fa24a5d945b09511e4448ff2c6c"],"d0d1f90e969803cc84174589b5e4a39b7935fecd":["0415a016b37e58a017fed0a91234f733ab359971","85ac3534293008a0b7704f8ba54592d51fd29fa5"],"85ac3534293008a0b7704f8ba54592d51fd29fa5":["0415a016b37e58a017fed0a91234f733ab359971"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0415a016b37e58a017fed0a91234f733ab359971"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d960f1bec0365fa24a5d945b09511e4448ff2c6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85ac3534293008a0b7704f8ba54592d51fd29fa5"]},"commit2Childs":{"0415a016b37e58a017fed0a91234f733ab359971":["d0d1f90e969803cc84174589b5e4a39b7935fecd","85ac3534293008a0b7704f8ba54592d51fd29fa5","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"d0d1f90e969803cc84174589b5e4a39b7935fecd":[],"85ac3534293008a0b7704f8ba54592d51fd29fa5":["d0d1f90e969803cc84174589b5e4a39b7935fecd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fe33227f6805edab2036cbb80645cc4e2d1fa424","d960f1bec0365fa24a5d945b09511e4448ff2c6c"],"d960f1bec0365fa24a5d945b09511e4448ff2c6c":["0415a016b37e58a017fed0a91234f733ab359971"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d0d1f90e969803cc84174589b5e4a39b7935fecd","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}