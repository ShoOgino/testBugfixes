{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testRecip().mjava","commits":[{"id":"c6c7d0508ab2db8345774ca3bfe2075e8856d531","date":1540906944,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testRecip().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRecip() throws Exception {\n    String cexpr = \"let(echo=true, a=array(10, 20, 30), b=recip(a), c=recip(30.5))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(), 1);\n    Tuple tuple = tuples.get(0);\n    List<Number> logs = (List<Number>)tuple.get(\"b\");\n    assertEquals(logs.size(), 3);\n    assertEquals(logs.get(0).doubleValue(), .1, 0.0);\n    assertEquals(logs.get(1).doubleValue(), .05, 0.0);\n    assertEquals(logs.get(2).doubleValue(), 0.03333333333333333, 0.0);\n\n    Number log = (Number)tuple.get(\"c\");\n    assertEquals(log.doubleValue(), 0.03278688524590164, 0.0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testRecip().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testRecip().mjava","sourceNew":"  @Test\n  public void testRecip() throws Exception {\n    String cexpr = \"let(echo=true, a=array(10, 20, 30), b=recip(a), c=recip(30.5))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(), 1);\n    Tuple tuple = tuples.get(0);\n    @SuppressWarnings({\"unchecked\"})\n    List<Number> logs = (List<Number>)tuple.get(\"b\");\n    assertEquals(logs.size(), 3);\n    assertEquals(logs.get(0).doubleValue(), .1, 0.0);\n    assertEquals(logs.get(1).doubleValue(), .05, 0.0);\n    assertEquals(logs.get(2).doubleValue(), 0.03333333333333333, 0.0);\n\n    Number log = (Number)tuple.get(\"c\");\n    assertEquals(log.doubleValue(), 0.03278688524590164, 0.0);\n  }\n\n","sourceOld":"  @Test\n  public void testRecip() throws Exception {\n    String cexpr = \"let(echo=true, a=array(10, 20, 30), b=recip(a), c=recip(30.5))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(), 1);\n    Tuple tuple = tuples.get(0);\n    List<Number> logs = (List<Number>)tuple.get(\"b\");\n    assertEquals(logs.size(), 3);\n    assertEquals(logs.get(0).doubleValue(), .1, 0.0);\n    assertEquals(logs.get(1).doubleValue(), .05, 0.0);\n    assertEquals(logs.get(2).doubleValue(), 0.03333333333333333, 0.0);\n\n    Number log = (Number)tuple.get(\"c\");\n    assertEquals(log.doubleValue(), 0.03278688524590164, 0.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["c6c7d0508ab2db8345774ca3bfe2075e8856d531"],"c6c7d0508ab2db8345774ca3bfe2075e8856d531":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c6c7d0508ab2db8345774ca3bfe2075e8856d531":["9ba1b632c041956c93c41aa1143d16a567014891"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c6c7d0508ab2db8345774ca3bfe2075e8856d531"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}