{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/request/schema/SchemaRequest.Update#getContentWriter(String).mjava","commits":[{"id":"060a4475f4072d4ea46bb4ec479dbaf1f207901a","date":1528389530,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/schema/SchemaRequest.Update#getContentWriter(String).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public RequestWriter.ContentWriter getContentWriter(String expectedType) {\n      return new RequestWriter.ContentWriter() {\n        @Override\n        public void write(OutputStream os) throws IOException {\n          //TODO :  find a way to do streaming write\n          CharArr json = new CharArr();\n          new SchemaRequestJSONWriter(json).write(getRequestParameters());\n          os.write(json.toString().getBytes(StandardCharsets.UTF_8));\n        }\n\n        @Override\n        public String getContentType() {\n          return CommonParams.JSON_MIME;\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1a22c4da9c47def40b5b95474f637bb7b8da392","date":1528603500,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/schema/SchemaRequest.Update#getContentWriter(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/schema/SchemaRequest.Update#getContentWriter(String).mjava","sourceNew":"    @Override\n    public RequestWriter.ContentWriter getContentWriter(String expectedType) {\n      return new RequestWriter.ContentWriter() {\n        @Override\n        public void write(OutputStream os) throws IOException {\n          Utils.toJSON(getRequestParameters(),\n              os, false);\n        }\n\n        @Override\n        public String getContentType() {\n          return CommonParams.JSON_MIME;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public RequestWriter.ContentWriter getContentWriter(String expectedType) {\n      return new RequestWriter.ContentWriter() {\n        @Override\n        public void write(OutputStream os) throws IOException {\n          //TODO :  find a way to do streaming write\n          CharArr json = new CharArr();\n          new SchemaRequestJSONWriter(json).write(getRequestParameters());\n          os.write(json.toString().getBytes(StandardCharsets.UTF_8));\n        }\n\n        @Override\n        public String getContentType() {\n          return CommonParams.JSON_MIME;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":["042da0877b8e28fd372a8ed80d11c4506a466ad7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/schema/SchemaRequest.Update#getContentWriter(String).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public RequestWriter.ContentWriter getContentWriter(String expectedType) {\n      return new RequestWriter.ContentWriter() {\n        @Override\n        public void write(OutputStream os) throws IOException {\n          Utils.toJSON(getRequestParameters(),\n              os, false);\n        }\n\n        @Override\n        public String getContentType() {\n          return CommonParams.JSON_MIME;\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/schema/SchemaRequest.Update#getContentWriter(String).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public RequestWriter.ContentWriter getContentWriter(String expectedType) {\n      return new RequestWriter.ContentWriter() {\n        @Override\n        public void write(OutputStream os) throws IOException {\n          Utils.toJSON(getRequestParameters(),\n              os, false);\n        }\n\n        @Override\n        public String getContentType() {\n          return CommonParams.JSON_MIME;\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"042da0877b8e28fd372a8ed80d11c4506a466ad7","date":1534516670,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/schema/SchemaRequest.Update#getContentWriter(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/schema/SchemaRequest.Update#getContentWriter(String).mjava","sourceNew":"    @Override\n    public RequestWriter.ContentWriter getContentWriter(String expectedType) {\n      return new RequestWriter.ContentWriter() {\n        @Override\n        public void write(OutputStream os) throws IOException {\n          Utils.writeJson(getRequestParameters(),\n              os, false);\n        }\n\n        @Override\n        public String getContentType() {\n          return CommonParams.JSON_MIME;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public RequestWriter.ContentWriter getContentWriter(String expectedType) {\n      return new RequestWriter.ContentWriter() {\n        @Override\n        public void write(OutputStream os) throws IOException {\n          Utils.toJSON(getRequestParameters(),\n              os, false);\n        }\n\n        @Override\n        public String getContentType() {\n          return CommonParams.JSON_MIME;\n        }\n      };\n    }\n\n","bugFix":["c1a22c4da9c47def40b5b95474f637bb7b8da392"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"060a4475f4072d4ea46bb4ec479dbaf1f207901a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c1a22c4da9c47def40b5b95474f637bb7b8da392":["060a4475f4072d4ea46bb4ec479dbaf1f207901a"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c1a22c4da9c47def40b5b95474f637bb7b8da392"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["042da0877b8e28fd372a8ed80d11c4506a466ad7"],"042da0877b8e28fd372a8ed80d11c4506a466ad7":["c1a22c4da9c47def40b5b95474f637bb7b8da392"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c1a22c4da9c47def40b5b95474f637bb7b8da392"]},"commit2Childs":{"060a4475f4072d4ea46bb4ec479dbaf1f207901a":["c1a22c4da9c47def40b5b95474f637bb7b8da392"],"c1a22c4da9c47def40b5b95474f637bb7b8da392":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","042da0877b8e28fd372a8ed80d11c4506a466ad7","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["060a4475f4072d4ea46bb4ec479dbaf1f207901a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"042da0877b8e28fd372a8ed80d11c4506a466ad7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}