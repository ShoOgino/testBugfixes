{"path":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum,boolean).mjava","commits":[{"id":"872cff1d3a554e0cd64014cd97f88d3002b0f491","date":1323024658,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum).mjava","sourceNew":"  @Override\n  public DocsEnum docs(FieldInfo field, BlockTermState _termState, Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n    if (needsFreqs && field.indexOptions == IndexOptions.DOCS_ONLY) {\n      return null;\n    }\n    PulsingTermState termState = (PulsingTermState) _termState;\n    if (termState.postingsSize != -1) {\n      PulsingDocsEnum postings;\n      if (reuse instanceof PulsingDocsEnum) {\n        postings = (PulsingDocsEnum) reuse;\n        if (!postings.canReuse(field)) {\n          postings = new PulsingDocsEnum(field);\n        }\n      } else {\n        // the 'reuse' is actually the wrapped enum\n        PulsingDocsEnum previous = (PulsingDocsEnum) getOther(reuse);\n        if (previous != null && previous.canReuse(field)) {\n          postings = previous;\n        } else {\n          postings = new PulsingDocsEnum(field);\n        }\n      }\n      if (reuse != postings) {\n        setOther(postings, reuse); // postings.other = reuse\n      }\n      return postings.reset(liveDocs, termState);\n    } else {\n      if (reuse instanceof PulsingDocsEnum) {\n        DocsEnum wrapped = wrappedPostingsReader.docs(field, termState.wrappedTermState, liveDocs, getOther(reuse), needsFreqs);\n        setOther(wrapped, reuse); // wrapped.other = reuse\n        return wrapped;\n      } else {\n        return wrappedPostingsReader.docs(field, termState.wrappedTermState, liveDocs, reuse, needsFreqs);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsEnum docs(FieldInfo field, BlockTermState _termState, Bits liveDocs, DocsEnum reuse) throws IOException {\n    PulsingTermState termState = (PulsingTermState) _termState;\n    if (termState.postingsSize != -1) {\n      PulsingDocsEnum postings;\n      if (reuse instanceof PulsingDocsEnum) {\n        postings = (PulsingDocsEnum) reuse;\n        if (!postings.canReuse(field)) {\n          postings = new PulsingDocsEnum(field);\n        }\n      } else {\n        // the 'reuse' is actually the wrapped enum\n        PulsingDocsEnum previous = (PulsingDocsEnum) getOther(reuse);\n        if (previous != null && previous.canReuse(field)) {\n          postings = previous;\n        } else {\n          postings = new PulsingDocsEnum(field);\n        }\n      }\n      if (reuse != postings) {\n        setOther(postings, reuse); // postings.other = reuse\n      }\n      return postings.reset(liveDocs, termState);\n    } else {\n      if (reuse instanceof PulsingDocsEnum) {\n        DocsEnum wrapped = wrappedPostingsReader.docs(field, termState.wrappedTermState, liveDocs, getOther(reuse));\n        setOther(wrapped, reuse); // wrapped.other = reuse\n        return wrapped;\n      } else {\n        return wrappedPostingsReader.docs(field, termState.wrappedTermState, liveDocs, reuse);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b65b350ca9588f9fc76ce7d6804160d06c45ff42","date":1323026297,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum).mjava","sourceNew":"  @Override\n  public DocsEnum docs(FieldInfo field, BlockTermState _termState, Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n    if (needsFreqs && field.indexOptions == IndexOptions.DOCS_ONLY) {\n      return null;\n    }\n    PulsingTermState termState = (PulsingTermState) _termState;\n    if (termState.postingsSize != -1) {\n      PulsingDocsEnum postings;\n      if (reuse instanceof PulsingDocsEnum) {\n        postings = (PulsingDocsEnum) reuse;\n        if (!postings.canReuse(field)) {\n          postings = new PulsingDocsEnum(field);\n        }\n      } else {\n        // the 'reuse' is actually the wrapped enum\n        PulsingDocsEnum previous = (PulsingDocsEnum) getOther(reuse);\n        if (previous != null && previous.canReuse(field)) {\n          postings = previous;\n        } else {\n          postings = new PulsingDocsEnum(field);\n        }\n      }\n      if (reuse != postings) {\n        setOther(postings, reuse); // postings.other = reuse\n      }\n      return postings.reset(liveDocs, termState);\n    } else {\n      if (reuse instanceof PulsingDocsEnum) {\n        DocsEnum wrapped = wrappedPostingsReader.docs(field, termState.wrappedTermState, liveDocs, getOther(reuse), needsFreqs);\n        setOther(wrapped, reuse); // wrapped.other = reuse\n        return wrapped;\n      } else {\n        return wrappedPostingsReader.docs(field, termState.wrappedTermState, liveDocs, reuse, needsFreqs);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsEnum docs(FieldInfo field, BlockTermState _termState, Bits liveDocs, DocsEnum reuse) throws IOException {\n    PulsingTermState termState = (PulsingTermState) _termState;\n    if (termState.postingsSize != -1) {\n      PulsingDocsEnum postings;\n      if (reuse instanceof PulsingDocsEnum) {\n        postings = (PulsingDocsEnum) reuse;\n        if (!postings.canReuse(field)) {\n          postings = new PulsingDocsEnum(field);\n        }\n      } else {\n        // the 'reuse' is actually the wrapped enum\n        PulsingDocsEnum previous = (PulsingDocsEnum) getOther(reuse);\n        if (previous != null && previous.canReuse(field)) {\n          postings = previous;\n        } else {\n          postings = new PulsingDocsEnum(field);\n        }\n      }\n      if (reuse != postings) {\n        setOther(postings, reuse); // postings.other = reuse\n      }\n      return postings.reset(liveDocs, termState);\n    } else {\n      if (reuse instanceof PulsingDocsEnum) {\n        DocsEnum wrapped = wrappedPostingsReader.docs(field, termState.wrappedTermState, liveDocs, getOther(reuse));\n        setOther(wrapped, reuse); // wrapped.other = reuse\n        return wrapped;\n      } else {\n        return wrappedPostingsReader.docs(field, termState.wrappedTermState, liveDocs, reuse);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum,boolean).mjava","sourceNew":"  @Override\n  public DocsEnum docs(FieldInfo field, BlockTermState _termState, Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n    if (needsFreqs && field.indexOptions == IndexOptions.DOCS_ONLY) {\n      return null;\n    }\n    PulsingTermState termState = (PulsingTermState) _termState;\n    if (termState.postingsSize != -1) {\n      PulsingDocsEnum postings;\n      if (reuse instanceof PulsingDocsEnum) {\n        postings = (PulsingDocsEnum) reuse;\n        if (!postings.canReuse(field)) {\n          postings = new PulsingDocsEnum(field);\n        }\n      } else {\n        // the 'reuse' is actually the wrapped enum\n        PulsingDocsEnum previous = (PulsingDocsEnum) getOther(reuse);\n        if (previous != null && previous.canReuse(field)) {\n          postings = previous;\n        } else {\n          postings = new PulsingDocsEnum(field);\n        }\n      }\n      if (reuse != postings) {\n        setOther(postings, reuse); // postings.other = reuse\n      }\n      return postings.reset(liveDocs, termState);\n    } else {\n      if (reuse instanceof PulsingDocsEnum) {\n        DocsEnum wrapped = wrappedPostingsReader.docs(field, termState.wrappedTermState, liveDocs, getOther(reuse), needsFreqs);\n        setOther(wrapped, reuse); // wrapped.other = reuse\n        return wrapped;\n      } else {\n        return wrappedPostingsReader.docs(field, termState.wrappedTermState, liveDocs, reuse, needsFreqs);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsEnum docs(FieldInfo field, BlockTermState _termState, Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n    if (needsFreqs && field.indexOptions == IndexOptions.DOCS_ONLY) {\n      return null;\n    }\n    PulsingTermState termState = (PulsingTermState) _termState;\n    if (termState.postingsSize != -1) {\n      PulsingDocsEnum postings;\n      if (reuse instanceof PulsingDocsEnum) {\n        postings = (PulsingDocsEnum) reuse;\n        if (!postings.canReuse(field)) {\n          postings = new PulsingDocsEnum(field);\n        }\n      } else {\n        // the 'reuse' is actually the wrapped enum\n        PulsingDocsEnum previous = (PulsingDocsEnum) getOther(reuse);\n        if (previous != null && previous.canReuse(field)) {\n          postings = previous;\n        } else {\n          postings = new PulsingDocsEnum(field);\n        }\n      }\n      if (reuse != postings) {\n        setOther(postings, reuse); // postings.other = reuse\n      }\n      return postings.reset(liveDocs, termState);\n    } else {\n      if (reuse instanceof PulsingDocsEnum) {\n        DocsEnum wrapped = wrappedPostingsReader.docs(field, termState.wrappedTermState, liveDocs, getOther(reuse), needsFreqs);\n        setOther(wrapped, reuse); // wrapped.other = reuse\n        return wrapped;\n      } else {\n        return wrappedPostingsReader.docs(field, termState.wrappedTermState, liveDocs, reuse, needsFreqs);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["872cff1d3a554e0cd64014cd97f88d3002b0f491"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"b65b350ca9588f9fc76ce7d6804160d06c45ff42":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}