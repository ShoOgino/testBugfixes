{"path":"lucene/src/java/org/apache/lucene/index/FieldInfos#addOrUpdateInternal(String,int,boolean,boolean,boolean,boolean,IndexOptions,DocValues.Type).mjava","commits":[{"id":"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06","date":1326148180,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#addOrUpdateInternal(String,int,boolean,boolean,boolean,boolean,IndexOptions,DocValues.Type).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#addOrUpdateInternal(String,int,boolean,boolean,boolean,boolean,boolean,boolean,IndexOptions,DocValues.Type).mjava","sourceNew":"  synchronized private FieldInfo addOrUpdateInternal(String name, int preferredFieldNumber, boolean isIndexed,\n      boolean storeTermVector,\n      boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues) {\n    if (globalFieldNumbers == null) {\n      throw new IllegalStateException(\"FieldInfos are read-only, create a new instance with a global field map to make modifications to FieldInfos\");\n    }\n    FieldInfo fi = fieldInfo(name);\n    if (fi == null) {\n      final int fieldNumber = nextFieldNumber(name, preferredFieldNumber);\n      fi = addInternal(name, fieldNumber, isIndexed, storeTermVector, omitNorms, storePayloads, indexOptions, docValues);\n    } else {\n      fi.update(isIndexed, storeTermVector, omitNorms, storePayloads, indexOptions);\n      fi.setDocValuesType(docValues);\n    }\n    version++;\n    return fi;\n  }\n\n","sourceOld":"  synchronized private FieldInfo addOrUpdateInternal(String name, int preferredFieldNumber, boolean isIndexed,\n      boolean storeTermVector, boolean storePositionWithTermVector, boolean storeOffsetWithTermVector,\n      boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues) {\n    if (globalFieldNumbers == null) {\n      throw new IllegalStateException(\"FieldInfos are read-only, create a new instance with a global field map to make modifications to FieldInfos\");\n    }\n    FieldInfo fi = fieldInfo(name);\n    if (fi == null) {\n      final int fieldNumber = nextFieldNumber(name, preferredFieldNumber);\n      fi = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, indexOptions, docValues);\n    } else {\n      fi.update(isIndexed, storeTermVector, storePositionWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, indexOptions);\n      fi.setDocValuesType(docValues);\n    }\n    version++;\n    return fi;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e8d5a6ffbfa3405d234a87c833741eabed98d13","date":1326725835,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#addOrUpdateInternal(String,int,boolean,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#addOrUpdateInternal(String,int,boolean,boolean,boolean,boolean,IndexOptions,DocValues.Type).mjava","sourceNew":"  synchronized private FieldInfo addOrUpdateInternal(String name, int preferredFieldNumber, boolean isIndexed,\n      boolean storeTermVector,\n      boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues, DocValues.Type normType) {\n    if (globalFieldNumbers == null) {\n      throw new IllegalStateException(\"FieldInfos are read-only, create a new instance with a global field map to make modifications to FieldInfos\");\n    }\n    FieldInfo fi = fieldInfo(name);\n    if (fi == null) {\n      final int fieldNumber = nextFieldNumber(name, preferredFieldNumber);\n      fi = addInternal(name, fieldNumber, isIndexed, storeTermVector, omitNorms, storePayloads, indexOptions, docValues, normType);\n    } else {\n      fi.update(isIndexed, storeTermVector, omitNorms, storePayloads, indexOptions);\n      if (docValues != null) {\n        fi.setDocValuesType(docValues, true);\n      }\n      if (normType != null) {\n        fi.setNormValueType(normType, true);\n      }\n    }\n    version++;\n    return fi;\n  }\n\n","sourceOld":"  synchronized private FieldInfo addOrUpdateInternal(String name, int preferredFieldNumber, boolean isIndexed,\n      boolean storeTermVector,\n      boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues) {\n    if (globalFieldNumbers == null) {\n      throw new IllegalStateException(\"FieldInfos are read-only, create a new instance with a global field map to make modifications to FieldInfos\");\n    }\n    FieldInfo fi = fieldInfo(name);\n    if (fi == null) {\n      final int fieldNumber = nextFieldNumber(name, preferredFieldNumber);\n      fi = addInternal(name, fieldNumber, isIndexed, storeTermVector, omitNorms, storePayloads, indexOptions, docValues);\n    } else {\n      fi.update(isIndexed, storeTermVector, omitNorms, storePayloads, indexOptions);\n      fi.setDocValuesType(docValues);\n    }\n    version++;\n    return fi;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9e8d5a6ffbfa3405d234a87c833741eabed98d13":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"]},"commit2Childs":{"9e8d5a6ffbfa3405d234a87c833741eabed98d13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}