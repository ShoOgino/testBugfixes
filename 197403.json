{"path":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String,String).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,int,int,int,SolrServer,String,String).mjava","sourceNew":"  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, int numShards, int replicationFactor, int maxShardsPerNode, SolrClient client, String createNodeSetStr, String configName) throws SolrServerException, IOException {\n\n    return createCollection(collectionInfos, collectionName,\n        ZkNodeProps.makeMap(\n        NUM_SLICES, numShards,\n        REPLICATION_FACTOR, replicationFactor,\n        CREATE_NODE_SET, createNodeSetStr,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode),\n        client, configName);\n  }\n\n","sourceOld":"  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, int numShards, int replicationFactor, int maxShardsPerNode, SolrServer client, String createNodeSetStr, String configName) throws SolrServerException, IOException {\n\n    return createCollection(collectionInfos, collectionName,\n        ZkNodeProps.makeMap(\n        NUM_SLICES, numShards,\n        REPLICATION_FACTOR, replicationFactor,\n        CREATE_NODE_SET, createNodeSetStr,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode),\n        client, configName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String,String).mjava","sourceNew":"  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, int numShards, int replicationFactor, int maxShardsPerNode, SolrClient client, String createNodeSetStr, String configName) throws SolrServerException, IOException {\n\n    return createCollection(collectionInfos, collectionName,\n        ZkNodeProps.makeMap(\n        NUM_SLICES, numShards,\n        ZkStateReader.REPLICATION_FACTOR, replicationFactor,\n        CREATE_NODE_SET, createNodeSetStr,\n        ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode),\n        client, configName);\n  }\n\n","sourceOld":"  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, int numShards, int replicationFactor, int maxShardsPerNode, SolrClient client, String createNodeSetStr, String configName) throws SolrServerException, IOException {\n\n    return createCollection(collectionInfos, collectionName,\n        ZkNodeProps.makeMap(\n        NUM_SLICES, numShards,\n        REPLICATION_FACTOR, replicationFactor,\n        CREATE_NODE_SET, createNodeSetStr,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode),\n        client, configName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String,String).mjava","sourceNew":"  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, int numShards, int replicationFactor, int maxShardsPerNode, SolrClient client, String createNodeSetStr, String configName) throws SolrServerException, IOException {\n\n    return createCollection(collectionInfos, collectionName,\n        Utils.makeMap(\n        NUM_SLICES, numShards,\n        ZkStateReader.REPLICATION_FACTOR, replicationFactor,\n        CREATE_NODE_SET, createNodeSetStr,\n        ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode),\n        client, configName);\n  }\n\n","sourceOld":"  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, int numShards, int replicationFactor, int maxShardsPerNode, SolrClient client, String createNodeSetStr, String configName) throws SolrServerException, IOException {\n\n    return createCollection(collectionInfos, collectionName,\n        ZkNodeProps.makeMap(\n        NUM_SLICES, numShards,\n        ZkStateReader.REPLICATION_FACTOR, replicationFactor,\n        CREATE_NODE_SET, createNodeSetStr,\n        ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode),\n        client, configName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"be320990bdc77e643388fa801e75017f19289c42","date":1489477067,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String,String).mjava","sourceNew":"  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, int numShards, int replicationFactor, int maxShardsPerNode, SolrClient client, String createNodeSetStr, String configName) throws SolrServerException, IOException {\n\n    return createCollection(collectionInfos, collectionName,\n        Utils.makeMap(\n        NUM_SLICES, numShards,\n        ZkStateReader.REPLICATION_FACTOR, replicationFactor,\n        CREATE_NODE_SET, createNodeSetStr,\n        ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode,\n        ZkStateReader.REALTIME_REPLICAS, getRealtimeReplicas()),\n        client, configName);\n  }\n\n","sourceOld":"  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, int numShards, int replicationFactor, int maxShardsPerNode, SolrClient client, String createNodeSetStr, String configName) throws SolrServerException, IOException {\n\n    return createCollection(collectionInfos, collectionName,\n        Utils.makeMap(\n        NUM_SLICES, numShards,\n        ZkStateReader.REPLICATION_FACTOR, replicationFactor,\n        CREATE_NODE_SET, createNodeSetStr,\n        ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode),\n        client, configName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f996f8177b9204bdc92f7164460c6cefad9ac99a","date":1489482690,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String,String).mjava","sourceNew":"  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, int numShards, int replicationFactor, int maxShardsPerNode, SolrClient client, String createNodeSetStr, String configName) throws SolrServerException, IOException {\n\n    return createCollection(collectionInfos, collectionName,\n        Utils.makeMap(\n        NUM_SLICES, numShards,\n        ZkStateReader.REPLICATION_FACTOR, replicationFactor,\n        CREATE_NODE_SET, createNodeSetStr,\n        ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode,\n        ZkStateReader.REALTIME_REPLICAS, getRealtimeReplicas()),\n        client, configName);\n  }\n\n","sourceOld":"  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, int numShards, int replicationFactor, int maxShardsPerNode, SolrClient client, String createNodeSetStr, String configName) throws SolrServerException, IOException {\n\n    return createCollection(collectionInfos, collectionName,\n        Utils.makeMap(\n        NUM_SLICES, numShards,\n        ZkStateReader.REPLICATION_FACTOR, replicationFactor,\n        CREATE_NODE_SET, createNodeSetStr,\n        ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode),\n        client, configName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String,String).mjava","sourceNew":"  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, int numShards, int replicationFactor, int maxShardsPerNode, SolrClient client, String createNodeSetStr, String configName) throws SolrServerException, IOException {\n\n    return createCollection(collectionInfos, collectionName,\n        Utils.makeMap(\n        NUM_SLICES, numShards,\n        ZkStateReader.REPLICATION_FACTOR, replicationFactor,\n        CREATE_NODE_SET, createNodeSetStr,\n        ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode,\n        ZkStateReader.REALTIME_REPLICAS, getRealtimeReplicas()),\n        client, configName);\n  }\n\n","sourceOld":"  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, int numShards, int replicationFactor, int maxShardsPerNode, SolrClient client, String createNodeSetStr, String configName) throws SolrServerException, IOException {\n\n    return createCollection(collectionInfos, collectionName,\n        Utils.makeMap(\n        NUM_SLICES, numShards,\n        ZkStateReader.REPLICATION_FACTOR, replicationFactor,\n        CREATE_NODE_SET, createNodeSetStr,\n        ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode),\n        client, configName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String,String).mjava","sourceNew":"  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, int numShards, int replicationFactor, int maxShardsPerNode, SolrClient client, String createNodeSetStr, String configName) throws SolrServerException, IOException {\n\n    int numNrtReplicas = useTlogReplicas()?0:replicationFactor;\n    int numTlogReplicas = useTlogReplicas()?replicationFactor:0;\n    return createCollection(collectionInfos, collectionName,\n        Utils.makeMap(\n        NUM_SLICES, numShards,\n        ZkStateReader.NRT_REPLICAS, numNrtReplicas,\n        ZkStateReader.TLOG_REPLICAS, numTlogReplicas,\n        ZkStateReader.PULL_REPLICAS, getPullReplicaCount(),\n        CREATE_NODE_SET, createNodeSetStr,\n        ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode),\n        client, configName);\n  }\n\n","sourceOld":"  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, int numShards, int replicationFactor, int maxShardsPerNode, SolrClient client, String createNodeSetStr, String configName) throws SolrServerException, IOException {\n\n    return createCollection(collectionInfos, collectionName,\n        Utils.makeMap(\n        NUM_SLICES, numShards,\n        ZkStateReader.REPLICATION_FACTOR, replicationFactor,\n        CREATE_NODE_SET, createNodeSetStr,\n        ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode,\n        ZkStateReader.REALTIME_REPLICAS, getRealtimeReplicas()),\n        client, configName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String,String).mjava","sourceNew":"  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, int numShards, int replicationFactor, int maxShardsPerNode, SolrClient client, String createNodeSetStr, String configName) throws SolrServerException, IOException {\n\n    int numNrtReplicas = useTlogReplicas()?0:replicationFactor;\n    int numTlogReplicas = useTlogReplicas()?replicationFactor:0;\n    return createCollection(collectionInfos, collectionName,\n        Utils.makeMap(\n        NUM_SLICES, numShards,\n        ZkStateReader.NRT_REPLICAS, numNrtReplicas,\n        ZkStateReader.TLOG_REPLICAS, numTlogReplicas,\n        ZkStateReader.PULL_REPLICAS, getPullReplicaCount(),\n        CREATE_NODE_SET, createNodeSetStr,\n        ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode),\n        client, configName);\n  }\n\n","sourceOld":"  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, int numShards, int replicationFactor, int maxShardsPerNode, SolrClient client, String createNodeSetStr, String configName) throws SolrServerException, IOException {\n\n    return createCollection(collectionInfos, collectionName,\n        Utils.makeMap(\n        NUM_SLICES, numShards,\n        ZkStateReader.REPLICATION_FACTOR, replicationFactor,\n        CREATE_NODE_SET, createNodeSetStr,\n        ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode,\n        ZkStateReader.REALTIME_REPLICAS, getRealtimeReplicas()),\n        client, configName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String,String).mjava","sourceNew":"  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, int numShards, int replicationFactor, int maxShardsPerNode, SolrClient client, String createNodeSetStr, String configName) throws SolrServerException, IOException {\n\n    int numNrtReplicas = useTlogReplicas()?0:replicationFactor;\n    int numTlogReplicas = useTlogReplicas()?replicationFactor:0;\n    return createCollection(collectionInfos, collectionName,\n        Utils.makeMap(\n            OverseerCollectionMessageHandler.NUM_SLICES, numShards,\n            ZkStateReader.NRT_REPLICAS, numNrtReplicas,\n            ZkStateReader.TLOG_REPLICAS, numTlogReplicas,\n            ZkStateReader.PULL_REPLICAS, getPullReplicaCount(),\n            OverseerCollectionMessageHandler.CREATE_NODE_SET, createNodeSetStr,\n            ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode),\n        client, configName);\n  }\n\n","sourceOld":"  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, int numShards, int replicationFactor, int maxShardsPerNode, SolrClient client, String createNodeSetStr, String configName) throws SolrServerException, IOException {\n\n    int numNrtReplicas = useTlogReplicas()?0:replicationFactor;\n    int numTlogReplicas = useTlogReplicas()?replicationFactor:0;\n    return createCollection(collectionInfos, collectionName,\n        Utils.makeMap(\n        NUM_SLICES, numShards,\n        ZkStateReader.NRT_REPLICAS, numNrtReplicas,\n        ZkStateReader.TLOG_REPLICAS, numTlogReplicas,\n        ZkStateReader.PULL_REPLICAS, getPullReplicaCount(),\n        CREATE_NODE_SET, createNodeSetStr,\n        ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode),\n        client, configName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String,String).mjava","sourceNew":"  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, int numShards, int replicationFactor, int maxShardsPerNode, SolrClient client, String createNodeSetStr, String configName) throws SolrServerException, IOException {\n\n    int numNrtReplicas = useTlogReplicas()?0:replicationFactor;\n    int numTlogReplicas = useTlogReplicas()?replicationFactor:0;\n    return createCollection(collectionInfos, collectionName,\n        Utils.makeMap(\n            OverseerCollectionMessageHandler.NUM_SLICES, numShards,\n            ZkStateReader.NRT_REPLICAS, numNrtReplicas,\n            ZkStateReader.TLOG_REPLICAS, numTlogReplicas,\n            ZkStateReader.PULL_REPLICAS, getPullReplicaCount(),\n            OverseerCollectionMessageHandler.CREATE_NODE_SET, createNodeSetStr,\n            ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode),\n        client, configName);\n  }\n\n","sourceOld":"  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, int numShards, int replicationFactor, int maxShardsPerNode, SolrClient client, String createNodeSetStr, String configName) throws SolrServerException, IOException {\n\n    int numNrtReplicas = useTlogReplicas()?0:replicationFactor;\n    int numTlogReplicas = useTlogReplicas()?replicationFactor:0;\n    return createCollection(collectionInfos, collectionName,\n        Utils.makeMap(\n        NUM_SLICES, numShards,\n        ZkStateReader.NRT_REPLICAS, numNrtReplicas,\n        ZkStateReader.TLOG_REPLICAS, numTlogReplicas,\n        ZkStateReader.PULL_REPLICAS, getPullReplicaCount(),\n        CREATE_NODE_SET, createNodeSetStr,\n        ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode),\n        client, configName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String,String).mjava","sourceNew":"  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, int numShards, int replicationFactor, int maxShardsPerNode, SolrClient client, String createNodeSetStr, String configName) throws SolrServerException, IOException, InterruptedException, TimeoutException {\n\n    int numNrtReplicas = useTlogReplicas()?0:replicationFactor;\n    int numTlogReplicas = useTlogReplicas()?replicationFactor:0;\n    return createCollection(collectionInfos, collectionName,\n        Utils.makeMap(\n            OverseerCollectionMessageHandler.NUM_SLICES, numShards,\n            ZkStateReader.NRT_REPLICAS, numNrtReplicas,\n            ZkStateReader.TLOG_REPLICAS, numTlogReplicas,\n            ZkStateReader.PULL_REPLICAS, getPullReplicaCount(),\n            OverseerCollectionMessageHandler.CREATE_NODE_SET, createNodeSetStr,\n            ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode),\n        client, configName);\n  }\n\n","sourceOld":"  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, int numShards, int replicationFactor, int maxShardsPerNode, SolrClient client, String createNodeSetStr, String configName) throws SolrServerException, IOException {\n\n    int numNrtReplicas = useTlogReplicas()?0:replicationFactor;\n    int numTlogReplicas = useTlogReplicas()?replicationFactor:0;\n    return createCollection(collectionInfos, collectionName,\n        Utils.makeMap(\n            OverseerCollectionMessageHandler.NUM_SLICES, numShards,\n            ZkStateReader.NRT_REPLICAS, numNrtReplicas,\n            ZkStateReader.TLOG_REPLICAS, numTlogReplicas,\n            ZkStateReader.PULL_REPLICAS, getPullReplicaCount(),\n            OverseerCollectionMessageHandler.CREATE_NODE_SET, createNodeSetStr,\n            ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode),\n        client, configName);\n  }\n\n","bugFix":["bafca15d8e408346a67f4282ad1143b88023893b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,int,int,SolrClient,String,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollection(Map[String,List[Integer]],String,int,int,int,SolrClient,String,String).mjava","sourceNew":"  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, int numShards, int replicationFactor, SolrClient client, String createNodeSetStr, String configName) throws SolrServerException, IOException, InterruptedException, TimeoutException {\n\n    int numNrtReplicas = useTlogReplicas()?0:replicationFactor;\n    int numTlogReplicas = useTlogReplicas()?replicationFactor:0;\n    return createCollection(collectionInfos, collectionName,\n        Utils.makeMap(\n            OverseerCollectionMessageHandler.NUM_SLICES, numShards,\n            ZkStateReader.NRT_REPLICAS, numNrtReplicas,\n            ZkStateReader.TLOG_REPLICAS, numTlogReplicas,\n            ZkStateReader.PULL_REPLICAS, getPullReplicaCount(),\n            OverseerCollectionMessageHandler.CREATE_NODE_SET, createNodeSetStr),\n        client, configName);\n  }\n\n","sourceOld":"  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, int numShards, int replicationFactor, int maxShardsPerNode, SolrClient client, String createNodeSetStr, String configName) throws SolrServerException, IOException, InterruptedException, TimeoutException {\n\n    int numNrtReplicas = useTlogReplicas()?0:replicationFactor;\n    int numTlogReplicas = useTlogReplicas()?replicationFactor:0;\n    return createCollection(collectionInfos, collectionName,\n        Utils.makeMap(\n            OverseerCollectionMessageHandler.NUM_SLICES, numShards,\n            ZkStateReader.NRT_REPLICAS, numNrtReplicas,\n            ZkStateReader.TLOG_REPLICAS, numTlogReplicas,\n            ZkStateReader.PULL_REPLICAS, getPullReplicaCount(),\n            OverseerCollectionMessageHandler.CREATE_NODE_SET, createNodeSetStr,\n            ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode),\n        client, configName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["61c45e99cf6676da48f19d7511c73712ad39402b","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"61c45e99cf6676da48f19d7511c73712ad39402b":["be320990bdc77e643388fa801e75017f19289c42"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["b94236357aaa22b76c10629851fe4e376e0cea82"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["61c45e99cf6676da48f19d7511c73712ad39402b"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["bafca15d8e408346a67f4282ad1143b88023893b"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["ab68488225b6a6c357dda72ed11dedca9914a192","61c45e99cf6676da48f19d7511c73712ad39402b"],"f996f8177b9204bdc92f7164460c6cefad9ac99a":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"be320990bdc77e643388fa801e75017f19289c42":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"ab68488225b6a6c357dda72ed11dedca9914a192":["b693a83132c9e45afcd564fd65a25b60ed80388b","f996f8177b9204bdc92f7164460c6cefad9ac99a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"61c45e99cf6676da48f19d7511c73712ad39402b":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d","e9017cf144952056066919f1ebc7897ff9bd71b1"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["f996f8177b9204bdc92f7164460c6cefad9ac99a","be320990bdc77e643388fa801e75017f19289c42","ab68488225b6a6c357dda72ed11dedca9914a192"],"bafca15d8e408346a67f4282ad1143b88023893b":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"f996f8177b9204bdc92f7164460c6cefad9ac99a":["ab68488225b6a6c357dda72ed11dedca9914a192"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"be320990bdc77e643388fa801e75017f19289c42":["61c45e99cf6676da48f19d7511c73712ad39402b"],"ab68488225b6a6c357dda72ed11dedca9914a192":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}