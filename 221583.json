{"path":"lucene/core/src/java/org/apache/lucene/util/LongBitSet#nextSetBit(long).mjava","commits":[{"id":"3995f83351082af8ae83bb017e63c56818fc1568","date":1392047063,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/LongBitSet#nextSetBit(long).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the index of the first set bit starting at the index specified.\n   *  -1 is returned if there are no more set bits.\n   */\n  public long nextSetBit(long index) {\n    assert index >= 0 && index < numBits;\n    int i = (int) (index >> 6);\n    final int subIndex = (int) (index & 0x3f);      // index within the word\n    long word = bits[i] >> subIndex;  // skip all the bits to the right of index\n\n    if (word!=0) {\n      return index + Long.numberOfTrailingZeros(word);\n    }\n\n    while(++i < numWords) {\n      word = bits[i];\n      if (word != 0) {\n        return (i<<6) + Long.numberOfTrailingZeros(word);\n      }\n    }\n\n    return -1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["af918c7c328775f9fadd5870c21f0fafc2a059cc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55cd30e9e9e71e141455bae8e74401676f036658","date":1406760593,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/LongBitSet#nextSetBit(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/LongBitSet#nextSetBit(long).mjava","sourceNew":"  /** Returns the index of the first set bit starting at the index specified.\n   *  -1 is returned if there are no more set bits.\n   */\n  public long nextSetBit(long index) {\n    assert index >= 0 && index < numBits;\n    int i = (int) (index >> 6);\n    long word = bits[i] >> index;  // skip all the bits to the right of index\n\n    if (word!=0) {\n      return index + Long.numberOfTrailingZeros(word);\n    }\n\n    while(++i < numWords) {\n      word = bits[i];\n      if (word != 0) {\n        return (i<<6) + Long.numberOfTrailingZeros(word);\n      }\n    }\n\n    return -1;\n  }\n\n","sourceOld":"  /** Returns the index of the first set bit starting at the index specified.\n   *  -1 is returned if there are no more set bits.\n   */\n  public long nextSetBit(long index) {\n    assert index >= 0 && index < numBits;\n    int i = (int) (index >> 6);\n    final int subIndex = (int) (index & 0x3f);      // index within the word\n    long word = bits[i] >> subIndex;  // skip all the bits to the right of index\n\n    if (word!=0) {\n      return index + Long.numberOfTrailingZeros(word);\n    }\n\n    while(++i < numWords) {\n      word = bits[i];\n      if (word != 0) {\n        return (i<<6) + Long.numberOfTrailingZeros(word);\n      }\n    }\n\n    return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"af918c7c328775f9fadd5870c21f0fafc2a059cc","date":1430253435,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/LongBitSet#nextSetBit(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/LongBitSet#nextSetBit(long).mjava","sourceNew":"  /** Returns the index of the first set bit starting at the index specified.\n   *  -1 is returned if there are no more set bits.\n   */\n  public long nextSetBit(long index) {\n    // Depends on the ghost bits being clear!\n    assert index >= 0 && index < numBits: \"index=\" + index + \", numBits=\" + numBits;\n    int i = (int) (index >> 6);\n    long word = bits[i] >> index;  // skip all the bits to the right of index\n\n    if (word!=0) {\n      return index + Long.numberOfTrailingZeros(word);\n    }\n\n    while(++i < numWords) {\n      word = bits[i];\n      if (word != 0) {\n        return (i<<6) + Long.numberOfTrailingZeros(word);\n      }\n    }\n\n    return -1;\n  }\n\n","sourceOld":"  /** Returns the index of the first set bit starting at the index specified.\n   *  -1 is returned if there are no more set bits.\n   */\n  public long nextSetBit(long index) {\n    assert index >= 0 && index < numBits;\n    int i = (int) (index >> 6);\n    long word = bits[i] >> index;  // skip all the bits to the right of index\n\n    if (word!=0) {\n      return index + Long.numberOfTrailingZeros(word);\n    }\n\n    while(++i < numWords) {\n      word = bits[i];\n      if (word != 0) {\n        return (i<<6) + Long.numberOfTrailingZeros(word);\n      }\n    }\n\n    return -1;\n  }\n\n","bugFix":["3995f83351082af8ae83bb017e63c56818fc1568"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"af918c7c328775f9fadd5870c21f0fafc2a059cc":["55cd30e9e9e71e141455bae8e74401676f036658"],"55cd30e9e9e71e141455bae8e74401676f036658":["3995f83351082af8ae83bb017e63c56818fc1568"],"3995f83351082af8ae83bb017e63c56818fc1568":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af918c7c328775f9fadd5870c21f0fafc2a059cc"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3995f83351082af8ae83bb017e63c56818fc1568"],"af918c7c328775f9fadd5870c21f0fafc2a059cc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"55cd30e9e9e71e141455bae8e74401676f036658":["af918c7c328775f9fadd5870c21f0fafc2a059cc"],"3995f83351082af8ae83bb017e63c56818fc1568":["55cd30e9e9e71e141455bae8e74401676f036658"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}