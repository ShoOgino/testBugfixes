{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40RWPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","commits":[{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40RWPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40RWPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    if (!LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE) {\n      return super.fieldsConsumer(state);\n    } else {\n      PostingsWriterBase docs = new Lucene40PostingsWriter(state);\n      \n      // TODO: should we make the terms index more easily\n      // pluggable?  Ie so that this codec would record which\n      // index impl was used, and switch on loading?\n      // Or... you must make a new Codec for this?\n      boolean success = false;\n      try {\n        FieldsConsumer ret = new BlockTreeTermsWriter(state, docs, minBlockSize, maxBlockSize);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          docs.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    if (!LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE) {\n      return super.fieldsConsumer(state);\n    } else {\n      PostingsWriterBase docs = new Lucene40PostingsWriter(state);\n      \n      // TODO: should we make the terms index more easily\n      // pluggable?  Ie so that this codec would record which\n      // index impl was used, and switch on loading?\n      // Or... you must make a new Codec for this?\n      boolean success = false;\n      try {\n        FieldsConsumer ret = new BlockTreeTermsWriter(state, docs, minBlockSize, maxBlockSize);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          docs.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2daae254c28b627693692fbf8f14d2f36c3591c1","date":1409582110,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40RWPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40RWPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new Lucene40PostingsWriter(state);\n    \n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    boolean success = false;\n    try {\n      FieldsConsumer ret = new BlockTreeTermsWriter(state, docs, minBlockSize, maxBlockSize);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    if (!LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE) {\n      return super.fieldsConsumer(state);\n    } else {\n      PostingsWriterBase docs = new Lucene40PostingsWriter(state);\n      \n      // TODO: should we make the terms index more easily\n      // pluggable?  Ie so that this codec would record which\n      // index impl was used, and switch on loading?\n      // Or... you must make a new Codec for this?\n      boolean success = false;\n      try {\n        FieldsConsumer ret = new BlockTreeTermsWriter(state, docs, minBlockSize, maxBlockSize);\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          docs.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40RWPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new Lucene40PostingsWriter(state);\n    \n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    boolean success = false;\n    try {\n      FieldsConsumer ret = new BlockTreeTermsWriter(state, docs, minBlockSize, maxBlockSize);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ac4bff3307e88928bf48cd1a283ff7da1f82464","date":1411914960,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40RWPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40RWPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new Lucene40PostingsWriter(state);\n    \n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    boolean success = false;\n    try {\n      FieldsConsumer ret = new BlockTreeTermsWriter(state, docs, MIN_BLOCK_SIZE, MAX_BLOCK_SIZE);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new Lucene40PostingsWriter(state);\n    \n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    boolean success = false;\n    try {\n      FieldsConsumer ret = new BlockTreeTermsWriter(state, docs, minBlockSize, maxBlockSize);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40RWPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40RWPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new Lucene40PostingsWriter(state);\n    \n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    boolean success = false;\n    try {\n      FieldsConsumer ret = new BlockTreeTermsWriter(state, docs, MIN_BLOCK_SIZE, MAX_BLOCK_SIZE);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new Lucene40PostingsWriter(state);\n    \n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    boolean success = false;\n    try {\n      FieldsConsumer ret = new BlockTreeTermsWriter(state, docs, minBlockSize, maxBlockSize);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0628077afea69a2955260949478afabab8e500d8","date":1413915332,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40RWPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40RWPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new Lucene40PostingsWriter(state);\n    \n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    boolean success = false;\n    try {\n      FieldsConsumer ret = new Lucene40BlockTreeTermsWriter(state, docs, MIN_BLOCK_SIZE, MAX_BLOCK_SIZE);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new Lucene40PostingsWriter(state);\n    \n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    boolean success = false;\n    try {\n      FieldsConsumer ret = new BlockTreeTermsWriter(state, docs, MIN_BLOCK_SIZE, MAX_BLOCK_SIZE);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40RWPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40RWPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new Lucene40PostingsWriter(state);\n    \n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    boolean success = false;\n    try {\n      FieldsConsumer ret = new Lucene40BlockTreeTermsWriter(state, docs, MIN_BLOCK_SIZE, MAX_BLOCK_SIZE);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new Lucene40PostingsWriter(state);\n    \n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    boolean success = false;\n    try {\n      FieldsConsumer ret = new BlockTreeTermsWriter(state, docs, MIN_BLOCK_SIZE, MAX_BLOCK_SIZE);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40RWPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":null,"sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    PostingsWriterBase docs = new Lucene40PostingsWriter(state);\n    \n    // TODO: should we make the terms index more easily\n    // pluggable?  Ie so that this codec would record which\n    // index impl was used, and switch on loading?\n    // Or... you must make a new Codec for this?\n    boolean success = false;\n    try {\n      FieldsConsumer ret = new Lucene40BlockTreeTermsWriter(state, docs, MIN_BLOCK_SIZE, MAX_BLOCK_SIZE);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        docs.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9bb9a29a5e71a90295f175df8919802993142c9a":["402ad3ddc9da7b70da1b167667a60ece6a1381fb","6ac4bff3307e88928bf48cd1a283ff7da1f82464"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["9bb9a29a5e71a90295f175df8919802993142c9a","0628077afea69a2955260949478afabab8e500d8"],"0628077afea69a2955260949478afabab8e500d8":["6ac4bff3307e88928bf48cd1a283ff7da1f82464"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"6ac4bff3307e88928bf48cd1a283ff7da1f82464":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2daae254c28b627693692fbf8f14d2f36c3591c1"],"2daae254c28b627693692fbf8f14d2f36c3591c1":["4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"9bb9a29a5e71a90295f175df8919802993142c9a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["2daae254c28b627693692fbf8f14d2f36c3591c1"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"0628077afea69a2955260949478afabab8e500d8":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"6ac4bff3307e88928bf48cd1a283ff7da1f82464":["9bb9a29a5e71a90295f175df8919802993142c9a","0628077afea69a2955260949478afabab8e500d8"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["9bb9a29a5e71a90295f175df8919802993142c9a","6ac4bff3307e88928bf48cd1a283ff7da1f82464"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2daae254c28b627693692fbf8f14d2f36c3591c1":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}