{"path":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#updateStateNew(ClusterState,ZkNodeProps).mjava","commits":[{"id":"24a5da2a0d397ff29f3de8f6cf451d3412c2509a","date":1417276391,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#updateStateNew(ClusterState,ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Handles non-legacy state updates\n   */\n  protected ZkWriteCommand updateStateNew(ClusterState clusterState, final ZkNodeProps message) {\n    String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n\n    if (collection == null || sliceName == null) {\n      log.error(\"Invalid collection and slice {}\", message);\n      return ZkStateWriter.NO_OP;\n    }\n    Slice slice = clusterState.getSlice(collection, sliceName);\n    if (slice == null) {\n      log.error(\"No such slice exists {}\", message);\n      return ZkStateWriter.NO_OP;\n    }\n\n    return updateState(clusterState, message);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04c8df3f10a676c3de5dbf390f17a2de2d45cacd","date":1461615626,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#updateStateNew(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#updateStateNew(ClusterState,ZkNodeProps).mjava","sourceNew":"  /**\n   * Handles non-legacy state updates\n   */\n  protected ZkWriteCommand updateStateNew(ClusterState clusterState, final ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n\n    if (collectionName == null || sliceName == null) {\n      log.error(\"Invalid collection and slice {}\", message);\n      return ZkStateWriter.NO_OP;\n    }\n    DocCollection collection = clusterState.getCollectionOrNull(collectionName);\n    Slice slice = collection != null ? collection.getSlice(sliceName) : null;\n    if (slice == null) {\n      log.error(\"No such slice exists {}\", message);\n      return ZkStateWriter.NO_OP;\n    }\n\n    return updateState(clusterState, message);\n  }\n\n","sourceOld":"  /**\n   * Handles non-legacy state updates\n   */\n  protected ZkWriteCommand updateStateNew(ClusterState clusterState, final ZkNodeProps message) {\n    String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n\n    if (collection == null || sliceName == null) {\n      log.error(\"Invalid collection and slice {}\", message);\n      return ZkStateWriter.NO_OP;\n    }\n    Slice slice = clusterState.getSlice(collection, sliceName);\n    if (slice == null) {\n      log.error(\"No such slice exists {}\", message);\n      return ZkStateWriter.NO_OP;\n    }\n\n    return updateState(clusterState, message);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#updateStateNew(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#updateStateNew(ClusterState,ZkNodeProps).mjava","sourceNew":"  /**\n   * Handles non-legacy state updates\n   */\n  protected ZkWriteCommand updateStateNew(ClusterState clusterState, final ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n\n    if (collectionName == null || sliceName == null) {\n      log.error(\"Invalid collection and slice {}\", message);\n      return ZkStateWriter.NO_OP;\n    }\n    DocCollection collection = clusterState.getCollectionOrNull(collectionName);\n    Slice slice = collection != null ? collection.getSlice(sliceName) : null;\n    if (slice == null) {\n      log.error(\"No such slice exists {}\", message);\n      return ZkStateWriter.NO_OP;\n    }\n\n    return updateState(clusterState, message);\n  }\n\n","sourceOld":"  /**\n   * Handles non-legacy state updates\n   */\n  protected ZkWriteCommand updateStateNew(ClusterState clusterState, final ZkNodeProps message) {\n    String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n\n    if (collection == null || sliceName == null) {\n      log.error(\"Invalid collection and slice {}\", message);\n      return ZkStateWriter.NO_OP;\n    }\n    Slice slice = clusterState.getSlice(collection, sliceName);\n    if (slice == null) {\n      log.error(\"No such slice exists {}\", message);\n      return ZkStateWriter.NO_OP;\n    }\n\n    return updateState(clusterState, message);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":4,"author":"murblanc","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#updateStateNew(ClusterState,ZkNodeProps).mjava","sourceNew":null,"sourceOld":"  /**\n   * Handles non-legacy state updates\n   */\n  protected ZkWriteCommand updateStateNew(ClusterState clusterState, final ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n\n    if (collectionName == null || sliceName == null) {\n      log.error(\"Invalid collection and slice {}\", message);\n      return ZkStateWriter.NO_OP;\n    }\n    DocCollection collection = clusterState.getCollectionOrNull(collectionName);\n    Slice slice = collection != null ? collection.getSlice(sliceName) : null;\n    if (slice == null) {\n      log.error(\"No such slice exists {}\", message);\n      return ZkStateWriter.NO_OP;\n    }\n\n    return updateState(clusterState, message);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a","04c8df3f10a676c3de5dbf390f17a2de2d45cacd"],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"]},"commit2Childs":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","04c8df3f10a676c3de5dbf390f17a2de2d45cacd"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}