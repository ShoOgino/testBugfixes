{"path":"lucene/core/src/java/org/apache/lucene/index/ParallelCompositeReader#ParallelCompositeReader(boolean,CompositeReader[],CompositeReader[]).mjava","commits":[{"id":"6e09a3a223be07d75777515a717312813221fe58","date":1328908385,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ParallelCompositeReader#ParallelCompositeReader(boolean,CompositeReader[],CompositeReader[]).mjava","pathOld":"/dev/null","sourceNew":"  /** Expert: create a ParallelCompositeReader based on the provided\n   *  readers and storedFieldReaders; when a document is\n   *  loaded, only storedFieldsReaders will be used. */\n  public ParallelCompositeReader(boolean closeSubReaders, CompositeReader[] readers, CompositeReader[] storedFieldReaders) throws IOException {\n    super(prepareSubReaders(readers, storedFieldReaders));\n    this.closeSubReaders = closeSubReaders;\n    Collections.addAll(completeReaderSet, readers);\n    Collections.addAll(completeReaderSet, storedFieldReaders);\n    // do this finally so any Exceptions occurred before don't affect refcounts:\n    if (!closeSubReaders) {\n      for (CompositeReader reader : completeReaderSet) {\n        reader.incRef();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["48180ea0d6210cab36e06798b916a39e0607713b","5f6279d779b4584858af04f499e8aac0ae132c29"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"48180ea0d6210cab36e06798b916a39e0607713b","date":1367051483,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ParallelCompositeReader#ParallelCompositeReader(boolean,CompositeReader[],CompositeReader[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ParallelCompositeReader#ParallelCompositeReader(boolean,CompositeReader[],CompositeReader[]).mjava","sourceNew":"  /** Expert: create a ParallelCompositeReader based on the provided\n   *  readers and storedFieldReaders; when a document is\n   *  loaded, only storedFieldsReaders will be used. */\n  public ParallelCompositeReader(boolean closeSubReaders, CompositeReader[] readers, CompositeReader[] storedFieldReaders) throws IOException {\n    super(prepareSubReaders(readers, storedFieldReaders));\n    this.closeSubReaders = closeSubReaders;\n    Collections.addAll(completeReaderSet, readers);\n    Collections.addAll(completeReaderSet, storedFieldReaders);\n    // update ref-counts (like MultiReader):\n    if (!closeSubReaders) {\n      for (final IndexReader reader : completeReaderSet) {\n        reader.incRef();\n      }\n    }\n    // finally add our own synthetic readers, so we close or decRef them, too (it does not matter what we do)\n    completeReaderSet.addAll(getSequentialSubReaders());\n  }\n\n","sourceOld":"  /** Expert: create a ParallelCompositeReader based on the provided\n   *  readers and storedFieldReaders; when a document is\n   *  loaded, only storedFieldsReaders will be used. */\n  public ParallelCompositeReader(boolean closeSubReaders, CompositeReader[] readers, CompositeReader[] storedFieldReaders) throws IOException {\n    super(prepareSubReaders(readers, storedFieldReaders));\n    this.closeSubReaders = closeSubReaders;\n    Collections.addAll(completeReaderSet, readers);\n    Collections.addAll(completeReaderSet, storedFieldReaders);\n    // do this finally so any Exceptions occurred before don't affect refcounts:\n    if (!closeSubReaders) {\n      for (CompositeReader reader : completeReaderSet) {\n        reader.incRef();\n      }\n    }\n  }\n\n","bugFix":["6e09a3a223be07d75777515a717312813221fe58"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f6279d779b4584858af04f499e8aac0ae132c29","date":1432729989,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ParallelCompositeReader#ParallelCompositeReader(boolean,CompositeReader[],CompositeReader[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ParallelCompositeReader#ParallelCompositeReader(boolean,CompositeReader[],CompositeReader[]).mjava","sourceNew":"  /** Expert: create a ParallelCompositeReader based on the provided\n   *  readers and storedFieldReaders; when a document is\n   *  loaded, only storedFieldsReaders will be used. */\n  public ParallelCompositeReader(boolean closeSubReaders, CompositeReader[] readers, CompositeReader[] storedFieldReaders) throws IOException {\n    super(prepareLeafReaders(readers, storedFieldReaders));\n    this.closeSubReaders = closeSubReaders;\n    Collections.addAll(completeReaderSet, readers);\n    Collections.addAll(completeReaderSet, storedFieldReaders);\n    // update ref-counts (like MultiReader):\n    if (!closeSubReaders) {\n      for (final IndexReader reader : completeReaderSet) {\n        reader.incRef();\n      }\n    }\n    // finally add our own synthetic readers, so we close or decRef them, too (it does not matter what we do)\n    completeReaderSet.addAll(getSequentialSubReaders());\n  }\n\n","sourceOld":"  /** Expert: create a ParallelCompositeReader based on the provided\n   *  readers and storedFieldReaders; when a document is\n   *  loaded, only storedFieldsReaders will be used. */\n  public ParallelCompositeReader(boolean closeSubReaders, CompositeReader[] readers, CompositeReader[] storedFieldReaders) throws IOException {\n    super(prepareSubReaders(readers, storedFieldReaders));\n    this.closeSubReaders = closeSubReaders;\n    Collections.addAll(completeReaderSet, readers);\n    Collections.addAll(completeReaderSet, storedFieldReaders);\n    // update ref-counts (like MultiReader):\n    if (!closeSubReaders) {\n      for (final IndexReader reader : completeReaderSet) {\n        reader.incRef();\n      }\n    }\n    // finally add our own synthetic readers, so we close or decRef them, too (it does not matter what we do)\n    completeReaderSet.addAll(getSequentialSubReaders());\n  }\n\n","bugFix":["6e09a3a223be07d75777515a717312813221fe58"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d211216c83f01894810543d1c107160a9ae3650b","date":1488289605,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ParallelCompositeReader#ParallelCompositeReader(boolean,CompositeReader[],CompositeReader[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ParallelCompositeReader#ParallelCompositeReader(boolean,CompositeReader[],CompositeReader[]).mjava","sourceNew":"  /** Expert: create a ParallelCompositeReader based on the provided\n   *  readers and storedFieldReaders; when a document is\n   *  loaded, only storedFieldsReaders will be used. */\n  public ParallelCompositeReader(boolean closeSubReaders, CompositeReader[] readers, CompositeReader[] storedFieldReaders) throws IOException {\n    super(prepareLeafReaders(readers, storedFieldReaders));\n    this.closeSubReaders = closeSubReaders;\n    Collections.addAll(completeReaderSet, readers);\n    Collections.addAll(completeReaderSet, storedFieldReaders);\n    // update ref-counts (like MultiReader):\n    if (!closeSubReaders) {\n      for (final IndexReader reader : completeReaderSet) {\n        reader.incRef();\n      }\n    }\n    // finally add our own synthetic readers, so we close or decRef them, too (it does not matter what we do)\n    completeReaderSet.addAll(getSequentialSubReaders());\n    // ParallelReader instances can be short-lived, which would make caching trappy\n    // so we do not cache on them, unless they wrap a single reader in which\n    // case we delegate\n    if (readers.length == 1 && storedFieldReaders.length == 1 && readers[0] == storedFieldReaders[0]) {\n      cacheHelper = readers[0].getReaderCacheHelper();\n    } else {\n      cacheHelper = null;\n    }\n  }\n\n","sourceOld":"  /** Expert: create a ParallelCompositeReader based on the provided\n   *  readers and storedFieldReaders; when a document is\n   *  loaded, only storedFieldsReaders will be used. */\n  public ParallelCompositeReader(boolean closeSubReaders, CompositeReader[] readers, CompositeReader[] storedFieldReaders) throws IOException {\n    super(prepareLeafReaders(readers, storedFieldReaders));\n    this.closeSubReaders = closeSubReaders;\n    Collections.addAll(completeReaderSet, readers);\n    Collections.addAll(completeReaderSet, storedFieldReaders);\n    // update ref-counts (like MultiReader):\n    if (!closeSubReaders) {\n      for (final IndexReader reader : completeReaderSet) {\n        reader.incRef();\n      }\n    }\n    // finally add our own synthetic readers, so we close or decRef them, too (it does not matter what we do)\n    completeReaderSet.addAll(getSequentialSubReaders());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"48180ea0d6210cab36e06798b916a39e0607713b":["6e09a3a223be07d75777515a717312813221fe58"],"d211216c83f01894810543d1c107160a9ae3650b":["5f6279d779b4584858af04f499e8aac0ae132c29"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f6279d779b4584858af04f499e8aac0ae132c29":["48180ea0d6210cab36e06798b916a39e0607713b"],"6e09a3a223be07d75777515a717312813221fe58":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d211216c83f01894810543d1c107160a9ae3650b"]},"commit2Childs":{"48180ea0d6210cab36e06798b916a39e0607713b":["5f6279d779b4584858af04f499e8aac0ae132c29"],"d211216c83f01894810543d1c107160a9ae3650b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6e09a3a223be07d75777515a717312813221fe58"],"5f6279d779b4584858af04f499e8aac0ae132c29":["d211216c83f01894810543d1c107160a9ae3650b"],"6e09a3a223be07d75777515a717312813221fe58":["48180ea0d6210cab36e06798b916a39e0607713b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}