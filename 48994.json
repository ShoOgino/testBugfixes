{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTDocsEnum#nextDoc().mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTDocsEnum#nextDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTDocsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() {\n      while(true) {\n        //System.out.println(\"  nextDoc cycle docUpto=\" + docUpto + \" numDocs=\" + numDocs + \" fp=\" + in.getPosition() + \" this=\" + this);\n        if (docUpto == numDocs) {\n          // System.out.println(\"    END\");\n          return docID = NO_MORE_DOCS;\n        }\n        docUpto++;\n        if (indexOptions == IndexOptions.DOCS_ONLY) {\n          accum += in.readVInt();\n        } else {\n          final int code = in.readVInt();\n          accum += code >>> 1;\n          //System.out.println(\"  docID=\" + accum + \" code=\" + code);\n          if ((code & 1) != 0) {\n            freq = 1;\n          } else {\n            freq = in.readVInt();\n            assert freq > 0;\n          }\n\n          if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n            // Skip positions/payloads\n            for(int posUpto=0;posUpto<freq;posUpto++) {\n              if (!storePayloads) {\n                in.readVInt();\n              } else {\n                final int posCode = in.readVInt();\n                if ((posCode & 1) != 0) {\n                  payloadLen = in.readVInt();\n                }\n                in.skipBytes(payloadLen);\n              }\n            }\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n            // Skip positions/offsets/payloads\n            for(int posUpto=0;posUpto<freq;posUpto++) {\n              int posCode = in.readVInt();\n              if (storePayloads && ((posCode & 1) != 0)) {\n                payloadLen = in.readVInt();\n              }\n              if ((in.readVInt() & 1) != 0) {\n                // new offset length\n                in.readVInt();\n              }\n              if (storePayloads) {\n                in.skipBytes(payloadLen);\n              }\n            }\n          }\n        }\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          //System.out.println(\"    return docID=\" + accum + \" freq=\" + freq);\n          return (docID = accum);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() {\n      while(true) {\n        //System.out.println(\"  nextDoc cycle docUpto=\" + docUpto + \" numDocs=\" + numDocs + \" fp=\" + in.getPosition() + \" this=\" + this);\n        if (docUpto == numDocs) {\n          // System.out.println(\"    END\");\n          return docID = NO_MORE_DOCS;\n        }\n        docUpto++;\n        if (indexOptions == IndexOptions.DOCS_ONLY) {\n          accum += in.readVInt();\n        } else {\n          final int code = in.readVInt();\n          accum += code >>> 1;\n          //System.out.println(\"  docID=\" + accum + \" code=\" + code);\n          if ((code & 1) != 0) {\n            freq = 1;\n          } else {\n            freq = in.readVInt();\n            assert freq > 0;\n          }\n\n          if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n            // Skip positions/payloads\n            for(int posUpto=0;posUpto<freq;posUpto++) {\n              if (!storePayloads) {\n                in.readVInt();\n              } else {\n                final int posCode = in.readVInt();\n                if ((posCode & 1) != 0) {\n                  payloadLen = in.readVInt();\n                }\n                in.skipBytes(payloadLen);\n              }\n            }\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n            // Skip positions/offsets/payloads\n            for(int posUpto=0;posUpto<freq;posUpto++) {\n              int posCode = in.readVInt();\n              if (storePayloads && ((posCode & 1) != 0)) {\n                payloadLen = in.readVInt();\n              }\n              if ((in.readVInt() & 1) != 0) {\n                // new offset length\n                in.readVInt();\n              }\n              if (storePayloads) {\n                in.skipBytes(payloadLen);\n              }\n            }\n          }\n        }\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          //System.out.println(\"    return docID=\" + accum + \" freq=\" + freq);\n          return (docID = accum);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTDocsEnum#nextDoc().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTDocsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() {\n      while(true) {\n        //System.out.println(\"  nextDoc cycle docUpto=\" + docUpto + \" numDocs=\" + numDocs + \" fp=\" + in.getPosition() + \" this=\" + this);\n        if (docUpto == numDocs) {\n          // System.out.println(\"    END\");\n          return docID = NO_MORE_DOCS;\n        }\n        docUpto++;\n        if (indexOptions == IndexOptions.DOCS) {\n          accum += in.readVInt();\n        } else {\n          final int code = in.readVInt();\n          accum += code >>> 1;\n          //System.out.println(\"  docID=\" + accum + \" code=\" + code);\n          if ((code & 1) != 0) {\n            freq = 1;\n          } else {\n            freq = in.readVInt();\n            assert freq > 0;\n          }\n\n          if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n            // Skip positions/payloads\n            for(int posUpto=0;posUpto<freq;posUpto++) {\n              if (!storePayloads) {\n                in.readVInt();\n              } else {\n                final int posCode = in.readVInt();\n                if ((posCode & 1) != 0) {\n                  payloadLen = in.readVInt();\n                }\n                in.skipBytes(payloadLen);\n              }\n            }\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n            // Skip positions/offsets/payloads\n            for(int posUpto=0;posUpto<freq;posUpto++) {\n              int posCode = in.readVInt();\n              if (storePayloads && ((posCode & 1) != 0)) {\n                payloadLen = in.readVInt();\n              }\n              if ((in.readVInt() & 1) != 0) {\n                // new offset length\n                in.readVInt();\n              }\n              if (storePayloads) {\n                in.skipBytes(payloadLen);\n              }\n            }\n          }\n        }\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          //System.out.println(\"    return docID=\" + accum + \" freq=\" + freq);\n          return (docID = accum);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() {\n      while(true) {\n        //System.out.println(\"  nextDoc cycle docUpto=\" + docUpto + \" numDocs=\" + numDocs + \" fp=\" + in.getPosition() + \" this=\" + this);\n        if (docUpto == numDocs) {\n          // System.out.println(\"    END\");\n          return docID = NO_MORE_DOCS;\n        }\n        docUpto++;\n        if (indexOptions == IndexOptions.DOCS_ONLY) {\n          accum += in.readVInt();\n        } else {\n          final int code = in.readVInt();\n          accum += code >>> 1;\n          //System.out.println(\"  docID=\" + accum + \" code=\" + code);\n          if ((code & 1) != 0) {\n            freq = 1;\n          } else {\n            freq = in.readVInt();\n            assert freq > 0;\n          }\n\n          if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n            // Skip positions/payloads\n            for(int posUpto=0;posUpto<freq;posUpto++) {\n              if (!storePayloads) {\n                in.readVInt();\n              } else {\n                final int posCode = in.readVInt();\n                if ((posCode & 1) != 0) {\n                  payloadLen = in.readVInt();\n                }\n                in.skipBytes(payloadLen);\n              }\n            }\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n            // Skip positions/offsets/payloads\n            for(int posUpto=0;posUpto<freq;posUpto++) {\n              int posCode = in.readVInt();\n              if (storePayloads && ((posCode & 1) != 0)) {\n                payloadLen = in.readVInt();\n              }\n              if ((in.readVInt() & 1) != 0) {\n                // new offset length\n                in.readVInt();\n              }\n              if (storePayloads) {\n                in.skipBytes(payloadLen);\n              }\n            }\n          }\n        }\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          //System.out.println(\"    return docID=\" + accum + \" freq=\" + freq);\n          return (docID = accum);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTDocsEnum#nextDoc().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTDocsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() {\n      //System.out.println(\"  nextDoc cycle docUpto=\" + docUpto + \" numDocs=\" + numDocs + \" fp=\" + in.getPosition() + \" this=\" + this);\n      if (docUpto == numDocs) {\n        // System.out.println(\"    END\");\n        return docID = NO_MORE_DOCS;\n      }\n      docUpto++;\n      if (indexOptions == IndexOptions.DOCS) {\n        accum += in.readVInt();\n      } else {\n        final int code = in.readVInt();\n        accum += code >>> 1;\n        //System.out.println(\"  docID=\" + accum + \" code=\" + code);\n        if ((code & 1) != 0) {\n          freq = 1;\n        } else {\n          freq = in.readVInt();\n          assert freq > 0;\n        }\n\n        if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          // Skip positions/payloads\n          for(int posUpto=0;posUpto<freq;posUpto++) {\n            if (!storePayloads) {\n              in.readVInt();\n            } else {\n              final int posCode = in.readVInt();\n              if ((posCode & 1) != 0) {\n                payloadLen = in.readVInt();\n              }\n              in.skipBytes(payloadLen);\n            }\n          }\n        } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n          // Skip positions/offsets/payloads\n          for(int posUpto=0;posUpto<freq;posUpto++) {\n            int posCode = in.readVInt();\n            if (storePayloads && ((posCode & 1) != 0)) {\n              payloadLen = in.readVInt();\n            }\n            if ((in.readVInt() & 1) != 0) {\n              // new offset length\n              in.readVInt();\n            }\n            if (storePayloads) {\n              in.skipBytes(payloadLen);\n            }\n          }\n        }\n      }\n\n      //System.out.println(\"    return docID=\" + accum + \" freq=\" + freq);\n      return (docID = accum);\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() {\n      while(true) {\n        //System.out.println(\"  nextDoc cycle docUpto=\" + docUpto + \" numDocs=\" + numDocs + \" fp=\" + in.getPosition() + \" this=\" + this);\n        if (docUpto == numDocs) {\n          // System.out.println(\"    END\");\n          return docID = NO_MORE_DOCS;\n        }\n        docUpto++;\n        if (indexOptions == IndexOptions.DOCS) {\n          accum += in.readVInt();\n        } else {\n          final int code = in.readVInt();\n          accum += code >>> 1;\n          //System.out.println(\"  docID=\" + accum + \" code=\" + code);\n          if ((code & 1) != 0) {\n            freq = 1;\n          } else {\n            freq = in.readVInt();\n            assert freq > 0;\n          }\n\n          if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n            // Skip positions/payloads\n            for(int posUpto=0;posUpto<freq;posUpto++) {\n              if (!storePayloads) {\n                in.readVInt();\n              } else {\n                final int posCode = in.readVInt();\n                if ((posCode & 1) != 0) {\n                  payloadLen = in.readVInt();\n                }\n                in.skipBytes(payloadLen);\n              }\n            }\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n            // Skip positions/offsets/payloads\n            for(int posUpto=0;posUpto<freq;posUpto++) {\n              int posCode = in.readVInt();\n              if (storePayloads && ((posCode & 1) != 0)) {\n                payloadLen = in.readVInt();\n              }\n              if ((in.readVInt() & 1) != 0) {\n                // new offset length\n                in.readVInt();\n              }\n              if (storePayloads) {\n                in.skipBytes(payloadLen);\n              }\n            }\n          }\n        }\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          //System.out.println(\"    return docID=\" + accum + \" freq=\" + freq);\n          return (docID = accum);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24f89e8a6aac05753cde4c83d62a74356098200d","date":1525768331,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTDocsEnum#nextDoc().mjava","sourceNew":null,"sourceOld":"    @Override\n    public int nextDoc() {\n      //System.out.println(\"  nextDoc cycle docUpto=\" + docUpto + \" numDocs=\" + numDocs + \" fp=\" + in.getPosition() + \" this=\" + this);\n      if (docUpto == numDocs) {\n        // System.out.println(\"    END\");\n        return docID = NO_MORE_DOCS;\n      }\n      docUpto++;\n      if (indexOptions == IndexOptions.DOCS) {\n        accum += in.readVInt();\n      } else {\n        final int code = in.readVInt();\n        accum += code >>> 1;\n        //System.out.println(\"  docID=\" + accum + \" code=\" + code);\n        if ((code & 1) != 0) {\n          freq = 1;\n        } else {\n          freq = in.readVInt();\n          assert freq > 0;\n        }\n\n        if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          // Skip positions/payloads\n          for(int posUpto=0;posUpto<freq;posUpto++) {\n            if (!storePayloads) {\n              in.readVInt();\n            } else {\n              final int posCode = in.readVInt();\n              if ((posCode & 1) != 0) {\n                payloadLen = in.readVInt();\n              }\n              in.skipBytes(payloadLen);\n            }\n          }\n        } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n          // Skip positions/offsets/payloads\n          for(int posUpto=0;posUpto<freq;posUpto++) {\n            int posCode = in.readVInt();\n            if (storePayloads && ((posCode & 1) != 0)) {\n              payloadLen = in.readVInt();\n            }\n            if ((in.readVInt() & 1) != 0) {\n              // new offset length\n              in.readVInt();\n            }\n            if (storePayloads) {\n              in.skipBytes(payloadLen);\n            }\n          }\n        }\n      }\n\n      //System.out.println(\"    return docID=\" + accum + \" freq=\" + freq);\n      return (docID = accum);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"24f89e8a6aac05753cde4c83d62a74356098200d":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2bb2842e561df4e8e9ad89010605fc86ac265465":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["24f89e8a6aac05753cde4c83d62a74356098200d"]},"commit2Childs":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["24f89e8a6aac05753cde4c83d62a74356098200d"],"24f89e8a6aac05753cde4c83d62a74356098200d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}