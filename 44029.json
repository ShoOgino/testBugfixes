{"path":"solr/src/test/org/apache/solr/search/TestFastLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","commits":[{"id":"b870d11eae2250e41b4ed48d248bc043cbbd7711","date":1272408055,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestFastLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) throws IOException {\n    FastLRUCache<Object, Object> fastCache = new FastLRUCache<Object, Object>();\n    Map<String, String> params = new HashMap<String, String>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = fastCache.init(params, null, cr);\n    fastCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      fastCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    FastLRUCache<Object, Object> fastCacheNew = new FastLRUCache<Object, Object>();\n    fastCacheNew.init(params, o, cr);\n    fastCacheNew.warm(null, fastCache);\n    fastCacheNew.setState(SolrCache.State.LIVE);\n    fastCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), fastCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, fastCacheNew.get(miss));\n    }\n    NamedList<Serializable> nl = fastCacheNew.getStatistics();\n    assertEquals(Long.valueOf(hits.length + misses.length), nl.get(\"lookups\"));\n    assertEquals(Long.valueOf(hits.length), nl.get(\"hits\"));\n    fastCacheNew.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFastLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","sourceNew":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) throws IOException {\n    FastLRUCache<Object, Object> fastCache = new FastLRUCache<Object, Object>();\n    Map<String, String> params = new HashMap<String, String>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = fastCache.init(params, null, cr);\n    fastCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      fastCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    FastLRUCache<Object, Object> fastCacheNew = new FastLRUCache<Object, Object>();\n    fastCacheNew.init(params, o, cr);\n    fastCacheNew.warm(null, fastCache);\n    fastCacheNew.setState(SolrCache.State.LIVE);\n    fastCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), fastCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, fastCacheNew.get(miss));\n    }\n    NamedList<Serializable> nl = fastCacheNew.getStatistics();\n    assertEquals(Long.valueOf(hits.length + misses.length), nl.get(\"lookups\"));\n    assertEquals(Long.valueOf(hits.length), nl.get(\"hits\"));\n    fastCacheNew.close();\n  }\n\n","sourceOld":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) throws IOException {\n    FastLRUCache<Object, Object> fastCache = new FastLRUCache<Object, Object>();\n    Map<String, String> params = new HashMap<String, String>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = fastCache.init(params, null, cr);\n    fastCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      fastCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    FastLRUCache<Object, Object> fastCacheNew = new FastLRUCache<Object, Object>();\n    fastCacheNew.init(params, o, cr);\n    fastCacheNew.warm(null, fastCache);\n    fastCacheNew.setState(SolrCache.State.LIVE);\n    fastCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), fastCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, fastCacheNew.get(miss));\n    }\n    NamedList<Serializable> nl = fastCacheNew.getStatistics();\n    assertEquals(Long.valueOf(hits.length + misses.length), nl.get(\"lookups\"));\n    assertEquals(Long.valueOf(hits.length), nl.get(\"hits\"));\n    fastCacheNew.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFastLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","sourceNew":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) throws IOException {\n    FastLRUCache<Object, Object> fastCache = new FastLRUCache<Object, Object>();\n    Map<String, String> params = new HashMap<String, String>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = fastCache.init(params, null, cr);\n    fastCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      fastCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    FastLRUCache<Object, Object> fastCacheNew = new FastLRUCache<Object, Object>();\n    fastCacheNew.init(params, o, cr);\n    fastCacheNew.warm(null, fastCache);\n    fastCacheNew.setState(SolrCache.State.LIVE);\n    fastCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), fastCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, fastCacheNew.get(miss));\n    }\n    NamedList<Serializable> nl = fastCacheNew.getStatistics();\n    assertEquals(Long.valueOf(hits.length + misses.length), nl.get(\"lookups\"));\n    assertEquals(Long.valueOf(hits.length), nl.get(\"hits\"));\n    fastCacheNew.close();\n  }\n\n","sourceOld":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) throws IOException {\n    FastLRUCache<Object, Object> fastCache = new FastLRUCache<Object, Object>();\n    Map<String, String> params = new HashMap<String, String>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = fastCache.init(params, null, cr);\n    fastCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      fastCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    FastLRUCache<Object, Object> fastCacheNew = new FastLRUCache<Object, Object>();\n    fastCacheNew.init(params, o, cr);\n    fastCacheNew.warm(null, fastCache);\n    fastCacheNew.setState(SolrCache.State.LIVE);\n    fastCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), fastCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, fastCacheNew.get(miss));\n    }\n    NamedList<Serializable> nl = fastCacheNew.getStatistics();\n    assertEquals(Long.valueOf(hits.length + misses.length), nl.get(\"lookups\"));\n    assertEquals(Long.valueOf(hits.length), nl.get(\"hits\"));\n    fastCacheNew.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFastLRUCache#doTestPercentageAutowarm(int,int,int[],int[]).mjava","sourceNew":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) throws IOException {\n    FastLRUCache<Object, Object> fastCache = new FastLRUCache<Object, Object>();\n    Map<String, String> params = new HashMap<String, String>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = fastCache.init(params, null, cr);\n    fastCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      fastCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    FastLRUCache<Object, Object> fastCacheNew = new FastLRUCache<Object, Object>();\n    fastCacheNew.init(params, o, cr);\n    fastCacheNew.warm(null, fastCache);\n    fastCacheNew.setState(SolrCache.State.LIVE);\n    fastCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), fastCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, fastCacheNew.get(miss));\n    }\n    NamedList<Serializable> nl = fastCacheNew.getStatistics();\n    assertEquals(Long.valueOf(hits.length + misses.length), nl.get(\"lookups\"));\n    assertEquals(Long.valueOf(hits.length), nl.get(\"hits\"));\n    fastCacheNew.close();\n  }\n\n","sourceOld":"  private void doTestPercentageAutowarm(int limit, int percentage, int[] hits, int[]misses) throws IOException {\n    FastLRUCache<Object, Object> fastCache = new FastLRUCache<Object, Object>();\n    Map<String, String> params = new HashMap<String, String>();\n    params.put(\"size\", String.valueOf(limit));\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", percentage + \"%\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = fastCache.init(params, null, cr);\n    fastCache.setState(SolrCache.State.LIVE);\n    for (int i = 1; i <= limit; i++) {\n      fastCache.put(i, \"\" + i);//adds numbers from 1 to 100\n    }\n\n    FastLRUCache<Object, Object> fastCacheNew = new FastLRUCache<Object, Object>();\n    fastCacheNew.init(params, o, cr);\n    fastCacheNew.warm(null, fastCache);\n    fastCacheNew.setState(SolrCache.State.LIVE);\n    fastCache.close();\n      \n    for(int hit:hits) {\n      assertEquals(\"The value \" + hit + \" should be on new cache\", String.valueOf(hit), fastCacheNew.get(hit));\n    }\n      \n    for(int miss:misses) {\n      assertEquals(\"The value \" + miss + \" should NOT be on new cache\", null, fastCacheNew.get(miss));\n    }\n    NamedList<Serializable> nl = fastCacheNew.getStatistics();\n    assertEquals(Long.valueOf(hits.length + misses.length), nl.get(\"lookups\"));\n    assertEquals(Long.valueOf(hits.length), nl.get(\"hits\"));\n    fastCacheNew.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["b870d11eae2250e41b4ed48d248bc043cbbd7711"],"c26f00b574427b55127e869b935845554afde1fa":["b870d11eae2250e41b4ed48d248bc043cbbd7711","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b870d11eae2250e41b4ed48d248bc043cbbd7711":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["b870d11eae2250e41b4ed48d248bc043cbbd7711"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b870d11eae2250e41b4ed48d248bc043cbbd7711"],"b870d11eae2250e41b4ed48d248bc043cbbd7711":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}