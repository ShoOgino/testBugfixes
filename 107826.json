{"path":"solr/core/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#handleAnalysisRequest(DocumentAnalysisRequest,IndexSchema).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#handleAnalysisRequest(DocumentAnalysisRequest,IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#handleAnalysisRequest(DocumentAnalysisRequest,IndexSchema).mjava","sourceNew":"  /**\n   * Handles the resolved {@link DocumentAnalysisRequest} and returns the analysis response as a named list.\n   *\n   * @param request The {@link DocumentAnalysisRequest} to be handled.\n   * @param schema  The index schema.\n   *\n   * @return The analysis response as a named list.\n   */\n  NamedList<Object> handleAnalysisRequest(DocumentAnalysisRequest request, IndexSchema schema) {\n\n    SchemaField uniqueKeyField = schema.getUniqueKeyField();\n    NamedList<Object> result = new SimpleOrderedMap<Object>();\n\n    for (SolrInputDocument document : request.getDocuments()) {\n\n      NamedList<NamedList> theTokens = new SimpleOrderedMap<NamedList>();\n      result.add(document.getFieldValue(uniqueKeyField.getName()).toString(), theTokens);\n      for (String name : document.getFieldNames()) {\n\n        // there's no point of providing analysis to unindexed fields.\n        SchemaField field = schema.getField(name);\n        if (!field.indexed()) {\n          continue;\n        }\n\n        NamedList<Object> fieldTokens = new SimpleOrderedMap<Object>();\n        theTokens.add(name, fieldTokens);\n\n        FieldType fieldType = schema.getFieldType(name);\n\n        final String queryValue = request.getQuery();\n        Set<BytesRef> termsToMatch;\n        try {\n          termsToMatch = (queryValue != null && request.isShowMatch())\n            ? getQueryTokenSet(queryValue, fieldType.getQueryAnalyzer())\n            : EMPTY_BYTES_SET;\n        } catch (Exception e) {\n          // ignore analysis exceptions since we are applying arbitrary text to all fields\n          termsToMatch = EMPTY_BYTES_SET;\n        }\n\n        if (request.getQuery() != null) {\n          try {\n            AnalysisContext analysisContext = new AnalysisContext(fieldType, fieldType.getQueryAnalyzer(), EMPTY_BYTES_SET);\n            fieldTokens.add(\"query\", analyzeValue(request.getQuery(), analysisContext));\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        Analyzer analyzer = fieldType.getAnalyzer();\n        AnalysisContext analysisContext = new AnalysisContext(fieldType, analyzer, termsToMatch);\n        Collection<Object> fieldValues = document.getFieldValues(name);\n        NamedList<NamedList<? extends Object>> indexTokens \n          = new SimpleOrderedMap<NamedList<? extends Object>>();\n        for (Object fieldValue : fieldValues) {\n          indexTokens.add(String.valueOf(fieldValue), \n                          analyzeValue(fieldValue.toString(), analysisContext));\n        }\n        fieldTokens.add(\"index\", indexTokens);\n      }\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Handles the resolved {@link DocumentAnalysisRequest} and returns the analysis response as a named list.\n   *\n   * @param request The {@link DocumentAnalysisRequest} to be handled.\n   * @param schema  The index schema.\n   *\n   * @return The analysis response as a named list.\n   */\n  NamedList<Object> handleAnalysisRequest(DocumentAnalysisRequest request, IndexSchema schema) {\n\n    SchemaField uniqueKeyField = schema.getUniqueKeyField();\n    NamedList<Object> result = new SimpleOrderedMap<Object>();\n\n    for (SolrInputDocument document : request.getDocuments()) {\n\n      NamedList<NamedList> theTokens = new SimpleOrderedMap<NamedList>();\n      result.add(document.getFieldValue(uniqueKeyField.getName()).toString(), theTokens);\n      for (String name : document.getFieldNames()) {\n\n        // there's no point of providing analysis to unindexed fields.\n        SchemaField field = schema.getField(name);\n        if (!field.indexed()) {\n          continue;\n        }\n\n        NamedList<Object> fieldTokens = new SimpleOrderedMap<Object>();\n        theTokens.add(name, fieldTokens);\n\n        FieldType fieldType = schema.getFieldType(name);\n\n        final String queryValue = request.getQuery();\n        Set<BytesRef> termsToMatch;\n        try {\n          termsToMatch = (queryValue != null && request.isShowMatch())\n            ? getQueryTokenSet(queryValue, fieldType.getQueryAnalyzer())\n            : EMPTY_BYTES_SET;\n        } catch (Exception e) {\n          // ignore analysis exceptions since we are applying arbitrary text to all fields\n          termsToMatch = EMPTY_BYTES_SET;\n        }\n\n        if (request.getQuery() != null) {\n          try {\n            AnalysisContext analysisContext = new AnalysisContext(fieldType, fieldType.getQueryAnalyzer(), EMPTY_BYTES_SET);\n            fieldTokens.add(\"query\", analyzeValue(request.getQuery(), analysisContext));\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        Analyzer analyzer = fieldType.getAnalyzer();\n        AnalysisContext analysisContext = new AnalysisContext(fieldType, analyzer, termsToMatch);\n        Collection<Object> fieldValues = document.getFieldValues(name);\n        NamedList<NamedList<? extends Object>> indexTokens \n          = new SimpleOrderedMap<NamedList<? extends Object>>();\n        for (Object fieldValue : fieldValues) {\n          indexTokens.add(String.valueOf(fieldValue), \n                          analyzeValue(fieldValue.toString(), analysisContext));\n        }\n        fieldTokens.add(\"index\", indexTokens);\n      }\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#handleAnalysisRequest(DocumentAnalysisRequest,IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#handleAnalysisRequest(DocumentAnalysisRequest,IndexSchema).mjava","sourceNew":"  /**\n   * Handles the resolved {@link DocumentAnalysisRequest} and returns the analysis response as a named list.\n   *\n   * @param request The {@link DocumentAnalysisRequest} to be handled.\n   * @param schema  The index schema.\n   *\n   * @return The analysis response as a named list.\n   */\n  NamedList<Object> handleAnalysisRequest(DocumentAnalysisRequest request, IndexSchema schema) {\n\n    SchemaField uniqueKeyField = schema.getUniqueKeyField();\n    NamedList<Object> result = new SimpleOrderedMap<Object>();\n\n    for (SolrInputDocument document : request.getDocuments()) {\n\n      NamedList<NamedList> theTokens = new SimpleOrderedMap<NamedList>();\n      result.add(document.getFieldValue(uniqueKeyField.getName()).toString(), theTokens);\n      for (String name : document.getFieldNames()) {\n\n        // there's no point of providing analysis to unindexed fields.\n        SchemaField field = schema.getField(name);\n        if (!field.indexed()) {\n          continue;\n        }\n\n        NamedList<Object> fieldTokens = new SimpleOrderedMap<Object>();\n        theTokens.add(name, fieldTokens);\n\n        FieldType fieldType = schema.getFieldType(name);\n\n        final String queryValue = request.getQuery();\n        Set<BytesRef> termsToMatch;\n        try {\n          termsToMatch = (queryValue != null && request.isShowMatch())\n            ? getQueryTokenSet(queryValue, fieldType.getQueryAnalyzer())\n            : EMPTY_BYTES_SET;\n        } catch (Exception e) {\n          // ignore analysis exceptions since we are applying arbitrary text to all fields\n          termsToMatch = EMPTY_BYTES_SET;\n        }\n\n        if (request.getQuery() != null) {\n          try {\n            AnalysisContext analysisContext = new AnalysisContext(fieldType, fieldType.getQueryAnalyzer(), EMPTY_BYTES_SET);\n            fieldTokens.add(\"query\", analyzeValue(request.getQuery(), analysisContext));\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        Analyzer analyzer = fieldType.getAnalyzer();\n        AnalysisContext analysisContext = new AnalysisContext(fieldType, analyzer, termsToMatch);\n        Collection<Object> fieldValues = document.getFieldValues(name);\n        NamedList<NamedList<? extends Object>> indexTokens \n          = new SimpleOrderedMap<NamedList<? extends Object>>();\n        for (Object fieldValue : fieldValues) {\n          indexTokens.add(String.valueOf(fieldValue), \n                          analyzeValue(fieldValue.toString(), analysisContext));\n        }\n        fieldTokens.add(\"index\", indexTokens);\n      }\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Handles the resolved {@link DocumentAnalysisRequest} and returns the analysis response as a named list.\n   *\n   * @param request The {@link DocumentAnalysisRequest} to be handled.\n   * @param schema  The index schema.\n   *\n   * @return The analysis response as a named list.\n   */\n  NamedList<Object> handleAnalysisRequest(DocumentAnalysisRequest request, IndexSchema schema) {\n\n    SchemaField uniqueKeyField = schema.getUniqueKeyField();\n    NamedList<Object> result = new SimpleOrderedMap<Object>();\n\n    for (SolrInputDocument document : request.getDocuments()) {\n\n      NamedList<NamedList> theTokens = new SimpleOrderedMap<NamedList>();\n      result.add(document.getFieldValue(uniqueKeyField.getName()).toString(), theTokens);\n      for (String name : document.getFieldNames()) {\n\n        // there's no point of providing analysis to unindexed fields.\n        SchemaField field = schema.getField(name);\n        if (!field.indexed()) {\n          continue;\n        }\n\n        NamedList<Object> fieldTokens = new SimpleOrderedMap<Object>();\n        theTokens.add(name, fieldTokens);\n\n        FieldType fieldType = schema.getFieldType(name);\n\n        final String queryValue = request.getQuery();\n        Set<BytesRef> termsToMatch;\n        try {\n          termsToMatch = (queryValue != null && request.isShowMatch())\n            ? getQueryTokenSet(queryValue, fieldType.getQueryAnalyzer())\n            : EMPTY_BYTES_SET;\n        } catch (Exception e) {\n          // ignore analysis exceptions since we are applying arbitrary text to all fields\n          termsToMatch = EMPTY_BYTES_SET;\n        }\n\n        if (request.getQuery() != null) {\n          try {\n            AnalysisContext analysisContext = new AnalysisContext(fieldType, fieldType.getQueryAnalyzer(), EMPTY_BYTES_SET);\n            fieldTokens.add(\"query\", analyzeValue(request.getQuery(), analysisContext));\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        Analyzer analyzer = fieldType.getAnalyzer();\n        AnalysisContext analysisContext = new AnalysisContext(fieldType, analyzer, termsToMatch);\n        Collection<Object> fieldValues = document.getFieldValues(name);\n        NamedList<NamedList<? extends Object>> indexTokens \n          = new SimpleOrderedMap<NamedList<? extends Object>>();\n        for (Object fieldValue : fieldValues) {\n          indexTokens.add(String.valueOf(fieldValue), \n                          analyzeValue(fieldValue.toString(), analysisContext));\n        }\n        fieldTokens.add(\"index\", indexTokens);\n      }\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#handleAnalysisRequest(DocumentAnalysisRequest,IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#handleAnalysisRequest(DocumentAnalysisRequest,IndexSchema).mjava","sourceNew":"  /**\n   * Handles the resolved {@link DocumentAnalysisRequest} and returns the analysis response as a named list.\n   *\n   * @param request The {@link DocumentAnalysisRequest} to be handled.\n   * @param schema  The index schema.\n   *\n   * @return The analysis response as a named list.\n   */\n  NamedList<Object> handleAnalysisRequest(DocumentAnalysisRequest request, IndexSchema schema) {\n\n    SchemaField uniqueKeyField = schema.getUniqueKeyField();\n    NamedList<Object> result = new SimpleOrderedMap<Object>();\n\n    for (SolrInputDocument document : request.getDocuments()) {\n\n      NamedList<NamedList> theTokens = new SimpleOrderedMap<NamedList>();\n      result.add(document.getFieldValue(uniqueKeyField.getName()).toString(), theTokens);\n      for (String name : document.getFieldNames()) {\n\n        // there's no point of providing analysis to unindexed fields.\n        SchemaField field = schema.getField(name);\n        if (!field.indexed()) {\n          continue;\n        }\n\n        NamedList<Object> fieldTokens = new SimpleOrderedMap<Object>();\n        theTokens.add(name, fieldTokens);\n\n        FieldType fieldType = schema.getFieldType(name);\n\n        final String queryValue = request.getQuery();\n        Set<BytesRef> termsToMatch;\n        try {\n          termsToMatch = (queryValue != null && request.isShowMatch())\n            ? getQueryTokenSet(queryValue, fieldType.getQueryAnalyzer())\n            : EMPTY_BYTES_SET;\n        } catch (Exception e) {\n          // ignore analysis exceptions since we are applying arbitrary text to all fields\n          termsToMatch = EMPTY_BYTES_SET;\n        }\n\n        if (request.getQuery() != null) {\n          try {\n            AnalysisContext analysisContext = new AnalysisContext(fieldType, fieldType.getQueryAnalyzer(), EMPTY_BYTES_SET);\n            fieldTokens.add(\"query\", analyzeValue(request.getQuery(), analysisContext));\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        Analyzer analyzer = fieldType.getAnalyzer();\n        AnalysisContext analysisContext = new AnalysisContext(fieldType, analyzer, termsToMatch);\n        Collection<Object> fieldValues = document.getFieldValues(name);\n        NamedList<NamedList<? extends Object>> indexTokens \n          = new SimpleOrderedMap<NamedList<? extends Object>>();\n        for (Object fieldValue : fieldValues) {\n          indexTokens.add(String.valueOf(fieldValue), \n                          analyzeValue(fieldValue.toString(), analysisContext));\n        }\n        fieldTokens.add(\"index\", indexTokens);\n      }\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Handles the resolved {@link DocumentAnalysisRequest} and returns the analysis response as a named list.\n   *\n   * @param request The {@link DocumentAnalysisRequest} to be handled.\n   * @param schema  The index schema.\n   *\n   * @return The analysis response as a named list.\n   */\n  NamedList<Object> handleAnalysisRequest(DocumentAnalysisRequest request, IndexSchema schema) {\n\n    SchemaField uniqueKeyField = schema.getUniqueKeyField();\n    NamedList<Object> result = new SimpleOrderedMap<Object>();\n\n    for (SolrInputDocument document : request.getDocuments()) {\n\n      NamedList<NamedList> theTokens = new SimpleOrderedMap<NamedList>();\n      result.add(document.getFieldValue(uniqueKeyField.getName()).toString(), theTokens);\n      for (String name : document.getFieldNames()) {\n\n        // there's no point of providing analysis to unindexed fields.\n        SchemaField field = schema.getField(name);\n        if (!field.indexed()) {\n          continue;\n        }\n\n        NamedList<Object> fieldTokens = new SimpleOrderedMap<Object>();\n        theTokens.add(name, fieldTokens);\n\n        FieldType fieldType = schema.getFieldType(name);\n\n        final String queryValue = request.getQuery();\n        Set<BytesRef> termsToMatch;\n        try {\n          termsToMatch = (queryValue != null && request.isShowMatch())\n            ? getQueryTokenSet(queryValue, fieldType.getQueryAnalyzer())\n            : EMPTY_BYTES_SET;\n        } catch (Exception e) {\n          // ignore analysis exceptions since we are applying arbitrary text to all fields\n          termsToMatch = EMPTY_BYTES_SET;\n        }\n\n        if (request.getQuery() != null) {\n          try {\n            AnalysisContext analysisContext = new AnalysisContext(fieldType, fieldType.getQueryAnalyzer(), EMPTY_BYTES_SET);\n            fieldTokens.add(\"query\", analyzeValue(request.getQuery(), analysisContext));\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        Analyzer analyzer = fieldType.getAnalyzer();\n        AnalysisContext analysisContext = new AnalysisContext(fieldType, analyzer, termsToMatch);\n        Collection<Object> fieldValues = document.getFieldValues(name);\n        NamedList<NamedList<? extends Object>> indexTokens \n          = new SimpleOrderedMap<NamedList<? extends Object>>();\n        for (Object fieldValue : fieldValues) {\n          indexTokens.add(String.valueOf(fieldValue), \n                          analyzeValue(fieldValue.toString(), analysisContext));\n        }\n        fieldTokens.add(\"index\", indexTokens);\n      }\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#handleAnalysisRequest(DocumentAnalysisRequest,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#handleAnalysisRequest(DocumentAnalysisRequest,IndexSchema).mjava","sourceNew":"  /**\n   * Handles the resolved {@link DocumentAnalysisRequest} and returns the analysis response as a named list.\n   *\n   * @param request The {@link DocumentAnalysisRequest} to be handled.\n   * @param schema  The index schema.\n   *\n   * @return The analysis response as a named list.\n   */\n  NamedList<Object> handleAnalysisRequest(DocumentAnalysisRequest request, IndexSchema schema) {\n\n    SchemaField uniqueKeyField = schema.getUniqueKeyField();\n    NamedList<Object> result = new SimpleOrderedMap<>();\n\n    for (SolrInputDocument document : request.getDocuments()) {\n\n      NamedList<NamedList> theTokens = new SimpleOrderedMap<>();\n      result.add(document.getFieldValue(uniqueKeyField.getName()).toString(), theTokens);\n      for (String name : document.getFieldNames()) {\n\n        // there's no point of providing analysis to unindexed fields.\n        SchemaField field = schema.getField(name);\n        if (!field.indexed()) {\n          continue;\n        }\n\n        NamedList<Object> fieldTokens = new SimpleOrderedMap<>();\n        theTokens.add(name, fieldTokens);\n\n        FieldType fieldType = schema.getFieldType(name);\n\n        final String queryValue = request.getQuery();\n        Set<BytesRef> termsToMatch;\n        try {\n          termsToMatch = (queryValue != null && request.isShowMatch())\n            ? getQueryTokenSet(queryValue, fieldType.getQueryAnalyzer())\n            : EMPTY_BYTES_SET;\n        } catch (Exception e) {\n          // ignore analysis exceptions since we are applying arbitrary text to all fields\n          termsToMatch = EMPTY_BYTES_SET;\n        }\n\n        if (request.getQuery() != null) {\n          try {\n            AnalysisContext analysisContext = new AnalysisContext(fieldType, fieldType.getQueryAnalyzer(), EMPTY_BYTES_SET);\n            fieldTokens.add(\"query\", analyzeValue(request.getQuery(), analysisContext));\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        Analyzer analyzer = fieldType.getAnalyzer();\n        AnalysisContext analysisContext = new AnalysisContext(fieldType, analyzer, termsToMatch);\n        Collection<Object> fieldValues = document.getFieldValues(name);\n        NamedList<NamedList<? extends Object>> indexTokens \n          = new SimpleOrderedMap<>();\n        for (Object fieldValue : fieldValues) {\n          indexTokens.add(String.valueOf(fieldValue), \n                          analyzeValue(fieldValue.toString(), analysisContext));\n        }\n        fieldTokens.add(\"index\", indexTokens);\n      }\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Handles the resolved {@link DocumentAnalysisRequest} and returns the analysis response as a named list.\n   *\n   * @param request The {@link DocumentAnalysisRequest} to be handled.\n   * @param schema  The index schema.\n   *\n   * @return The analysis response as a named list.\n   */\n  NamedList<Object> handleAnalysisRequest(DocumentAnalysisRequest request, IndexSchema schema) {\n\n    SchemaField uniqueKeyField = schema.getUniqueKeyField();\n    NamedList<Object> result = new SimpleOrderedMap<Object>();\n\n    for (SolrInputDocument document : request.getDocuments()) {\n\n      NamedList<NamedList> theTokens = new SimpleOrderedMap<NamedList>();\n      result.add(document.getFieldValue(uniqueKeyField.getName()).toString(), theTokens);\n      for (String name : document.getFieldNames()) {\n\n        // there's no point of providing analysis to unindexed fields.\n        SchemaField field = schema.getField(name);\n        if (!field.indexed()) {\n          continue;\n        }\n\n        NamedList<Object> fieldTokens = new SimpleOrderedMap<Object>();\n        theTokens.add(name, fieldTokens);\n\n        FieldType fieldType = schema.getFieldType(name);\n\n        final String queryValue = request.getQuery();\n        Set<BytesRef> termsToMatch;\n        try {\n          termsToMatch = (queryValue != null && request.isShowMatch())\n            ? getQueryTokenSet(queryValue, fieldType.getQueryAnalyzer())\n            : EMPTY_BYTES_SET;\n        } catch (Exception e) {\n          // ignore analysis exceptions since we are applying arbitrary text to all fields\n          termsToMatch = EMPTY_BYTES_SET;\n        }\n\n        if (request.getQuery() != null) {\n          try {\n            AnalysisContext analysisContext = new AnalysisContext(fieldType, fieldType.getQueryAnalyzer(), EMPTY_BYTES_SET);\n            fieldTokens.add(\"query\", analyzeValue(request.getQuery(), analysisContext));\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        Analyzer analyzer = fieldType.getAnalyzer();\n        AnalysisContext analysisContext = new AnalysisContext(fieldType, analyzer, termsToMatch);\n        Collection<Object> fieldValues = document.getFieldValues(name);\n        NamedList<NamedList<? extends Object>> indexTokens \n          = new SimpleOrderedMap<NamedList<? extends Object>>();\n        for (Object fieldValue : fieldValues) {\n          indexTokens.add(String.valueOf(fieldValue), \n                          analyzeValue(fieldValue.toString(), analysisContext));\n        }\n        fieldTokens.add(\"index\", indexTokens);\n      }\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"123698fbe83b595f9e084f0019cd35ab4a01d7f7","date":1399070065,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#handleAnalysisRequest(DocumentAnalysisRequest,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#handleAnalysisRequest(DocumentAnalysisRequest,IndexSchema).mjava","sourceNew":"  /**\n   * Handles the resolved {@link DocumentAnalysisRequest} and returns the analysis response as a named list.\n   *\n   * @param request The {@link DocumentAnalysisRequest} to be handled.\n   * @param schema  The index schema.\n   *\n   * @return The analysis response as a named list.\n   */\n  NamedList<Object> handleAnalysisRequest(DocumentAnalysisRequest request, IndexSchema schema) {\n\n    SchemaField uniqueKeyField = schema.getUniqueKeyField();\n    NamedList<Object> result = new SimpleOrderedMap<>();\n\n    for (SolrInputDocument document : request.getDocuments()) {\n\n      NamedList<NamedList> theTokens = new SimpleOrderedMap<>();\n      result.add(document.getFieldValue(uniqueKeyField.getName()).toString(), theTokens);\n      for (String name : document.getFieldNames()) {\n\n        // there's no point of providing analysis to unindexed fields.\n        SchemaField field = schema.getField(name);\n        if (!field.indexed()) {\n          continue;\n        }\n\n        NamedList<Object> fieldTokens = new SimpleOrderedMap<>();\n        theTokens.add(name, fieldTokens);\n\n        FieldType fieldType = schema.getFieldType(name);\n\n        final String queryValue = request.getQuery();\n        Set<BytesRef> termsToMatch;\n        try {\n          termsToMatch = (queryValue != null && request.isShowMatch())\n            ? getQueryTokenSet(queryValue, fieldType.getQueryAnalyzer())\n            : EMPTY_BYTES_SET;\n        } catch (Exception e) {\n          // ignore analysis exceptions since we are applying arbitrary text to all fields\n          termsToMatch = EMPTY_BYTES_SET;\n        }\n\n        if (request.getQuery() != null) {\n          try {\n            AnalysisContext analysisContext = new AnalysisContext(fieldType, fieldType.getQueryAnalyzer(), EMPTY_BYTES_SET);\n            fieldTokens.add(\"query\", analyzeValue(request.getQuery(), analysisContext));\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        Analyzer analyzer = fieldType.getIndexAnalyzer();\n        AnalysisContext analysisContext = new AnalysisContext(fieldType, analyzer, termsToMatch);\n        Collection<Object> fieldValues = document.getFieldValues(name);\n        NamedList<NamedList<? extends Object>> indexTokens \n          = new SimpleOrderedMap<>();\n        for (Object fieldValue : fieldValues) {\n          indexTokens.add(String.valueOf(fieldValue), \n                          analyzeValue(fieldValue.toString(), analysisContext));\n        }\n        fieldTokens.add(\"index\", indexTokens);\n      }\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Handles the resolved {@link DocumentAnalysisRequest} and returns the analysis response as a named list.\n   *\n   * @param request The {@link DocumentAnalysisRequest} to be handled.\n   * @param schema  The index schema.\n   *\n   * @return The analysis response as a named list.\n   */\n  NamedList<Object> handleAnalysisRequest(DocumentAnalysisRequest request, IndexSchema schema) {\n\n    SchemaField uniqueKeyField = schema.getUniqueKeyField();\n    NamedList<Object> result = new SimpleOrderedMap<>();\n\n    for (SolrInputDocument document : request.getDocuments()) {\n\n      NamedList<NamedList> theTokens = new SimpleOrderedMap<>();\n      result.add(document.getFieldValue(uniqueKeyField.getName()).toString(), theTokens);\n      for (String name : document.getFieldNames()) {\n\n        // there's no point of providing analysis to unindexed fields.\n        SchemaField field = schema.getField(name);\n        if (!field.indexed()) {\n          continue;\n        }\n\n        NamedList<Object> fieldTokens = new SimpleOrderedMap<>();\n        theTokens.add(name, fieldTokens);\n\n        FieldType fieldType = schema.getFieldType(name);\n\n        final String queryValue = request.getQuery();\n        Set<BytesRef> termsToMatch;\n        try {\n          termsToMatch = (queryValue != null && request.isShowMatch())\n            ? getQueryTokenSet(queryValue, fieldType.getQueryAnalyzer())\n            : EMPTY_BYTES_SET;\n        } catch (Exception e) {\n          // ignore analysis exceptions since we are applying arbitrary text to all fields\n          termsToMatch = EMPTY_BYTES_SET;\n        }\n\n        if (request.getQuery() != null) {\n          try {\n            AnalysisContext analysisContext = new AnalysisContext(fieldType, fieldType.getQueryAnalyzer(), EMPTY_BYTES_SET);\n            fieldTokens.add(\"query\", analyzeValue(request.getQuery(), analysisContext));\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        Analyzer analyzer = fieldType.getAnalyzer();\n        AnalysisContext analysisContext = new AnalysisContext(fieldType, analyzer, termsToMatch);\n        Collection<Object> fieldValues = document.getFieldValues(name);\n        NamedList<NamedList<? extends Object>> indexTokens \n          = new SimpleOrderedMap<>();\n        for (Object fieldValue : fieldValues) {\n          indexTokens.add(String.valueOf(fieldValue), \n                          analyzeValue(fieldValue.toString(), analysisContext));\n        }\n        fieldTokens.add(\"index\", indexTokens);\n      }\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5","date":1591384964,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#handleAnalysisRequest(DocumentAnalysisRequest,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#handleAnalysisRequest(DocumentAnalysisRequest,IndexSchema).mjava","sourceNew":"  /**\n   * Handles the resolved {@link DocumentAnalysisRequest} and returns the analysis response as a named list.\n   *\n   * @param request The {@link DocumentAnalysisRequest} to be handled.\n   * @param schema  The index schema.\n   *\n   * @return The analysis response as a named list.\n   */\n  NamedList<Object> handleAnalysisRequest(DocumentAnalysisRequest request, IndexSchema schema) {\n\n    SchemaField uniqueKeyField = schema.getUniqueKeyField();\n    NamedList<Object> result = new SimpleOrderedMap<>();\n\n    for (SolrInputDocument document : request.getDocuments()) {\n\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList<NamedList> theTokens = new SimpleOrderedMap<>();\n      result.add(document.getFieldValue(uniqueKeyField.getName()).toString(), theTokens);\n      for (String name : document.getFieldNames()) {\n\n        // there's no point of providing analysis to unindexed fields.\n        SchemaField field = schema.getField(name);\n        if (!field.indexed()) {\n          continue;\n        }\n\n        NamedList<Object> fieldTokens = new SimpleOrderedMap<>();\n        theTokens.add(name, fieldTokens);\n\n        FieldType fieldType = schema.getFieldType(name);\n\n        final String queryValue = request.getQuery();\n        Set<BytesRef> termsToMatch;\n        try {\n          termsToMatch = (queryValue != null && request.isShowMatch())\n            ? getQueryTokenSet(queryValue, fieldType.getQueryAnalyzer())\n            : EMPTY_BYTES_SET;\n        } catch (Exception e) {\n          // ignore analysis exceptions since we are applying arbitrary text to all fields\n          termsToMatch = EMPTY_BYTES_SET;\n        }\n\n        if (request.getQuery() != null) {\n          try {\n            AnalysisContext analysisContext = new AnalysisContext(fieldType, fieldType.getQueryAnalyzer(), EMPTY_BYTES_SET);\n            fieldTokens.add(\"query\", analyzeValue(request.getQuery(), analysisContext));\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        Analyzer analyzer = fieldType.getIndexAnalyzer();\n        AnalysisContext analysisContext = new AnalysisContext(fieldType, analyzer, termsToMatch);\n        Collection<Object> fieldValues = document.getFieldValues(name);\n        NamedList<NamedList<? extends Object>> indexTokens \n          = new SimpleOrderedMap<>();\n        for (Object fieldValue : fieldValues) {\n          indexTokens.add(String.valueOf(fieldValue), \n                          analyzeValue(fieldValue.toString(), analysisContext));\n        }\n        fieldTokens.add(\"index\", indexTokens);\n      }\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Handles the resolved {@link DocumentAnalysisRequest} and returns the analysis response as a named list.\n   *\n   * @param request The {@link DocumentAnalysisRequest} to be handled.\n   * @param schema  The index schema.\n   *\n   * @return The analysis response as a named list.\n   */\n  NamedList<Object> handleAnalysisRequest(DocumentAnalysisRequest request, IndexSchema schema) {\n\n    SchemaField uniqueKeyField = schema.getUniqueKeyField();\n    NamedList<Object> result = new SimpleOrderedMap<>();\n\n    for (SolrInputDocument document : request.getDocuments()) {\n\n      NamedList<NamedList> theTokens = new SimpleOrderedMap<>();\n      result.add(document.getFieldValue(uniqueKeyField.getName()).toString(), theTokens);\n      for (String name : document.getFieldNames()) {\n\n        // there's no point of providing analysis to unindexed fields.\n        SchemaField field = schema.getField(name);\n        if (!field.indexed()) {\n          continue;\n        }\n\n        NamedList<Object> fieldTokens = new SimpleOrderedMap<>();\n        theTokens.add(name, fieldTokens);\n\n        FieldType fieldType = schema.getFieldType(name);\n\n        final String queryValue = request.getQuery();\n        Set<BytesRef> termsToMatch;\n        try {\n          termsToMatch = (queryValue != null && request.isShowMatch())\n            ? getQueryTokenSet(queryValue, fieldType.getQueryAnalyzer())\n            : EMPTY_BYTES_SET;\n        } catch (Exception e) {\n          // ignore analysis exceptions since we are applying arbitrary text to all fields\n          termsToMatch = EMPTY_BYTES_SET;\n        }\n\n        if (request.getQuery() != null) {\n          try {\n            AnalysisContext analysisContext = new AnalysisContext(fieldType, fieldType.getQueryAnalyzer(), EMPTY_BYTES_SET);\n            fieldTokens.add(\"query\", analyzeValue(request.getQuery(), analysisContext));\n          } catch (Exception e) {\n            // ignore analysis exceptions since we are applying arbitrary text to all fields\n          }\n        }\n\n        Analyzer analyzer = fieldType.getIndexAnalyzer();\n        AnalysisContext analysisContext = new AnalysisContext(fieldType, analyzer, termsToMatch);\n        Collection<Object> fieldValues = document.getFieldValues(name);\n        NamedList<NamedList<? extends Object>> indexTokens \n          = new SimpleOrderedMap<>();\n        for (Object fieldValue : fieldValues) {\n          indexTokens.add(String.valueOf(fieldValue), \n                          analyzeValue(fieldValue.toString(), analysisContext));\n        }\n        fieldTokens.add(\"index\", indexTokens);\n      }\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["123698fbe83b595f9e084f0019cd35ab4a01d7f7"],"123698fbe83b595f9e084f0019cd35ab4a01d7f7":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["123698fbe83b595f9e084f0019cd35ab4a01d7f7"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"123698fbe83b595f9e084f0019cd35ab4a01d7f7":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}