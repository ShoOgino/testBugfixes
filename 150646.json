{"path":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory#upgradeToManagedSchema().mjava","commits":[{"id":"9cf81bc8c6e4078e236f0e38b3a2d0271854f207","date":1364832963,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory#upgradeToManagedSchema().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Persist the managed schema and rename the non-managed schema \n   * by appending {@link #UPGRADED_SCHEMA_EXTENSION}.\n   *\n   * Failure to rename the non-managed schema will be logged as a warning,\n   * and no exception will be thrown.\n   */\n  private void upgradeToManagedSchema() {\n    SolrResourceLoader loader = config.getResourceLoader();\n    if (loader instanceof ZkSolrResourceLoader) {\n      zkUgradeToManagedSchema();\n    } else {\n      // Configs are not on ZooKeeper\n      File managedSchemaFile = new File(loader.getConfigDir(), managedSchemaResourceName);\n      OutputStreamWriter writer = null;\n      try {\n        File parentDir = managedSchemaFile.getParentFile();\n        if (!parentDir.isDirectory()) {\n          if (!parentDir.mkdirs()) {\n            final String msg = \"Can't create managed schema directory \" + parentDir.getAbsolutePath();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg);\n          }\n        }\n        final FileOutputStream out = new FileOutputStream(managedSchemaFile);\n        writer = new OutputStreamWriter(out, \"UTF-8\");\n        schema.persist(writer);\n        log.info(\"Upgraded to managed schema at \" + managedSchemaFile.getPath());\n      } catch (IOException e) {\n        final String msg = \"Error persisting managed schema \" + managedSchemaFile;\n        log.error(msg, e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg, e);\n      } finally {\n        IOUtils.closeQuietly(writer);\n        try {\n          FileUtils.sync(managedSchemaFile);\n        } catch (IOException e) {\n          final String msg = \"Error syncing the managed schema file \" + managedSchemaFile;\n          log.error(msg, e);\n        }\n      }\n\n      // After successfully persisting the managed schema, rename the non-managed\n      // schema file by appending UPGRADED_SCHEMA_EXTENSION to its name.\n\n      if (resourceName.equals(managedSchemaResourceName)) {\n        log.info(\"On upgrading to managed schema, did not rename non-managed schema '\"\n            + resourceName + \"' because it's the same as the managed schema's name.\");\n      } else {\n        final File nonManagedSchemaFile = locateConfigFile(resourceName);\n        if (null == nonManagedSchemaFile) {\n          // Don't throw an exception for failure to rename the non-managed schema\n          log.warn(\"On upgrading to managed schema, did not rename non-managed schema \"\n              + resourceName + \" because it's neither an absolute file \"\n              + \"nor under SolrConfig.getConfigDir() or the current directory.\"\n              + \"  PLEASE REMOVE THIS FILE.\");\n        } else {\n          File upgradedSchemaFile = new File(nonManagedSchemaFile.getPath() + UPGRADED_SCHEMA_EXTENSION);\n          if (nonManagedSchemaFile.renameTo(upgradedSchemaFile)) {\n            // Set the resource name to the managed schema so that the CoreAdminHandler returns a findable filename \n            schema.setResourceName(managedSchemaResourceName);\n\n            log.info(\"After upgrading to managed schema, renamed the non-managed schema \"\n                + nonManagedSchemaFile + \" to \" + upgradedSchemaFile);\n          } else {\n            // Don't throw an exception for failure to rename the non-managed schema\n            log.warn(\"Can't rename \" + nonManagedSchemaFile.toString() + \" to \"\n                + upgradedSchemaFile.toString() + \" - PLEASE REMOVE THIS FILE.\");\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory#upgradeToManagedSchema().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory#upgradeToManagedSchema().mjava","sourceNew":"  /**\n   * Persist the managed schema and rename the non-managed schema \n   * by appending {@link #UPGRADED_SCHEMA_EXTENSION}.\n   *\n   * Failure to rename the non-managed schema will be logged as a warning,\n   * and no exception will be thrown.\n   */\n  private void upgradeToManagedSchema() {\n    SolrResourceLoader loader = config.getResourceLoader();\n    if (loader instanceof ZkSolrResourceLoader) {\n      zkUgradeToManagedSchema();\n    } else {\n      // Configs are not on ZooKeeper\n      schema.persistManagedSchema(true);  // Only create it - don't update it if it already exists\n\n      // After successfully persisting the managed schema, rename the non-managed\n      // schema file by appending UPGRADED_SCHEMA_EXTENSION to its name.\n\n      if (resourceName.equals(managedSchemaResourceName)) {\n        log.info(\"On upgrading to managed schema, did not rename non-managed schema '\"\n            + resourceName + \"' because it's the same as the managed schema's name.\");\n      } else {\n        final File nonManagedSchemaFile = locateConfigFile(resourceName);\n        if (null == nonManagedSchemaFile) {\n          // Don't throw an exception for failure to rename the non-managed schema\n          log.warn(\"On upgrading to managed schema, did not rename non-managed schema \"\n              + resourceName + \" because it's neither an absolute file \"\n              + \"nor under SolrConfig.getConfigDir() or the current directory.\"\n              + \"  PLEASE REMOVE THIS FILE.\");\n        } else {\n          File upgradedSchemaFile = new File(nonManagedSchemaFile.getPath() + UPGRADED_SCHEMA_EXTENSION);\n          if (nonManagedSchemaFile.renameTo(upgradedSchemaFile)) {\n            // Set the resource name to the managed schema so that the CoreAdminHandler returns a findable filename \n            schema.setResourceName(managedSchemaResourceName);\n\n            log.info(\"After upgrading to managed schema, renamed the non-managed schema \"\n                + nonManagedSchemaFile + \" to \" + upgradedSchemaFile);\n          } else {\n            // Don't throw an exception for failure to rename the non-managed schema\n            log.warn(\"Can't rename \" + nonManagedSchemaFile.toString() + \" to \"\n                + upgradedSchemaFile.toString() + \" - PLEASE REMOVE THIS FILE.\");\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Persist the managed schema and rename the non-managed schema \n   * by appending {@link #UPGRADED_SCHEMA_EXTENSION}.\n   *\n   * Failure to rename the non-managed schema will be logged as a warning,\n   * and no exception will be thrown.\n   */\n  private void upgradeToManagedSchema() {\n    SolrResourceLoader loader = config.getResourceLoader();\n    if (loader instanceof ZkSolrResourceLoader) {\n      zkUgradeToManagedSchema();\n    } else {\n      // Configs are not on ZooKeeper\n      File managedSchemaFile = new File(loader.getConfigDir(), managedSchemaResourceName);\n      OutputStreamWriter writer = null;\n      try {\n        File parentDir = managedSchemaFile.getParentFile();\n        if (!parentDir.isDirectory()) {\n          if (!parentDir.mkdirs()) {\n            final String msg = \"Can't create managed schema directory \" + parentDir.getAbsolutePath();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg);\n          }\n        }\n        final FileOutputStream out = new FileOutputStream(managedSchemaFile);\n        writer = new OutputStreamWriter(out, \"UTF-8\");\n        schema.persist(writer);\n        log.info(\"Upgraded to managed schema at \" + managedSchemaFile.getPath());\n      } catch (IOException e) {\n        final String msg = \"Error persisting managed schema \" + managedSchemaFile;\n        log.error(msg, e);\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg, e);\n      } finally {\n        IOUtils.closeQuietly(writer);\n        try {\n          FileUtils.sync(managedSchemaFile);\n        } catch (IOException e) {\n          final String msg = \"Error syncing the managed schema file \" + managedSchemaFile;\n          log.error(msg, e);\n        }\n      }\n\n      // After successfully persisting the managed schema, rename the non-managed\n      // schema file by appending UPGRADED_SCHEMA_EXTENSION to its name.\n\n      if (resourceName.equals(managedSchemaResourceName)) {\n        log.info(\"On upgrading to managed schema, did not rename non-managed schema '\"\n            + resourceName + \"' because it's the same as the managed schema's name.\");\n      } else {\n        final File nonManagedSchemaFile = locateConfigFile(resourceName);\n        if (null == nonManagedSchemaFile) {\n          // Don't throw an exception for failure to rename the non-managed schema\n          log.warn(\"On upgrading to managed schema, did not rename non-managed schema \"\n              + resourceName + \" because it's neither an absolute file \"\n              + \"nor under SolrConfig.getConfigDir() or the current directory.\"\n              + \"  PLEASE REMOVE THIS FILE.\");\n        } else {\n          File upgradedSchemaFile = new File(nonManagedSchemaFile.getPath() + UPGRADED_SCHEMA_EXTENSION);\n          if (nonManagedSchemaFile.renameTo(upgradedSchemaFile)) {\n            // Set the resource name to the managed schema so that the CoreAdminHandler returns a findable filename \n            schema.setResourceName(managedSchemaResourceName);\n\n            log.info(\"After upgrading to managed schema, renamed the non-managed schema \"\n                + nonManagedSchemaFile + \" to \" + upgradedSchemaFile);\n          } else {\n            // Don't throw an exception for failure to rename the non-managed schema\n            log.warn(\"Can't rename \" + nonManagedSchemaFile.toString() + \" to \"\n                + upgradedSchemaFile.toString() + \" - PLEASE REMOVE THIS FILE.\");\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a626ec4d1c92e59fe390724d6220081047b03ce7","date":1448021525,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory#upgradeToManagedSchema().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory#upgradeToManagedSchema().mjava","sourceNew":"  /**\n   * Persist the managed schema and rename the non-managed schema \n   * by appending {@link #UPGRADED_SCHEMA_EXTENSION}.\n   *\n   * Failure to rename the non-managed schema will be logged as a warning,\n   * and no exception will be thrown.\n   */\n  private void upgradeToManagedSchema() {\n    SolrResourceLoader loader = config.getResourceLoader();\n    if (loader instanceof ZkSolrResourceLoader) {\n      zkUgradeToManagedSchema();\n    } else {\n      // Configs are not on ZooKeeper\n      schema.persistManagedSchema(true);  // Only create it - don't update it if it already exists\n\n      // After successfully persisting the managed schema, rename the non-managed\n      // schema file by appending UPGRADED_SCHEMA_EXTENSION to its name.\n\n      if (resourceName.equals(managedSchemaResourceName)) {\n        log.info(\"On upgrading to managed schema, did not rename non-managed schema '\"\n            + resourceName + \"' because it's the same as the managed schema's name.\");\n      } else {\n        final File nonManagedSchemaFile = locateConfigFile(resourceName);\n        if (null == nonManagedSchemaFile) {\n          // Don't throw an exception for failure to rename the non-managed schema\n          log.warn(\"On upgrading to managed schema, did not rename non-managed schema \"\n              + resourceName + \" because it's neither an absolute file \"\n              + \"nor under SolrConfig.getConfigDir() or the current directory.\"\n              + \"  PLEASE REMOVE THIS FILE.\");\n        } else {\n          File upgradedSchemaFile = new File(nonManagedSchemaFile + UPGRADED_SCHEMA_EXTENSION);\n          if (nonManagedSchemaFile.renameTo(upgradedSchemaFile)) {\n            // Set the resource name to the managed schema so that the CoreAdminHandler returns a findable filename \n            schema.setResourceName(managedSchemaResourceName);\n\n            log.info(\"After upgrading to managed schema, renamed the non-managed schema \"\n                + nonManagedSchemaFile + \" to \" + upgradedSchemaFile);\n          } else {\n            // Don't throw an exception for failure to rename the non-managed schema\n            log.warn(\"Can't rename \" + nonManagedSchemaFile.toString() + \" to \"\n                + upgradedSchemaFile.toString() + \" - PLEASE REMOVE THIS FILE.\");\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Persist the managed schema and rename the non-managed schema \n   * by appending {@link #UPGRADED_SCHEMA_EXTENSION}.\n   *\n   * Failure to rename the non-managed schema will be logged as a warning,\n   * and no exception will be thrown.\n   */\n  private void upgradeToManagedSchema() {\n    SolrResourceLoader loader = config.getResourceLoader();\n    if (loader instanceof ZkSolrResourceLoader) {\n      zkUgradeToManagedSchema();\n    } else {\n      // Configs are not on ZooKeeper\n      schema.persistManagedSchema(true);  // Only create it - don't update it if it already exists\n\n      // After successfully persisting the managed schema, rename the non-managed\n      // schema file by appending UPGRADED_SCHEMA_EXTENSION to its name.\n\n      if (resourceName.equals(managedSchemaResourceName)) {\n        log.info(\"On upgrading to managed schema, did not rename non-managed schema '\"\n            + resourceName + \"' because it's the same as the managed schema's name.\");\n      } else {\n        final File nonManagedSchemaFile = locateConfigFile(resourceName);\n        if (null == nonManagedSchemaFile) {\n          // Don't throw an exception for failure to rename the non-managed schema\n          log.warn(\"On upgrading to managed schema, did not rename non-managed schema \"\n              + resourceName + \" because it's neither an absolute file \"\n              + \"nor under SolrConfig.getConfigDir() or the current directory.\"\n              + \"  PLEASE REMOVE THIS FILE.\");\n        } else {\n          File upgradedSchemaFile = new File(nonManagedSchemaFile.getPath() + UPGRADED_SCHEMA_EXTENSION);\n          if (nonManagedSchemaFile.renameTo(upgradedSchemaFile)) {\n            // Set the resource name to the managed schema so that the CoreAdminHandler returns a findable filename \n            schema.setResourceName(managedSchemaResourceName);\n\n            log.info(\"After upgrading to managed schema, renamed the non-managed schema \"\n                + nonManagedSchemaFile + \" to \" + upgradedSchemaFile);\n          } else {\n            // Don't throw an exception for failure to rename the non-managed schema\n            log.warn(\"Can't rename \" + nonManagedSchemaFile.toString() + \" to \"\n                + upgradedSchemaFile.toString() + \" - PLEASE REMOVE THIS FILE.\");\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9df8125ba9193a2e2e285ed92157810b1952a244","date":1587326330,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory#upgradeToManagedSchema().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory#upgradeToManagedSchema().mjava","sourceNew":"  /**\n   * Persist the managed schema and rename the non-managed schema \n   * by appending {@link #UPGRADED_SCHEMA_EXTENSION}.\n   *\n   * Failure to rename the non-managed schema will be logged as a warning,\n   * and no exception will be thrown.\n   */\n  private void upgradeToManagedSchema() {\n    SolrResourceLoader loader = config.getResourceLoader();\n    if (loader instanceof ZkSolrResourceLoader) {\n      zkUgradeToManagedSchema();\n    } else {\n      // Configs are not on ZooKeeper\n      schema.persistManagedSchema(true);  // Only create it - don't update it if it already exists\n\n      // After successfully persisting the managed schema, rename the non-managed\n      // schema file by appending UPGRADED_SCHEMA_EXTENSION to its name.\n\n      if (resourceName.equals(managedSchemaResourceName)) {\n        log.info(\"On upgrading to managed schema, did not rename non-managed schema '{}' because it's the same as the managed schema's name.\"\n            , resourceName);\n      } else {\n        final File nonManagedSchemaFile = locateConfigFile(resourceName);\n        if (null == nonManagedSchemaFile) {\n          // Don't throw an exception for failure to rename the non-managed schema\n          if (log.isWarnEnabled()) {\n            log.warn(\"On upgrading to managed schema, did not rename non-managed schema {} \"\n                + \"because it's neither an absolute file \"\n                + \"nor under SolrConfig.getConfigDir() or the current directory. \"\n                + \"PLEASE REMOVE THIS FILE.\", resourceName);\n          }\n        } else {\n          File upgradedSchemaFile = new File(nonManagedSchemaFile + UPGRADED_SCHEMA_EXTENSION);\n          if (nonManagedSchemaFile.renameTo(upgradedSchemaFile)) {\n            // Set the resource name to the managed schema so that the CoreAdminHandler returns a findable filename \n            schema.setResourceName(managedSchemaResourceName);\n\n            log.info(\"After upgrading to managed schema, renamed the non-managed schema {} to {}\"\n                , nonManagedSchemaFile, upgradedSchemaFile);\n          } else {\n            // Don't throw an exception for failure to rename the non-managed schema\n            log.warn(\"Can't rename {} to {} - PLEASE REMOVE THIS FILE.\"\n                , nonManagedSchemaFile, upgradedSchemaFile);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Persist the managed schema and rename the non-managed schema \n   * by appending {@link #UPGRADED_SCHEMA_EXTENSION}.\n   *\n   * Failure to rename the non-managed schema will be logged as a warning,\n   * and no exception will be thrown.\n   */\n  private void upgradeToManagedSchema() {\n    SolrResourceLoader loader = config.getResourceLoader();\n    if (loader instanceof ZkSolrResourceLoader) {\n      zkUgradeToManagedSchema();\n    } else {\n      // Configs are not on ZooKeeper\n      schema.persistManagedSchema(true);  // Only create it - don't update it if it already exists\n\n      // After successfully persisting the managed schema, rename the non-managed\n      // schema file by appending UPGRADED_SCHEMA_EXTENSION to its name.\n\n      if (resourceName.equals(managedSchemaResourceName)) {\n        log.info(\"On upgrading to managed schema, did not rename non-managed schema '\"\n            + resourceName + \"' because it's the same as the managed schema's name.\");\n      } else {\n        final File nonManagedSchemaFile = locateConfigFile(resourceName);\n        if (null == nonManagedSchemaFile) {\n          // Don't throw an exception for failure to rename the non-managed schema\n          log.warn(\"On upgrading to managed schema, did not rename non-managed schema \"\n              + resourceName + \" because it's neither an absolute file \"\n              + \"nor under SolrConfig.getConfigDir() or the current directory.\"\n              + \"  PLEASE REMOVE THIS FILE.\");\n        } else {\n          File upgradedSchemaFile = new File(nonManagedSchemaFile + UPGRADED_SCHEMA_EXTENSION);\n          if (nonManagedSchemaFile.renameTo(upgradedSchemaFile)) {\n            // Set the resource name to the managed schema so that the CoreAdminHandler returns a findable filename \n            schema.setResourceName(managedSchemaResourceName);\n\n            log.info(\"After upgrading to managed schema, renamed the non-managed schema \"\n                + nonManagedSchemaFile + \" to \" + upgradedSchemaFile);\n          } else {\n            // Don't throw an exception for failure to rename the non-managed schema\n            log.warn(\"Can't rename \" + nonManagedSchemaFile.toString() + \" to \"\n                + upgradedSchemaFile.toString() + \" - PLEASE REMOVE THIS FILE.\");\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory#upgradeToManagedSchema().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory#upgradeToManagedSchema().mjava","sourceNew":"  /**\n   * Persist the managed schema and rename the non-managed schema \n   * by appending {@link #UPGRADED_SCHEMA_EXTENSION}.\n   *\n   * Failure to rename the non-managed schema will be logged as a warning,\n   * and no exception will be thrown.\n   */\n  private void upgradeToManagedSchema() {\n    SolrResourceLoader loader = config.getResourceLoader();\n    if (loader instanceof ZkSolrResourceLoader) {\n      zkUgradeToManagedSchema();\n    } else {\n      // Configs are not on ZooKeeper\n      schema.persistManagedSchema(true);  // Only create it - don't update it if it already exists\n\n      // After successfully persisting the managed schema, rename the non-managed\n      // schema file by appending UPGRADED_SCHEMA_EXTENSION to its name.\n\n      if (resourceName.equals(managedSchemaResourceName)) {\n        log.info(\"On upgrading to managed schema, did not rename non-managed schema '{}' because it's the same as the managed schema's name.\"\n            , resourceName);\n      } else {\n        final File nonManagedSchemaFile = locateConfigFile(resourceName);\n        if (null == nonManagedSchemaFile) {\n          // Don't throw an exception for failure to rename the non-managed schema\n          log.warn(\"On upgrading to managed schema, did not rename non-managed schema {} {}{}{}\"\n              , resourceName\n              , \"because it's neither an absolute file \"\n              , \"nor under SolrConfig.getConfigDir() or the current directory. \"\n              , \"PLEASE REMOVE THIS FILE.\");\n        } else {\n          File upgradedSchemaFile = new File(nonManagedSchemaFile + UPGRADED_SCHEMA_EXTENSION);\n          if (nonManagedSchemaFile.renameTo(upgradedSchemaFile)) {\n            // Set the resource name to the managed schema so that the CoreAdminHandler returns a findable filename \n            schema.setResourceName(managedSchemaResourceName);\n\n            log.info(\"After upgrading to managed schema, renamed the non-managed schema {} to {}\"\n                , nonManagedSchemaFile, upgradedSchemaFile);\n          } else {\n            // Don't throw an exception for failure to rename the non-managed schema\n            log.warn(\"Can't rename {} to {} - PLEASE REMOVE THIS FILE.\"\n                , nonManagedSchemaFile, upgradedSchemaFile);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Persist the managed schema and rename the non-managed schema \n   * by appending {@link #UPGRADED_SCHEMA_EXTENSION}.\n   *\n   * Failure to rename the non-managed schema will be logged as a warning,\n   * and no exception will be thrown.\n   */\n  private void upgradeToManagedSchema() {\n    SolrResourceLoader loader = config.getResourceLoader();\n    if (loader instanceof ZkSolrResourceLoader) {\n      zkUgradeToManagedSchema();\n    } else {\n      // Configs are not on ZooKeeper\n      schema.persistManagedSchema(true);  // Only create it - don't update it if it already exists\n\n      // After successfully persisting the managed schema, rename the non-managed\n      // schema file by appending UPGRADED_SCHEMA_EXTENSION to its name.\n\n      if (resourceName.equals(managedSchemaResourceName)) {\n        log.info(\"On upgrading to managed schema, did not rename non-managed schema '{}' because it's the same as the managed schema's name.\"\n            , resourceName);\n      } else {\n        final File nonManagedSchemaFile = locateConfigFile(resourceName);\n        if (null == nonManagedSchemaFile) {\n          // Don't throw an exception for failure to rename the non-managed schema\n          if (log.isWarnEnabled()) {\n            log.warn(\"On upgrading to managed schema, did not rename non-managed schema {} \"\n                + \"because it's neither an absolute file \"\n                + \"nor under SolrConfig.getConfigDir() or the current directory. \"\n                + \"PLEASE REMOVE THIS FILE.\", resourceName);\n          }\n        } else {\n          File upgradedSchemaFile = new File(nonManagedSchemaFile + UPGRADED_SCHEMA_EXTENSION);\n          if (nonManagedSchemaFile.renameTo(upgradedSchemaFile)) {\n            // Set the resource name to the managed schema so that the CoreAdminHandler returns a findable filename \n            schema.setResourceName(managedSchemaResourceName);\n\n            log.info(\"After upgrading to managed schema, renamed the non-managed schema {} to {}\"\n                , nonManagedSchemaFile, upgradedSchemaFile);\n          } else {\n            // Don't throw an exception for failure to rename the non-managed schema\n            log.warn(\"Can't rename {} to {} - PLEASE REMOVE THIS FILE.\"\n                , nonManagedSchemaFile, upgradedSchemaFile);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9cf81bc8c6e4078e236f0e38b3a2d0271854f207":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["08970e5b8411182a29412c177eff67ec1110095b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"575e66bd4b2349209027f6801184da7fc3cba13f":["9df8125ba9193a2e2e285ed92157810b1952a244"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"],"9df8125ba9193a2e2e285ed92157810b1952a244":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"08970e5b8411182a29412c177eff67ec1110095b":["9cf81bc8c6e4078e236f0e38b3a2d0271854f207"]},"commit2Childs":{"9cf81bc8c6e4078e236f0e38b3a2d0271854f207":["08970e5b8411182a29412c177eff67ec1110095b"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["9df8125ba9193a2e2e285ed92157810b1952a244"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9cf81bc8c6e4078e236f0e38b3a2d0271854f207"],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"08970e5b8411182a29412c177eff67ec1110095b":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"9df8125ba9193a2e2e285ed92157810b1952a244":["575e66bd4b2349209027f6801184da7fc3cba13f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}