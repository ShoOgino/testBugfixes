{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testOutOfMemoryErrorCausesCloseToFail().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testOutOfMemoryErrorCausesCloseToFail().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testOutOfMemoryErrorCausesCloseToFail().mjava","sourceNew":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final AtomicBoolean thrown = new AtomicBoolean(false);\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setInfoStream(new InfoStream() {\n        @Override\n        public void message(String component, final String message) {\n          if (message.startsWith(\"now flush at close\") && thrown.compareAndSet(false, true)) {\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n\n        @Override\n        public boolean isEnabled(String component) {\n          return true;\n        }\n        \n        @Override\n        public void close() throws IOException {}\n      }));\n\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final AtomicBoolean thrown = new AtomicBoolean(false);\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setInfoStream(new InfoStream() {\n        @Override\n        public void message(String component, final String message) {\n          if (message.startsWith(\"now flush at close\") && thrown.compareAndSet(false, true)) {\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n\n        @Override\n        public boolean isEnabled(String component) {\n          return true;\n        }\n        \n        @Override\n        public void close() throws IOException {}\n      }));\n\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testOutOfMemoryErrorCausesCloseToFail().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testOutOfMemoryErrorCausesCloseToFail().mjava","sourceNew":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final AtomicBoolean thrown = new AtomicBoolean(false);\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setInfoStream(new InfoStream() {\n        @Override\n        public void message(String component, final String message) {\n          if (message.startsWith(\"now flush at close\") && thrown.compareAndSet(false, true)) {\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n\n        @Override\n        public boolean isEnabled(String component) {\n          return true;\n        }\n        \n        @Override\n        public void close() throws IOException {}\n      }));\n\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final AtomicBoolean thrown = new AtomicBoolean(false);\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setInfoStream(new InfoStream() {\n        @Override\n        public void message(String component, final String message) {\n          if (message.startsWith(\"now flush at close\") && thrown.compareAndSet(false, true)) {\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n\n        @Override\n        public boolean isEnabled(String component) {\n          return true;\n        }\n        \n        @Override\n        public void close() throws IOException {}\n      }));\n\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testOutOfMemoryErrorCausesCloseToFail().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testOutOfMemoryErrorCausesCloseToFail().mjava","sourceNew":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final AtomicBoolean thrown = new AtomicBoolean(false);\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setInfoStream(new InfoStream() {\n        @Override\n        public void message(String component, final String message) {\n          if (message.startsWith(\"now flush at close\") && thrown.compareAndSet(false, true)) {\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n\n        @Override\n        public boolean isEnabled(String component) {\n          return true;\n        }\n        \n        @Override\n        public void close() {}\n      }));\n\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final AtomicBoolean thrown = new AtomicBoolean(false);\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setInfoStream(new InfoStream() {\n        @Override\n        public void message(String component, final String message) {\n          if (message.startsWith(\"now flush at close\") && thrown.compareAndSet(false, true)) {\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n\n        @Override\n        public boolean isEnabled(String component) {\n          return true;\n        }\n        \n        @Override\n        public void close() throws IOException {}\n      }));\n\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":["06584e6e98d592b34e1329b384182f368d2025e8"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testOutOfMemoryErrorCausesCloseToFail().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testOutOfMemoryErrorCausesCloseToFail().mjava","sourceNew":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final AtomicBoolean thrown = new AtomicBoolean(false);\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setInfoStream(new InfoStream() {\n        @Override\n        public void message(String component, final String message) {\n          if (message.startsWith(\"now flush at close\") && thrown.compareAndSet(false, true)) {\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n\n        @Override\n        public boolean isEnabled(String component) {\n          return true;\n        }\n        \n        @Override\n        public void close() {}\n      }));\n\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final AtomicBoolean thrown = new AtomicBoolean(false);\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setInfoStream(new InfoStream() {\n        @Override\n        public void message(String component, final String message) {\n          if (message.startsWith(\"now flush at close\") && thrown.compareAndSet(false, true)) {\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n\n        @Override\n        public boolean isEnabled(String component) {\n          return true;\n        }\n        \n        @Override\n        public void close() throws IOException {}\n      }));\n\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testOutOfMemoryErrorCausesCloseToFail().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testOutOfMemoryErrorCausesCloseToFail().mjava","sourceNew":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final AtomicBoolean thrown = new AtomicBoolean(false);\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setInfoStream(new InfoStream() {\n        @Override\n        public void message(String component, final String message) {\n          if (message.startsWith(\"now flush at shutdown\") && thrown.compareAndSet(false, true)) {\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n\n        @Override\n        public boolean isEnabled(String component) {\n          return true;\n        }\n        \n        @Override\n        public void close() {}\n      }));\n\n    try {\n      writer.shutdown();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final AtomicBoolean thrown = new AtomicBoolean(false);\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setInfoStream(new InfoStream() {\n        @Override\n        public void message(String component, final String message) {\n          if (message.startsWith(\"now flush at close\") && thrown.compareAndSet(false, true)) {\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n\n        @Override\n        public boolean isEnabled(String component) {\n          return true;\n        }\n        \n        @Override\n        public void close() {}\n      }));\n\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testOutOfMemoryErrorCausesCloseToFail().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testOutOfMemoryErrorCausesCloseToFail().mjava","sourceNew":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final AtomicBoolean thrown = new AtomicBoolean(false);\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setInfoStream(new InfoStream() {\n        @Override\n        public void message(String component, final String message) {\n          if (message.startsWith(\"now flush at shutdown\") && thrown.compareAndSet(false, true)) {\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n\n        @Override\n        public boolean isEnabled(String component) {\n          return true;\n        }\n        \n        @Override\n        public void close() {}\n      }));\n\n    try {\n      writer.shutdown();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final AtomicBoolean thrown = new AtomicBoolean(false);\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setInfoStream(new InfoStream() {\n        @Override\n        public void message(String component, final String message) {\n          if (message.startsWith(\"now flush at shutdown\") && thrown.compareAndSet(false, true)) {\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n\n        @Override\n        public boolean isEnabled(String component) {\n          return true;\n        }\n        \n        @Override\n        public void close() {}\n      }));\n\n    try {\n      writer.shutdown();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testOutOfMemoryErrorCausesCloseToFail().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testOutOfMemoryErrorCausesCloseToFail().mjava","sourceNew":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final AtomicBoolean thrown = new AtomicBoolean(false);\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setInfoStream(new InfoStream() {\n        @Override\n        public void message(String component, final String message) {\n          if (message.startsWith(\"now flush at close\") && thrown.compareAndSet(false, true)) {\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n\n        @Override\n        public boolean isEnabled(String component) {\n          return true;\n        }\n        \n        @Override\n        public void close() {}\n      }));\n\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final AtomicBoolean thrown = new AtomicBoolean(false);\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setInfoStream(new InfoStream() {\n        @Override\n        public void message(String component, final String message) {\n          if (message.startsWith(\"now flush at shutdown\") && thrown.compareAndSet(false, true)) {\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n\n        @Override\n        public boolean isEnabled(String component) {\n          return true;\n        }\n        \n        @Override\n        public void close() {}\n      }));\n\n    try {\n      writer.shutdown();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testOutOfMemoryErrorCausesCloseToFail().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testOutOfMemoryErrorCausesCloseToFail().mjava","sourceNew":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final AtomicBoolean thrown = new AtomicBoolean(false);\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setInfoStream(new InfoStream() {\n        @Override\n        public void message(String component, final String message) {\n          if (message.startsWith(\"now flush at close\") && thrown.compareAndSet(false, true)) {\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n\n        @Override\n        public boolean isEnabled(String component) {\n          return true;\n        }\n        \n        @Override\n        public void close() {}\n      }));\n\n    expectThrows(OutOfMemoryError.class, () -> {\n      writer.close();\n    });\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1429\n  public void testOutOfMemoryErrorCausesCloseToFail() throws Exception {\n\n    final AtomicBoolean thrown = new AtomicBoolean(false);\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setInfoStream(new InfoStream() {\n        @Override\n        public void message(String component, final String message) {\n          if (message.startsWith(\"now flush at close\") && thrown.compareAndSet(false, true)) {\n            throw new OutOfMemoryError(\"fake OOME at \" + message);\n          }\n        }\n\n        @Override\n        public boolean isEnabled(String component) {\n          return true;\n        }\n        \n        @Override\n        public void close() {}\n      }));\n\n    try {\n      writer.close();\n      fail(\"OutOfMemoryError expected\");\n    }\n    catch (final OutOfMemoryError expected) {}\n\n    // throws IllegalStateEx w/o bug fix\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":["25a69ca6651c6c39154826d22ee7a0b606cb5d8c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["05fe562aa248790944d43cdd478f512572835ba0"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}