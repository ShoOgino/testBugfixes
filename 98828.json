{"path":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues.OrdinalMap#build(Object,TermsEnum[],long[],float).mjava","commits":[{"id":"5bcfd864fb8b916f7d21f2579d2010a31892055d","date":1403359094,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues.OrdinalMap#build(Object,TermsEnum[],long[],float).mjava","pathOld":"/dev/null","sourceNew":"    /** \n     * Creates an ordinal map that allows mapping ords to/from a merged\n     * space from <code>subs</code>.\n     * @param owner a cache key\n     * @param subs TermsEnums that support {@link TermsEnum#ord()}. They need\n     *             not be dense (e.g. can be FilteredTermsEnums}.\n     * @param weights a weight for each sub. This is ideally correlated with\n     *             the number of unique terms that each sub introduces compared\n     *             to the other subs\n     * @throws IOException if an I/O error occurred.\n     */\n    public static OrdinalMap build(Object owner, TermsEnum subs[], long[] weights, float acceptableOverheadRatio) throws IOException {\n      if (subs.length != weights.length) {\n        throw new IllegalArgumentException(\"subs and weights must have the same length\");\n      }\n\n      // enums are not sorted, so let's sort to save memory\n      final SegmentMap segmentMap = new SegmentMap(weights);\n      return new OrdinalMap(owner, subs, segmentMap, acceptableOverheadRatio);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d211216c83f01894810543d1c107160a9ae3650b","date":1488289605,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues.OrdinalMap#build(IndexReader.CacheKey,TermsEnum[],long[],float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues.OrdinalMap#build(Object,TermsEnum[],long[],float).mjava","sourceNew":"    /** \n     * Creates an ordinal map that allows mapping ords to/from a merged\n     * space from <code>subs</code>.\n     * @param owner a cache key\n     * @param subs TermsEnums that support {@link TermsEnum#ord()}. They need\n     *             not be dense (e.g. can be FilteredTermsEnums}.\n     * @param weights a weight for each sub. This is ideally correlated with\n     *             the number of unique terms that each sub introduces compared\n     *             to the other subs\n     * @throws IOException if an I/O error occurred.\n     */\n    public static OrdinalMap build(IndexReader.CacheKey owner, TermsEnum subs[], long[] weights, float acceptableOverheadRatio) throws IOException {\n      if (subs.length != weights.length) {\n        throw new IllegalArgumentException(\"subs and weights must have the same length\");\n      }\n\n      // enums are not sorted, so let's sort to save memory\n      final SegmentMap segmentMap = new SegmentMap(weights);\n      return new OrdinalMap(owner, subs, segmentMap, acceptableOverheadRatio);\n    }\n\n","sourceOld":"    /** \n     * Creates an ordinal map that allows mapping ords to/from a merged\n     * space from <code>subs</code>.\n     * @param owner a cache key\n     * @param subs TermsEnums that support {@link TermsEnum#ord()}. They need\n     *             not be dense (e.g. can be FilteredTermsEnums}.\n     * @param weights a weight for each sub. This is ideally correlated with\n     *             the number of unique terms that each sub introduces compared\n     *             to the other subs\n     * @throws IOException if an I/O error occurred.\n     */\n    public static OrdinalMap build(Object owner, TermsEnum subs[], long[] weights, float acceptableOverheadRatio) throws IOException {\n      if (subs.length != weights.length) {\n        throw new IllegalArgumentException(\"subs and weights must have the same length\");\n      }\n\n      // enums are not sorted, so let's sort to save memory\n      final SegmentMap segmentMap = new SegmentMap(weights);\n      return new OrdinalMap(owner, subs, segmentMap, acceptableOverheadRatio);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d211216c83f01894810543d1c107160a9ae3650b":["5bcfd864fb8b916f7d21f2579d2010a31892055d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bcfd864fb8b916f7d21f2579d2010a31892055d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d211216c83f01894810543d1c107160a9ae3650b"]},"commit2Childs":{"d211216c83f01894810543d1c107160a9ae3650b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5bcfd864fb8b916f7d21f2579d2010a31892055d"],"5bcfd864fb8b916f7d21f2579d2010a31892055d":["d211216c83f01894810543d1c107160a9ae3650b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}