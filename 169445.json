{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#createConfNode(String,String,boolean).mjava","commits":[{"id":"707fc23d793376ed98be0bd2f100d32dd5a9c0df","date":1422324604,"type":1,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#createConfNode(String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#createConfNode(String,ZkNodeProps,boolean).mjava","sourceNew":"  /**\n   * This doesn't validate the config (path) itself and is just responsible for creating the confNode.\n   * That check should be done before the config node is created.\n   */\n  private void createConfNode(String configName, String coll, boolean isLegacyCloud) throws KeeperException, InterruptedException {\n    \n    if (configName != null) {\n      String collDir = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll;\n      log.info(\"creating collections conf node {} \", collDir);\n      byte[] data = ZkStateReader.toJSON(ZkNodeProps.makeMap(ZkController.CONFIGNAME_PROP, configName));\n      if (zkStateReader.getZkClient().exists(collDir, true)) {\n        zkStateReader.getZkClient().setData(collDir, data, true);\n      } else {\n        zkStateReader.getZkClient().makePath(collDir, data, true);\n      }\n    } else {\n      if(isLegacyCloud){\n        log.warn(\"Could not obtain config name\");\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Unable to get config name\");\n      }\n    }\n\n  }\n\n","sourceOld":"  private String createConfNode(String coll, ZkNodeProps message, boolean isLegacyCloud) throws KeeperException, InterruptedException {\n    String configName = message.getStr(OverseerCollectionProcessor.COLL_CONF);\n    if(configName == null){\n      // if there is only one conf, use that\n      List<String> configNames=null;\n      try {\n        configNames = zkStateReader.getZkClient().getChildren(ZkController.CONFIGS_ZKNODE, null, true);\n        if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        } else if(configNames.contains(coll)) {\n          configName = coll;\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n\n    }\n\n    if (configName != null) {\n      String collDir = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll;\n      log.info(\"creating collections conf node {} \", collDir);\n      byte[] data = ZkStateReader.toJSON(ZkNodeProps.makeMap(ZkController.CONFIGNAME_PROP, configName));\n      if (zkStateReader.getZkClient().exists(collDir, true)) {\n        zkStateReader.getZkClient().setData(collDir, data, true);\n      } else {\n        zkStateReader.getZkClient().makePath(collDir, data, true);\n      }\n    } else {\n      if(isLegacyCloud){\n        log.warn(\"Could not obtain config name\");\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Unable to get config name\");\n      }\n    }\n    return configName;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07dbf37ea1062f6f3f4fc7deb3ae385ab837ebc8","date":1431966199,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#createConfNode(String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#createConfNode(String,String,boolean).mjava","sourceNew":"  /**\n   * This doesn't validate the config (path) itself and is just responsible for creating the confNode.\n   * That check should be done before the config node is created.\n   */\n  private void createConfNode(String configName, String coll, boolean isLegacyCloud) throws KeeperException, InterruptedException {\n    \n    if (configName != null) {\n      String collDir = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll;\n      log.info(\"creating collections conf node {} \", collDir);\n      byte[] data = ZkStateReader.toJSON(makeMap(ZkController.CONFIGNAME_PROP, configName));\n      if (zkStateReader.getZkClient().exists(collDir, true)) {\n        zkStateReader.getZkClient().setData(collDir, data, true);\n      } else {\n        zkStateReader.getZkClient().makePath(collDir, data, true);\n      }\n    } else {\n      if(isLegacyCloud){\n        log.warn(\"Could not obtain config name\");\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Unable to get config name\");\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * This doesn't validate the config (path) itself and is just responsible for creating the confNode.\n   * That check should be done before the config node is created.\n   */\n  private void createConfNode(String configName, String coll, boolean isLegacyCloud) throws KeeperException, InterruptedException {\n    \n    if (configName != null) {\n      String collDir = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll;\n      log.info(\"creating collections conf node {} \", collDir);\n      byte[] data = ZkStateReader.toJSON(ZkNodeProps.makeMap(ZkController.CONFIGNAME_PROP, configName));\n      if (zkStateReader.getZkClient().exists(collDir, true)) {\n        zkStateReader.getZkClient().setData(collDir, data, true);\n      } else {\n        zkStateReader.getZkClient().makePath(collDir, data, true);\n      }\n    } else {\n      if(isLegacyCloud){\n        log.warn(\"Could not obtain config name\");\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Unable to get config name\");\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#createConfNode(String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#createConfNode(String,String,boolean).mjava","sourceNew":"  /**\n   * This doesn't validate the config (path) itself and is just responsible for creating the confNode.\n   * That check should be done before the config node is created.\n   */\n  private void createConfNode(String configName, String coll, boolean isLegacyCloud) throws KeeperException, InterruptedException {\n    \n    if (configName != null) {\n      String collDir = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll;\n      log.info(\"creating collections conf node {} \", collDir);\n      byte[] data = Utils.toJSON(makeMap(ZkController.CONFIGNAME_PROP, configName));\n      if (zkStateReader.getZkClient().exists(collDir, true)) {\n        zkStateReader.getZkClient().setData(collDir, data, true);\n      } else {\n        zkStateReader.getZkClient().makePath(collDir, data, true);\n      }\n    } else {\n      if(isLegacyCloud){\n        log.warn(\"Could not obtain config name\");\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Unable to get config name\");\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * This doesn't validate the config (path) itself and is just responsible for creating the confNode.\n   * That check should be done before the config node is created.\n   */\n  private void createConfNode(String configName, String coll, boolean isLegacyCloud) throws KeeperException, InterruptedException {\n    \n    if (configName != null) {\n      String collDir = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll;\n      log.info(\"creating collections conf node {} \", collDir);\n      byte[] data = ZkStateReader.toJSON(makeMap(ZkController.CONFIGNAME_PROP, configName));\n      if (zkStateReader.getZkClient().exists(collDir, true)) {\n        zkStateReader.getZkClient().setData(collDir, data, true);\n      } else {\n        zkStateReader.getZkClient().makePath(collDir, data, true);\n      }\n    } else {\n      if(isLegacyCloud){\n        log.warn(\"Could not obtain config name\");\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Unable to get config name\");\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":5,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#createConfNode(String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#createConfNode(String,String,boolean).mjava","sourceNew":"  /**\n   * This doesn't validate the config (path) itself and is just responsible for creating the confNode.\n   * That check should be done before the config node is created.\n   */\n  private void createConfNode(String configName, String coll, boolean isLegacyCloud) throws KeeperException, InterruptedException {\n    \n    if (configName != null) {\n      String collDir = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll;\n      log.info(\"creating collections conf node {} \", collDir);\n      byte[] data = Utils.toJSON(makeMap(ZkController.CONFIGNAME_PROP, configName));\n      if (zkStateReader.getZkClient().exists(collDir, true)) {\n        zkStateReader.getZkClient().setData(collDir, data, true);\n      } else {\n        zkStateReader.getZkClient().makePath(collDir, data, true);\n      }\n    } else {\n      if(isLegacyCloud){\n        log.warn(\"Could not obtain config name\");\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Unable to get config name\");\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * This doesn't validate the config (path) itself and is just responsible for creating the confNode.\n   * That check should be done before the config node is created.\n   */\n  private void createConfNode(String configName, String coll, boolean isLegacyCloud) throws KeeperException, InterruptedException {\n    \n    if (configName != null) {\n      String collDir = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + coll;\n      log.info(\"creating collections conf node {} \", collDir);\n      byte[] data = Utils.toJSON(makeMap(ZkController.CONFIGNAME_PROP, configName));\n      if (zkStateReader.getZkClient().exists(collDir, true)) {\n        zkStateReader.getZkClient().setData(collDir, data, true);\n      } else {\n        zkStateReader.getZkClient().makePath(collDir, data, true);\n      }\n    } else {\n      if(isLegacyCloud){\n        log.warn(\"Could not obtain config name\");\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Unable to get config name\");\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"07dbf37ea1062f6f3f4fc7deb3ae385ab837ebc8":["707fc23d793376ed98be0bd2f100d32dd5a9c0df"],"707fc23d793376ed98be0bd2f100d32dd5a9c0df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b693a83132c9e45afcd564fd65a25b60ed80388b":["07dbf37ea1062f6f3f4fc7deb3ae385ab837ebc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"]},"commit2Childs":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"07dbf37ea1062f6f3f4fc7deb3ae385ab837ebc8":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"707fc23d793376ed98be0bd2f100d32dd5a9c0df":["07dbf37ea1062f6f3f4fc7deb3ae385ab837ebc8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["707fc23d793376ed98be0bd2f100d32dd5a9c0df"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}