{"path":"lucene/src/test/org/apache/lucene/search/QueryUtils#wrapSearcher(Random,Searcher,int).mjava","commits":[{"id":"53a31399f2471493d67b19a95c028a74e0113b6a","date":1289817072,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/QueryUtils#wrapSearcher(Random,Searcher,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/QueryUtils#wrapSearcher(Searcher,int).mjava","sourceNew":"  /**\n   * Given a Searcher, returns a new MultiSearcher wrapping the  \n   * the original Searcher, \n   * as well as several \"empty\" IndexSearchers -- some of which will have\n   * deleted documents in them.  This new MultiSearcher \n   * should behave exactly the same as the original Searcher.\n   * @param s the Searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in hte middle, if positive s will be the last sub\n   */\n  public static MultiSearcher wrapSearcher(Random random, final Searcher s, final int edge) \n    throws IOException {\n\n    // we can't put deleted docs before the nested reader, because\n    // it will through off the docIds\n    Searcher[] searchers = new Searcher[] {\n      edge < 0 ? s : new IndexSearcher(makeEmptyIndex(random, 0), true),\n      new MultiSearcher(new Searcher[] {\n        new IndexSearcher(makeEmptyIndex(random, edge < 0 ? 65 : 0), true),\n        new IndexSearcher(makeEmptyIndex(random, 0), true),\n        0 == edge ? s : new IndexSearcher(makeEmptyIndex(random, 0), true)\n      }),\n      new IndexSearcher(makeEmptyIndex(random, 0 < edge ? 0 : 3), true),\n      new IndexSearcher(makeEmptyIndex(random, 0), true),\n      new MultiSearcher(new Searcher[] {\n        new IndexSearcher(makeEmptyIndex(random, 0 < edge ? 0 : 5), true),\n        new IndexSearcher(makeEmptyIndex(random, 0), true),\n        0 < edge ? s : new IndexSearcher(makeEmptyIndex(random, 0), true)\n      })\n    };\n    MultiSearcher out = new MultiSearcher(searchers);\n    out.setSimilarity(s.getSimilarity());\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Given a Searcher, returns a new MultiSearcher wrapping the  \n   * the original Searcher, \n   * as well as several \"empty\" IndexSearchers -- some of which will have\n   * deleted documents in them.  This new MultiSearcher \n   * should behave exactly the same as the original Searcher.\n   * @param s the Searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in hte middle, if positive s will be the last sub\n   */\n  public static MultiSearcher wrapSearcher(final Searcher s, final int edge) \n    throws IOException {\n\n    // we can't put deleted docs before the nested reader, because\n    // it will through off the docIds\n    Searcher[] searchers = new Searcher[] {\n      edge < 0 ? s : new IndexSearcher(makeEmptyIndex(0), true),\n      new MultiSearcher(new Searcher[] {\n        new IndexSearcher(makeEmptyIndex(edge < 0 ? 65 : 0), true),\n        new IndexSearcher(makeEmptyIndex(0), true),\n        0 == edge ? s : new IndexSearcher(makeEmptyIndex(0), true)\n      }),\n      new IndexSearcher(makeEmptyIndex(0 < edge ? 0 : 3), true),\n      new IndexSearcher(makeEmptyIndex(0), true),\n      new MultiSearcher(new Searcher[] {\n        new IndexSearcher(makeEmptyIndex(0 < edge ? 0 : 5), true),\n        new IndexSearcher(makeEmptyIndex(0), true),\n        0 < edge ? s : new IndexSearcher(makeEmptyIndex(0), true)\n      })\n    };\n    MultiSearcher out = new MultiSearcher(searchers);\n    out.setSimilarity(s.getSimilarity());\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/QueryUtils#wrapSearcher(Random,Searcher,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/QueryUtils#wrapSearcher(Searcher,int).mjava","sourceNew":"  /**\n   * Given a Searcher, returns a new MultiSearcher wrapping the  \n   * the original Searcher, \n   * as well as several \"empty\" IndexSearchers -- some of which will have\n   * deleted documents in them.  This new MultiSearcher \n   * should behave exactly the same as the original Searcher.\n   * @param s the Searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in hte middle, if positive s will be the last sub\n   */\n  public static MultiSearcher wrapSearcher(Random random, final Searcher s, final int edge) \n    throws IOException {\n\n    // we can't put deleted docs before the nested reader, because\n    // it will through off the docIds\n    Searcher[] searchers = new Searcher[] {\n      edge < 0 ? s : new IndexSearcher(makeEmptyIndex(random, 0), true),\n      new MultiSearcher(new Searcher[] {\n        new IndexSearcher(makeEmptyIndex(random, edge < 0 ? 65 : 0), true),\n        new IndexSearcher(makeEmptyIndex(random, 0), true),\n        0 == edge ? s : new IndexSearcher(makeEmptyIndex(random, 0), true)\n      }),\n      new IndexSearcher(makeEmptyIndex(random, 0 < edge ? 0 : 3), true),\n      new IndexSearcher(makeEmptyIndex(random, 0), true),\n      new MultiSearcher(new Searcher[] {\n        new IndexSearcher(makeEmptyIndex(random, 0 < edge ? 0 : 5), true),\n        new IndexSearcher(makeEmptyIndex(random, 0), true),\n        0 < edge ? s : new IndexSearcher(makeEmptyIndex(random, 0), true)\n      })\n    };\n    MultiSearcher out = new MultiSearcher(searchers);\n    out.setSimilarity(s.getSimilarity());\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Given a Searcher, returns a new MultiSearcher wrapping the  \n   * the original Searcher, \n   * as well as several \"empty\" IndexSearchers -- some of which will have\n   * deleted documents in them.  This new MultiSearcher \n   * should behave exactly the same as the original Searcher.\n   * @param s the Searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in hte middle, if positive s will be the last sub\n   */\n  public static MultiSearcher wrapSearcher(final Searcher s, final int edge) \n    throws IOException {\n\n    // we can't put deleted docs before the nested reader, because\n    // it will through off the docIds\n    Searcher[] searchers = new Searcher[] {\n      edge < 0 ? s : new IndexSearcher(makeEmptyIndex(0), true),\n      new MultiSearcher(new Searcher[] {\n        new IndexSearcher(makeEmptyIndex(edge < 0 ? 65 : 0), true),\n        new IndexSearcher(makeEmptyIndex(0), true),\n        0 == edge ? s : new IndexSearcher(makeEmptyIndex(0), true)\n      }),\n      new IndexSearcher(makeEmptyIndex(0 < edge ? 0 : 3), true),\n      new IndexSearcher(makeEmptyIndex(0), true),\n      new MultiSearcher(new Searcher[] {\n        new IndexSearcher(makeEmptyIndex(0 < edge ? 0 : 5), true),\n        new IndexSearcher(makeEmptyIndex(0), true),\n        0 < edge ? s : new IndexSearcher(makeEmptyIndex(0), true)\n      })\n    };\n    MultiSearcher out = new MultiSearcher(searchers);\n    out.setSimilarity(s.getSimilarity());\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/QueryUtils#wrapSearcher(Random,Searcher,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given a Searcher, returns a new MultiSearcher wrapping the  \n   * the original Searcher, \n   * as well as several \"empty\" IndexSearchers -- some of which will have\n   * deleted documents in them.  This new MultiSearcher \n   * should behave exactly the same as the original Searcher.\n   * @param s the Searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in hte middle, if positive s will be the last sub\n   */\n  public static MultiSearcher wrapSearcher(Random random, final Searcher s, final int edge) \n    throws IOException {\n\n    // we can't put deleted docs before the nested reader, because\n    // it will through off the docIds\n    Searcher[] searchers = new Searcher[] {\n      edge < 0 ? s : new IndexSearcher(makeEmptyIndex(random, 0), true),\n      new MultiSearcher(new Searcher[] {\n        new IndexSearcher(makeEmptyIndex(random, edge < 0 ? 65 : 0), true),\n        new IndexSearcher(makeEmptyIndex(random, 0), true),\n        0 == edge ? s : new IndexSearcher(makeEmptyIndex(random, 0), true)\n      }),\n      new IndexSearcher(makeEmptyIndex(random, 0 < edge ? 0 : 3), true),\n      new IndexSearcher(makeEmptyIndex(random, 0), true),\n      new MultiSearcher(new Searcher[] {\n        new IndexSearcher(makeEmptyIndex(random, 0 < edge ? 0 : 5), true),\n        new IndexSearcher(makeEmptyIndex(random, 0), true),\n        0 < edge ? s : new IndexSearcher(makeEmptyIndex(random, 0), true)\n      })\n    };\n    MultiSearcher out = new MultiSearcher(searchers);\n    out.setSimilarity(s.getSimilarity());\n    return out;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/QueryUtils#wrapSearcher(Random,Searcher,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Given a Searcher, returns a new MultiSearcher wrapping the  \n   * the original Searcher, \n   * as well as several \"empty\" IndexSearchers -- some of which will have\n   * deleted documents in them.  This new MultiSearcher \n   * should behave exactly the same as the original Searcher.\n   * @param s the Searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in hte middle, if positive s will be the last sub\n   */\n  public static MultiSearcher wrapSearcher(Random random, final Searcher s, final int edge) \n    throws IOException {\n\n    // we can't put deleted docs before the nested reader, because\n    // it will through off the docIds\n    Searcher[] searchers = new Searcher[] {\n      edge < 0 ? s : new IndexSearcher(makeEmptyIndex(random, 0), true),\n      new MultiSearcher(new Searcher[] {\n        new IndexSearcher(makeEmptyIndex(random, edge < 0 ? 65 : 0), true),\n        new IndexSearcher(makeEmptyIndex(random, 0), true),\n        0 == edge ? s : new IndexSearcher(makeEmptyIndex(random, 0), true)\n      }),\n      new IndexSearcher(makeEmptyIndex(random, 0 < edge ? 0 : 3), true),\n      new IndexSearcher(makeEmptyIndex(random, 0), true),\n      new MultiSearcher(new Searcher[] {\n        new IndexSearcher(makeEmptyIndex(random, 0 < edge ? 0 : 5), true),\n        new IndexSearcher(makeEmptyIndex(random, 0), true),\n        0 < edge ? s : new IndexSearcher(makeEmptyIndex(random, 0), true)\n      })\n    };\n    MultiSearcher out = new MultiSearcher(searchers);\n    out.setSimilarity(s.getSimilarity());\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/QueryUtils#wrapSearcher(Random,Searcher,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Given a Searcher, returns a new MultiSearcher wrapping the  \n   * the original Searcher, \n   * as well as several \"empty\" IndexSearchers -- some of which will have\n   * deleted documents in them.  This new MultiSearcher \n   * should behave exactly the same as the original Searcher.\n   * @param s the Searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in hte middle, if positive s will be the last sub\n   */\n  public static MultiSearcher wrapSearcher(Random random, final Searcher s, final int edge) \n    throws IOException {\n\n    // we can't put deleted docs before the nested reader, because\n    // it will through off the docIds\n    Searcher[] searchers = new Searcher[] {\n      edge < 0 ? s : new IndexSearcher(makeEmptyIndex(random, 0), true),\n      new MultiSearcher(new Searcher[] {\n        new IndexSearcher(makeEmptyIndex(random, edge < 0 ? 65 : 0), true),\n        new IndexSearcher(makeEmptyIndex(random, 0), true),\n        0 == edge ? s : new IndexSearcher(makeEmptyIndex(random, 0), true)\n      }),\n      new IndexSearcher(makeEmptyIndex(random, 0 < edge ? 0 : 3), true),\n      new IndexSearcher(makeEmptyIndex(random, 0), true),\n      new MultiSearcher(new Searcher[] {\n        new IndexSearcher(makeEmptyIndex(random, 0 < edge ? 0 : 5), true),\n        new IndexSearcher(makeEmptyIndex(random, 0), true),\n        0 < edge ? s : new IndexSearcher(makeEmptyIndex(random, 0), true)\n      })\n    };\n    MultiSearcher out = new MultiSearcher(searchers);\n    out.setSimilarity(s.getSimilarity());\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/QueryUtils#wrapSearcher(Random,Searcher,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Given a Searcher, returns a new MultiSearcher wrapping the  \n   * the original Searcher, \n   * as well as several \"empty\" IndexSearchers -- some of which will have\n   * deleted documents in them.  This new MultiSearcher \n   * should behave exactly the same as the original Searcher.\n   * @param s the Searcher to wrap\n   * @param edge if negative, s will be the first sub; if 0, s will be in hte middle, if positive s will be the last sub\n   */\n  public static MultiSearcher wrapSearcher(Random random, final Searcher s, final int edge) \n    throws IOException {\n\n    // we can't put deleted docs before the nested reader, because\n    // it will through off the docIds\n    Searcher[] searchers = new Searcher[] {\n      edge < 0 ? s : new IndexSearcher(makeEmptyIndex(random, 0), true),\n      new MultiSearcher(new Searcher[] {\n        new IndexSearcher(makeEmptyIndex(random, edge < 0 ? 65 : 0), true),\n        new IndexSearcher(makeEmptyIndex(random, 0), true),\n        0 == edge ? s : new IndexSearcher(makeEmptyIndex(random, 0), true)\n      }),\n      new IndexSearcher(makeEmptyIndex(random, 0 < edge ? 0 : 3), true),\n      new IndexSearcher(makeEmptyIndex(random, 0), true),\n      new MultiSearcher(new Searcher[] {\n        new IndexSearcher(makeEmptyIndex(random, 0 < edge ? 0 : 5), true),\n        new IndexSearcher(makeEmptyIndex(random, 0), true),\n        0 < edge ? s : new IndexSearcher(makeEmptyIndex(random, 0), true)\n      })\n    };\n    MultiSearcher out = new MultiSearcher(searchers);\n    out.setSimilarity(s.getSimilarity());\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["53a31399f2471493d67b19a95c028a74e0113b6a"],"53a31399f2471493d67b19a95c028a74e0113b6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","53a31399f2471493d67b19a95c028a74e0113b6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","53a31399f2471493d67b19a95c028a74e0113b6a"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["70ad682703b8585f5d0a637efec044d57ec05efb"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"53a31399f2471493d67b19a95c028a74e0113b6a":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7","9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["53a31399f2471493d67b19a95c028a74e0113b6a","9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}