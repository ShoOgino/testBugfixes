{"path":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testAbuseOfSort().mjava","commits":[{"id":"9001fdb834e467ef899e41c747c42b27b4d45099","date":1296775304,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testAbuseOfSort().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAbuseOfSort() {\n\n    assertU(adoc(\"id\", \"9999991\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn aaa sss ddd fff ggg\"));\n    assertU(adoc(\"id\", \"9999992\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn qqq www eee rrr ttt\"));\n\n    assertU(commit());\n  \n    try {\n      assertQ(\"sort on something that shouldn't work\",\n              req(\"q\", \"sortabuse_b:true\",\n                  \"sort\", \"sortabuse_t asc\"),\n              \"*[count(//doc)=2]\");\n      fail(\"no error encountered when sorting on sortabuse_t\");\n    } catch (Exception outer) {\n      // EXPECTED\n      Throwable root = getRootCause(outer);\n      assertEquals(\"sort exception root cause\", \n                   SolrException.class, root.getClass());\n      SolrException e = (SolrException) root;\n      assertEquals(\"incorrect error type\", \n                   SolrException.ErrorCode.BAD_REQUEST,\n                   SolrException.ErrorCode.getErrorCode(e.code()));\n      assertTrue(\"exception doesn't contain field name\",\n                 -1 != e.getMessage().indexOf(\"sortabuse_t\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testAbuseOfSort().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAbuseOfSort() {\n\n    assertU(adoc(\"id\", \"9999991\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn aaa sss ddd fff ggg\"));\n    assertU(adoc(\"id\", \"9999992\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn qqq www eee rrr ttt\"));\n\n    assertU(commit());\n  \n    try {\n      assertQ(\"sort on something that shouldn't work\",\n              req(\"q\", \"sortabuse_b:true\",\n                  \"sort\", \"sortabuse_t asc\"),\n              \"*[count(//doc)=2]\");\n      fail(\"no error encountered when sorting on sortabuse_t\");\n    } catch (Exception outer) {\n      // EXPECTED\n      Throwable root = getRootCause(outer);\n      assertEquals(\"sort exception root cause\", \n                   SolrException.class, root.getClass());\n      SolrException e = (SolrException) root;\n      assertEquals(\"incorrect error type\", \n                   SolrException.ErrorCode.BAD_REQUEST,\n                   SolrException.ErrorCode.getErrorCode(e.code()));\n      assertTrue(\"exception doesn't contain field name\",\n                 -1 != e.getMessage().indexOf(\"sortabuse_t\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testAbuseOfSort().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAbuseOfSort() {\n\n    assertU(adoc(\"id\", \"9999991\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn aaa sss ddd fff ggg\"));\n    assertU(adoc(\"id\", \"9999992\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn qqq www eee rrr ttt\"));\n\n    assertU(commit());\n  \n    try {\n      assertQ(\"sort on something that shouldn't work\",\n              req(\"q\", \"sortabuse_b:true\",\n                  \"sort\", \"sortabuse_t asc\"),\n              \"*[count(//doc)=2]\");\n      fail(\"no error encountered when sorting on sortabuse_t\");\n    } catch (Exception outer) {\n      // EXPECTED\n      Throwable root = getRootCause(outer);\n      assertEquals(\"sort exception root cause\", \n                   SolrException.class, root.getClass());\n      SolrException e = (SolrException) root;\n      assertEquals(\"incorrect error type\", \n                   SolrException.ErrorCode.BAD_REQUEST,\n                   SolrException.ErrorCode.getErrorCode(e.code()));\n      assertTrue(\"exception doesn't contain field name\",\n                 -1 != e.getMessage().indexOf(\"sortabuse_t\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a584be8cb4862c34bf730592c0fa244715819e6","date":1299009536,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testAbuseOfSort().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testAbuseOfSort().mjava","sourceNew":"  @Test\n  public void testAbuseOfSort() {\n\n    assertU(adoc(\"id\", \"9999991\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn aaa sss ddd fff ggg\"));\n    assertU(adoc(\"id\", \"9999992\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn qqq www eee rrr ttt\"));\n\n    assertU(commit());\n  \n    try {\n      ignoreException(\"can not sort on multivalued field: sortabuse_t\");\n      assertQ(\"sort on something that shouldn't work\",\n              req(\"q\", \"sortabuse_b:true\",\n                  \"sort\", \"sortabuse_t asc\"),\n              \"*[count(//doc)=2]\");\n      fail(\"no error encountered when sorting on sortabuse_t\");\n    } catch (Exception outer) {\n      // EXPECTED\n      Throwable root = getRootCause(outer);\n      assertEquals(\"sort exception root cause\", \n                   SolrException.class, root.getClass());\n      SolrException e = (SolrException) root;\n      assertEquals(\"incorrect error type\", \n                   SolrException.ErrorCode.BAD_REQUEST,\n                   SolrException.ErrorCode.getErrorCode(e.code()));\n      assertTrue(\"exception doesn't contain field name\",\n                 -1 != e.getMessage().indexOf(\"sortabuse_t\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAbuseOfSort() {\n\n    assertU(adoc(\"id\", \"9999991\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn aaa sss ddd fff ggg\"));\n    assertU(adoc(\"id\", \"9999992\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn qqq www eee rrr ttt\"));\n\n    assertU(commit());\n  \n    try {\n      assertQ(\"sort on something that shouldn't work\",\n              req(\"q\", \"sortabuse_b:true\",\n                  \"sort\", \"sortabuse_t asc\"),\n              \"*[count(//doc)=2]\");\n      fail(\"no error encountered when sorting on sortabuse_t\");\n    } catch (Exception outer) {\n      // EXPECTED\n      Throwable root = getRootCause(outer);\n      assertEquals(\"sort exception root cause\", \n                   SolrException.class, root.getClass());\n      SolrException e = (SolrException) root;\n      assertEquals(\"incorrect error type\", \n                   SolrException.ErrorCode.BAD_REQUEST,\n                   SolrException.ErrorCode.getErrorCode(e.code()));\n      assertTrue(\"exception doesn't contain field name\",\n                 -1 != e.getMessage().indexOf(\"sortabuse_t\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testAbuseOfSort().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testAbuseOfSort().mjava","sourceNew":"  @Test\n  public void testAbuseOfSort() {\n\n    assertU(adoc(\"id\", \"9999991\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn aaa sss ddd fff ggg\"));\n    assertU(adoc(\"id\", \"9999992\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn qqq www eee rrr ttt\"));\n\n    assertU(commit());\n  \n    try {\n      ignoreException(\"can not sort on multivalued field: sortabuse_t\");\n      assertQ(\"sort on something that shouldn't work\",\n              req(\"q\", \"sortabuse_b:true\",\n                  \"sort\", \"sortabuse_t asc\"),\n              \"*[count(//doc)=2]\");\n      fail(\"no error encountered when sorting on sortabuse_t\");\n    } catch (Exception outer) {\n      // EXPECTED\n      Throwable root = getRootCause(outer);\n      assertEquals(\"sort exception root cause\", \n                   SolrException.class, root.getClass());\n      SolrException e = (SolrException) root;\n      assertEquals(\"incorrect error type\", \n                   SolrException.ErrorCode.BAD_REQUEST,\n                   SolrException.ErrorCode.getErrorCode(e.code()));\n      assertTrue(\"exception doesn't contain field name\",\n                 -1 != e.getMessage().indexOf(\"sortabuse_t\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAbuseOfSort() {\n\n    assertU(adoc(\"id\", \"9999991\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn aaa sss ddd fff ggg\"));\n    assertU(adoc(\"id\", \"9999992\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn qqq www eee rrr ttt\"));\n\n    assertU(commit());\n  \n    try {\n      assertQ(\"sort on something that shouldn't work\",\n              req(\"q\", \"sortabuse_b:true\",\n                  \"sort\", \"sortabuse_t asc\"),\n              \"*[count(//doc)=2]\");\n      fail(\"no error encountered when sorting on sortabuse_t\");\n    } catch (Exception outer) {\n      // EXPECTED\n      Throwable root = getRootCause(outer);\n      assertEquals(\"sort exception root cause\", \n                   SolrException.class, root.getClass());\n      SolrException e = (SolrException) root;\n      assertEquals(\"incorrect error type\", \n                   SolrException.ErrorCode.BAD_REQUEST,\n                   SolrException.ErrorCode.getErrorCode(e.code()));\n      assertTrue(\"exception doesn't contain field name\",\n                 -1 != e.getMessage().indexOf(\"sortabuse_t\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testAbuseOfSort().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testAbuseOfSort().mjava","sourceNew":"  @Test\n  public void testAbuseOfSort() {\n\n    assertU(adoc(\"id\", \"9999991\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn aaa sss ddd fff ggg\"));\n    assertU(adoc(\"id\", \"9999992\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn qqq www eee rrr ttt\"));\n\n    assertU(commit());\n  \n    try {\n      ignoreException(\"can not sort on multivalued field: sortabuse_t\");\n      assertQ(\"sort on something that shouldn't work\",\n              req(\"q\", \"sortabuse_b:true\",\n                  \"sort\", \"sortabuse_t asc\"),\n              \"*[count(//doc)=2]\");\n      fail(\"no error encountered when sorting on sortabuse_t\");\n    } catch (Exception outer) {\n      // EXPECTED\n      Throwable root = getRootCause(outer);\n      assertEquals(\"sort exception root cause\", \n                   SolrException.class, root.getClass());\n      SolrException e = (SolrException) root;\n      assertEquals(\"incorrect error type\", \n                   SolrException.ErrorCode.BAD_REQUEST,\n                   SolrException.ErrorCode.getErrorCode(e.code()));\n      assertTrue(\"exception doesn't contain field name\",\n                 -1 != e.getMessage().indexOf(\"sortabuse_t\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAbuseOfSort() {\n\n    assertU(adoc(\"id\", \"9999991\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn aaa sss ddd fff ggg\"));\n    assertU(adoc(\"id\", \"9999992\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn qqq www eee rrr ttt\"));\n\n    assertU(commit());\n  \n    try {\n      assertQ(\"sort on something that shouldn't work\",\n              req(\"q\", \"sortabuse_b:true\",\n                  \"sort\", \"sortabuse_t asc\"),\n              \"*[count(//doc)=2]\");\n      fail(\"no error encountered when sorting on sortabuse_t\");\n    } catch (Exception outer) {\n      // EXPECTED\n      Throwable root = getRootCause(outer);\n      assertEquals(\"sort exception root cause\", \n                   SolrException.class, root.getClass());\n      SolrException e = (SolrException) root;\n      assertEquals(\"incorrect error type\", \n                   SolrException.ErrorCode.BAD_REQUEST,\n                   SolrException.ErrorCode.getErrorCode(e.code()));\n      assertTrue(\"exception doesn't contain field name\",\n                 -1 != e.getMessage().indexOf(\"sortabuse_t\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testAbuseOfSort().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testAbuseOfSort().mjava","sourceNew":"  @Test\n  public void testAbuseOfSort() {\n\n    assertU(adoc(\"id\", \"9999991\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn aaa sss ddd fff ggg\"));\n    assertU(adoc(\"id\", \"9999992\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn qqq www eee rrr ttt\"));\n\n    assertU(commit());\n  \n    try {\n      ignoreException(\"can not sort on multivalued field: sortabuse_t\");\n      assertQ(\"sort on something that shouldn't work\",\n              req(\"q\", \"sortabuse_b:true\",\n                  \"sort\", \"sortabuse_t asc\"),\n              \"*[count(//doc)=2]\");\n      fail(\"no error encountered when sorting on sortabuse_t\");\n    } catch (Exception outer) {\n      // EXPECTED\n      Throwable root = getRootCause(outer);\n      assertEquals(\"sort exception root cause\", \n                   SolrException.class, root.getClass());\n      SolrException e = (SolrException) root;\n      assertEquals(\"incorrect error type\", \n                   SolrException.ErrorCode.BAD_REQUEST,\n                   SolrException.ErrorCode.getErrorCode(e.code()));\n      assertTrue(\"exception doesn't contain field name\",\n                 -1 != e.getMessage().indexOf(\"sortabuse_t\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAbuseOfSort() {\n\n    assertU(adoc(\"id\", \"9999991\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn aaa sss ddd fff ggg\"));\n    assertU(adoc(\"id\", \"9999992\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn qqq www eee rrr ttt\"));\n\n    assertU(commit());\n  \n    try {\n      ignoreException(\"can not sort on multivalued field: sortabuse_t\");\n      assertQ(\"sort on something that shouldn't work\",\n              req(\"q\", \"sortabuse_b:true\",\n                  \"sort\", \"sortabuse_t asc\"),\n              \"*[count(//doc)=2]\");\n      fail(\"no error encountered when sorting on sortabuse_t\");\n    } catch (Exception outer) {\n      // EXPECTED\n      Throwable root = getRootCause(outer);\n      assertEquals(\"sort exception root cause\", \n                   SolrException.class, root.getClass());\n      SolrException e = (SolrException) root;\n      assertEquals(\"incorrect error type\", \n                   SolrException.ErrorCode.BAD_REQUEST,\n                   SolrException.ErrorCode.getErrorCode(e.code()));\n      assertTrue(\"exception doesn't contain field name\",\n                 -1 != e.getMessage().indexOf(\"sortabuse_t\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testAbuseOfSort().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testAbuseOfSort().mjava","sourceNew":"  @Test\n  public void testAbuseOfSort() {\n\n    assertU(adoc(\"id\", \"9999991\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn aaa sss ddd fff ggg\"));\n    assertU(adoc(\"id\", \"9999992\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn qqq www eee rrr ttt\"));\n\n    assertU(commit());\n  \n    try {\n      ignoreException(\"can not sort on multivalued field: sortabuse_t\");\n      assertQ(\"sort on something that shouldn't work\",\n              req(\"q\", \"sortabuse_b:true\",\n                  \"sort\", \"sortabuse_t asc\"),\n              \"*[count(//doc)=2]\");\n      fail(\"no error encountered when sorting on sortabuse_t\");\n    } catch (Exception outer) {\n      // EXPECTED\n      Throwable root = getRootCause(outer);\n      assertEquals(\"sort exception root cause\", \n                   SolrException.class, root.getClass());\n      SolrException e = (SolrException) root;\n      assertEquals(\"incorrect error type\", \n                   SolrException.ErrorCode.BAD_REQUEST,\n                   SolrException.ErrorCode.getErrorCode(e.code()));\n      assertTrue(\"exception doesn't contain field name\",\n                 -1 != e.getMessage().indexOf(\"sortabuse_t\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAbuseOfSort() {\n\n    assertU(adoc(\"id\", \"9999991\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn aaa sss ddd fff ggg\"));\n    assertU(adoc(\"id\", \"9999992\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn qqq www eee rrr ttt\"));\n\n    assertU(commit());\n  \n    try {\n      ignoreException(\"can not sort on multivalued field: sortabuse_t\");\n      assertQ(\"sort on something that shouldn't work\",\n              req(\"q\", \"sortabuse_b:true\",\n                  \"sort\", \"sortabuse_t asc\"),\n              \"*[count(//doc)=2]\");\n      fail(\"no error encountered when sorting on sortabuse_t\");\n    } catch (Exception outer) {\n      // EXPECTED\n      Throwable root = getRootCause(outer);\n      assertEquals(\"sort exception root cause\", \n                   SolrException.class, root.getClass());\n      SolrException e = (SolrException) root;\n      assertEquals(\"incorrect error type\", \n                   SolrException.ErrorCode.BAD_REQUEST,\n                   SolrException.ErrorCode.getErrorCode(e.code()));\n      assertTrue(\"exception doesn't contain field name\",\n                 -1 != e.getMessage().indexOf(\"sortabuse_t\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testAbuseOfSort().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testAbuseOfSort().mjava","sourceNew":"  @Test\n  public void testAbuseOfSort() {\n\n    assertU(adoc(\"id\", \"9999991\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn aaa sss ddd fff ggg\"));\n    assertU(adoc(\"id\", \"9999992\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn qqq www eee rrr ttt\"));\n\n    assertU(commit());\n  \n    try {\n      ignoreException(\"can not sort on multivalued field: sortabuse_t\");\n      assertQ(\"sort on something that shouldn't work\",\n              req(\"q\", \"sortabuse_b:true\",\n                  \"sort\", \"sortabuse_t asc\"),\n              \"*[count(//doc)=2]\");\n      fail(\"no error encountered when sorting on sortabuse_t\");\n    } catch (Exception outer) {\n      // EXPECTED\n      Throwable root = getRootCause(outer);\n      assertEquals(\"sort exception root cause\", \n                   SolrException.class, root.getClass());\n      SolrException e = (SolrException) root;\n      assertEquals(\"incorrect error type\", \n                   SolrException.ErrorCode.BAD_REQUEST,\n                   SolrException.ErrorCode.getErrorCode(e.code()));\n      assertTrue(\"exception doesn't contain field name\",\n                 -1 != e.getMessage().indexOf(\"sortabuse_t\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAbuseOfSort() {\n\n    assertU(adoc(\"id\", \"9999991\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn aaa sss ddd fff ggg\"));\n    assertU(adoc(\"id\", \"9999992\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn qqq www eee rrr ttt\"));\n\n    assertU(commit());\n  \n    try {\n      ignoreException(\"can not sort on multivalued field: sortabuse_t\");\n      assertQ(\"sort on something that shouldn't work\",\n              req(\"q\", \"sortabuse_b:true\",\n                  \"sort\", \"sortabuse_t asc\"),\n              \"*[count(//doc)=2]\");\n      fail(\"no error encountered when sorting on sortabuse_t\");\n    } catch (Exception outer) {\n      // EXPECTED\n      Throwable root = getRootCause(outer);\n      assertEquals(\"sort exception root cause\", \n                   SolrException.class, root.getClass());\n      SolrException e = (SolrException) root;\n      assertEquals(\"incorrect error type\", \n                   SolrException.ErrorCode.BAD_REQUEST,\n                   SolrException.ErrorCode.getErrorCode(e.code()));\n      assertTrue(\"exception doesn't contain field name\",\n                 -1 != e.getMessage().indexOf(\"sortabuse_t\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bde51b089eb7f86171eb3406e38a274743f9b7ac","7a584be8cb4862c34bf730592c0fa244715819e6"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["7a584be8cb4862c34bf730592c0fa244715819e6"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","7a584be8cb4862c34bf730592c0fa244715819e6"],"9001fdb834e467ef899e41c747c42b27b4d45099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["7a584be8cb4862c34bf730592c0fa244715819e6","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9001fdb834e467ef899e41c747c42b27b4d45099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["7a584be8cb4862c34bf730592c0fa244715819e6"],"7a584be8cb4862c34bf730592c0fa244715819e6":["9001fdb834e467ef899e41c747c42b27b4d45099"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9001fdb834e467ef899e41c747c42b27b4d45099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"9001fdb834e467ef899e41c747c42b27b4d45099":["29ef99d61cda9641b6250bf9567329a6e65f901d","7a584be8cb4862c34bf730592c0fa244715819e6","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9001fdb834e467ef899e41c747c42b27b4d45099","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7a584be8cb4862c34bf730592c0fa244715819e6":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","c903c3d15906a3da96b8c0c2fb704491005fdbdb","d619839baa8ce5503e496b94a9e42ad6f079293f","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}