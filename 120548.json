{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#getFieldValue(SolrDocument).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#getFieldValue(SolrDocument).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#getFieldValue(SolrDocument).mjava","sourceNew":"    /**\n     * Called by the {@link #inject} method to read the value(s) for a field\n     * This method supports reading of all \"matching\" fieldName's in the <code>SolrDocument</code>\n     *\n     * Returns <code>SolrDocument.getFieldValue</code> for regular fields,\n     * and <code>Map<String, List<Object>></code> for a dynamic field. The key is all matching fieldName's.\n     */\n    @SuppressWarnings(\"unchecked\")\n    private Object getFieldValue(SolrDocument sdoc){\n      Object fieldValue = sdoc.getFieldValue(name);\n      if(fieldValue != null) {\n        //this is not a dynamic field. so return te value\n        return fieldValue;\n      }\n      //reading dynamic field values\n      if(dynamicFieldNamePatternMatcher != null){\n        Map<String, Object> allValuesMap = null;\n        ArrayList allValuesList = null;\n        if(isContainedInMap){\n         allValuesMap = new HashMap<String, Object>();\n        } else {\n          allValuesList = new ArrayList();\n        }\n        for(String field : sdoc.getFieldNames()){\n          if(dynamicFieldNamePatternMatcher.matcher(field).find()){\n            Object val = sdoc.getFieldValue(field);\n            if(val == null) continue;\n            if(isContainedInMap){\n              if(isList){\n                if (!(val instanceof List)) {\n                  ArrayList al = new ArrayList();\n                  al.add(val);\n                  val = al;\n                }\n              } else if(isArray){\n                if (!(val instanceof List)) {\n                  Object[] arr= (Object[]) Array.newInstance(type,1);\n                  arr[0] = val;\n                  val= arr;\n                } else {\n                  val = Array.newInstance(type,((List)val).size());\n                }\n              }\n              allValuesMap.put(field, val);\n            }else {\n              if (val instanceof Collection) {\n                allValuesList.addAll((Collection) val);\n              } else {\n                allValuesList.add(val);\n              }\n            }\n          }\n        }\n        if (isContainedInMap) {\n          return allValuesMap.isEmpty() ? null : allValuesMap;\n        } else {\n          return allValuesList.isEmpty() ? null : allValuesList;\n        }\n      }\n      return null;\n    }\n\n","sourceOld":"    /**\n     * Called by the {@link #inject} method to read the value(s) for a field\n     * This method supports reading of all \"matching\" fieldName's in the <code>SolrDocument</code>\n     *\n     * Returns <code>SolrDocument.getFieldValue</code> for regular fields,\n     * and <code>Map<String, List<Object>></code> for a dynamic field. The key is all matching fieldName's.\n     */\n    @SuppressWarnings(\"unchecked\")\n    private Object getFieldValue(SolrDocument sdoc){\n      Object fieldValue = sdoc.getFieldValue(name);\n      if(fieldValue != null) {\n        //this is not a dynamic field. so return te value\n        return fieldValue;\n      }\n      //reading dynamic field values\n      if(dynamicFieldNamePatternMatcher != null){\n        Map<String, Object> allValuesMap = null;\n        ArrayList allValuesList = null;\n        if(isContainedInMap){\n         allValuesMap = new HashMap<String, Object>();\n        } else {\n          allValuesList = new ArrayList();\n        }\n        for(String field : sdoc.getFieldNames()){\n          if(dynamicFieldNamePatternMatcher.matcher(field).find()){\n            Object val = sdoc.getFieldValue(field);\n            if(val == null) continue;\n            if(isContainedInMap){\n              if(isList){\n                if (!(val instanceof List)) {\n                  ArrayList al = new ArrayList();\n                  al.add(val);\n                  val = al;\n                }\n              } else if(isArray){\n                if (!(val instanceof List)) {\n                  Object[] arr= (Object[]) Array.newInstance(type,1);\n                  arr[0] = val;\n                  val= arr;\n                } else {\n                  val = Array.newInstance(type,((List)val).size());\n                }\n              }\n              allValuesMap.put(field, val);\n            }else {\n              if (val instanceof Collection) {\n                allValuesList.addAll((Collection) val);\n              } else {\n                allValuesList.add(val);\n              }\n            }\n          }\n        }\n        if (isContainedInMap) {\n          return allValuesMap.isEmpty() ? null : allValuesMap;\n        } else {\n          return allValuesList.isEmpty() ? null : allValuesList;\n        }\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#getFieldValue(SolrDocument).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#getFieldValue(SolrDocument).mjava","sourceNew":"    /**\n     * Called by the {@link #inject} method to read the value(s) for a field\n     * This method supports reading of all \"matching\" fieldName's in the <code>SolrDocument</code>\n     *\n     * Returns <code>SolrDocument.getFieldValue</code> for regular fields,\n     * and <code>Map<String, List<Object>></code> for a dynamic field. The key is all matching fieldName's.\n     */\n    @SuppressWarnings(\"unchecked\")\n    private Object getFieldValue(SolrDocument sdoc){\n      Object fieldValue = sdoc.getFieldValue(name);\n      if(fieldValue != null) {\n        //this is not a dynamic field. so return te value\n        return fieldValue;\n      }\n      //reading dynamic field values\n      if(dynamicFieldNamePatternMatcher != null){\n        Map<String, Object> allValuesMap = null;\n        ArrayList allValuesList = null;\n        if(isContainedInMap){\n         allValuesMap = new HashMap<String, Object>();\n        } else {\n          allValuesList = new ArrayList();\n        }\n        for(String field : sdoc.getFieldNames()){\n          if(dynamicFieldNamePatternMatcher.matcher(field).find()){\n            Object val = sdoc.getFieldValue(field);\n            if(val == null) continue;\n            if(isContainedInMap){\n              if(isList){\n                if (!(val instanceof List)) {\n                  ArrayList al = new ArrayList();\n                  al.add(val);\n                  val = al;\n                }\n              } else if(isArray){\n                if (!(val instanceof List)) {\n                  Object[] arr= (Object[]) Array.newInstance(type,1);\n                  arr[0] = val;\n                  val= arr;\n                } else {\n                  val = Array.newInstance(type,((List)val).size());\n                }\n              }\n              allValuesMap.put(field, val);\n            }else {\n              if (val instanceof Collection) {\n                allValuesList.addAll((Collection) val);\n              } else {\n                allValuesList.add(val);\n              }\n            }\n          }\n        }\n        if (isContainedInMap) {\n          return allValuesMap.isEmpty() ? null : allValuesMap;\n        } else {\n          return allValuesList.isEmpty() ? null : allValuesList;\n        }\n      }\n      return null;\n    }\n\n","sourceOld":"    /**\n     * Called by the {@link #inject} method to read the value(s) for a field\n     * This method supports reading of all \"matching\" fieldName's in the <code>SolrDocument</code>\n     *\n     * Returns <code>SolrDocument.getFieldValue</code> for regular fields,\n     * and <code>Map<String, List<Object>></code> for a dynamic field. The key is all matching fieldName's.\n     */\n    @SuppressWarnings(\"unchecked\")\n    private Object getFieldValue(SolrDocument sdoc){\n      Object fieldValue = sdoc.getFieldValue(name);\n      if(fieldValue != null) {\n        //this is not a dynamic field. so return te value\n        return fieldValue;\n      }\n      //reading dynamic field values\n      if(dynamicFieldNamePatternMatcher != null){\n        Map<String, Object> allValuesMap = null;\n        ArrayList allValuesList = null;\n        if(isContainedInMap){\n         allValuesMap = new HashMap<String, Object>();\n        } else {\n          allValuesList = new ArrayList();\n        }\n        for(String field : sdoc.getFieldNames()){\n          if(dynamicFieldNamePatternMatcher.matcher(field).find()){\n            Object val = sdoc.getFieldValue(field);\n            if(val == null) continue;\n            if(isContainedInMap){\n              if(isList){\n                if (!(val instanceof List)) {\n                  ArrayList al = new ArrayList();\n                  al.add(val);\n                  val = al;\n                }\n              } else if(isArray){\n                if (!(val instanceof List)) {\n                  Object[] arr= (Object[]) Array.newInstance(type,1);\n                  arr[0] = val;\n                  val= arr;\n                } else {\n                  val = Array.newInstance(type,((List)val).size());\n                }\n              }\n              allValuesMap.put(field, val);\n            }else {\n              if (val instanceof Collection) {\n                allValuesList.addAll((Collection) val);\n              } else {\n                allValuesList.add(val);\n              }\n            }\n          }\n        }\n        if (isContainedInMap) {\n          return allValuesMap.isEmpty() ? null : allValuesMap;\n        } else {\n          return allValuesList.isEmpty() ? null : allValuesList;\n        }\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#getFieldValue(SolrDocument).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#getFieldValue(SolrDocument).mjava","sourceNew":"    /**\n     * Called by the {@link #inject} method to read the value(s) for a field\n     * This method supports reading of all \"matching\" fieldName's in the <code>SolrDocument</code>\n     *\n     * Returns <code>SolrDocument.getFieldValue</code> for regular fields,\n     * and <code>Map<String, List<Object>></code> for a dynamic field. The key is all matching fieldName's.\n     */\n    @SuppressWarnings(\"unchecked\")\n    private Object getFieldValue(SolrDocument sdoc){\n      Object fieldValue = sdoc.getFieldValue(name);\n      if(fieldValue != null) {\n        //this is not a dynamic field. so return te value\n        return fieldValue;\n      }\n      //reading dynamic field values\n      if(dynamicFieldNamePatternMatcher != null){\n        Map<String, Object> allValuesMap = null;\n        ArrayList allValuesList = null;\n        if(isContainedInMap){\n         allValuesMap = new HashMap<String, Object>();\n        } else {\n          allValuesList = new ArrayList();\n        }\n        for(String field : sdoc.getFieldNames()){\n          if(dynamicFieldNamePatternMatcher.matcher(field).find()){\n            Object val = sdoc.getFieldValue(field);\n            if(val == null) continue;\n            if(isContainedInMap){\n              if(isList){\n                if (!(val instanceof List)) {\n                  ArrayList al = new ArrayList();\n                  al.add(val);\n                  val = al;\n                }\n              } else if(isArray){\n                if (!(val instanceof List)) {\n                  Object[] arr= (Object[]) Array.newInstance(type,1);\n                  arr[0] = val;\n                  val= arr;\n                } else {\n                  val = Array.newInstance(type,((List)val).size());\n                }\n              }\n              allValuesMap.put(field, val);\n            }else {\n              if (val instanceof Collection) {\n                allValuesList.addAll((Collection) val);\n              } else {\n                allValuesList.add(val);\n              }\n            }\n          }\n        }\n        if (isContainedInMap) {\n          return allValuesMap.isEmpty() ? null : allValuesMap;\n        } else {\n          return allValuesList.isEmpty() ? null : allValuesList;\n        }\n      }\n      return null;\n    }\n\n","sourceOld":"    /**\n     * Called by the {@link #inject} method to read the value(s) for a field\n     * This method supports reading of all \"matching\" fieldName's in the <code>SolrDocument</code>\n     *\n     * Returns <code>SolrDocument.getFieldValue</code> for regular fields,\n     * and <code>Map<String, List<Object>></code> for a dynamic field. The key is all matching fieldName's.\n     */\n    @SuppressWarnings(\"unchecked\")\n    private Object getFieldValue(SolrDocument sdoc){\n      Object fieldValue = sdoc.getFieldValue(name);\n      if(fieldValue != null) {\n        //this is not a dynamic field. so return te value\n        return fieldValue;\n      }\n      //reading dynamic field values\n      if(dynamicFieldNamePatternMatcher != null){\n        Map<String, Object> allValuesMap = null;\n        ArrayList allValuesList = null;\n        if(isContainedInMap){\n         allValuesMap = new HashMap<String, Object>();\n        } else {\n          allValuesList = new ArrayList();\n        }\n        for(String field : sdoc.getFieldNames()){\n          if(dynamicFieldNamePatternMatcher.matcher(field).find()){\n            Object val = sdoc.getFieldValue(field);\n            if(val == null) continue;\n            if(isContainedInMap){\n              if(isList){\n                if (!(val instanceof List)) {\n                  ArrayList al = new ArrayList();\n                  al.add(val);\n                  val = al;\n                }\n              } else if(isArray){\n                if (!(val instanceof List)) {\n                  Object[] arr= (Object[]) Array.newInstance(type,1);\n                  arr[0] = val;\n                  val= arr;\n                } else {\n                  val = Array.newInstance(type,((List)val).size());\n                }\n              }\n              allValuesMap.put(field, val);\n            }else {\n              if (val instanceof Collection) {\n                allValuesList.addAll((Collection) val);\n              } else {\n                allValuesList.add(val);\n              }\n            }\n          }\n        }\n        if (isContainedInMap) {\n          return allValuesMap.isEmpty() ? null : allValuesMap;\n        } else {\n          return allValuesList.isEmpty() ? null : allValuesList;\n        }\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7622cbc3a8e5ea4d57a67d99978449606ec484bc","date":1313559942,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#getFieldValue(SolrDocument).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#getFieldValue(SolrDocument).mjava","sourceNew":"    /**\n     * Called by the {@link #inject} method to read the value(s) for a field\n     * This method supports reading of all \"matching\" fieldName's in the <code>SolrDocument</code>\n     *\n     * Returns <code>SolrDocument.getFieldValue</code> for regular fields,\n     * and <code>Map<String, List<Object>></code> for a dynamic field. The key is all matching fieldName's.\n     */\n    @SuppressWarnings(\"unchecked\")\n    private Object getFieldValue(SolrDocument sdoc){\n      Object fieldValue = sdoc.getFieldValue(name);\n      if (fieldValue != null) {\n        //this is not a dynamic field. so return te value\n        return fieldValue;\n      }\n      //reading dynamic field values\n      if (dynamicFieldNamePatternMatcher != null) {\n        Map<String, Object> allValuesMap = null;\n        List allValuesList = null;\n        if (isContainedInMap) {\n         allValuesMap = new HashMap<String, Object>();\n        } else {\n          allValuesList = new ArrayList();\n        }\n\n        for (String field : sdoc.getFieldNames()) {\n          if (dynamicFieldNamePatternMatcher.matcher(field).find()) {\n            Object val = sdoc.getFieldValue(field);\n            if (val == null) {\n              continue;\n            }\n\n            if (isContainedInMap) {\n              if (isList) {\n                if (!(val instanceof List)) {\n                  List al = new ArrayList();\n                  al.add(val);\n                  val = al;\n                }\n              } else if (isArray) {\n                if (!(val instanceof List)) {\n                  Object[] arr= (Object[]) Array.newInstance(type,1);\n                  arr[0] = val;\n                  val= arr;\n                } else {\n                  val = Array.newInstance(type,((List)val).size());\n                }\n              }\n              allValuesMap.put(field, val);\n            } else {\n              if (val instanceof Collection) {\n                allValuesList.addAll((Collection) val);\n              } else {\n                allValuesList.add(val);\n              }\n            }\n          }\n        }\n        if (isContainedInMap) {\n          return allValuesMap.isEmpty() ? null : allValuesMap;\n        } else {\n          return allValuesList.isEmpty() ? null : allValuesList;\n        }\n      }\n      return null;\n    }\n\n","sourceOld":"    /**\n     * Called by the {@link #inject} method to read the value(s) for a field\n     * This method supports reading of all \"matching\" fieldName's in the <code>SolrDocument</code>\n     *\n     * Returns <code>SolrDocument.getFieldValue</code> for regular fields,\n     * and <code>Map<String, List<Object>></code> for a dynamic field. The key is all matching fieldName's.\n     */\n    @SuppressWarnings(\"unchecked\")\n    private Object getFieldValue(SolrDocument sdoc){\n      Object fieldValue = sdoc.getFieldValue(name);\n      if(fieldValue != null) {\n        //this is not a dynamic field. so return te value\n        return fieldValue;\n      }\n      //reading dynamic field values\n      if(dynamicFieldNamePatternMatcher != null){\n        Map<String, Object> allValuesMap = null;\n        ArrayList allValuesList = null;\n        if(isContainedInMap){\n         allValuesMap = new HashMap<String, Object>();\n        } else {\n          allValuesList = new ArrayList();\n        }\n        for(String field : sdoc.getFieldNames()){\n          if(dynamicFieldNamePatternMatcher.matcher(field).find()){\n            Object val = sdoc.getFieldValue(field);\n            if(val == null) continue;\n            if(isContainedInMap){\n              if(isList){\n                if (!(val instanceof List)) {\n                  ArrayList al = new ArrayList();\n                  al.add(val);\n                  val = al;\n                }\n              } else if(isArray){\n                if (!(val instanceof List)) {\n                  Object[] arr= (Object[]) Array.newInstance(type,1);\n                  arr[0] = val;\n                  val= arr;\n                } else {\n                  val = Array.newInstance(type,((List)val).size());\n                }\n              }\n              allValuesMap.put(field, val);\n            }else {\n              if (val instanceof Collection) {\n                allValuesList.addAll((Collection) val);\n              } else {\n                allValuesList.add(val);\n              }\n            }\n          }\n        }\n        if (isContainedInMap) {\n          return allValuesMap.isEmpty() ? null : allValuesMap;\n        } else {\n          return allValuesList.isEmpty() ? null : allValuesList;\n        }\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35b292579499b440bb87b86a6b832d91a6f6dc2e","date":1313656166,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#getFieldValue(SolrDocument).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#getFieldValue(SolrDocument).mjava","sourceNew":"    /**\n     * Called by the {@link #inject} method to read the value(s) for a field\n     * This method supports reading of all \"matching\" fieldName's in the <code>SolrDocument</code>\n     *\n     * Returns <code>SolrDocument.getFieldValue</code> for regular fields,\n     * and <code>Map<String, List<Object>></code> for a dynamic field. The key is all matching fieldName's.\n     */\n    @SuppressWarnings(\"unchecked\")\n    private Object getFieldValue(SolrDocument solrDocument) {\n      Object fieldValue = solrDocument.getFieldValue(name);\n      if (fieldValue != null) {\n        //this is not a dynamic field. so return the value\n        return fieldValue;\n      }\n\n      if (dynamicFieldNamePatternMatcher == null) {\n        return null;\n      }\n\n      //reading dynamic field values\n      Map<String, Object> allValuesMap = null;\n      List allValuesList = null;\n      if (isContainedInMap) {\n        allValuesMap = new HashMap<String, Object>();\n      } else {\n        allValuesList = new ArrayList();\n      }\n\n      for (String field : solrDocument.getFieldNames()) {\n        if (dynamicFieldNamePatternMatcher.matcher(field).find()) {\n          Object val = solrDocument.getFieldValue(field);\n          if (val == null) {\n            continue;\n          }\n\n          if (isContainedInMap) {\n            if (isList) {\n              if (!(val instanceof List)) {\n                List al = new ArrayList();\n                al.add(val);\n                val = al;\n              }\n            } else if (isArray) {\n              if (!(val instanceof List)) {\n                Object[] arr = (Object[]) Array.newInstance(type, 1);\n                arr[0] = val;\n                val = arr;\n              } else {\n                val = Array.newInstance(type, ((List) val).size());\n              }\n            }\n            allValuesMap.put(field, val);\n          } else {\n            if (val instanceof Collection) {\n              allValuesList.addAll((Collection) val);\n            } else {\n              allValuesList.add(val);\n            }\n          }\n        }\n      }\n      if (isContainedInMap) {\n        return allValuesMap.isEmpty() ? null : allValuesMap;\n      } else {\n        return allValuesList.isEmpty() ? null : allValuesList;\n      }\n    }\n\n","sourceOld":"    /**\n     * Called by the {@link #inject} method to read the value(s) for a field\n     * This method supports reading of all \"matching\" fieldName's in the <code>SolrDocument</code>\n     *\n     * Returns <code>SolrDocument.getFieldValue</code> for regular fields,\n     * and <code>Map<String, List<Object>></code> for a dynamic field. The key is all matching fieldName's.\n     */\n    @SuppressWarnings(\"unchecked\")\n    private Object getFieldValue(SolrDocument sdoc){\n      Object fieldValue = sdoc.getFieldValue(name);\n      if (fieldValue != null) {\n        //this is not a dynamic field. so return te value\n        return fieldValue;\n      }\n      //reading dynamic field values\n      if (dynamicFieldNamePatternMatcher != null) {\n        Map<String, Object> allValuesMap = null;\n        List allValuesList = null;\n        if (isContainedInMap) {\n         allValuesMap = new HashMap<String, Object>();\n        } else {\n          allValuesList = new ArrayList();\n        }\n\n        for (String field : sdoc.getFieldNames()) {\n          if (dynamicFieldNamePatternMatcher.matcher(field).find()) {\n            Object val = sdoc.getFieldValue(field);\n            if (val == null) {\n              continue;\n            }\n\n            if (isContainedInMap) {\n              if (isList) {\n                if (!(val instanceof List)) {\n                  List al = new ArrayList();\n                  al.add(val);\n                  val = al;\n                }\n              } else if (isArray) {\n                if (!(val instanceof List)) {\n                  Object[] arr= (Object[]) Array.newInstance(type,1);\n                  arr[0] = val;\n                  val= arr;\n                } else {\n                  val = Array.newInstance(type,((List)val).size());\n                }\n              }\n              allValuesMap.put(field, val);\n            } else {\n              if (val instanceof Collection) {\n                allValuesList.addAll((Collection) val);\n              } else {\n                allValuesList.add(val);\n              }\n            }\n          }\n        }\n        if (isContainedInMap) {\n          return allValuesMap.isEmpty() ? null : allValuesMap;\n        } else {\n          return allValuesList.isEmpty() ? null : allValuesList;\n        }\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#getFieldValue(SolrDocument).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#getFieldValue(SolrDocument).mjava","sourceNew":"    /**\n     * Called by the {@link #inject} method to read the value(s) for a field\n     * This method supports reading of all \"matching\" fieldName's in the <code>SolrDocument</code>\n     *\n     * Returns <code>SolrDocument.getFieldValue</code> for regular fields,\n     * and <code>Map<String, List<Object>></code> for a dynamic field. The key is all matching fieldName's.\n     */\n    @SuppressWarnings(\"unchecked\")\n    private Object getFieldValue(SolrDocument solrDocument) {\n      Object fieldValue = solrDocument.getFieldValue(name);\n      if (fieldValue != null) {\n        //this is not a dynamic field. so return the value\n        return fieldValue;\n      }\n\n      if (dynamicFieldNamePatternMatcher == null) {\n        return null;\n      }\n\n      //reading dynamic field values\n      Map<String, Object> allValuesMap = null;\n      List allValuesList = null;\n      if (isContainedInMap) {\n        allValuesMap = new HashMap<>();\n      } else {\n        allValuesList = new ArrayList();\n      }\n\n      for (String field : solrDocument.getFieldNames()) {\n        if (dynamicFieldNamePatternMatcher.matcher(field).find()) {\n          Object val = solrDocument.getFieldValue(field);\n          if (val == null) {\n            continue;\n          }\n\n          if (isContainedInMap) {\n            if (isList) {\n              if (!(val instanceof List)) {\n                List al = new ArrayList();\n                al.add(val);\n                val = al;\n              }\n            } else if (isArray) {\n              if (!(val instanceof List)) {\n                Object[] arr = (Object[]) Array.newInstance(type, 1);\n                arr[0] = val;\n                val = arr;\n              } else {\n                val = Array.newInstance(type, ((List) val).size());\n              }\n            }\n            allValuesMap.put(field, val);\n          } else {\n            if (val instanceof Collection) {\n              allValuesList.addAll((Collection) val);\n            } else {\n              allValuesList.add(val);\n            }\n          }\n        }\n      }\n      if (isContainedInMap) {\n        return allValuesMap.isEmpty() ? null : allValuesMap;\n      } else {\n        return allValuesList.isEmpty() ? null : allValuesList;\n      }\n    }\n\n","sourceOld":"    /**\n     * Called by the {@link #inject} method to read the value(s) for a field\n     * This method supports reading of all \"matching\" fieldName's in the <code>SolrDocument</code>\n     *\n     * Returns <code>SolrDocument.getFieldValue</code> for regular fields,\n     * and <code>Map<String, List<Object>></code> for a dynamic field. The key is all matching fieldName's.\n     */\n    @SuppressWarnings(\"unchecked\")\n    private Object getFieldValue(SolrDocument solrDocument) {\n      Object fieldValue = solrDocument.getFieldValue(name);\n      if (fieldValue != null) {\n        //this is not a dynamic field. so return the value\n        return fieldValue;\n      }\n\n      if (dynamicFieldNamePatternMatcher == null) {\n        return null;\n      }\n\n      //reading dynamic field values\n      Map<String, Object> allValuesMap = null;\n      List allValuesList = null;\n      if (isContainedInMap) {\n        allValuesMap = new HashMap<String, Object>();\n      } else {\n        allValuesList = new ArrayList();\n      }\n\n      for (String field : solrDocument.getFieldNames()) {\n        if (dynamicFieldNamePatternMatcher.matcher(field).find()) {\n          Object val = solrDocument.getFieldValue(field);\n          if (val == null) {\n            continue;\n          }\n\n          if (isContainedInMap) {\n            if (isList) {\n              if (!(val instanceof List)) {\n                List al = new ArrayList();\n                al.add(val);\n                val = al;\n              }\n            } else if (isArray) {\n              if (!(val instanceof List)) {\n                Object[] arr = (Object[]) Array.newInstance(type, 1);\n                arr[0] = val;\n                val = arr;\n              } else {\n                val = Array.newInstance(type, ((List) val).size());\n              }\n            }\n            allValuesMap.put(field, val);\n          } else {\n            if (val instanceof Collection) {\n              allValuesList.addAll((Collection) val);\n            } else {\n              allValuesList.add(val);\n            }\n          }\n        }\n      }\n      if (isContainedInMap) {\n        return allValuesMap.isEmpty() ? null : allValuesMap;\n      } else {\n        return allValuesList.isEmpty() ? null : allValuesList;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef9659be74f43b907ff558f1bafe80488bb9f4b7","date":1423940662,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#getFieldValue(SolrDocument).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#getFieldValue(SolrDocument).mjava","sourceNew":"    /**\n     * Called by the {@link #inject} method to read the value(s) for a field\n     * This method supports reading of all \"matching\" fieldName's in the <code>SolrDocument</code>\n     *\n     * Returns <code>SolrDocument.getFieldValue</code> for regular fields,\n     * and <code>Map<String, List<Object>></code> for a dynamic field. The key is all matching fieldName's.\n     */\n    @SuppressWarnings(\"unchecked\")\n    private Object getFieldValue(SolrDocument solrDocument) {\n      if (child != null) {\n        List<SolrDocument> children = solrDocument.getChildDocuments();\n        if (children == null || children.isEmpty()) return null;\n        if (isList) {\n          ArrayList list = new ArrayList(children.size());\n          for (SolrDocument c : children) {\n            list.add(getBean(type, child, c));\n          }\n          return list;\n        } else if (isArray) {\n          Object[] arr = (Object[]) Array.newInstance(type, children.size());\n          for (int i = 0; i < children.size(); i++) {\n            arr[i] = getBean(type, child, children.get(i));\n          }\n          return arr;\n\n        } else {\n          return getBean(type, child, children.get(0));\n        }\n      }\n      Object fieldValue = solrDocument.getFieldValue(name);\n      if (fieldValue != null) {\n        //this is not a dynamic field. so return the value\n        return fieldValue;\n      }\n\n      if (dynamicFieldNamePatternMatcher == null) {\n        return null;\n      }\n\n      //reading dynamic field values\n      Map<String, Object> allValuesMap = null;\n      List allValuesList = null;\n      if (isContainedInMap) {\n        allValuesMap = new HashMap<>();\n      } else {\n        allValuesList = new ArrayList();\n      }\n\n      for (String field : solrDocument.getFieldNames()) {\n        if (dynamicFieldNamePatternMatcher.matcher(field).find()) {\n          Object val = solrDocument.getFieldValue(field);\n          if (val == null) {\n            continue;\n          }\n\n          if (isContainedInMap) {\n            if (isList) {\n              if (!(val instanceof List)) {\n                List al = new ArrayList();\n                al.add(val);\n                val = al;\n              }\n            } else if (isArray) {\n              if (!(val instanceof List)) {\n                Object[] arr = (Object[]) Array.newInstance(type, 1);\n                arr[0] = val;\n                val = arr;\n              } else {\n                val = Array.newInstance(type, ((List) val).size());\n              }\n            }\n            allValuesMap.put(field, val);\n          } else {\n            if (val instanceof Collection) {\n              allValuesList.addAll((Collection) val);\n            } else {\n              allValuesList.add(val);\n            }\n          }\n        }\n      }\n      if (isContainedInMap) {\n        return allValuesMap.isEmpty() ? null : allValuesMap;\n      } else {\n        return allValuesList.isEmpty() ? null : allValuesList;\n      }\n    }\n\n","sourceOld":"    /**\n     * Called by the {@link #inject} method to read the value(s) for a field\n     * This method supports reading of all \"matching\" fieldName's in the <code>SolrDocument</code>\n     *\n     * Returns <code>SolrDocument.getFieldValue</code> for regular fields,\n     * and <code>Map<String, List<Object>></code> for a dynamic field. The key is all matching fieldName's.\n     */\n    @SuppressWarnings(\"unchecked\")\n    private Object getFieldValue(SolrDocument solrDocument) {\n      Object fieldValue = solrDocument.getFieldValue(name);\n      if (fieldValue != null) {\n        //this is not a dynamic field. so return the value\n        return fieldValue;\n      }\n\n      if (dynamicFieldNamePatternMatcher == null) {\n        return null;\n      }\n\n      //reading dynamic field values\n      Map<String, Object> allValuesMap = null;\n      List allValuesList = null;\n      if (isContainedInMap) {\n        allValuesMap = new HashMap<>();\n      } else {\n        allValuesList = new ArrayList();\n      }\n\n      for (String field : solrDocument.getFieldNames()) {\n        if (dynamicFieldNamePatternMatcher.matcher(field).find()) {\n          Object val = solrDocument.getFieldValue(field);\n          if (val == null) {\n            continue;\n          }\n\n          if (isContainedInMap) {\n            if (isList) {\n              if (!(val instanceof List)) {\n                List al = new ArrayList();\n                al.add(val);\n                val = al;\n              }\n            } else if (isArray) {\n              if (!(val instanceof List)) {\n                Object[] arr = (Object[]) Array.newInstance(type, 1);\n                arr[0] = val;\n                val = arr;\n              } else {\n                val = Array.newInstance(type, ((List) val).size());\n              }\n            }\n            allValuesMap.put(field, val);\n          } else {\n            if (val instanceof Collection) {\n              allValuesList.addAll((Collection) val);\n            } else {\n              allValuesList.add(val);\n            }\n          }\n        }\n      }\n      if (isContainedInMap) {\n        return allValuesMap.isEmpty() ? null : allValuesMap;\n      } else {\n        return allValuesList.isEmpty() ? null : allValuesList;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7dfea4f7c80813344b0152e37fc18b31369e8ff","date":1592136683,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#getFieldValue(SolrDocument).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#getFieldValue(SolrDocument).mjava","sourceNew":"    /**\n     * Called by the {@link #inject} method to read the value(s) for a field\n     * This method supports reading of all \"matching\" fieldName's in the <code>SolrDocument</code>\n     *\n     * Returns <code>SolrDocument.getFieldValue</code> for regular fields,\n     * and <code>Map<String, List<Object>></code> for a dynamic field. The key is all matching fieldName's.\n     */\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    private Object getFieldValue(SolrDocument solrDocument) {\n      if (child != null) {\n        List<SolrDocument> children = solrDocument.getChildDocuments();\n        if (children == null || children.isEmpty()) return null;\n        if (isList) {\n          ArrayList list = new ArrayList(children.size());\n          for (SolrDocument c : children) {\n            list.add(getBean(type, child, c));\n          }\n          return list;\n        } else if (isArray) {\n          Object[] arr = (Object[]) Array.newInstance(type, children.size());\n          for (int i = 0; i < children.size(); i++) {\n            arr[i] = getBean(type, child, children.get(i));\n          }\n          return arr;\n\n        } else {\n          return getBean(type, child, children.get(0));\n        }\n      }\n      Object fieldValue = solrDocument.getFieldValue(name);\n      if (fieldValue != null) {\n        //this is not a dynamic field. so return the value\n        return fieldValue;\n      }\n\n      if (dynamicFieldNamePatternMatcher == null) {\n        return null;\n      }\n\n      //reading dynamic field values\n      Map<String, Object> allValuesMap = null;\n      List allValuesList = null;\n      if (isContainedInMap) {\n        allValuesMap = new HashMap<>();\n      } else {\n        allValuesList = new ArrayList();\n      }\n\n      for (String field : solrDocument.getFieldNames()) {\n        if (dynamicFieldNamePatternMatcher.matcher(field).find()) {\n          Object val = solrDocument.getFieldValue(field);\n          if (val == null) {\n            continue;\n          }\n\n          if (isContainedInMap) {\n            if (isList) {\n              if (!(val instanceof List)) {\n                List al = new ArrayList();\n                al.add(val);\n                val = al;\n              }\n            } else if (isArray) {\n              if (!(val instanceof List)) {\n                Object[] arr = (Object[]) Array.newInstance(type, 1);\n                arr[0] = val;\n                val = arr;\n              } else {\n                val = Array.newInstance(type, ((List) val).size());\n              }\n            }\n            allValuesMap.put(field, val);\n          } else {\n            if (val instanceof Collection) {\n              allValuesList.addAll((Collection) val);\n            } else {\n              allValuesList.add(val);\n            }\n          }\n        }\n      }\n      if (isContainedInMap) {\n        return allValuesMap.isEmpty() ? null : allValuesMap;\n      } else {\n        return allValuesList.isEmpty() ? null : allValuesList;\n      }\n    }\n\n","sourceOld":"    /**\n     * Called by the {@link #inject} method to read the value(s) for a field\n     * This method supports reading of all \"matching\" fieldName's in the <code>SolrDocument</code>\n     *\n     * Returns <code>SolrDocument.getFieldValue</code> for regular fields,\n     * and <code>Map<String, List<Object>></code> for a dynamic field. The key is all matching fieldName's.\n     */\n    @SuppressWarnings(\"unchecked\")\n    private Object getFieldValue(SolrDocument solrDocument) {\n      if (child != null) {\n        List<SolrDocument> children = solrDocument.getChildDocuments();\n        if (children == null || children.isEmpty()) return null;\n        if (isList) {\n          ArrayList list = new ArrayList(children.size());\n          for (SolrDocument c : children) {\n            list.add(getBean(type, child, c));\n          }\n          return list;\n        } else if (isArray) {\n          Object[] arr = (Object[]) Array.newInstance(type, children.size());\n          for (int i = 0; i < children.size(); i++) {\n            arr[i] = getBean(type, child, children.get(i));\n          }\n          return arr;\n\n        } else {\n          return getBean(type, child, children.get(0));\n        }\n      }\n      Object fieldValue = solrDocument.getFieldValue(name);\n      if (fieldValue != null) {\n        //this is not a dynamic field. so return the value\n        return fieldValue;\n      }\n\n      if (dynamicFieldNamePatternMatcher == null) {\n        return null;\n      }\n\n      //reading dynamic field values\n      Map<String, Object> allValuesMap = null;\n      List allValuesList = null;\n      if (isContainedInMap) {\n        allValuesMap = new HashMap<>();\n      } else {\n        allValuesList = new ArrayList();\n      }\n\n      for (String field : solrDocument.getFieldNames()) {\n        if (dynamicFieldNamePatternMatcher.matcher(field).find()) {\n          Object val = solrDocument.getFieldValue(field);\n          if (val == null) {\n            continue;\n          }\n\n          if (isContainedInMap) {\n            if (isList) {\n              if (!(val instanceof List)) {\n                List al = new ArrayList();\n                al.add(val);\n                val = al;\n              }\n            } else if (isArray) {\n              if (!(val instanceof List)) {\n                Object[] arr = (Object[]) Array.newInstance(type, 1);\n                arr[0] = val;\n                val = arr;\n              } else {\n                val = Array.newInstance(type, ((List) val).size());\n              }\n            }\n            allValuesMap.put(field, val);\n          } else {\n            if (val instanceof Collection) {\n              allValuesList.addAll((Collection) val);\n            } else {\n              allValuesList.add(val);\n            }\n          }\n        }\n      }\n      if (isContainedInMap) {\n        return allValuesMap.isEmpty() ? null : allValuesMap;\n      } else {\n        return allValuesList.isEmpty() ? null : allValuesList;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["35b292579499b440bb87b86a6b832d91a6f6dc2e"],"35b292579499b440bb87b86a6b832d91a6f6dc2e":["7622cbc3a8e5ea4d57a67d99978449606ec484bc"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["ef9659be74f43b907ff558f1bafe80488bb9f4b7"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ef9659be74f43b907ff558f1bafe80488bb9f4b7":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"7622cbc3a8e5ea4d57a67d99978449606ec484bc":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ef9659be74f43b907ff558f1bafe80488bb9f4b7"],"35b292579499b440bb87b86a6b832d91a6f6dc2e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["7622cbc3a8e5ea4d57a67d99978449606ec484bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ef9659be74f43b907ff558f1bafe80488bb9f4b7":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"],"7622cbc3a8e5ea4d57a67d99978449606ec484bc":["35b292579499b440bb87b86a6b832d91a6f6dc2e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}