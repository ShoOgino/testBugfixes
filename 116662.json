{"path":"sandbox/contributions/webcrawler-LARM/libs/HTTPClient-patch/HTTPClient/HTTPResponse#handleResponse().mjava","commits":[{"id":"bc6055f4a2e8e9f9caaec2297010c9502480ed69","date":1050060580,"type":0,"author":"cmarschner","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/libs/HTTPClient-patch/HTTPClient/HTTPResponse#handleResponse().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Processes a Response. This is done by calling the response handler in\n     * each module. When all is done, the various fields of this instance are\n     * intialized from the last Response.\n     *\n     * @return                     true if a new request was generated. This is\n     *      used for internal subrequests only\n     * @exception IOException      if any handler throws an IOException.\n     * @exception ModuleException  if any module encounters an exception.\n     */\n    synchronized boolean handleResponse()\n        throws IOException, ModuleException\n    {\n        if (initialized)\n        {\n            return false;\n        }\n\n        /*\n         *  first get the response if necessary\n         */\n        if (out_stream != null)\n        {\n            response = out_stream.getResponse();\n            response.http_resp = this;\n            out_stream = null;\n        }\n\n        /*\n         *  go through modules and handle them\n         */\n        doModules :\n        while (true)\n        {\n\n            Phase1 :\n            for (int idx = 0; idx < modules.length && !aborted; idx++)\n            {\n                try\n                {\n                    modules[idx].responsePhase1Handler(response, request);\n                }\n                catch (RetryException re)\n                {\n                    if (re.restart)\n                    {\n                        continue doModules;\n                    }\n                    else\n                    {\n                        throw re;\n                    }\n                }\n            }\n\n            Phase2 :\n            for (int idx = 0; idx < modules.length && !aborted; idx++)\n            {\n                int sts = modules[idx].responsePhase2Handler(response, request);\n                switch (sts)\n                {\n                    case RSP_CONTINUE:\n                        // continue processing\n                        break;\n                    case RSP_RESTART:\n                        // restart response processing\n                        idx = -1;\n                        continue doModules;\n                    case RSP_SHORTCIRC:\n                        // stop processing and return\n                        break doModules;\n                    case RSP_REQUEST:\n                    // go to phase 1\n                    case RSP_NEWCON_REQ:\n                        // process the request using a new con\n                        response.getInputStream().close();\n                        if (handle_trailers)\n                        {\n                            invokeTrailerHandlers(true);\n                        }\n                        if (request.internal_subrequest)\n                        {\n                            return true;\n                        }\n                        request.getConnection().\n                                handleRequest(request, this, response, true);\n                        if (initialized)\n                        {\n                            break doModules;\n                        }\n\n                        idx = -1;\n                        continue doModules;\n                    case RSP_SEND:\n                    // send the request immediately\n                    case RSP_NEWCON_SND:\n                        // send the request using a new con\n                        response.getInputStream().close();\n                        if (handle_trailers)\n                        {\n                            invokeTrailerHandlers(true);\n                        }\n                        if (request.internal_subrequest)\n                        {\n                            return true;\n                        }\n                        request.getConnection().\n                                handleRequest(request, this, response, false);\n                        idx = -1;\n                        continue doModules;\n                    default:\n                        // not valid\n                        throw new Error(\"HTTPClient Internal Error: invalid status\" +\n                                \" \" + sts + \" returned by module \" +\n                                modules[idx].getClass().getName());\n                }\n            }\n\n            Phase3 :\n            for (int idx = 0; idx < modules.length && !aborted; idx++)\n            {\n                modules[idx].responsePhase3Handler(response, request);\n            }\n\n            break doModules;\n        }\n\n        /*\n         *  force a read on the response in case none of the modules did\n         */\n        response.getStatusCode();\n\n        /*\n         *  all done, so copy data\n         */\n        if (!request.internal_subrequest)\n        {\n            init(response);\n        }\n\n        if (handle_trailers)\n        {\n            invokeTrailerHandlers(false);\n        }\n\n        return false;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afc16d717d9ed1a8e45371668ca6de674164d624","date":1103345442,"type":4,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"/dev/null","pathOld":"sandbox/contributions/webcrawler-LARM/libs/HTTPClient-patch/HTTPClient/HTTPResponse#handleResponse().mjava","sourceNew":null,"sourceOld":"    /**\n     * Processes a Response. This is done by calling the response handler in\n     * each module. When all is done, the various fields of this instance are\n     * intialized from the last Response.\n     *\n     * @return                     true if a new request was generated. This is\n     *      used for internal subrequests only\n     * @exception IOException      if any handler throws an IOException.\n     * @exception ModuleException  if any module encounters an exception.\n     */\n    synchronized boolean handleResponse()\n        throws IOException, ModuleException\n    {\n        if (initialized)\n        {\n            return false;\n        }\n\n        /*\n         *  first get the response if necessary\n         */\n        if (out_stream != null)\n        {\n            response = out_stream.getResponse();\n            response.http_resp = this;\n            out_stream = null;\n        }\n\n        /*\n         *  go through modules and handle them\n         */\n        doModules :\n        while (true)\n        {\n\n            Phase1 :\n            for (int idx = 0; idx < modules.length && !aborted; idx++)\n            {\n                try\n                {\n                    modules[idx].responsePhase1Handler(response, request);\n                }\n                catch (RetryException re)\n                {\n                    if (re.restart)\n                    {\n                        continue doModules;\n                    }\n                    else\n                    {\n                        throw re;\n                    }\n                }\n            }\n\n            Phase2 :\n            for (int idx = 0; idx < modules.length && !aborted; idx++)\n            {\n                int sts = modules[idx].responsePhase2Handler(response, request);\n                switch (sts)\n                {\n                    case RSP_CONTINUE:\n                        // continue processing\n                        break;\n                    case RSP_RESTART:\n                        // restart response processing\n                        idx = -1;\n                        continue doModules;\n                    case RSP_SHORTCIRC:\n                        // stop processing and return\n                        break doModules;\n                    case RSP_REQUEST:\n                    // go to phase 1\n                    case RSP_NEWCON_REQ:\n                        // process the request using a new con\n                        response.getInputStream().close();\n                        if (handle_trailers)\n                        {\n                            invokeTrailerHandlers(true);\n                        }\n                        if (request.internal_subrequest)\n                        {\n                            return true;\n                        }\n                        request.getConnection().\n                                handleRequest(request, this, response, true);\n                        if (initialized)\n                        {\n                            break doModules;\n                        }\n\n                        idx = -1;\n                        continue doModules;\n                    case RSP_SEND:\n                    // send the request immediately\n                    case RSP_NEWCON_SND:\n                        // send the request using a new con\n                        response.getInputStream().close();\n                        if (handle_trailers)\n                        {\n                            invokeTrailerHandlers(true);\n                        }\n                        if (request.internal_subrequest)\n                        {\n                            return true;\n                        }\n                        request.getConnection().\n                                handleRequest(request, this, response, false);\n                        idx = -1;\n                        continue doModules;\n                    default:\n                        // not valid\n                        throw new Error(\"HTTPClient Internal Error: invalid status\" +\n                                \" \" + sts + \" returned by module \" +\n                                modules[idx].getClass().getName());\n                }\n            }\n\n            Phase3 :\n            for (int idx = 0; idx < modules.length && !aborted; idx++)\n            {\n                modules[idx].responsePhase3Handler(response, request);\n            }\n\n            break doModules;\n        }\n\n        /*\n         *  force a read on the response in case none of the modules did\n         */\n        response.getStatusCode();\n\n        /*\n         *  all done, so copy data\n         */\n        if (!request.internal_subrequest)\n        {\n            init(response);\n        }\n\n        if (handle_trailers)\n        {\n            invokeTrailerHandlers(false);\n        }\n\n        return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bc6055f4a2e8e9f9caaec2297010c9502480ed69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afc16d717d9ed1a8e45371668ca6de674164d624":["bc6055f4a2e8e9f9caaec2297010c9502480ed69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["afc16d717d9ed1a8e45371668ca6de674164d624"]},"commit2Childs":{"bc6055f4a2e8e9f9caaec2297010c9502480ed69":["afc16d717d9ed1a8e45371668ca6de674164d624"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bc6055f4a2e8e9f9caaec2297010c9502480ed69"],"afc16d717d9ed1a8e45371668ca6de674164d624":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}