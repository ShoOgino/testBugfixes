{"path":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateShardState(ClusterState,ZkNodeProps).mjava","commits":[{"id":"0beaed456aa3358e5e4a99ea2aea994ef6c81de3","date":1365434191,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateShardState(ClusterState,ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"    private ClusterState updateShardState(ClusterState clusterState, ZkNodeProps message) {\n      String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      log.info(\"Update shard state invoked for collection: \" + collection);\n      for (String key : message.keySet()) {\n        if (ZkStateReader.COLLECTION_PROP.equals(key)) continue;\n        if (QUEUE_OPERATION.equals(key)) continue;\n\n        Slice slice = clusterState.getSlice(collection, key);\n        if (slice == null)  {\n          throw new RuntimeException(\"Overseer.updateShardState unknown collection: \" + collection + \" slice: \" + key);\n        }\n        log.info(\"Update shard state \" + key + \" to \" + message.getStr(key));\n        Map<String, Object> props = slice.shallowCopy();\n        props.put(Slice.STATE, message.getStr(key));\n        Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n        clusterState = updateSlice(clusterState, collection, newSlice);\n      }\n\n      return clusterState;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc841231667f1f315bae6799c068f9aad6543967","date":1381415189,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateShardState(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateShardState(ClusterState,ZkNodeProps).mjava","sourceNew":"    private ClusterState updateShardState(ClusterState clusterState, ZkNodeProps message) {\n      String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      log.info(\"Update shard state invoked for collection: \" + collection + \" with message: \" + message);\n      for (String key : message.keySet()) {\n        if (ZkStateReader.COLLECTION_PROP.equals(key)) continue;\n        if (QUEUE_OPERATION.equals(key)) continue;\n\n        Slice slice = clusterState.getSlice(collection, key);\n        if (slice == null)  {\n          throw new RuntimeException(\"Overseer.updateShardState unknown collection: \" + collection + \" slice: \" + key);\n        }\n        log.info(\"Update shard state \" + key + \" to \" + message.getStr(key));\n        Map<String, Object> props = slice.shallowCopy();\n        if (Slice.RECOVERY.equals(props.get(Slice.STATE)) && Slice.ACTIVE.equals(message.getStr(key))) {\n          props.remove(Slice.PARENT);\n        }\n        props.put(Slice.STATE, message.getStr(key));\n        Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n        clusterState = updateSlice(clusterState, collection, newSlice);\n      }\n\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState updateShardState(ClusterState clusterState, ZkNodeProps message) {\n      String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      log.info(\"Update shard state invoked for collection: \" + collection);\n      for (String key : message.keySet()) {\n        if (ZkStateReader.COLLECTION_PROP.equals(key)) continue;\n        if (QUEUE_OPERATION.equals(key)) continue;\n\n        Slice slice = clusterState.getSlice(collection, key);\n        if (slice == null)  {\n          throw new RuntimeException(\"Overseer.updateShardState unknown collection: \" + collection + \" slice: \" + key);\n        }\n        log.info(\"Update shard state \" + key + \" to \" + message.getStr(key));\n        Map<String, Object> props = slice.shallowCopy();\n        props.put(Slice.STATE, message.getStr(key));\n        Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n        clusterState = updateSlice(clusterState, collection, newSlice);\n      }\n\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29f5eaf296600e1665151e7929d42a3cbe22e481","date":1393983215,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateShardState(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateShardState(ClusterState,ZkNodeProps).mjava","sourceNew":"    private ClusterState updateShardState(ClusterState clusterState, ZkNodeProps message) {\n      String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      checkCollection(message, collection);\n      log.info(\"Update shard state invoked for collection: \" + collection + \" with message: \" + message);\n      for (String key : message.keySet()) {\n        if (ZkStateReader.COLLECTION_PROP.equals(key)) continue;\n        if (QUEUE_OPERATION.equals(key)) continue;\n\n        Slice slice = clusterState.getSlice(collection, key);\n        if (slice == null)  {\n          throw new RuntimeException(\"Overseer.updateShardState unknown collection: \" + collection + \" slice: \" + key);\n        }\n        log.info(\"Update shard state \" + key + \" to \" + message.getStr(key));\n        Map<String, Object> props = slice.shallowCopy();\n        if (Slice.RECOVERY.equals(props.get(Slice.STATE)) && Slice.ACTIVE.equals(message.getStr(key))) {\n          props.remove(Slice.PARENT);\n        }\n        props.put(Slice.STATE, message.getStr(key));\n        Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n        clusterState = updateSlice(clusterState, collection, newSlice);\n      }\n\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState updateShardState(ClusterState clusterState, ZkNodeProps message) {\n      String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      log.info(\"Update shard state invoked for collection: \" + collection + \" with message: \" + message);\n      for (String key : message.keySet()) {\n        if (ZkStateReader.COLLECTION_PROP.equals(key)) continue;\n        if (QUEUE_OPERATION.equals(key)) continue;\n\n        Slice slice = clusterState.getSlice(collection, key);\n        if (slice == null)  {\n          throw new RuntimeException(\"Overseer.updateShardState unknown collection: \" + collection + \" slice: \" + key);\n        }\n        log.info(\"Update shard state \" + key + \" to \" + message.getStr(key));\n        Map<String, Object> props = slice.shallowCopy();\n        if (Slice.RECOVERY.equals(props.get(Slice.STATE)) && Slice.ACTIVE.equals(message.getStr(key))) {\n          props.remove(Slice.PARENT);\n        }\n        props.put(Slice.STATE, message.getStr(key));\n        Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n        clusterState = updateSlice(clusterState, collection, newSlice);\n      }\n\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6df412542f3e2161f4bc2b13357b4a973195bfb7","date":1394040511,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateShardState(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateShardState(ClusterState,ZkNodeProps).mjava","sourceNew":"    private ClusterState updateShardState(ClusterState clusterState, ZkNodeProps message) {\n      String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      if (!checkCollectionKeyExistence(message)) return clusterState;\n      log.info(\"Update shard state invoked for collection: \" + collection + \" with message: \" + message);\n      for (String key : message.keySet()) {\n        if (ZkStateReader.COLLECTION_PROP.equals(key)) continue;\n        if (QUEUE_OPERATION.equals(key)) continue;\n\n        Slice slice = clusterState.getSlice(collection, key);\n        if (slice == null)  {\n          throw new RuntimeException(\"Overseer.updateShardState unknown collection: \" + collection + \" slice: \" + key);\n        }\n        log.info(\"Update shard state \" + key + \" to \" + message.getStr(key));\n        Map<String, Object> props = slice.shallowCopy();\n        if (Slice.RECOVERY.equals(props.get(Slice.STATE)) && Slice.ACTIVE.equals(message.getStr(key))) {\n          props.remove(Slice.PARENT);\n        }\n        props.put(Slice.STATE, message.getStr(key));\n        Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n        clusterState = updateSlice(clusterState, collection, newSlice);\n      }\n\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState updateShardState(ClusterState clusterState, ZkNodeProps message) {\n      String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      checkCollection(message, collection);\n      log.info(\"Update shard state invoked for collection: \" + collection + \" with message: \" + message);\n      for (String key : message.keySet()) {\n        if (ZkStateReader.COLLECTION_PROP.equals(key)) continue;\n        if (QUEUE_OPERATION.equals(key)) continue;\n\n        Slice slice = clusterState.getSlice(collection, key);\n        if (slice == null)  {\n          throw new RuntimeException(\"Overseer.updateShardState unknown collection: \" + collection + \" slice: \" + key);\n        }\n        log.info(\"Update shard state \" + key + \" to \" + message.getStr(key));\n        Map<String, Object> props = slice.shallowCopy();\n        if (Slice.RECOVERY.equals(props.get(Slice.STATE)) && Slice.ACTIVE.equals(message.getStr(key))) {\n          props.remove(Slice.PARENT);\n        }\n        props.put(Slice.STATE, message.getStr(key));\n        Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n        clusterState = updateSlice(clusterState, collection, newSlice);\n      }\n\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateShardState(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateShardState(ClusterState,ZkNodeProps).mjava","sourceNew":"    private ClusterState updateShardState(ClusterState clusterState, ZkNodeProps message) {\n      String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      if (!checkCollectionKeyExistence(message)) return clusterState;\n      log.info(\"Update shard state invoked for collection: \" + collection + \" with message: \" + message);\n      for (String key : message.keySet()) {\n        if (ZkStateReader.COLLECTION_PROP.equals(key)) continue;\n        if (QUEUE_OPERATION.equals(key)) continue;\n\n        Slice slice = clusterState.getSlice(collection, key);\n        if (slice == null)  {\n          throw new RuntimeException(\"Overseer.updateShardState unknown collection: \" + collection + \" slice: \" + key);\n        }\n        log.info(\"Update shard state \" + key + \" to \" + message.getStr(key));\n        Map<String, Object> props = slice.shallowCopy();\n        if (Slice.RECOVERY.equals(props.get(Slice.STATE)) && Slice.ACTIVE.equals(message.getStr(key))) {\n          props.remove(Slice.PARENT);\n        }\n        props.put(Slice.STATE, message.getStr(key));\n        Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n        clusterState = updateSlice(clusterState, collection, newSlice);\n      }\n\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState updateShardState(ClusterState clusterState, ZkNodeProps message) {\n      String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      log.info(\"Update shard state invoked for collection: \" + collection + \" with message: \" + message);\n      for (String key : message.keySet()) {\n        if (ZkStateReader.COLLECTION_PROP.equals(key)) continue;\n        if (QUEUE_OPERATION.equals(key)) continue;\n\n        Slice slice = clusterState.getSlice(collection, key);\n        if (slice == null)  {\n          throw new RuntimeException(\"Overseer.updateShardState unknown collection: \" + collection + \" slice: \" + key);\n        }\n        log.info(\"Update shard state \" + key + \" to \" + message.getStr(key));\n        Map<String, Object> props = slice.shallowCopy();\n        if (Slice.RECOVERY.equals(props.get(Slice.STATE)) && Slice.ACTIVE.equals(message.getStr(key))) {\n          props.remove(Slice.PARENT);\n        }\n        props.put(Slice.STATE, message.getStr(key));\n        Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n        clusterState = updateSlice(clusterState, collection, newSlice);\n      }\n\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfb6f3c8c119796b6a4ca83753599e3064b65305","date":1416760830,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateShardState(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateShardState(ClusterState,ZkNodeProps).mjava","sourceNew":"    private ClusterState updateShardState(ClusterState clusterState, ZkNodeProps message) {\n      String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      if (!checkCollectionKeyExistence(message)) return clusterState;\n      log.info(\"Updating shard state for collection: {}\", collection);\n      for (String key : message.keySet()) {\n        if (ZkStateReader.COLLECTION_PROP.equals(key)) continue;\n        if (QUEUE_OPERATION.equals(key)) continue;\n\n        Slice slice = clusterState.getSlice(collection, key);\n        if (slice == null)  {\n          throw new RuntimeException(\"Overseer.updateShardState unknown collection: \" + collection + \" slice: \" + key);\n        }\n        log.info(\"Update shard state \" + key + \" to \" + message.getStr(key));\n        Map<String, Object> props = slice.shallowCopy();\n        if (Slice.RECOVERY.equals(props.get(Slice.STATE)) && Slice.ACTIVE.equals(message.getStr(key))) {\n          props.remove(Slice.PARENT);\n        }\n        props.put(Slice.STATE, message.getStr(key));\n        Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n        clusterState = updateSlice(clusterState, collection, newSlice);\n      }\n\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState updateShardState(ClusterState clusterState, ZkNodeProps message) {\n      String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      if (!checkCollectionKeyExistence(message)) return clusterState;\n      log.info(\"Update shard state invoked for collection: \" + collection + \" with message: \" + message);\n      for (String key : message.keySet()) {\n        if (ZkStateReader.COLLECTION_PROP.equals(key)) continue;\n        if (QUEUE_OPERATION.equals(key)) continue;\n\n        Slice slice = clusterState.getSlice(collection, key);\n        if (slice == null)  {\n          throw new RuntimeException(\"Overseer.updateShardState unknown collection: \" + collection + \" slice: \" + key);\n        }\n        log.info(\"Update shard state \" + key + \" to \" + message.getStr(key));\n        Map<String, Object> props = slice.shallowCopy();\n        if (Slice.RECOVERY.equals(props.get(Slice.STATE)) && Slice.ACTIVE.equals(message.getStr(key))) {\n          props.remove(Slice.PARENT);\n        }\n        props.put(Slice.STATE, message.getStr(key));\n        Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n        clusterState = updateSlice(clusterState, collection, newSlice);\n      }\n\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24a5da2a0d397ff29f3de8f6cf451d3412c2509a","date":1417276391,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateShardState(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateShardState(ClusterState,ZkNodeProps).mjava","sourceNew":"    private ZkWriteCommand updateShardState(ClusterState clusterState, ZkNodeProps message) {\n      return new SliceMutator(getZkStateReader()).updateShardState(clusterState, message);\n    }\n\n","sourceOld":"    private ClusterState updateShardState(ClusterState clusterState, ZkNodeProps message) {\n      String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      if (!checkCollectionKeyExistence(message)) return clusterState;\n      log.info(\"Updating shard state for collection: {}\", collection);\n      for (String key : message.keySet()) {\n        if (ZkStateReader.COLLECTION_PROP.equals(key)) continue;\n        if (QUEUE_OPERATION.equals(key)) continue;\n\n        Slice slice = clusterState.getSlice(collection, key);\n        if (slice == null)  {\n          throw new RuntimeException(\"Overseer.updateShardState unknown collection: \" + collection + \" slice: \" + key);\n        }\n        log.info(\"Update shard state \" + key + \" to \" + message.getStr(key));\n        Map<String, Object> props = slice.shallowCopy();\n        if (Slice.RECOVERY.equals(props.get(Slice.STATE)) && Slice.ACTIVE.equals(message.getStr(key))) {\n          props.remove(Slice.PARENT);\n        }\n        props.put(Slice.STATE, message.getStr(key));\n        Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n        clusterState = updateSlice(clusterState, collection, newSlice);\n      }\n\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03f6fef27e0d27edc875c720e6ce5db17480a562","date":1417277285,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateShardState(ClusterState,ZkNodeProps).mjava","sourceNew":null,"sourceOld":"    private ZkWriteCommand updateShardState(ClusterState clusterState, ZkNodeProps message) {\n      return new SliceMutator(getZkStateReader()).updateShardState(clusterState, message);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29f5eaf296600e1665151e7929d42a3cbe22e481":["bc841231667f1f315bae6799c068f9aad6543967"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["bfb6f3c8c119796b6a4ca83753599e3064b65305"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":["bc841231667f1f315bae6799c068f9aad6543967","6df412542f3e2161f4bc2b13357b4a973195bfb7"],"03f6fef27e0d27edc875c720e6ce5db17480a562":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"bfb6f3c8c119796b6a4ca83753599e3064b65305":["6df412542f3e2161f4bc2b13357b4a973195bfb7"],"bc841231667f1f315bae6799c068f9aad6543967":["0beaed456aa3358e5e4a99ea2aea994ef6c81de3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6df412542f3e2161f4bc2b13357b4a973195bfb7":["29f5eaf296600e1665151e7929d42a3cbe22e481"],"0beaed456aa3358e5e4a99ea2aea994ef6c81de3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03f6fef27e0d27edc875c720e6ce5db17480a562"]},"commit2Childs":{"29f5eaf296600e1665151e7929d42a3cbe22e481":["6df412542f3e2161f4bc2b13357b4a973195bfb7"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["03f6fef27e0d27edc875c720e6ce5db17480a562"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"bc841231667f1f315bae6799c068f9aad6543967":["29f5eaf296600e1665151e7929d42a3cbe22e481","96ea64d994d340044e0d57aeb6a5871539d10ca5"],"bfb6f3c8c119796b6a4ca83753599e3064b65305":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"03f6fef27e0d27edc875c720e6ce5db17480a562":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0beaed456aa3358e5e4a99ea2aea994ef6c81de3"],"6df412542f3e2161f4bc2b13357b4a973195bfb7":["96ea64d994d340044e0d57aeb6a5871539d10ca5","bfb6f3c8c119796b6a4ca83753599e3064b65305"],"0beaed456aa3358e5e4a99ea2aea994ef6c81de3":["bc841231667f1f315bae6799c068f9aad6543967"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}