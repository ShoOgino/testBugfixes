{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene87/Lucene87StoredFieldsFormat.DeflateWithPresetDictCompressor#doCompress(byte[],int,int,DataOutput).mjava","commits":[{"id":"0db8230c9dbe474fc18e1e71cf04c1ada8046ec9","date":1598432674,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene87/Lucene87StoredFieldsFormat.DeflateWithPresetDictCompressor#doCompress(byte[],int,int,DataOutput).mjava","pathOld":"/dev/null","sourceNew":"    private void doCompress(byte[] bytes, int off, int len, DataOutput out) throws IOException {\n      if (len == 0) {\n        out.writeVInt(0);\n        return;\n      }\n      compressor.setInput(bytes, off, len);\n      compressor.finish();\n      if (compressor.needsInput()) {\n        throw new IllegalStateException();\n      }\n\n      int totalCount = 0;\n      for (;;) {\n        final int count = compressor.deflate(compressed, totalCount, compressed.length - totalCount);\n        totalCount += count;\n        assert totalCount <= compressed.length;\n        if (compressor.finished()) {\n          break;\n        } else {\n          compressed = ArrayUtil.grow(compressed);\n        }\n      }\n\n      out.writeVInt(totalCount);\n      out.writeBytes(compressed, totalCount);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9aefce86de8b17eed91ab011fb54d704d91102ef","date":1599128224,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene87/DeflateWithPresetDictCompressionMode.DeflateWithPresetDictCompressor#doCompress(byte[],int,int,DataOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene87/Lucene87StoredFieldsFormat.DeflateWithPresetDictCompressor#doCompress(byte[],int,int,DataOutput).mjava","sourceNew":"    private void doCompress(byte[] bytes, int off, int len, DataOutput out) throws IOException {\n      if (len == 0) {\n        out.writeVInt(0);\n        return;\n      }\n      compressor.setInput(bytes, off, len);\n      compressor.finish();\n      if (compressor.needsInput()) {\n        throw new IllegalStateException();\n      }\n\n      int totalCount = 0;\n      for (;;) {\n        final int count = compressor.deflate(compressed, totalCount, compressed.length - totalCount);\n        totalCount += count;\n        assert totalCount <= compressed.length;\n        if (compressor.finished()) {\n          break;\n        } else {\n          compressed = ArrayUtil.grow(compressed);\n        }\n      }\n\n      out.writeVInt(totalCount);\n      out.writeBytes(compressed, totalCount);\n    }\n\n","sourceOld":"    private void doCompress(byte[] bytes, int off, int len, DataOutput out) throws IOException {\n      if (len == 0) {\n        out.writeVInt(0);\n        return;\n      }\n      compressor.setInput(bytes, off, len);\n      compressor.finish();\n      if (compressor.needsInput()) {\n        throw new IllegalStateException();\n      }\n\n      int totalCount = 0;\n      for (;;) {\n        final int count = compressor.deflate(compressed, totalCount, compressed.length - totalCount);\n        totalCount += count;\n        assert totalCount <= compressed.length;\n        if (compressor.finished()) {\n          break;\n        } else {\n          compressed = ArrayUtil.grow(compressed);\n        }\n      }\n\n      out.writeVInt(totalCount);\n      out.writeBytes(compressed, totalCount);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9aefce86de8b17eed91ab011fb54d704d91102ef":["0db8230c9dbe474fc18e1e71cf04c1ada8046ec9"],"0db8230c9dbe474fc18e1e71cf04c1ada8046ec9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9aefce86de8b17eed91ab011fb54d704d91102ef"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0db8230c9dbe474fc18e1e71cf04c1ada8046ec9"],"9aefce86de8b17eed91ab011fb54d704d91102ef":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0db8230c9dbe474fc18e1e71cf04c1ada8046ec9":["9aefce86de8b17eed91ab011fb54d704d91102ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}